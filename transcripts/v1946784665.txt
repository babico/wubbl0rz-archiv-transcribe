Oh, hast du Geburtstag oder einfach nur so, wenn ja dann Graz, wie man so bei Level Ups
in MMOs früher gesagt hat oder für die Foulen damals GZ, sagt man das heute noch, ist das
heute noch online gültiges, ist das heute noch gültiges Online-Speak, wenn man anstatt
Glückwunsch oder sowas sagt GZ?
Ne, ich nicht, ich nicht, ich hatte, ich hatte erst, naja ist schon ein paar Monate her,
ich hatte, ja, ich bin auch noch mal 25km Fahrrad gefahren, obwohl ich noch nicht so
richtig 100%ig fit war nach der Riesentour am Samstag, oh ich merke es jetzt ein bisschen
aber es geht, es war heute nur flach, nicht 500 Höhenmeter wieder, moin Leute, es ist
ein bisschen, es ist ein bisschen blöd, dass so ein paar Oldschool Sachen, also Online-Speak
früher hatte schon mal so richtig, hatte schon so richtig coole Begriffe, aber vieles
ist irgendwie so ein bisschen auch in, weil niemand sagt mehr CU, außer ich zum Beispiel,
das schreibt auch keiner mehr, die schreiben halt alle BB und so komisches Zeug, aber CU
ist einfach die ultimative Online-Speak Verabschiedung, heute die Garmin-App sideloaden, ne, hab ich
heute, hab ich heute keine Gehirnkapazität frei weiter daran zu basteln, wir schwätzen
ein bisschen, gucken uns ein paar Sachen an, schauen uns vielleicht mal, achso, ja,
Leute, Chat gibt, für alle Linux-Admins oder Leute, die was damit zu tun haben, falls ihr
es noch nicht mitgekriegt habt, es gibt eine, na gut, bei Heise findest du ja mal wieder
irgendwie nix, es gibt eine Sicherheitslücke und zwar, genau, die hier, hab ich irgendwie
komplett, komplett verdrängt, aber das ist auch, das ist schon seit 2-3 Tagen bekannt,
falls ihr das nicht mitbekommen habt, es ist relativ einfach, wenn man sich auf dem System
einloggen kann, Ruhtrechte unter Linux zu bekommen, ich muss sagen, ich habe mir durchgelesen,
um was es geht, das hier ist nämlich, das ist auch geil, ne, Heise verlinkt hier und
du denkst dir so, aha, hier erfährst du mehr darüber und dann liest du den Heise-Artikel
durch und stellst fest, nein, man erfährt nicht mehr drüber, Heise, Heise-Logik, aber
wo man mehr darüber erfährt, ist in dem offiziellen, weil es offiziell ist, weiß ich nicht, in
dem Blogpost hier dazu, um was es geht und zwar, was ich nicht kapiert habe ist, ich
habe mir das, ich habe mir das nochmal grob überflogen durchgelesen, was ich nicht ganz
gecheckt habe ist, warum man Ruhtrechte bekommt, also ich habe, ich konnte die Sicherheitsprobleme
soweit nachvollziehen, nachdem ich das hier durchgelesen habe, warum das allerdings in
Ruhtrechte resultiert, habe ich nicht so hundertprozentig gecheckt, weil, an welcher Stelle läuft denn
da was mit Root, was irgendwie gehijackt wird oder so, das habe ich nicht so ganz kapiert,
aber zumindest, falls ihr, falls ihr irgendwie Linux-Kisten bei euch habt, dann solltet ihr
das nach Möglichkeit patchen, das ist natürlich nicht höchste Sicherheitsstufe, weil du kannst
das Ganze nicht Remote ausnutzen, aber sobald man irgendwie eine Shell hat auf dem System
oder sobald man irgendwie, ja, Custom-Sachen ausführen kann, dann hat man schon gelitten,
also hat man beispielsweise irgendein unsicheres PHP oder irgendwas drauf oder gar tatsächlich
einen normalen User, der SSH-Zugang hat, kommt ja auch öfters mal vor, hast du direkt Root
auf der Kiste, ja, das ist richtig, mit Alpine hast du keine Probleme, da läuft nicht GLIPC,
mit Alpine hast du ab und zu DNS-Auflösungsprobleme, aber jetzt kann man sich überlegen, was einem
lieber ist, öfters mal DNS-Probleme oder GLIPC-Sicherheitsprobleme, was ich ja auch
wieder super obskur finde ist, dass dieses Ding da überhaupt existiert, also wusste ich bis heute
über die Existenz dieser Environment-Variable nichts, dass es das überhaupt gibt.
DNS-Probleme, ja, DNS beispielsweise unter Alpine hat Probleme, wenn die Response, glaube ich,
über 512 Byte groß ist, was durchaus mal passieren kann, wenn viele Server returned werden oder
alles besonders lang ist oder wann es 1024, ich weiß nicht, Alpine, DNS, da gab es DNS-Probleme,
hier, DNS-Issues, vielleicht gibt es hier eine ordentliche Erklärung zu, ich weiß es nicht,
aber da ist Alpine bekannt für, dass es da immer mal wieder Probleme gab, was DNS-Probleme angeht,
aber wenn die Antwort zu groß ist, dann kackt das ab mit der Namensauflösung, ich verstehe auch nicht,
warum sie das nicht geschissen bekommen, vielleicht haben sie es mittlerweile auch schon hinbekommen,
ja, in dem konkreten Fall würde ich tatsächlich auch DNS-Probleme vorziehen, anstatt lokale Root-Privilege
zu bekommen, also andere bekommen, ich darf das ja bekommen, ich habe die Rechte, hey,
oh, ich sehe gerade, ich gucke gerade aufs Handy, mich hat jemand versucht von der Arbeit heute anzurufen,
oh, ich habe anscheinend etwas undurchsichtiges getrieben, und hat mich jemand angeschickt,
ich sehe es jetzt erst, hat sich aber anscheinend schon erledigt, ich sehe gerade eine Message
auf dem Firmenhandy, hey Max, sorry, dass ich dich an deinem freien Tag stören muss,
aber wie hast du die SQL-Datenbank in Protiploid, scheint zu obskur gewesen zu sein, was ich da gemacht habe,
kaum konnte man anscheinend schlicht nachvollziehen, wobei, das geht ganz normal über Terraform,
wie der Rest auch, kann man das schon patchen, ja, das kannst du patchen, die ganzen Distributionen
haben, oder alle, weiß ich nicht, aber die meisten Distributionen, genau, ich deploye Postgres nur noch
PR-Sync, oder nee, PR-Sync ist out, direkt in Git-Commit, einfach immer die Datenbank, und dann pullen,
wo du sie brauchst, das ist doch mal die Idee, Leute, ich finde, wir sollten irgendeinen Trend starten,
Shit, Shit, Shitcress, Shitcress, da wird quasi immer das komplette Datenbankverzeichnis in Git
eingecheckt, anstatt irgendwelche Dumps zu machen, oder Snapshots, oder sowas, richtig, das ist hyper-agile,
da wird richtig vertikal, wird da skaliert, nicht horizontal, äh, nicht vertikal, diagonal meine ich,
nicht vertikal, diagonal, dreidimensional, kubik-vertikal, du kannst alles schon patchen,
Ubuntu hat einen Patch, Shredder hat einen Patch, Debian hat einen Patch, ich gehe mal davon aus,
die meisten anderen auch, aber, also die Sicherheitslücke hier ist wirklich mal ausnahmsweise jetzt echt
bisschen, bisschen wilder, ja, es gibt ja öfters mal größere Sicherheitslücken, vieles ist lokal dann doch
schwieriger auszunutzen, als man denkt, die hier ist tatsächlich ein bisschen einfacher, weil da steht ja
auch irgendwo in diesem Original, boah, meine Auge, das kann ich mir doch so nicht angucken, steht ja auch
in diesem Blogpost drinne, wie das funktioniert, da wollte ich das übrigens gar nicht aufmachen gerade,
ich wollte das da aufmachen, da steht auch in dem Blogpost drinne, wie das funktioniert, ahja, übrigens,
beste Hackermann-Schriftgröße, ich hoffe ihr erkennt alles, ja, da steht hier zum Beispiel drinne, wenn der
Input zwei Variablen enthält, genau, hier, wenn in der Environment-Variable glibctunables drinsteht,
zum Beispiel tunable1 gleich tunable2 gleich AAA, so in der Richtung aufgebaut reicht das schon, um sich
Hutrechte zu erschleichen, natürlich ganz so einfach ist es nicht, ja, hier zeigen sie, wie das Ganze
crasht, man hat an der Stelle noch keine Root-Shell, hier unten erklären sie noch ein bisschen, wie sie dann
quasi hier von dem eigentlichen Crash, weil sie irgendwie out of bounds gelandet sind im Speicher,
drauf zugegriffen haben, wie sie dann hier letztendlich ihre Root-Shell bekommen haben, aber es ist relativ
easy, ja, und das ist wirklich mal eine Lücke, wo ich sagen würde, die sollte man wirklich schnellstmöglich
patchen, normalerweise kann man ja sagen, ey, solange das nicht remote ausnutzbar ist, ist zwar scheiße,
aber ist jetzt vielleicht nicht unbedingt, alles stehen und liegen lassen und patchen, aber in dem Fall
würde ich vielleicht nicht wirklich alles stehen und liegen lassen und patchen, aber doch schon sehr sehr
zeitnah das Ganze patchen, guck mal, hier schreibt sie ja auch, ja, das sollte man wirklich relativ zackig
machen, denn, wie gesagt, es reicht, wenn man in irgendeiner Art und Weise ein Shell-Befehl auf dem System
ausführen kann oder dass irgendwas, was auf dem Server läuft, verleiten kann dazu, ein Shell-Befehl auszuführen
und man braucht ja oftmals zwei Sachen, ja, du brauchst erstmal irgendwie die Möglichkeit, auf das System
draufzukommen und dann brauchst du irgendeine Möglichkeit, Root zu werden und der erste Schritt ist der schwierige
in dem Fall, aber wenn du drauf bist, war es jetzt ziemlich easy, dann direkt Root-Shell zu kriegen, also das würde
ich tatsächlich relativ schnell patchen. Irgendwas stand hier oben gerade noch mit, wäre auf Windows nicht
passiert, ist richtig, Linux-Sicherheitslücken passieren selten unter Windows, wobei ich mir gar nicht so sicher
bin, ob die zumindest nicht ansatzweise, natürlich dann nicht mit Administrator-Rechten, nicht auch WSL
betreffen würde. Natürlich ist aus WSL-Ausbrechen damit nicht getan. WSL, zumindest das Zweie, läuft in der
VM und Linux-Exploits, die gehen dann höchstens in der VM, aber immerhin, vielleicht ist WSL zumindest auch ein bisschen
davon betroffen. Ich weiß nicht, ob es das ist. Was ist der Unterschied zwischen Terraform und Ansible?
Das kann ich dir gleich erklären. Ja, der Darkseid hat einen neuen Job, neue Arbeit, bockt, steige jetzt tiefer in Ansible ein.
Gutschy Bass, good luck, have fun. Ich finde der Ansible ein bisschen nervig, muss ich ehrlich sagen, so cool das ist.
Ich finde Ansible ein bisschen nervig, aber ich finde so gut wie alle, egal was es für ein Tool ist, diese Infrastructure-
Management-Tools. Und man kann es ja grob alles zu IAC zählen, auch wenn es den Begriff noch nicht gab, als Ansible
aufgekommen ist. Das war ja erst so richtig mit Terraform, aber das hat ja ein bisschen Überschneidung, auch wenn es für
grundlegend schon mal andere Einsatzgebiete gedacht ist. Also irgendwie nervt mich jedes Tool, was es da gibt.
Und ich habe schon einige ausprobiert, also von CFEngine reden wir mal gar nicht. Hat jemand von euch die Ehre, früher
was mit CFEngine machen zu dürfen? Any CFEngine-ers? Hier, CFEngine-Example, MonkaS. Ja, so super modern ist das,
wie das Bild hier aussieht. Also falls irgendjemand mal was mit CFEngine zu tun hatte, der wird wissen, CFEngine
ist ein bisschen ein Abfuck. Aber für die damalige Zeit war es extrem Pog, weil CFEngine war wirklich das allererste
Server-Konfigurations-Management-Tool. Viel damit gemacht habe ich nicht, mir hat es gereicht, das einmal zu sehen.
Also wie gesagt, CFEngine, es haben alle Tools irgendwelche nervigen Sachen. Was ich bei Puppet wirklich cool finde,
ist, dass du einen ordentlichen Know-Up-Modus hast, dass du wirklich gucken kannst, was würde es machen, wenn du es ausführst.
Dafür kann man sich jetzt darüber streiten, ob diese Ruby-like Puppet-Syntax und das rein Deklarative, also in Puppet,
irgendwelche Abhängigkeiten zu definieren und rein folgen geht, ist aber wirklich nicht schön. Ob das so geil ist?
Bei Ansible nervt mich, dass es keinen ordentlichen Know-Up-Modus hat. Außer die Module unterstützen das,
aber so ein richtig nice Know-Up wie Puppet hat es nicht. Dafür ist Ansible recht logisch, finde ich, aufgebaut,
wie man da Sachen macht. Ansible selbst hat ja keinerlei State-Tracking. Das heißt, du hast nach wie vor das Problem,
dass du nicht weißt, wenn du was gelöscht hast, ob das dann auch wieder wegkommt auf dem System.
Und an Terraform nervt mich HCL. Ich muss euch ehrlich sagen, von all diesen Tools, am meisten mache ich aktuell mit Terraform.
Auch wenn, wie gesagt, Ansible und Terraform kommen ja gleich zu, für unterschiedliche Anwendungsgebiete hauptsächlich gedacht sind.
Aber das Terraform Markup nervt mich extrem. Das ist so unlogisch an vielen Stellen. Und nicht unter Azure.
Unter Google ist es bei uns. Aber unter Azure habe ich das auch schon gemacht.
Was ist eigentlich der Unterschied zwischen Terraform und Ansible? Okay, ganz kurz, versuche ich das mal kurz anzureißen,
zu erklären, was der Unterschied ist. Also, Ansible gibt es, glaube ich zumindest, schon etwas länger als Terraform.
Und dementsprechend kann man auch sagen, okay, also die kommen noch aus anderen Zeiten.
Wohingegen Ansible aus einer Zeit kommt, wo die Leute Konfigurationsmanagement-Tools benutzt haben, um wirkliche Server zu konfigurieren,
also VMs, es kann aber auch Hardware sein, aber hauptsächlich mal VMs, um wirklich echte, vollwertige Linux-Systeme zu konfigurieren,
ist Ansible quasi das Neueste der alten Generation von Config-Management-Tools.
Und ich finde auch, das Angenehmste hat aber auch seine ekligen Seiten.
Zumindest mit Ansible konfigurierst du vollständige Linux-VMs. Ich glaube, dass Ansible theoretisch auch Windows unterstützt.
Kann Ansible Windows, Leute? Wahrscheinlich. Aber das ist bestimmt kacke.
Puppet kann theoretisch auch Windows, ist aber auch kacke. Kann Ansible Windows? Ja, habe sogar mal irgendwann gesucht.
Also, mit Ansible konfigurierst du Server. Also, zum Beispiel User anlegen, Filesystem-Berechtigung setzen, so Geschichten.
Host-Einträge machen, Verzeichnisse anlegen und sowas. Also, du kannst einen kompletten Server, du kannst einen Server aufbauen,
dann lässt du Ansible drauflaufen und dann ist das Server am Ende in dem Zustand, wie er sein soll.
Irgendwann, und nachdem Ansible schon mal eine Weile am Start war, ging das Ganze dann immer mehr in Richtung Cloud-Infrastruktur.
Und dann war nicht mehr so sehr die Frage, oder sagen wir mal nicht nur die Frage, wie konfiguriere ich denn meine Infrastruktur,
nachdem sie da ist, sondern es war die eigentliche Frage, ja, wie kriege ich denn meine Infrastruktur erstmal?
Und da kamen dann zum Beispiel so Tools wie Terraform um die Ecke. Terraform ist nicht das Einzige, es gibt noch sowas wie Pulumi oder,
wie heißt dieses Ding von Azure? Biceps oder sowas? Aber Terraform ist mit Abstand das Verbreitetste.
Gefolgt von Pulumi, aber Terraform ist wirklich das Nummer Eins in diesem Segment.
Terraform ist dafür da, die Infrastruktur bereitzustellen, wohingegen Ansible dafür da ist, die Infrastruktur zu konfigurieren.
Allerdings kann Terraform auch Infrastruktur professionieren, die, also nicht nur VMs,
also du kannst mit Terraform zum Beispiel auch Kubernetes Cluster erstellen lassen, eine Managed Datenbank erstellen lassen,
und da braucht man dann Ansible in dem Fall nicht mehr hinten drauf.
Das ist eh so ein Ding, der Trend ging dadurch hin, also gerade durch Terraform und dass keiner so wirklich Bock hat auf zwei unterschiedliche Tools,
weil theoretisch brauchst du zwei unterschiedliche Tools. Mit Terraform kannst du dein Cloud-System aufbauen,
sag mal deine VMs bei Google und mit Ansible kannst du sie konfigurieren, wenn du ein bisschen was Komplizierteres brauchst.
So, und das Ding ist jetzt, da haben die Leute keinen großartigen Bock drauf gehabt, das zu machen.
Verständlicherweise, ich hab da auch keinen großen Bock drauf. Es gibt so ein paar Überschneidungen zwischen Terraform und Ansible.
Also du kannst theoretisch auch, glaube ich, in Ansible mit irgendeinem Azure- oder Google-Provider VMs erstellen,
aber Ansible hat nach wie vor kein State-Tracking und ich glaube, es ist sehr hakelig.
Also man sollte mal bei den Stärken der jeweiligen Tools bleiben.
Das heißt, theoretisch würdest du mit Terraform deine Cloud-VMs professionieren und mit Ansible konfigurieren.
Das Ding ist jetzt aber, der Trend ging die letzten Jahre ein bisschen weg davon, dass man beide Tools braucht,
weil man versucht hat, seine Cloud-Infrastruktur möglichst, ich nenne es jetzt mal, read-only zu machen,
weil ich mir gerade nicht sicher bin, wie das tolle Cloud-Native-Fachbegriff dafür ist.
Immutable? Nee. Es gibt so ein doofes Wort dafür.
Also man ist ein bisschen dazu hingegangen, seine Infrastruktur nach Möglichkeit so ein bisschen read-only zu machen.
Also sprich, das, was aus Terraform rausfällt, ist dann im Endeffekt auch schon das, was man haben will,
ohne dass man es mit Ansible professionieren muss.
Und das geht natürlich, wenn du containerisierte Workload hast, relativ gut,
weil da kannst du einfach ein Image bauen, was sich exakt, was alles dabei hat, was du brauchst,
was so konfiguriert ist, was du brauchst und du einfach nur noch starten musst.
Also sprich, das ist auch, denke ich mal, zumindest der Hauptgrund schlechthin,
warum es in den letzten, oder einer der Hauptgründe, warum es in den letzten Jahren,
also neben Skalierbarkeit und sonst was, einer der Hauptgründe,
warum in den letzten Jahren der Trend eindeutig weg von VMs geht.
VMs ist in vielen Fällen wirklich fein genug und wenn man auf ganz starke Isolationen wehrlegt,
sind VMs auch immer noch das Beste.
Aber der Trend der letzten Jahre war eindeutig Richtung Container-Workload anstelle von VM-Workload.
Und das ist halt schön, weil da kannst du, professionierst du deine Cloud-managed-Ressource mit Terraform,
zack, ist da, läuft, macht, was es soll.
Es unterstützen so gut wie alle Cloud-Plattformen mittlerweile direkt das Container ausführen
oder du professionierst halt ein Kubernetes-Cluster, deployst darauf zumindest.
Lange Rede, kurzer Sinn, Terraform ist zum professionieren der Infrastruktur,
Ansible ist zum konfigurieren der Infrastruktur.
Es hat ein bisschen, es überlappt sich ein bisschen,
mit Ansible kannst du mit mehr Aufwand auch Cloud-Infrastruktur anlegen,
mit Terraform kannst du mit Cloud-Init und ein paar Custom-Scripts auch die aufgebaute VM dann konfigurieren.
Aber so wirklich schön ist das in beiden Fällen nicht.
Und eine Sache, die Terraform hat, die Ansible nie bekommen wird, ist State-Tracking.
Nicht, dass ich Mist erzähle, ich behaupte das jetzt einfach mal.
Das ist State-Tracking.
Das heißt, alle Ressourcen, die Terraform anlegt, merkt sich Terraform
und wenn sich daran was ändert, dann erkennt das Terraform beim nächsten Run.
Also zum Beispiel, nimm mal was ganz simples.
Du stellst den Terraform ein, du willst eine Managed-Startenbank anlegen bei Google
und irgendjemand lockt sich dort ein, stellst den Terraform ein, ich will eine Postgres 14,
so und so viel RAM, so und so viel Speicherplatz, automatische Speicherplatzerweiterung,
ich lege 1, 2, 3, 4 User noch in der Datenbank an, das stellst du dann in Terraform ein und das ist gut.
Das merkt sich Terraform.
Und wenn jetzt irgendjemand hingeht außerhalb von Terraform,
und löscht einen deiner User, die du mit Terraform angelegt hast und lässt Terraform wieder laufen,
dann erkennt das Terraform und legt das wieder an.
Oder der benennt das um oder sowas.
Das erkennt Terraform und bringt das wieder in den Zustand, wie es sein soll.
Also wie gesagt, Terraform zum Aufbauen, Ansible zum Konfigurieren.
Terraform übrigens zum Aufbauen von jeglicher Cloud-Infrastruktur,
Ansible zum Konfigurieren von Linux-VMs.
So.
So viel dazu. Lange, ausführliche Antwort, aber ich hoffe es hat ein bisschen was gebracht.
Also nimm das Tool, was für deinen Anwendungszweck am besten ist.
So. Weiter geht's.
Ja. So kann man das auch sagen.
Aber ich war ausführlicher.
Du hast 10 Minuten Geschwätze darüber verpasst ungefähr, ja.
Ein Offline-PC, wo nur du drauf zugreifst, kannst du dir sparen.
Aber das war nur Gebate, gehe ich mal davon aus.
Du hast heute zum ersten Mal Puppet gesehen.
Puppet hat schon coole Sachen, wie gesagt, außer dass ein ordentlicher NOR-Modus eingebaut ist.
In Ansible müssen jetzt die Module ja ordentlich unterstützen.
Aber insgesamt würde ich auch Ansible bevorzugen.
Ein riesen Vorteil von Ansible hat's, ich hab das von der alten Arbeit letztens gehört,
weil dort ist noch relativ viel in Puppet.
Die werden jetzt alles in Ansible neu entwickeln, weil die finden einfach niemanden mehr, der sich mit Puppet auskennt.
Ich muss grad mal kurz gucken.
Was haben die für Sterne auf Ältschengrenzen?
7000 Sterne. Hat der Fiat Champion fast mehr.
Also die finden keine Leute mehr, die sich auskennen mit Puppet.
Das heißt Ansible sind das Ding halt für Konfigurationen.
Bei einer Kiste geht das ja noch.
Stell dir mal vor, eure gesamte Infrastruktur basiert auf CF-Engine, da hast du verloren.
Ja, aber wenn die Module das nicht ordentlich unterstützen...
Du musst dir mal ein Bild angucken von einem Puppet-NOR-Run.
Da ist es vollkommen egal, ob das irgendwie supported ist oder nicht.
Der zeigt dir einfach an, was er machen würde.
Also jeder Step ist quasi simulierbar.
Zumindest bis zu einem gewissen Grad.
Es ist jetzt nicht simulierbar, dass es jetzt einen Shell-Befehl aufruft, der eine Datenbank dumpft.
Aber zumindest den Step siehst du dann.
Morgen hast du schriftliche IHK-Prüfung.
Ist es soweit? Ja, stimmt.
Du bist doch eigentlich schon ein bisschen spät, gell?
Ich glaube, ich hatte meine im September sogar.
Oder...
Irgendwie so.
Bin mir gar nicht so sicher, wann ich die hatte.
Ach so.
Ach so.
Für Windows gibt es im Prinzip kein kostenloses Docker.
Stimmt das soweit?
Also, es gibt Docker für Windows.
Habe ich noch nie benutzt. Das ist alles Hörensagen, ja?
Habe ich noch nie benutzt.
Aber Docker für Windows ist, glaube ich, unter der Haube bloß eine Linux-VM.
Wo das dann drinnen läuft.
Ich finde, Kontainerisierung unter Windows ist...
Pepega.
Aber man will wahrscheinlich Ansible nicht für Windows verwenden, oder?
Also, Puppet unter Windows war richtig kacke.
Kann ich mich noch dran erinnern.
Du machst Crossplane. Crossplane finde ich super nice, vom Ansatz her.
Crossplane ist für mich leider noch ein bisschen zu wenig nachvollziehbar, was passiert.
Wir haben auch keinen ordentlichen NOR-Modus.
Also, bei Crossplane, was ich bisher davon gesehen habe,
würde es mir unglaublich schwer für mich sein,
mich sicher zu fühlen mit einer Änderung.
Ob die wirklich nur das macht, was ich machen will.
Weil so einen richtigen Plan und Approve-Step gibt es ja bei Crossplane soweit, ich weiß nicht.
Also, wie es bei Terraform ist.
Bei Terraform kannst du sagen, Plan und der nächste Schritt ist dein erster Apply.
Und du siehst erstmal im Plan, was er machen würde.
Und so eine NOR-Ausgabe gibt es soweit, ich weiß, in Crossplane nicht.
Was halt richtig dämlich ist.
Und da würde ich mich nie so richtig sicher fühlen, wenn ich da an produktive Infrastruktur drangehe.
Wobei Crossplane vom Ansatz her mega geil ist, mit Custom-Resourcen im Kubernetes-Cluster.
Also, da kannst du halt so Sachen machen wie,
Du deployst eine Kubernetes-App, legst aber hinten dran auch gleich die Datenbank an, die die braucht.
Und sowas. Das finde ich halt richtig nice.
Das kann zum Beispiel ein Entwickler auch hergehen, wenn du die Custom-Ressourcen bereitstellst.
Und irgendeinen Helm-Chart bauen, der für ihn dann auch gleich eine Datenbank professioniert.
Crossplane ist vom Ansatz her mega nice.
Ich glaube, zum alleinigen Managen meiner kompletten Infrastruktur wäre mir das aktuell aber noch nichts.
Aber für Ergänzungen zu Kubernetes-Apps finde ich das eine geile Sache.
Müssen wir uns auch mal irgendwann im Stream angucken.
Ich habe noch nie großartig was damit gemacht.
Ich habe es mir nur immer mal ein bisschen angeguckt und lese da öfters was zu.
An alle Datenschutzexperten im Chat.
Oje, Kekalu.
Jetzt geht's los.
An alle Datenschutzexperten im Chat.
Ich habe ein Auskunftsersuche nach DSGVO von meinem Arzt angefordert.
Das kam zurück. Sehr geehrter Herr, gerne komme ich...
Ja, das ist irgendein Formtext.
Sie können diese in Richtung einer Bearbeitungsgebühr von 25 Euro der Praxis abholen.
Darf ich Sie bitten, die Kostenübernahme schriftlich zu bestätigen, damit ich tätig werden kann?
Ich habe keine Ahnung, ob das kostenlos erfolgen muss.
Bei der Schufa oder so hast du, glaube ich, einmal im Jahr oder einmal im halben Jahr Recht auf eine kostenlose Auskunft.
Keine Ahnung, ob das nicht einmalig kostenlos passieren muss.
Oder wie auch immer kenne ich mich nicht aus.
Direkt Anzeige.
Anzeige Anwalt kündigen.
Und dann auf Reddit posten.
Wie würde man das in einer Pipeline verbinden?
Also Schritt 1, Terraformmaschinen anlegen.
Schritt 2, Ansible ausführen.
Wie erkennt Ansible die Server?
Ja, die zwei Tools miteinander zu verbinden ist nicht immer so easy.
Du könntest das so machen.
Du müsstest dann bloß irgendwie den Output von Terraform parsen.
Das habe ich übrigens, ich habe sowas bei mir auf der Arbeit gemacht, auf der aktuellen Arbeit.
Ich habe die...
Also, es ist so.
Wir haben ein Ansible...
Wie heißt das Ding?
Ansible Automation Plattform oder sowas.
Wo Leute Teams vorgefertigte Templates zur Verfügung stellen können, die man dann auf sein System ausführen kann.
Und das ist tatsächlich ein Problem, dass man den Output von Terraform in Ansible rein bekommt.
Ich habe es im Endeffekt so gemacht.
Bin mir gar nicht mehr so hundertprozentig sicher.
Ich habe in Terraform die Namen der VMs, die aufgebaut wurden.
Habe ich als Output definiert in Terraform.
Und dann in einem zweiten Step den Output von Terraform.
Terraform ist...
Die Name ist bescheuert.
Output heißt bei Terraform nur, dass es was ist, was man sich ausgeben lassen kann.
Nicht, dass es das automatisch ausgibt unbedingt.
Ich habe Schritt 1 Terraformmaschine anlegen.
Und in meinem Terraform Manifest, heißt das überhaupt so,
gab es eine Output Variable, wo die Namen der aufgebauten VMs drinne standen.
Dann hatte ich einen Zwischenschritt.
Schritt 2 war bei mir nicht Ansible ausführen.
Schritt 2 war bei mir Terraform Output List, oder wie auch immer das heißt, aufrufen.
Den Output in eine Datei pipen.
Mit Set etwas umformatieren.
Und dann AWX aufrufen.
Gegen diese Hosts mit den passenden Templates.
So habe ich es gemacht.
Man kann das Ganze aber auch viel einfacher machen.
Wenn du es nicht unbedingt über die Pipeline komplett machen musst,
dann kannst du nämlich einfach in ein Cloud-Init reinschreiben.
Check dir das Ansible Repo aus und führ Ansible auf dem Server aus.
Das ist die einfachste Variante.
Cloud-Init Ansible starten.
Wenn natürlich deine Maschine keinen Zugriff auf das Repo hat,
dann musst du irgendwie gucken, dass du das hinkopierst.
Und wenn Secrets im Repo liegen, irgendwas in Plaintext, was nicht auf dem Server liegen soll,
dann hast du Pech, dann musst du es so machen, wie ich es beschrieben habe.
Es gab übrigens letztens einen lustigen Bug in Terraform.
Mit 1.6.
Nämlich, dass einfach Terraform komplett gecrasht ist.
Irgendwo hier, Terraform init.
Irgendwo gab es hier letztens ein Ticket, dass Terraform nach dem 1.6er crasht.
Terraform crasht.
Kann man das mal sortieren nach News.
Hier, das da.
Ne.
Ja, genau.
Nicht OpenTofu, das ist offizielle Terraform crasht.
Ob OpenTofu auch crasht, weiß ich nicht.
Zumindest, das war nach 1.6 Release, gab es ein Bug,
dass bei ganz vielen Leuten Terraform gecrasht ist.
Bei uns, bei mir auf der Arbeit auch.
Ja, ist ein bisschen wie bei Terraform.
Ansible kann mehr oder weniger alles konfigurieren, wo es Provider für gibt.
Aber das überwiegende Teil dürften Deluxe-Server sein.
Wobei ich glaube, im Netzwerk-Infrastruktur-Umfeld ist Ansible auch sehr beliebt.
Würdest du sagen, es ist ein Must-Have, sich als Developer mit Terraform auszukennen?
Ne, würde ich nicht sagen.
Ich finde, es ist wichtiger, dass man sich damit beschäftigt,
wie beispielsweise Container-Images gebaut werden.
Und wie Container-Workloads in der Cloud laufen.
Also, wenn das für seine Anwendung relevant ist.
Weil dann baut man auch seine Anwendung entsprechend.
Zum Beispiel, nehm ich jetzt...
Ups, ich hab grad fast ins Mikrofon reingebissen.
Nehm ich jetzt mal ein aktuelles Beispiel von mir auf der Arbeit als Exempel.
Leute, also Entwickler, die sich auskennen mit Containerisierung und ein bisschen Cloud-Infrastruktur.
Die programmieren beispielsweise ordentliche Health-Checks für ihre Container.
Dass sie ordentlich containerisiert werden können.
Die anderen nicht.
Also ich denke, mit Terraform musst du dich nicht unbedingt auskennen.
Aber es ist auf jeden Fall nicht verkehrt, sich das mal anzugucken.
Und es ist auch auf jeden Fall nicht verkehrt, sich mit Cloud-Infrastruktur allgemein etwas auseinanderzusetzen.
Aber zumindest die Basics, was Docker-Files und Images erstellen und sowas sind.
Wie man ordentlich einen Health-Check erstellt und sowas.
Das würde ich mir auf jeden Fall schon mal angucken.
Das macht's nämlich für alle Beteiligten am Ende einfacher.
Und umgedreht würde ich auch sagen, auch Admins oder Cloud-Native-Fivehead-Architekten sollten sich auch ein bisschen mit Softwareentwicklung beschäftigen.
Dass, wie gesagt, wenn die eine Seite ein bisschen mehr Ahnung davon hat und die andere ein bisschen mehr davon, dann bringt das im Endeffekt allen was.
Moin Noah.
Ich mach da einen großen Bogen drum.
Ja, das habe ich auch gelesen.
Genau für sowas stelle ich es mir auch nice vor.
Helm keckt Javascript.
Haben wir nicht so ein Emote, wo dein Helm auf hat?
Oh, jetzt kommen die ganzen...
Halber Anwalt hier, der Chat.
Habe ich irgendwas überlesen?
Hier hat doch irgendjemand was super langes geschrieben eben noch.
Oder habe ich das schon...
Ne. Ach, das war das mit DSGVO.
Lul.
Ed Woblos, kennst du König Alexander Markus?
Ich hab keine Ahnung, wer das ist.
Herr Schocker, dankeschön für den Sub.
Max, hast du schon...
dein Datafield auf den Fahrradcomputer gepackt?
Nein, habe ich nicht gemacht.
Aber ich bin heute mal 25 Kilometer im Kreis gefahren.
Einfach, weil es mir danach war.
Ansonsten habe ich heute nichts mit meinem Fahrrad gemacht.
So.
So, Chat-Gib.
Haben wir irgendwelche spannenden Sachen hier noch, die wir uns anschauen können?
Was verdient ein Kirchenmusiker?
Okay, das ist mir ehrlich gesagt vollkommen wurscht,
was ein Kirchenmusiker verdient.
Also, ich guck ja...
Ich guck ja die Videos gerne, aber das interessiert mich mal so gar nicht.
Neues Kevin-Krummig-Video.
Was hat er denn? Hochgeladen?
Zeig mal.
Von dem haben wir auch schon ein paar geguckt.
So programmiere ich vier Stunden ohne Pause.
Mit 100% Fokus.
Da bin ich mal gespannt.
Also, das...
Leute, okay.
Real Talk.
Ich sag euch jetzt auch mal, wie man theoretisch...
Wenn man das wirklich durchhalten würde...
Das hinbekommt.
Das erste ist, Twitter aus.
Handy auf Do Not Disturb stellen und Teams auf Do Not Disturb stellen.
Irgendwelche komischen Instagram-Sonstwas, falls man da regelmäßig reinguckt, aus.
Irgendeine Chill-Sonstwas-Playlist anmachen.
Und nach Möglichkeiten kein anderen Shit im Hintergrund laufen haben.
Oder rüberswitchen in die VM, wo man sonst nichts machen kann.
Und sich wirklich zusammenreißen.
Dass man nicht einfach aus der VM raus-tabbt.
Ansonsten gibt es jetzt hier wahrscheinlich irgendwelche super-krassen-Fat-Produktivitäts-Tipps.
Aber ich denke, vier Stunden kann man ganz gut hinbekommen.
Wobei ich ehrlich sagen würde, vier Stunden 100% ohne Pause ist jetzt zumindest nix.
Ich kann das auf der Arbeit schon mal eh nicht machen, weil ich zwischendrin schon 85 verschiedene Meetings hatte.
Genau mein Gedanke gerade.
Aber nur für den Fall der Fälle, man hätte die nicht.
Aber angenommen man hätte die nicht...
Was wollte ich jetzt sagen?
Ich würde sagen, selbst wenn ich die Zeit hätte...
Ich weiß nicht, ob es für mich persönlich so erstrebenswert wäre...
Ob das mein Anspruch wäre, vier Stunden ohne Pause 100% Fokus am Stück.
Ich glaube, wenn man vier Stunden am Stück mit 90% Fokus und ab und zu mal kurz aufs Klo zwischendurch geht, ist das auch gut genug.
Man darf nur nicht in die Falle tappen, beim sich wieder an den Rechner setzen, irgendwie sich sidetracken zu lassen.
Weil wenn du dich erstmal sidetracken lässt durch irgendeinen Kram, dann bist du verloren.
Und außerdem habe ich festgestellt, es hilft, gerade wenn man am Programmieren ist, tatsächlich oftmals sich fünf Minuten aufs Klo zu setzen.
Irgendwas, wenn es ein bisschen länger dauert, auf dem Tablet anzumachen.
Und da fallen einem manchmal spontan richtig gute Sachen ein, die man genau dafür, was man eigentlich gerade baut, brauchen kann.
Okay, gucken wir uns das tatsächlich mal an.
Gucken wir uns das mal an.
Wann warst du das letzte Mal so richtig fokussiert?
Also so, dass du wirklich alles um dich herum vergessen hast und richtig viel lernen oder coden konntest.
Also so richtig in der Zone warst.
Wahrscheinlich ist es bei dir schon eine ganze Weile her und ganz unter uns.
Ich lasse mich auch von jeder Kleinigkeit ablenken.
Du sitzt am Schreibtisch und programmierst fokussiert und boom.
Dazu kann ich nur sagen.
Es reißt dich voll aus dem Flow.
Oder du stehst auf, weil du etwas brauchst, aber es gerade nicht zur Hand hast.
Überlege mal, wie oft dein Handy dir unwichtige Benachrichtigungen anzeigt.
Du liest nur mal schnell diese eine Nachricht.
Danach öffnest du komplett automatisiert TikTok und scrollst wie ein Hirnkoder.
Das ist ja das, was ich gesagt habe.
Dann bist du komplett lost.
Ich finde aber auch, ab und zu ist das am Tag durchaus mal okay.
Man darf sich aber halt nicht komplett sidetracken lassen.
Was ein bisschen auf andere Gedanken kommt.
Tagsüber für ein paar Minuten finde ich überhaupt nicht schlecht.
Aber ja, wenn man das jedes Mal macht und dann vom Hundertste ins Tausende Videos scrollt,
dann ist es natürlich schlecht.
Irgendwelche Nonsense-Videos.
Das hört sich ja zu vorwurfsvoll an, aber wie gesagt, ich bin davon nicht ausgeschlossen.
Ich greife ständig zu meinem Handy, deswegen musste dafür unbedingt eine Lösung her.
Mein System, um stundenlang programmieren zu können und richtig Fortschritte zu machen, erkläre ich dir jetzt.
Auch wieso dieser Würfel eine ganz besondere Rolle dabei spiegelt.
Außerdem gibt es noch einen Geheimtipp, den du garantiert zum ersten Mal hören wirst.
Selbst wenn du dich schon länger intensiv mit Produktivität ...
Jetzt werden die Erwartungen aber hier ins Unermessliche gepusht.
... und Zeitmanagement beschäftigst.
Aber generell alles ganz easy für dich umsetzbar.
Auf YouTube findest du haufenweise Videos, wie du wohl 8, 12 oder 24 Stunden am Stück durchcoden kannst.
Ja, wahrscheinlich irgendwelche Substanzen einschmieren.
So wie dieser Typ letztens, wo wir das Video geguckt haben.
Was hat der eine Typ letztens erzählt im Video, als er bei Google gearbeitet hat?
Hat er danach aus seinem Kühlschrank erstmal irgendwie eine Packung voller ...
Was hat er sich reingehauen?
Und danach ...
Danach ging es ihm voll schlecht.
Wo ich mir auch gedacht habe, Alter ...
Das war jetzt aber ...
Schnell eskaliert das Video.
Also, das kannst du machen.
Aber 24 Stunden ist ja komplett unrealistisch.
Ich halte es ja schon für unrealistisch.
Also, hat er jetzt nicht gesagt ...
Ich meine nur, er hat ja gerade Videos angesprochen, die ...
Das suggerieren, sie könnten das einem erklären.
Also, 24 Stunden halte ich mal für nahezu aussichtslos.
Wirklich, komplett am Stück dran zu bleiben.
Es ist für die meisten Leute, die in so einem Bürojob arbeiten, oder die programmieren, oder die in irgendeinem IT-Beruf arbeiten ...
Selbst 8 Stunden ist eigentlich schon nicht realistisch machbar.
Und lassen wir mal die ganzen Meetings weg.
Es ist auch nicht wirklich erforderlich, die ganzen 8 Stunden.
Ja, man hat so viele Braindertätigkeiten, die man machen muss.
Von 5 Zeiterfassungssystemen, von irgendwelchen, wie gesagt, Meetings, Gruppenrunde, sonst was.
Wobei da durchaus sinnvolle Sachen drinne vorkommen.
Irgendwelche Sachen kurz besprechen.
Irgendwelche E-Mails sich angucken.
Es gibt tausende Sachen, da musst du nicht 100%ig fokussiert sein.
Also ich denke mal, es ist schon ein guter Wert, wenn man mal so auf 3 Stunden am Tag wirklich tolle Konzentration, oder sagen wir mal, überwiegende Konzentration bekommt.
Den Rest kann man mit irgendwelchen Low-IQ-Tätigkeiten verbringen, die auch gemacht werden müssen.
Plus Meetings und andere Sachen.
Und dann hat man trotzdem einen ziemlich guten Arbeitstag hinter sich.
Sagen wir mal ganz ehrlich, das machst du vielleicht ein- oder zweimal am Stück und danach bist du wirklich komplett am Ende.
Wie hoch wird wohl die Wahrscheinlichkeit sein, dass du das regelmäßig machst?
Du ahnst es schon, sie geht gegen Null.
Deshalb gehen wir in diesem Video von einem Arbeitsblock von 4 Stunden aus.
Also 100% fokussiert und ohne Ablenkung.
Du wirst erstaunt sein, wie viel man in 4 Stunden geschafft bekommen wird.
Man kann enorm viele kriegen, ja.
4 Stunden sind noch eine Dauer, die du jeden Tag ohne Probleme durchziehen kannst, ohne dass dir danach der Kopf qualmt.
Wir wollen hier ja schließlich ein System.
Am besten, und wisst ihr was richtig cool wäre, aber ich glaube nicht, dass wir das in Deutschland in nächster Zeit, also in der normalen Unternehmenskultur hier erleben würden.
Wisst ihr was richtig cool wäre?
Wenn du 4 Stunden voll fokussiert wärst und deine Arbeit geschafft hast, dass du dann einfach sagen kannst,
CU, ich hau ab.
Und irgendjemand, der sich laufend sidetracken lässt und 7 Stunden für braucht oder 8 Stunden, der muss halt 8 Stunden da bleiben.
Das wäre eine richtig krasse Motivation.
Dann würde ich 3-4 Stunden wirklich volle Pulle mich konzentrieren und danach würde ich erstmal 2 Stunden rausgehen und mich hinlegen.
Oder würde ich mich erstmal noch eine Stunde hinlegen und dann noch irgendwie 2 Stunden Fahrrad fahren oder sowas.
Aber das passiert hier halt nicht.
Hier ist das eher so, du hast schon recht, bei vielen ist das so,
hier bist du dann so nach dem Motto, ach ja, kannst du nicht mal da nochmal kurz gucken, kannst du nicht mal hier mal gucken.
Deswegen sag ich ja auch, hier bei uns, also generell, nicht nur bei uns, also generell ist das glaube ich immer sinnvoll,
wenn man coole Sachen macht und mindestens genauso viel Zeit darauf verschwendet, drüber zu reden, dass man coole Sachen gemacht hat.
Themen etablieren, dass du jeden Tag durchziehen kannst und dafür sind 4 Stunden perfekt.
Zuallererst musst du natürlich das Offensichtlichste für dich herausfinden.
Zu welcher Tageszeit bist du am produktivsten? Eine Antwort für alle gibt es da nicht.
Ich bin tatsächlich früh morgens, direkt wenn ich an den Rechner komme und es ist noch nicht viel los, keine Teams-Messages und sowas.
Menschen sind einfach Nachteulen oder die persönlichen Lebensumstände lassen es nicht zu, dass du deine Zeit...
Also bei mir ist es definitiv vormittags, bei mir ist es definitiv vormittags.
Ich persönlich bin ein Morgenmensch, also relativ zeitnah nach dem Aufstehen mache ich Sport und gehe dann direkt an die Arbeit.
Viele von euch sind wahrscheinlich auch bei Nachtaktiv.
Morgen ist wieder eine Runde Rennen angesagt bei mir auch.
Also mach deine Coding-Session dann, wann du dich am produktivsten fühlst und am meisten Energie hast.
Morgens aufstehen, Sport machen, frühstücken und dann direkt ans Coding gehen kann für dich zum Beispiel komplett unrealistisch sein.
Du hast es endlich Zeit gefunden und möchtest deine Coding-Session starten, also setzte dich einfach an deinen Schreibtisch und willst direkt durchstarten.
Und das ist der große Fehler. Das wird nicht funktionieren, weil du dir erstmal ein richtiges Setting schaffen musst.
Und damit meine ich jetzt nicht dein Setup mit Monitoren, Maus und Tastatur, obwohl es damit schon ein bisschen mehr Spaß macht.
Was ich damit eigentlich meine ist, dass du dir vor deiner Session gut überlegen musst, was du in diesen vier Stunden überhaupt erreichen möchtest.
Ich persönlich benutze dafür sehr gerne kleine Post-its, die ich mir am Vortag, bevor ich Feierabend mache, vollschreibe.
Skript schreiben. Das ist gut, das kann man immer hängen lassen, weil das ist so vage. Da kann man einfach immer was machen dran.
Dort bleiben sie dann ständig für mich sichtbar und ich komme nicht auf die Gedanken, irgendetwas anderes zu machen, was aktuell gar nicht wichtig ist.
Was ist das? Flutter? Ist das Flutter, was wir hier sehen?
Ich komme nicht auf die Gedanken, irgendetwas anderes zu machen, was aktuell gar nicht wichtig ist.
Hör mir das nicht so ganz... Ja, ne? Oder? Ne, Swift. Ne, was ist das? Ne, das ist nicht Flutter. Das ist... Das ist auf jeden Fall Swift.
Es sieht aber schon ein bisschen aus wie Flutter. Swift UI.
Schreibe dir auch gerne andere Dinge auf, die du vielleicht nicht am nächsten Tag, sondern am übernächsten Tag oder so machen möchtest, aber klebe sie dir nicht an deinen Monitor, sondern irgendwo anders hin.
Also direkt vor dir wirklich nur die Aufgaben, die du erledigen möchtest.
Also ich habe ganz simpel eine To-Do-TXT, dass ich auch die Sachen nicht vergesse. Ja, da steht zum Beispiel drinnen für morgen, dass ich, witzig, dass ich heute eine Nachricht dazu gekriegt habe, dass ich das Datenbankinitialisieren noch in unser Aufbau-Tool packe, sodass man nichts mehr von Hand ausführen muss.
Aber ansonsten, wo man es aufschreibt, ist ja egal.
Hast du gewusst, dass dein Gehirn zu 75% aus Wasser besteht? Selbst ein geringer Wassermangel...
Also ich glaube, wir bestehen allgemein zu 75% aus Wasser, oder?
...Mangel hat sehr tiefe Auswirkungen auf deine Konzentration. Im schlimmsten Fall bekommst du dann auch noch Kopfschmerzen und versuche dann mal eine sinnvolle Zeile Code zu programmieren.
Deshalb musst du es dir so einfach wie möglich machen, dass du eben genügend trinkst.
Ja, das stimmt.
Das hört sich echt trivial an, aber...
Ja, die meisten machen das nicht, da gebe ich ihm voll recht.
Deswegen, wann hat mich der Chat zuletzt mal daran erinnert, dass ich mal was trinken muss?
Und wenn ich jetzt wegen Kopfschmerzen den Stream abbrechen muss?
Nein, ich habe meinen Tee schon. Das hat bei mir tatsächlich geholfen.
Ich trinke jetzt, also früher habe ich im Prinzip nur Wasser getrunken, sonst nichts.
Jetzt trinke ich Tee mittlerweile.
Das hat zwei Vorteile. Erstens denke ich immer dran, frag mich nicht warum, warum ich nicht bei Wasser dran gedacht habe.
Und zweitens muss ich ab und zu mal runter gehen in die Küche und Wasser heiß machen.
Das ist auch immer eine ganz gute Unterbrechung.
Kurz in die Küche gehen, Wasser heiß machen.
Dehydriert zu sein ist eines der größten Fokusprobleme.
Ich stelle mir immer direkt zu Beginn eine volle Flasche Wasser hin.
Glaub mir, das hilft.
Was du aber unbedingt vermeiden musst, ist pausenlos Kaffee oder Energydrinks in dich reinzuhallen.
Trinke ich gar nicht.
Das hilft dir langfristig kaum bei deiner Konzentration.
Trinke ich gar nicht.
Ich selbst muss mich da immer auch voll bremsen, weshalb ich mir zu Beginn eine Tasse Kaffee...
Bei mir ist es aber einfach, ich mag weder Kaffee großartig noch Energydrinks.
...mache und es bei dieser allerdings bleiben lasse.
Jetzt sitzt du an deinem Schreibtisch und legst los und hast eine richtig gute Idee, wie du ein Problem lösen kannst.
Du willst dir die Lösung skizzieren und musst erstmal aufstehen, um Stift und Papier zu suchen.
Wäre doch voll kacke, wenn das der Grund wäre, wieso dir dieser gute Gedanke wieder entwischt ist.
Wenn du dir für deine Session Notizen machen musst, dann sorge dafür, dass dein Schreibblock und Stift von Beginn an bereit liegt.
Denn oftmals...
Warum nicht einfach irgendein x-beliebiges Notizprogramm verwenden?
Man sitzt doch eh am Rechner.
...kommt es sonst zu einer Kettenreaktion.
Du stehst auf, um einen Stift zu suchen.
Dabei merkst du, dass du Heißhunger hast.
Machst den Kühlschrank auf.
Der ist voll, aber es ist nicht das drin, was du haben willst.
Nice. Nudeln mit Lachs.
Also rennst du zum Supermarkt.
Habt ihr das gesehen? Nudeln mit Lachs. Eindeutig.
Machst den Kühlschrank auf.
Guck hier. Nudeln mit Lachs.
Voll, aber es ist nicht das drin, was du haben willst.
Also rennst du zum Supermarkt oder zur Dönerbude um die Ecke und schwupps ist wieder eine Stunde vergangen und du hast gar nichts geschafft.
Du siehst schon, worauf ich hinaus will.
Das kommt selten vor.
Völlig egal, ob du deinen eigenen Schreibtisch hast am Esstisch in einem Café oder so.
Leute, ich hab' übelst Bock.
Es kommt jetzt übelst random, ich weiß.
Aber ich hab' übelst Bock auf China-Chinesen-Ente mit Erdnusssoße.
Ich glaub', da wird's morgen mal wieder Zeit für.
Oder was sagt...
Chad, hättet ihr auch Bock, Ente mit Erdnusssoße jetzt?
Aber ich hätt' jetzt übelst Bock drauf.
Ne, naja.
Dann nicht.
Ich schon.
Sonst, wo arbeitest du?
Du musst immer alles das zur Hand haben, was du gerade benötigst.
Du musst im Prinzip also dafür sorgen, dass du alle Gründe eliminierst, deinen Arbeitsplatz zu verlassen.
Jetzt sind vier Stunden allerdings keine kurze Zeit und da ist es natürlich logisch, dass du irgendwann mal auch Hunger bekommen wirst.
Und Snacks schmecken beim Coden immer besonders gut.
Und hier möchtest du natürlich auch nicht wegen deines Appetits abbrechen müssen, dir etwas zu essen machen und dann wieder eine Ewigkeit brauchen, um in deinen Flow zu kommen.
Aber tu dir den Gefallen und lege dir keinen Müll zurecht.
Ich bin ein richtiger Junkfood-Liebhaber.
Ich liebe Snickers, Chips, Salzstangen, Gummibärchen und alles, was man eigentlich nicht essen sollte.
Daher bereite ich mir Cracker und geschnittenes Gemüse.
Seitdem ich ein bisschen abgenommen hab', hab' ich nichts mehr an Süßkram und sonst was hier stehen.
Ich hab' noch nicht mal im ersten Stock, wo hier mein Arbeitszimmer ist, irgendwas zu essen.
Nichts. Ist einfach nichts da.
Sonst immer, wenn ich was will, muss ich...
Okay, doch, doch.
Chat, ich hab' euch Mist erzählt.
Ich hab' im Kühlschrank hier neben mir in der Küche, also so ein Backup-Kühlschrank, da stehen, glaube ich, drei Joghurts.
Also so Natur-Joghurts, irgendwie jeweils ein Liter im Kühlschrank.
Aber das ist nichts, was ich hier essen würde freiwillig.
Also ich hab' hier oben nichts zu essen.
Und es ist nicht verkehrt, da kann ich mir...
Früher hab' ich oftmals abends da gesessen, hab' Chips gefressen und sowas.
Nope, gibt's nicht mehr.
Gemüse vor.
Ja, ich weiß, langweilig, aber glaub mir, es ist so viel besser.
Deshalb mache ich es mir so einfach wie möglich und lege...
High-Availability-Kühlschrank wertig.
In anderen Graben kann man sich natürlich im Anschluss noch immer reinziehen.
Wir sind hier allerdings nicht auf einem Fitness- oder Ernährungskanal, sondern unter Codern.
Deshalb machen wir uns jetzt mal an die richtige Arbeit.
Die nächste Situation kennst du garantiert selbst.
Ständig leuchtet dein Handy auf.
Es ist unmöglich, eine Benachrichtigung zu sehen und nicht sofort das Handy in die Hand zu nehmen.
Das kennt jeder.
Deshalb, wenn du weißt, dass du dein Handy für die Coding-Session nicht brauchst,
und wir wissen wahrscheinlich beide, dass du es nicht brauchen wirst,
dann lege es weg.
Am besten in einen komplett anderen Raum.
Willensstärke zu haben, das Smartphone nicht in die Hand zu nehmen.
Oder do not disturb.
Dann ist es zwar nicht super weit weg,
aber ich drehe dann meistens das Display nach unten,
habe do not disturb an und dann kriegt man auch nichts mit.
Nehmen, wenn es eine Benachrichtigung anzeigt, ist eine Sache.
Aber wenn das Smartphone in einem anderen Raum liegt,
dann muss ich mich damit erst gar nicht beschäftigen,
sondern kann mich einfach konzentriert auf meinen Code fokussieren.
Also es bleibt einem gar nichts anderes übrig, als Vollgas zu geben.
Es gibt keine größere Ablenkung, als ständig auf sein Handy zu starren.
Ich habe den Kühlschrank in die Cloud gespiegelt.
Es hat irgendetwas zu verpassen.
Und falls du dein Handy dennoch brauchst,
dann aktiviere den Nichtstören-Modus.
Dadurch werden alle Benachrichtigungen stumm gestellt.
Gerne lege ich mein Smartphone auch mit dem Display nach unten,
weil es mittlerweile einfach zur Gewöhnheit geworden ist, draufzuschauen.
Selbereinstellungen musst du auf jeden Fall auch mit deinem Computer machen.
Ich schließe in der Regel alle meine Chatprogramme.
Kein Discord, kein Slack, kein Microsoft Teams,
und auch kein Twitch-Stream im Hintergrund.
Teams stelle ich immer auf do not disturb.
Teams nervt dann nicht.
Das Einzige, was bei mir noch aktiv ist, ist Outlook.
Zumindest in der Remote-Session auf die Arbeit.
Outlook mit Termin-Notifications,
dass ich nicht eines von 30 Milliarden Meetings verpasse.
Wäre ja nicht auszudenken.
Grund, bei dem ich aktiv zuhören muss, damit ich auch nichts verpasse.
Also erstmal wirklich alles schließen.
Was hältst du von dem Monitoring-Setup?
Ja, ist doch nice.
Ich habe auch mal drei Monitore probiert.
War nix für mich.
Ist aber schon eine ganze Weile her.
Und es war auch keiner hochkant.
War nix für mich.
Drei Monitore waren mir irgendwie zu viel.
Aber es muss sein.
Ich finde zwei Monitore...
Ich habe zwei 27-Zoll-Monitore hier.
Das ist für mich das perfekte Setup.
Auch für die Schreibtischgröße und für mein Blickfeld.
Da muss jeder so ein bisschen die eigene Sache finden.
Was ich dann auf meinem Computer offen habe,
sind die Tools, die ich für meine Arbeit brauche.
Das heißt die Entwicklungsumgebung oder den Code-Editor.
Und vielleicht noch das Terminal.
Das war's.
Mehr brauchen die meisten Leute wahrscheinlich gar nicht.
Na gut, vielleicht noch den Browser, wenn du Web-Entwicklung machst.
Aber im Endeffekt wirst du wahrscheinlich sowieso...
Nein, ich brauche den Browser, weil ich alle furztlang irgendwas googeln muss.
...besten wissen, was du für deine Arbeit benötigst.
Aber es kann immer sein, dass du um dich herum störende Geräusche hast.
Vielleicht eine vielbefahrene Straße, andere Leute im Café oder irgendetwas anderes.
Da hilft oft nur eines, gute Kopfhörer und Musik.
Aber keine Musik, die du sonst im Alltag hörst, sondern welche, die dir dabei hilft.
Irgendwelche Chill-Playlists oder sowas.
Was auch ganz gut ist, sind irgendwelche Hintergrundgeräusche, Regen im Urwald und solche Geschichten.
Das geht auch immer ganz gut.
Ich hatte mal eine Zeit lang, wo ich mich noch nicht so viel bewegt habe.
Da hatte ich vermutlich ausgelöst, also ich hatte öfter Kopfschmerzen und alles.
Wahrscheinlich auch übelste Verspannungen im Rücken und alles.
Da hatte ich mal eine Zeit lang so ein Piepsen im Ohr.
Wahrscheinlich durch Nackenprobleme.
Ist alles weg.
Ich merke nichts davon jetzt.
Und da habe ich mir zur Ablenkung 10 Hours Tropical Rain angemacht.
Das Geplätscher hat es komplett, auch wenn es leise war, komplett übertönt und man konnte sich gut konzentrieren.
Wo wir wieder beim Thema sind, wenn ihr euch nicht genug bewegt, dann bewegt euch genug.
Viele Probleme gehen dann von alleine wieder weg.
Lieder mit Gesang eignen sich nicht ganz so gut, weil man dazu neigt, dem Text zuzuhören.
Deshalb am besten gesanglose Musik reinzulegen.
Ganz beliebt sind diese Lo-Fi Playlists.
Also ganz gechillte Beats.
Das muss ich sagen, die mag ich nicht.
Was ich mag, ist tatsächlich hier so...
Was ich tatsächlich mag, ist Gaming Musik, die nicht so anstrengend ist.
Oder irgendwelche Epik Chillstep Collection, hast du nicht gesehen?
Oder sowas in der Richtung.
Diese Lo-Fi Sachen mag ich nicht so sehr.
Ich weiß, das ist mega beliebt, aber das ist nicht mein Fall.
Das klingt so schräg immer.
Aber ich weiß, die Musik soll ein bisschen schräg klingen.
Soundtrack im Hintergrund laufen.
Aber mein Geheimtipp ist etwas komplett anderes und das sind Naturgeräusche.
Siehste? Siehste?
Ich sag doch, 10 Stunden Tropical Rain.
Ich find's ja cool, dass er auch auf ähnliche Sachen gekommen ist, ja?
Ich sag doch, 10 Hours Tropical Rain.
Da hast du halt das Bedürfnis, ab und zu mal aufs Klo zu gehen.
Aber das stimmt, das hat bei mir auch funktioniert.
Diese Playlisten kannst du dann ganz gechillt in Dauerschleife laufen lassen.
Du wirst dich auch nicht so schnell davon langweilen, weil du ja eben nicht aktiv zuhörst.
Also das ist wirklich mein absoluter Geheimtipp.
Ach ja, ob mir mein T-Shirt dabei hilft, fokussierter zu programmieren, weiß ich nicht.
Aber ein kleines Startup aus München hat diesen ziemlich coolen Coding Swag rausgebracht.
Das ist jetzt keine bezahlte Werbung, ich finde die Sachen einfach nur ziemlich cool.
Unbezahlte Werbung?
Das findet ihr unten in der Videobeschreibung einen Link dazu.
Jetzt hast du wirklich alles vorbereitet, um 4 Stunden durchzupowern.
Jetzt müssen wir aber alle mal auf die Toilette unsere Wasserflasche auffüllen oder einfach mal kurz aufstehen.
Deshalb kommt jetzt dieses Teil zum Einsatz.
Ein 15 Euro Pomodoro Time.
Und er tut ganz genau das, wofür er gemacht wurde.
Er erlaubt es mir, in Intervallen zu coden, also 1 Stunde arbeiten und 5 Minuten Pause.
Der Schlüssel ist, dass du diese 5 Minuten Pausen dafür nutzt, mal kurz aufzustehen,
frische Luft zu schnappen, dir die Beine zu vertreten, vielleicht deine Wasserflasche auffüllst
oder auch mal auf die Toilette zu gehen.
Aber ganz wichtig, bleibe in dieser Pause nicht an deinem Schreibtisch
und öffne irgendwelche Programme, die du gar nicht brauchst.
Oder noch schlimmer, dein Handy benutzt.
Obwohl es super viele von diesen Pomodoro Apps oder Programmen für den Computer gibt,
benutze ich viel lieber diesen Würfel, weil ich eben dafür mein Handy nicht in die Hand nehmen muss.
Denn da bist du wieder nur eine Wischgeste von der TikTok-App entfernt.
Das Teil kann man einfach anmachen und dann legt man diese zum Beispiel 60 Minuten nach oben.
Das Problem mit TikTok habe ich in der Tat nicht.
Vielleicht bin ich zu boomer dafür, aber meine Zeit auf TikTok ist sehr sparsam, sehr spärlich.
Und es fängt dann an zu piepen.
Dafür ist es YouTube und Twitch.
Wenn die Minuten vorbei sind, dann drehe ich den einfach auf die 5-Minuten-Seite,
sodass die oben liegt und hier unten ist auch immer noch ein Display.
Dort wird dann angezeigt, wie viel Zeit ich noch übrig habe.
15 Euro, die wirklich sehr gut investiert sind.
Offensichtlich ist dieses Video nicht von dieser Würfelfirma gesponsert,
aber ich habe euch trotzdem mal unten einen Link zu meinem Würfel in die Videobeschreibung gesetzt.
Diese einzelnen kleinen Optimierungen machen es dir in der Summe möglich,
eine tägliche Fokusroutine zu etablieren.
Das sind 4 Stunden am Tag locker drin. Probier es mal aus.
Wir sehen uns beim nächsten Mal. Danke.
Und wo war jetzt der Tipp, den wir noch nie irgendwo gehört haben?
Ach, das war das mit dem Würfel.
Ja, okay. Ja, aber sich den Timer setzen, habe ich schon gehört.
Das mit dem Würfel zu machen, okay, das nicht.
Hier, Fokuswürfel, Tschädtke.
Ja, Fokuswürfel.
Der TFA Dostmann.
Dostmann. Digital Cube Timer.
Ja, komm. Wir sind mal so frei.
Wenn das jemand haben will, ich poste es euch.
Da ist der Ref-Link von ihm drin, dann verdient er auch noch ein bisschen was.
CU.
So.
Habits of truly pro Coders.
Jetzt wollen sie es aber wissen hier.
Größter Fehler Softwareentwicklung, den viele machen.
Anfang der Woche.
Moment, das haben wir doch schon geguckt, oder?
Ganzes Team gekündigt.
Das haben wir doch schon geguckt.
Nicht der Couch-Typ wieder.
Das ist der, der letztens durch den Wald gelaufen ist in dem Video, oder?
Genau der.
Siehst du?
Was, Mario Kart Tour ist weg?
Okay, ich dachte, das läuft ganz gut.
Haben wir sonst noch irgendwas Spannendes?
Der Maurice hat ein neues Video.
Cyberpunk hat es geschafft.
Vom Skandal zu einem der besten Spiele des Jahres.
Ja, die haben den No Man's Sky gemacht.
So kann es gehen.
Aber Chatgy, wir haben ein Problem.
Ich muss weg.
Ich weiß, ich bin erst eine Stunde, zehn Minuten on.
Aber ich muss ein bisschen früher weg heute.
Wie viel Zeit verbringst du damit, Dinge zu suchen und zu googeln?
Du meinst von meinem Arbeitstag?
Kommt drauf an, was ich machen muss.
Aber sagen wir mal, ich mache was, wo ich
jetzt nicht im Schlaf darüber Bescheid weiß,
dann bist du 50% der Zeit am googeln.
Nee, noch nicht Bettge.
Aber in einer Stunde am Bettge.
Ich muss ein bisschen früher weg, Leute.
Genau, noch Ente-Erdnusssoße holen.
Nee, Quatsch, das hol ich mir dann morgen Mittag.
Auch zum Chines.
Also, Leute, wir hören uns. Bis denn, macht's gut.
See you.
