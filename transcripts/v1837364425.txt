Das war's für heute, wir sehen uns beim nächsten Mal wieder, bleibt sauber, euer AirGhandi.
Ich muss unbedingt meine Hetzner Rechnung heute bezahlen, habe ich vorhin gesehen.
Ich habe noch 7 Cent offen über die letzten zwei Monate.
Nicht, dass es irgendwie noch Auswirkungen auf den Account hat, wenn es zu lange offen
bleibt.
Ich weiß zwar nicht, wie ich die 7 Cent verursacht habe, aber irgendwo muss ich sie hingekriegt
haben.
Na gut, 7 Cent, ich meine, das ist ein paar 4Ms mal kurz für ein paar Minuten gestartet
wahrscheinlich.
Dann würde ich sagen, bevor das Stream so richtig angelaufen ist, wir gucken gerade
mal das übliche, was ich immer am Anfang Sonntag im Stream mache.
Ah, nicht wirklich, das ist ja nicht, dass ich das hier machen würde, um fette Stonks
abzusahnen.
Wir gucken uns mal die aktuellen GitHub-Trends der Woche an und hoffe, ich hoffe, dass es
nicht wieder 95% nur AI ist.
So interessant das sein mag, gerade wenn man sich da super für interessiert, aber ich
fände es nice, wenn man auch mal ein paar andere Projekte sieht als nur AI in den GitHub-Trends.
ok
AI
AI
AI
AI
China
Chinesen Gedichte Zeug
ok das ist keine AI
wobei vielleicht ist es auch von AI geschrieben
weiss ja nicht aber
ok warum ist Chinese Poetry in Javascript
was auch immer
A.I. A.I.
Ne
Äh
Irgendwas
Was nur so halblegal ist
Würde ich mal vermuten
Wenn ich mir den Titel so anhöre
Ähm
A.I.
Was?
A cross platform file explorer
Ich überlege gerade, ob ich mir eh schon gewünscht hätte, ein Cross-Platform-File-Explorer gehabt
zu haben.
Aber okay.
Gibt es da ein Bild von?
Okay, es sieht ein bisschen aus wie Mac und das für alle Plattformen.
Okay, written in Rust, Hauptsache written in Rust, weil blazingly fast und so.
Ja gut, aber ich bin ja froh, dass es noch andere Projekte gibt, die nicht AI sind oder
Kryptogramm.
Ich wüsste jetzt zwar ernsthaft nicht genau, warum ich das wirklich verwende, will außer
dass es eine hübsche Webseite hat, die im Endeffekt aussieht wie eine App, die man gleich
im Appstore sich beziehen kann, sieht schon sehr Apple-Style mäßig aus, das ganze Icon,
der Hintergrund, die Anwendung an sich, aber gut, das ist in Rust programmiert.
Da würde mich doch an der Stelle gerade mal interessieren, wenn das in Rust programmiert
In Rust und in Javascript?
Mich würde interessieren, welches UI-Framework die benutzen.
Fangen wir mal bei den Cargo Dependencies an.
What the?
Alter!
Was ist mit denen los?
10.000 Silent Dependencies, ok das ist Rust, ja das darf man nicht vergessen, für Rust
gibt es für jeden Furzextra Packages, aber das ist schon krass, man könnte ja fast sagen
es ist bloated und nicht mal blazingly fast, ja was verwenden die denn als Apps, ah die
haben verschiedene Frontends für die eigentliche App. Okay, das das mobile, die
mobile App ist
M. Was ist denn M? Mainpunkt M. Ah, das ist, das ist, ich hätte fast gesagt, das ist
Objektiv C?
Ist das Objektiv C?
Ne, das ist nicht das Netz Swift
Ich bin mir nicht so wirklich sicher was das sein soll, aber okay
Ähm, ok, die haben, Android, das ist bestimmt Javashit, ja, die haben bestimmt, jaja, ok,
das ist natürlich auch ein Ansatz, der dürfte dafür sorgen, dass man unter dem Strich wahrscheinlich
potenziell die besten Apps machen kann, bzw. die besten Frontends machen kann, indem man
sich für jede Plattform die jeweils beste, das beste UI raussucht. Die Sache ist bloß
die, das ist halt enorm aufwendig. Okay, was heißt, äh, nicht so ganz. Auf dem Desktop
ist es Elektron-Shit. Okay, Tauri, aber sagen wir Elektron-Krempel. Ja, naja, okay, gut.
Weiter, was haben wir sonst noch? AI
Ich weiß nicht, was ist das? Wahrscheinlich auch AI. Ja, wenn wir schon so in der Richtung. Ja, Text brauchen wir. Okay, AI.
React-Kram? Wahrscheinlich. AI.
Hä? Soll das sein?
China-Chinesen-Kram. Ah, Admin-Dashboards. Ich hab die Existenz dieser Dinger eh nie
kapiert, weil ich mein, das kann man sich einfach ja selbst aus den fertigen Komponenten
bauen, also keine Ahnung, gibt's ein paar solcher Admin-Dashboards.
Accelerate, ok, AI, AI, AI, Deepfakesoftwareforall, kann man sich ja vorstellen was damit hauptsächlich
deepfaked wird.
Ein Typescript-Mapper, weil ORM ist ein Object Relational Mapper oder wie auch immer man das
genau ausspricht.
Also quasi ein Typescript-ORM... Ja, Typescript-ORM.
Naja, gut.
AI? Und nochmal AI.
Okay, ich bin begeistert. Es war bei den GitHub Trends tatsächlich ein paar Sachen drinne, die nicht real waren und wo man zumindest mal ein bisschen neugierig ist, was steckt dahinter.
Ja, moin Leute, alle schon am Start?
Ich bin fast noch fast noch bettig, wobei ich schon ungefähr eine Stunde auf bin, aber
sogar ein bisschen länger.
Fast schon eineinhalb Stunden auf.
Also hundertprozentig wach bin ich doch nicht.
Ja, das mit den Zip-Domains, wo wir uns letztens drüber unterhalten haben im Stream, das
hat ja noch ein bisschen mehr Kreise gezogen die letzten Woche über, gab ja noch ein bisschen
mehr Scam-Versuche.
Also was ich meine ist hier, ja was ich meine ist sowas hier, so könnten die betrügen,
das machen die schon, ja Google war ja der schlauen Meinung .zip als Domain registrierbar
zu machen.
Ja, das ist genau das, was ich gemacht habe, das kann ich euch auch empfehlen.
Blockiert einfach in eurem DNS oder im Browser oder wo auch immer ihr es am besten macht
Punkt Zip-Domains.
Niemand braucht, realistisch gesehen hier zum aktuellen Zeitpunkt Punkt Zip-Domains.
Sollte es irgendwann mal wirklich was geben, was ihr euch unbedingt angucken wollt, was
nur auf einer Punkt Zip-Domain verfügbar ist, was wahrscheinlich nie passieren wird,
ja müsst ihr das halt mal kurz ausschalten, aber es ist aktuell einfach nur bescheuert
das anzulassen. Also ich würde es komplett deaktivieren.
Warum die das eingeführt haben oder warum man es deaktivieren soll?
Naja, weil man zum Beispiel, weil einer der ersten Domains, die registriert wurde, war
Microsoft-Office.zip und wenn du auf die Seite gegangen bist, hast du ein Login gesehen,
Der aussieht wie für Microsoft-Accounts.
Und das war natürlich, du kannst es sicherlich erraten,
keine Microsoft-Seite.
Dann gibt es noch den Basic-Auth-Trick,
dass es aussieht, als würdest du was runterladen von, sagen wir mal, GitHub,
aber in Wirklichkeit lädst du es eigentlich von der anderen Seite runter.
Das ist ziemlich...
für'n Arsch mit den Symptomen.
Warum die es gemacht haben?
Ganz ehrlich?
Ich bin mir da nicht sicher.
Aber es ist Google.
Das heißt, im Zweifelsfall
werden die sich schon bewusst gewesen sein,
dessen, dass das security-technisch ein bisschen blöd ist.
Aber sie haben sich gedacht, für ihr Geschäft dürfte es besser sein, aus irgendwelchen Gründen und deswegen haben sie es halt gemacht.
Ich glaube nicht, dass Google einfach nur zu doof war, das vorauszusehen.
Aber irgendeinen Vorteil muss es Google bringen, ich verstehe es auch nicht so genau.
Also ich hoffe ja, dass die neue Firefox-Version standardmäßig das mitbringt.
Weiß gar nicht, ob es da Pläne gibt
Ich hoffe ja, dass sie das einführen, dass die... guck mal, es gibt schon die ersten Addons, Zip & Moff Domain Blocker
Und Juplop bringt es vielleicht ja auch mit demnächst
Ich glaube nicht, dass sie nur nachträglich
Sicherheitsbedenken hatten. Nee, wahrscheinlich nicht.
Die werden wahrscheinlich schon im Vorfeld Sicherheitsbedenken haben,
aber irgendein Manager bei Google hat gesagt, wir machen das trotzdem.
Und da kommt dann sowas raus. Ich kann mir durchaus vorstellen,
am besten ist natürlich direkt in seinem DNS einzutragen,
.zipdomains, weg damit, und gut ist.
Ansonsten, ich sehe hier, es gibt Addons dafür,
wobei man sich halt fragen muss, braucht man dafür wirklich einen Addon,
da auch wieder was zusätzliches. Ich meine, ich hatte ja schon mal selbst das Problem,
dass ich ein malwareverseuchtes Addon hatte im Browser. Glücklicherweise ist nichts passiert.
Es gab mal ein, also nicht installieren Leute, ich sag's jetzt, es gab mal eine Erweiterung
für Chrome, glaube ich, die nannte sich Kappa Everywhere. So, und genau, hier sieht man's
ja auch. Und ihr könnt euch ja schon denken, was die Erweiterung gemacht hat. Wenn du Twitch-Emotes
benutzt hast, konntest du auf allen Seiten Twitch-Emotes sehen. Die haben quasi die Seiten
gescannt nach Twitch-Emotes und haben die dann replaced. Fand ich teilweise ganz lustig,
gerade weil ich ja auch jemand bin, der auf Twitter noch in Twitch-Emotes schreibt und
so. So hatte ich installiert und nach einer Weile kam halt raus, dass die Erweiterung
removed wurde und jetzt als Malware klassifiziert ist, weil, hier steht es auch, weil der Creator,
also der Programmierer von der Erweiterung an irgendwelche Chinakinesen den Zugang für
seine App verkauft hat.
Also man sieht das schon, auch wenn man irgendwie überprüfte Browser Addons und sowas installiert,
dagegen bist du nie geweiht, dass das nicht mal nach hinten losgehen kann.
Das heißt, die beste Vorkehrung dagegen ist, nur Addons verwenden, die quasi eine große Verbreitung, lange History haben.
Wobei eine große Verbreitung natürlich auch mehr Zerstörungspotenzial hat, wenn was wirklich passiert.
Und nach Möglichkeit halt jetzt nicht auch 50 Addons oder so installieren.
Man könnte jetzt sagen, gut, einfach Addons nicht auto-updaten.
Ja, ok. Aber da hat man andere Probleme eventuell.
Weniger Addons.
Also ich hab auch nur...
Ich hab 3 Addons installiert. Ich glaub man siehts sogar hier.
Ne, das stimmt gar nicht. Guck mal.
Ich hab 4 Addons installiert.
Ich hab nen Volume-Regler installiert, wo man einzelne Tabs die Lautstärke leiser stellen kann.
Man kann sie nicht wirklich lauter stellen.
Das geht zwar theoretisch, aber das übersteuert dann.
steuert dann. Also man kann eigentlich die Lautstärke nur wirklich sinnvoll leiser stellen
in den Tabs. Also Lautstärkesteuerung für unterschiedliche Tabs habe ich installiert.
Ich habe uBlock installiert, Darkreader, weil manche Seiten halt immer noch nicht gescheit
ausschauen und Return YouTube Dislikes. Das war's. Mehr Addons habe ich nicht. Reicht
reicht doch
so und
in meinem Browser den ich privat verwende
für mein Zeug und Youtube
da habe ich eigentlich außer uBlock nichts
installiert ich glaube das einzige was ich in Firefox
installiert habe wirklich ist uBlock und in meinem
Chrome habe ich glaube auch nur
ich glaube auch nur das hier und nicht mal Darkreader
installiert
wie Apple zu deiner Bank werden will
der High Performer Henning
Da frage ich mich bei dem Namen, ist das ein Witz?
Doch, ich habe FFZ habe ich installiert, aber ich gucke ja auch nicht in meinem Browser, wo ich normalerweise in YouTube eingeloggt bin und so, Twitch.
Das ist doch bestimmt so ein Joke-Name, oder? Ja gut, ist es.
Sieht man ja schon am Video.
Das ist der High-Performer Henning, dass das irgendwelche...
...ähm, nicht wirklich Comedy-Gruppe-Videos sind, sondern eher was Kritisches drüber. Anders kann ich mir das hier nicht erklären.
Sponsor-Blog? Sponsor-Blog habe ich nicht, ich skippe das immer manuell.
Fun-Terminal-Commands for new user. Moment, haben wir nicht letztens gelernt bei dem, bei dem, äh, bei, bei, äh, wie hieß der?
Linux-Guides, der, der reacted hat auf mein Video, dass das Terminal, dass das eigentlich überhaupt nicht notwendig ist.
How to make coding fun.
Ich muss mal kurz in die Kommentare, ich muss es mir einfach geben jetzt, was die Leute noch zu meinem Video geschrieben haben.
Alter, das ist ja mega erfolgreich, guck mal hier.
Da hat sich das Reaktion, jetzt bin ich gerade nicht, bin ich blöd hier.
Da hat es sich ja richtig gelohnt, hat ja viel mehr Views als das andere, wie viel hat denn meins?
Jetzt hat er mich verlinkt.
Original Video.
Hallo Leute hier.
Jetzt müsste ich eigentlich noch eine Counter-Reaction.
Ich fand das,
hab ich ja damals auch gesagt,
überhaupt nicht schlimm, was er erzählt hat über mein Video.
Weil ja manche Leute, sogar bei mir
unter Video, jetzt haltet euch mal fest, wie bescheuert
die Leute sind, guckt mal.
Irgendjemand hier unter mein Video hat geschrieben,
ich soll ihn verklagen.
Ja, guck mal, er nimmt das Video und sagt, ich würde dir anraten, rechtlich vorzugehen.
Komplett, ich glaube, der mag den anderen nicht sonderlich, ja.
Rechtlich gegen was?
Warum?
Warum sollte ich allen Ernstes rechtlich dagegen vorgehen, weil einer mein Video gezeigt hat
und seine Meinung zugesagt hat, da ist überhaupt nichts Schlimmes dabei gewesen in dem Video.
Er hat halt nur gesagt, dass er manches anders sieht und zum größten Teil, witzigerweise,
waren wir sogar einer Meinung bei den meisten Sachen.
Das einzige, wo wir uns, glaube ich, grundsätzlich unterschieden haben, war, dass ich Linux in
der VM zur täglichen Benutzung eigentlich recht nice finde und er mag das in der VM
überhaupt nicht. Er meint es ja okay, er hat vielleicht seine Gründe dafür, aber der Rest, der Rest waren wir uns doch erstaunlich einig, ja?
Also keine Ahnung, ich wollte mal kurz gucken, was haben die Leute da eigentlich noch als Comments geschrieben?
Soll doch jeder nutzen, was er will. Ja, das sehe ich genauso. Genau das denke ich mir auch immer.
Ich habe mir übrigens überlegt, was haltet ihr denn davon, wenn ich, warte mal hier, das ist ja das Original-Video.
Das Original-Video hier hat ja Titel
Linux ist kein Ersatz für Windows. Ich habe mir überlegt, ob ich einen zweiten Teil dazu machen sollte, den ich nenne
Windows ist kein Ersatz für Linux.
Und das einfach mal aus der anderen Sicht beleuchten, weil ich erzähle ja hier nur, wie das ist für jemand, der sich denkt
Microsoft, Windows geht mir auf den Sack, ich will auf Linux umsteigen.
Warum das vielleicht keine gute Idee ist, vielleicht soll ich mal ein umgedrehtes Video machen,
warum vieles, was ich mit Linux mache, so unter Windows gar nicht so ohne weiteres möglich ist,
beziehungsweise einfach nur abfuckt.
Also ich kann jetzt mal einen zweiten Teil dazu machen
Wobei ich nicht weiß, ob ich das dann nennen soll, Windows ist kein Ersatz für Linux
Vielleicht ist es zu ähnlich und die Leute checken es nicht, dass es ein neues Video ist
Aber gut, muss man einen passenden Thumbnail dafür machen
Muss mir das mal aufschreiben
Zweiter Teil, so
Ja, ich wollte mal kurz gucken, ob die Leute noch irgendwelche blöden Comments geschrieben
haben.
Ich finde das eigentlich immer ganz lustig.
Das sind ja richtig sachliche und normale Comments, was ist denn da los?
Dann macht bitte auch MacOS, ist kein Ersatz für Windows.
Das Problem ist, dass ich mich mit MacOS nicht wirklich gut auskenne.
Also meine MacOS Erfahrungen sind wirklich nur sehr rudimentär, ja.
Die Kommentare sind ja komplett sachlich und sowas, was ist denn los?
Das sind...
So die ersten Comments da waren viel lustiger, so ich weiß nicht was dieser Max sich da wieder zusammenspinnt
blablabla, ich bin jetzt aufgeregt, aber die waren jetzt ja voll, ganz, ganz normal, ey
Ja MacOS kenne ich mich nicht wirklich gut genug damit aus, um da stichhaltig
Das einzige was mich immer übelst verwirrt unter MacOS ist Control, Windows, Alt und
die haben ja, du hast ja so ne, so ne Spezialtaste unter Mac, ich weiß gar nicht wie die heißt,
die Apple-Taste.
Es sind nicht sogar Control, ne, Command meine ich, genau.
Du hast hier unten 4 Stück
Anstatt 3
Die man normalerweise normalerweise hat
Und
Ich bin da immer verwirrt
Weil ich nicht weiß wann ich was drücken soll
Zum Beispiel für
Ctrl C, Ctrl V
Drückt man unter Mac
Cmd C, Cmd V
Objektiv betrachtet ist es besser
Es mag alles sein, es ist einiges objektiv betrachtet besser, was man nicht macht aus Gewohnheit.
Ich meine, es ist zum Beispiel auch objektiv betrachtet besser, gesund zu essen, aber, ne?
Macht trotzdem nicht jeder.
Ups.
Und ich hab's nicht geschafft, mich da dran zu gewöhnen.
Gibt es ein... ja, also es gibt noch die Möglichkeit, das auf Intel-Hardware zu installieren, wenn
du eine halbwegs aktuelle hast, solange das noch geht.
Du kannst es auch in der 4M installieren, aber, das haben wir ja sogar im Stream schon
ausprobiert, macOS in der 4M ist, sagen wir mal, es ist nicht wirklich gut benutzbar.
Also, du kannst es benutzen, um mal so ganz grob zu gucken, aber du hast, also die Oberfläche
ist super langsam, es gibt Grafikfehler. Also es ist nicht zu vergleichen hier mit einem
Linux-Inner-VM. Linux-Inner-VM ist ja extrem zackig. Ist ja sogar kaum ein Unterschied
zu einem Native-Desktop-System. Also mal im Ernst, ich habe auf der Arbeit jahrelang
Native-Linux-Notebook gehabt, am Ende sogar mit einem halbwegs modernen Surface-Book mit
irgendwie 8 Kernen und sowas drinnen. Also ja, man könnte schon sagen, manches war Native
auf dem Notebook schon schneller, aber im Großen und Ganzen merkst du wirklich keinen
Unterschied zwischen Native Linux, so wie ich es hier eingerichtet habe, und hier in
der VM.
Der einzige Unterschied, den du merkst, ist wenn du zum Beispiel Videos abspielen möchtest.
Wenn du Videos abspielen möchtest, geht das in der VM natürlich auch, aber halt mit viel
mehr CPU Last, weil du halt kein GPU oder CPU Video Decoding hast.
weil das nicht durchgereicht wird oder zumindest du hast kein gpu video decoding
ja das halt halt pech aber gut ansonsten fühlt sich linux halt wie native an in der vm und das
ist mit mac os überhaupt nicht so mac os in der vm fühlt sich an wie kaugummi zweite gpu dann
durchreichen? Ne. Zumindest nicht unter Windows mit VMware Workstation. Das kannst du höchstens
machen, wenn du KVM benutzt, unter Linux zum Beispiel, und eine GPU durchreicht und dann
die Hackintosh-Installation machst, quasi Mac auf einem Custom-Intel-Based-System. Das
würde funktionieren, aber nachdem die meisten ja unter Windows unterwegs sind, ja, bringt
das ja nix. Kann man WSL eigentlich auch so installieren als wenn man eine Desktop Umgebung
hat will? Also es gibt die Möglichkeit mittlerweile unter Windows mit WS... ne GWSL oder wie heißt
das Ding? Nee. WSLG? WSLG. Was zum Teufel ist GWSL? Das ist mir neu, kann ich doch gar nicht.
Okay, also es gibt mittlerweile einen X-Server für WSL. Ja, sogar, sogar offiziell von Microsoft,
Die haben sogar Wayland-Support drinne, Sachen gibt's, ja.
Und teilweise sogar 3D-Acceleration und sonst was, also wenn man angewiesen ist auf Linux,
achso ich glaube es geht nur unter Windows 11.
Es gab mal ne Preview-Version für Windows 10, aber ich glaube es gibt, ja, nur, ja,
das ist anscheinend, ach ne, ok.
Geht auch Windows 10, alles klar.
Ja, also gibt es, gibt es. Ich muss dir ehrlich sagen, ich habe es noch nicht ausprobiert.
Am Ende geht es ja irgendwie über RDP trotzdem rüber.
Was braucht man für eine GPU mindestens dafür?
Weil einfach innervm installieren ist ja wahrscheinlich nicht.
Wäre auch merkwürdig, innervm Windows mit WSLG dann.
Müsste ich tatsächlich mal ausprobieren?
Also ja, es funktioniert anscheinend sogar...
Sogar Wayland-Anwendungen drüber.
Eventuell kann man damit dann tatsächlich auch...
Guck mal, sie haben Rider laufen. Ne, nicht Rider.
Ähm, Pycharm haben sie laufen.
Und wenn man Glück hat, kann man dann, ja super, den ollen X-Calculator, wenn man Glück
hat könnte man da vielleicht sogar eine Desktop-Oberfläche mit laufen lassen und vielleicht, vielleicht
würde man das sogar hinkriegen, wenn man, also das wäre tatsächlich mal ein Versuch
wert, wenn man das auch auf den zweiten Desktop packt, so wie ich mein Linux, ob man nicht
mit WSLG Fullscreen i3 oder sagen wir mal Fullscreen Sway oder so starten kann und das
dann quasi auf dem zweiten Desktop unter Windows, dass man dann quasi das ähnliche Setup hat
wie ich hier mit der VM, allerdings dass es in WSL läuft.
Das müsste man tatsächlich mal ausprobieren.
Ich schraube halt nur ungern rum an meinem Windows, an meinem Main-Windows-System und
würde es gerne in der VM testen, aber ich glaube nicht, dass man das in der VM testen
kann.
Naja.
Gut.
Alles klar.
Alles klar, jo.
Achso, du meinst den Desktop in einem extra Fenster laufen zu lassen?
Du hast doch eine Windows-Kiste.
Jaja, aber ich schraube ungern an der Windows-Kiste rum.
Und...
Ich bin mir gar nichts...
Ne, ne, ich kann es nicht benutzen.
Leute, ich kann WSL auf dem System nicht benutzen.
Jetzt weiß ich wieder, warum ich das noch nie ausgedreht habe.
Ich kann WSL auf dem System nicht benutzen und nicht gescheit, weil, um WSL benutzen
zu können gescheit, muss man Hyper-V aktivieren und wenn man Hyper-V aktiviert, dann muss
man irgendwelche, frag mich nicht, Virtualisierungsfunktionen in Windows aktivieren.
Das können wir mal ausprobieren, WSL-G in der VRM, ob das geht.
Glaube aber nicht.
Ich glaube aber nicht.
So und wenn man Virtualisierungsfunktionen mit Hyper-V in Windows aktiviert, dann gibt
es Bugs mit Firmware Workstation.
Guck mal, unser Background Changer funktioniert.
Wer sich jetzt übrigens fragt, woher der nice Background kommt.
Jeder kann den Background benutzen und zwar geht einfach bei mir auf GitHub und dann whitepapohappydesktop
und dann ist hier unter Images sind alle, oder auch hier, alle Backgroundbilder.
Für jede Tageszeit gibt es eins.
Es gibt was für Mittags, wo der Pepo am Futtern ist,
am Arbeiten ist, am Energydrinken ist,
wo er am Essen, wo er am Frühstücken ist,
Cornflakes sich reinhaut,
wo er pennt und träumt,
ähm,
wo er Zähne putzt abends, wo er Fernseh guckt
und dann, wo es dunkel wird, er weiter Fernseh guckt, also
White Pepo happy für alle Tageszeiten.
Und wenn einer automatisch einen Desktop, also wenn einer Linux benutzt und automatisch den Desktop-Hintergrund geändert haben will,
kann er sich sogar theoretisch eines dieser Skripts hier, ja ne könnt ihr es auch selber machen, muss man nicht.
Max und ich haben hier jemals was zusammengescriptet, dass der automatisch
den Background ändert, abhängig von der Tageszeit.
Der Max hat es auch übertrieben, der hat nämlich noch eingebaut, dass der von wetter.in es ist glaube ich,
er abruft ungefähr wo man sich gerade befindet und dementsprechend auch weiß wann Sonnenaufgang und Sonnenuntergang ist
und dann die passenden Zeiten die Bilder einblendet.
Mein Script ist ziemlich billig dagegen.
Ich gucke einfach nach uhrzeit und dann setze ich die backgrounds ja man sieht es funktioniert
wir haben ein white people
happy frühstück background
so muss es sein
Ansonsten lasst mich ja noch mal ganz kurz gucken bei github trends wir haben zwar schon geguckt heute aber
Wollte mal ganz kurz gucken ob irgendwas interessantes in der netwelt trendet manchmal
quatsch nicht spoken language
Äh, manchmal gibt's ja da ein bisschen was interessantes.
Oh, zeig mal her.
Microsoft Teams Global Hack.
Moment, warum hostet sowas Microsoft selbst?
Ach so, nee, das ist irgendeine Konferenz oder sowas.
Windows Dev Home Application.
Ja, den Sinn davon hab ich nicht verstanden.
Das haben sie letztens gezeigt, wo ich mir denke, ja gut,
hau mal das.
Windows-Exploit-Gedöns, Power-Toys, Avalonia. Avalonia hat jetzt auch eine Business-Geschichte dahinter, die wurden doch nicht gekauft oder werden jetzt gesponsort von irgendwem?
Da war doch was, hab ich doch letztens gelesen. Avalonia hat doch jetzt irgendwie sogar so einen Business-Plan.
Ach, keine Ahnung, vielleicht bring ich's auch durcheinander.
Avalonia ist ein UI-Framework, wo man grafische Desktop-Anwendungen erstellen kann und theoretisch
auch mobile für C-Sharp, was mir persönlich lieber ist als MAUI.
Aber ich mag immer noch das XML-UI-Zeug nicht richtig, aber wenn ich eine .NET-UI-Anwendung
machen würde, dann würde ich es wahrscheinlich erst mal mit Avalonia heutzutage probieren.
Unity… Was? Was soll das sein?
Ah, ein RGB-Steuerungstool. Für Asus-Laptops. Alter, da muss man erst mal drauf kommen.
Windows-Optimizer. Maui, geh mal weg.
Got potato trended.
Okay, was ist das?
Keine Description?
Ah, Security-Kram?
Workflow-Library brauchen wir nicht, Material-Design ist f- Okay, wenn ich zwei eklige Sachen
kombinieren will, dann Material-Design und .NET-Sammel-Oberflächen.
Boah, das ist ja ganz schlimm.
Was soll das sein?
Irgendwelche Zusatzhacks, die ich mir bestimmt nicht installieren werde.
...
Ihr wisst ja, ich find's immer bescheuert, wenn die Projekte haben.
Ich mein, was zum Teufel soll mir das sagen?
Try to tame the three-headed dog.
Headed dog, ja.
Hä?
Ach, Kerbera!
Okay, das macht tatsächlich Sinn in dem Kontext.
in dem Kontext. Allerdings, warum schreibt man nicht
C-Sharp Tool Sets for Raw Kerberos Interaction?
Warum schreibt man das nicht hier oben hin?
Weil ich mein ernsthaft, das erste, was du von dem Projekt liest, ist das da.
Und...
Zumindest vielleicht noch einen zweiten Satz hinschreiben, was es ist.
Okay.
Ist GitHub dafür da, um neue Sachen vorzustellen?
Nee, GitHub ist dafür da, dass du deinen Source Code darauf hostest.
Allerdings haben die auch so, also du kannst ja Repos, ich mach jetzt einfach mal bei mir hier keine Ahnung, du kannst halt Repos auch Likes geben, das heißt halt Sterne in dem Fall bei denen und dann gibt es so eine Trending-Übersicht, was, wie viel Sterne die Woche oder heute, also es gibt für Sterne heute, Sterne Woche, Sterne Monat, da kann man halt immer gucken, welche Projekte gerade besonders angesagt sind und da findet man, wenn man sich das regelmäßig anguckt, durchaus mal ganz interessante Sachen, ja.
Man sollte allerdings nicht den Fehler machen und sich täglich die Javascript-Kategorie angucken, wenn man nicht ganz durchdrehen will im Kopf.
Nee, du, Dankeschön für den Sub.
Hau, Subscriptions.
Dazu kann man nur sagen.
Nice! N-n-nice!
Lukas, Dankeschön für den Sub. Ich muss mal grad was gucken, wie viele Issues gibts jetzt hier.
Ich muss hier echt mal ran, Leute. Ich muss hier echt mal ran.
Ich muss echt mal das aktualisieren, guck mal. So viele offene Issues.
Ich glaub, der Fiat Champ 2 muss mal langsam angegangen werden.
Was macht der 4M-Champ? Oh, der 4M-Champ hat ein Issue. Ah ne, no Bash-Completion. Das hatten wir schon vom Phipps.
So kommst du nicht in die Training-List. Naja, ich will auch nicht in die Training-List.
Weil wenn ich in der Training-List bin, muss ich mich ja noch mehr um die Software kümmern.
Und ihr kennt mich, sobald ich mal was erstellt habe, habe ich meistens keinen Bock mehr daran weiterzubauen.
Und das obwohl ich es selbst ja oft verwende.
Ne, das Problem ist halt, eigentlich hab ich überhaupt keine Zeit großartig, mich langfristig intensiv da täglich um irgendwelche Softwareprojekte zu kümmern.
Also, kein Zeit und auch wenig Bock.
Aber auf den FIA-Champ den bisschen zu erweitern und aus den Fehlern zu lernen, die ich bei der ersten Version gemacht hab, hätt ich schon mal Bock drauf.
Weil ich hab manche Sachen nicht so clever gemacht.
Aber gut, es war auch mein erstes Home Assistant Add-On.
Also, da könnte man schon einiges verbessern noch dran.
Das ist doch nice!
Der ganze Schub?
Wieso hast du mit 50 Bots geliked?
Oder, oder wie, wie, was?
Ach nee, der wollte einfach nur wissen, wie du unter anderem dazu gekommen bist, ihn zu liken.
Ja, und wie bist du dazu gekommen? Hast du irgendwie bei ihm, hast du es einfach zufällig gefunden, oder?
Muss man sich im Vorfeld mit sowas befassen, wenn man die Ausbildung im IT...
Nö, nö, nö, nö, musst du nicht.
Also ich sag hier immer, dass ein Azubi eigentlich keine großartigen Vorkenntnisse braucht.
Es ist das Wichtigste, dass der sich für das Thema interessiert.
Natürlich haben die meisten Leute, die sich für das Thema interessieren, schon gewisse Vorkenntnisse, das ist nicht verkehrt.
Also wenn du Azubis hast, die schon ein bisschen Hardware gebastelt haben oder welche die schon ein bisschen programmiert haben,
vielleicht schon ein paar Webseiten gemacht haben, so ist das natürlich immer eine super Geschichte.
Aber wichtig zumindest für mich wäre und war auch immer, dass die sich dafür interessieren.
Und das merkt man auch relativ schnell, ob die das interessiert oder ob die dann nur ihre Zeit abhocken.
Ansonsten würde ich gar nicht großartig erwarten, dass Azubis große Vorkenntnisse
haben.
Was ich für eine Umschulung zum Fachinformatiker Systemintegration worden habe, nächste Woche
Vorstellungsgespräch.
Sind so Sachen, wodurch man glänzt.
Achso, äh, ja also, wo du sicherlich, also generell, ich kann es dir jetzt nicht sagen
als Azubi, aber als Azubi sicherlich auch, wo du bei normalen Bewerbungen glänzen kannst
ist, wenn du ein GitHub-Repo hast, ja, wo man auch sieht, dass du ein bisschen was gemacht
Ich meine, als Physi vielleicht weniger, wobei ich selbst sagen würde, als Physi, selbst wenn sich jemand, wenn, wenn sich jemand
als Physi bewirbt und der schickt mir ein GitHub-Repo mit,
fände ich auch nice, ja, weil ich bin ja eh der Ansicht, ihr kennt das, ihr wisst, ihr wisst das ja, dass ich der Meinung bin, dass es eh
fließende Übergänge gibt zwischen Physi, Fachinformatik, zwischen den ganzen Technikberufen und alle Seiten ein bisschen, auch gerade in der aktuellen Zeit,
wo immer mehr Richtung DevOps geht von der klassischen Adminrollen weg, wo auch immer mehr Richtung Fullstack, man guckt sich alles ein bisschen angeht.
Es ist nicht verkehrt, wenn man ein bisschen Ahnung hat.
Also es ist als Entwickler nicht verkehrt, sich ein bisschen um Infrastrukturthemen Gedanken zu machen,
ja, dass man sich auf der Linux-Commando-Zeile ein bisschen auskennt.
Dass man vielleicht schon mal, wenn seine Anwendung kontainerisiert läuft, dass man
sich vielleicht schon mal so ein Grundtutorial angeguckt hat, paar kubectl Sachen, weiß,
dass man auch mal in die Logs reingucken kann von seiner Anwendung.
Und umgedreht sollte man sich als Physi auch ein bisschen damit auskennen, wie Anwendungen
entstehen, wie Anwendungen entwickelt werden und auch die ein oder andere Programmiersprache
können jetzt neben Bash und PowerShell, je nachdem ob man eher im Windows- oder im Linux-Bereich
unterwegs ist, aber so ein bisschen Ahnung vom Programmieren sollte man als Physi auch
haben.
Zumal ich es gar nicht richtig verstehen kann, ich weiß da gibt es genug, ihr könnt
mir ja mal, schreibt mir mal in den Chat wie das bei euch ist, aber ich kenne viele Physis,
ich kann es bloß nicht verstehen, die sagen, oh ne, ich bin ja Physi geworden, weil Programmieren
nichts für mich ist.
Diese Aussage gibt es oft, aber ich verstehe es nicht so ganz, weil ich finde es gibt
kaum was interessanteres, wie Sachen auszuprobieren, also Programmiertechnisch Sachen auszuprobieren,
wie sei es jetzt irgendwie, was wir hier im Stream schon gemacht haben, Webassembly mit
C++ und FFmpeg im Browser und sowas, das ist schon ziemlich advanced Crample, was wir da
gemacht haben, aber es ist halt auch mega spannend zu sehen, was alles mittlerweile
funktioniert oder auch irgendwelche
microcontroller geschichten zu bauen oder auch sei es auch irgendwelche
kommando zeilen tools und da sind wir und da sind wir mittlerweile bei dem
punkt man muss keine web frontends backends oder
machine learning sachen programmieren können als physik aber ein bisschen
ahnung von programmieren und von anwendungsentwicklung sollte man haben
Denn, das kann einem nicht nur zugutekommen, dass man die Anwendung besser betreiben kann, die die AE gebaut hat,
sondern, man kann auch hilfreiche Tools bauen, die intern verwendet werden, ja?
Gerade was Kommandozeilentools angeht, gibt's in jeder Firma Sachen, die Leute nerven, die man vielleicht in schöne Kommandozeilentools packen kann.
Zum Beispiel, sollen wir mal ein Beispiel vom letzten Arbeitgeber, wo ich gewesen bin.
Da gab es immer das Problem, dass die Leute Wartungsarbeiten gemacht haben.
Also es gab so ein Change-Meeting einmal die Woche.
Da wurde angekündigt, ja wir machen jetzt auf dem Cluster ABC, müssen wir jetzt irgendwie Kernel-Update machen.
Das heißt, wir starten hier der Reihe nach neu, blablabla.
So, wurde angekündigt, wurde genehmigt.
So, und dann haben die Leute immer vergessen, bevor sie die Wartungsarbeiten gestartet haben.
immer ist übertrieben, aber sehr oft haben sie es vergessen,
wenn sie die Wartungsarbeiten gestartet haben,
im Monitoring-System eine Maintenance einzutragen
oder das zu deaktivieren.
Und da kam es öfters vor, dass die Leute angekündigte Wartungsarbeiten durchgeführt haben
und dann schlug im Support bei uns irgendwann nachts um 23 Uhr auf
Systemdown.
Klar, meistens haben die das gecheckt, weil die wussten,
ey Moment, an dem System sind noch Wartungsarbeiten,
Der Typ hat einfach bloß wieder nicht Bescheid gesagt oder hat nichts eingetragen, aber das war natürlich nervig
und da habe ich
Darf ich dir die Stellenanzeige schicken? Ja klar, schick her
Wir sind ja nicht nur hier sonntags morgens zu Videos gucken
Das wollen wir gleich auch machen
Ja, und da habe ich ein Kommandozeilentool gebaut, das haben wir sogar angefangen hier im Stream zu bauen damals
Da habe ich ein Kommandozeilentool gebaut, was auf jeden, auf jeden Dielungsserver drauf gekommen ist. Tatsächlich eines meiner ersten
etwas umfangreicheren Go CLI Tools gewesen. Also mit umfangreich meine ich jetzt von Command-Line
Parsing bis automatisch refreshende Ausgaben und sowas. So und da habe ich ein Kommando-Zeilentool
gebaut, wo du direkt, wenn du auf dem System drauf bist, eine Maintenance setzen kannst
für eine Viertelstunde für das System, worauf du drauf bist. Das konntest du unter Linux
dann so ausführen, so hieß das auch, du konntest das, oder besser gesagt das war ja
ein Pass, du konntest es so ausführen, das hieß setDowntime und was das gemacht hat
war, es hat sich zur AlertManager API verbunden, AlertManager ist von Prometheus
das System was eben, ja, Monitoring, Alarme verwaltet und auch Notifications
schickt und solche Geschichten. Und der hat sich dann verbunden zur Alertmanager API,
musste vorher Proxy setzen und so, dass du raus kommst und alles, ja, hat sich verbunden
zur Alertmanager API und hat dort eine Maintenance eingetragen für das System, 15 Minuten lang,
für den Hostname, auf dem man gerade drauf ist. Das heißt, du musstest jetzt nicht mehr
entweder beim Support anrufen und sagen, ich starte jetzt mit den Wartungsarbeiten,
und diese Systeme bitte in Maintenance nehmen oder dort ins Webinterface gehen und das zusammen klicken.
Du warst auf dem Server, du bist auf dem ersten Server vom Cluster, hast gesagt,
ah, ich fange jetzt mit meinen Wartungsarbeiten an, ich mache jetzt Kernelupdate
und dann hast du einfach kurz eingekippt, setDowntime, bam, Enter gedrückt
und du hattest das System für eine Viertelstunde in Maintenance.
Es gab dann für die Anwendung noch mehr Parameter, ja, du konntest dir Maintenance auflisten lassen,
Maintenance für in der Zukunft eintragen, alles ein bisschen advance, aber wichtig war mir, dass du einfach nur eingeben kannst, set downtime
und bam hast du viertelstunde, viertelstunde Maintenance und das haben die Leute dann auch nachdem es da war regelmäßig benutzt und ich glaube jeder, der
mal eine Anwendung entwickelt hat, wird sich, wird das bestätigen können.
Irgendwie freut es einen ja immer, wenn das was man gebaut hat, dann auch gut ankommt und die Leute das benutzen.
Ja, genau. Also, da sieht man auch aus dem Gesichtspunkt ist es nicht verkehrt, wenn
man auch als Fachinformatiker Systemintegration ein bisschen programmieren kann. Wobei ich
sagen muss, ich habe zwar eine physische Ausbildung gemacht vor 15 Jahren, aber es ist schon lange
nicht mehr klassische, rein klassische Systemintegrationssachen. Aber gut, mein, irgendwo musst du mal anfangen.
Also es ist nicht verkehrt, wenn man sich ein bisschen auskennt im Vorfeld.
Und guten Eindruck, ja guten Eindruck kannst du sicherlich mit einem GitHub-Profil machen,
wenn du kein GitHub-Profil hast, bringt das dir natürlich auch nichts.
Ansonsten, ja du machst so Umschulung, vielleicht hast du ja in deinem Beruf jetzt schon was
gemacht, wo sich so das gut transferieren lässt, so sprich wovon du jetzt Ahnung hast,
was du dann auch gut gebrauchen kannst als Physi, das würde ich auf jeden Fall erwähnen,
dass du sagst, hey ich hab in meinem jetzigen Beruf ja schon gewisse Überschneidungen mit
dem, was man so als Physi macht, deswegen bin ich da, was auch immer, muss irgendwas
ausdenken.
Das würde ich auf jeden Fall erwähnen, wenn es da irgendwelche, weiß ich, gibt es irgendwelche
Überschneidungen?
Ja?
Also wenn ja, würde ich das auf jeden Fall erwähnen.
Ansonsten weiß ich auch nicht weiter gerade, was man noch schön erzählen kann.
Meine Bewerbung, also meine Ausbildungsbewerbung ist schon zu lange her.
Zendrix, als Trinken erinnern, ja, gute Idee.
Erstmal kleines Projekt pushen, dass da nur Initial Comments steht, ja das würde mich
dann auch nicht großartig interessieren, also ich hab mein Github Profil verlinkt bei meiner
letzten Bewerbung.
Und zwar hab ich in die Bewerbung tatsächlich reingeschrieben, Moment ich muss mal kurz
Jetzt gucken wir mal in den Lebenslauf, äh, Lebenslauf-PDF.
Ich hab reingeschrieben, genau, ich hab zwei zusätzliche Sachen reingeschrieben in den
Lebenslauf.
Ich hab reingeschrieben, seit 2012 nebenberuflich Web-Videoproduzent, so nennt man das ja auf
auf Deutsch. Klingt zwar ein bisschen cringe. Klingt zwar ein bisschen cringe, aber dachte
mir ist mal erwähnenswert. Zumal ich es auch aus einem anderen Grund erwähnt habe und
zwar, dass keiner bei mir auf die Idee kommt zu sagen, so nach dem Motto, wie jetzt, sie
haben eine Nebentätigkeit. Ich meine, das stand schon in meinem Lebenslauf drinnen, ja?
So, und dann habe ich noch reingeschrieben, mehrere Open-Source-Projekte auf GitHub,
zum Beispiel für Elektroautos. Da habe ich natürlich hier drauf angespielt, aber, ja.
Ja, und ich weiß nicht, ob das gut ankam oder schlecht, also schlecht kam es nicht an,
aber ich weiß nicht, ob es gut ankam, ob die das interessiert hat, aber ich vermute mal,
weil im Vorstellungsgespräch war das Thema mit Elektroauto und was ich da gebaut habe.
Ist ja auch sinnig, finde ich auch wirklich sinnvoll, ein bisschen Anwendungsentwicklung
zu lernen, auch als Physi.
Man darf nicht vergessen, man hat ja auch in der Berufsschule Programmieren als Fach,
wobei ganz ehrlich, in der Berufsschule sind wir glaube ich über Printf nicht rausgekommen
in 3 Jahren.
In der Berufsschule lernt man da nix.
Würdest du Wert auf die Comment-Nachrichten legen? Ich habe ein Papier im Niegewerk.
Das ist...
Okay.
Ehrliche Antwort.
Ich lege Wert auf Comment-Nachrichten außer von mir selbst.
Bei anderen meckere ich immer ganz gerne,
dass man die Comments ja irgendwie ein bisschen aussagekräftiger schreiben könne.
Bei mir schreibe ich da in den übelsten Schwachsinn rein.
Ich mein, guck dir das mal an.
Ne, was steht denn hier drin?
Champ.
Okay, hier steht tatsächlich was ganz sinnvolles in den Comment Messages drin, aber ich glaube
ich habe hier nur sinnvolle Comment Messages, weil ich automatisch Release Notes aus den
Comment Messages generiere.
Ja, so in anderen Projekten habe ich auch viel Schwachsinn drin, da habe ich ja kaum
was gemacht.
Also meine Comment-Messages sind auch zum größten Teil Crap.
Ich habe auch schon Twitch-Emotes in Comment-Messages geschrieben und sowas.
Also ja, ich lege Wert auf Comment-Messages außer auf meine eigenen.
Ja, dann würde ich sagen, es ist Zeit, sich das mal anzugucken, weil ich glaube, man kann
ohne Übertreibung sagen, dass Git heutzutage das wichtigste Versionsverwaltungssystem ist.
Gibt sicherlich Leute, die haben noch SVN oder irgendwelche Oldschool-Krempel, aber
Sogar Archlinux hat mittlerweile jetzt seit 2-3 Wochen Git.
Oder manche haben auch noch...
Wie heißt das andere von...
Ich weiß gar nicht von wem das ist.
Was auch viele eine Zeit lang verwendet haben als Git, noch nicht ganz so verbreitet.
Mercurial meine ich.
Team Foundation, wenn nicht, ich meine, dieses Mercurial oder sowas noch gab.
Habe ich nie verwendet.
War auch mal eine Zeit lang relativ beliebt.
Aber ich denke, man kann ohne Übertreibung sagen, Git ist das aktuell bedeutendste und
wichtigste Quellcode, Versionsverwaltung, Source Control, wie auch immer, System, wie
man es nennen mag.
Das heißt, das würde ich mir auf jeden Fall angucken, wenn du damit noch nichts gemacht
hast und im AE-Bereich unterwegs bist.
Also Git ist eigentlich immer Voraussetzung.
Aber auf der anderen Seite, also man sollte sich jetzt nicht allzu viele Gedanken machen,
Wenn man sich das mal ein paar Tage anguckt, kommt man auch easy rein, also die Basics kriegt man sehr schnell hin.
Allerdings ist bei Git halt so, dass Git nicht sonderlich selbsterklärend ist.
Also man kann sich die Basics angucken, versteht's dann auch.
Ja, also man kann sich angucken, wie mach ich ein Pull, wie mach ich ein Push, wie mach ich ein Commit.
So, das sind die easy Sachen, die kriegt dann auch jeder hin.
Aber es ist nicht so einfach zu verstehen, was Git eigentlich genau immer treibt.
Und die Git-Hilfe-Seiten sind auch mega bescheuert.
Mein Lieblingsbeispiel ist dafür
Manpage von GitPush.
So.
Lest euch das mal durch und erklärt mir, was GitPush macht.
GitPush macht
Obviously, klar, was da passiert, oder?
Und der nächste Satz ist auch schon sehr vertrauenserweckend.
You can make interesting things happen to a repository every time you push into it.
Also, die Erklärung in den Git-Webpages, wenn technisch natürlich korrekt, aber insgesamt
vielleicht nicht so selbsterklärend, wie man sich das vielleicht wünschen würde.
Guck, Update Remote-Restaurant.
What the fuck?
Ja, also die Git-Hilfe ist oftmals nicht so selbsterklärend.
Dabei ist es meistens relativ easy.
So die Basics.
Aber wie gesagt, bei Git ist halt das Problem,
das ist nicht sonderlich selbsterklärend.
Manchmal ist es Leerzeichen-Branch,
manchmal ist es Slash-Branch.
Ähm...
Manchmal ist es Doppelpunkt-Branch, nach einer Weile macht es irgendwie alles Sinn, aber
nicht weil es in sich sinnig ist, sondern weil man es sich gemerkt hat.
Ich gehe da davon aus, dass sich Git unter anderem so schnell durchgesetzt hat, erstens
weil es gut ist und zweitens weil es eben mit dem Linux-Körnel einfach einen Use Case
hat wo man sieht der scheiß funktioniert ich meine bessere werbung für das
projekt kann es ja nicht geben wie übrigens der linux kernel benutzt das
auch ich meine es gibt kaum ein projekt was so krass gescaled ist weltweit und
so viele tausende commits bekommt und so komplexe anforderungen hat wie der
linux kernel also kannst du von ausgehen wenn sich ein
sortverwaltungssystem für den linux kernel eignet dann geht es für alles
andere auch
Das ist, glaube ich, eines der Sachen, was Git sehr geboostet hat.
Nutzt Microsoft auch Git für Windows?
Ich weiß es nicht, ob man das offiziell weiß.
Ich persönlich würde fast vermuten, mittlerweile ja, aber wissen tut es, glaube ich, niemand.
Ich habe mal ein Tool gemacht, das via Cronjob eine Arbeit von 4 Stunden oder so...
Ja sowas, genau, deswegen sollte man, das sind solche typischen Sachen, so Abläufe,
die alle Leute abfacken, automatisieren und in schöne Tools machen, das ist was, wo sich
es richtig lohnt, auch wenn man Physik gelernt hat, sich ein bisschen mit Anwendungsentwicklung
zu beschäftigen.
Können wir uns das gleich angucken.
Ich will bloß noch den Rest beantworten.
Ja, ich hab mir auch schon ein paar gespeichert dafür.
Hast du schon mal von Berufswettbewerbe für Nachwuchsjunge Leute gehört?
Dort gibt es IT-Kategorien von QtrampaSquid bis hin zu hinter seinen Worlds-
Nö.
Kenn ich nicht.
Sagt mir gar nix.
Bin ich mit 39 noch jung genug, dass ich da mitmachen darf?
Wahrscheinlich nicht.
Tom schreibt, ich habe von unserem CTO den Auftrag bekommen, unsere Ops an so Tools wie Ansible und Terraform zu gewöhnen.
Die sind leider etwas altmodisch unterwegs.
Also wenn eure Admins keinen Bock auf Ansible haben, dann ist ihnen wahrscheinlich nicht mehr zu helfen.
Aber ich kenne das, das gibt es selbstverständlich überall.
Gerade Leute, das ist immer wieder beim Beispiel, was ich gestern gebracht hab.
Das ist genau das Problem, was meine Generation hat.
Also Leute zwischen, sagen wir mal, irgendwie 35, 45 jetzt. Ich bin jetzt 38, so.
Also, das ist genau das Problem, was meine Generation hat.
Es gibt einmal welche, die boomerischste Boomer überhaupt sind.
So nach dem Motto, ah, wenn ich das nicht so machen kann, wie vor 15 Jahren oder vor 20 Jahren,
wo ich damit angefangen habe, ist das alles Müll und Cloud ist Müll und Automatisierung ist Müll und ich will das alles von Hand eintippen, jedes Mal auf der Shell und so.
Und dann hast du die und du hast Leute, die irgendwie ein bisschen mit der Zeit gehen und das eigentlich ganz spannend finden.
Ja, ich finde das besonders in meiner Generation sehr verbreitet, weil die Generation davor, denen nehme ich das nicht übel,
Wenn du 40 Jahre gefühlt das so gemacht hast, dass du halt keinen Bock mehr hast, okay, aber bei meiner
und generell hat meine Generation allgemein unabhängig von der IT das Problem, du hast welche, die sind mega krasse Boomer, die sitzen da
noch immer beim Stammtisch und und flamen drüber, wie kacke die Welt ist und dass sie eigentlich Bescheid wissen, wie das laufen müsste, aber sie
fragt keiner und du hast welche, die ein bisschen mit der Zeit gehen, die eigentlich
denke ich doch recht weit von Boomer entfernt sind, aber
Irgendwie die Leute sind einfach mal so im Alter von 12, 13 verkehrt abgebogen.
Die Leute in meiner Generation, die sich mit 12, 13, 14 Jahren angefangen haben mit Computerkram, Technik, Gaming, Internet und sowas zu beschäftigen,
das kam ja da erst so richtig auf und wurde dort so richtig langsam Mainstream.
Und die, die damals schon abgebogen sind in die Richtung Technik und so, finde ich kacke, interessiert mich nicht.
Das sind heute die Ultra-Stammtisch-Boomer, auch schon mit 38.
Und dann hast du die anderen wie mich, die in die andere Richtung abgebogen sind.
Natürlich gibt es in der Mitte auch schon ein bisschen was.
Ich meine, nicht jeder ist so bescheuert drauf wie ich, der mit 38 vom Rechner sitzt und in Twitch-Emotes spricht.
Aber, ja. Gibt's auch. Gibt's sicherlich bestimmt noch mehr.
Aber ich kenn das, ich kenn das. Sowohl in der alten Firma als auch in der neuen.
Wir haben Leute, die sind da nicht sonderlich aufgeschlossen.
In der alten Firma hatten wir beispielsweise einen, der sollte sich um E-Mail-Sachen kümmern und der hat es auch nicht so mit neuen Dingern.
Das ist normal.
Ja, und in der neuen Firma haben wir auch einen, der mag, sag mal so, ich will nicht sagen, der mag neue Sachen nicht, aber der ist sehr skeptisch, was neue Sachen angeht.
Gerade so, ah, warum sollte ich mich jetzt an Terraform gewöhnen, wenn das eh bald wieder durch was Neues ersetzt wird und sowas.
und sowas. Er hatte natürlich irgendwo nicht Unrecht, es ist durchaus denkbar, dass Tools, die heute super angesagt sind, morgen schon wieder outdated sind.
Wobei man sagen muss, gerade was Ansible angeht, das ist jetzt schon lange am Start und auch sehr etabliert und ist morgen nicht weg.
Und auch Terraform sehe ich jetzt nicht, dass Terraform in nächster Zeit durch irgendwas abgelöst werden würde.
Das gibt's ja auch schon ein paar Jahre und wird eher nur größer. Ich könnte mir tatsächlich vorstellen,
dass Terraform ergänzt wird oder auch andere Tools benutzt werden in Bereichen, wo Terraform jetzt nicht sonderlich gut ist.
Was vielleicht auch dazu führt, dass sich Terraform verbessert.
Also es gibt eine Sache, wo Terraform richtig eklig ist.
Das ist zum Beispiel, um Kubernetes-Ressourcen zu verwalten.
Das würde ich mit Terraform eigentlich normalerweise auch nie machen.
Man kann sein Cluster-Initial mit Terraform aufsetzen.
Nichts dagegen zu sagen.
Eigentlichen Kubernetes Ressourcen Objekts in Terraform das geht aber es ist kompletter abfuck und richtig richtig eklig
Also da finde ich so sachen wie Crossplane sehr interessant vom ansatz her und ich könnte mir vorstellen dass sich das im Kubernetes umfeld
Ich hoffe zumindest dass sich so sachen wie Crossplane im Kubernetes umfeld
etablieren und dort Terraform komplett raus fliegt
Ja aber so leute gibt es ja ist so
Auch gerade Admins, gerade wenn es ein bisschen ältere Admins sind, die sind sehr festgefahren in dem, wie sie sich denken, dass die Sachen gemacht werden müssen.
Fünf Jahre ohne Fehltage, siehste, das hab ich noch nie geschafft. Also ich hab noch nicht ein Jahr ohne Fehltage geschafft.
geschafft
da vielleicht hast du damals der bock
drauf gehabt aus
wieso wie wird man es
also jetzt nicht
wie wird man das so
aber äußere einflüsse ja vielleicht
haben wir damals äußere einflüsse dafür
gesorgt dass du das halt machen musstest
wegen geld oder so
wir wissen es ja nicht
aber es ist nie zu spät sich um zu
entscheiden was anderes zu machen
Ich habe meine Ausbildung auch angefangen, damals relativ spät, glaube ich, mit 24 oder so.
Das war für die damalige Zeit noch recht spät.
Ganz ehrlich, ich sehe da aber überhaupt kein Problem drin, auch mit 35, 40 noch mal was anderes zu machen.
Gerade in der heutigen Zeit und gerade wenn es um IT geht, ist das überhaupt kein Problem.
Die suchen händeringend Leute.
Bis auch 24, ja dann.
Ich habe ja vorher auch was anderes gemacht, das habe ich euch ja schon ein paar Mal erzählt.
Ich hab' davor ja auch, ähm, man mag es kaum glauben und ich finde jetzt, ich finde das immer auch dazu jetzt nicht,
aber ich hab' mir davor tatsächlich BWL-Zeug gemacht.
Ich weiß, man kann sich das bei mir kaum vorstellen.
Ja, ja.
Ich hab' ne, ich hab' ne Ausbildung gemacht.
Nein, ich hab weder BWL studiert, nicht Bürokaufmann für Bürokommunikation habe ich eine Ausbildung angefangen vor 20 Jahren oder so.
Ich hab die Ausbildung aber nicht fertig gemacht.
Also, warum ich das gemacht hab ist eigentlich ganz einfach erklärt.
Ich war mit der Schule fertig und ich war mega faul.
Ich hab daheim gehockt und hab MMO Kreiselgrind gemacht den ganzen Tag.
Also ich bin aufgestanden, hab den Rechner angemacht und hab mich MMO-technisch eingeloggt
und hab Kreiselgrind gemacht.
So und dann und dann habe ich das bis abends gemacht
und dann bin ich ins Bett und dann bin ich habe ich gepennt und habe MMO-Kreise gemacht oder
Irgendwelche online Sachen gespielt. Ich habe den ganzen Tag vorm Rechner gehockt und irgendwelche MMO-Sachen gespielt so
Und irgendwann kam da meine Mutter auf die Idee es kann jetzt nicht sein dass du nach der Schule den ganzen Tag vorm Rechner sitzt
Und nur nur am spielen bist und ich habe halt gesagt wie warum warum kann das nicht sein das doch eigentlich eine ganz tolle Geschichte
Also, ich finde schon, dass das so sein kann und so sein sollte."
Und die sagt, ne, sie will aber nicht, dass das so ist.
Und ich soll doch jetzt mal eine Ausbildung machen.
Ja, und die hat mich halt so lange genervt, bis ich dann...
Ich war ein Macher, genau, ich hab MMO-Kreise gegrindet.
Und dann hab ich dann irgendwann halt den...
Weil sie mich alle so genervt haben,
hab ich dann halt mich beworben und hab eine andere Ausbildung angefangen,
auf die ich damals schon keinen Bock hatte.
Also ich wusste ja damals schon, dass ich eigentlich Computer-Kram machen will.
Aber ich hab halt überhaupt nicht gesucht, da habt ihr halt das Erstbeste und BWL-Zeug gab's damals halt.
Das war der größte Scheiß, ich würd's nie wieder machen.
Also das Einzige, was ich mir gemerkt habe, hab ich auch schon ein paar Mal erzählt,
das Einzige, was ich mir gemerkt habe aus der Ausbildung ist, wie man die Buchhalternase macht.
Und dass man linear und degressiv abschreiben kann.
Wobei ich letztens gelernt habe, dass degressiv abschreiben anscheinend gar nicht mehr funktioniert.
funktioniert das ist das ohne scheiß legit das ist das einzige was ich noch
von der ausbildung weiß wie man die buchhalter nase macht ja ich zeige ich
ich weiß recycle story aber für alle die nicht wissen was die buchhalter nase
ist das ist die buchhalter nase dass das endet das entwertet das also nicht
Das sorgt dafür, dass man seine Bilanz nicht fälschen kann.
Also normalerweise ist ja so, wenn ich irgendeine Bilanz mache und würde das hier unten leer lassen und hier unten erst zusammenrechnen, dann könnte ich ja nachträglich noch hier was reinschreiben.
Und damit man das nicht fälschen kann, muss man die Buchhalternase drunter machen.
Das Ding heißt offiziell, ich bin mir nicht sicher, ob es offiziell Buchhalternase heißt, aber jeder nennt dieses Ding Buchhalternase.
Wird das immer noch gemacht? Keine Ahnung. Wie gesagt, ich hab die Ausbildung vor 20 Jahren angefangen und nie fertig gemacht. Keine Ahnung, ob man das immer noch so macht.
Wahrscheinlich macht man das, wenn man das von Hand macht, immer noch so. Elektronisch wirst du die Buchhalternase wahrscheinlich nicht brauchen.
Okay, offizielle Wikipedia-Eintracht gibt's dazu sogar.
Buchhalter-Nase, die Buchhalter-Nase, ähm, synonyme Begriffe, auch Buchhalter-Knie oder Wack-Handstrich.
Oh, Wack-Handstrich klingt auch gut.
Ist eine Sperrlinie, mit der Freiräume in T-Konten, okay, das sagt mir auch noch was,
gefüllt werden, damit man nachträglich nichts mehr hinzufügen kann.
Ja, genau.
Ja, das ist natürlich nur was, wenn man das analog erfasst.
Sobald das digital irgendwo drinsteht, ist es unsinnig.
Also ich denke nicht, dass irgendjemand eine Excel-Tabelle macht und ernsthaft dann eine
Buchhalternase reinmalt.
Dafür gibt es bestimmt eine ISO-Norm.
Garantiert gibt es dafür irgendeine Norm.
Also in Deutschland, da gibt es bestimmt, da gibt es für alles Normen.
Ja.
Ich weiß jetzt gar nicht, wie ich darauf gekommen bin, aber es ist auf jeden Fall nie
zu spät noch mal eine Ausbildung zu machen oder sich was anderes anzuschauen.
Achso, Ausbildung, ob wir uns die Stellenanzeige angucken können, ja klar, können wir machen.
Also, Angebot zum Fachinformatiker für Systemintegration, ok, was Ausbildungsstellen angeht, da bin ich
jetzt nicht so im Bilde, nach was man da gucken muss, aber wir schauen einfach mal.
Anforderungen. Brauchst keinen Führerschein, du brauchst...
Sprache... Sprache spezifisch? What?
Okay. Jobbeschreibung, ihre Aufgaben, das sind deine Aufgaben, das lernst du.
Du erhältst eine fachkundige Einweisung in dein Berufs- und Tätigkeitsfeld.
Ja gut, weil das ist eine Ausbildung. Würde ich mal erwarten, ja.
Du lernst komplexe EDV... EDV-Systeme, das ist noch so die Oldschool-Bezeichnung.
Sie erinnert mich immer an Reddit. Reddit, das Deutsche, gibt's ja in den Subreddits, EDV, Deutsche Community zum Thema EDV.
Äh, nein, das mein ich nicht. edv.de?
Ja, das mein ich, 106.000 Mitglieder.
EDV, das ist doch so ein typisch deutsches Ding, oder?
Elektronische Daten, das sagt niemand.
Jeder nennt es nur noch IT, aber okay.
Du lernst komplexe EDV-Systeme konzipieren und zu realisieren.
Okay, du wirst darin geschult, IT-Systeme in Betrieb zu nehmen,
verwalten und benutzergerecht anzupassen.
Okay, klingt auch so nach Standard-Physik-Gramm.
Du bekommst Einblicke in moderne Experten- und Diagnosesysteme
und nutzt diese, um auftretende Störungen zu identifizieren.
Moderne Experten- und Diagnosesysteme?
Braucht man da mehr als SSH?
Du wirst...
Du wirst Ansprechpartner bzw. Ansprechpartnerin bei Auf...
Ne, du wirst...
Sorry Leute, das muss man ja korrekt sagen, sonst regt sich auf Twitter einer auf.
Du wirst Ansprechpartnerin bzw. Ansprechpartner bei auftretenden Störungen und lernst diese zu beheben.
Ja, du erhältst das Know-How, IT-Anwendung, das Auswahl...
Ja, da hätte ich jetzt persönlich keinen Bock drauf, aber gut, wenn das in der Ausbildung halt vermittelt wird.
Also laut der IHK soll sowas ja auch in der Ausbildung vermittelt werden, das ist ja auch richtig.
Ja, laut IHK ist man ja zur Hälfte auch Kaufmann, aber die IHK erzählt viel Blödsinn, wenn der Tag lang ist.
Du wirst darüber sprechen, Anwendungen in Systemen zu ermitteln und zu lernen. Du lernst Systemdokumentation zu erstellen und Schulungen durchzuführen.
Ja, Systemdokumentation, das existiert in der Theorie immer und alle sagen, oh ja, Dokumentationsschreiben ist wichtig.
Oh ja, und wir müssen auf jeden Fall bei dem Projekt Zeit einplanen für Dokumentation.
Und am Ende gibt es halt trotzdem keine.
Du lernst bestehende Anwendungen auf verschiedene Anforderungen hinzutesten.
Das ist alles sehr allgemein.
Ihr Profil, das bringst du mit?
Du hast mindestens einen guten Hauptschulabschluss.
Ich bin begeistert, wie anspruchslos die mittlerweile geworden sind.
Bei mir wollten sie damals eher noch, also wenn man sich beworben hat für irgendwelche Physi-Sachen, Ausbildung und teilweise, bevor es Physi gab, gab es ja noch IT-Systemelektroniker und sowas.
Die wollten damals Abitur bzw. sehr guten Realschulabschluss.
Ja.
Was ich aber damals schon unglaublich bescheuert fand, weil du musst in keiner der Ausbildungen irgendwie Mathe-Fivehead sein oder sonst irgendwas groß wissen, was man in der Schule gelernt hat, also naja.
Aber damals konnten sie sich's halt auch noch raussuchen.
Du hast mindestens einen guten Hauptschulabschluss.
Du bist handwerklich geschickt.
Ja, also das kannst du dir auf jeden Fall im Vorstellungsgespräch hervorheben, dass du offensichtlich handwerklich geschickt bist.
Du machst das ja schon jahrelang.
Technisches Verständnis auch.
Du arbeitest gewissenhaft und gerne im Team.
Das kannst du auch hervorheben, dass du das machst.
Und auch quasi schon unter Beweis gestellt hast.
Das da oben ist sehr unspezifisch.
Wir bieten, das bieten wir dir.
Du absolvierst deine Ausbildung bei einer innovativsten Arbeit.
Gut, da würde ich nichts drauf geben.
So gelaber haben sie alle.
So nach dem Motto, wir sind Führer im Bereich,
im Bereich, Marktführend im Bereich, bla bla bla bla, der Marktführer und die Nummer
1 und bla und hier und da. Ja, das ist normal. Du sicherst dir mit der fundierten Qualifizierung
zur Fachinformatorin bzw. Fachinformatorin einen hervorragenden Beruf für E-Auto. Das
stimmt wohl. Du wirst von kompetenten Ausbildern ausgebildet. Ganz ehrlich, mach das einfach.
Es ist egal, was die hier schreiben. Das ist sehr generic. Das könnte auch JetGPT rausgehauen
haben, diese Stellenanzeige, das sagt wenig darüber aus, was sie wirklich machen, das
heißt ich würde mir schon mal bei denen auf der Webseite angucken, wo bin ich hier
überhaupt gelandet und was machen die, das ist auf jeden Fall vor jeder Bewerbung sinnvoll,
sich den Laden mal auf der Webseite anzugucken und sich vielleicht auch so ein bisschen die
Schwerpunkte rauszusuchen, was die machen, das ist sehr unspezifisch, also daran kann
man jetzt weder sagen, gut noch schlecht, ich würde sagen, guck dir das einfach an,
Und im Endeffekt, wenn du die Ausbildung durch hast, du kannst ja vielleicht sogar verkürzen mit Erfahrungen vorher und wenn du Fivehead da durchblickst, dann bist du in zweieinhalb Jahren, drei Jahren durch und hast eine Physiausbildung und dann kannst du ja immer noch dir genau das suchen, dort wo du hin willst, weil Physis werden händeringend gesucht auch nach der Ausbildung.
Aber ich würde es einfach machen.
Ich kann hierzu jetzt nicht viel sagen.
Das ist sehr 0815
Könnte schon fast aus Chat-GPT sein.
Ja.
Die bauen Funktürme und stellen die überall hin.
Ja.
Das ist schon mal gut, dass du das weißt.
Kann man ja anmerken.
ein bisschen schlau gemacht hast im Vorfeld. Das kommt immer gut an.
Erklär mal jemand was rebasen ist, der keine Ahnung davon hat. Okay, ich erkläre
rebasen immer so. Ein git rebase ist ein Reset mit dem anschließenden
automatischen Cherry-Pick. Ich hoffe jetzt hat man es verstanden, oder?
Weil nichts anderes ist ein Rebase.
Also ein Rebase in Git ist, klar, also ein Rebase in Git ist, du machst ein
Reset auf ein Comet, das du angibst und dann werden, also du resettest deinen
Branch auf einen anderen Stand und dann werden die Sachen, die du mehr in deinem Branch hattest,
obendrauf automatisch in der Schleife drauf Cherry Picked.
So ist das, das macht Git Rebase.
Du erklärst es immer so, dass es alle Comets nimmt und die in zeitlicher Abfolge noch einmal
abspielt.
Ja, aber das Wichtige bei einem Rebase ist ja, dass er vorher, also alle Comets wegnimmt,
dann auf den anderen Stand das setzt und dann die Comments oben drauf macht.
Ja, also das ist schwierig, ja, und wie gesagt, Git ist halt nicht so richtig selbsterklärend,
man muss sich ein bisschen damit beschäftigen, aber ansonsten lohnt sich's einfach, sich mit Git zu beschäftigen.
Sei es auch nur durch GitLab, GitHub, wo man sich zwangsläufig mit beschäftigen muss, früher oder später,
Wenn man sich mal andere Software angucken will oder vielleicht auch selbst mal ein Open-Source-Projekt machen will.
Man kommt eigentlich als Software-Entwickler und auch, ich gehe sogar so weit, nicht nur als Software-Entwickler,
man kommt als jemand, der was mit IT zu tun hat, egal ob das jetzt ein Physi ist, also Anwendungsentwicklung oder Systemintegration,
ein Netzwerk-Techniker, was auch immer. Ich finde, man kommt heute um Git-Basics eigentlich gar nicht mehr rum.
Denn, nicht nur Programmquellcode, also so richtig für Software, wo dann am Ende irgendeine Anwendung rausfällt, ist heute
in einem Git-Repo drin. Auch Infrastrukturkomponenten werden heute mal ganz gerne in einem Git-Repo verwaltet. Nennt sich dann heute hochtram
Infrastructure-as-Code, beispielsweise wenn man Terraform verwendet oder sowas.
Aber das ist auch normal, dass Infrastruktursachen getrackt werden über einen Git-Repo und
Und sicherlich noch vieles, vieles andere heutzutage auch.
Das heißt, wenn man ein bisschen was mit IT-Systemen am Hut hat,
man kommt eigentlich überhaupt kurz oder lang nicht darum,
sich ein bisschen mit Git zu beschäftigen.
Man muss nicht die super komplizierten Sachen wissen, ja.
Also man muss nicht wissen, wann er einen Fast-Forward-Merge macht und solche Geschichten und
wobei man das vielleicht nicht verkehrt.
Aber so die Basics sollte man tatsächlich können.
Microsoft nutzt ab sofort ein Git zur Windows-Entwicklung, okay, na ist doch offiziell, du meinst
Shit.
Das ist tatsächlich ganz gut.
Die Advents beschweren sich aber, dass sowas wie Updates super viel Zeit fressen.
Gut, die Kombination kenne ich auch, dass es Leute gibt die sagen, wir wollen keine Automatisierung haben, aber Updates dauern immer zwei Monate bis alle Systeme durch sind.
Das kenne ich, war bei meinem alten Arbeitgeber ähnlich.
Letztendlich gibt es dafür zwei Lösungsmöglichkeiten.
Die erste Lösungsmöglichkeit ist, die Admins machen alles wie bisher, übergeben das Ausrollen der Updates aber mit Anleitung an irgendjemand anderes,
der beispielsweise auch nachts da ist und 24-7 das in der Woche durchprügeln kann.
So haben wir das früher beim alten Arbeitgeber gemacht, oftmals, weil da war man Automatisierung, also das ist jetzt schon eine ganze Weile her, mittlerweile sind die auch besser, aber die waren Automatisierung sehr kritisch eingestellt, eine ganze Zeit lang und dann lief das so, wenn es Betriebssystem-Updates gab, dann haben wir das getestet auf Entwicklungskisten und auf Integrationskisten und haben uns das angeschaut, dass das funktioniert, dann haben wir eine Anleitung erstellt mit Dingern, wo man bei diesem Update drauf achten muss und dann haben wir das an unseren Support gegeben
Und er hat dann über 1-2 Wochen in der Nachtschicht die Produktivsysteme und Testingsysteme ausgerollt.
Ist eigentlich ziemlich bescheuert, weil es ein sehr hoher manueller Aufwand ist, Stunden und Geld ohne Ende verbrät, aber das wollten die so haben.
Ja, die waren damals Automatisierung recht kritisch gegenüber eingestellt, so das ist die erste Variante, was man machen kann.
So und die zweite, also wenn man sich das leisten kann, ja, wie gesagt, ich hab vorher bei einer Bank gearbeitet, die haben eh zu viel Geld gehabt und da ging das.
Und die zweite Sache, die man machen kann, ist, dass die Admins sich mal nicht so anstellen sollen und moderne Tools benutzen, die halt da sind.
Und wir sind nicht mehr 1984, 85, 86, 95.
Sondern es ist nicht schlimm, wenn man ein Tool nimmt, um beispielsweise Updates auf allen Systemen auszurollen.
Gut, es kommt natürlich immer darauf an, in welchem Umfang man das automatisieren will.
Es gibt, dazu gibt es ein Beispiel, auch nochmal von meinem alten Arbeitgeber, vom neuen bin
ich erst zwei Monate, da kann ich nicht so viele Beispiele bringen.
Dort haben wir einen Anbieter gehabt, der E-Mails kontrolliert auf Spam, das habe ich
glaube ich schon mal erzählt, ja, der Anbieter, der Spam kontrolliert.
Das Problem war nur, dass manchmal auch Sachen, also bei bestimmten Adressen, Sachen in der Spam-Filterung hängen geblieben sind, die eigentlich gar nicht gefiltert werden sollten.
So, und die Lösung dafür war, man soll dreimal am Tag in die Spam-Filter reingucken und alles, was diese vier Domains betrifft, grundsätzlich freigeben.
Egal ob Spam, Virus oder nicht. Ist egal.
Alles was diese vier Domains betrifft, soll grundsätzlich freigegeben werden.
Okay.
Und das war halt richtiger Abfang.
Die Leute vom Support mussten sich dreimal täglich einloggen,
irgendwie zig Seiten durchklicken, Sachen freigeben und so richtig bescheuert.
Das ging dann ein paar Monate, Jahre und insgesamt auch wurde das auch jahrelang dann, ähm...
ist das bestehen geblieben, dass das gemacht werden muss.
Und irgendwann bin ich auf die Idee gekommen und hab gesagt,
können wir das nicht irgendwie automatisch machen?
Der Anbieter selbst hat selbstverständlich für seinen Spam-Filter keinerlei API.
Wir haben beim Anbieter sogar angefragt, so nach dem Motto, warum gibt es eigentlich keinen API-Zugang dafür?
Ich meine, es ist ein Online-Service, ohne API-Zugang ist doch eigentlich total useless.
Und da sagte der Anbieter, ah, API-Zugang oder irgendeine Rest-API, ja, das haben wir aktuell nicht.
Wir haben dazu aber schon einen internen Feature-Request offen und haben damit unser Ticket geschlossen.
Ich meine ernsthaft, was interessiert mich, ob die intern einen Feature-Request offen haben, das ist doch für mich sowas, aber komplett unerheblich, das geht mir am Arsch vorbei.
Es beruhigt mich auch nicht, weil man kann auch drei Jahre intern einen Feature-Request offen haben.
Macht für mich keinen Unterschied, das funktioniert ja einfach nicht.
Ist eine geile Taktik, Tickets zuzumachen.
Wir haben dort einen internen Feature-Request offen. Bäm, Ticket geschlossen. Ja, aber das, was ich haben will, geht immer noch nicht.
Zumindest, was ich dann gemacht hab, um das zu automatisieren ist, kennt ihr Puppeteer?
Chatge?
Ne, nicht Ansible, das ist ein Webservice, mit Browser gehst du da drauf.
Puppeteer? Puppeteer ist eine Library zum Fernsteuern von Chrome.
Damit kann man in Chrome fernsteuern.
Auch Headless, also ohne GUI.
So, und dann habe ich ein .NET Programm erstellt.
Kann er auf Firefox?
Okay, Chrome ist auf jeden Fall standardmäßig.
Zumindest, dann habe ich ein .NET Programm erstellt,
mit puppeteer.net
und habe quasi das Klicken,
was unser Support macht,
im Browser nachgebaut.
Das habe ich auch im Stream gemacht, ja?
Ich habe quasi das, was unser Support manuell von Hand klickt, nachgebaut mit diesem Browser-Automatisierungstool.
Das war sehr eklig, weil du musst immer warten, so bis Diffs auf der Seite erscheinen und weiterklicken und so.
Und das ging dann aber irgendwann.
Problem ist halt nur, das Tool ist immer kaputt gegangen, sobald die ihre Webseite geändert haben.
Kam glücklicherweise nicht so oft vor.
Ich glaube, die haben zweimal in all den Jahren die Webseite geändert.
geändert, aber es gab noch ein zweites großes Problem. Der Anbieter hat
irgendwann zwei Faktor-Authentifizierung eingeführt.
Das heißt, ich konnte nicht einfach nur mehr mich einloggen im Browser und
Browser-Klicks simulieren. Also wie gesagt, ich habe Browser-Klicks
automatisiert. Ich habe dem gesagt, klicke jetzt auf dieses Div, klicke auf der
nächsten Seite auf dieses Div, dann gehe eine Seite zurück, klicke auf dieses Div,
Dann gehe ich eine Zeit zurück und klicke auf dieses Div.
Also das ist im Prinzip, was ich mit Puppeteer automatisiert habe.
Und irgendwann haben die 2-Faktor-Authentifizierung eingeführt.
Und ihr könnt euch vorstellen, 2-Faktor-Authentifizierung ist schwierig, wenn man sich mit einem Bot einloggen will.
Oder? Kann man nachvollziehen, oder?
Leute, weil ihr habt einen Bot, der automatisch auf eine Seite geht und dort Dinge einklickt.
So, wenn der Bot sich jetzt einloggen soll mit 2-Faktor-Authentifizierung, ist schwierig.
Weil der Bot kann ja eure SMS auf dem Handy nicht lesen. Ist logisch soweit, oder?
Also das Problem versteht man.
Weil ich will nur sicherstellen, dass man das Problem versteht, bevor ich euch die Lösung dazu sage. Und zwar, unsere Lösung war,
finde ich,
enormst pfeifett.
Und das ist eine Lösung, die könnt ihr euch auch merken, wenn ihr ähnliche Probleme habt. Also,
Die Browser-Automatisierung hat nicht mehr funktioniert, weil man eben jetzt nicht einfach nur mit Username und Passwort einloggen konnte, sondern zusätzlich auch noch eine Bestätigungs-SMS oder eben ein Zwei-Faktor-Code von der App eingeben sollte.
Was haben wir gemacht? Wir haben die Zwei-Faktor-Authentifizierung nachgebaut.
Und zwar, ich hole mal ein bisschen aus und ich hoffe man versteht das.
versteht das. Zwei-Faktor-Authentifizierung mit App funktioniert folgendermaßen.
Man schaltet die Zwei-Faktor-Authentifizierung ein und dann passiert folgendes. Das habt ihr
bestimmt auch schon gemacht. Wenn ihr die Zwei-Faktor-Authentifizierung einschaltet,
dann bekommt ihr so einen Code. Und diesen Code scannt ihr, so einen QR-Code, und diesen Code
scannt ihr mit zum Beispiel in der Zwei-Faktor-Authentifizierungs-App auf dem Handy.
Habt ihr wahrscheinlich alle schon gemacht, oder?
So, und dann taucht das im Handy auf und dann kannst du quasi beim Einloggen den Code vom Handy abtippen
und dann gibst du dein Passwort ein und danach gibst du den Code vom Handy ein in der Zwei-Faktor-App und dann ist gut.
So, was man jetzt wissen muss ist, dass Zwei-Faktor-Authentifizierung mit App auf dem Handy eigentlich enorm simpel ist.
Das ist genau das, was das Wort sagt, das ist ein zweiter Faktor neben deinem Passwort.
Da ist keine Magic großartig dahinter, dass das nur Apps auf dem Handy machen könnten.
Was in so einem QR-Code drin steht, ist folgendes.
Da steht drin, das Verfahren, was benutzt werden soll, um das Token zu generieren
Und es steht ein gemeinsames Secret drin, das Secret wissen nur die App von euch und der Server, gegen den ihr euch authentifizieren müsst.
So, und auf Grundlage des Token-Generierungsverfahrens und des gemeinsamen Secrets können sowohl Server als auch Authentifizierungs-App unabhängig voneinander für die aktuelle Uhrzeit das gleiche Token erzeugen.
Das heißt, das Server erzeugt auf Serverseite das Token jetzt für 10.16 Uhr, eure App erzeugt mit den gleichen Informationen das Token für 10.16 Uhr
und dann wird einfach nur überprüft, ob das übereinstimmt, ja?
Das ist alles, was Zerfakta Authentifizierung macht.
Es gibt bestimmt auch irgendeinen, kennt ihr irgendeinen guten Reader für QR-Codes, äh, QR-Code-Reader, wo man Bilder hochladen kann oder sowas?
Äh, online? Ne.
Web, WebQR.
Deine Kamera, keckel. Ne, ne, ganz bestimmt nicht.
Kann man hier nicht Bilder hochladen oder so?
Sonst würde ich, dann würde ich euch das nämlich mal zeigen.
Okay, what's inside 2F?
2FA, QR-Code.
QR-Reader online, okay.
reader online ok ok Datei auswählen QR-Code QR-Code 2FA ich muss ich hab
jetzt keinen wir müssen uns jetzt mal hier hier irgendwie testweise einen
raussuchen ok den nehmen wir jetzt einfach mal bild speichern unter ja und
Und jetzt laden wir den hoch, Datei auswählen, Desktop.
und jetzt wo steht jetzt was in dem bild steht mein gott was ist alles wieder
für kack services qr code scanner online
gibt es da gibt es doch muss es doch irgendwas online geben man nein scan
von Pfeil. Perfekt. Ach das steht da drinnen. Fuck, das will ich nicht. 2FA-QR-Code. Ich
brauche einen echten. Ja wunderbar, den hier. Speichern unter. Datei auswählen.
Hä?
Ich will euch das nochmal zeigen.
Alter.
Wo hab ich das gespeichert?
Desktop.
2FA, hier.
Ey, fuck, die geben alle keine richtigen Codes.
2FA, QR.
Ja, genau, sowas hier, sowas hier, Time Base.
Genau, das sind die Sachen, die in dem QR-Code drinnen stehen.
Du musst eingeben, welches Tokenverfahren du benutzen willst.
Dann ein gemeinsames Secret, das ist random generiert beim ersten Mal.
So, und dann irgendein Label.
Genau, da kommt dann so ein Code raus.
Das steht dann halt in dem Code drinnen.
Ist halt unsinnig, dass das jetzt so kompliziert war, aber okay.
Zumindest, wir haben uns den QR-Code generieren lassen für den Anbieter.
Und dann haben wir mit einem QR-Code-Reader eben das Secret und den Token-Generierungs-Algorithmus ausgelesen aus dem QR-Code und haben dann eine C-Sharp, OTP, UFA, LIP.
Und dann haben wir sowas hier in der Richtung verwendet. Eine Library für .NET, die eben diese Tokens generieren kann.
Das heißt, wir haben quasi...
Äh, was heißt wir?
Eigentlich hab mehr oder weniger ich das gebaut.
Der einzige andere, der ein bisschen was mitgemacht hat,
war unser Mail-Experte,
der mir gesagt hat, was für Domains wir brauchen.
Also...
Ähm...
Ich hab dann so eine Library hier verwendet,
die quasi
das nachgebaut hat, was die
Zwei-Faktor-Authentifizierungs-App machen würde.
So, und dann
konnte man sich einloggen
per Zwei-Faktor-Authentifizierung, auch wieder per Browser-Automatisierung und dann würde
das ganze Spam freigeben, automatisiert, trotz Zwei-Faktor-Authentifizierung.
Ich hoffe, man konnte der ganzen Sache jetzt halbwegs folgen.
Also man muss für Zwei-Faktor-Authentifizierung keine Zwei-Faktor-Authentifizierungs-App benutzen,
man kann das auch nachmachen.
Das ist recht simpel, ja, das ist total easy.
Man muss nur drauf kommen, das so zu machen und es muss einem klar sein, dass das geht,
die ganzen Apps auf dem Handy auch keine, die können ja nicht zaubern, die machen
genau das gleiche, die müssen wissen welchen Talken-Algorithmus und das
gemeinsame Secret und dann ist es easy. So, dann haben wir quasi uns den
Zwei-Faktor-Authentifizierungs-Code selbst generiert und haben uns
eingeloggt mit Passwort und selbst generiertem Zwei-Faktor-Authentifizierungs-Code.
Wenn das aber zum Beispiel Microsoft Multi-Faktor-Authentifizierung ist, geht
das nicht. Doch, das geht bei allen, bei allen
Authentifizierungsvarianten, die eben die klassische Sache mit dem QR-Code machen, ohne, dass du irgendwelche weiteren Online-Abfragen brauchst oder sowas, ja?
Also wenn das jetzt irgendwelche Online-Sachen sind, wie du brauchst die Microsoft-Authentifizierungs-App und die kriegt über einen Zusatz Microsoft-API eine Push-Notification geschickt,
dass sie dir jetzt was anzeigen soll und du drückst dann auf Approve und dann geht das über den Web-Service zurück und dann wirst du eingeloggt, dann geht das natürlich nicht,
Aber sobald, sobald das, ähm, also solange das die klassische Variante ist, mit gemeinsamem Secret und anhand der Uhrzeit das Token erzeugen, geht das.
Wenn es was Spezielles ist, dann geht das natürlich nicht.
Wenn es was, was ist, was nicht bekannt ist, wie es, wie es richtig funktioniert, ja, und wie man das, oder wenn es Mobilfunkverbindung braucht oder sowas, ja, dann geht das natürlich nicht.
Ja, das gibt es bei uns aber auch.
Ja, das geht mir persönlich echt immer auf den Sack, wenn sie alles besser wissen, aber dann die einfachsten Dinger nicht gedacht haben.
Ich glaube, es gibt Leute, die sind, ähm, die sind 38, ich bin jetzt 38, die sind so alt wie ich und die ist es genauso, die finden Technik kacke und haben noch nicht mal ein Tablet, um was zu lesen, die kaufen sich noch Zeitungen und sowas, muss man sich mal vorstellen, kauft sich lieber eine Zeitung, anstatt morgens mal ein Tablet aufzumachen.
Mann, was würdest du anschauen, wenn du einen halben Tag in Frankfurt wärst?
Der Pulumi ist genauso eklig für kubanetes Ressourcen wie Terraform, Crossplane ist das
beste dafür.
Gerade weil man das auch kombinieren kann mit externen Ressourcen.
Was würde ich mir anschauen, wenn ich einen halben Tag in Frankfurt wäre?
Das ist eine gute Frage, ich bin oft einen halben Tag in Frankfurt, weil ich da arbeiten
Aber was würde ich mir anschauen?
Ja, äh, falls du noch nie auf irgendeinem Hochhaus warst, kannst du mal auf den Maintower oben drauf oder sowas.
Das tatsächlich finde ich, finde ich ganz, ganz nett.
Wenn man schon mal, wenn man schon mal in einem Hochhaus war, naja, viele Städte sehen von oben ähnlich aus,
wobei Frankfurt schon besonders cool ist.
Also ich würde mal auf einen Maintower oder auf irgendeines der Hochhäuser drauf, wo man drauf kann,
kann. Kostet wahrscheinlich 5€ oder so, weiß nicht was aktuell Eintritt kostet. Also ich würde auf jeden Fall auf irgendein Hochhaus rauf und runter gucken, weil sowas haben wir in Deutschland nicht, an vielen Stellen. So Frankfurter Skyline und Hochhäuser. Also wenn du mal irgendwo im 50. 60. Stock gewesen bist, das sieht schon cool aus. Das kann man sich durchaus einmal angucken.
Ansonsten weiß ich keine Ahnung, was man sich in Frankfurt groß angucken sollte.
Kann man einfach auf die Hochhäuser rauf?
Ne, deswegen musst du ja zu irgendeinem Gebäude, wo das angeboten wird.
Und im Main Tower bieten sie es an, das weiß ich.
Komm mal gucken, was kostet hier?
Was kostet Eintrittsaussicht, was kostet das?
Ticket kaufen, 9 Euro Eintrittspreise.
Den Dezex kann man sich als Normalsterblicher leider nicht angucken.
Das hier, genau, das ist wirklich cool, sich das mal anzugucken.
Den Dezex kann man sich leider nicht angucken.
Bisschen schade, ich komm da auch nicht mehr rein, seit ich nicht mehr beim Provider arbeite.
Ich würde gerne mal wieder rein und mir das angucken.
Ich war dort, war ich auch noch nie, auf Main Tower obendrauf, aber ich war schon in Hochhäusern im 50. und 60. Stock.
Und das ist ähnlich.
Aber ich muss jetzt, wir sind doch ganz schön am Schwätzen.
Ja gut kann ich verstehen die wusste wahrscheinlich sich auch um alles kümmert
Ich habe das damals auch nicht nachvollziehen können warum die mich alle so nerven mit arbeiten gehen
Ja wollten sie
Als regner sehr gute idee
Ich würde ja auch nicht wegen den Benefits rein zu einem Laden gehen, aber es stimmt
schon da wird oftmals viel Wind um nichts gemacht, aber so Sachen wie Jobticket und
sowas das ist ja wirklich ein handfester Vorteil, aktuell sparst du halt deine 50, deinen 49
Euro im Monat. Macht mein neuer Arbeitgeber glücklicherweise auch. Also die bezahlen die ganzen Tickets.
Ja, richtig.
Ist bei deinem neuen Arbeitgeber das Homeoffice im Arbeitsvertrag geregelt, gibt es eine zusätzliche Vereinbarung gibt es bei uns.
An die sich erstaunlich, erstaunlich auch gehalten wird.
Nicht so wie bei dem letzten Laden, wo ich gewesen bin. Wir machen eine Vereinbarung und dann halten wir uns nicht mehr dran. Nein, die halten sich dran.
Und also bei mir im Team ist es aktuell so geregelt, es ist tatsächlich so, dass es die Teams unterschiedlich handhaben können, aber bei mir ist es im Team so geregelt, dass wir im Durchschnitt einmal die Woche da sein sollen.
Und es ist auch egal, ob das jetzt so ist, dass man vielleicht mal, wenn bisschen mehr ist, zwei Tage da, aber dann zwei Wochen nicht.
So, also es hat mich auch bisher noch keiner genervt und wisst ihr, was ich witzig finde?
Du warst in der, ich war in der Versicherungsbranche, jetzt ähm, nee, Schwachsinn, umgedreht, ich
war bei einer Bank und jetzt bin ich in der Versicherungsbranche, ja, richtig, äh, ist
bei deinem neuen, also, ähm, ja, und ich hab gehört von anderen Teams, so nach dem Motto,
Wir hätten schon eine restriktive Regelung, was Homeoffice angeht.
Wie gesagt, die restriktive Regelung bei uns ist im Durchschnitt einmal die Woche da zu sein.
Also wenn das schon die restriktive Regel ist, dann kann ich mich nicht beschweren.
Das ist schon mal dreimal besser als bei meinem alten Arbeitgeber.
Also da kann ich auch mit der restriktiven Regelung leben.
Das klingt nach einer typischen 3-Heads-Handwerker-Frage.
Genau so stelle ich mir das vor.
Ich hab mal ein Praktikum gemacht in der Autowerkstatt, da war ich noch sehr jung, das war so in der 8. Klasse oder so, nein auch in der 6. Klasse glaube ich, wo man immer ein Praktikum macht.
In der Autowerkstatt, Leute, das war überhaupt nicht meine Welt, die haben den ganzen Tag solche komischen Sprüche geklopft die ganze Zeit.
Bis ich mich dann irgendwann dran gewöhnt hab, dass es halt Handwerkerspeak ist im Endeffekt, ja.
Aber das fand ich damals alles sehr weirdchamp.
Was? Kein Mathe für den Informatikma- Das kann doch nicht sein.
Wenn du, wenn du, wenn du, wenn du, also es muss ja nicht mal Master sein,
Aber wenn du überhaupt, wenn du Informatik studierst, wie soll das ohne Mathe gehen?
Also du lernst ja die Hintergründe in einem Informatikstudium.
Du lernst ja zum Beispiel, wie kann ich Algorithmuslaufzeiten, Algorithmenlaufzeiten beweisen und sowas.
Wie soll das ohne Mathe funktionieren?
Achso, achso, okay, ich hab das falsch gelesen. Ich dachte, generell gibt es das nicht mehr.
Okay, das ergibt natürlich schon ein bisschen Sinn.
Wobei ich eigentlich gedacht hätte, auch für Hintergründe braucht man da noch ein bisschen mehr im Masterstudium, aber okay.
Aber ja gut, dann ergibt es ja Sinn, wenn es wirklich nur um den Masterstudiengang geht.
Ich dachte so allgemein gibt es in Informatik keine Mathe mehr.
Hä?
Ich habe Selenium nie verwendet.
aktuell drei Sachen, wenn du Browser automatisieren willst. Selenium, Puppeteer und Playwright.
Ja, Frankfurt Hauptbahnhof, ganz toll. Ja. Wenn man will, dass nach Pisse riecht überall.
Kann man ja mal eine Runde um den Hauptbahnhof drehen.
Wie stehst du zu physischen Videospiele zu sammeln?
Gar nicht. Ich habe meine ganzen Xbox-CDs und so noch hier, aber...
Ich meine, es ist sicherlich ganz cool, wenn es eine Generation ist und eine Plattform ist, mit der man viel verbindet.
Wenn man beispielsweise sich seine A Link to the Past, Secret of Mana oder solche Dinger auf den Schrank stellt
und sich irgendwie so einen schönen Hintergrund für Streaming bauen will und sowas, dann sicherlich ist das cool.
Das ist cool, aber ansonsten...
Also auf dem Minetower würde ich tatsächlich mal rauf, mir die Aussicht angucken.
Essen würde ich da nix, wahrscheinlich weil es abartig teuer ist.
Hat die Versicherungsbranche allgemein einen besseren Ruf bei Erzielern oder im Vergleich?
Ich würde sogar eher sagen umgedreht.
Also beide ja, aber ich würde sagen wahrscheinlich Banken sogar noch eher einen Tick besser.
Und weil Banken auch teilweise sehr oldschool sind, was da so läuft.
Also es gab noch letztens mal irgendwo so eine Tabelle.
So die bestbezahlten IT-Branchen.
Ich glaube das erste war Bank.
Das zweite war Versicherung und das dritte war Pharma-Industrie, wenn ich das jetzt noch richtig aus dem Kopf hinbekomme.
Und da würde mich nicht jucken, ob die einen guten oder schlechten Ruf haben, solange die ordentlich Kohle rüberwachsen lassen.
Ist mir der Ruf doch egal, hauptsache die bezahlen pünktlich.
Wenn du Pech hast, kriegst du für sowas sogar eine Abmahnung, je nachdem wie der Laden drauf
ist.
Sich einem ungesperrten PC Adminrechte zu besorgen ist, je nachdem was es für ein Laden
ist, schwierig.
Rollt es da eh weg, ja dann.
Also ich bin nicht der Über-Matte-Checker, aber mit Programmieren klappt das eigentlich
so ganz gut.
Hast du noch ein bisschen Kontakt zu Commander Krieger?
Eigentlich, eigentlich nicht, ne.
Das ist schon eine Weile her.
Okay, nice, wir haben es geschafft.
Heute ein bisschen längere Schwätzeinlage wie sonst Sonntagmorgens, aber muss auch mal sein.
Lass mal gucken, was können wir uns denn noch für Videos angucken.
Was haben wir denn hier schönes?
Wie man Passwörter knackt.
Okay, es ist ganz einfach, man muss Best-Practice-Passwörter nehmen, sowas wie 123456, weil wie kann das
schlecht sein, wenn das Passwort so verbreitet ist?
Wie man Passwörter knackt, ah, er wieder, 14 Minuten, okay, Hacking-Tutorial, okay,
Okay, jetzt kommt's, Leute.
Jetzt bin ich mal gespannt.
Guck mal, was haben wir denn sonst noch zu bieten?
How I swapped gaming with coding.
Das hat der Max gestern gepostet,
dass wir uns das mal angucken sollen.
2 Minuten 38, okay.
Das geht.
Das geht.
Schade, dass Koala...
Gut über den Content von anderen Leuten
jetzt nichts sagen. Das einzige, was ich beim Krieger mitgekriegt habe, ist, dass der seit
Jahren jetzt quasi irgendwie so Tauchzeug versucht zu machen, was mich persönlich nicht
interessiert. Und ansonsten sollen sie alle machen, was sie wollen. Das Video ist nicht
schlecht. Okay, dann gucken wir uns das jetzt an. Da können wir auch gleich bei der Gelegenheit
Die Lautstärke einstellen unter Windows bestimmt ja nicht stimmen
I love video games
I've spent a good part of my life playing them
I love video games
I've spent a good part of my life playing them
But it was when I was in Uni, clocking 10 hours a day on Steam
I needed to make a change
So I asked myself
Why do I even play video games?
Gaming always gave me a sense of community
I was never really good at sports
I wasn't popular
And I wasn't-
Außer, außer wenn man Singleplayer spielt
Also für mich kam mein Gefühl von Community durch Videospiele zu spielen und darüber zu reden.
Aber dann hat es mich getroffen. Wie ist das so anders als Coding-Communities?
Ich habe ein paar tolle Coding-Communities auf Discord und Reddit entdeckt und als kompletter Noob angefangen zu reden.
oder sowas. Das passiert eigentlich in Programmier-Communities relativ selten.
Okay, auf Stack Overflow ist ja teilweise auch schon ein bisschen. Aber gut, so richtig krasse
Sachen siehst du auf Stack Overflow auch nicht. Ich habe jetzt übrigens nicht zugehört.
Es gibt keinen besseren Gefühl, als gut an etwas zu kommen.
Als ich in die Coding-Gemeinschaften reiste, habe ich bemerkt, dass ich nicht diejenige sein wollte, die alle Fragen stellt.
Ich wollte diejenigen sein, die sie beantworten.
Also habe ich mehr Zeit gebraucht, um...
Ja, es gibt tatsächlich
Programmier-Community-Foren, die abartig sind. Ja, zum Beispiel das Microcontroller-Forum.
Das ist abartig.
Mal gucken, ob wir... Lasst mal gucken, ob wir gleich auf den ersten Blick
irgendwelche
Toxic Sachen finden.
Okay, da gehen wir jetzt rein.
Okay, das ist ja gar nicht toxik
Ist ja ganz ganz normal alles
Vielen Dank für die positiven Kommentare und Tipps
Okay Leute, ich glaube einen schlechteren Thread hätte ich nicht aufmachen können um
euch zu zeigen
Wie Kacke es in dem Forum früher zumindest immer zuging
Vielleicht haben sie sich ja ein bisschen aufgerafft, keine Ahnung.
Na gut.
Konnte ich euch jetzt nicht zeigen, aber ja, im Microcontroller-Forum ist die Umgangsform
doch auch recht toxik gewesen, früher zumindest.
Da stand gerade schon was von x kann ich lesen, ja das ist ja Standard.
Es wurden die drei ersten Antworten gelöscht, ach das habe ich gar nicht gelesen, cool geht
ja schon gut los.
Ey ja komm, natürlich sind die Leute ein bisschen älter, guckt euch mal die Optik
von dem Forum an.
Er ist garantiert, ja.
Okay, lass mal, lass mal weitergucken, wo sind wir stehen geblieben?
Spawn gibt's ewig schon!
Spawn gibt's ewig schon!
Spawn gibt's ewig schon!
Argumente, sein eigenes Grinden. Also habe ich einfach verändert, was ich grinden wollte und grundsätzlich liebe ich es, Videospiele oder Coding zu grinden,
weil Spielen meine Art von Entschleunigung war. Ich konnte für Stunden komplett frei von all meinen Problemen entfernen und wenn du ein Kind warst, das mit viel Unstabilität aufgewachsen ist,
Gut, das kann man natürlich beim Programmieren auch. Man kann ohne Probleme 5-6 Stunden am Tag damit verbringen und sich auf nichts anderes konzentrieren.
Ja.
Also wenn man Bock drauf hat.
Ja, klar.
Kenne ich, ja.
more fun than gaming, because I never felt guilty at the end of a session. Now I don't
hate gaming and I don't blame the industry. I think the way I approached gaming was wrong
and now I have a super healthy relationship with it. Instead of playing I watch my favorite
streamers while I'm coding. I keep up-to-date with games so I can talk-"
Also Leute, ich muss sagen, bei mir ist es genau umgedreht gewesen.
Ich versuche, mich in letzter Zeit tatsächlich dazu zu bringen,
wieder mehr zu spielen, anstatt mich den ganzen Tag mit Technik und Progress und Gebastelkram
zu beschäftigen, so zur Unterhaltung.
Es gab Zeiten, da habe ich kaum irgendwas gespielt, weil es halt auch einfach Games,
keine Games gab, auf die ich Bock hatte, beziehungsweise
einfach nicht richtig gesucht habe.
Ich habe den ganzen Tag irgendwas gebastelt
und
Und ich wirklich ich versuche es in letzter zeit genau umgedreht wie er hier im video ich versuche ein bisschen mehr
Ein bisschen mehr zu spielen wieder einfach weil es unterm strich mehr hirn aus und entspannung ist beides sorgt dafür
Man, kann beides so nennen wir es mal zur zum zeitvertreib zur unterhaltung benutzen wenn man was bastelt ist es eher
So oder wenn man was programmiert wenn man technik sachen sich anguckt was ausprobiert was bastelt ist es eher so dass das gehirn beschäftigt
ist weil es eben interesse an der sache hat und im lernmodus ist und eben halt ja so dass das
so immer weil deinem gehirn quasi permanent immer so ein bisschen bisschen feuer gibst so
bisschen bisschen so bisschen holzstücke rein wirf sondern brennt weiter und so so und beim
gaming ist umgedreht game ist eher mehr dein hirn ist auch beschäftigt allerdings eher so
so Richtung, Entspannung kann man nicht sagen, so eher Richtung Zerstreuung, Entspannung
und sowas.
Deswegen, ich hab das schon gemerkt, dass auch wenn das beides richtig Spaß macht, ich
am besten den Sonntag mit Gaming oder irgendwelchen Unterhaltungssachen verbringe, anstatt mich
mit, äh, was weiß ich, äh, Kopernetes, äh, Programmieren, Technik, sonst was zu beschäftigen.
Einfach, weil mal ein Tag die Woche nicht an irgendwelche Technik-Sachen denken und
sich Gedanken machen, ist auch nicht verkehrt, ja?
Und ich mein, ich arbeite 8 Stunden am Tag, 4 Tage die Woche, ähm, mit Technik-Kram.
Ich sitz hier vorm Stream, wir machen sehr viel Technik-Sachen, ich beschäftige mich
in meiner Freizeit damit. Und ich muss jetzt wirklich mal absichtlich sagen, ey, ein Tag
die Woche mach einfach mal weniger. Gar nichts schaffe ich nicht, weil gerade wenn es Themen
sind, die mich sehr interessieren und Sachen, die neu sind, da bin ich, ich kann unglaublich
schlecht so locker lassen bei irgendeinem Thema, wenn es nicht funktioniert. Erinnert
ihr euch noch daran, wo wir FFmpeg und C++ mit WebAssembly im Browser gemacht haben?
Das war ein Thema, da habe ich mich nonstop zwei Wochen mit beschäftigt. Also nonstop
ist übertrieben. Jede Zeit, die ich hatte zwischendrin, habe ich mich zwei Wochen non-stop damit beschäftigt,
weil ich das einfach so ein interessantes, spannendes Thema fand und mich genervt hat, dass es nicht richtig funktioniert hat.
Wir hatten am Ende, nur mal so zu erklären, wir hatten am Ende einen Videoplayer gebaut im Browser,
der Videoformate abspielen konnte, die der Browser normalerweise nicht unterstützt.
Und der war besser als alle Beispiele, die man im Internet gefunden hat, weil der konnte streamen und nicht nur lade ein Video hoch und spiele es dann im Browser ab.
Nein, du konntest Videos streamen im Browser von irgendeiner URL und abspielen in Formaten, die der Browser nicht unterstützt.
Also du konntest beispielsweise eine URL eingeben, wo irgendjemand eine alte Fernsehaufnahme
beispielsweise hat, hier mpeg2.ts, die hast du angegeben in den Player und der hat sich
das angefangen runterzuladen und während der runtergeladen hat, hat er es schon nach
ffmpeg gepackt und ffmpeg hat es decoded und abgespielt.
Also, nee, Schwachsinn, FFmpeg hat es decoded, ich habe mir die Frames rausgeholt und die
Frames habe ich dann gerendert in ein Canvas-Element, glaube ich.
Ich glaube, das gibt es nicht auf GitHub, das gibt es nur bei mir lokal in meinem GitLab
irgendwo.
Ja, ich habe das auch noch irgendwo.
Das haben wir im Stream gemacht und ich habe mich auch Off-Stream damit viel beschäftigt.
Ich habe da zwei Wochen dran rumgebastelt bis es irgendwie funktioniert hat und mittlerweile
sage ich ja das ist gut, man lernt ja da auch viel, viel ist jetzt vielleicht nicht was
man direkt im Job braucht, aber ohne Mist Leute ich habe so viele Sachen schon wo ich mich
privat damit beschäftigt habe und sei es nur über Ecken bei mir auf der Arbeit anwenden
können und sei es nur, dass man Bescheid wusste über irgendwas, das lohnt sich immer.
Es ist nie verkehrt, technikmäßig was zu lernen, auch wenn das nicht das ist, womit
man sich primär auf der Arbeit beschäftigt.
Aber ich habe gemerkt, es ist einfach sinnvoll, mal 1-2 Tage die Woche wirklich zu sagen,
ne, auch wenn ich Bock habe, heute weiterzubasteln, oder war da WebGL, genau, ich habe es mit
WebGL gerendert, auch wenn ich heute richtig Bock drauf habe, weiterzubasteln und ich schon
Ideen hat, wie man weiterbauen könnte, weiterprogrammieren, was man noch einbauen könnte. Einfach zu sagen, nee, heute ist der Tag, heute mache ich mal
kein Technik-Kram von morgens bis abends, sondern ich setze mich mal hin und spiele mir eine Runde Half-Life durch. Oder sowas in der Richtung.
Und, also wie gesagt, bei mir ist es genau umgedreht wie bei ihm im Video.
Und das bringt mich zu meinem letzten Punkt.
Code ohne Zweck.
Wenn du Videospiele spielst, gibt es keinen echten Zweck.
Du spielst einfach nur für Spaß.
Warum kannst du nicht den gleichen Ansatz zu Coding nehmen?
Ja, das stimmt schon, wobei die Art, wie man sein Hirn benutzt, halt irgendwie ein bisschen anders ist.
Wenn man, wenn man programmiert, ist das Hirn halt permanent im Denk- und Lernmodus,
was auch Spaß macht, weil man sieht, weil das halt ultra
motivierend ist, wenn man sieht, dass das funktioniert, was man sich gedacht hat und gerade wenn es Dinger sind, die nicht so 0815 sind,
wo du in jedem Tutorial im Internet dir angucken kannst, aber es ist eine andere Art von
von Hirnbeschäftigung wie Gaming.
Ich finde das kann man nicht so sehr überein- übereinhaufen.
Okay, wenn man jetzt ein Game neu anfängt, das übelst komplex ist,
sagen wir, irgendjemand möchte jetzt neu mit Path of Exile anfangen
und sich da voll einarbeiten.
Ja doch, das ist ähnlich schwierig.
Das gebe ich zu.
Da ist auch das Hirn im Anstrengungsmodus.
Aber wenn man jetzt beispielsweise mal irgendwie sagt,
ey, ich spiele jetzt irgendwie mal Half-Life wieder durch
oder irgendwie irgendeinen neuen Shooter oder irgendein Game, was jetzt nicht ist, wo ich sagen muss, ey, ich muss jetzt hunderte, also ich muss jetzt nicht
Factorio lernen oder sowas. Ist das eine andere Art von Hirnbeschäftigung, als wenn man was Kompliziertes
lernt und programmiert?
Ja gut, natürlich
Die Projekte, die man privat macht, sollte man for fun machen.
Weil ich glaube nicht, dass ich jemals auf der Arbeit mit C++ ein WebAssembly-Videoplayer
programmieren muss.
Aber, ey, allein schon, dass man ein bisschen drüber Bescheid weiß, was mit der Technologie
alles möglich ist, bringt einem das Wissen eventuell schon mal was auf der Arbeit.
All the experiences that come with loving programming.
Thank you for your time, I'm BigBox.
Alles klar, nice.
Als Noob scheitert man halt schon oft beim Aufsetzen der Technologien, aber das geht jedem so.
Es ist jeder Noob, wenn er mit was Neuem anfängt.
Es ist nicht so, dass nur weil du Noob bist, das nicht aufsetzt. Niemand kann das aufsetzen, wenn das was Neues ist für ihn.
Also du kannst 20 Jahre, sagen wir, Java-Erfahrung haben und einer sagt zu dir, mach mal ein Svelte Frontend-Projekt.
Keine Ahnung davon.
Das ist normal. Du bist immer Noob, wenn du anfängst.
Wichtig ist halt, wenn du was machst,
in einem Themenbereich, der dich interessiert,
dann findest du es sogar geil,
wenn du dir jetzt angucken kannst,
wie man das Neue benutzt.
Wenn du jetzt was machst, weil du es machen musst,
vielleicht, weil es dein Chef gesagt hat, oder du denkst,
ah, das muss ich mir jetzt angucken,
hab da aber eigentlich gar keinen Bock drauf, ja dann stört es das.
Aber ansonsten ist es ganz normal,
dass du keine Ahnung davon hast, wenn das Neue ist.
Geht mir ja auch so. Leute,
Wenn ich irgendwelche neuen Sachen, guck mal, ich mein, wenn man irgendwie ein Typescript-Projekt aufsetzt, hätte ich jetzt auch keinen Plan, wie ich das gescheit mache.
Müsste ich ja nachgucken. Mache ich aber nicht, weil mich persönlich Typescript jetzt nicht so sehr interessiert.
Und bei Javascript ist es halt richtig der Abfuck allgemein.
Javascript-Projekte bestehen ja immer, wenn du die anlegst oder gerade wenn du irgendwelche Templates benutzt, die ja angeblich dazu führen sollen, dass du schneller starten kannst.
Du hast dann ein leeres Projekt mit quasi Hello World drinne stehen, hast aber 15 Javascript-Dateien.
Du hast ne Linter-Config, du hast ne Typescript-Config, du hast irgendwelche Hooks für das Projekt, was du brauchst, du hast irgendwelche NPM-Dinger, du hast Package-Json-Log, du hast 15 Dateien, wo du denkst, warum sind die eigentlich jetzt da?
Das ist ein leeres Projekt mit Hello World, warum habe ich 15 Dateien da, dass das überhaupt funktioniert?
Es ist halt richtig Keck-Javascript.
Ja.
So ist das halt in der JavaScript-Welt.
Wir müssen wieder mal ein bisschen Frontend-Zeug basteln.
Irgendwann muss der Label-Champion auch fertig werden.
Oh, das ist eine gute Idee, der Metachamp wäre das dann.
Der Metachamp, der kann dann alles per Plugins integriert.
Okay, was schauen wir uns als nächstes an?
Lasst mal kurz gucken, was haben wir denn hier?
Wie man Passwörter knackt.
Okay, gucken wir mal.
Über das Thema habe ich mich ja auch schon öfters ausgelassen, was wichtig ist für
Passwörter.
Länge, dass Länge in der Regel wichtiger ist als die Komplexität von dem einzelnen
Zeichen oder der Zeichenvorrat, natürlich in den extremen, ja, mag das unterschiedlich
sein, also wenn ich jetzt sage, hey, du kannst jetzt bloß zwei Zeichen pro Stelle benutzen
und du machst dann halt nicht irgendwie gleich 32 Zeichen lang, dann ist, ja, aber in der
Die Regel ist Länge bei Passwörtern, das ist das Entscheidende.
Oder man benutzt einfach 123456, das ist eh das beste Passwort.
Okay, zeig mal her, wie man Passwörter knackt.
Heute im Video zeige ich dir, wie Hacker Passwörter knacken und wie du dich davor schützen kannst.
Ja, lange Passwörter benutzen.
Wir schauen uns dafür eine Web-App an, die jede Menge typische Anfängerfehler hat.
Oh ne, please!
Nicht wieder die Geschichte mit, wir gucken in die Browser Debug-Tools und lesen Zeug
aus.
Ich hoffe, es ist ein bisschen advanceder diesmal.
Die Webseite ist direkt unter diesem Video hier verlinkt, du kannst also alles, was ich
dir zeige, direkt nachmachen.
Vorher allerdings noch eine kleine Warnung.
Alles, was du in diesem Video lernst, solltest du nur für das Gute verwenden.
Wenn du das nicht versprechen kannst, dann schalte dieses Video jetzt ab und schau dir
stattdessen lieber ein anderes Video an.
Sehr guter Cheat-Bait. Das ist eine sehr gute Einleitung.
Es geht nicht so sehr darum, was er sagt.
Es geht eher darum, was...
Ich frage mich, ob er das absichtlich gemacht hat.
Wenn er das absichtlich gemacht hat, ist das eine sehr clevere Einleitung.
Es geht darum, zu zeigen, so nach dem Motto,
hier passieren quasi super Secret-Dinger, mit denen man böse Sachen ansteckt.
Niemand wird jetzt abschalten und jeder wird gucken wollen, was kommt denn da jetzt.
Das ist richtig, das ist ein sehr cleveres Intro gewesen.
Ich kann dir jetzt schon versprechen, nach diesem Video wirst du mehr über das Hacken
von Passwörtern verstehen als 95% der Menschen da draußen.
Ja gut, 95% der Menschen, die wissen noch nicht mal, wie sie ihren Toaster richtig einschalten.
Und dementsprechend kannst du dich natürlich dann auch optimal davor schützen.
Wenn du Softwareentwickler werden möchtest, dann gehört das Wissen aus diesem Video hier
zu deiner Grundausbildung, denn du musst ja deine Software auch vor so typischen Sicherheitslücken
schützen.
Genau deswegen bringe ich als Programmierlehrer das übrigens auch in unserer Weiterbildung
Es ist ganz einfach, man darf einfach nie Fehler programmieren, dann braucht man so ganzen Guides nicht.
Und das Beste ist, man braucht auch keine Tests mehr und man braucht keine Dokumentation mehr, weil es funktioniert halt einfach.
Also ich würde sagen, wir legen los und dafür müssen wir uns erstmal anschauen, wie so ein Authentifizierungsverfahren überhaupt aussieht.
Wenn wir uns in unsere App einloggen wollen, dann benötigen wir, so wie bei den meisten Apps, eine Kombination aus E-Mail und Passwort.
Und bei den meisten Applikationen ist es ganz aufregend.
Moin Patrick, 47 Monate, das ist ja extremst...
Nice, nice, nice, nice.
Oh.
Ja, übrigens, jetzt wo du gerade da bist.
Schön, dass du so lange am Start bist.
Auch, dass du Discord-Modgis machst und alles mögliche.
Beziehungsweise nicht Modgis, du machst ja nicht Discord-Modgis.
Du machst Discord-Channel-Lösch-Modgis.
Dass du mit dem Sibaro damals den Discord aufgesetzt hast und alles.
Also schön, dass du an Bord bist.
muss man auch mal sagen jetzt ich will jetzt nicht jeden monat rumschleimen oder so aber muss ja auch
mal gesagt sein irgendwo gespeichert in einer art tabellenform ganz vereinfacht gesagt und wenn wir
gerade und wenn wir gerade dabei sind weil ich den max gesehen hat weil ich gerade den max gesehen
hat ich kann nicht mehr reden weil ich gerade den max gesehen hat im chat auch sehr nice dass du
sowas wie das archiv erstellt hast also wir haben richtige feinfeld mottges alle mottges
Und wir wissen ja, dass jeder Prime-Sub und auch jeder Follower und jeder Zuschauer allgemein für höheren IQ des Durchschnitts-Chat-Users sorgt bei mir.
Aber das Archiv ist auch schon so eine richtige 5Head-Geschichte.
Wisst ihr eigentlich, dass das Archiv, ich glaube oft genug kann man das nämlich nicht zeigen,
Wisst ihr eigentlich, dass das Archiv ein automatisches Transkript erstellt, für jeden, für jeden Stream?
Wobei ich mir gar nicht sicher bin, wo man das sehen kann. Metadaten? Max, wo sieht man das?
Oder benutzt er das nur für die Suche?
Einfach unter, ah Untertitel, hier Transcript, Leute, guck mal, guck mal, seht ihr das, also
Also sprich, das Archiv extrahiert, was ich in den Videos, in den Worts sage, und noch
viel besser, guck mal, man kann sogar das dann durchsuchen.
Ne, ne, das sieht nur genauso aus.
Man kann das sogar, man kann das sogar durchsuchen.
Also guck, hier sage ich im Video, bei 18 Minuten 24 sage ich Fivehead.
Überprüfen wir mal, ob das stimmt.
Ist wie bei Chat-GPT.
FileFat.
Siehste?
FileFat.
Exakt an der Stelle sage ich FileFat.
Und das ist natürlich sehr nice, wenn man ein Archiv hat, was das gesamte Gesagte indiziert.
Weil ich sage viel, wenn der Tag lang ist und anhand der Videotitel finde ich es nicht
mehr unbedingt, ja?
Zum Beispiel, wenn ich wissen will, wo hab ich das letzte Mal was über den ESP32 erzählt?
Transcript.
Blubb.
Da finden wir alles, wo ich was mit dem ESP32 gesagt habe.
Anscheinend habe ich hier gesagt, der ESP32-Task-Scaler soll dazwischen hin und her schalten, auch
wenn einer in Endloschleife blablabla.
Ich weiß nicht, mit was der Max das gemacht hat.
Zumindest weiß ich, dass die initiale Version, glaube ich, irgendwie 14 Tage mit zwei GPUs in der Cloud gerechnet hat.
Also, sehr Six-Head-Time schon.
So, weiter geht's. Wie man Passwort eignet. Also, auf geht's.
auch irgendwo gespeichert in einer art tabellenform ganz vereinfacht gesagt
sehen diese tabellen dann so aus wir haben hier jede menge kombinationen aus
e-mail und mehr also wenn man es schlecht macht dann ja wenn man es
halbwegs gescheit macht wird das passwort natürlich selber seit ich
nicht im plaintext gespeichert ich denke mal das wird ja auch gleich
schon noch erzählen aber sowas sollte auf serverseite nie im leben gespeichert
sein nie sagt sehen diese tabellen dann so aus wir haben hier jede menge
Kombinationen aus E-Mail und Passwort. Natürlich stehen da noch jede Menge andere Daten, wie zum
Beispiel Vorname, Nachname, Adresse und was halt sonst noch so gespeichert werden muss.
Und hier gibt es jetzt schon das erste Problem. Unsere App besteht normalerweise immer aus einem
Frontend und einem Backend. Das Frontend ist der Teil, der auf deinem Gerät gespeichert ist,
während das Backend der Server im Hintergrund ist. Den Code in unserem Frontend, den können
meistens lesen. Das heißt, wenn ich die Applikation jetzt in meinem Webbrowser gespeichert habe,
dann kann ich diese einfach öffnen, kann hier einen Rechtsklick machen, kann auf Seitenquelltext
anzeigen gehen und sehe jetzt hier den Quelltext. Und hier sehe ich auch unser JavaScript und alles,
womit die App geschrieben ist. Das heißt, wenn unsere Tabelle aus Nutzernamen, E-Mail,
passwörtern und so weiter hier gespeichert ist dann naja gut also ich meine wer speichert alle
seine user im frontend also das wäre ich jetzt gar nicht auf die idee gekommen überhaupt dass
das eine möglichkeit ist aber ja mein theoretisch theoretisch gibt es bestimmt leute die in ihren
Javascript-Quelltext reinschreiben, if password gleich gleich 123456 und so. Ja, gibt es bestimmt.
Haben wir natürlich ein Problem, denn das kann einfach jeder einsehen. Was hingegen nicht jeder
einsehen kann, sind die Daten, die in unserem Backend liegen. Genau deswegen machen wir es auch
so, dass wir unsere Nutzerdaten auf unserem Server speichern und nicht in unserer Frontend-
Applikation. Wir haben also eigentlich zwei Programme. Ein Programm, was in unserem Web...
Und danach Möglichkeit, die Passwörter auch nicht im Klartext.
... Browser oder auf unserem Handy läuft und ein Programm, was hinten auf unserem Server läuft.
Mit unserem Server kommunizieren wir über eine so genannte Schnittstelle.
Das ist meistens...
Okay, ich glaube...
Okay, ich muss mal ein bisschen vorspulen.
... nicht anzugreifen.
Irgendwas kommt.
Wo geht denn jetzt das Gehecke los?
... einem Rechtsklick, dann gehen hier an der Seite so Entwicklertools auf.
Ich empfehle dafür immer den Chrome-Browse.
Dann siehst du ganz einfach mal, dass hier im Hintergrund etwas gesendet wird.
Das hier ist unsere Anfrage an den Server und hier sehen wir auch, wenn wir drauf drücken direkt, was wir gesendet haben, wenn wir auf Payload drücken.
Immerhin ist die Webseite schon mal über TLS.
Ja gut, das ist so. Wenn man so Sachen in Plaintext schickt, dann stehen die halt auch im Post-Request oder vermute mal, dass es ein Post ist.
Stehen die natürlich auch im Plaintext drinne, was schonmal blöd ist, aber nachdem das ganze über TLS geht, also über SSL geht, HTTPS geht, gar nicht so wild ist, wie es vielleicht jetzt aussieht.
Es ist zwar doof, aber zumindest kannst du es unterwegs nicht richtig abgreifen.
und das password hallo 123 und wenn wir auf preview drücken was für eine antwort wir von
ja okay die wird hier ja wir können die ganze machen wir jetzt nicht noch mal im darknet sehen
wir ein aber hier was was wenn ich jetzt max muster eingebe dann kommen wir immer noch nicht
rein aber hier hat sich die fehlermeldung auf einmal geändert hier steht der login
ist fehlgeschlagen das spricht wiederum dafür dass die logik sich von unserem server verändert
hat das okay das da muss ich im rechts geben das stimmt das ist immer ein bisschen fragwürdig ob
ob man anhand der Login-Meldung erkennen können sollte, ob es den Account schon gibt oder nicht.
Also ich würde sagen bevorzugt sollte man das so machen, dass es nicht ersichtlich ist.
Dass die Fehlermeldung zwischen Account existiert nicht und Account gibt es und Passwort ist falsch immer die gleiche ist.
Also man könnte durchaus einfach zurückliefern Username, Passwort falsch.
Und das immer, egal ob es das Passwort gibt, ob es den User gibt oder ob es das nicht gibt.
Das machen ja auch viele Seiten, die eine Passwort-Recovery-Funktion haben.
Dann gibst du ein deine E-Mail-Adresse und dann sagen die, sollte diese E-Mail-Adresse
existieren, haben wir ihnen jetzt hier irgendwie einen Recovery-Link geschickt.
Also sprich, die sagen noch nicht mal, auch bei der Recovery, ob es die E-Mail gibt oder
nicht.
Es gibt Seiten, die machen es nicht so, die sagen, die haben die E-Mail nicht gefunden,
aber die beste Variante ist tatsächlich immer das gleiche zurückgeben, also egal, ob du
jetzt den User kennst oder nicht. Ja, da muss ich ihm recht geben. Wobei, er hat es ja noch
gar nicht gesagt, aber ich denke mal, er wird es gleich sagen.
Das heißt, hier muss irgendetwas jetzt anders sein. Ich gehe davon aus, dass die E-Mail-Adresse
existiert in der Datenbank und dass nur noch das Passwort falsch ist. Das heißt, jetzt
müssen wir nur noch verschiedene Passwörter ausführen. Hier kann man wiederum ein kleines
Programm schreiben, was einfach mal die häufigsten Passwörter ausprobiert. Das Ganze kann man
mit Googlen sehr schnell herausfinden. Da gibt es riesige deutsche Passwortlisten und
Wenn man die alle austestet, dann bin ich sicher, dass man hier reinkommt.
Deswegen machen wir das Ganze jetzt nicht noch mal.
Ich habe dir das Video aber hier verlinkt.
Wenn du jetzt einfach mal googlest, dann findest du hier jede Menge Listen mit verschiedenen Passwort-
Ja, es gibt auch 30 Milliarden Passwort-Tools, die das für einen dann machen.
Das ist kein Ding.
... die du einfach downloaden kannst.
Hier ist zum Beispiel so ein kurzer Ausschnitt und die kannst du dann einfach-
Deswegen ist es teilweise auch gar keine blöde Idee,
solche Logins mit Captchas abzusichern,
dass man das nicht so einfach automatisch hier durchprobieren kann.
hier mit einem kleinen Skript durchrattern lassen.
Ich habe das Passwort jetzt schon gefunden, ich hake hier oben mal Preserve.
Also du musst halt einfach gucken, wie viele Anfragen kamen jetzt
von diesem und diesem Absender und dann sagst du hier, du darfst nicht, es sei denn, du löst das Capture.
Das sperrt dann, das sorgt auch gleich dafür, dass wenn die Leute das über Curl abschicken wollen,
das dann nicht richtig funktioniert.
Ja.
Es ist sicherlich auch nicht verkehrt, irgendwelche Cookies zu setzen, wo mit
Kommandoseilentools nicht richtig klarkommen, wo du dann einen richtigen Browser verwenden musst.
Also es ist alles sinnvoll.
was es für den Angreifer möglichst teuer macht, das durchzuprobieren.
Drücke jetzt auf Login.
Jetzt sehen wir hier, dass jede Menge neue Sachen passieren.
Und unter anderem sehen wir auch hier mein Passwort.
Ja, damit kannst du dich auch einloggen, nämlich max-at-muster.de
und mein Passwort ist test123.
Was wir jetzt allerdings sehen, ist noch viel, viel interessanter,
denn uns geht...
Ne, habe ich nicht.
Gustl, habe ich nicht.
Ich kenne das Ding, habe ich es noch nicht angeguckt.
es nicht darum, einfach in irgendeinen Account reinzukommen. Wir könnten uns ja auch einfach
auf den meisten Seiten einen erstellen, sondern wir wollen natürlich Sachen machen, die man
sonst nicht machen kann. Und wenn wir hier jetzt mal gucken, dann sehen wir, dass noch
viele weitere Dateien von unserem Server geladen wurden. Beispielsweise eine HTML-Datei, dann
noch ein Bild. Ja, das ist wahrscheinlich das Bild, wenn ich hier drauf drücke, von
diesem User, der hier rechts oben angezeigt wird. Ein JavaScript, ein bisschen CSS und
Hintergrundbild. Okay. Und da unten, wenn wir hier nach ganz unten gehen, das ist das Interessante.
Hier sehen wir jetzt, dass unser Nutzer von unserem Server geladen wurde. Hier steht jetzt
Login-Challenge developer-akademie.net slash users slash 1. Das ist sehr interessant und
ich könnte das Ganze auch jetzt oben in meinem Webbrowser eingeben und dann bekomme ich...
Okay, wenn das jetzt funktioniert mit User 2, dann haben die auf Serverseite schon mal
nicht richtig aufgepasst alle daten hier in solch einer struktur die hier angezeigt werden das ist
aber gar nicht so abwegig da gab es tatsächlich in der vergangenheit schon viele probleme ich
erinnere mich zum beispiel daran dass sogar glaube die telekom war das mal probleme hatte in dieser
art und weise dass du in wenn du in deinem profil eingeloggt was bei der telekom sachen von anderen
leuten sehen konntest und teilweise sogar freischalten konntest von anderen leuten ist
schon ein paar Jahre her, aber ich bilde mir an, es war sogar in den Telekom, auf der Telekom-Seite in den Profilen.
Also, haben schon auch größere Seiten was verkackt in der Richtung.
Auf unserer Seite. Das heißt, wir fragen von unserem Server die Daten von User-Informationen geliefert auf, mit der wir mit jeweiligen
mitrufen. Dass diese häufigen URLs, die ein Server sehr wahrscheinlich hat, einfach mal alle ausprobiert werden. Und man guckt
einfach mal, ob sie existieren und ob man da etwas findet.
Ja, okay, das ist auch relativ normal. Sobald du irgendeinen Port aufhast im Internet, hast du schon die ersten Russen, China, Chinesen, Indischen und sonst was Bots drauf.
Und sei es nur SSH, die sich versuchen einzuloggen.
Also das ist ja ganz normal.
Und wenn du gar so mutig sein solltest, den WordPress zu verwenden, dann wirst du in deinem Log sehen, dass permanent Bots alte Sicherheitslücken durchprobieren.
Patrick, erinnert mich ein bisschen daran, ist natürlich das, was ich erzähle, hat nicht
die gleiche Tragweite, aber wobei, nee, nicht wirklich.
Ich habe mir mal eine Kamera gekauft und das war also eine Kamera von einem deutschen Hersteller,
WLAN-Kamera. Und da ist mir aufgefallen, dass man das Root-Passwort rausbekommen kann mit
einem einfachen Curl-Aufruf. Wie ich drauf gekommen bin, ist Folgendes. Normalerweise
musst du dich im Web-Interface einloggen bei der Kamera und Admin-Passwort eingeben, dass
du was einstellen kannst. Dann bin ich aber mal mit einem Viewer an die Kamera, also mit
zu einem Video, Video on fifth viewer, das ist so ein spezielles Kameraprotokoll und ich musste nur die IP eintragen von der Kamera
und der hat auf einmal ein Video
Doch doch doch kann sein dass ich das sogar im Stream gezeigt habe
warte mal
Ich bin mir aber nicht mal sicher, wie das abkämmt, genau, hier, von denen, das ist eine
deutsche Firma von denen hatte ich mir eine Kamera geholt, weil die günstig war. So wie so eine drehbare Outdoor-Kamera. Ist schon ein paar Jahre her.
Müssen wir mal gucken. Vielleicht, wir können mal klar das Archiv dazu bringen. Vielleicht habe ich das tatsächlich schon mal gesagt.
Upsampling.
Keine Ahnung ob ich das, ob das, zumindest von denen hatte ich mir eine Kamera gekauft und zumindest, ich hab die dann in so einen OnFive Viewer gepackt und auf einmal ging der Stream von der Kamera an, der normalerweise nur mit Username und Passwort abrufbar sein soll.
Dachte ich, hä? Wie? Warum kann das Ding vor der Kamera streamen, ohne dass ich ein Passwort eingeben musste? Das ergibt doch keinen Sinn.
Und dann hab ich mich mit nem TCP-Dump, äh Quatsch, mit nem Wireshark da mal dran gehängt und geguckt, was passiert.
Und dann ist mir aufgefallen, aha.
Ne, ich glaube mit Wireshark ging das nicht, weil es über harte TPS ging.
Ich glaube, ich musste den on Fifth Viewer, das war ne .net Anwendung, die musste ich glaube ich selbst kompilieren und paar Printlines reinschreiben.
Zumindest, lange Rede, kurzer Sinn, die Kamera hat, damit das automatische Viewen von dem Stream geht, über, das hat quasi nicht nur den Stream zurück gemeldet, sondern den Stream inklusive Benutzernamen und Passwort.
Also, du hast die Kamera gefragt, Kamera, sag mir mal alle Streams, die es bei dir gibt, und da hat die Kamera nicht nur geantwortet, ich habe Stream 1 und Stream 2, nein, die Kamera hat geantwortet mit, ich habe Stream 1 unter dieser URL und Stream 2 unter dieser URL, und in dieser URL stand BasicAuth, Username, Passwort.
Und gleichermaßen nicht einfach nur ein Viewer-Passwort, sondern das Root-Passwort für die Kamera.
Weil das alles durfte.
Das heißt, du konntest mit einem einfachen Curl-Aufruf das Root-Passwort auslesen aus der Kamera.
So und das habe ich denen dann geschickt.
Ich habe auf GitHub einen Gist hochgeladen mit so einem Proof-of-Concept,
Konzept dass es halt easy ist curl an die kamera schicken dass das root passwort habe ich an den hersteller geschickt und der hersteller hat
geantwortet wie
Probieren sie doch bitte mal ein firmware upgrade und
Die haben sich gecheckt ja genau sowas in der richtung genau exakt exakt sowas in der richtung
Ja kam da kam da zurück genau so sah das ungefähr aus
Und die haben sie erst mal nicht kapiert die haben gesagt machen sie mal bitte den firmware upgrade und
Ich hab die aktuellste Firma und ich glaube, ihr habt nicht verstanden, was ich euch gerade gesagt habe.
Du machst einen Curl unauthentifiziert und kriegst das Root-Passwort von der Kamera.
Und dann kam das Ganze wohl irgendwie auch raus,
ähm, bei irgendeinem, der ein bisschen Ahnung davon hatte.
Und dann kam die Antwort. Die Antwort war auch geil.
Oh, jetzt können Sie das Ganze nachvollziehen,
ob ich nicht bitte, das war das Erste, was Sie geschrieben haben,
ob ich nicht bitte den Gist entfernen kann von GitHub.
Das war das größte Problem, was sie hatten, dass ich den Gist gepostet habe auf Github.
Ich hab den nicht entfernt, der ist heute noch da, aber der ist anlistet, also den findet
man gar nicht public über das Internet, der ist heute noch da und man sieht da auch alles
mögliche noch drin, weil ich dachte mir so ein bisschen Druck dahinter muss sein und
die haben mir dann hoch und heilig versprochen beim nächsten Firmware Update wird das behoben
Und ich habe die Kamera nie benutzt, ja, die lag bei mir jetzt jahrelang rum und die liegt hier auch immer noch irgendwo rum
und irgendwann, ich hatte es schon wieder vergessen, ich hatte es, ich hatte es schon wieder komplett verdrängt, irgendwie, keine Ahnung, so ein
Dreivierteljahr oder ein Jahr später oder so, nee, nee, nee, nee, es ist angeblich gefixt, irgendwie ein Dreivierteljahr oder ein Jahr später
habe ich eine E-Mail noch bekommen, ja mit dem neuen Firmware-Update wäre das jetzt behoben. Ich habe weder Firmware-Update gemacht bis jetzt
Noch hab ich das ausprobiert, ob man das nicht anderweitig irgendwie umgehen kann.
Aber das war schon echt wieder sehr, sehr fragwürdig.
Also ja, das ist das, was ich meine.
Die sind auch sauer geworden, dass ich ein Gist gepostet hab quasi.
Nicht so sehr, dass ihr Systemkacke ist, sondern dass ich das quasi erwähnt habe.
Inwieweit wurden sie denn bei dir wütend am Telefon so nach dem Motto,
wir verklagen sie, wenn sie das öffentlich machen oder wie?
Okay, gucken wir mal weiter.
Also so richtig, richtig krasses Gehecke war bis jetzt ja noch nicht dabei.
Sie haben da natürlich verschiedene Tools, aber selbst wenn du einfach mal auf einer
Seite hier slash Admin oder irgendwas eingibst, wirst du erstaunt sein, wie häufig du hier
etwas findest.
Und ich möchte nochmal darauf hinweisen, dass du das Ganze nur bei deinen eigenen
Systemen durchführen solltest.
Die meinten, dass wenn ich... Ja, war klar, dass die mit so einem Scheiß um die Ecke kommen.
Das ist doch nicht illegal, Alter. Du kannst doch so viele... Ach Gott, ey.
Die Schwätzer, man, anstatt sich mal mit ihrem eigenen System zu beschäftigen
und zu sagen, ey, Jungs, ihr aus unserer Entwicklungsabteilung,
uns hat einer gemeldet, du kannst von anderen Leuten da so Zeug manipulieren,
das führt im Endeffekt nur dazu, dass die Sicherheitslücken einfach jahrelang da bleiben
Irgendwann werden die möglichst heimlich missbraucht und wenn es dann rauskommt, ist die Kacke wieder am dampfen und nach dem Motto
Oh ne, da konnten wir ja gar nichts von wissen und wir werden es jetzt schnellstmöglich beheben und es ist auch gar nichts passiert und bla bla bla
Oder wenn du da die ganz ausdrückliche Erlaubnis für hast
Ja, Easylight, da kann ich mich dran erinnern, da war was, ja, ja, ja.
Okay, und jetzt gibt der User Slash 2 ein.
Das sollte natürlich nicht gehen, aber das ist, würde ich sagen, tatsächlich noch halbwegs realistisch.
Es gab in der Vergangenheit genug Seiten, die hatten das Problem, dass die eben vergessen haben,
haben, in ihren API-Routes zu checken, ist authenticated oder irgendwie sowas.
Es gibt ja mittlerweile bei den meisten Webframeworks sinnvolle Möglichkeiten, User zu kontrollieren
und sowas.
Das musst du ja gar nicht mehr von Hand machen, weil die Zeiten sind vorbei, wo du in PHP
selbst checken musstest, ist in diesem Parameter das drin und der User und hier heute, also
So bei in.net, in ASP.NET Core ist das zum Beispiel relativ easy, du schreibst einfach über deinen APN-Punkt ein Attribut oben drüber, da gibt es dann sowas wie isAuthorized, isSameUser, isLockedIn und solche Geschichten, da markierst du einfach die Methoden mit den nötigen Rechten, die der User braucht und dann handelt das Framework für dich das unter der Haube und wahrscheinlich handelt das Framework das besser für dich, als wenn du das selbst machen würdest.
Aber das stimmt schon, es gab genug Seiten, die ähnliche Probleme hatten und wie gesagt, ich bilde mir ein, dass sogar die Telekom-Seite
vor ein paar Jahren so Probleme hatte.
Hat der Heise was zugeschrieben?
Ja, sowas hier zum Beispiel.
Ja, sowas hier zum Beispiel. Datenlänge in der Telekom Cloud ermöglicht Zugriff auch auf fremde Adressbücher.
Genau solche, solche Geschichten.
Ja, lol man, danke für den Zap.
Also da sieht man das, was er da zeigt.
An der Stelle ist gar nicht mal so weit hergeholt.
geholt. Es sollte nicht passieren, wenn es ordentlich gemacht ist. Passiert aber
wahrscheinlich heute immer noch.
Finden wir was? Das ist jetzt wirklich, wenn das ganze drinsteht, komisch ist. Hier sieht das ganze jetzt allerdings so aus. Und das ist ein
zusätzlicher Sicherheitsmechanismus, den die meisten Backend-Systeme standardmäßig haben. Wenn es nämlich wirklich jemand schafft, in die Datenbank reinzugucken, dann...
Niemand sollte die Passwörter im Klartext speichern in der Datenbank. Da sind wir uns, glaube ich,
drüber einig. Auf der anderen Seite gibt es sicherlich noch genug Backends, die genau das machen.
Wahrscheinlich unter anderem deshalb, dass man sagen kann, ha ha guck mal hier Passwort Recovery und man kriegt sein Passwort wieder zugeschickt. Leute,
wenn eine Seite Passwort Recovery anbietet und das nicht das Setzen eines neuen Passwortes ist, sondern das Restoren des alten Passwortes,
dann
ist die Seite
Scheiße so und sollte es gar seiten sein die sagen
wir haben
Die daten wir bewahren daten verschlüsselt auf und die haben sowas wie eine password recovery
Dann könnt ihr davon ausgehen dass die auch für ein arsch ist
Weil bist du auf instagram ne jesper dankeschön für den sub weil bei verschlüsselung muss es bei design
So sein wenn du das password vergisst dann sind die daten weg
Das ist kein Feature in dem Sinn mit Passwort Recovery.
Es darf keine Passwort Recovery geben.
Also Passwort weg, Daten weg, alles andere ist nicht gescheit verschlüsselt.
Die Möglichkeit ein weiteres Passwort hinzuzufügen, das ist was anderes, wenn du noch authentifiziert
ist, weil meistens werden die Daten, zumindest wenn man jetzt mal von Diskverschlüsselung
spricht, ja, meistens werden die Daten ja nicht verschlüsselt mit dem Passwort.
Okay, das muss ich euch jetzt mal kurz erklären.
Also, stellt euch mal vor, ihr habt eine Festplatte, ihr benutzt was, um eure Festplatte zu verschlüsseln,
ja.
So, dann funktioniert das in der Regel meistens folgendermaßen.
Ihr habt irgendwie den Plaintext, ihr habt eine Textdatei hier, plupp, plupp, txt und
Da steht 1, 2, 3, 4, 5, 6 drin.
So, und dieser Block auf der Festplatte soll jetzt quasi verschlüsselt werden.
Dann ist halt die Frage, also keine Ahnung, das wird dann mit IS 256 verschlüsselt.
Dann ist halt die Frage, mit welchem, nennen wir es mal Passwort, verschlüsseln wir das Ganze.
Und man denkt vielleicht, es wäre das Passwort, was man zum Entschlüsseln eingibt.
Ja, weil keine Ahnung, ABC123, Katze123 ist mein Passwort.
Also man denkt jetzt vielleicht, mit diesem Passwort wird diese Datei verschlüsselt. Das ist aber nicht so.
Das erste ist, ich glaube damit IIS Performant funktioniert, es ist am besten, wenn die, wie nennt man das, die Secrets, mit denen das verschlüsselt wird,
ich ein größeres von mehrfaches von zwei sind
also irgendwie an beid grenzen allein sind oder sowas glaube ich ist dass dass das ordentlich performant funktioniert und
damit das sicher ist sollte das natürlich auch möglichst lang sein das heißt die datei wird nicht mit eurem passwort verschlüsselt sondern die datei wird mit
einem random generierten schlüssel verschlüssel also zum beispiel mit sowas hier also die datei wird damit verschlüsselt und
das hier wird damit euren passwort verschlüsselt also es ist so
So, es wird ein random secret generiert, mit dem wir die Datei verschlüsselt und dieses
secret wird irgendwo abgelegt und das secret wird nicht im Klartext abgelegt, sondern wird
verschlüsselt mit eurem Passwort abgelegt.
So, das ist so die ganz grobe Geschichte, das heißt, wenn ihr euren Rechner startet
und ihr müsst ein Passwort eingeben, dann ist das nicht das Passwort, was dazu dient,
eure Dateien zu entschlüsseln, sondern es ist das Passwort, was dazu dient, quasi das
Eigentliche secret zu entschlüsseln mit dem dann eure password und mit dem dann eure dateien ver- und entschlüsselt werden
So warum habe ich das jetzt noch mal erzählt genau so und jetzt ist es ja folgendermaßen
Wenn man jetzt dieses password hier verliert
ist ja
Das hier nicht mehr entschlüsselbar und deswegen kann man da auch nicht darauf zugreifen. So es gibt jetzt möglichkeiten zum beispiel
Ich bin mir nicht sicher, ob TrueCrypt das sogar kann.
Oder wäre Crypt das sogar kann.
Aber es gibt Möglichkeiten, dass man mehrere Keys ablegt.
Oder eben mehrere, gut merkbare super Passwörter, 1, 2, 3, so hinterlegen kann,
dass man diese Masterkeys irgendwie mit mehreren Passwörtern entschlüsseln kann.
Fragt mich nicht genau, wie das funktioniert.
Da bin ich kryptotechnisch zu nubig für.
Also das hier ist ja das eigentliche, was benutzt wird für die Dateien zu den Endschlüsseln.
Aber das heißt, wenn man schon authentifiziert ist und ein weiteres Passwort hinzufügt,
das ist okay.
Was nicht sein darf ist, ich habe mein Passwort verloren und ich kann es irgendwie wieder
recovern.
Also sobald ich die Möglichkeit habe an diesen Key dran zu kommen, ohne dass ich das Passwort
habe, mit dem ich verschlüsselt habe, ist es voll für den Arsch und jeder Verschlüsselungsservice
Und jeder Dienst, der das ermöglicht, ist unsicher bei Design.
Das darf nicht sein.
Also wenn ihr feststellt, dass irgendein Anbieter gar euer Passwort recoveren kann, indem ihr
sagt, ich habe mein Passwort vergessen und ihr bekommt das Passwort, was ihr gesetzt
habt, wieder zugeschickt, das ist höchst fragwürdig, weil das heißt, die haben euren
Kram in irgendeiner Art und Weise im Plaintext gespeichert und das sollte eigentlich nicht
der Fall sein.
Wird da nicht eine Hash-Funktion verwendet?
dürfte doch performanter als IS sein. Nee, um die Dateien zu fair und entschlüsseln wird das nicht benutzt, weil
Hash ist eine One-Way-Funktion, also du kannst eine Datei nicht per Hash verschlüsseln.
Okay, verschlüsseln schon, du kannst die Hash, aber du kriegst die halt nicht mehr rückgängig gemacht.
Deswegen brauchst du sowas wie IS, weil das synchron ist. Also nee, stimmt nicht. Plötzlich, das Synchron hat mit Hash nix zu tun,
Da geht es um AES vs. sowas wie ESA, also synchron, nicht synchron, symmetrisch vs. asymmetrisch.
Also sprich, müssen beide Seiten das gleiche Passwort kennen oder nicht.
Bei Hash-Funktion kannst du das vergessen.
Also bei Hash-Funktion kriegst du nichts mehr entschlüsselt.
Hash-Funktion ist wie der Fleischwolf.
Du schmeißt was rein, es kommt im Endeffekt irgendwas raus, was auf dem basiert, was du reingeschmissen hast,
aber du kriegst das nie wieder raus, wenn es eine gescheite Hash-Funktion ist, was du reingeschmissen hast.
Bei AES ist das so umgedreht, bei AES verschlüsselst du was mit einem Passwort,
es sieht aus wie durch den Fleischwolf, aber du kannst es mit dem gleichen Passwort auch wieder entschlüsseln.
Man kann die Passwörter noch gehash speichern und dann abgleichen,
oder geht es gar nicht darum, wie die Passwörter...
Achso, ja, bei Web-Services ist es schon so, da hast du recht,
recht, aber es ging gerade ums Verschlüsseln von Dateien auf der Festplatte.
Ja, das kannst du machen, wenn du die Dateien abspeichern willst, die werden in der Regel
auch als Hash gespeichert, das heißt, wenn du eine ordentliche Authentifizierung machst
bei einem Webservice, dann wird das Passwort auf Client-Seite gehashed und der Hash übertragen
und es wird im Endeffekt geguckt, ob der Hash übereinstimmt.
Ja, ähm, das kannst du machen.
halt auch der Hash nicht gespeichert werden, also der Hash nicht ohne Sort gespeichert
werden sollte. Ja, genau. Ja, sonst hast du das Problem, dass du im Zweifelsfall vorgenerierte
Tabellen benutzen kannst, um das wieder zu entschlüsseln, ist das falsche Wort, dass
du von dem Hash-Wert schließen kannst auf einen möglichen Plaintext. Ja, das stimmt.
Oh, guck mal, das war das Video an.
Ups, ich will nicht Mario Playlist angucken. Falsch.
Die Person natürlich nicht gleich noch alle Passwörter haben und genau aus diesem Grund
speichern wir Passwörter normalerweise als Programmierer niemals so in einem Klartext
unserer Datenbank ab, sondern das Ganze wird gehashed. Das heißt, das Ganze sieht in der
Realität eher so aus. Und dieser Hash wird einfach erstellt mit einer Mathematik. Und
meistens sollte noch ein Sort drinne stehen. Der Sinn ist, das habt ihr vielleicht schon gesehen,
das habt ihr vielleicht schon gesehen, wie sieht denn das bei Linux aus? Linux,
shadow
also guck mal
ja genau
hash hier sieht man das
ich glaube ich
ist da überhaupt
ein hash drinnen
hash dollar
hash
wo ist ein hash an welcher stelle
passwort hier das ist der hash
fnfffc das ist der hash
Also, unter Linux sieht das folgendermaßen aus, wie Username und Passwort gespeichert werden.
Interessant ist das hier.
Das hier ist der Salt und das hier ist das gehashte Passwort.
Also ein Salt ist quasi, im Prinzip das, was ich vorhin erklärt habe.
Also, du nimmst irgendwas, schmeißt es in Fleischwolf und das, was am Ende rauskommt, ist der Hash.
Und vom Hash kannst du eigentlich keine Rückschlüsse mehr drauf ziehen auf das, was du ursprünglich in den Fleischwolf geworfen hast.
Nur mit dem Unterschied, es wird jetzt nicht einfach nur dein Plaintext in den Fleischwolf geworfen, sondern es wird zusätzlich noch Salz dabei gestreut und dann durch den Fleischwolf gedreht.
Warum macht man das so?
Hat irgendjemand eine Erklärung dafür, warum man das so macht?
Weil man könnte sich jetzt, achja, by the way, kurzer kurz für alle die es nicht wissen, der Hash ist im Plaintext, also der Hash ist genau der gleiche, also der Hash ist nicht hier irgendwie verschlüsselt drin, also der Hash, den ich zum Hashen des Passworts benutzt habe, ist der gleiche Hash, wie der, der hier im Plaintext drin steht, Schutz gegen vorgenerierte Datei, richtig, ja, genau, weil, wenn man zum Beispiel sowas wie MD5 benutzt,
oder ist im Prinzip auch egal. Wenn man, wenn man sowas, es ist egal welches Hash-Verfahren
man benutzt. Bei allen Hash-Verfahren ist gleich, dass der gleiche Input immer zum gleichen
Hash führt. So, was man jetzt machen kann ist, man kann ganz viele Sachen im Vorfeld
berechnen. Dann gibt es dann Tabellen, da steht drinne, okay, für diesen Hash ein möglicher
Plaintext, der zu diesem Hash führt, ist das. Ja, also zum Beispiel
Echo
1, 2, 3, 4, 5, 6, gepiped nach MD5
Ergibt das. Und ihr seht, das gibt immer
das gibt immer das hier.
So, jetzt könnte ich natürlich hergehen und sagen, ich berechne mir ganz viele Sachen im Voraus.
Ja, also machen wir mal, machen wir mal zum Beispiel for i in, das ist jetzt nur ein Beispiel,
das ist nicht praktikabel, so wie ich das hier zeige, ja.
So.
So, jetzt berechnen wir uns quasi mal im Voraus den Hash für, ja, 0 bis 100.
So, und jetzt habe ich ganz viele Hashes schon vorgeneriert.
Das ist natürlich viel zu wenig und praktisch bringt es das Ganze überhaupt nicht, aber
man sieht, man kann mit dem nötigen Aufwand und dem nötigen Speicherplatz, das braucht
natürlich abfuck viel Speicherplatz, kann man eine sehr große Anzahl an
möglichen Inputs für Hashes finden.
Und es gibt Tabellen für MD5, die sind riesig groß. Ihr könnt euch
überlegen, es gibt petabyte große Tabellen, wo Leute quasi das gemacht
haben, was ich hier jetzt gemacht habe, nämlich Input generiert und geguckt, was
für ein Hash rauskommt. Und wenn man dann so einen Hash hier sieht, kann man in so
eine tabelle reingucken und überlegen okay ich habe in dieser tabelle diesen
hash gefunden das bedeutet dieser input führt zu diesem hash und das heißt ich
kann diesen input auch als passwort verwenden es ist egal ob das das
ursprüngliche passwort war wichtig ist dass der gleiche hash rauskommt also zum
beispiel hat der hash bei 123456 md5 sum wenn ich danach suche wette ich mit
euch werde ich finden ja guck md5 reverse 4 bla bla bla into string 1 2 3 4 5 6 also es gibt im
internet schon jede menge vorberechnete tabellen die genau sowas sowas enthalten im endeffekt und
um der sache vorzubeugen und nur um dieser sache vorzubeugen ist es egal ob man md5 verwendet
oder nicht also das problem hast du bei schad 256 bei einfachen kleinen sachen ja auch so um diesem
Um diesem Problem vorzubeugen, wirft man nicht einfach nur das, was man hashen will, in die
hash-Funktion, sondern man gibt noch einen sort davor an, also z.B. sowas hier, das ist
mein sort a.
Und ihr seht, okay, jetzt kommt was anderes raus, das heißt, ich könnte dafür suchen,
das gibt es wahrscheinlich auch im Internet, a123456, aber an der Stelle sieht man jetzt,
es ist nicht mehr das Ursprüngliche und ich würde jetzt nicht weiterkommen mit, hätte
ich eine wahnsinnig lang generierte Tabelle für Passwörter. In dem Fall ist das ein
bescheuertes Beispiel. Der Salt ist natürlich ein bisschen länger und ein bisschen mehr
random. So und jetzt komme ich schon mal nicht weiter. Jetzt bin ich mir gar nicht sicher,
ob man das schon in Google findet. Ne, das findet man zum Beispiel nicht mehr. So, also
jetzt seht ihr, das hier ist mein Salt und das hier ist mein Passwort. Das heißt, das
Passwort ist eigentlich easy as fuck, aber ich komme mit vorberechneten Tabellen nicht
mehr weiter, weil ich einen Salt verwende. Der Salt macht das Passwort nicht sicherer,
Das Sort sorgt dafür, dass ich mit vorberechneten Tabellen nichts mehr anfangen kann.
Ich kann nach wie vor das Passwort durchprobieren, weil den Sort habe ich ja im Klartext.
Also ich kann ohne Probleme jetzt anfangen mit, ja funktioniert das denn, funktioniert
das denn, funktioniert das denn und so, das kann ich ausprobieren, das ist kein Ding,
aber ich muss es selbst probieren und das ist der eigentliche Punkt, was bei Sorts angeht.
Ich kann keine vorberechneten Tabellen mehr benutzen oder vorgenerierte Tabellen mehr
benutzen.
diese die leistung quasi des durchprobierens selber erbringen und das
ist natürlich je nach passwort komplexität unrealistisch aufwändig
oder ja und unrentabel für die meisten angriffe
und deswegen ist das sinnig den soll zu benutzen
das heißt man speichert sogar nicht nur den sold sondern man speichert auch noch
den man speichert nicht nur den herrscher man speichert auch den sold man muss den
sollten nicht zwangsläufig hier speichern, muss den Salt natürlich speichern, passend zu dem
Passwort, weil der Salt sollte natürlich im besten Fall auch für jeden Passwort unterschiedlich sein.
Max sollte ein Tutorial Channel machen. Ich fand auch für aus dem Ärmel geschüttelt,
war die Erklärung gar nicht so schlecht, oder? Ja, so viel zu dieser ganzen Geschichte,
aber ich glaube, man hat es ganz gut verstanden.
...matischen Funktionen. Ja, genau sowas kennst du wahrscheinlich noch aus dem Schulunterricht.
Wir können das x hier durch eine Zahl ersetzen. Das heißt, wenn du eine 2 reinpackst, dann kommt
da 4 raus. Wenn du eine 4 reinpackst, kommt in diesem Fall 16 raus und so weiter. Genau solch
eine Funktion wird auch für das Hashen von unserem Passwort genutzt. Das heißt, wir geben in unsere
Funktion das Wort test123 rein und rauskommt solch eine Buchstabensuppe. Hier gibt es jetzt ganz
viele verschiedene Funktionen, zum Beispiel char256 oder md5. Und da gibt es jetzt eine
Sache, die ist wirklich interessant, und zwar sind das Funktionen, die nicht
zurückgerechnet werden können. Das heißt, wir haben mathematisch gesehen, keine
Möglichkeit aus diesem Hash wieder das Passwort zu konstruieren.
Ja, das ist richtig. Das sollte ich vielleicht noch ergänzen zu meiner
Erklärung hier, weil das hat nämlich der Chat auch indirekt gerade angesprochen.
Man sollte es vielleicht an dieser Stelle noch mal sagen.
Wie fange ich, wie fange ich jetzt da am besten an?
Also solche vorberechneten Tabellen, ich habe es ja schon versucht, möglichst korrekt auszudrücken.
Solche vorberechneten Tabellen, also wird auch unter anderem Rainbow Tables genannt, deswegen ist das eben im Chat ein paar mal gefallen.
Solche vorberechneten Tabellen enthalten ja immer nur den Hash zu einem möglichen Plaintext Input.
Was man hier sieht ist, der Hash, der rauskommt, ist immer gleich lang.
Ich mache das jetzt mit MD5, auch wenn man MD5 tatsächlich nicht mehr benutzen sollte,
aber das andere ist einfach ein bisschen länger.
Was euch vielleicht hier auffällt, der Hash ist immer gleich lang.
Egal wie lang mein Input ist, kommt immer ein Hash raus mit dieser Länge.
Das heißt, theoretisch gibt es unendlich viele Inputs, die zum gleichen Output führen.
Ist logisch, oder?
Ich meine, ihr könnt hier unendlich viele Kombinationen reinstecken, aber ihr habt nur
eine endliche Anzahl an Möglichkeiten, die dargestellt werden können in dem Output.
Das heißt, es muss, rein theoretisch zumindest, es muss unendlich viele Kollisionen geben.
Theoretisch.
Man muss praktisch eine finden, das ist nicht so einfach.
Bei MD5 ist es mittlerweile relativ einfach, aber von der Idee her ist es logisch.
Ihr könnt beliebig einen Input reinstecken, der gemappt werden muss auf einen beschränkten
Output.
dementsprechend findest du unendlich viele Inputs zum gleichen Output. Also
für diesen Output hier, für diesen Hash, gibt es unendlich Möglichkeiten, den zu
erzeugen. Ich meine, wichtig ist natürlich, dass
der gleiche Text immer den gleichen Output erzeugt, aber es würde, es gibt
potenziell unendlich viele Inputs, die den gleichen Output erzeugen. Die zu
finden ist allerdings nicht so einfach. Man müsste mal gucken, ob es eine
Tabelle gibt mit known md5 collisions. Kennt jemand irgendwie einer, die nicht ewig lange
ist, die übersichtlich ist? Weil ich mein, es bringt mir nix, wenn ich jetzt hier irgendwie
Drei Zeilen Bildschirm brauche um um den Gleichen Den Gleichen hess zu Erfolgen gibt es da
Was Kurzes was man Mal Als Beispiel Zeigen Kann
Hier okay das hier und das hier erzeugt Die Gleiche Md 5 somme
Also sieht Es Braucht schon Ein, Bisschen Längeren input so dass das in Kollisionen und Kollisionen MöcHte man Eigentlich nicht Haben
Weil Kollision bedeutet ja auch, du kannst theoretisch, wenn du das Passwort nicht weißt, aber den Hash, dann kannst du irgendwas eingeben, was den gleichen Hash erzeugt, ohne dass du das Ursprungspasswort kennen musst.
Also stellt euch mal vor, das hier hat jemand als Passwort verwendet und ich kenne den Hash, der da rauskommt.
Ich kenne aber das Passwort nicht.
Aber ich finde was, was den gleichen Hash ergibt, da kann ich auch das hier als Passwort
verwenden.
Das ist egal, weil es wird ja nicht das Passwort überprüft, sondern das Passwort wird gehasht
und es wird der Hash überprüft.
Das heißt Kollisionen will man nicht haben.
Wenn man es schafft Kollisionen zu finden, ist immer ziemlich mies.
Das ist auch einer der Gründe, warum man weggekommen ist davon MD5 zu benutzen, sondern
eher SHA-256. Das ist länger, man hat mehr Möglichkeiten. Ich glaube nicht, dass es
eine bekannte gibt. Is there a collision? Okay, es gibt glaube ich keine bekannte Kollision
für Schad 256 aktuell.
Ja, gibt es anscheinend nicht.
Ja, gibt es noch nicht.
Die Sache ist halt die,
die Kollisionen sind,
und das ist jetzt halt sowas, wo wahrscheinlich Mathematiker
richtig drauf abgehen,
bei solchen Fällen, und zwar,
die Sache ist halt die, es ist sehr, sehr unwahrscheinlich
Kollisionen zu finden. Ich meine, man hat hier
256 Byte
Ähm, da kann man sich ausrechnen, das ist mehr Kombinationsmöglichkeiten, wie
wahrscheinlich
äh Teilchen
im Universum existieren
an Möglichkeiten, was hier rauskommen kann.
Das ist eine unglaublich hohe Anzahl, aber
nichtsdestotrotz
also, ich hab keine Ahnung, ob das stimmt, was ich sage, aber
selbst wenn man sich, also ich hab das nie ausgerechnet,
also selbst wenn man davon ausgeht,
dass die Chance hier eine Kollision zu finden, quasi sich im Bereich bewegt, wie
alle Teilchen des Universums zusammen sind nicht wahrscheinlich genug, dass man eine findet.
Trotzdem, trotzdem gibt es unendlich viele Kollisionen.
Das muss man sich erstmal überlegen, ja?
Es ist so unwahrscheinlich, dass man überhaupt eine Kollision findet.
Aber trotzdem gibt es theoretisch unendlich viele Kollisionen.
Warum? Naja, es ist das gleiche wie bei MD5.
Du hast unendlich viele Inputs, die du liefern kannst, die gemappt werden müssen auf einen beschränkten Zeichenvorrat.
Also auf eine beschränkte Länge.
Also der Output hat ja nur eine begrenzte Möglichkeit, was dargestellt werden kann.
Der Input kann alles sein.
So, das heißt, du hast unendlich viel Input versus einen beschränkten Output.
Das heißt, es muss unendlich viel Kollisionen geben, aber eine Kollision zu finden ist extrem
unwahrscheinlich.
Und wir reden hier von Teilchen im Universum unwahrscheinlich, ja, also sehr, sehr unwahrscheinlich,
Aber trotzdem, es gibt theoretisch unendlich viele Kollisionen.
Ja, natürlich ist es nicht so einfach, wie ich das jetzt hier gesagt habe.
Es kommt natürlich auch immer auf das Verfahren an, wie das Ganze generiert wird.
Also du kannst auch schlechte, weil es gerade im Chat einer gesagt hat, du kannst auch schlechte
Hash-Verfahren haben, die lange Outputs generieren und trotzdem zu Kollisionen neigen, weil
es muss ja irgendwie der Input transferiert werden zu diesem Output und das ist ja nach
einem speziellen Algorithmus, das heißt da ist irgendein System dahinter.
Das ist nicht random, weil wenn es random wäre, könntest du nicht aus dem gleichen
Input, wenn du es zweimal auswürfst, den gleichen Output erzeugen.
Das heißt es sollte möglichst random sein
Aber es kann halt nie perfekt perfekt verteilt sein alles dass du hast früher oder später mal irgendwie kollisionen da drinne
Und die wahrscheinlicher sind als die möglich als als die anzahl der möglichkeiten das ist ja nicht perfekt verteilt aber trotzdem
Potenziell hast du unendlich viele kollisionen auch wenn es sehr sehr unwahrscheinlich ist eine zu finden
Der Chat ist gerade Ritterrost, Dankeschön für den Sub.
Ich glaube bei Hashes ist das tatsächlich gar nicht so das Ding, aber da darfst du mich
nicht fragen.
So sehr bin ich da auch nicht drin.
Ich hatte in der Berufsschule eine Lehrerin, sie hatte Physik studiert und wollte uns klar
mal es könnte niemals im leben bei egal welchem hashverfahren zweimal das gleiche rauskommen
das ist blödsinn dann hat die ziemlich das ist eher so trust me bro ich habe physik
studiert das ist natürlich schwachsinn es ist sogar umgedreht ist sogar das umgedrehte
der fall es ist es ist einfach logisch jetzt nicht dass ich es mathematisch beweisen könnte
aber es ist auch so schon irgendwie logisch dass bei jedem hash verfahren es unendlich
viele Inputs gibt, die das gleiche Ergebnis geben können. Einfach weil du unendlich viel
Input hast versus endlicher Output. Das muss unendlich viele Kollisionen geben.
Ja, also das ist natürlich blödsinnig. Aber rufst du Lehrer, da wundert mich im Endeffekt
Nix mehr.
Ja.
Nun gut.
Ich seh hier sind die richtig
high IQ Diskussionen am Start im Chat
schon.
Gibt's nur hier auf Twitch.
So, jetzt hab ich grad 50
Zuschauer auf einmal vertrieben.
Sind grad 50 Leute einfach instant abgehauen.
Als ich von dem Thema angefangen hab.
Das war zuviel des Guten, aber es muss ja auch mal ein bisschen ausführlich sein.
Du hast den Alias zweimal in deiner ZSH, was hab ich?
Wie jetzt?
Wo?
Was?
Ach den hier, EI, ja gut, mal, wurscht, naja, ist halt so.
verschreckt die leute aber ich glaube es war trotzdem mal war trotzdem mal ganz interessant und was man auch daran sieht schon ist
dass für passwörter die länge nicht ganz unerheblich ist dass die länge war passwörter eigentlich so nahezu das wichtigste ist
nicht so sehr wie komplex die einzelnen zeichen oder wie wie viele zeichen du pro stelle hast sondern wie lang die passwörter sind
also ein passwort
also sagen wir mal sowas sagen wir mal sagen wir mal du hast die auswahl zwischen
nur nur
Keine Ahnung nur Kleinbuchstaben versus Klein- und Großbuchstaben
Und also angenommen du hast du hast so ein Passwort hier a b c d e f g das natürlich äußerst sicher wie wir alle wissen
Versus a b c
Groß- und Kleinschreibung so die zwei sachen hast du zur auswahl ein passwort was nur groß und klar was nur Kleinschreibung kann
aber solange es
Ist viel viel sicherer als ein passwort was sagen wir mal nur so ist
Also die stellen machen sehr viel aus
Also die länge macht enorm viel aus
Weil wenn man das hinschreibt es ist ja quasi 26 hoch anzahl der
der stellen und es ist einfach ein unterschied ob man 26
Keine Ahnung, 26 hoch 20 hat, oder ob man 52 hoch 12 hat, zum Beispiel.
Gucken wir mal. Gucken wir mal, ob das in der Region...
So, das ist die, das ist das, und das hier ist 28, und das ist halt nur 20.
Da sieht man, okay, es ist schon ein Riesenunterschied.
Also auch Passwörter, nur mit Kleinschreibung,
Aber 8 Stellen länger sind um ein viel, viel, vielfaches sicherer als große und kleine Schreibungen mit nur zwölf Stellen.
Deswegen ist die Länge bei Passwörtern sehr wichtig.
Wenn es mathematische Umkehrfunktionen gibt, gibt es dennoch eine Möglichkeit bei so simplen Hashes wie SHA-256 oder MD5 das Passwort häufig wieder herauszufinden.
Naja, also, simpel, wenn das Passwort kacke ist, rettet dich keine großartige Hash-Funktion.
Ich kann die abgedrehteste Hash-Funktion der Welt, ich kann sagen, nehm mal SHA-512, ja.
Wenn mein Passwort scheiße ist, hab ich das relativ easy durchprobiert.
Da ändert die Hash-Funktion ja nix dran.
Und zwar gibt es sogenannte Rainbow-Tables. Das heißt, das sind riesige Tabellen.
Gut, da hatten wir ja gerade schon von.
Da stehen alle möglichen Hashes drin und auch alle möglichen Passwörter zu diesen Hashes.
Das heißt, man kann einfach in dieser Tabelle nachgucken und dann viele Passwörter...
Ich finde, das habe ich tatsächlich korrekter ausgedrückt.
Es sind mögliche Inputs passend zu den Hashes.
Es ist nicht zwangsläufig, dass Passwort was verwendet wurde.
Das darf man auch nicht vergessen an der Stelle.
Die Chance, dass es das Passwort ist, ist relativ hoch.
Aber das muss nicht so sein.
Also, das heißt nicht, dass zwangsläufig den Hash,
wenn ihr das in der Rainbow-Table findet, dass es zwangsläufig das Passwort ist, was ihr auch beim
E-Mail-Account für den für dem gleichen Typ verwenden könnt. Die Wahrscheinlichkeit ist
relativ hoch, dass das eins zu eins passt, aber wie gesagt, es gibt unendlich viele Inputs,
die möglich wären. Was wird da wieder herausfinden? Genau aus diesem Grund sollte man niemals diese
Standard-Hash-Funktion verwenden. Häufig wird deswegen noch ein sogenannter Salt verwendet,
Warum sollte man nicht die Standard-Hash-Funktion verwenden?
Wenn die Standard-Hash-Funktion SHA-256 ist, ist das doch vollkommen in Ordnung.
Besser als selbst irgendwelches Krypto-Gedöns sich basteln.
Häufig wird deswegen noch ein sogenannter Salt verwendet.
Ach so!
Ah, jetzt habe ich es verstanden.
Er meint, man sollte nicht nur, man sollte auch noch, ok, da hat er natürlich recht.
Wodurch das Ganze verändert wird und nicht mehr zurückzuführen ist.
Diesen Hash hier, den können wir jetzt einfach mal in so Standard MD5 oder SHA2 Rainbow Tables reinwerfen und gucken, ob wir etwas finden.
Das heißt, wir geben ein MD5 Decrypt. Schauen da rein.
Ich drücke einfach mal rein und finde leider nix.
Dann schauen wir mal SHA256 Decrypt, gehen hier auch wieder mal auf den ersten.
Ja, Decrypt ist halt bei der Domain ein bisschen Fail, da wird ja nicht wirklich was decrypted.
Aber gut, ich gette, dass die Leute finden das dann einfacher über Google.
zweiten. Der macht sogar beides und wir sehen hier, aha, gefunden. Das Passwort ist test123.
Das kannten wir aber schon für Max Mustermann. Jetzt können wir uns aber auch so die anderen
Nutzer hier decrypten. Das heißt, wir können hier oben einfach mal zwei eingeben, können diesen
Hash nutzen, können den hier eingeben, können wieder auf decrypt drücken. Genau, das ist im
Prinzip das, was ich eben auch gezeigt habe mit einem Sol drin. Dann bringt dir eben das Vorberechnete
Und wir sehen, dass wir auf Logout drücken, E-Mail-Adresse ein, nämlich Petra Musdacke, dann bin ich jetzt drin.
Hier steht Clara, sobald es eine Ringebe gestellt, aber auf der Seite diesen. Das Passwort ist Freddy9Frin.
Aber ich dachte, er zeigt es mit Salz noch.
Okay, also im Prinzip, ja, das, was ich auch gerade erzählt habe.
Alles klar. Gut, war jetzt nicht so wirklich viel Spannendes dabei.
Aber ich meine, es muss ja auch YouTube-kompatibel sein.
Allein schon, dass mir 50 Leute Instant abgehauen hier sind, sehe ich, dass es nicht YouTube-kompatibel ist, mein Geschwätze dazu.
Ich weiß, das hast du schon öfters erzählt.
Ich habe, ehrlich gesagt, von dem noch gar nicht so viel geguckt.
Die, die ich geguckt habe, waren eigentlich alle ganz okay.
Wenn auch für Leute, die ein bisschen Ahnung haben, vielleicht ein bisschen naheliegend alles, okay.
Aber ich meine es muss YouTube kompatibel sein
Ja kann man so machen also ich muss sagen ich verwende seit jahren keypars
Ja
Aber ich hab
Mein password account vault natürlich nicht account mein password vault auch nicht überall rumliegen zugänglich
Ja, genau. Siehste? Seh ich auch so.
Ich wollte oben noch irgendwas beantworten gerade aus dem Chat, aber das hab ich geskippt.
Ähm...
Da steht eine Verbindung zum Beispiel mit User und Passwort. Hab vorhin ja auch gesagt...
Ne, erstmal nicht, erstmal nicht. Also das was wir da gehasht haben, also hat mit dem Username erstmal nichts zu tun.
Das ist nur wichtig, damit du dann in deinem Backend eben den User findest, wo du das Passwort nachgucken sollst.
Also du musst einen Username haben, dass du dann in deiner Datenbank nachgucken kannst, welcher Passworthash das denn jetzt ist.
Also direkt miteinander hat das nichts zu tun, aber im Endeffekt brauchst du doch beides.
Okay, das ist vielleicht nicht ganz so clever.
Aber ich würde immer noch sagen, besser als gar kein Salt, aber sonderlich Pfeifett ist
es tatsächlich nicht.
Zumal der Salt im Klartext gespeichert wird, das heißt man sieht auch was der Salt ist und kann sich das relativ schnell ableiten.
Aber es bringt dir ja auch nicht so viel. Wichtig ist, dass du es im Vorfeld nicht berechnen kannst.
Also das ist gar nicht mal so, würde ich jetzt zumindest sagen, gar nicht so die schlechteste Idee den Usernamen als Salt zu verwenden.
Wenn man sonst keine Ahnung hat, was man machen soll...
Ja, genau, weil du musst es immer noch selbst berechnen.
Also, es ist vielleicht nicht die allerschlauste Variante, aber auf jeden Fall besser als gar kein Soll.
Keine Ahnung. Ich hab FileZilla noch nie verwendet.
Das ist ein FDP, oder?
gibt es auch jemand der ftp verwendet ftp kleine wie sonst zum beispiel
verschlüsseln und beim starten an master passwort
Es gibt so, es gibt so Verfahren, dass, ähm, da bin ich, da weiß vielleicht der, der General
Sol was dazu, der hat sich ja eben so ein bisschen geoutet als Krypto Pfeiffett, oder
was der Guss...
Ich bin mir nicht sicher.
Es gibt Verfahren, da speicherst du nicht nur den Salt und den Hash, sondern du musst
auch noch wissen, wie viele Iterationen der Hash-Funktion du brauchst.
Da bin ich mir aber nicht ganz sicher, wie das läuft.
Da brauchst du nicht nur das Passwort und den Salt, du musst auch noch wissen, wie oft
du das hashen musst.
Also du kannst ja quasi es hashen, also du kannst es hashen und dann kannst du den Hash
nehmen als Input und wieder haschen und den Hasch wieder haschen wieder wieder wieder wieder wieder und dann musst du quasi noch zusätzlich wissen
Okay, ich brauche jetzt das Ergebnis von der
50. Iteration
Das ist das eigentliche was ich brauche das macht man hauptsächlich
Dafür nicht um die die die die die Passwörter und Sachen noch sicherer zu machen sondern um den Rechenaufwand zu erhöhen
Dass ihr den Angreifer das beim Durchprobieren noch schwieriger hat
Spolgi! Dankeschön für den Sub!
Ogu!
Ja, da bin ich aber jetzt nicht so weit genug drinne.
Also, du kannst, ich weiß z.B. auf Veracrypt kannst du sagen, dass der mehrere Iterationen machen soll und sowas.
Kim, ja, kann sein.
Da kenn ich mich aber nicht gut genug aus.
Wieso macht YouTube nichts gegen Adblocker? Haben sie doch vor.
Aber es gab doch letztens diesen Versuch den Content wie Twitch auch von den gleichen Servern auszuliefern
Äh, den, den, die Werbung und Content von gleichen Servern auszuliefern, dass du nix dagegen machen kannst
Was ich sehr pp-ger finde
Mich aber nicht stört, weil ich EU2 Premium hab, lul
Aber mich insofern doch stört, weil ich's kacke finde
An's trinken erinnern, ja, sehr gute Idee
Ah, yes
Excellent
T-Stells.
Heute bin ich schon 3 Stunden.
Ohne was ist denn heute los?
Ich bin ja richtig gut drauf.
Gestern fast 6 Stunden, heute schon 3 Stunden.
Ohne was ist denn da los?
Was hat man sonst noch zu bieten?
How NASA writes space-proof codes.
Ist das ein...
Okay, ich bin mir nicht sicher.
Ist das ein Meme-Video oder ist das wirklich
was ernstes?
Wir gucken mal kurz den Anfang an.
Das erkennt man ja gleich, ob das irgendein Meme-Video ist
jetzt ernst gemeint ist.
Meme-Video?
Meme-Video?
Einfach Rust verwenden, blazingly fast.
Deine Kode, Verzerrung und Produktion.
Aber was...
Meme-Video?
Dein Produktionsumfeld ist im Raum.
Ein nullpunkter...
Meme-Video?
...Referenz oder benutzt nach...
...sendet dein Satellit
in die Ether, mit
keinem Weg, es zu kontrollieren.
Um dies zu vermeiden, hat NASA eine Reihe von
Regeln, um ihre Kode
leicht zu...
Ich tippe aktuell noch ein bisschen auf Meme-Video bei dem ganzen Zeug.
Okay, doch kein Meme-Video?
Okay, das ist doch kein Meme-Video.
Habe ich mich vertan.
Ja gut.
Also, wer noch ganz bei Sinnen ist,
der sollte sich den NASA-Regeln da anschließen.
GoTo...
Gut, es gibt... Leute, ich muss mich outen.
Ich habe auch schon GoTo verwendet.
Wisst ihr, für was ich GoTo verwendet habe?
auch GoTo immer noch verwenden würde.
Ja, zum Beispiel sowas kann ich mir durchaus vorstellen, GoTo.
Ja, richtig, genau das, Abbruch.
Wenn man nestet, nestet, schleifen, nestet, schleifen, aber im besten Fall hast du das
Problem nicht und so, ja, nestet, schleifen, wenn du, keine Ahnung, du hast drei nestet,
Und in der innersten Schleife möchtest du quasi aufhören. Dann ist es tatsächlich ganz sinnvoll zu benutzen.
Da brauchst du nicht noch außenrum if, bla, break, sowieso.
Man kann das natürlich meistens dadurch abfackeln, indem man das ganze in eine Funktion auslagert und einfach einen return macht an der Stelle.
Aber wenn das nicht geht, ist ein go to manchmal gar nicht so verkehrt.
Aber NASA sagt, oder NASA, wie das die Amis immer sagen,
Die NASA sagt, das ist nix. Kann ich aber auch irgendwo verstehen.
Recursion verwenden sie auch nicht. Kann ich auch irgendwie nachvollziehen.
Weil ganz ehrlich, sobald du irgendwie, ich ruf mich selber auf hast, ist oftmals ziemlich schwierig durchzuplicken,
was denn eigentlich genau noch passiert und ob die Stopp-Bedingung irgendwie erfüllt ist und sowas.
das klingt mir nach inline assembly ehrlich gesagt
oder long jump
sie benutzen auch nicht recursion
recursion oder eine funktion, die sich in sich einstellt,
schafft es sehr schwer, zyklische code-kontroll-flow-grafiken zu folgen
recursive code kann zu runaway code führen, das ein fixiertes
limit-all-loops-
upper-bounds kann verursachen
jetzt, das klingt vielleicht offensichtlich, aber es gibt in dieser regel eigentlich ein bisschen mehr Nuanz
Zum Beispiel, wenn man eine Längelliste überquert, kann der Endfall der Längelliste nur sein, dass man einen Vorwärtspunkt trifft, dessen Wert 0 ist.
Ja.
Aber um einen Endfall zu vermeiden, der den Run-Away-Code führt, wird NASA immer ein Top-Limit der...
Da würde ich mir Gedanken machen, dass das nicht mehr Fehler verursacht, als es bringt.
Auf der anderen Seite, wenn die NASA das macht, da muss schon was dran sein.
sein gut die nasa weiß wahrscheinlich oftmals relativ gut in welchem bereich ihre input
so liegen und können können denke ich realistische realistische obergrenzen setzen weil normalerweise
weißt du das ja nicht ja also wenn wenn du jetzt sagen wir mal irgendwie nen string in den text
hast in der user eingibt da weißt du ja nicht wie lang der ist auf der anderen seite realistische
Bounds könnte man oftmals trotzdem setzen. Wenn du sagst, ey mehr als 5000 Zeichen gibt
bestimmt niemand ein und sowas. Auf Embedded System macht man es auch so, wenn man es richtig
macht. Klingt auch sinnvoll in dem Kontext, ja? Weil du weißt ja ungefähr, was da kommt.
Du kannst dir schon so überlegen, okay, da kommen jetzt Inputs von, ja irgendwas von
2 byte bis 256 byte und mehr wird es wahrscheinlich nicht sein.
Okay, macht im NASA-Kontext sicherlich Sinn.
Drittens, don't use the heap.
Okay, wir machen nur, wir machen keine, ähm, wie heißt denn c, keine memory allocations
oder wie?
Einfach nur inline-Variablen verwenden.
Geht das überhaupt?
Kann, man damit überhaupt programmieren
Komplett ohne du willst ja doch durchaus auch mal sachen haben die deinen funktionsaufruf überleben
Was ist wenn du eine liste hast wenn du wenn du eine liste hast wo du sachen anhängen willst die liste ist außerhalb
Ja doch theoretisch schon da musst du die Liste als Parameter übergeben dann wird da
drinnen dann angehängt oder du du übergibst es als...
Du darfst nichts allokieren, machst Dogo, das ist ja das Ding, du darfst nur Variablen
anlegen im Endeffekt.
So, in der Innerfunktion, das ist so, dass es automatisch wieder aufgeräumt wird.
Das höchste der Gefühle, was du machen darfst ist, äh, int Array mit Fixed Size, sowas
in der Richtung.
Ich kann mir nicht vorstellen, dass man damit komplett auskommt, aber gut ey, ich meine, wenn es die NASA macht, die haben da vielleicht auch ein bisschen andere Anwendungszwecke.
Okay, next.
Limit Function Size. Okay, das ist sinnvoll.
dass man damit komplett auskommt aber gut ich meine wenn es die nasa macht die haben da vielleicht auch
ein bisschen andere anwendungszwecke ok next limit function size ok das ist sinnvoll ich meine man
braucht keine 3000 zeilen lange funktion falls sie das meinen mit size in dem fall überhaupt
Wenn du über die Bedeutung denkst, sollte eine Funktion nur eine Sache tun.
Die Funktion braucht zwar mehrere Schritte, aber die Funktion sollte nur eine einzige Aktion machen.
Meine persönliche Meinung dazu ist, mal angenommen, man hat hier sowas wie, nehmen
wir mal parse oder nehmen wir, ja, nehmen wir sagen wir mal parseClient, nehmen wir
mal die Funktion als Beispiel, gehen wir mal davon aus, die Funktion selbst ist 40 Zeilen
lang.
Oder, ja, 40 Zeilen und du benutzt sie wirklich nur hier an dieser Stelle in handleClient,
dann kann man sich sicherlich drüber streiten, macht es wirklich Sinn parseClient auszuladen,
lagern, an eine andere Stelle, wenn es doch nur hier an der Stelle benutzt wird.
Also je nachdem, wie umfangreich das ist und wo das verwendet wird, würde ich sagen, nicht
unbedingt pauschal, man kann das auch inline hier reinschreiben.
Wenn das Ganze natürlich so lang wird, dass das hier 40 Zeilen ist, das hier 40 Zeilen
ist, das hier 40 Zeilen ist, okay, dann kann man sich das überlegen, splittet man es auf,
aber oftmals ist es ja noch nicht mal 40 Zeilen lang.
Angenommen passclient ist 5 Zeilen lang, dann bin ich der Meinung, man kann durchaus inline
schreiben, hier diese 5 Zeilen für passclient und muss das nicht auslagern in eine extra
Funktion.
Zumal Aufrufe auch nicht kostenlos sind.
Ja, da kommen jetzt irgendwelche C-Compiler-Tricks mit Inline und so wieder dazu.
Ich fände es aber auch für die Lesbarkeit sinniger, die fünf Zeilen hier dazu zu schreiben,
anstatt es an eine andere Stelle, wo man dann hinspringen muss, und dann wieder zurück
auszulagern.
Ich denke, das muss jeder so ein bisschen Handhaben nach seinem persönlichen Bauchgefühl,
abwands zu viel wird.
To ensure this and to ensure that the code is readable, NASA recommends that functions
should be no longer than 60 lines, or about the size of a piece of paper.
Keys of paper, drucken die bei der NASA noch aus?
Quickly and easily read a function and understand what that function does.
It also ensures that your function is small enough and concise enough to be testable as
a single unit.
Okay, macht Sinn.
If your function is 400 lines and has several layers of nesting.
Macht Sinn.
dass dein Code schlecht strukturiert und nicht gut nachgedacht ist.
NASA unterstützt die Idee, Daten zu verstecken
oder Variablen zu deklarieren, sobald sie im niedrigsten Umfang möglich sind.
Weil ansonsten kannst du ja gar nichts großartig leaken, weil man dafür nichts allokieren, also, hä?
Again, all these rules are centered in writing safe code and code that is statically testable.
By declaring variables at the lowest scope required, you not only reduce the...
Okay, chat, file, fet, message.
Stack-only heißt ja nicht, dass du nicht statisch initialisierst Memory-Blocker hast.
Also das ist doch so kein... ja, das wollte ich damit eigentlich umschreiben.
Wenn du zum Beispiel einen USB-Treiber schreibst, ist dein Input-Message-Buffer
nicht eine Liste von Message, sondern eine Array mit Fixergröße und Errorhandling.
Du hast trotzdem große Buffer, die du mit Pointer übergeben kannst.
Okay, macht schon Sinn. Also im Endeffekt,
das musst du dann halt in dem eigentlichen Programmfluss drin haben.
Du hast dann irgendwie dein Main, was auch immer.
Bevor du dann quasi die HandleInput-Funktion aufrufst,
Initialisierst du vorher ein 2056 Byte großes Array, übergibst das dann quasi als Referenz an die nächste Funktion und so.
Du darfst halt nie aus dem Scope rauskommen.
Genau. Du darfst halt nie aus dem Scope rauskommen.
Also Scope, ich darf ja auch mal Scope nennen kann.
Du darfst halt nie aus diesem Fluss rauskommen, dass es aufgeräumt wird.
Ja okay, macht...
Macht ja durchaus Sinn.
Wobei ich mir das echt schwer vorstelle, also ich überlege mal zum Beispiel, zum Beispiel
als wir ESP32-Dinger programmiert haben, dann gab es dann irgendwelche Callbacks, wenn ein
Knopf gedrückt wurde, so.
Und sagen wir mal, wenn der Knopf gedrückt wurde, will ich, keine Ahnung, in irgendeinem
größeren Buffer ein Byte setzen.
Da das ja ein Callback ist, ist Input in diesem Callback ja nicht das Array.
Das müsste dann global irgendwo definiert sein für das gesamte Programm.
Weil ansonsten würde es ja nicht...
Genau, genau.
Ja, genau.
Das müsste man machen.
Aber warum ist es besser, das global zu... naja gut, das ist ja auch nicht so mein Gebiet
jetzt.
Okay, also das machen wir nicht hier, das weiß ich gar nicht, ob man das versteht oder
nicht.
aber du reduzierst auch die Anzahl der Orte, die falsch gehen können, wenn du debuggierst, warum eine Variante einen falschen Wert hat.
Das nächste scheint offensichtlich zu sein, aber ist tatsächlich eine ziemliche Problematik.
Ich bin ein Problem, wenn ich den Code juniorer Entwickler lese.
Okay, man könnte sagen, ist doch eigentlich ganz logisch, aber ich finde die Syntax richtig
eklig von Go dafür.
Ich finde es sehr eklig.
If value, okay.
Also was das hier macht ist ja folgendes.
Das ist einfach nur eine Kurzschreibweise für eklige Sachen in Go.
So.
If value.
So.
Eigentlich ist das if an der Stelle egal, das hier ist das Interessante, das hier ist
eine Zuweisung und zwar das hier ist ein GoError-Objekt und das hier ist das Value, wenn es keinen
Error gibt.
Das heißt im Endeffekt guckst du, weißt du das hier zu und danach schließt du die, schließt
du diese Instruktion, wie nennt man das, den Befehl quasi schließt du ab und das If checkt
im Endeffekt ob der hier gesetzte Error-Code denn ein Error ist oder nicht.
Also du könntest quasi hier auch schreiben if okay ungleich Error und sowas.
Um es noch länger zu schreiben und dann kannst du hier drin auf den Value zugreifen.
Ich finde das, ich finde das eklig wie das in Go gehandelt ist.
Aber gut Go Programmierer bestimmt nicht, aber Go Programmierer stehen auch auf sowas.
Erinnert mich noch daran, wo wir mal hier letztens ein bisschen was in Go gebastelt haben und
das erste was ich immer gemacht habe, return ignore, return ignore, du kannst dir einfach
ein Underscore davor schreiben, dann interessiert das Go nicht mehr.
Moment, printf hat ernsthaft nen return value?
Okay, und was, und was returnt das?
Unsuccesses, ah, total number of characters written is returned.
Okay, das ist gar nicht mal so blöd.
Ich stelle immer wieder fest, die Leute haben sich da in C was bei, also nicht in C++ wohlgemerkt,
in C haben die sich da doch tatsächlich was bei gedacht. Das kommt bestimmt noch aus Zeiten,
wo du auf irgendwelche seriellen Interfaces rausgeschrieben hast und da hat es dich sicherlich
manchmal durchaus interessiert, ob du alles schreiben konntest oder nicht.
Und außerdem ist es einheitlich zu den ganzen anderen Print-Funktionen.
Macht ja durchaus Sinn.
Und wenn es das tut, interessieren wir uns wirklich nicht.
Um sicherzustellen, dass die Person, die den Code auditiert,
versteht, dass der Entwickler den Gewinnwert ignorieren soll,
sagt ThePowerOfTen, dass wir alle Gewinnwerte, die ignoriert sind,
zu einem Void-Typ stellen sollten.
Wenn ein Non-Void-Funktionen-Gewinnwert nicht Void ist,
bedeutet das, dass der Entwickler vergessen hat, den Gewinnwert zu kontrollieren
und sollte in einer Code-Revue aufgenommen werden.
NASA begrenzt den Nutzen des C-Pre-Prozessors, um Inklusionen und sehr einfache Makros zu filen.
Der Grund dafür ist, dass die Macht von 10 den C-Pre-Prozessor als einen versteckten Kodeinfizierer nennen kann, der Kode-Klarität zerstört.
Gleichermaßen allerdings eines der besten Features, die C++ hat.
Das ist so ein ganz großer Müll eigentlich.
Irgendwie lädt es dazu ein, die Sachen ultra kryptisch und nicht mehr verständlich zu machen.
Auf der anderen Seite kannst du damit Sachen machen in C++, die du in keiner anderen Sprache machen kannst.
Also mir fällt zum Beispiel keine andere Sprache ein, wo du zur Compile-Zeit checken
kannst, dass der Input von der Funktion, keine Ahnung, also im Angenommen du hast eine Funktion,
die einen String-Input braucht von, sag mal, du hast eine Funktion, wo du sicherstellen
möchtest, dass der String-Input nicht größer als 15 Zeichen lang ist, nicht länger als
15 Zeichen ist. C++ ist die einzige Sprache, die mir einfällt, wo man das dank Templates
und und Compile-Time-Checks und sowas zur Compile-Zeit testen kann, ob irgendjemand
die Funktion aufruft mit mehr als 15 Zeichen. Und das geht nur auch aus einer Kombination
aus Compile-Zeit, Expression, Checks und Templates.
Jede andere Sprache, die ich kenne, kann das nur zur Runtime.
Dass du dann gucken musst, ja, if String größer als so.
Ich mein gut, man kann sich eigene Typen irgendwie dafür anlegen, die halt maximal 15 Byte
Speicher haben oder so.
Das geht, aber ist halt doof, wenn man nicht Standardcharakter verwenden kann und dann dafür extra Typen bauen muss.
Also da fällt mir nur C++ ein, wo du so abgedrehtes Zeug machen kannst. Auf der anderen Seite weiß ich nicht, ob es das wert ist.
Weil allein schon, dass C++ diese Sachen hat, es ist so unglaublich unlesbar.
Und also den meisten Sourcecodes, auch in Programmiersprachen, wo ich mich nicht gut auskenne, sei es jetzt Swift oder sowas,
Das kannst du eigentlich immer ganz gut lesen, nicht so C++. C++ kannst du oftmals einfach nicht richtig lesen, weil das aus Templates, C, Preprocessors und so besteht.
Du siehst das und denkst dir, das kann doch eigentlich gar keine gültige Syntax sein und kommst dann dahinter, es ist auch nur gültig, weil es Preprocessor und Templates und Makros und alles sind.
Du kannst C++ dir oftmals einfach keine Reim drauf machen, was denn wirklich passiert und du findest es auch nur ganz schlecht raus, weil du über 20 Files rüberspringen musst und dir dann irgendwie im Kopf zusammenbauen musst, wie könnte sich dieser Aufruf jetzt verhalten?
Ich weiß nicht, ob es das wert ist. Ja, also es ist auf der einen Seite sowohl eines der besten Features von C++, aber gleichzeitig auch eines der beschissensten.
Ich finde C++ würde sehr davon profitieren, sowas wie C Sharp zu bekommen, was Extensions
Methods angeht.
Extensions Methods wären eine super Erweiterung für C++, das ist aber schon seit Jahren diskutiert
und sie kriegen es in ihrem C++ Gremium einfach nicht gebacken.
Das würde C++ so viel cleaner machen, aber sie machen tausend Sachen und auch nicht einheitlich.
Es soll jetzt nicht zum C++-Flame-Stream werden, weil ihr wisst, das kann ich stundenlang machen.
Naja, weiter, weiter. Also die C-Preprozessor darf nicht benutzt werden.
Ja, Chat, und die Fehlermeldungen von Templates sind auch unleserlich, as fuck.
Und das kann man in C++ noch ekliger machen, weil du hast in C++ ja Compile-Time-Expressions,
Expressions das heißt es nennt sich auf konst ex oder so was heißt das glaube ich in c++
Das ist quasi ein bisschen wie so c c preprozessor
Compile time flex nur noch abartiger da kannst du die also da hört es komplett auf was du machen kannst
mit c++ compile time expressions
Da wird extrem weird champig
Du kannst das ja auch in ifs benutzen also kannst if const x blablabla und dann
ne äh
What the?
Hä?
Wo sind wir denn hier gelandet?
Das ist ein ganz anderes Video.
Ah hier wollten wir hin.
Also die NASA sollte sich bei uns mal eindeutig
äh
äh
äh
äh
äh
äh
äh
äh
äh
äh
äh
äh
äh
äh
äh
uns mal eindeutig Consulting Support holen.
Keine Fehler, keine Tests.
Und gerade der NASA sollte das wichtig sein.
Exponentially increasing the testing requirement of your code.
This makes the code hard to scale and hard to test.
Another interesting rule by NASA.
Es gibt inzwischen auch Constint und ConstEval.
WTF blub, du hast recht, deswegen was ich mit dem if meinte ist sogar ConstEval und
nicht ConstExpr.
Dass es const init gibt, kenne ich nicht. Das scheint mir neu zu sein, aber das ist ja normal in C++.
Restrict pointer usage. Gut, das kann ich verstehen. Wenn du eh kein Memory allocaten darfst,
dann ist so quasi dein Bedürfnis mit Pointern rumzuhantieren auch gesunken.
Du kannst ja auch quasi alles als Referenzen übergeben.
Okay, um Referenzen zu dereferenzieren, brauchst du trotzdem Pointer-Syntax.
Aber es ergibt Sinn, dass sie das weniger benutzen dann.
Das ist die Restriktion von Pointer-Nutzen.
Die Macht der Zehn nennt Pointer aus und sagt, dass sie nicht mehr als ein Lager aneinander ausrechnen können.
Die Grund dafür ist, dass Pointer eine wichtige, aber leicht zu benutzen.
Wenn du deine Pointer aneinander ausrechnen kannst, forstest du Strukturen, die sich richtig ausrechnen.
gegenüber pointern das ging sogar soweit dass der entwickler der damals
größten tja was war denn das network
ja also network io library in rust den haben die leute so lang abgefuckt dass
er unsafe rust code verwendet hat mit pointern dass er irgendwann das projekt
Eingestellt hat oder abgegeben hat oder so was
Hat noch irgendjemand im hinterkopf was das für ein projekt war
Das ist schon ein paar jahre her also irgendjemand hat eine rast network library bereitgestellt auf github die war auch relativ beliebt
Und dem ging immer wieder so die ganzen hardcore rast fans auf den sack haben gesagt. Oh an safe point
Oh kack rast nicht nichts rast standard entsprechen und die haben den so sehr genervt dass der irgendwann gesagt hat ich führe mein projekt nicht fort
Also die Rust-Leute sind da teilweise schon echt übertrieben drauf.
Unsafe in Rust, das ist ja quasi Gotteslästerung.
ActiveSweb, das kann sein, ja, dass das das gewesen ist.
Gut, wenn du alles global allokierst und so und
Keine Callbacks und so verwendest und alles mögliche. Wobei, wie kommen die ohne Callbacks aus?
Also es ist doch sicherlich auch
bei NASA Systemen so, dass sie nicht nur gepolt werden, sondern auch mal ein Callback, wenn irgendein
Ergebnis auftritt
machen, oder? Wie willst du das ohne Function Pointer machen?
Also zum Beispiel
Bei der Nasa wird es doch auch so sein, dass irgendein System
Irgendwas misst und dann
ein Callback aufruft. So nach dem Motto, okay der Wert hier jetzt ist über 60, ich rufe mal ein Callback auf. So Achtung System
Ich meine, oder pollen die wirklich alles in irgendeiner Main-Loop drinne?
Aber wenn du alles pollst in der Main-Loop, dann verpasst du ja vielleicht auch mal was.
Also dass die ganz ohne Function Pointer auskommen, ich weiß nicht wie die das machen, das ist
schon, stelle ich mir gar nicht möglich vor.
Ähm, klingt nach Linux Newsletter, wo Linus, ne ne ne das meine ich nicht, dass Linus öfters
mal flamed ist klar.
Die rufen einfach Funktionen mit Namen auf und nicht über Function Pointer.
Das ist dann kein Function Pointer.
Okay, das heißt, verstehe, verstehe, ja doch, doch, leuchtet ein, leuchtet ein, doch, es
leuchtet ein.
Die haben dann quasi, die kriegen dann nicht als Parameter irgendwie nen Struct, wo dann
irgendwie eine Verify-Funktion drin ist, die irgendwo gesetzt wurde, sondern die
wissen genau, sie rufen jetzt halt an der Stelle Funktion x,y auf und
übergeben das als Parameter. Ja, okay. Ja gut, wenn man alles immer genau weiß, was
wie wo passiert, ergibt das Sinn, ja. Ich meine, wir rufen tagtäglich massig
Funktionen auf ohne Function Pointer. Der normale Function Call ist ja ohne
Function Pointer. Also, ja, okay, ja, macht Sinn, ja.
Neuer Emote-Vorschlag. Callbäcke! Falls irgendjemand eine gute Emote-Idee hat, bin ich
offen gegen.
Callbäcke! Finde ich gut.
und es sehr schwer zu statisch analysieren und vollständig zu testen.
Und zum Schluss, wenn Sie Ihren Code kompilieren, kompilieren Sie mit allen Warnungen ermöglicht
und kompilieren Sie in pedantischem Modus.
Das ermöglicht, dass jedes mögliche Problem, das der Compiler mit Ihrem Code sieht,
aufgehoben und als Fehler behandelt wird.
Nachdem das getan ist, sorgen Sie dafür, dass Ihr Code mit verschiedenen Statik-Code-Analysatoren
mit verschiedenen Regelsetzungen analysiert wird und dass Ihr Code unit-getestet ist.
Jetzt, bevor du deinen neuen, safety-code-
Ja, ich verstehe es auch nicht, was mit den Rust-Leuten los ist.
Aber die Rust-Leute denken wahrscheinlich, wenn Unsave eine Ebene unten drunter gerappt
ist, dann müssen sie selbst kein Unsave mehr verwenden und dann ist es ja okay.
Ich meine, die gesamte Betriebssystem-Interop-Sache ist Unsave.
Okay, vielleicht nicht mehr, wenn man Rust unter Linux mit dem Rust-Linux-Blob-Interface
habe ich noch nie eingeguckt verwendet.
Ich sehe ehrlich gesagt auch wenig Probleme drin mit unsafememory.
Nicht alles ist super krass sicherheitsrelevant, dafür macht Rust ja durchaus Sinn.
Man muss sich ja überlegen, wo Rust herkommt.
Rust wurde von Mozilla entwickelt, unter anderem für ihren Browser.
Und in nem Browser macht es natürlich sehr viel Sinn, dass du zwei Anforderungen hast.
Unmanaged Memory.
Und per... also quasi, nee, muss ich alles sagen.
Nicht unmanaged Memory.
Dass du Performance hast.
Und Memory Safety so weit möglich.
So.
Das ergibt Sinn, weil ein Browser muss schnell als Fuck sein und so sicher wie geht.
In solchen Anwendungsszenarien, finde ich, macht Rust durchaus Sinn.
Ansonsten bei vielen anderen Sachen, ok, wenn da mal irgendwie was überläuft und die Anwendung crasht, weil du irgendwie drauf zugreifst, was es nicht gibt, so what, das ist meistens nicht sonderlich schlimm.
Dann crasht das Game halt, ja, schön, und weiter.
Ist jetzt nicht schlimm, da löscht sich dann Windows nicht von, wenn dein Game mal crasht.
Also wenn wenn dagegen steht ja ich rede jetzt nicht von dauerhaft crashen also wenn du jetzt
die Auswahl hast zu ja okay in ganz speziellen Fällen wenn mal irgendwie was passiert crasht
mein game versus ich brauche zweimal doppelt bis dreimal so lange das zu entwickeln mit
rast und es kräftet an der stelle halt nicht dann würde ich mich dafür entscheiden dass
mal ein Game halt rauskommt und ich Geld verdiene.
Es ist jetzt ein sehr übertriebenes Beispiel, aber wie gesagt, ich finde Rust ist gar nicht
mal so unbedingt notwendig oder der Einsatz von Rust ist in vielen Bereichen gar nicht
mal so sinnvoll, weil Rust halt schon vom Entwicklungsaufwand her, zumindest meiner
Ansicht nach, eine ganze Ecke anstrengender ist als viele andere Sprachen und länger
dauert.
Und halt auch an Stellen, wo du quasi, ähm, die Memory-Safety-Sachen gar nicht so sehr brauchen würdest.
Ich weiß, ich weiß.
Rusts, Rust-Devs.
Gerade auf Stack-Overflow, äh, nicht Stack-Overflow, auf Hacker-News sind die Rust-Entwickler auch immer an Start.
Ja gut, mit C++ vergleichen ist ja auch für'n Arsch.
C++ ist alles Schrott.
Sogar die Sprache selbst.
Die Penner, Header rumgefuddelt, Alter.
In C++ ist so ziemlich alles Kacke.
Das einzige, was in C++ tatsächlich gut ist, ist die Performance und das ist den Mist für jede nur erdenkliche Sprache halt und C, ja, bei C noch mehr, aber dass es gerade C++ auch für so nahezu jede erdenkliche Plattform gibt.
Ansonsten ist so ziemlich alles Kacke in C++.
Also mir wäre C auch lieber als Rust für die meisten Sachen.
Ihr weiß, das darf man den Rust Entwickler aber nicht sagen.
Und ansonsten, ganz im Ernst, es darf durchaus ein bisschen was Highleveligeres sein, weil
die Performance ist jetzt ja auch nicht wirklich schlecht, wenn man sich mal so...
Ich weiß java wird nachgesagt memory und geschiss und sonst was aber die java die performance von java ist nicht
So ist nicht schlecht die java von dort net ist auch nicht schlecht
Natürlich kannst du die sachen wenn du super optimiertes c oder rast von dir gibst
Deutlich schneller machen aber es ist jetzt nicht so dass wir davon reden würden dass das irgendwie 100 mal langsamer ist oder sowas
Also ich denke mal ein ordentlich programmiertes
.NET Programm vs. ein ordentlich programmiertes C-Programm, dann ist das .NET Programm vielleicht
in den Sachen, wo C seine Stärke ausspielt und wo C-Sharp halt auch mit Garbage Collector
so ein bisschen Probleme hat, was weiß ich, ist es vielleicht dreimal langsamer oder so,
aber in den meisten Fällen dürfte es sich gar nicht so extrem viel nehmen. Natürlich
ist es ein bisschen langsamer aber es ist nicht so dass wir von verhältnis
reden von ruby oder peisen versus c was irgendwie 800 mal langsamer ist oder oder
oder oder 10.000 mal langsamer ist oder sonst was in manchen fällen aber in
welcher sprache würde es so den browser entwickeln wenn nicht einer team ok bei
einem browser da ist es natürlich sinnvoll bei einem browser ist rast
tatsächlich eines der anwendungsfälle wo ich auch gesagt habe eben da macht das
durchaus Sinn. Für einen Browser brauchst du maximal mögliche Performance und so
memory safe wie geht ohne dass du irgendein Managed Environment verwendest wo du
zu viele Runtime Checks hast. Also bei einem Browser ist das was wo ich sagen
würde eindeutig da macht Rust Sinn. Bei einem Spiel zum Beispiel würde ich
sagen macht es weniger Sinn. Spiel, gerade vieles ist in Unreal und dementsprechend halt
C++, wobei man auch bei vielem gar nicht mal C++ programmieren muss, aber irgendwie, wenn
du was unter der Haube anpassen willst in Unreal, kommst du wahrscheinlich um C++ nicht
drum herum. Das ist ein bisschen so, wie ich, wenn ich UI-Sachen machen will mit Qt, dann
kann ich das vieles ja auch mit ihrem Javascript-Interpreter machen, aber wenn du was erweitern willst
muss es C++ sein. Also insofern, ein Game würde ich eindeutig eher in C++ entwickeln,
wenn es Unreal ist, als da mich irgendwie mit Rust rumzuschlagen. Allein schon, weil es viel bessere
Tools und alles gibt. Oder lassen wir mal die Tools außen vor. Sagen wir mal, es gäbe Unreal für Rust
und es gäbe Unreal für C++. Dann würde ich wahrscheinlich trotzdem das Ganze in C++ entwickeln,
Weil es bei Games nicht wirklich so wichtig ist, dass du die ganzen Safety, Compile-Zeit-Garantien hast von Rust.
Weil es ist dir meistens egal, ob es theoretisch einen Pending-Threat oder was auch immer geben kann,
den du dann vielleicht erst zwei Minuten später...
Es juckt dich nicht.
In Rust musst du dann dir ganz viele Gedanken drum machen,
ah, hier geht das out of scope und hier brauche ich es eigentlich nicht mehr.
Juckt dich nicht, ja? Und in C++ hast du vielleicht mal irgendwie einen Crash drin, den du mit Rust nicht hättest, aber bist halt doppelt so schnell fertig.
Also wenn ich ein Game programmieren würde, eindeutig C++ und nicht Rust.
Und ich würde es gar nicht in C++ programmieren, weil ich keine Ahnung von Game-Entwicklung habe und dementsprechend wahrscheinlich, wenn ich was in Games machen würde, dann in Unity machen würde, dass ich C Sharp verwenden kann.
Wobei Unity in den Reihen ja auch C++ ist, soweit ich weiß.
Die benutzen ja, glaube ich, immer noch eine uralte Mono-Runtime.
Oder sind die mittlerweile auf .NET Core oder auf .NET in Unity?
Das letzte Mal, wo ich geguckt habe, hatten die noch eine uralte Mono-Runtime.
Willst du Unity auch auf die To-Do-Liste schreiben?
Nee, weil mich Game-Entwicklung überhaupt nicht interessiert.
Ja, das ist Cute Style C++ tatsächlich auch viel angenehmer als Standard C++, also einfach
weil halt schon sehr vieles sinnvoller eingebaut ist und gleich funktioniert, nicht so wie
in der C++ Standard Library wo alles unterschiedlich funktioniert, ich meine das abartigste von
C++.
Das ist halt typischer C++ Chat, ja.
Ich meine, how to get duration as Millisekunden und dann will er es konvertieren.
Er will quasi Millisekunden konvertieren in Sekunden.
So.
Ich meine, the fuck, alter, what the fuck, C++, was ist das hier?
Ah, eklig.
Er hat das neue Video geguckt, excellent.
Genau, genau, richtige Reihenfolge. Erst YouTube-Stronks, jetzt Twitch-Stronks.
Schau dir mal Standard Enabled an, das kenne ich. Das ist, das ist eines dieser Sachen,
die ich vorhin meinte mit, du kannst in C++ mittlerweile zur Compile-Zeit noch
deutlich abartigere Dinger machen als mit C-Makros.
Wrong! Obviously, Leute! Hier habt ihr es zuerst gesehen. Wrong! Right!
ich erkenne zwar auf den ersten blick absolut nicht was der unterschied ist
aber obviously wrong obviously right
diese sprache ist so rotz alter ok es ist ok ok also das hier das hier ist
falsch so zu schreiben man muss schreiben template type name
floating standard enable if t standard ist floating point floating doppelpunkt
Doppelpunkt value bool gleich true
Natürlich muss man da schreiben logisch
Also da hätte man jetzt auch gleich drauf kommen können also da hat man drauf kommen können dass das hier falsch ist und das hier
Richtig ich erkenne auch nicht mal den unterschied was ist jetzt eigentlich genau der unterschied
Leute ich erkenne den unterschied nicht was ist der unterschied hier überhaupt
Seriously, ich erkenne den Unterschied nicht.
Ah, das Spool fehlt. Hier.
Das Spool fehlt hier.
Alter, diese Sprache, man. Guckt euch das mal an.
Ich glaube echt, die Hauptaufgabe des C++ Gremium ist es,
wie können wir das Ganze noch unverständlicher machen.
Was zur Hölle?
Alter!
Wie viele Sonderzeichen?
Wie viele Sonderzeichen möchtest du bitte schön in eine Zeile packen?
Ja!
Das wäre so das YouTube-Comment davor.
Is trivial!
Is trivially destructible!
Was zum Geil
bauen die da immer?
Guckt euch diese Zeile schon mal an!
Guckt euch das mal an!
Voidpointer, okay, soweit noch klar.
Klar, Kunst, Volatile, Void, so weit auch noch, okay.
No Axe, Return, Kunst, Cast, Void, naja geht ja noch, aber dann diese Dinger hier.
Alter, what the fuck, C++, es ist die schlimmste Sprache auf der Welt, Alter, guckt euch das
an.
Das kannst du nicht lesen, also mein, seht ihr, das ist die Hilfeseite, die haben das
Ihr müsst euch das mal vorstellen, die Leute, die diese Hilfe-Seite geschrieben haben, die haben zwei Sachen im Kopf gehabt.
Erstens, wir brauchen gute Beispiele dafür und das zweite, wir müssen die Sache so formatieren, dass man es gut lesen kann.
Das, was ihr hier seht, ist das beste Beispiel und die beste Formatierung, die ihnen eingefallen ist dafür, um das zu demonstrieren.
Das sagt schon alles, oder?
Und selbstverständlich, Standard ist trivially destructible, alles klar.
Es gibt keine, es ist wirklich die schlechteste Sprache.
Also C++ ist die schlechteste Sprache, die nicht schlecht sein will.
Es gibt noch schlechtere Sprachen, aber die sind absichtlich so gemacht, so Brainfuck oder so, ja?
Es gibt Sprachen, die sind schlecht gemacht, um schlecht oder um eklig.
Also C++ ist die ekligste Sprache, die halt nicht eklig sein will.
Brainfuck möchte ähnlich sein.
Whitespace möchte eklig sein.
C++ möchte eigentlich eine gute, angenehme Sprache sein,
aber sie failen einfach so miserabel schon seit Jahren.
Das ist der Wahnsinn.
Ja, das kommt auch noch, dass du 30.000 Legacy-Sachen hast, die da drin sind.
Wobei, da hat C-Sharp mittlerweile auch Probleme.
Wir haben schon viel C++ im Stream gebaut, so ist es ja nicht, aber ich hab mich jedes
Mal auch drüber aufgeregt.
Klar, kann potenziell jeder, ist aber nicht so wirklich sinnvoll, nur wenn man was erstellt
und sich jetzt eine neue extra Programmiersprache, potenziell, prinzipiell kann das jeder, wenn
du das Hintergrundwissen dafür hast.
Ne, ich bezweifle auch, dass Wildspace einen Webserver hat.
Leute ich geh jetzt was essen, ich bin jetzt 4 Stunden on, ist doppelt so lang wie sonstige Sonntags-Sonntags-Streams laufen.
Ich hab Hunger, übrigens ratet mal was es heute gibt.
Wer es errät bekommt ein Sub gegiftet.
Nudeln mit Reis? Nein.
Hühnchen mit Reis, Lachs plus Nudeln, geil, Lachs plus Nudeln, richtig, okay, nicht ganz
richtig, aber ich lasse es gelten, nicht ganz richtig, es ist nicht Spaghetti Bolognese,
es ist Nudel Bolognese, also es ist nicht Spaghetti, es sind Sachen, die sind relativ
ähnlich zu Spaghetti, aber es sind nicht direkt Spaghetti. Also das lasse ich, das lasse ich aber gelten.
Okay, Moment.
Ja.
3,99. Ich habe jetzt einfach zwei Euro an Bezos überwiesen damit.
Weil ich bekomme zwei Euro wieder
und
zwei verliere ich.
Ich habe quasi an Amazon zwei Euro überwiesen gerade.
Twitch nah am Leak, oh fuck alter, WoBlows wurde geleakt.
Ja und von den 2€ die ich wieder bekomme muss ich noch Steuern bezahlen, das ist ja
doppelt beschissen alter.
Ich bin quasi 3€ los.
Also selbst Subs giften ist glaube ich das freeheadigste Move den man machen kann.
Ne mach ich nicht.
Musst du deine Subs selber bezahlen in Twitch?
Klar, wenn du selbst Subs giftest musst du die selbst bezahlen.
Ich hab grad 3,99€ bezahlt für nen Sub an mich selber.
Und drei Euro sind davon wahrscheinlich weg
Ist es, das ist eine sehr schlechte Financial Decision, sich selbst Subs zu giften
Wenn das nicht so wäre, wenn das nicht so wäre, dass du die selbst bezahlen müsst,
dann könnte man sich ja reich giften mit Subs
Ja, aber da hab ich keinen Bock drauf, allein schon daran zu denken, wenn ich die Steuererklärung
mache, GIF-Sub da reinzuschreiben.
Unlimited Money Glitch.
Oder wie würde da ein Typ auf YouTube sagen, ähm, weiß nicht wie der Channel heißt, ähm,
Twitch Subs are perfectly balanced.
Oder wie geht das?
Are perfectly fine and balanced.
Die Videos, wo ich immer keinen Bock habe, mir die anzugucken, weil da so viel Gelaber ist um das eigentliche Ding.
Der könnte Videos machen, die 2-3 Minuten gehen. Gut, da muss man in die eigene Nase greifen, meine Videos sind auch oftmals länger.
Aber der dreht sich so sehr im Kreis, der macht Viertelstunden-Videos über ein Ding, was in 3 Minuten abgehakt ist.
Ich guck mir die Videos immer nicht, ich kann die mir nicht angucken.
Diablo 4 haben wir noch nicht am Start.
bin ich mir auch nicht sicher, ob ich damit anfange. Diablo 3 hat mich sehr enttäuscht
und ich hab immer noch kein Vertrauen in Blizzard, dass da was gescheites rauskommt. Nach
allen aktuellen Reviews sieht es ja so aus, als hätte Blizzard seit Jahren mal wieder ein
Scheiß game auf die reihe gekriegt
Aber abwarten
Du kannst nur chatten mit saab sowas würde ich nicht machen leute die auf twitch das machen sind auch echt pp
gar ich bin überzeugt davon
beweist mir
Change my mind ja ich bin überzeugt davon dass du mehr geld verdienst mit
offen im chat und subscriben können versus du musst sammeln für chat weil
sobald du gezwungen wirst haben viele leute einfach keinen bock und hauen ab
und kommen nie wieder auf deinem channel vorbei und im anderen fall chillen sie
eine weile hier rum und überlegen sich irgendwann mal könnt man doch auch
sammeln
Außer ich werde HotTube-Cam-Girl-Streamer.
Gut, woher wollt ihr eigentlich wissen, dass ich kein Girl-Streamer bin?
In der heutigen Zeit ist das kein Ding.
Ich könnte mir das von heute auf morgen überlegen. Instant. Bam.
Ja, schön. So einfach ist es. Zack.
Hast du von... ne, bei der wundert mich aber auch nix mehr.
Dort einfach wundert mich echt nix mehr.
Okay, gebe ich dir recht, aber das betrifft nur ganz wenige.
Ja, bei xQc zum Beispiel kann man den Chat sich nicht mal angucken.
Und xQc habe ich früher ganz gerne geguckt.
Aber seitdem der diese Riesenanzahl, also ich hab den geguckt im Bereich, da hatte der so 1.000, so 500 bis 2.000 Viewer.
Mittlerweile hat er ja viel, viel mehr.
Damals war der Chat schon auch krasses Gespammer, aber man, er war eigentlich ganz witzig und es ging noch.
Mittlerweile ist es ja nur noch eine komplette Wand an Text, die einfach durchrauscht.
Ja, Kronk...
Bei Kronk ist es aber auch anders.
Mein XQC ist halt...
lädt halt zum Spammen ein schon richtig, dass da gespammt wird.
Oder Phosen, ja?
Diese Chats, das ist Teil davon, dass da gespammt wird als Fakt.
Bei Kronk ist ja so, dass sinnvolle Sachen auch noch im Chat geschrieben werden.
Weil du nicht auf BubaTV bist.
Leute, ich traue mich nicht auf BubaTV zu drücken.
Kann man da draufklicken ohne dass was passiert?
BubaTV ist eine kurierte Liste von entertaining Streams.
Ich, okay, ich traue mich, ich traue mich BubaTV.
Okay, die haben tatsächlich alle was an, alles gut.
Es sind nur verlinkte Twitch-Dinger, okay.
BubaTV.
Was ist das da für eine Uhr, man?
Ich sollte mir buba.zip registrieren.
Ist das noch frei?
Moment, das ist doch frei?
Oh, die muss ich kaufen.
Ach, man kann!
Buber.zip!
Nein, ich kauf die nicht.
Was will ich mit der Domain?
Vor allem kostet die mich irgendwie 20 Euro im Jahr oder so.
Punkt Zip ist das Secure Namespace. Achso Google, ist das so. Ja, also Microsoft minus Office Punkt Zip ist also neuerdings Secure.
Ja gut, Leute ich wollte essen gehen, mach ich jetzt auch.
Hast du nicht mehrere Domains, die du einfach nur wegen dem, ja hab ich, ich hab bestimmt
6-7 Domains insgesamt, die ich eigentlich für nix benutze, aber die gute Namen sind.
Das ist auch so ein ding dass das wobei es funktioniert ja nicht dass das funktioniert das funktioniert ja nicht ganz
Github.com repo dings dass das das funktioniert ja nicht ganz
Weil du nicht https
mit
Unicode slashes da vorgeschrieben hast
Aber wenn, dann wird es tatsächlich funktionieren, ja.
Okay, Leute. Mal gucken, eventuell spielen wir nachher noch ne Runde.
Mal schauen.
Das, ähm...
Den Warhammer-Boomer-Shooter.
Mal gucken, was wir danach essen nachher.
Bis denn. Ich geh jetzt was essen, ich hab übertrieben Hunger.
Wir sehen uns. Bis denn. Macht's gut.
