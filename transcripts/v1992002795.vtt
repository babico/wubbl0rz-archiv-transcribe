WEBVTT

00:02.670 --> 00:30.270
Pog Pog Pog Pog Pog Pog Pog Pog

00:30.270 --> 00:31.870
ich muss gerade mal wagen dass mein

00:31.870 --> 00:33.910
browser geupdated ist auf der anderen

00:33.910 --> 00:34.710
seite

00:34.710 --> 00:39.490
ja kekwait kekwaiting dass mein browser

00:39.490 --> 00:40.410
geupdatet ist.

00:43.580 --> 00:45.640
Ich gebe zu, Freitag 12.16 Uhr ist

00:45.640 --> 00:47.760
vielleicht nicht so der normalste Zeitpunkt

00:47.760 --> 00:49.460
zum Streamsauen. Für mich.

00:53.150 --> 00:54.150
Aber warum nicht, ne?

00:56.930 --> 00:57.670
Heckel HD.

00:58.890 --> 00:59.950
Ja, ich habe Urlaub, richtig.

01:00.910 --> 01:02.690
Ich habe Urlaub seit...

01:03.330 --> 01:05.090
Ich meine, letzter Arbeitstag

01:05.090 --> 01:06.390
letzter Arbeitstag

01:06.390 --> 01:07.230
war

01:07.230 --> 01:11.020
am 24.

01:11.880 --> 01:14.560
Wobei, also streng genommen

01:14.560 --> 01:16.380
letzter Arbeitstag war am 24.

01:16.380 --> 01:18.540
Aber ich hatte

01:18.540 --> 01:20.860
ja quasi hier nochmal Bereitschaft

01:20.860 --> 01:22.340
und

01:22.340 --> 01:23.980
hier hatte ich nochmal

01:23.980 --> 01:25.300
Teambuilding-Workshop.

01:25.960 --> 01:28.500
Also insofern... Oh Leute, das war wieder was,

01:28.640 --> 01:29.320
ey, ich sag's euch.

01:30.100 --> 01:31.600
Kann ich euch dann erzählen.

01:34.580 --> 01:36.500
Wobei, es ging. Es war bisher

01:36.500 --> 01:38.320
es war nervig wie

01:38.320 --> 01:39.980
alle Teambuilding-Workshops, aber

01:39.980 --> 01:42.160
insgesamt muss ich sagen, war das tatsächlich noch

01:42.160 --> 01:43.900
der beste Teambuilding-Workshop.

01:45.920 --> 01:46.360
Marabuna

01:46.360 --> 01:47.340
ist 8. Moin.

01:49.360 --> 01:50.060
Düdü-düt.

01:50.440 --> 01:51.140
Düdü-düt.

01:52.080 --> 01:53.740
So. Und

01:53.740 --> 01:56.240
deswegen, also so,

01:56.340 --> 01:58.600
sag mal so, Soft-Urlaub

01:58.600 --> 02:00.160
habe ich quasi schon seit 24.

02:00.520 --> 02:02.300
Aber so richtig hart Urlaub, also wo dann

02:02.300 --> 02:03.400
auch wirklich gar nichts mehr ist,

02:04.080 --> 02:05.620
habe ich quasi seit

02:05.620 --> 02:09.770
gestern. Was war so toll bei dem

02:09.770 --> 02:11.510
Teambuilding? Naja, wie gesagt...

02:11.510 --> 02:12.310
Wartet mal kurz.

02:14.310 --> 02:14.670
Hä?

02:17.230 --> 02:18.070
Mon KS.

02:20.850 --> 02:21.350
Ähm, was so

02:21.350 --> 02:22.390
toll beim Teambuilding war?

02:22.850 --> 02:25.290
Naja, es war nix toll, es war nur weniger nervig.

02:26.630 --> 02:27.410
Also toll habe ich

02:27.410 --> 02:29.390
trotzdem nicht gefunden. Ich mag solche Sachen einfach

02:29.390 --> 02:29.610
nicht.

02:31.090 --> 02:33.550
Aber insgesamt war es tatsächlich ganz, ganz,

02:33.730 --> 02:34.490
ganz okay.

02:34.490 --> 02:36.410
Ja, wir haben natürlich wieder

02:36.410 --> 02:38.030
irgendwelche komischen Spielchen gemacht.

02:38.730 --> 02:40.390
Also wir haben, passt mal auf, passt mal auf.

02:41.890 --> 02:42.210
Ähm,

02:43.770 --> 02:44.370
typisches,

02:44.430 --> 02:46.510
typisches Teambuilding-Spiel, was wir gemacht

02:46.510 --> 02:48.690
haben. Wir hatten zwei Teams,

02:49.050 --> 02:50.890
also, wir waren als ein Team

02:50.890 --> 02:52.590
da, aber wir wurden aufgeteilt in zwei

02:52.590 --> 02:54.970
Teams. Und beide Teams

02:54.970 --> 02:56.350
mussten

02:56.350 --> 02:58.710
einen Atomreaktor

02:58.710 --> 03:00.110
fixen.

03:00.990 --> 03:02.530
Natürlich war das logischerweise

03:02.530 --> 03:04.490
kein echter Atomreaktor und

03:04.490 --> 03:06.690
hatte mit Vorfällen in einem Atomreaktor

03:06.690 --> 03:07.890
auch gar nichts zu tun.

03:08.410 --> 03:10.450
Aber das ist so eine typische Story, die gerne bei

03:10.450 --> 03:12.490
solchen Spielchen auf

03:12.490 --> 03:14.330
auf Teambuildings gemacht wird. Also,

03:14.790 --> 03:16.430
das ging, das ging voll dermaßen.

03:16.510 --> 03:18.210
Das ging voll dermaßen. Also, guckt mal.

03:19.330 --> 03:20.190
Beide Teams,

03:20.890 --> 03:22.470
beide Teams hatten

03:22.470 --> 03:24.170
einen roten Kreis auf der Erde.

03:24.790 --> 03:26.490
So, äh, einen orangen Kreis

03:26.490 --> 03:28.450
auf der Erde. Das war der

03:28.450 --> 03:29.390
Atomreaktor.

03:30.870 --> 03:31.850
Und in der Mitte,

03:32.510 --> 03:34.530
in der Mitte, what, was ist das

03:34.530 --> 03:35.990
hier? Warum macht es so komische Dinger?

03:36.650 --> 03:37.490
So, und in der Mitte,

03:37.750 --> 03:40.430
in der Mitte stand eine Flasche.

03:40.550 --> 03:42.270
Ich mach jetzt, das, das, das wird

03:42.270 --> 03:44.370
kein Buba, Leute. Es wird kein Buba-Bild.

03:44.550 --> 03:46.410
Sieht doch vielleicht ein bisschen so aus. Okay, kein, kein

03:46.410 --> 03:48.290
Buba, ja. So.

03:48.810 --> 03:50.630
Also, in der Mitte stand eine Flasche.

03:50.890 --> 03:52.750
Und da drauf,

03:53.110 --> 03:57.370
da drauf lag

03:57.370 --> 03:59.050
ein Ei. Okay?

04:01.090 --> 04:01.670
Okay, so.

04:02.350 --> 04:03.430
Und dann hast du einen Rucksack

04:03.430 --> 04:05.290
bekommen. Das zweite machen wir einfach wieder weg.

04:05.950 --> 04:06.950
Und dann hast du, what,

04:07.230 --> 04:08.910
alter Paint, mein Gott, Paint ist,

04:09.270 --> 04:11.270
ich bin nicht wirklich traurig, dass Paint

04:11.270 --> 04:12.650
weg ist. Naja, zumindest

04:12.650 --> 04:15.230
hat man dann einen Rucksack bekommen mit Teilen drin.

04:16.850 --> 04:17.330
Und

04:17.330 --> 04:18.350
man musste quasi

04:18.350 --> 04:21.070
mit den Teilen aus dem Rucksack

04:21.070 --> 04:22.970
musste man was bauen.

04:23.290 --> 04:24.150
Im Team zusammen.

04:25.170 --> 04:27.250
Wie man das Ei, ohne

04:27.250 --> 04:29.490
dass es kaputt geht, von der Flasche

04:29.490 --> 04:31.230
bekommt, aus dem Kreis raus

04:31.230 --> 04:33.430
und danach

04:33.430 --> 04:35.330
die Flasche rausbekommt, ohne dass es

04:35.330 --> 04:35.950
kaputt geht.

04:37.930 --> 04:39.470
So, und da hatte man dann,

04:39.670 --> 04:41.110
da hatte man so Sachen drin, wie

04:41.110 --> 04:43.470
ein bisschen, also

04:43.470 --> 04:44.750
eine Schnur war drin,

04:45.350 --> 04:47.650
es war ein Kleiderbügel

04:47.650 --> 04:49.330
drin, eine Mausefalle,

04:50.070 --> 04:51.230
ein paar Kabelbinder.

04:52.250 --> 04:53.270
Was ist mit einem Atomreaktor?

04:53.270 --> 04:53.690
Was hat das mit einem Atomreaktor zu tun?

04:53.930 --> 04:55.130
Also, es hat

04:55.130 --> 04:57.590
insofern was, du darfst nicht, du darfst

04:57.590 --> 04:59.110
nicht in diesen Kreis reingehen,

04:59.290 --> 05:00.890
weil verstrahlt, so nach dem Motto.

05:01.310 --> 05:03.110
Du musstest das alles von außen machen.

05:03.410 --> 05:04.670
Und wir haben das, oh du Scheiß,

05:05.010 --> 05:07.150
ich glaube, wir haben das mit am schnellsten von

05:07.150 --> 05:08.870
allen Teams, die es jemals gegeben hat,

05:09.130 --> 05:11.250
gepackt, weil wir haben einfach alle Teile

05:11.250 --> 05:13.190
links liegen lassen und haben uns

05:13.190 --> 05:13.550
die,

05:14.850 --> 05:16.550
die, wie ist das,

05:16.710 --> 05:18.690
da war so eine aufgewickelte Schnur drin.

05:19.150 --> 05:20.990
Wir haben eine aufgewickelte, wir haben die Schnur

05:20.990 --> 05:21.910
einfach abgewickelt.

05:23.270 --> 05:24.310
Einer ist hierhin,

05:27.260 --> 05:28.380
einer hat es hierhin gestellt,

05:28.860 --> 05:30.860
einer hat es hierhin gestellt, mit der Schnur

05:30.860 --> 05:32.920
drüber gespannt. Wir haben erst dann mit der Schnur

05:32.920 --> 05:34.900
langsam das Ei runtergekickt.

05:35.620 --> 05:37.060
Das ging, weil

05:37.060 --> 05:39.240
das war auf dem Gras, ist nicht

05:39.240 --> 05:40.180
viel passiert mit dem Ei.

05:41.160 --> 05:43.020
Dann haben wir an die Schnur ein bisschen Metall

05:43.020 --> 05:45.080
dran gemacht, dass quasi hier immer

05:45.080 --> 05:47.180
weiter, immer weiter raus gedingst

05:47.180 --> 05:49.280
das Ei. Und danach

05:49.280 --> 05:51.060
sind wir mit der Schnur einfach ein paar Mal

05:51.060 --> 05:53.360
im Kreis gelaufen, bis sie sich um die Flasche

05:53.360 --> 05:55.100
gewickelt hat, dann haben wir die Flasche rausgehoben.

05:55.480 --> 05:57.120
Also das hat irgendwie, keine Ahnung,

05:57.280 --> 05:59.060
acht Minuten gedauert oder so, dann war

05:59.060 --> 06:01.300
das fertig, obwohl 30 angesetzt

06:01.300 --> 06:02.500
waren. Naja,

06:03.160 --> 06:04.940
das sind typische

06:04.940 --> 06:06.160
Teambuilding-Spielchen, ja.

06:06.860 --> 06:08.660
Typische Teambuilding-Spielchen.

06:09.520 --> 06:11.220
Jemand Oracle Pfeife, ich hoffe

06:11.220 --> 06:18.310
ja nicht, ich habe keine Ahnung.

06:19.050 --> 06:20.110
Und ich fasse Datenbanken

06:20.110 --> 06:22.170
auch nicht an, weil ich weiß, dass ich davon keine Ahnung

06:22.170 --> 06:23.950
habe. Und ihr wisst, wie das ist, es ist

06:23.950 --> 06:25.670
wichtig zu wissen, wenn man keinen Plan hat.

06:26.890 --> 06:27.830
Und von Datenbanken,

06:27.830 --> 06:29.890
also insbesondere natürlich

06:29.890 --> 06:30.210
auch

06:30.210 --> 06:30.350
Datenbanken,

06:30.350 --> 06:32.250
Oracle, weil da kommst du ja nur dran,

06:32.390 --> 06:33.150
wenn du viel Geld hast.

06:33.910 --> 06:36.390
Aber so alles, was es da gibt,

06:36.610 --> 06:38.110
ja, ich meine, von Postgres habe ich zumindest

06:38.110 --> 06:40.290
aus Anwendungsentwicklungssicht noch ein bisschen

06:40.290 --> 06:45.810
Ahnung. Aber von Oracle

06:45.810 --> 06:48.030
gar nicht, deswegen halte ich da echt die Finger von

06:48.030 --> 06:50.070
weg. Ja, SAP HANA ist auch ganz, ganz

06:50.070 --> 06:50.670
grausam, Alter.

06:52.270 --> 06:53.990
Bei uns auf der Arbeit gab es eine Diskussion,

06:54.070 --> 06:56.010
was man nehmen sollte. Pass mal auf, müssen wir uns mal vorstellen.

06:57.270 --> 06:58.210
Gab es die Diskussion,

06:58.270 --> 06:59.810
was man nehmen sollte für irgendeine Anwendung?

06:59.870 --> 07:02.050
Ich glaube, es war keine neue Anwendung, aber es sollte umgebaut

07:02.050 --> 07:03.570
werden. Gab es die Diskussion,

07:03.570 --> 07:04.570
Oracle,

07:05.270 --> 07:06.470
SAP HANA,

07:07.470 --> 07:08.950
Sybase

07:08.950 --> 07:10.790
oder Postgres?

07:11.690 --> 07:13.490
Und da haben wir uns alle angeguckt

07:13.490 --> 07:15.890
und haben gesagt, naja, obviously Postgres.

07:16.530 --> 07:17.590
Weil, macht

07:17.590 --> 07:19.310
alles, kann alles,

07:20.070 --> 07:20.610
funktioniert,

07:21.750 --> 07:22.890
ist etabliert,

07:23.550 --> 07:25.790
kostet nichts, läuft auf Linux.

07:26.430 --> 07:27.430
Also im Prinzip so,

07:27.990 --> 07:29.530
warum, warum denkt

07:29.530 --> 07:31.450
ihr überhaupt über die anderen Optionen nach, wenn

07:31.450 --> 07:33.110
ihr einfach Postgres nehmen könnt?

07:33.570 --> 07:35.670
Und am Ende hattest du dann da wirklich Leute

07:35.670 --> 07:36.810
drin, die, die

07:36.810 --> 07:39.550
ultra krasse SAP HANA Fans

07:39.550 --> 07:41.530
waren. Ich kann das nicht verstehen. Ich habe damit

07:41.530 --> 07:43.490
noch nie was gemacht. Ich will damit auch nichts machen.

07:44.170 --> 07:45.510
Allein schon, weil es SAP ist und

07:45.510 --> 07:47.730
wahrscheinlich wieder 30 Trilliarden

07:47.730 --> 07:48.250
kostet.

07:49.390 --> 07:51.570
Und Oracle will man sich auch nicht mehr ans Bein

07:51.570 --> 07:53.550
binden, als notwendig ist. Und irgendeine

07:53.550 --> 07:55.810
uralte Sybase Version von 1995

07:55.810 --> 07:57.490
erst recht. Warum nicht, also

07:57.490 --> 07:59.510
warum nicht einfach stinknormales Postgres,

07:59.590 --> 08:01.290
wenn es doch schon zur Auswahl steht?

08:03.660 --> 08:05.080
Aber war's nicht, war's nicht.

08:05.140 --> 08:05.900
Ey, ist echt

08:05.900 --> 08:08.900
böses Enterprise-Keckel teilweise.

08:11.450 --> 08:12.970
Am Morgen wird MMO gecrindet.

08:13.250 --> 08:14.650
Ich weiß nicht, ob ich MMO im

08:14.650 --> 08:16.730
Stream ein bisschen crinden soll, weil das ist

08:16.730 --> 08:18.810
ultra langweilig zum Zugucken, kann ich euch sagen.

08:18.890 --> 08:20.610
Das ist das langweiligste, was es gibt, ey.

08:21.450 --> 08:22.770
Leute beim MMO-Kreise

08:22.770 --> 08:24.330
crinen zu gucken, zuzugucken.

08:33.580 --> 08:35.180
Postgres macht keine, naja,

08:35.480 --> 08:37.260
gut, Postgres hat keine Lobby-

08:37.260 --> 08:39.200
Arbeitsleute, die vorbeikommen und

08:39.200 --> 08:40.860
also Postgres hat keine

08:40.860 --> 08:43.600
so Lobby-Abteilung, Sales-Abteilung,

08:43.600 --> 08:45.300
die ankommt und dir das Schmacken,

08:45.320 --> 08:47.360
ja, das stimmt, das stimmt schon, ja.

08:47.960 --> 08:49.400
Aber in dem Fall mussten es ja

08:49.400 --> 08:51.160
nicht mal irgendwelche CEOs entscheiden,

08:51.260 --> 08:53.100
sondern wirklich Leute aus der Technik.

08:53.420 --> 08:55.600
Und wie man da ernsthaft auf die Idee kommen kann,

08:56.000 --> 08:57.160
SAP oder Oracle

08:57.160 --> 08:59.460
versus Postgres, also, verstehe ich nicht.

08:59.780 --> 09:00.780
Das ist überhaupt eine Frage,

09:00.980 --> 09:03.780
dass es überhaupt die Frage gibt, verstehe ich nicht.

09:04.080 --> 09:05.280
Wenn du Postgres nehmen kannst,

09:05.380 --> 09:06.680
sollst du immer Postgres nehmen.

09:07.560 --> 09:09.260
Raspberry Pi 5 sind's verfügbar, ich weiß,

09:09.320 --> 09:11.640
ich hab's gesehen. Da habe ich trotzdem noch keinen gekauft.

09:11.700 --> 09:13.680
Was sagt denn, was sagt denn Barry Base?

09:15.320 --> 09:16.320
What the f...

09:17.680 --> 09:18.580
Pi 6?

09:18.580 --> 09:20.580
Warum habe ich am Raspberry Pi 6 gesucht?

09:21.620 --> 09:22.120
5.

09:23.400 --> 09:23.900
Okay.

09:24.960 --> 09:26.460
Die sind nicht verfügbar.

09:28.790 --> 09:29.650
Keck Waiting.

09:33.590 --> 09:37.350
Ja, die Sortierbarkeit war hier auch schon mal besser.

09:39.640 --> 09:42.480
Ja, ja, ja, wir machen gleich, wir machen gleich weiter.

09:42.480 --> 09:44.560
Ich muss den ganzen, ich muss erst mal Betriebssystem

09:44.960 --> 09:46.060
OS Update machen.

09:46.960 --> 09:47.740
OS Update.

09:48.840 --> 09:51.200
Eggman Update, Dings Update.

09:51.200 --> 09:51.680
Dings Update.

09:51.680 --> 09:52.640
Wollen Sie noch irgendwas Updates?

09:53.900 --> 09:57.940
Ähm, ich weiß nicht, was das ist,

09:58.040 --> 09:59.520
aber irgendwas, was wir nicht mehr brauchen.

10:01.480 --> 10:03.100
Weiß auch nicht, warum das installiert ist.

10:04.040 --> 10:06.500
Wenn nicht, war das mal als irgendeine Dieb...

10:06.500 --> 10:12.810
What the f...

10:12.810 --> 10:14.830
Okay, wahrscheinlich, wahrscheinlich

10:14.830 --> 10:17.190
wurde das mal wegen irgendeiner

10:17.190 --> 10:20.870
Dependency mit installiert, hä?

10:20.870 --> 10:23.530
Ach komm, ich lass...

10:23.530 --> 10:25.210
Naja, ich aninstall das einfach.

10:26.330 --> 10:27.630
Wird sich schon wieder installieren,

10:27.670 --> 10:28.130
wenn man's braucht.

10:28.150 --> 10:30.950
So, also, Packages sind geupdatet.

10:30.950 --> 10:33.430
Wichtigster Check, ASCII-Quarium geht noch.

10:33.430 --> 10:36.070
ASCII-Quarium nach LOLCAT gepiped, geht auch noch gut.

10:36.070 --> 10:37.510
Nice, Reboot-Time.

10:37.510 --> 10:44.020
Meinst du nicht?

10:44.020 --> 10:46.740
Aber zeig mal hier, wenn die lieferbar sind.

10:46.740 --> 10:50.680
Ja, Starter-Kit braucht keiner.

10:50.680 --> 10:54.440
Ja doch, doch, Starter-Kit, Starters brauchen Starter, ja?

10:54.440 --> 10:57.240
Wenn die noch ein Netzteil brauchen, vielleicht oder so, ja dann.

10:57.240 --> 10:59.880
Ich mein, es bietet sich an, für den aktuellen Raspberry Pi 5

10:59.880 --> 11:04.280
auch ein Netzteil zu kaufen, weil die haben ja zum ersten Mal

11:05.000 --> 11:09.240
also nicht zum ersten Mal, aber jetzt wiederholt, zum wiederholten Male

11:09.240 --> 11:15.680
bisschen, bisschen mehr Maximum Leistungsbedarf, aber

11:15.680 --> 11:17.880
das brauchen die ja meistens trotzdem nicht.

11:17.880 --> 11:23.220
Also ich, ich würd beim Raspberry Pi mit meinem alten Netzteil ins Rennen gehen.

11:23.220 --> 11:32.550
Das, das geht, glaub ich, immer noch voll klar.

11:32.550 --> 11:36.350
Was kostet das Start-, das Starter-Kit?

11:36.350 --> 11:39.630
Starter-Kit kostet Raspberry Pi

11:39.630 --> 11:41.330
ja, vier Gig reichen Digge.

11:41.330 --> 11:47.410
Äh, SD-Karten, Power Suppler, ein Case, das Case ist halt auch kacke.

11:47.410 --> 11:52.090
Ja, sowas geht vielleicht noch nicht.

11:52.090 --> 11:56.770
Ich, ich, ich würd mir ja sofort wieder das FLIR-Case kaufen.

11:56.770 --> 11:57.770
117€.

11:57.770 --> 12:02.450
Äh, also ich würd mir ja wieder, das gibt's ja auch schon für ein 5er,

12:02.450 --> 12:05.450
Pi 5 FLIR-Case.

12:05.450 --> 12:08.570
Ja, das da würd ich mir wieder kaufen.

12:08.570 --> 12:12.530
Das geht voll klar.

12:12.530 --> 12:14.530
Gibt's auch für Raspberry Pi 5.

12:14.530 --> 12:16.730
Ah, ne, das ist für ein 4er.

12:16.730 --> 12:23.290
Aber ich hab's letztens, ich hab's doch letztens auch schon für ein 5er gesehen.

12:23.290 --> 12:25.650
Himba Pi Fall Gen 2.

12:25.650 --> 12:28.150
Alles klar, genau, das brauchen wir.

12:28.150 --> 12:30.570
Himba, Himba Pi Fall Gen 2.

12:30.570 --> 12:33.850
Ah, das ist sogar fürs, fürs 3er.

12:33.850 --> 12:41.110
Also, ich hab das, ich hab das auf jeden Fall gesehen, dass das auch fürs Pi 5 schon gibt.

12:41.110 --> 12:42.370
Ja, fliegt.

12:42.370 --> 12:43.210
Fliegt.

12:43.210 --> 12:44.210
Das ist für ein Zero.

12:44.210 --> 12:47.370
Aber guck, die haben auch, die haben auch ein Pi 5 Case.

12:47.370 --> 12:52.370
Das ist, das ist so mein To-To-Go, äh, nee, To-Go ist das, also, falsches Wort.

12:52.370 --> 12:55.370
Das ist mein, mein Default Raspberry Pi Case.

12:55.370 --> 12:57.370
Ich find das Ding super.

12:57.370 --> 12:58.370
Das sieht gut aus.

12:58.370 --> 13:00.870
Nicht, dass es so entscheidend wär, aber es sieht clean aus.

13:00.870 --> 13:06.370
Du kannst unten dran relativ gut noch ne, ne, SSD pappen, SATA-SSD, beziehungsweise

13:06.370 --> 13:07.370
auf USB.

13:07.370 --> 13:08.370
SSD pappen.

13:08.370 --> 13:09.370
Ist auch genug Platz.

13:09.370 --> 13:10.370
Oder legst du oben drauf.

13:10.370 --> 13:11.370
Nimmst da so ein bisschen Klebeband.

13:11.370 --> 13:12.370
Ja.

13:12.370 --> 13:13.370
Machst dran.

13:13.370 --> 13:21.750
Und dadurch, dass das gesamte Gehäuse Alu ist, Kek, Kek-Alu, ups, meine E-Mails sind

13:21.750 --> 13:30.970
vielleicht grad ein bisschen groß, weil das Kek-Alu Case ist, verteilt sich die ganze Wärme

13:30.970 --> 13:31.970
auch gut drüber.

13:31.970 --> 13:39.670
Also, aber Leute, die ein Raspberry Pi quasi 24-7 auf, ähm, hoher CPU-Last laufen lassen

13:39.670 --> 13:43.570
wollen, also auch mit 80% plus CPU-Auslastung, dann ist das Case nix.

13:43.570 --> 13:44.570
Das Case.

13:44.570 --> 13:47.550
Also, natürlich, dadurch, dass es so nen großen Metallkörper hat, ne, verteilt die Wärme

13:47.550 --> 13:51.350
ganz gut und hilft auch, ein bisschen die besser abzutransportieren, aber natürlich

13:51.350 --> 13:56.230
wird's auch mit der Zeit zu heiß, wenn du's volle Pulle 24-7 in nem schlecht belüfteten

13:56.230 --> 13:57.510
Raum laufen lässt.

13:57.510 --> 13:58.670
Das ist ja klar.

13:58.670 --> 14:06.400
Aber das sind ja die aller, aller, allermeisten Raspberry Pis nicht.

14:06.400 --> 14:10.360
Du brauchst dann ein neues Netzteil, weil der Raspberry Pi 5 einen USB-C-Anschluss hat.

14:10.360 --> 14:11.360
Ne, brauch ich nicht.

14:11.360 --> 14:16.360
Weil ich ein ganz normales China-Chinesen-USB-Netzteil verwenden würde.

14:16.360 --> 14:17.240
Und.

14:17.240 --> 14:20.420
Und dann ein USB-C-Kabel anschließe.

14:23.070 --> 14:24.570
Also ich habe Berge.

14:25.350 --> 14:25.570
Ja.

14:26.230 --> 14:28.050
Ich habe Berge von denen hier.

14:29.270 --> 14:33.830
Ich habe aber auch welche mit Quick Charge und bis zu...

14:33.830 --> 14:34.950
Was ist Quick Charge?

14:36.030 --> 14:37.250
Bis zu 20...

14:37.250 --> 14:40.310
20 Volt 5 Ampere oder sowas.

14:47.020 --> 14:47.520
Irgendwie so.

14:49.970 --> 14:50.570
Ja, genau.

14:51.290 --> 14:51.450
Ja.

14:52.210 --> 14:53.430
Also sie können sogar Quick Charge.

14:53.430 --> 14:56.590
Also die sollten da nicht auseinanderfallen.

14:57.870 --> 14:59.690
Wenn ich den Raspberry Pi dran anschließe.

14:59.810 --> 15:01.590
Zur Not habe ich noch meine Steckdosenleiste hier.

15:01.630 --> 15:02.990
Die hat auch USB-Anschlüsse.

15:03.610 --> 15:04.290
Also insofern.

15:04.370 --> 15:06.590
Ich denke, ich bin für den Raspberry Pi gerüstet.

15:06.770 --> 15:06.990
Fünfer.

15:07.470 --> 15:09.190
Aber dazu müsste ich mir erstmal einen Fünfer kaufen.

15:16.320 --> 15:16.840
Ja, macht's auch.

15:18.320 --> 15:18.760
Kennst du...

15:18.760 --> 15:19.520
Ja, kenn ich.

15:20.120 --> 15:20.660
Kenn ich.

15:21.300 --> 15:21.580
Ja, ja.

15:22.660 --> 15:23.200
Kenn ich.

15:24.860 --> 15:26.160
Habe ich aber noch nicht mitgemacht.

15:29.160 --> 15:29.320
So.

15:29.700 --> 15:31.060
Jetzt geht's los.

15:31.060 --> 15:31.680
Jetzt werden wir mal...

15:31.680 --> 15:32.000
Rust.

15:32.400 --> 15:33.200
Wobei...

15:33.200 --> 15:33.740
Bevor wir...

15:33.740 --> 15:35.060
Wir machen vielleicht...

15:35.060 --> 15:36.960
Vielleicht erstmal die Docker-Geschichte.

15:37.440 --> 15:39.380
Bin mir gar nicht sicher, wo wir stehen geblieben sind.

15:39.820 --> 15:40.160
Wie immer.

15:40.480 --> 15:43.220
Ihr müsst nicht wirklich bei den letzten Streams dabei gewesen sein.

15:43.300 --> 15:45.520
Weil das ja immer ein bisschen unabhängig voneinander ist.

15:47.060 --> 15:48.380
Schadet allerdings auch nicht.

15:48.460 --> 15:51.440
Das heißt, wenn ihr öfters dabei sein wollt, könnt ihr ein Follow dalassen.

15:52.020 --> 15:52.440
Postchamp.

15:53.180 --> 15:53.480
So.

15:53.760 --> 15:55.720
Also ich muss erstmal den ganzen Krempel starten.

15:56.240 --> 15:56.720
Repos.

15:57.420 --> 15:57.900
Campchamp.

16:00.570 --> 16:02.230
Hier haben wir ein paar uncommittete Sachen drinne.

16:02.770 --> 16:03.130
So.

16:03.130 --> 16:04.570
Hier machen wir Rider auf.

16:06.890 --> 16:09.150
Für unser .NET Backend.

16:09.670 --> 16:11.810
Hier machen wir Rust auf.

16:12.030 --> 16:13.950
Für unser Low-Level-Web-RTC-Zeug.

16:16.270 --> 16:17.310
Ja, Strives, wie kommt's?

16:18.210 --> 16:20.490
Ich zeig dir gleich, was Sache ist.

16:21.350 --> 16:21.850
So, Rust.

16:21.950 --> 16:24.810
Und hier brauchen wir Whistle-Studio-Code für unser Frontend-Zeug.

16:25.310 --> 16:28.290
Und zack, bumm, sind schon immer 80% RAM voll wahrscheinlich.

16:29.050 --> 16:30.370
Haben wir hier einen Chrome...

16:30.370 --> 16:30.990
Oh, es laggt.

16:31.290 --> 16:31.830
Es laggt.

16:33.970 --> 16:34.330
Alter.

16:34.330 --> 16:34.410
Alter.

16:34.410 --> 16:36.430
Die VM, man.

16:41.440 --> 16:43.600
Was ist mit dem einen CPU-Core los hier?

16:46.320 --> 16:46.620
VM?

16:46.840 --> 16:47.520
VM, was ist?

16:48.560 --> 16:49.640
Krieg dich schon mal wieder ein?

16:49.800 --> 16:51.160
Das da oben ist meine CPU-Auslastung.

16:51.260 --> 16:53.560
Also 8 Cores und jeweilige CPU-Auslastungen.

16:53.760 --> 16:55.560
Was zum Teufel geht da im Hintergrund gerade ab?

16:57.480 --> 16:58.340
Ah, Jetbrains.

16:58.740 --> 16:59.680
Jetbrains macht's.

17:00.020 --> 17:01.100
Jetbrains-Java-Dinger.

17:05.910 --> 17:07.250
Mit Wim wäre es besser.

17:08.310 --> 17:08.470
Ne.

17:09.270 --> 17:10.510
Die CPU-Auslastung, ja.

17:10.510 --> 17:11.510
Aber die Möglichkeiten...

17:12.570 --> 17:14.830
Angenehme Sachen zu benutzen, eher nicht.

17:19.860 --> 17:25.560
Es sei denn, du fragst die Hardcore-Wim-Fraktion hier auf YouTube, die für alles Wim-Only macht.

17:28.610 --> 17:28.950
So.

17:30.150 --> 17:30.470
Also.

17:31.130 --> 17:33.290
Dann müssen wir noch unseren RTSP-Server starten.

17:35.910 --> 17:36.730
Den haben wir...

17:36.730 --> 17:37.470
Den hatte ich hier, glaube ich.

17:37.490 --> 17:38.430
Hatte ich ein neues Tab auf.

17:39.090 --> 17:39.530
EMP.

17:40.570 --> 17:42.310
Dann hatte ich da den RTSP-Server drin.

17:42.410 --> 17:43.390
Ja, RTSP.

17:44.590 --> 17:44.810
So.

17:45.290 --> 17:46.910
Da liegt hoffentlich auch das Video drin.

17:47.930 --> 17:48.910
RTSP-Server starten.

17:50.410 --> 17:51.710
FFM-Pack.

17:54.560 --> 17:55.120
Restream.

17:55.240 --> 17:56.020
Plup 2.

17:56.240 --> 17:58.640
Ne, das TS-File haben wir gestreamt, gell.

18:00.140 --> 18:02.860
Okay, und jetzt schauen wir mal, ob alles funktioniert.

18:03.660 --> 18:06.000
Local Host Port 80...

18:06.000 --> 18:07.600
Achso, ich muss die Anwendung ja noch starten.

18:08.580 --> 18:09.680
Äh, Tab...

18:09.680 --> 18:12.740
Das ist ein ganz schön langes Setup hier, bis es funktioniert.

18:13.400 --> 18:13.820
Okay.

18:14.940 --> 18:15.400
Run.

18:17.670 --> 18:19.730
Jetzt schauen wir mal, ob der Kram an sich noch funktioniert.

18:19.730 --> 18:21.290
Dann erzähle ich mal kurz was zu.

18:22.650 --> 18:23.450
Okay, Prager.

18:23.610 --> 18:25.650
Okay, es funktioniert.

18:25.850 --> 18:26.430
Nice, also.

18:27.050 --> 18:29.530
Wir streamen das Video in den Browser.

18:29.910 --> 18:30.390
Alles gut.

18:31.370 --> 18:31.830
Schon frei.

18:31.990 --> 18:32.070
Ja.

18:32.310 --> 18:34.490
Seit letzter Woche Freitag eigentlich die Arbeit vorbei.

18:35.130 --> 18:39.030
Aber ich hatte dann noch eine Woche als Wochenende Bereitschaft und jetzt noch zwei Tage Teambuilding.

18:39.210 --> 18:40.610
Also, so richtig...

18:41.270 --> 18:43.330
Hardcut, so Urlaub.

18:43.650 --> 18:44.370
Erst seit gestern.

18:45.090 --> 18:46.750
Ja, und seit morgen...

18:46.750 --> 18:48.690
So ist es.

18:49.190 --> 18:51.770
Und morgen muss ich da ein bisschen MMO-Kreisekund machen.

18:51.770 --> 18:53.550
Jetzt hat jemand gefragt vorhin.

18:53.610 --> 18:55.610
Welches MMO?

18:55.610 --> 18:57.610
Irgendwo?

18:57.610 --> 18:59.610
Hier.

18:59.610 --> 19:00.350
Hier.

19:00.350 --> 19:03.920
Der ältere Meier hat gefragt.

19:03.920 --> 19:04.920
Bist du noch da?

19:04.920 --> 19:06.920
Welches MMO kann ich dir sagen?

19:06.920 --> 19:08.920
Ich spiele ab morgen wieder...

19:08.920 --> 19:14.720
Dark... äh, Dark Inn.

19:14.720 --> 19:16.720
Dark Age of Camelot.

19:16.720 --> 19:20.220
Das Spiel ist älter, als viele von euch im Chat.

19:20.220 --> 19:22.220
Das kam 2001 raus.

19:22.220 --> 19:26.820
Vor 22 Jahren, Alter.

19:26.820 --> 19:28.820
Vor 22 Jahren, Alter.

19:28.820 --> 19:30.820
Und ich habe es zu EU-Release angefangen zu spielen.

19:30.820 --> 19:31.420
Und ich habe es zu EU-Release angefangen zu spielen.

19:31.420 --> 19:33.420
Und spiele es eigentlich durchgehend immer wieder.

19:33.420 --> 19:35.420
Bestes MMO ever.

19:35.420 --> 19:41.030
Ever.

19:41.030 --> 19:43.030
Nee, gab noch keine Diskussion über die Azubi...

19:43.030 --> 19:45.030
über die FISI-Abschlussprüfung.

19:45.030 --> 19:47.030
Oder Fachinformatik-Abschlussprüfung.

19:47.030 --> 19:49.030
Nee, nichts.

19:49.030 --> 19:51.030
Ich war auch hier nicht on.

19:51.030 --> 19:53.030
Seit dem...

19:53.030 --> 19:55.030
Seit Montag.

19:55.030 --> 19:57.030
Also gab es noch keine Diskussion drüber.

19:57.030 --> 19:59.030
War noch keine Möglichkeit drüber zu diskutieren.

19:59.030 --> 20:01.030
Und wie war die Abschlussprüfung?

20:01.030 --> 20:03.030
War die auch wieder unschaffbar, wie die letzte?

20:03.030 --> 20:18.570
Also, unser Video stoppt.

20:18.570 --> 20:20.570
So, kurze Sache.

20:20.570 --> 20:22.570
Ihr könnt euch gerne über die

20:22.570 --> 20:24.570
über die Fachinformatik-Abschlussprüfung auslassen.

20:24.570 --> 20:26.570
Da sage ich auch gleich was zu.

20:26.570 --> 20:28.570
Wenn ein paar Leute First-Hands-Experience

20:28.570 --> 20:30.570
da haben.

20:30.570 --> 20:32.570
Also, ich sage noch ganz kurz was zur Anwendung.

20:32.570 --> 20:34.570
Wir werden das heute verdockerisieren, dass ich das ordentlich

20:34.570 --> 20:36.570
testen kann, beziehungsweise ordentlich laufen lassen kann

20:36.570 --> 20:38.570
bei mir lokal.

20:38.570 --> 20:40.570
Ganz kurz, ganz simpel Übersicht,

20:40.570 --> 20:42.570
was es gibt.

20:42.570 --> 20:44.570
Wir haben eine Anwendung am Start mit etwas viel

20:44.570 --> 20:46.570
Debug-Output, wie es aussieht.

20:46.570 --> 20:48.570
Wir haben eine

20:48.570 --> 20:50.570
ASP.NET-Web-Anwendung

20:50.570 --> 20:52.570
für die

20:52.570 --> 20:54.570
ja, fürs Frontend,

20:54.570 --> 20:56.570
also als API-Endpunkte fürs Frontend.

20:56.570 --> 20:58.570
Dann haben wir eine Rust

20:58.570 --> 21:00.570
Low-Level-Web-RTC-Geschichte.

21:00.570 --> 21:02.570
Und wir haben ein bisschen

21:02.570 --> 21:04.570
JavaScript, HTML, CSS.

21:04.570 --> 21:06.570
Was passiert, ist folgendes.

21:06.570 --> 21:08.570
In diesem Video nur ganz kurz.

21:08.570 --> 21:10.570
Heute auch nur ganz kurz.

21:10.570 --> 21:12.570
Provider.

21:12.570 --> 21:14.570
Ich kann das nicht.

21:14.570 --> 21:16.570
Ich kann Provider so gut aussprechen,

21:16.570 --> 21:18.570
wie SemperVideo.

21:18.570 --> 21:20.570
Provider.

21:20.570 --> 21:22.570
Ich kann es nicht.

21:22.570 --> 21:26.650
Das ist einfach Original.

21:26.650 --> 21:31.240
Also, im Prinzip

21:31.240 --> 21:33.240
läuft es folgendermaßen.

21:33.240 --> 21:35.240
Kamerastream läuft hier.

21:35.240 --> 21:37.240
Der Kamerastream,

21:37.240 --> 21:39.240
gerade streamt er ein YouTube-Video

21:39.240 --> 21:41.240
von mir, okay?

21:41.240 --> 21:43.240
Kamerastream, RTSP-Server,

21:43.240 --> 21:45.240
FFmpeg pumpt da ein Video rein.

21:45.240 --> 21:47.240
Backend,

21:47.240 --> 21:49.240
äh, .NET-Backend geht per FFmpeg

21:49.240 --> 21:51.240
an den Stream dran.

21:51.240 --> 21:53.240
Und liest

21:53.240 --> 21:55.240
den Stream aus. Dann baut

21:55.240 --> 21:57.240
es mit dem Browser eine WebRTC-

21:57.240 --> 21:59.240
Verbindung auf, mit Hilfe der Low-Level

21:59.240 --> 22:01.240
WebRTC-Rust-Library.

22:01.240 --> 22:03.240
Und dann streamt es das Video

22:03.240 --> 22:05.240
in den Browser. Okay, so

22:05.240 --> 22:07.240
funktioniert es gerade.

22:07.240 --> 22:11.700
Das ist jetzt wirklich absolut High-Level-Overview.

22:11.700 --> 22:13.700
So, nachdem ich das später ja

22:13.700 --> 22:15.700
laufen lassen möchte,

22:15.700 --> 22:19.340
in einem Container,

22:19.340 --> 22:21.340
müssen wir das Ganze jetzt erst

22:21.340 --> 22:23.340
mal vercontainerisieren.

22:23.340 --> 22:25.340
Das heißt, wir brauchen jetzt

22:25.340 --> 22:27.340
weder Rust, noch .NET,

22:27.340 --> 22:29.340
noch JavaScript,

22:29.340 --> 22:31.340
noch sonst irgendwas in der Richtung.

22:31.340 --> 22:34.710
Deswegen stoppe ich die Anwendung

22:34.710 --> 22:36.710
mal wieder. Und wir müssen uns jetzt mal ein

22:36.710 --> 22:38.710
Docker-File aus den Fingern saugen,

22:38.710 --> 22:40.710
das Sinn ergibt.

22:40.710 --> 22:42.710
Ich glaube, dass das tatsächlich ein etwas

22:42.710 --> 22:44.710
komplizierteres Docker-File wird,

22:44.710 --> 22:46.710
weil...

22:46.710 --> 22:48.710
Alter...

22:48.710 --> 22:50.710
Monke ist...

22:50.710 --> 22:52.710
...

22:52.710 --> 22:54.710
Was ist denn jetzt los hier?

22:54.710 --> 22:56.710
Das hört sich ja fast schon

22:56.710 --> 22:58.710
hier...

22:58.710 --> 23:05.220
...mäßig an.

23:05.220 --> 23:07.220
Kommst du mit Rust inzwischen besser zurecht?

23:07.220 --> 23:09.220
Ja, mache ich.

23:09.220 --> 23:11.220
Man muss sagen, das ist zwar bestimmt

23:11.220 --> 23:13.220
immer noch nicht

23:13.220 --> 23:15.220
komplett, so wie das der Rust

23:15.220 --> 23:17.220
Expert

23:17.220 --> 23:19.220
designen würde, aber ich muss

23:19.220 --> 23:21.220
sagen, ich finde, das ist schon ganz brauchbar.

23:21.220 --> 23:23.220
Und du kannst es auch in dem Fall

23:23.220 --> 23:25.220
gar nicht so bauen, wie es der

23:25.220 --> 23:27.220
Rust Expert im

23:27.220 --> 23:29.220
Rust-only-Ökosystem machen würde,

23:29.220 --> 23:31.220
weil wir müssen das Ganze ja über eine C-Schnittstelle

23:31.220 --> 23:33.220
aufrufen von

23:33.220 --> 23:39.930
.NET aus. Also insofern...

23:39.930 --> 23:41.930
Es ist deutlich weniger

23:41.930 --> 23:43.930
Unwrap und sowas drin als am Anfang noch.

23:43.930 --> 23:45.930
Da geht jetzt zum Beispiel sowas

23:45.930 --> 23:47.930
drin wie if let some track

23:47.930 --> 23:49.930
bla sonst wie und...

23:49.930 --> 23:51.930
...

23:51.930 --> 23:53.930
...

23:53.930 --> 23:57.300
Guck mal, und hier...

23:57.300 --> 23:59.300
Das sieht wirklich schon

23:59.300 --> 24:01.300
ziemlich Rust-like

24:01.300 --> 24:03.300
gebaut aus, ja.

24:03.300 --> 24:05.300
Gut. Alright.

24:05.300 --> 24:07.300
Ich würde sagen, wir

24:07.300 --> 24:09.300
dockerisieren das mal.

24:09.300 --> 24:11.300
Also, warum ich glaube, dass das gar nicht

24:11.300 --> 24:13.300
so einfach wird, da ein

24:13.300 --> 24:15.300
reproduzierbares Dockerfile zu...

24:15.300 --> 24:17.300
...

24:17.300 --> 24:19.300
...

24:19.300 --> 24:21.300
Warum das gar nicht so einfach wird, ist,

24:21.300 --> 24:23.300
ich will ein kleines

24:23.300 --> 24:25.300
Image haben, und das, was ich

24:25.300 --> 24:27.300
hier brauche, ist nicht klein.

24:27.300 --> 24:29.300
Das heißt, es muss auf jeden Fall ein Multi

24:29.300 --> 24:31.300
Stage Build, heißt das glaube ich,

24:31.300 --> 24:33.300
werden, wo wir mehrere

24:33.300 --> 24:35.300
Docker-Container haben, wo dann nur

24:35.300 --> 24:37.300
mehrere Docker-Container

24:37.300 --> 24:39.300
beim Build-Prozess benutzen,

24:39.300 --> 24:41.300
um dann daraus

24:41.300 --> 24:43.300
ein möglichst kleines resultierendes

24:43.300 --> 24:45.300
Docker-Image zu bekommen, was wir starten

24:45.300 --> 24:54.630
können. Das heißt, wir machen jetzt erstmal

24:54.630 --> 24:58.780
Docker-Stells. Machst du bei

24:58.780 --> 25:00.780
Advent oft... Zeig mal, was gibt's denn da...

25:00.780 --> 25:02.780
Was gibt's denn da dieses

25:02.780 --> 25:04.780
Jahr... Muss ich das dann auch

25:04.780 --> 25:06.780
in Rust programmieren, Leute, wenn ich damit mache?

25:06.780 --> 25:12.260
Was gibt's denn diesmal für Aufgaben?

25:12.260 --> 25:15.770
Kalender.

25:15.770 --> 25:17.770
Eins.

25:17.770 --> 25:19.770
Oh, Kabel, ja.

25:19.770 --> 25:21.770
Erlang.

25:21.770 --> 25:28.280
Fortran.

25:28.280 --> 25:30.280
Okay, das muss ich

25:30.280 --> 25:33.720
mal in Ruhe durchlesen.

25:33.720 --> 25:35.720
Ich schreib mir das mal auf. Leute, ich schreib mir das mal auf.

25:35.720 --> 25:37.720
Vielleicht machen wir das...

25:37.720 --> 25:39.720
Vielleicht machen wir da echt mit.

25:39.720 --> 25:43.540
Ja. Warum nicht?

25:43.540 --> 25:49.160
Ist doch immer ganz nice.

25:49.160 --> 25:53.430
In was?

25:53.430 --> 25:55.430
Was ist Vlang?

25:55.430 --> 25:57.430
V-Programming.

25:57.430 --> 25:59.430
V-Programming-Language.

25:59.430 --> 26:01.430
Ich sag V.

26:01.430 --> 26:09.160
Die V-Programmiersprache.

26:09.160 --> 26:11.160
Das sieht ein bisschen aus

26:11.160 --> 26:13.160
wie Go, ehrlich gesagt.

26:13.160 --> 26:19.290
Das sieht...

26:19.290 --> 26:21.290
Das sieht Go doch...

26:21.290 --> 26:23.290
Also außer, dass es Fn ist und so, aber...

26:23.290 --> 26:25.290
Moment mal.

26:25.290 --> 26:27.290
Ist Go oder Rust Fn?

26:27.290 --> 26:29.290
Ich bin grad verwirrt.

26:29.290 --> 26:31.290
Rust ist Fn.

26:31.290 --> 26:33.290
Das sieht eine Mischung aus wie zwischen Go und Rust.

26:43.830 --> 26:45.830
Okay.

26:45.830 --> 26:54.200
Ah, ich weiß ja nicht.

26:54.200 --> 26:56.200
Ja, aber das ist jetzt ja nur wirklich kein

26:56.200 --> 26:58.200
Aushängeschild von der Sprache.

26:58.200 --> 27:00.200
Wie groß der Compiler und wie lange es dauert

27:00.200 --> 27:02.200
den Compiler zu bauen, oder?

27:02.200 --> 27:04.200
Ich mein GCC... Ich wollt grad sagen!

27:04.200 --> 27:06.200
Alter, GCC

27:06.200 --> 27:08.200
ist halt auch wieder so ein Ding. Das dauert auch 3 Stunden

27:08.200 --> 27:10.200
bis das fertig ist.

27:10.200 --> 27:12.200
Was aber nicht heißt, dass wenn ich GCC

27:12.200 --> 27:14.200
benutze, dass das schlecht sein muss dann.

27:14.200 --> 27:16.200
Wobei GCC checkt halt auch keiner mehr.

27:16.200 --> 27:23.350
Ist das so? Ich hab damit...

27:23.350 --> 27:25.350
Keine Ahnung. Ich kann dazu nicht

27:25.350 --> 27:28.920
sagen.

27:28.920 --> 27:30.920
Okay, wir bauen jetzt ein Docker-File. Auf geht's!

27:32.920 --> 27:34.920
Ich versuch mal ein bisschen was dabei zu erklären, okay?

27:34.920 --> 27:36.920
Chatgear, wer von euch

27:36.920 --> 27:38.920
hat

27:38.920 --> 27:40.920
viel Plan von Docker?

27:40.920 --> 27:42.920
Also ich krieg das hin. Ich will bloß mal so grob wissen.

27:42.920 --> 27:44.920
Also, machen wir's mal anders. Machen wir's mal anders, ja?

27:44.920 --> 27:46.920
Wer von euch würde

27:46.920 --> 27:48.920
sagen, er ist der krasse

27:48.920 --> 27:50.920
Docker-Container-Bau-Experte?

27:50.920 --> 27:52.920
Wobei man sagen muss, streiche Docker, streiche

27:52.920 --> 27:54.920
Docker, ersetzt es einfach durch Container.

27:54.920 --> 27:56.920
Ja? Weil mit Docker

27:56.920 --> 27:58.920
hat ja außer als CLI-Tool

27:58.920 --> 28:00.920
mit den eigentlichen Containern und das,

28:00.920 --> 28:02.920
wie das heute im, sagen wir mal so, im Enterprise-Umfeld

28:02.920 --> 28:04.920
läuft, eigentlich nur noch wenig zu tun.

28:04.920 --> 28:06.920
Ja? Also seid ihr die krasse

28:06.920 --> 28:08.920
Container-Bau-Profis?

28:08.920 --> 28:10.920
Oder seid, würdet ihr eher sagen,

28:10.920 --> 28:12.920
würdet ihr eher sagen, naja...

28:14.920 --> 28:16.920
Ich hab schon mal ein Docker-File erstellt, aber

28:16.920 --> 28:18.920
sonderlich kompliziert war das nicht.

28:18.920 --> 28:20.920
Also, war das nicht. Waren ein paar Zeilen und fertig ist.

28:20.920 --> 28:22.920
Okay. Also,

28:22.920 --> 28:24.920
denn wir müssen jetzt, ich versuch das mal zu erklären

28:24.920 --> 28:26.920
und dann hoffe ich, dass es

28:26.920 --> 28:28.920
funktioniert.

28:28.920 --> 28:30.920
Also, ich stell mir

28:30.920 --> 28:32.920
das folgendermaßen vor. Wir brauchen ja...

28:32.920 --> 28:34.920
Moment.

28:36.920 --> 28:38.920
Muss ich mal gucken. Also, Ziel ist,

28:38.920 --> 28:40.920
Ziel ist erstmal, ich weiß nämlich nicht, wie lange ich Zeit hab,

28:40.920 --> 28:42.920
vielleicht hab ich nur bis 15 Uhr oder 14.30 Uhr

28:42.920 --> 28:44.920
oder irgendwie so Zeit. Ziel ist erstmal, dass wir

28:44.920 --> 28:46.920
ein Docker-File bauen, was unsere Anwendung eben

28:46.920 --> 28:48.920
in ein Container-Image baut.

28:48.920 --> 28:50.920
Das, das bisschen

28:50.920 --> 28:52.920
unhandliche an dieser Anwendung ist,

28:52.920 --> 28:54.920
ihr seht, es gibt ein

28:54.920 --> 28:56.920
ein Low-Level-Part

28:56.920 --> 28:58.920
in Rust. Das mit Go könnt ihr euch

28:58.920 --> 29:00.920
wegdenken. Das mit Go

29:00.920 --> 29:02.920
gibt es nicht mehr. Also, das gibt es noch, aber

29:02.920 --> 29:04.920
das benutze ich, benutze ich aktuell nicht. Das ist einfach nur da,

29:04.920 --> 29:06.920
zum abgucken. Es gibt

29:06.920 --> 29:08.920
also, es gibt eigentlich

29:08.920 --> 29:10.920
mehrere Parts. Wir brauchen einmal

29:10.920 --> 29:12.920
den Low-Level-Rust-Part

29:12.920 --> 29:14.920
und wir brauchen den .NET

29:14.920 --> 29:16.920
Backend-Part. In Frontend

29:16.920 --> 29:18.920
ist noch nichts drinne. Das ist, das

29:18.920 --> 29:20.920
hab ich mir mal angelegt, falls ich ein bisschen mehr

29:20.920 --> 29:22.920
mache als eine HTML-Seite.

29:22.920 --> 29:24.920
Und in...

29:24.920 --> 29:28.680
Ja.

29:28.680 --> 29:30.680
Hier ist das Rust-Zeug drin.

29:30.680 --> 29:32.680
Und das Ding ist halt,

29:32.680 --> 29:35.990
ihr seht schon,

29:35.990 --> 29:37.990
die Dinger sind relativ groß. Also,

29:37.990 --> 29:39.990
Rust ist 2,2

29:39.990 --> 29:41.990
Gigabyte. Erinnert mich ein bisschen an Node-Modules.

29:41.990 --> 29:43.990
Die installieren ja auch

29:43.990 --> 29:45.990
immer Gott in die Welt. Nicht ganz so

29:45.990 --> 29:47.990
schlimm wie Node-Modules. Node-Modules

29:47.990 --> 29:49.990
wäre das Ding wahrscheinlich eher 15G

29:49.990 --> 29:51.990
groß. Aber Rust ist,

29:51.990 --> 29:53.990
haut auch schon mal richtig rein.

29:53.990 --> 29:55.990
So, dann haben wir unser .NET

29:55.990 --> 29:57.990
Backend und das war's.

29:57.990 --> 29:59.990
So, und wir können jetzt halt nicht einfach

29:59.990 --> 30:01.990
hergehen und ein Docker-Image bauen,

30:01.990 --> 30:03.990
die Anwendung drin bauen und das

30:03.990 --> 30:05.990
Docker-Image hochladen. Was heißt können wir nicht?

30:05.990 --> 30:07.990
Doch, das können wir schon, aber

30:07.990 --> 30:09.990
das machen wir jetzt auch, dass ihr seht, wo das

30:09.990 --> 30:11.990
Problem liegt. Das Docker-Image

30:11.990 --> 30:13.990
ist dann am Ende halt saumäßig groß.

30:13.990 --> 30:15.990
Weil der ganze Mist, den wir hier drinnen

30:15.990 --> 30:17.990
brauchen, um es zu bauen,

30:17.990 --> 30:19.990
dann im Docker-Image landet.

30:19.990 --> 30:21.990
Das will man ja eigentlich nicht. Du willst ja

30:21.990 --> 30:25.690
eigentlich nur den Output haben.

30:25.690 --> 30:27.690
Kann man für Rust kein Docker-Ignore mitgeben?

30:27.690 --> 30:29.690
Doch kannst du, aber du brauchst dieses ganze

30:29.690 --> 30:31.690
Zeug hier drinnen, wenn du die Rust-Anwendung

30:31.690 --> 30:33.690
baust. Also das heißt, du brauchst es dann auch

30:33.690 --> 30:35.690
in den Build-Container.

30:35.690 --> 30:39.510
Und wenn Build-Container gleich

30:39.510 --> 30:41.510
als Basis

30:41.510 --> 30:43.510
für das Image verwendet wird, sind die im

30:43.510 --> 30:45.510
Output-Image auch drinnen. Und dann hast du im Endeffekt

30:45.510 --> 30:47.510
dann Docker-Images, die

30:47.510 --> 30:49.510
3GB groß sind. Das ist natürlich

30:49.510 --> 30:51.510
Kacke. Das will man nicht haben.

30:51.510 --> 30:53.510
Deswegen wird es wahrscheinlich auf ein Multi-Stage

30:53.510 --> 30:55.510
Bild rauslaufen. Ich glaube, so heißt das.

30:55.510 --> 30:57.510
Dass wir erst einmal

30:57.510 --> 30:59.510
Rust bauen, dann

30:59.510 --> 31:01.510
.NET bauen, dann die Sachen rüberkommen,

31:01.510 --> 31:03.510
kopieren und am Ende dann

31:03.510 --> 31:05.510
einen möglichst kleinen

31:05.510 --> 31:09.340
Container bauen.

31:09.340 --> 31:11.340
Doch, doch, doch.

31:11.340 --> 31:13.340
Wir fangen jetzt erst

31:13.340 --> 31:15.340
mal an, wie alle anfangen mit

31:15.340 --> 31:17.340
Docker-Files. Und zwar

31:17.340 --> 31:19.340
wir schreiben das mal untereinander

31:19.340 --> 31:21.340
und da werdet ihr auch gleich sehen, wo das

31:21.340 --> 31:23.340
eigentliche Problem ist.

31:23.340 --> 31:25.340
Ich will ein Debian-Image

31:25.340 --> 31:27.340
nach Möglichkeit.

31:27.340 --> 31:33.080
Also wir fangen mal ganz unbedarft

31:33.080 --> 31:35.080
an. Wir nehmen ein Debian-Image, installieren

31:35.080 --> 31:37.080
uns alle Abhängigkeiten,

31:37.080 --> 31:39.080
kompilieren das und gucken mal, wie groß das Image ist.

31:39.080 --> 31:41.080
Ich persönlich denke, wir werden

31:41.080 --> 31:43.080
am Ende ein Multi-Stage-Bild haben,

31:43.080 --> 31:45.080
das offizielle Rust-Image

31:45.080 --> 31:47.080
für Rust zum Kompilieren verwenden,

31:47.080 --> 31:49.080
das offizielle

31:49.080 --> 31:51.080
ASP.NET-Image

31:51.080 --> 31:53.080
verwenden für das Output-Image und

31:53.080 --> 31:55.080
wahrscheinlich ein stinknormales Debian oder so,

31:55.080 --> 31:57.080
um die .NET-Sache zu

31:57.080 --> 31:59.080
bauen. Oder ne, Moment. Microsoft hat

31:59.080 --> 32:01.080
ja auch offizielle

32:01.080 --> 32:03.080
SDK-Images zum Bauen.

32:03.080 --> 32:05.080
Wir machen das erst mal von Hand und dann

32:05.080 --> 32:07.080
verbessern wir das nach und nach. Also

32:07.080 --> 32:09.080
from, jetzt habe ich keine Ahnung,

32:09.080 --> 32:11.080
Debian-Docker-Hub,

32:11.080 --> 32:17.340
wie da die Tags heißen.

32:17.340 --> 32:19.340
Bookworm. Bookworm klingt gut.

32:19.340 --> 32:24.890
Das ist einfach

32:24.890 --> 32:26.890
Debian-Bookworm, oder?

32:26.890 --> 32:28.890
Debian-Bookworm.

32:28.890 --> 32:32.970
Hau mich einfach gleich

32:32.970 --> 32:34.970
an Rust-Image. Doch, doch, doch.

32:34.970 --> 32:36.970
Wie gesagt, da wird es wahrscheinlich drauf rauslaufen.

32:36.970 --> 32:38.970
Da wird es

32:38.970 --> 32:40.970
wahrscheinlich drauf rauslaufen.

32:40.970 --> 32:42.970
Aber ich bin mir noch unschlüssig,

32:42.970 --> 32:44.970
wie wir das überhaupt bauen.

32:44.970 --> 32:46.970
Also, from Debian-Bookworm

32:46.970 --> 32:48.970
S-Bild oder sowas.

32:48.970 --> 33:00.790
Na, es juckt.

33:00.790 --> 33:02.790
So. Wir bauen

33:02.790 --> 33:04.790
jetzt erst mal ganz simpel

33:04.790 --> 33:06.790
so untereinander das, was wir brauchen,

33:06.790 --> 33:08.790
damit die Anwendung baut. Und dann machen wir es

33:08.790 --> 33:10.790
schön, dass es auch klein wird und dass es nur das

33:10.790 --> 33:12.790
baut, was es soll und rüberkopiert.

33:12.790 --> 33:14.790
Und dass man dann auch sieht, dass es

33:14.790 --> 33:16.790
durchaus Sinn macht, mal

33:16.790 --> 33:18.790
länger als zwei Minuten

33:18.790 --> 33:20.790
in seine Docker-Files zu stecken.

33:20.790 --> 33:22.790
Also. Ich würde

33:22.790 --> 33:24.790
sagen, wir benutzen aktuelles Debian-Image,

33:24.790 --> 33:26.790
weil Debian beste.

33:26.790 --> 33:28.790
Da haben wir sowas wie WorkDir. Kann man das eigentlich auch

33:28.790 --> 33:30.790
kleinschreiben? Ich glaube, man darf das kleinschreiben.

33:30.790 --> 33:32.790
Irgendwie habe ich mir das so angewöhnt, das

33:32.790 --> 33:36.620
immer groß zu schreiben.

33:36.620 --> 33:38.620
Das kann man aber, glaube ich, mittlerweile auch kleinschreiben.

33:38.620 --> 33:42.760
Ja, die schreiben es auch groß. Guck hier

33:42.760 --> 33:44.760
in ihren Examples.

33:46.760 --> 33:48.760
Also, wir fangen ohne Multistage-Bild an.

33:48.760 --> 33:50.760
Wir fangen ganz simpel mit einem

33:50.760 --> 33:54.780
Debian-Image an

33:54.780 --> 33:56.780
und lassen das mal da drinnen bauen. Also,

33:56.780 --> 33:58.780
WorkDir. Machen wir mal sowas wie Bild.

33:58.780 --> 34:02.090
WorkDir heißt,

34:02.090 --> 34:04.090
alle Sachen an Befehle, die jetzt hier

34:04.090 --> 34:06.090
kommen,

34:06.090 --> 34:08.090
kannst du ausführen, ohne dass du vorhin CD

34:08.090 --> 34:10.090
reinschreiben musst, ja?

34:10.090 --> 34:12.090
Also, wenn man jetzt zum Beispiel sowas hier macht,

34:12.090 --> 34:14.090
wie Copy oder sowas,

34:14.090 --> 34:16.090
von A nach B,

34:16.090 --> 34:18.090
dann bezieht sich das automatisch auf Bild.

34:20.090 --> 34:22.090
Was ganz... Achso! Und es sorgt

34:22.090 --> 34:24.090
dafür, dass das Verzeichnis, glaube ich, sogar angelegt wird.

34:24.090 --> 34:26.090
So, als erstes,

34:26.090 --> 34:28.090
weil es ein Debian-Image ist,

34:28.090 --> 34:30.090
run apt

34:30.090 --> 34:32.090
get update.

34:32.090 --> 34:34.090
Okay, also

34:34.090 --> 34:36.090
docker-build.

34:36.090 --> 34:44.460
So, es ist noch nicht

34:44.460 --> 34:46.460
viel passiert.

34:46.460 --> 34:48.460
Hat der jetzt wirklich geupdatet?

34:48.460 --> 34:50.460
Das erscheint mir...

34:50.460 --> 34:52.460
Erschien mir ein bisschen

34:52.460 --> 34:54.460
schnell. Okay,

34:54.460 --> 34:56.460
dann run apt get install.

34:56.460 --> 34:58.460
Was brauchen wir auf jeden Fall?

34:58.460 --> 35:00.460
Wir brauchen bestimmt curl wget.

35:00.460 --> 35:02.460
Curl und so Zeug.

35:02.460 --> 35:04.460
Wget bestimmt auch.

35:04.460 --> 35:07.770
Macht das jetzt was?

35:07.770 --> 35:12.230
Was? Ah!

35:12.230 --> 35:14.230
Y fehlt.

35:14.230 --> 35:16.230
Muss man machen, wenn man das in Scripts verwenden will.

35:16.230 --> 35:18.230
Ansonsten will er nämlich, dass man yes

35:18.230 --> 35:20.230
eintippt. Und man kann nicht yes eintippen,

35:20.230 --> 35:22.230
wenn es interaktiv in einem Script läuft.

35:22.230 --> 35:24.230
Okay, hat funktioniert.

35:24.230 --> 35:26.230
Übrigens, auch so ein Ding.

35:26.230 --> 35:28.230
Docker verwendet ja

35:28.230 --> 35:30.230
seit ein paar Versionen Buildkit.

35:30.230 --> 35:32.230
Also, vielleicht kennt ihr noch Docker-Builds von früher.

35:32.230 --> 35:34.230
Die waren...

35:34.230 --> 35:36.230
Ja...

35:36.230 --> 35:38.230
Sahen anders aus, auf jeden Fall.

35:38.230 --> 35:40.230
Mittlerweile verwenden die ja, glaube ich, Buildkit,

35:40.230 --> 35:42.230
weil es ja nicht verfügbar ist.

35:42.230 --> 35:44.230
Ich muss sagen, mir hat der Output früher besser gefallen,

35:44.230 --> 35:46.230
als der Buildkit-Output.

35:46.230 --> 35:51.980
Der Buildkit-Output sieht sehr fancy aus.

35:51.980 --> 35:53.980
Du hast recht.

35:53.980 --> 35:55.980
Das ist sinnvoll, falls irgendwelche

35:55.980 --> 35:57.980
Rückfragen bei apt kommen.

35:57.980 --> 35:59.980
Ja, das stimmt.

35:59.980 --> 36:01.980
Das schenken wir uns jetzt mal, weil ich wahrscheinlich

36:01.980 --> 36:03.980
eh das Debian-Image da nicht verwenden werde.

36:03.980 --> 36:05.980
Ich weiß gar nicht,

36:05.980 --> 36:07.980
ob man das zum alten Output

36:07.980 --> 36:09.980
wieder umformatieren kann.

36:09.980 --> 36:14.250
So.

36:14.250 --> 36:16.250
Ich gehe jetzt weiter.

36:16.250 --> 36:18.250
Wir installieren ein paar Sachen.

36:18.250 --> 36:20.250
Ich bin mir nicht sicher, was wir sonst noch so brauchen.

36:20.250 --> 36:22.250
So, jetzt...

36:22.250 --> 36:24.250
Ich würde sagen, wir bauen...

36:24.250 --> 36:26.250
Wir bilden erstmal Rust, okay?

36:26.250 --> 36:28.250
Wir bilden erstmal Rust.

36:28.250 --> 36:30.250
Damit man Rust bilden kann,

36:30.250 --> 36:32.250
im Container, also die

36:32.250 --> 36:34.250
Rust-App,

36:34.250 --> 36:36.250
muss ich quasi alles, was hier drin ist...

36:36.250 --> 36:38.250
Ne, Moment.

36:38.250 --> 36:40.250
Nicht alles, was hier rüber ist.

36:40.250 --> 36:42.250
Garantiert nicht alles, was hier rüber ist.

36:42.250 --> 36:44.250
Weil, dann kopiere ich auch 2 GB

36:44.250 --> 36:46.250
weiter rein. Das will ich ja garantiert nicht haben.

36:46.250 --> 36:48.250
Also,

36:48.250 --> 36:50.250
ich will eigentlich nur

36:50.250 --> 36:52.250
aus Web... Wie heißt das Ding?

36:52.250 --> 36:54.250
Mein Ordner.

36:54.250 --> 36:56.250
Aus WebRTCRust

36:56.250 --> 36:58.250
will ich eigentlich nur

36:58.250 --> 37:00.250
Source und die Cargo

37:00.250 --> 37:02.250
Files rüber kopieren.

37:02.250 --> 37:04.250
Cargo ist das NPM von Rust

37:04.250 --> 37:06.250
und in Source liegen halt, wer hätte es gedacht,

37:06.250 --> 37:08.250
die Source Files.

37:08.250 --> 37:10.250
Also, copy

37:10.250 --> 37:12.250
WebRTCRust

37:12.250 --> 37:19.910
Machen wir mal irgendwie sowas.

37:19.910 --> 37:21.910
Cargo, Sternchen,

37:21.910 --> 37:25.800
dahin, copy all, docker, ignore.

37:25.800 --> 37:27.800
Können wir auch machen, aber es sind nur 2 Sachen,

37:27.800 --> 37:29.800
die wir kopieren müssen. Es sollte wahrscheinlich so auch

37:29.800 --> 37:31.800
gehen. So, und dann Source

37:31.800 --> 37:33.800
kopieren wir rüber. Source.

37:33.800 --> 37:37.300
Ich glaube, das muss man so nennen,

37:37.300 --> 37:40.680
damit das funktioniert.

37:40.680 --> 37:42.680
Was macht es denn?

37:42.680 --> 37:44.680
S bezieht sich auf was?

37:44.680 --> 37:46.680
Weiß es Rastprogramm?

37:46.680 --> 37:48.680
Rust.

37:48.680 --> 37:56.470
Was das macht?

37:56.470 --> 37:58.470
Das

37:58.470 --> 38:00.470
sorgt dafür, wenn du ein Update

38:00.470 --> 38:02.470
machst und Rückfragen

38:02.470 --> 38:04.470
kommen in Debian,

38:04.470 --> 38:06.470
dass es die Rückfragen halt einfach

38:06.470 --> 38:08.470
mit der Default Antwort beantwortet.

38:08.470 --> 38:10.470
Anstatt

38:10.470 --> 38:12.470
dass du eine Abfrage kriegst.

38:12.470 --> 38:14.470
Weil du kannst ja in einem interaktiven

38:14.470 --> 38:16.470
Skript, im Docker-Bild,

38:16.470 --> 38:18.470
keine interaktive Abfrage machen an den User.

38:18.470 --> 38:20.470
Weil es gibt ja nichts

38:20.470 --> 38:22.470
zum Inputten.

38:22.470 --> 38:24.470
Also du hast zum Beispiel eine Sache.

38:24.470 --> 38:26.470
Stell dir vor, du hast von Hand

38:26.470 --> 38:28.470
deine ssh-Config rumeditiert.

38:28.470 --> 38:30.470
Du machst ein apt-get oder

38:30.470 --> 38:32.470
apt-upgrade, apt-was auch immer.

38:32.470 --> 38:34.470
Eines der Update-Commands.

38:34.470 --> 38:36.470
Und er sagt dir, hey User,

38:36.470 --> 38:38.470
du musst mir jetzt sagen,

38:38.470 --> 38:40.470
ob du die Default-Maintainer

38:40.470 --> 38:42.470
Version der ssh-Config installieren

38:42.470 --> 38:44.470
möchtest beim Package-Upgrade

38:44.470 --> 38:46.470
oder ob du deine Version behalten

38:46.470 --> 38:48.470
willst. So, ich glaube

38:48.470 --> 38:50.470
Default-Antwort ist deine Version

38:50.470 --> 38:52.470
behalten. Wenn du

38:52.470 --> 38:54.470
das ausschaltest,

38:54.470 --> 38:56.470
dann nimmt er immer die Default-Antwort und fragt

38:56.470 --> 38:58.470
dich nicht. Weil er kann dich ja in einem interaktiven Skript,

38:58.470 --> 39:01.780
was ohne dich läuft, nicht fragen.

39:01.780 --> 39:03.780
So, schauen wir mal, ob das jetzt funktioniert, was ich

39:03.780 --> 39:05.780
hier gemacht habe. Bild.

39:05.780 --> 39:07.780
Ja, scheint

39:07.780 --> 39:09.780
funktioniert. Ist das

39:09.780 --> 39:11.780
nicht durch den Parameter y

39:11.780 --> 39:13.780
nur halb? Das bezieht sich nur auf die

39:13.780 --> 39:15.780
Abfragen von apt, beziehungsweise von

39:15.780 --> 39:17.780
apt-get. Wenn irgendwelche

39:17.780 --> 39:19.780
Packages,

39:19.780 --> 39:21.780
die apt selbst upgradet,

39:21.780 --> 39:23.780
Abfragen haben, dann nicht.

39:23.780 --> 39:25.780
Das bezieht sich nur darauf, dass du nicht mehr

39:25.780 --> 39:27.780
yes bei apt eingeben musst.

39:27.780 --> 39:32.500
Okay, das hat funktioniert.

39:32.500 --> 39:34.500
Dann ist jetzt die große

39:34.500 --> 39:36.500
Preisfrage, Chatge.

39:36.500 --> 39:38.500
Wie kriegen wir

39:38.500 --> 39:40.500
Rust

39:40.500 --> 39:42.500
in unserem

39:42.500 --> 39:44.500
Debian-Image installiert? Ich würde sagen

39:44.500 --> 39:48.580
Rust up, installieren

39:48.580 --> 39:50.580
das damit. Perfekt, exzellent, das wollte

39:50.580 --> 39:52.580
ich haben. Gut, dass wir in weiser Voraussicht schon

39:52.580 --> 39:54.580
mal curl installiert haben.

39:54.580 --> 39:56.580
Was ist das? Run curl proto

39:56.580 --> 39:58.580
https tls v1.2

39:58.580 --> 40:00.580
ssf

40:00.580 --> 40:02.580
ex, genau das wollte ich haben.

40:02.580 --> 40:04.580
Das ist, genau so hätte ich es auch

40:04.580 --> 40:06.580
selbst geschrieben.

40:06.580 --> 40:08.580
So.

40:08.580 --> 40:11.900
Bild. Oh.

40:11.900 --> 40:13.900
Was jetzt?

40:13.900 --> 40:15.900
Unable to run interactively.

40:15.900 --> 40:17.900
Run with minus

40:17.900 --> 40:19.900
y to accept

40:19.900 --> 40:21.900
ach so.

40:21.900 --> 40:23.900
Ach so, ach so.

40:27.660 --> 40:29.660
Jetzt bin ich mir unschlüssig. So?

40:31.660 --> 40:38.300
Nee.

40:38.300 --> 40:40.300
Moment, ich weiß, wo ich mir das abgucken kann.

40:40.300 --> 40:42.300
Warte mal.

40:42.300 --> 40:47.590
Hier, hier, exzellent.

40:47.590 --> 40:49.590
Äh, minus y.

40:49.590 --> 40:58.600
Ja, das stimmt.

40:58.600 --> 41:00.600
DPKG ist ja eigentlich

41:00.600 --> 41:02.600
die Debian-Geschichte für Packages.

41:02.600 --> 41:04.600
Okay, Rust wird gedownloaded.

41:04.600 --> 41:06.600
Das brauchen wir wahrscheinlich nicht, wie gesagt.

41:06.600 --> 41:08.600
Ich denke, ich werde dann auf das offizielle Rust-Image

41:08.600 --> 41:10.600
wechseln, was glaube ich auch auf

41:10.600 --> 41:12.600
Debian basiert, wenn ich das richtig im Kopf habe,

41:12.600 --> 41:14.600
gell? Ich glaube, das offizielle Rust

41:14.600 --> 41:16.600
Docker-Image basiert auch auf

41:16.600 --> 41:20.620
Debian.

41:20.620 --> 41:22.620
Wie das die geilen Leute sagen.

41:22.620 --> 41:24.620
Ja, guckt hier.

41:24.620 --> 41:26.620
Booster.

41:26.620 --> 41:28.620
Gibt's Bookworm? Bullseye gibt's?

41:28.620 --> 41:30.620
Bookworm gibt's auch.

41:30.620 --> 41:32.620
Und Alpine haben sie auch am Start.

41:32.620 --> 41:34.620
Aber Alpine, scheiß drauf. Kein Bock.

41:34.620 --> 41:36.620
Geh weg.

41:36.620 --> 41:40.060
Müsste deine Variante mit minus

41:40.060 --> 41:42.060
minus minus y auch gehen? Keine Ahnung.

41:42.060 --> 41:44.060
Nachdem ich mir da unschlüssig war.

41:44.060 --> 41:46.060
Wir können es ja mal ausprobieren. Nachdem ich mir da unschlüssig

41:46.060 --> 41:48.060
war, habe ich es mal sein gelassen.

41:48.060 --> 41:50.060
Nee.

41:50.060 --> 41:52.060
Funktioniert

41:52.060 --> 41:54.060
nicht.

41:54.060 --> 41:56.060
Weil minus minus heißt ja eigentlich,

41:56.060 --> 41:58.060
es kommen keine Options mehr. Keine Ahnung.

41:58.060 --> 42:00.060
Ehrlich gesagt

42:00.060 --> 42:02.060
checke ich auch gar nicht, was das macht.

42:02.060 --> 42:04.060
Aber ich weiß, dass es funktioniert.

42:04.060 --> 42:06.060
Und deswegen...

42:06.060 --> 42:08.060
Ach so.

42:08.060 --> 42:10.060
Okay, Standard-In. Aber warum

42:10.060 --> 42:12.060
brauche ich Standard-In, wenn ich es doch schon reinpipe

42:12.060 --> 42:14.060
in Standard-In? Wie dem auch sei,

42:14.060 --> 42:16.060
keine Ahnung. Ist mir auch wurscht. Es funktioniert.

42:16.060 --> 42:23.850
Debian Alpine sehe ich

42:23.850 --> 42:25.850
tatsächlich auch so.

42:25.850 --> 42:27.850
Ich kann jetzt zumindest aus meiner Sicht erklären,

42:27.850 --> 42:29.850
warum ich der Meinung bin, dass Debian größer Alpine

42:29.850 --> 42:31.850
ist. Also, eines der riesen

42:31.850 --> 42:33.850
Vorteile von Alpine ist ja erstens,

42:33.850 --> 42:35.850
dass es minimalistisch ist.

42:35.850 --> 42:37.850
Minimalistische

42:37.850 --> 42:39.850
Containerdistribution finde ich aber gar nicht mal

42:39.850 --> 42:41.850
so relevant, weil

42:41.850 --> 42:43.850
wenn du richtig dein

42:43.850 --> 42:45.850
Docker-File baust,

42:45.850 --> 42:47.850
kopierst du ja nicht quasi dein Bild-Image

42:47.850 --> 42:49.850
in dein Target-Image rein,

42:49.850 --> 42:51.850
sondern nur das, was du gebaut hast in dein

42:51.850 --> 42:53.850
Target-Image rein. Das heißt also das Image,

42:53.850 --> 42:55.850
was du dann eigentlich startest. Das heißt, es ist

42:55.850 --> 42:57.850
eh gar nicht so wichtig,

42:57.850 --> 42:59.850
dass das ein besonders minimalistisches

42:59.850 --> 43:01.850
System ist, weil Debian ohne zusätzliche

43:01.850 --> 43:03.850
Sachen installiert ist auch relativ

43:03.850 --> 43:05.850
minimalistisch. Dann ist es vielleicht

43:05.850 --> 43:07.850
15 MB mehr

43:07.850 --> 43:09.850
als Alpine oder so, aber so what.

43:09.850 --> 43:11.850
Juckt ja nicht. Dazu kommt,

43:11.850 --> 43:13.850
dass Alpine regelmäßig mal Problemchen hat.

43:13.850 --> 43:15.850
Zum Beispiel mit DNS-Auflösung.

43:15.850 --> 43:17.850
Ich weiß nicht, ob das

43:17.850 --> 43:19.850
mittlerweile gefixt ist, aber

43:19.850 --> 43:21.850
Debian Alpine hat

43:21.850 --> 43:23.850
glaube ich mit DNS-Antworten größer

43:23.850 --> 43:25.850
... einem

43:25.850 --> 43:27.850
Kilobyte oder sowas Probleme.

43:27.850 --> 43:29.850
Alpine DNS

43:29.850 --> 43:33.350
Error. Ja,

43:33.350 --> 43:35.350
genau, hier.

43:35.350 --> 43:37.350
DNS-Resolution in Alpine.

43:37.350 --> 43:39.350
Ach ja, und das liegt daran,

43:39.350 --> 43:41.350
dass Alpine, um besonders

43:41.350 --> 43:43.350
minimalistisch zu sein,

43:43.350 --> 43:45.350
nicht die normale

43:45.350 --> 43:47.350
glibc verwendet,

43:47.350 --> 43:49.350
sondern musel

43:49.350 --> 43:51.350
libc. Das ist quasi

43:51.350 --> 43:53.350
eine alternative Implementierung

43:53.350 --> 43:55.350
der c-Standard-Library.

43:55.350 --> 43:57.350
Wobei man sagen muss, was

43:57.350 --> 43:59.350
in glibc drin ist, ist nicht unbedingt

43:59.350 --> 44:01.350
alles rein standard.

44:01.350 --> 44:03.350
Es ist eine

44:03.350 --> 44:05.350
Neuimplementierung.

44:05.350 --> 44:07.350
Und besonders minimalistisch

44:07.350 --> 44:09.350
und schön für

44:09.350 --> 44:11.350
Selfcontent-Anwendungen und sowas.

44:11.350 --> 44:13.350
Darauf basiert Alpine, aber

44:13.350 --> 44:15.350
die haben zum Beispiel Probleme aufgrund dessen

44:15.350 --> 44:17.350
mit größeren DNS-Antworten. Ich bin mir gar nicht

44:17.350 --> 44:19.350
sicher, ob hier drin steht, was das eigentliche

44:19.350 --> 44:21.350
Problem

44:21.350 --> 44:28.440
ist. Aber das Problem

44:28.440 --> 44:30.440
ist, wenn die DNS-Antworten zu groß sind,

44:30.440 --> 44:32.440
...

44:32.440 --> 44:34.440
... dann gibt es

44:34.440 --> 44:36.440
einen Error in Alpine.

44:36.440 --> 44:38.440
Zumindest war das mal ein größeres

44:38.440 --> 44:40.440
Problem vor einem halben Jahr oder so.

44:40.440 --> 44:43.880
Das habe ich mir gemerkt.

44:43.880 --> 44:45.880
Das kann durchaus sein, dass es gefixt ist.

44:45.880 --> 44:47.880
Jaja. Das kann durchaus sein,

44:47.880 --> 44:49.880
dass es gefixt ist.

44:49.880 --> 44:51.880
Ich gehe auch mal stark von aus, dass es

44:51.880 --> 44:53.880
gefixt ist. Aber Alpine hat öfters mal kleine Probleme.

44:53.880 --> 44:57.450
Das Debian-Image ist größer,

44:57.450 --> 44:59.450
das stimmt. Aber so ein riesen

44:59.450 --> 45:01.450
Unterschied ist es am Ende nicht.

45:01.450 --> 45:08.220
Und ich finde Debian einfach angenehmer.

45:08.220 --> 45:10.220
Cargo-Chef.

45:10.220 --> 45:12.220
Was es nicht alles gibt.

45:12.220 --> 45:23.880
Cargo-Chef.

45:23.880 --> 45:25.880
Das ist der Grund, warum ich Debian

45:25.880 --> 45:27.880
gerne verwende als Base-Image.

45:27.880 --> 45:29.880
Wie gesagt, ich glaube auch gar nicht, dass wir hierbei

45:29.880 --> 45:31.880
bleiben werden, sondern das Rust-Base-Image

45:31.880 --> 45:33.880
verwenden. Okay.

45:33.880 --> 45:35.880
Jetgear, auf geht's. Docker-Build

45:35.880 --> 45:37.880
am Start. Und jetzt

45:37.880 --> 45:39.880
müssen wir Rust

45:39.880 --> 45:41.880
bilden. Also,

45:41.880 --> 45:43.880
wir brauchen jetzt sowas wie

45:43.880 --> 45:45.880
Cargo-Build-Release.

45:45.880 --> 45:47.880
Wir testen erstmal, ob das so

45:47.880 --> 45:49.880
funktioniert.

45:49.880 --> 45:51.880
Also, run, cd,

45:51.880 --> 45:55.640
achso, Moment.

45:55.640 --> 45:57.640
Was muss man machen,

45:57.640 --> 45:59.640
nachdem man Rust abinstalliert hat?

45:59.640 --> 46:01.640
Werden wir jetzt gleich sehen.

46:01.640 --> 46:03.640
cd webrtc rusts

46:03.640 --> 46:05.640
und da drinnen machen wir jetzt

46:05.640 --> 46:07.640
Cargo-Build-Release. Vermutlich wird das nicht

46:07.640 --> 46:09.640
funktionieren.

46:09.640 --> 46:11.640
Bam, wer hätte das gedacht?

46:11.640 --> 46:13.640
Can't cd to webrtc

46:13.640 --> 46:15.640
rusts.

46:15.640 --> 46:17.640
Warum nicht? Was ist das Problem?

46:17.640 --> 46:19.640
Ah, ich kack noob.

46:19.640 --> 46:21.640
Ich muss gar nicht cd'en. Ich habe doch alles hier

46:21.640 --> 46:30.070
richtig hin kopiert. Lul.

46:30.070 --> 46:32.070
Ich nehme wahrscheinlich

46:32.070 --> 46:34.070
einfach die

46:34.070 --> 46:36.070
offiziellen Microsoft ASP

46:36.070 --> 46:40.790
.NET Core-Images.

46:40.790 --> 46:42.790
So, Build.

46:42.790 --> 46:44.790
Geht nicht, weil Cargo

46:44.790 --> 46:46.790
not found. Ja, wunderbar.

46:46.790 --> 46:48.790
Ähm, Alter,

46:48.790 --> 46:50.790
wo liegt denn bitteschön Cargo,

46:50.790 --> 46:52.790
nachdem man Rust abinstalliert

46:52.790 --> 46:54.790
hat?

46:54.790 --> 46:56.790
Okay, wir

46:56.790 --> 46:58.790
...

46:58.790 --> 47:03.450
Moment.

47:03.450 --> 47:05.450
Wir gucken mal nach, Leute.

47:05.450 --> 47:07.450
Wir gucken mal nach.

47:07.450 --> 47:09.450
Wir machen uns mal einfach.

47:09.450 --> 47:11.450
Wir taggen das Build schon mal gleich.

47:11.450 --> 47:13.450
Und zwar als CamChamp

47:13.450 --> 47:15.450
Version 0.1.

47:15.450 --> 47:17.450
So, jetzt können wir sagen, docker run

47:17.450 --> 47:19.450
...

47:19.450 --> 47:21.450
Naja, "-rm".

47:21.450 --> 47:23.450
Ist es "-it", oder ist es

47:23.450 --> 47:25.450
...

47:25.450 --> 47:27.450
Es gibt so ein paar Sachen, die mache ich prinzipiell

47:27.450 --> 47:29.450
immer falsch.

47:29.450 --> 47:31.450
So, CamChamp.

47:31.450 --> 47:33.450
Bash.

47:33.450 --> 47:35.450
Hat's funktioniert?

47:35.450 --> 47:37.450
Okay, hat funktioniert.

47:37.450 --> 47:39.450
So, ähm, was wollte ich jetzt

47:39.450 --> 47:41.450
gucken, wo Cargo liegt, gell?

47:41.450 --> 47:43.450
Also, wir sind jetzt, nur mal zur

47:43.450 --> 47:45.450
Erklärung, falls man das so schnell

47:45.450 --> 47:47.450
nicht mitgekommen ist. Ich zeig das noch mal.

47:47.450 --> 47:49.450
Also, ich habe das Container-Image

47:49.450 --> 47:51.450
gebaut. Und da kommt ja so eine

47:51.450 --> 47:53.450
ID raus, oder

47:53.450 --> 47:55.450
man gibt dem Container-Image einen Namen.

47:55.450 --> 47:57.450
Einen Tag.

47:57.450 --> 47:59.450
Und ich habe das, ich habe das

47:59.450 --> 48:01.450
Image gebaut, ich habe das Image getaggt,

48:01.450 --> 48:03.450
mit dem Name. Und jetzt kann ich

48:03.450 --> 48:05.450
das Image starten.

48:05.450 --> 48:07.450
So, und "-rm",

48:07.450 --> 48:09.450
heißt, nachdem ich das Image gestartet habe

48:09.450 --> 48:11.450
und quasi es wieder gestoppt wird,

48:11.450 --> 48:13.450
soll es auch gleich gelöscht werden.

48:13.450 --> 48:15.450
"-i", ist Interactive

48:15.450 --> 48:17.450
und "-t", ist

48:17.450 --> 48:19.450
Konsolen-Allocation oder

48:19.450 --> 48:21.450
irgendwie sowas. Das ist

48:21.450 --> 48:23.450
der Tag vom eben gebauten Image und das ist

48:23.450 --> 48:25.450
das Programm, was er da drinnen starten soll.

48:25.450 --> 48:27.450
Also im Prinzip startet er eine Shell,

48:27.450 --> 48:29.450
im Container-Image.

48:29.450 --> 48:31.450
Das heißt, wir können jetzt nachgucken,

48:31.450 --> 48:33.450
wo RustUp den Kram

48:33.450 --> 48:37.020
installiert hat.

48:37.020 --> 48:39.020
Keine Ahnung. Guck mal, es gibt da auch ein

48:39.020 --> 48:41.020
Cargo. Cargo? Bin?

48:41.020 --> 48:43.020
Cargo.

48:43.020 --> 48:45.020
Okay, vielleicht, soll ich das vielleicht direkt angeben?

48:45.020 --> 48:52.230
Soll ich das vielleicht...

48:52.230 --> 48:54.230
Wo ist eigentlich meine...

48:54.230 --> 48:56.230
Wo ist eigentlich meine Cargo-

48:56.230 --> 48:58.230
Tommel und sowas? Irgendwie...

48:58.230 --> 49:00.230
Irgendwie ist die weg.

49:00.230 --> 49:02.230
Badabumdingsbumsdansch

49:02.230 --> 49:04.230
Wo ist denn die hin?

49:04.230 --> 49:06.230
Die habe ich doch immer kopiert, die müsste doch eigentlich auch da sein.

49:06.230 --> 49:10.630
Na, war es das nicht?

49:10.630 --> 49:14.780
So, Build, Cargo,

49:14.780 --> 49:16.780
Cargo, ne, Bin,

49:16.780 --> 49:18.780
Cargo,

49:18.780 --> 49:20.780
ja, äh,

49:20.780 --> 49:22.780
Build.

49:22.780 --> 49:24.780
No Cargo

49:24.780 --> 49:26.780
Tommel found. Ja, ja, ist okay.

49:26.780 --> 49:28.780
Ist gut, ist gut. Also

49:28.780 --> 49:30.780
nochmal bauen. Run

49:30.780 --> 49:32.780
und zwar Run Cargo

49:32.780 --> 49:34.780
Build Release

49:34.780 --> 49:36.780
und wo ist das Problem?

49:36.780 --> 49:38.780
Sorry for Bash. Pog

49:38.780 --> 49:40.780
Subscription. Wo ist das Problem,

49:40.780 --> 49:42.780
dass er meine Tommel-Config

49:42.780 --> 49:44.780
nicht rüberkopiert? Da ist sie doch.

49:44.780 --> 49:48.660
Hier, guck, da ist noch Bestande.

49:48.660 --> 49:50.660
Ach, guck mal, das ist klein geschrieben.

49:50.660 --> 49:52.660
Muss das groß geschrieben sein vielleicht?

49:52.660 --> 49:54.660
So. Übrigens, jetzt

49:54.660 --> 49:56.660
sieht man eine Sache,

49:56.660 --> 49:58.660
worauf man unbedingt achten muss beim Docker,

49:58.660 --> 50:00.660
beim Docker-Image erstellen.

50:00.660 --> 50:02.660
Was wird jetzt passieren, Leute,

50:02.660 --> 50:04.660
wenn ich das nochmal bilden lasse?

50:04.660 --> 50:06.660
Also, ich zeige euch das mal.

50:06.660 --> 50:08.660
So, ja.

50:08.660 --> 50:10.660
Docker Run, äh, nicht Docker Run, Build.

50:10.660 --> 50:12.660
Ihr seht, zack, bumm,

50:12.660 --> 50:14.660
geht relativ schnell. Und jetzt passt

50:14.660 --> 50:16.660
mal auf. Wenn ich jetzt,

50:16.660 --> 50:18.660
was wird, was wird jetzt passieren,

50:18.660 --> 50:20.660
wenn ich das hier ändere

50:20.660 --> 50:22.660
an der Stelle? Genau, Rebuild ab dem

50:22.660 --> 50:24.660
Step. Der wird alles hier unten drunter neu

50:24.660 --> 50:26.660
ausführen, also inklusive Download von Rust.

50:26.660 --> 50:28.660
Das heißt, man sollte sich wirklich gut

50:28.660 --> 50:30.660
überlegen, wie man seine

50:30.660 --> 50:32.660
einzelnen Steps im Docker-File

50:32.660 --> 50:34.660
definiert. Das heißt, es wäre

50:34.660 --> 50:36.660
deutlich sinnvoller, die

50:36.660 --> 50:38.660
Installation hier zu machen

50:38.660 --> 50:40.660
und das Kopieren

50:40.660 --> 50:42.660
und das Installieren danach.

50:42.660 --> 50:44.660
Weil das hier wird sich

50:44.660 --> 50:46.660
öfters ändern. Download

50:46.660 --> 50:48.660
von der Rust-Runtime

50:48.660 --> 50:50.660
muss wahrscheinlich nicht öfters

50:50.660 --> 50:56.020
passieren. Build.

50:56.020 --> 50:58.020
Hey!

50:58.020 --> 51:00.020
Ach, nee.

51:00.020 --> 51:02.020
Ich dachte, es kompletiert schon. Es lädt gerade Rust

51:02.020 --> 51:06.420
runter. Rust.

51:06.420 --> 51:19.460
Du, du, du, du, du, du,

51:19.460 --> 51:21.460
du, du, du, du, du.

51:21.460 --> 51:23.460
Au, au, au.

51:23.460 --> 51:37.660
Ich weiß,

51:37.660 --> 51:39.660
woran es liegt. Das ist Debian.

51:39.660 --> 51:41.660
Dem fehlen seine ganzen

51:41.660 --> 51:43.660
Package...

51:43.660 --> 51:45.660
Devil Library

51:45.660 --> 51:47.660
Geschichten.

51:47.660 --> 51:49.660
Und jetzt kommt wieder ein Problem,

51:49.660 --> 51:51.660
was ich habe, was ich mir bei Debian seit

51:51.660 --> 51:53.660
Jahren nicht merken kann.

51:53.660 --> 51:55.660
Wie heißt dieses Package?

51:55.660 --> 51:57.660
Heißt es Build Essentials

51:57.660 --> 51:59.660
oder heißt es Build Essentials?

51:59.660 --> 52:01.660
Upt Install

52:01.660 --> 52:03.660
Build Essentials

52:03.660 --> 52:05.660
Essentials

52:05.660 --> 52:07.660
Es heißt Build Essentials.

52:07.660 --> 52:09.660
Nein, es heißt Build Essentials.

52:09.660 --> 52:11.660
Ich bring das

52:11.660 --> 52:13.660
ohne Scheiß jedes Mal, ich schreib das

52:13.660 --> 52:15.660
jedes Mal falsch. Jedes Mal.

52:15.660 --> 52:17.660
Glücklicherweise hat man Auto Complete und meistens ist es

52:17.660 --> 52:19.660
kein Problem.

52:19.660 --> 52:21.660
Build Essentials. So, und jetzt seht ihr,

52:21.660 --> 52:23.660
was auch doof ist?

52:23.660 --> 52:25.660
Ich passe diesen Step hier oben an

52:25.660 --> 52:27.660
und jetzt wird alles nochmal neu ausgeführt.

52:27.660 --> 52:29.660
Das heißt, man sollte schon

52:29.660 --> 52:31.660
seine Docker Steps

52:31.660 --> 52:33.660
carefull

52:33.660 --> 52:35.660
wählen, dass das nicht

52:35.660 --> 52:37.660
ausartet in

52:37.660 --> 52:39.660
500 neuen Installs und so.

52:39.660 --> 52:43.670
Ah ja, und jedes Image ist

52:43.670 --> 52:45.670
lokal bei mir in der Registry noch drinnen.

52:45.670 --> 52:47.670
Und ich müsste jetzt erstmal

52:47.670 --> 52:49.670
Docker cleanen. Ihr werdet sehen,

52:49.670 --> 52:51.670
guck mal, wir haben angefangen bei 100...

52:51.670 --> 52:53.670
Wie viel haben wir? Warte mal, Chat ist doch ganz einfach

52:53.670 --> 52:55.670
rauszufinden, bei wie viel

52:55.670 --> 52:57.670
Plattenplatz wir angefangen haben.

52:57.670 --> 52:59.670
Also wir werden jetzt einige Gigabyte

52:59.670 --> 53:01.670
verschwinden.

53:01.670 --> 53:05.240
Wir haben angefangen bei

53:05.240 --> 53:09.060
100, guck mal,

53:09.060 --> 53:11.060
3 Gig haben wir schon

53:11.060 --> 53:14.630
verbraucht. Oh, guck mal,

53:14.630 --> 53:18.070
es funzt.

53:18.070 --> 53:20.070
Rust Compiled.

53:20.070 --> 53:31.190
Oh, Alter, Rust Compiled, aber echt

53:31.190 --> 53:43.460
lange. Rust

53:43.460 --> 53:45.460
Placingly Fast.

53:45.460 --> 53:49.740
Gut, ich mein,

53:49.740 --> 53:51.740
es dauert halt 20 Milliarden Dependencies

53:51.740 --> 53:53.740
zu... Boah, Alter, guckt euch

53:53.740 --> 53:55.740
die CPU-Auslastung an, Mann.

53:55.740 --> 53:57.740
Meine

53:57.740 --> 53:59.740
VM ist einfach komplett...

53:59.740 --> 54:01.740
Alter!

54:01.740 --> 54:03.740
Fuck!

54:03.740 --> 54:05.740
Okay,

54:05.740 --> 54:07.740
er ist fertig, alles klar. Die VM ist einfach

54:07.740 --> 54:09.740
komplett ausgesetzt. Aber ist ja gut, ist ja gut.

54:09.740 --> 54:11.740
Unbenutzte CPU-Cores sind

54:11.740 --> 54:13.740
wasted CPU-Cores, ja?

54:13.740 --> 54:15.740
Okay, es hat

54:15.740 --> 54:17.740
funktioniert, nice. So, wenn ich

54:17.740 --> 54:19.740
jetzt nochmal bilde, geht's natürlich deutlich

54:19.740 --> 54:21.740
schneller, alles klar. So, wenn das

54:21.740 --> 54:23.740
jetzt funktioniert hat, nicht exec,

54:23.740 --> 54:25.740
run, wenn das jetzt funktioniert hat,

54:25.740 --> 54:27.740
haben wir hier eine

54:27.740 --> 54:29.740
Target

54:29.740 --> 54:31.740
Release

54:31.740 --> 54:33.740
haben wir die Library drinnen liegen, okay.

54:33.740 --> 54:35.740
Excellent, hat funktioniert, nice.

54:35.740 --> 54:37.740
Alles gut.

54:37.740 --> 54:39.740
So, Dockerfile.

54:39.740 --> 54:41.740
Übrigens auch ein weiteres Problem,

54:41.740 --> 54:43.740
wo jetzt Multistage-Builds schon sehr

54:43.740 --> 54:45.740
sinnvoll wären, weil

54:45.740 --> 54:47.740
wenn ich jetzt

54:47.740 --> 54:49.740
was an meinem Rust-Source-Code ändere,

54:49.740 --> 54:51.740
macht er dir alle folgenden, ab hier,

54:51.740 --> 54:53.740
alle folgenden Steps

54:53.740 --> 54:55.740
neu. Das heißt, als nächstes kommt hier unser

54:55.740 --> 54:57.740
.NET-Build und da wird dann auch

54:57.740 --> 54:59.740
jedes Mal neu ausgeführt, also

54:59.740 --> 55:01.740
das wird auf jeden Fall auf

55:01.740 --> 55:03.740
Multistage-Builds rauslaufen,

55:03.740 --> 55:05.740
dass das ordentlich funktioniert.

55:05.740 --> 55:07.740
Okay, aber ich will's

55:07.740 --> 55:09.740
einmal zum Laufen bekommen, bevor wir's komplizierter

55:09.740 --> 55:11.740
machen. Also, wir haben jetzt

55:11.740 --> 55:13.740
hier Cargo, Cargo-Build, okay, das ist

55:13.740 --> 55:15.740
richtig, alles klar.

55:15.740 --> 55:17.740
Wie war das übrigens nochmal? Docker prune?

55:17.740 --> 55:19.740
Ne, Docker oder Docker prune?

55:19.740 --> 55:23.050
Es gab doch so ein

55:23.050 --> 55:25.050
System prune.

55:25.050 --> 55:27.050
Docker System

55:27.050 --> 55:29.050
prune minus a, genau.

55:29.050 --> 55:31.050
So, guck doch mal. Jetzt haben wir 106,

55:31.050 --> 55:33.050
106 Gig.

55:33.050 --> 55:35.050
Ich sag Docker mal, alle,

55:35.050 --> 55:40.410
bevor ich jetzt irgendwie, ja,

55:40.410 --> 55:42.410
ich glaube Ubuntu und

55:42.410 --> 55:44.410
Hello World und Traffic brauchen wir nicht mehr,

55:44.410 --> 55:46.410
sieben Monate ago.

55:46.410 --> 55:48.410
Jetzt sagen wir mal, Docker

55:48.410 --> 55:50.410
löscht einfach mal alles.

55:50.410 --> 55:52.410
Oh fuck, jetzt muss ich den

55:52.410 --> 56:00.580
Camp-Champ neu bauen. Egal, egal.

56:00.580 --> 56:02.580
20, Leute,

56:02.580 --> 56:04.580
20 Gig, einfach mal

56:04.580 --> 56:12.060
weg. Ja, ja, ja,

56:12.060 --> 56:14.060
hast du recht. Das geht jetzt aber nicht richtig,

56:14.060 --> 56:16.060
wobei, naja, es würde doch, doch,

56:16.060 --> 56:18.060
doch, es würde schon funktionieren,

56:18.060 --> 56:20.060
ich könnte jetzt, ich könnte hier oben schon

56:20.060 --> 56:22.060
die .NET Runtime installieren und sonst was,

56:22.060 --> 56:24.060
aber das dumme ist halt, wenn man

56:24.060 --> 56:26.060
sag mal so logisch gruppieren will,

56:26.060 --> 56:28.060
so nach dem Motto, wir bauen erst Rust

56:28.060 --> 56:30.060
und dann bauen wir .NET,

56:30.060 --> 56:32.060
dann würde ich ab diesem

56:32.060 --> 56:34.060
Step hier, sobald sich mein Rust-Source-Code

56:34.060 --> 56:36.060
ändert, halt immer das, das ganze

56:36.060 --> 56:38.060
.NET Zeug neu bauen. Deswegen, das

56:38.060 --> 56:40.060
schreit eigentlich nach Multi-Stage-Build.

56:40.060 --> 56:42.060
So, jetzt brauchen wir .NET

56:42.060 --> 56:44.060
als nächstes.

56:44.060 --> 56:49.860
Gig, hört sich

56:49.860 --> 56:51.860
Boomer an. Echt, warum?

56:51.860 --> 56:53.860
Was, was, was sagen die coolen Nichts,

56:53.860 --> 56:55.860
was sagen die coolen Nichts-Boomer

56:55.860 --> 56:59.240
zu Gigabyte?

56:59.240 --> 57:03.320
GB? Wobei es ja

57:03.320 --> 57:05.320
eigentlich Gibi, Gibi, ne,

57:05.320 --> 57:07.320
Moment, Gibi oder Gibi

57:07.320 --> 57:09.320
heißen müsste?

57:09.320 --> 57:13.590
Gibi, gell?

57:13.590 --> 57:15.590
Gibi? Aber es ist Meebi und nicht Meebi.

57:17.590 --> 57:19.590
Niemand

57:19.590 --> 57:21.590
Leute, ohne Scheiß, ich

57:21.590 --> 57:23.590
kenne niemand, der diese Einheiten

57:23.590 --> 57:25.590
verwendet, in der Aussprache, ja?

57:25.590 --> 57:27.590
Vielleicht zum Rechnen und so, aber in der Aussprache

57:27.590 --> 57:33.460
niemand, niemand.

57:33.460 --> 57:35.460
Okay, weiter, jetzt brauchen wir, jetzt brauchen wir

57:35.460 --> 57:39.930
unser .NET Zeug.

57:39.930 --> 57:41.930
Gibt es offizielle Node.js-elt, äh,

57:41.930 --> 57:43.930
Node.js-elt Images?

57:43.930 --> 57:45.930
Node.js Chiseled Images?

57:45.930 --> 57:47.930
Es gibt auf

57:47.930 --> 57:49.930
jeden Fall offizielle Node Images, relativ

57:49.930 --> 57:51.930
sicher. Nachdem ich wenig Node-Anwendungen

57:51.930 --> 57:53.930
baue, weiß ich es nicht, aber es würde mich enorm

57:53.930 --> 58:00.380
wundern, wenn es die nicht gäbe.

58:00.380 --> 58:02.380
So, also, ich sehe schon, wir müssen trotzdem

58:02.380 --> 58:04.380
die Sachen in unterschiedlichen Verzeichnissen

58:04.380 --> 58:06.380
machen, weil ich kann ja schlecht

58:06.380 --> 58:08.380
im gleichen Bildverzeichnis, äh,

58:08.380 --> 58:10.380
.NET und Rust

58:10.380 --> 58:12.380
bilden, wobei,

58:12.380 --> 58:14.380
warum eigentlich nicht? Die kommen sich ja

58:14.380 --> 58:16.380
nicht richtig, nicht wirklich in die Quere, oder?

58:16.380 --> 58:20.260
Wobei, das durchaus, das ist,

58:20.260 --> 58:22.260
das könnte durchaus ein bisschen verwirrend werden,

58:22.260 --> 58:24.260
für den einen oder anderen Compiler, wenn

58:24.260 --> 58:26.260
es mehrere, okay, schauen wir mal.

58:26.260 --> 58:28.260
Also, als erstes müssen wir jetzt

58:28.260 --> 58:30.260
.NET installieren. .NET lässt

58:30.260 --> 58:32.260
sich relativ easy installieren, nämlich so,

58:32.260 --> 58:37.180
.NET 8.

58:37.180 --> 58:39.180
Ich schreibe jetzt mal was rein, bevor jetzt gleich,

58:39.180 --> 58:41.180
jetzt hatten wir nämlich schon öfters im Chat, dass ich

58:41.180 --> 58:43.180
10 Minuten vorher was erzählt habe,

58:43.180 --> 58:45.180
und dann kam jemand rein,

58:45.180 --> 58:47.180
beiß, danke schon für den Sub, Dennis, danke,

58:47.180 --> 58:49.180
subscription, Leute. Ich schreibe das jetzt oben

58:49.180 --> 58:51.180
als Kommentar rein, weil

58:51.180 --> 58:53.180
viele im Chat lacken critical

58:53.180 --> 58:55.180
information, wenn sie in den Stream reinkommen.

58:55.180 --> 58:57.180
Und ich weiß nicht mehr, was es für ein Thema

58:57.180 --> 58:59.180
war. Ich habe letztens, glaube ich,

58:59.180 --> 59:01.180
20 Minuten lang,

59:01.180 --> 59:03.180
fünfmal das gleiche erklärt, und dann

59:03.180 --> 59:05.180
kamen immer Leute ins Stream und sagen,

59:05.180 --> 59:07.180
Max, aber so macht man das doch gar nicht, macht

59:07.180 --> 59:09.180
es doch so und so. Ja, ich

59:09.180 --> 59:11.180
weiß, deswegen machen wir es erstmal einfach,

59:11.180 --> 59:13.180
und dann machen wir es ein bisschen komplizierter, aber richtig,

59:13.180 --> 59:15.180
fünf Minuten später kam wieder einer rein,

59:15.180 --> 59:17.180
Max, aber das macht man doch gar nicht so, macht es

59:17.180 --> 59:19.180
doch mal anders. Wir schreiben das da rein,

59:19.180 --> 59:21.180
deswegen schreibe ich das jetzt mal da oben rein,

59:21.180 --> 59:23.180
am Ende machen wir

59:23.180 --> 59:25.180
Multistage, heißt das Multistage

59:25.180 --> 59:28.620
oder Multistage Build?

59:28.620 --> 59:30.620
Soccer Multi, ups.

59:30.620 --> 59:32.620
Soccer Multistage

59:32.620 --> 59:36.440
Build.

59:36.440 --> 59:38.440
Das ist alles

59:38.440 --> 59:40.440
an die

59:40.440 --> 59:42.440
Five Hat Community

59:42.440 --> 59:45.750
dass das nicht wieder so ist

59:45.750 --> 59:51.370
wie das letzte Mal.

59:51.370 --> 59:53.370
Style92

59:53.370 --> 59:55.370
Pog-Subscription

59:55.370 --> 59:57.370
Danke für die ganzen Subs, Leute, es ist

59:57.370 --> 01:00:01.060
sehr...

01:00:01.060 --> 01:00:03.060
So, also jetzt installieren wir erstmal

01:00:03.060 --> 01:00:06.630
.net

01:00:06.630 --> 01:00:12.730
Build

01:00:16.730 --> 01:00:20.300
Warum bildet er

01:00:20.300 --> 01:00:22.300
jetzt alles? Achso, weil

01:00:22.300 --> 01:00:24.300
ich gerade alle meine Images weggeworfen habe,

01:00:24.300 --> 01:00:27.740
ja, das würde es erklären.

01:00:27.740 --> 01:00:33.740
Wenn man alle Images löscht,

01:00:33.740 --> 01:00:37.940
Alter, meine Nase läuft zu schlimm,

01:00:37.940 --> 01:00:42.660
ich habe nichts zum Putzen.

01:00:42.660 --> 01:00:44.660
Nicht das hier irgendwie...

01:00:44.660 --> 01:00:46.660
Nochmal

01:00:46.660 --> 01:00:52.470
brauche ich das nicht.

01:00:52.470 --> 01:00:54.470
Eine Sache sieht man aber jetzt schon,

01:00:54.470 --> 01:00:56.470
was ein richtig großer Vorteil

01:00:56.470 --> 01:00:58.470
von Docker ist.

01:00:58.470 --> 01:01:00.470
Und es ist genau eines der Dinger,

01:01:00.470 --> 01:01:02.470
wofür Docker ursprünglich erfunden wurde.

01:01:02.470 --> 01:01:04.470
Für das ganze Zeug, was da raus

01:01:04.470 --> 01:01:06.470
gewachsen ist an Container Ökosystemen

01:01:06.470 --> 01:01:08.470
und wie teilweise

01:01:08.470 --> 01:01:10.470
Docker heute auch, also Docker selbst,

01:01:10.470 --> 01:01:12.470
für Sachen verwendet wird, wofür es gar nicht

01:01:12.470 --> 01:01:14.470
gedacht ist.

01:01:14.470 --> 01:01:16.470
Das war ja damals noch nicht abzusehen,

01:01:16.470 --> 01:01:18.470
aber genau für sowas wurde

01:01:18.470 --> 01:01:20.470
Docker ursprünglich entwickelt.

01:01:20.470 --> 01:01:22.470
Nämlich um diese ganze Sache mit

01:01:22.470 --> 01:01:24.470
ich entwickle was,

01:01:24.470 --> 01:01:26.470
auf meiner Kiste kompiliert es,

01:01:26.470 --> 01:01:28.470
auf meiner Kiste läuft es, aber auf dem Server

01:01:28.470 --> 01:01:30.470
läuft es nicht, auf der anderen

01:01:30.470 --> 01:01:32.470
Entwicklerkiste läuft es nicht, zu vermeiden.

01:01:32.470 --> 01:01:34.470
Hauptsächlich ursprüngliche

01:01:34.470 --> 01:01:36.470
Docker-Idee war ja sogar, es funktioniert

01:01:36.470 --> 01:01:38.470
auf meiner Entwicklerkiste, aber auf der anderen

01:01:38.470 --> 01:01:40.470
Entwicklerkiste nicht. Das war eines der ursprünglichen

01:01:40.470 --> 01:01:42.470
Ideen in der Docker. Und man sieht auch schon,

01:01:42.470 --> 01:01:44.470
dass es genau hierfür was

01:01:44.470 --> 01:01:46.470
bringt. Auch wenn wir das hier nicht optimal machen

01:01:46.470 --> 01:01:48.470
und wenn das langsam ist und wenn das nicht schön ist,

01:01:48.470 --> 01:01:50.470
es ist nachvollziehbar.

01:01:50.470 --> 01:01:52.470
Das heißt, wenn es funktioniert,

01:01:52.470 --> 01:01:54.470
das Bild jetzt, und ich das Image

01:01:54.470 --> 01:01:56.470
lösche, dann funktioniert es das nächste Mal wieder.

01:01:58.470 --> 01:02:00.470
Und wenn das Image weg ist, ist der ganze

01:02:00.470 --> 01:02:02.470
Müll aus dem lokalen System

01:02:02.470 --> 01:02:06.040
auch weg. Richtig, genau.

01:02:06.040 --> 01:02:08.040
So, jetzt haben wir .NET installiert.

01:02:08.040 --> 01:02:10.040
Jetzt können wir als nächstes

01:02:10.040 --> 01:02:12.040
äh Copy

01:02:12.040 --> 01:02:14.040
aus unserem Backend-Projekt

01:02:14.040 --> 01:02:16.040
können wir die ganzen CS-Files

01:02:16.040 --> 01:02:18.040
rüberkopieren.

01:02:18.040 --> 01:02:20.040
Da muss ich jetzt aber mal nachgucken, was wir noch so haben.

01:02:22.040 --> 01:02:27.780
Wir brauchen

01:02:27.780 --> 01:02:29.780
ganzen CS-Files und wir brauchen

01:02:29.780 --> 01:02:33.350
das Projekt-File.

01:02:33.350 --> 01:02:35.350
Mehr brauchen wir

01:02:35.350 --> 01:02:37.350
eigentlich nicht.

01:02:37.350 --> 01:02:39.350
Also alle CS-Backend-Files

01:02:39.350 --> 01:02:41.350
und das Sternchen.c

01:02:41.350 --> 01:02:43.350
Wobei, Moment.

01:02:43.350 --> 01:02:46.660
Ne, das kopiert

01:02:46.660 --> 01:02:48.660
ihr hier nicht mit. So, die zwei Files

01:02:48.660 --> 01:02:50.660
brauchen wir. Danach

01:02:50.660 --> 01:02:52.660
können wir theoretisch schon mal probieren,

01:02:52.660 --> 01:02:54.660
wie es mit

01:02:54.660 --> 01:02:56.660
äh .NET

01:02:56.660 --> 01:02:58.660
publish. Warte mal, ich glaube, ich habe

01:02:58.660 --> 01:03:00.660
gerade was im Handy gekriegt.

01:03:00.660 --> 01:03:02.660
Nix. Dann können wir gucken, wie es aussieht mit

01:03:02.660 --> 01:03:04.660
.NET publish

01:03:04.660 --> 01:03:06.660
Wie geht das? War .NET build?

01:03:06.660 --> 01:03:08.660
.NET publish

01:03:08.660 --> 01:03:10.660
release. Das habe ich

01:03:10.660 --> 01:03:14.230
Ja, und so, weil wir es

01:03:14.230 --> 01:03:16.230
ja installieren mit Docker, äh

01:03:16.230 --> 01:03:18.230
weil wir es ja installieren mit

01:03:18.230 --> 01:03:20.230
mit dem Install-Skript.

01:03:20.230 --> 01:03:22.230
Ok, .NET publish

01:03:22.230 --> 01:03:24.230
release. Schauen wir mal, ob das

01:03:24.230 --> 01:03:31.320
funktioniert. Docker haben

01:03:31.320 --> 01:03:33.320
mir das Leben für meine Bachelor-Arbeit leicht gemacht.

01:03:33.320 --> 01:03:35.320
Ja.

01:03:35.320 --> 01:03:37.320
Genau für sowas ist, oh fuck, was jetzt?

01:03:37.320 --> 01:03:39.320
Was hat er denn jetzt für Probleme?

01:03:39.320 --> 01:03:41.320
Ja. Please install

01:03:41.320 --> 01:03:43.320
libIQ.

01:03:43.320 --> 01:03:45.320
Machen wir. Ja.

01:03:45.320 --> 01:03:47.320
Das ist eines der wenigen .NET

01:03:47.320 --> 01:03:49.320
Oh fuck. Oh fuck.

01:03:49.320 --> 01:03:53.460
Ne.

01:03:53.460 --> 01:03:59.590
Ok.

01:03:59.590 --> 01:04:01.590
Das ist das Problem, wenn ich

01:04:01.590 --> 01:04:03.590
alles da oben reinschreibe, dann muss ich

01:04:03.590 --> 01:04:05.590
den ganzen Shit nochmal durchlaufen lassen.

01:04:05.590 --> 01:04:07.590
Das dauert wieder zwei Minuten, da habe ich keinen Bock drauf.

01:04:07.590 --> 01:04:11.930
Oh man, was? libIQ gibt's

01:04:11.930 --> 01:04:13.930
nicht. Ok. exec

01:04:13.930 --> 01:04:15.930
debian

01:04:15.930 --> 01:04:17.930
Warum gibt's das? Nein, nein, nein, nein,

01:04:17.930 --> 01:04:19.930
nein, nein.

01:04:19.930 --> 01:04:21.930
debian, warum gibt's

01:04:21.930 --> 01:04:23.930
das nicht? apt

01:04:23.930 --> 01:04:25.930
apt search

01:04:25.930 --> 01:04:29.750
libIQ

01:04:29.750 --> 01:04:31.750
libIQ-dev muss ich installieren. Ok.

01:04:31.750 --> 01:04:33.750
Alles klar.

01:04:33.750 --> 01:04:35.750
libIQ-dev

01:04:35.750 --> 01:04:37.750
highIQ

01:04:37.750 --> 01:04:39.750
library

01:04:39.750 --> 01:04:43.580
lib highIQ

01:04:43.580 --> 01:04:45.580
Das sieht doch schon besser aus.

01:04:45.580 --> 01:04:50.680
So.

01:04:50.680 --> 01:04:52.680
Und jetzt haben wir unser Image am Start.

01:04:52.680 --> 01:04:54.680
Mit

01:04:54.680 --> 01:04:56.680
gebauter Anwendung drin, das heißt,

01:04:56.680 --> 01:04:58.680
nachdem die Anwendung jetzt fertig ist,

01:04:58.680 --> 01:05:00.680
achso, Moment, eins brauchen wir noch,

01:05:00.680 --> 01:05:02.680
eins brauchen wir noch, wir brauchen noch

01:05:02.680 --> 01:05:04.680
ähm, copy

01:05:04.680 --> 01:05:06.680
das können wir eigentlich

01:05:06.680 --> 01:05:08.680
danach machen, weil wenn sich das ändert, muss

01:05:08.680 --> 01:05:10.680
ich die Anwendung nicht neu machen. Äh, copy

01:05:10.680 --> 01:05:12.680
backend www root

01:05:12.680 --> 01:05:14.680
nach

01:05:14.680 --> 01:05:16.680
www root. Also für unsere

01:05:16.680 --> 01:05:18.680
Webseite, die muss ja auch noch mit reinkopiert werden.

01:05:18.680 --> 01:05:20.680
Build.

01:05:20.680 --> 01:05:22.680
Ok. Run. Jetzt können wir

01:05:22.680 --> 01:05:24.680
gucken, ob die Anwendung funktioniert.

01:05:24.680 --> 01:05:26.680
Also unser Container-Image, würde ich sagen, ist jetzt

01:05:26.680 --> 01:05:28.680
erstmal fertig. Mal gucken, ob's funktioniert, was

01:05:28.680 --> 01:05:36.660
ich hier gebaut hab. Ähm.

01:05:36.660 --> 01:05:45.800
.net

01:05:45.800 --> 01:05:47.800
Ach, Moment. Oh, das ist ja kacke.

01:05:47.800 --> 01:05:51.560
.net, .net

01:05:51.560 --> 01:05:53.560
Und jetzt muss man glaube ich angeben,

01:05:53.560 --> 01:05:55.560
wo ist es denn?

01:05:55.560 --> 01:05:57.560
bin-release

01:05:57.560 --> 01:05:59.560
backend-dll

01:05:59.560 --> 01:06:01.560
Genau. Und bam!

01:06:01.560 --> 01:06:03.560
Es geht nicht, weil unable to load

01:06:03.560 --> 01:06:05.560
shared-library-web-rtc-rust

01:06:05.560 --> 01:06:09.130
But why?

01:06:09.130 --> 01:06:11.130
Warum ist

01:06:11.130 --> 01:06:13.130
das denn? Achso, weil das im falschen

01:06:13.130 --> 01:06:15.130
Ordner liegt.

01:06:15.130 --> 01:06:17.130
Das liegt nämlich unter

01:06:17.130 --> 01:06:19.130
target-release

01:06:19.130 --> 01:06:21.130
lib-web-rtc-rust

01:06:21.130 --> 01:06:25.130
Muss man auch noch gleich moven.

01:06:25.130 --> 01:06:28.440
Jetzt gucken, ob's jetzt läuft.

01:06:28.440 --> 01:06:32.330
Äh, wat?

01:06:32.330 --> 01:06:34.330
Ach!

01:06:34.330 --> 01:06:36.330
Nee, Moment. Nee, hä?

01:06:36.330 --> 01:06:41.180
Vielleicht, weil das nicht im

01:06:41.180 --> 01:06:43.180
im richtigen Verzeichnis liegt.

01:06:43.180 --> 01:06:45.180
Einmal, cp

01:06:45.180 --> 01:06:47.180
lib-web-rtc-rust

01:06:47.180 --> 01:06:49.180
Kann sein. Ich bin mir nicht ganz sicher,

01:06:49.180 --> 01:06:51.180
wo das hin muss.

01:06:51.180 --> 01:06:55.960
release.net. Hier vielleicht?

01:06:55.960 --> 01:06:57.960
bin-release. Also wir müssen unser Image

01:06:57.960 --> 01:06:59.960
auf jeden Fall noch fixen.

01:06:59.960 --> 01:07:01.960
.net

01:07:01.960 --> 01:07:03.960
run

01:07:03.960 --> 01:07:05.960
backend-dll

01:07:05.960 --> 01:07:07.960
Ey, Funst!

01:07:07.960 --> 01:07:09.960
Pog!

01:07:09.960 --> 01:07:11.960
Warum funktioniert

01:07:11.960 --> 01:07:13.960
denn das? Ich hab doch gar kein FFM-Pack drauf. Sollte

01:07:13.960 --> 01:07:15.960
das jetzt nicht eigentlich

01:07:15.960 --> 01:07:17.960
crashen? Weil...

01:07:17.960 --> 01:07:24.220
Nee, das ist dumm,

01:07:24.220 --> 01:07:26.220
was ich hier mache.

01:07:26.220 --> 01:07:28.220
Such .net nach der Library im Verzeichnis,

01:07:28.220 --> 01:07:30.220
wo du startest, wenn du nichts Spezielles

01:07:30.220 --> 01:07:32.220
angibst.

01:07:32.220 --> 01:07:34.220
Okay, also aber prinzipiell, das hier kommt von Rust.

01:07:34.220 --> 01:07:36.220
Also prinzipiell funktioniert das.

01:07:36.220 --> 01:07:38.220
Als erstes hat es natürlich keinen www-Root.

01:07:38.220 --> 01:07:40.220
Wir müssen das auf jeden Fall noch ein bisschen

01:07:40.220 --> 01:07:42.220
umkopieren. Das ist eklig so.

01:07:42.220 --> 01:07:44.220
Ich will das Image aber

01:07:44.220 --> 01:07:46.220
so eh nicht lassen. Insofern...

01:07:46.220 --> 01:07:48.220
Was mich wundert, ist, dass der nicht meckert,

01:07:48.220 --> 01:07:50.220
dass FFM-Pack

01:07:50.220 --> 01:07:52.220
Probleme hat.

01:07:52.220 --> 01:07:54.220
Hier. Ah, ich weiß,

01:07:54.220 --> 01:07:56.220
woran das liegt, dass der nicht meckert, dass FFM-Pack

01:07:56.220 --> 01:07:58.220
Probleme hat. Das ist nämlich in einem

01:07:58.220 --> 01:08:00.220
Thread drinne. Und der Thread,

01:08:00.220 --> 01:08:02.220
der crasht einfach. Und ich

01:08:02.220 --> 01:08:04.220
bekomm nix von mit. Wir machen das jetzt mal

01:08:04.220 --> 01:08:06.220
anders. Wir sagen jetzt mal FFM-Pack

01:08:06.220 --> 01:08:08.220
Log Level

01:08:08.220 --> 01:08:10.220
oder sowas. Konnte man doch hier setzen.

01:08:10.220 --> 01:08:16.340
Set Log Level. Das setzen wir jetzt

01:08:16.340 --> 01:08:18.340
hier irgendwie auf Quiet oder sowas.

01:08:18.340 --> 01:08:22.740
Quiet, beste.

01:08:22.740 --> 01:08:24.740
Wir setzen mal das Log Level und dann

01:08:24.740 --> 01:08:26.740
sollten wir jetzt gleich nen Fehler bekommen.

01:08:26.740 --> 01:08:28.740
Also was musste ich

01:08:28.740 --> 01:08:30.740
jetzt noch machen? Ich musste,

01:08:30.740 --> 01:08:32.740
ich musste es moven.

01:08:32.740 --> 01:08:34.740
Kann man bei .net Publish

01:08:34.740 --> 01:08:36.740
nicht nen Output Path angeben?

01:08:36.740 --> 01:08:38.740
...

01:08:38.740 --> 01:08:40.740
Das muss ich grad mal ausprobieren. Konnte man nicht sagen?

01:08:40.740 --> 01:08:42.740
.net Publish

01:08:42.740 --> 01:08:44.740
minus O Build.

01:08:44.740 --> 01:08:46.740
Doch, konnte man. Also.

01:08:46.740 --> 01:08:48.740
.net minus O kommt

01:08:48.740 --> 01:08:52.820
nach Bild rein.

01:08:52.820 --> 01:08:54.820
Und dann

01:08:54.820 --> 01:08:58.460
moven wir noch.

01:08:58.460 --> 01:09:00.460
Dann moven wir noch.

01:09:00.460 --> 01:09:02.460
Target. Oh.

01:09:02.460 --> 01:09:04.460
Mist. Vergessen, wo es ist.

01:09:04.460 --> 01:09:06.460
Warum will ich ja nicht immer exec eintippen?

01:09:06.460 --> 01:09:08.460
Target Release

01:09:08.460 --> 01:09:10.460
libwebrtcrust.so

01:09:10.460 --> 01:09:12.460
libwebrtcrust.so

01:09:12.460 --> 01:09:14.460
...

01:09:14.460 --> 01:09:16.460
Moven wir noch.

01:09:16.460 --> 01:09:20.730
nach Build.

01:09:20.730 --> 01:09:22.730
Ok?

01:09:22.730 --> 01:09:24.730
So.

01:09:24.730 --> 01:09:26.730
Und ich

01:09:26.730 --> 01:09:28.730
hoffe, dass es jetzt ordentlich crasht.

01:09:28.730 --> 01:09:30.730
Weil wenn es ordentlich crasht,

01:09:30.730 --> 01:09:32.730
dann können wir nämlich

01:09:32.730 --> 01:09:39.110
den Container ordentlich bauen.

01:09:39.110 --> 01:09:41.110
So. Mal hier run.

01:09:41.110 --> 01:09:44.810
Schauen wir mal, ob das hier gut aussieht.

01:09:44.810 --> 01:09:46.810
Jetzt haben wir nen Ordner Build.

01:09:46.810 --> 01:09:48.810
Ach so, da haben wir BWW-Route. Musste auch noch rein.

01:09:48.810 --> 01:09:57.570
Wieso lese ich immer WebAds

01:09:57.570 --> 01:09:58.230
Hier Crust

01:09:58.230 --> 01:09:59.830
Passt doch

01:09:59.830 --> 01:10:02.610
Ganzen Schalentiere hier

01:10:02.610 --> 01:10:04.450
Krustentiere am Start

01:10:04.450 --> 01:10:09.870
Okay

01:10:09.870 --> 01:10:12.750
.NET, .NET, Run

01:10:12.750 --> 01:10:13.570
Ne, nicht Run

01:10:13.570 --> 01:10:15.410
Backend, DLL

01:10:15.410 --> 01:10:18.610
Jawoll, FFM-Pack crasht

01:10:18.610 --> 01:10:18.890
Okay

01:10:18.890 --> 01:10:21.670
Das würde es natürlich erklären

01:10:21.670 --> 01:10:22.290
Und jetzt sagen wir mal

01:10:22.290 --> 01:10:24.350
Upt, Install, FFM-Pack

01:10:24.350 --> 01:10:26.930
Das brauchen wir nämlich auch noch

01:10:26.930 --> 01:10:28.790
Wir brauchen auch noch FFM-Pack

01:10:28.790 --> 01:10:30.830
Oh, da fällt mir gerade was ein

01:10:30.830 --> 01:10:33.430
Leute, es ist keine gute Idee, wie ich das gebaut habe

01:10:33.430 --> 01:10:35.390
Wir sollten vielleicht eine

01:10:35.390 --> 01:10:38.470
Statische, feste FFM-Pack-Version nehmen

01:10:38.470 --> 01:10:40.070
Weil ansonsten

01:10:40.070 --> 01:10:41.770
Ist es immer davon abhängig

01:10:41.770 --> 01:10:43.910
Dass die Betriebssystem-Version

01:10:43.910 --> 01:10:47.890
Also die Betriebssystem-FFM-Pack-Version

01:10:47.890 --> 01:10:50.210
Von dem, was ich benutze

01:10:50.210 --> 01:10:51.070
Als Base-Image

01:10:51.070 --> 01:10:53.610
Mit der von meiner Entwicklerkiste übereinstimmt

01:10:53.610 --> 01:10:55.650
Weil ich will ja neues FFM-Pack benutzen

01:10:55.650 --> 01:10:57.890
Gucken wir mal, ob das jetzt funktioniert

01:10:57.890 --> 01:10:59.130
Backend, nope

01:10:59.130 --> 01:11:03.520
Der findet einfach mein FFM-Pack nicht

01:11:03.520 --> 01:11:04.720
Obwohl es installiert ist

01:11:04.720 --> 01:11:07.320
Das ist aber sehr

01:11:07.320 --> 01:11:08.960
Keck-Weight

01:11:08.960 --> 01:11:11.860
Gut, der Rest funktioniert

01:11:11.860 --> 01:11:13.700
Also der Container scheint schon mal halbwegs

01:11:13.700 --> 01:11:15.560
Halbwegs brauchbar zu sein

01:11:15.560 --> 01:11:18.830
Äh, LD-Config

01:11:18.830 --> 01:11:20.130
Lass mal kurz gucken, wo ist denn

01:11:20.130 --> 01:11:22.070
Wo liegt meine Library

01:11:22.070 --> 01:11:23.190
What?

01:11:24.570 --> 01:11:26.610
Alter, was ist denn das für ein Scheiß-Fart

01:11:26.610 --> 01:11:29.250
Lipx86

01:11:29.250 --> 01:11:29.970
64

01:11:29.970 --> 01:11:31.610
Linux-Knu

01:11:32.010 --> 01:11:34.830
Da hätte ich ja im Leben nicht dran gedacht, dass das da liegt

01:11:34.830 --> 01:11:38.270
Ja, da guckt meine Anwendung natürlich auch nicht nach, ob das da liegt

01:11:38.270 --> 01:11:45.670
Außerdem ist es die falsche FFM-Pack-Version

01:11:45.670 --> 01:11:49.690
Ich entwickle mit FFM-Pack 6.1, glaube ich

01:11:49.690 --> 01:11:52.030
Und das hier ist FFM-Pack 5.9

01:11:52.030 --> 01:11:52.670
Sehe ich das richtig?

01:11:52.790 --> 01:11:53.610
5.1

01:11:53.610 --> 01:11:55.850
Ja, das kann ja nicht funktionieren

01:11:55.850 --> 01:11:57.970
Okay

01:11:57.970 --> 01:12:00.110
So, dann fixen wir mal das Docker-Image

01:12:00.110 --> 01:12:00.550
Weiter

01:12:00.550 --> 01:12:03.310
Als nächstes mussten wir noch

01:12:03.310 --> 01:12:04.670
Ne, das machen wir hier

01:12:04.670 --> 01:12:08.040
Wo ist die Sache mit www.google.com?

01:12:08.040 --> 01:12:08.140
Wo ist die Sache mit www.google.com?

01:12:08.140 --> 01:12:09.680
Hier, www.root

01:12:09.680 --> 01:12:12.100
Ne, www.root soll nicht dahin kopiert werden

01:12:12.100 --> 01:12:12.740
Sondern nach

01:12:12.740 --> 01:12:14.660
Build

01:12:14.660 --> 01:12:19.440
Also das ist alles noch sehr unoptimiert

01:12:19.440 --> 01:12:19.700
Hier

01:12:19.700 --> 01:12:24.260
Wie, okay, wo bekommen wir eine statische

01:12:24.260 --> 01:12:27.310
Also noch eine Build-Step

01:12:27.310 --> 01:12:28.370
Um FFM-Pack zu bauen

01:12:28.370 --> 01:12:30.070
Ne, ich baue FFM-Pack nicht

01:12:30.070 --> 01:12:33.390
Es gibt ein Projekt, was Nightly Builds von FFM-Pack macht

01:12:33.390 --> 01:12:34.930
Das werde ich verwenden

01:12:34.930 --> 01:12:37.130
Ich bin mir nur nicht mehr ganz sicher

01:12:37.130 --> 01:12:38.990
Wie das, wie das

01:12:38.990 --> 01:12:40.730
Es gibt ein paar Projekte, die das machen

01:12:40.730 --> 01:12:41.110
Das müssen wir uns vorstellen

01:12:41.110 --> 01:12:43.690
Wir müssen es gleich mal auf Github raussuchen

01:12:43.690 --> 01:12:50.580
Ich will jetzt aber erstmal checken

01:12:50.580 --> 01:12:53.280
Ob prinzipiell das, was ich hier gebaut habe

01:12:53.280 --> 01:12:54.160
Funktioniert

01:12:54.160 --> 01:12:56.700
Also, .net

01:12:56.700 --> 01:12:59.240
.net

01:12:59.240 --> 01:13:00.080
.net

01:13:00.080 --> 01:13:02.420
Backend

01:13:02.420 --> 01:13:04.480
Okay

01:13:04.480 --> 01:13:06.320
Gut, funktioniert alles

01:13:06.320 --> 01:13:08.160
www.root ist auch da

01:13:08.160 --> 01:13:09.820
Okay, es liegt echt nur an FFM-Pack

01:13:09.820 --> 01:13:12.780
Jetzt müssen wir uns ein FFM-Pack-Build suchen

01:13:12.780 --> 01:13:15.020
Mit allen Dependencies drinne

01:13:15.020 --> 01:13:15.280
Und dann müssen wir uns ein FFM-Pack-Build suchen

01:13:15.300 --> 01:13:16.800
FFM-Pack-Bild

01:13:16.800 --> 01:13:19.040
Für, für Linux

01:13:19.040 --> 01:13:23.360
Und zwar nicht ein Binary-FFM-Pack-Bild

01:13:23.360 --> 01:13:25.640
Sondern mit

01:13:25.640 --> 01:13:26.880
Ja, ich suche ja ein fertiges Bild

01:13:26.880 --> 01:13:28.800
Sondern ich suche ja nicht die Binaries

01:13:28.800 --> 01:13:31.740
Das könnte sogar das richtige Projekt sein, was ich suche

01:13:31.740 --> 01:13:35.060
Lass mal, gibt es da nicht vielleicht sogar ein offizielles Docker-Image

01:13:35.060 --> 01:13:38.740
Mit FFM-Pack-Library versioniert oder so?

01:13:41.550 --> 01:13:41.850
Guck mal

01:13:41.850 --> 01:13:46.130
Aber das ist wahrscheinlich nur normales FFM-Pack

01:13:46.130 --> 01:13:47.170
Und nicht die FFM-Pack-Library-Library-Library-Library-Library-Library-Library-Library-Library-Library-Library-Library-Library-Library-Library

01:13:47.190 --> 01:13:47.730
Oder?

01:13:49.150 --> 01:13:49.710
Oder?

01:13:51.350 --> 01:13:51.910
Oder?

01:13:52.910 --> 01:13:55.630
Ne, das ist, na wobei, man weiß es ja nicht

01:13:55.630 --> 01:13:56.630
Man weiß es nicht

01:13:56.630 --> 01:13:59.790
Probieren wir mal aus

01:13:59.790 --> 01:14:04.040
Holen wir das mal

01:14:04.040 --> 01:14:05.820
CLI

01:14:05.820 --> 01:14:08.620
CLI

01:14:08.620 --> 01:14:12.980
Haben die auch ein Nicht-CLI-Image?

01:14:16.120 --> 01:14:19.200
Wobei, bezieht sich, bezieht sich, auf was bezieht sich denn CLI?

01:14:19.700 --> 01:14:20.680
Auf FFM-Pack?

01:14:23.010 --> 01:14:23.970
Oder auf

01:14:23.970 --> 01:14:24.210
FFM-Pack?

01:14:24.210 --> 01:14:24.230
Oder auf FFM-Pack?

01:14:24.750 --> 01:14:28.210
Dass das Image, dass es Shells und so dabei hat

01:14:28.210 --> 01:14:32.350
CLI? LS?

01:14:33.690 --> 01:14:38.210
Was sind denn die Unterschiede zwischen den einzelnen Sachen überhaupt?

01:14:47.000 --> 01:14:50.240
Ja, das, das, so war ich, so schlau war ich auch

01:14:50.240 --> 01:15:01.120
Ich vermute, da ist die

01:15:01.120 --> 01:15:04.700
Das sind wahrscheinlich einfach nur Binaries

01:15:04.700 --> 01:15:05.680
Und da ist die

01:15:05.680 --> 01:15:09.680
Da sind die, die ganzen

01:15:09.680 --> 01:15:13.980
Die Library-Parts von FFM-Pack, die spielen

01:15:13.980 --> 01:15:15.220
Ich brauche gar nicht dabei

01:15:15.220 --> 01:15:19.390
Okay, gucken wir, gucken wir uns das mal an

01:15:19.390 --> 01:15:20.050
Also

01:15:20.050 --> 01:15:24.170
Wir machen jetzt mal, wir starten einfach mal einen Docker-Container

01:15:24.170 --> 01:15:27.130
Mit, mit dem Image

01:15:27.130 --> 01:15:28.870
Und zwar FFM-Pack

01:15:28.870 --> 01:15:32.090
Nehmen wir mal AMD64 Latest

01:15:32.090 --> 01:15:33.650
Bäm

01:15:33.650 --> 01:15:35.210
Und gucken wir mal rein

01:15:35.210 --> 01:15:37.030
Was es da so gibt

01:15:37.030 --> 01:15:41.130
Ob da FFM-Pack tatsächlich auch als Library drinnen liegt?

01:15:41.390 --> 01:15:43.310
Weil da können wir nämlich die Images gleich verwenden

01:15:43.310 --> 01:15:44.910
Und

01:15:44.910 --> 01:15:51.610
Okay

01:15:51.610 --> 01:15:54.290
Der versucht gerade FFM-Pack direkt zu starten

01:15:54.290 --> 01:15:55.870
Mit einer Datei, die Bash heißt

01:15:55.870 --> 01:15:56.850
Das ist natürlich blöd

01:15:56.850 --> 01:15:59.710
Da müssen wir jetzt Entry-Point überschreiben

01:15:59.710 --> 01:16:01.690
Minus, Minus

01:16:01.690 --> 01:16:03.030
Entry-Point

01:16:03.030 --> 01:16:04.130
Bash

01:16:04.130 --> 01:16:07.230
Bin ich auf dem Kopf nicht gebacken, jawohl, doch gut

01:16:07.230 --> 01:16:08.150
Passt

01:16:08.150 --> 01:16:11.850
Hier, FFM-Pack ist am Start

01:16:11.850 --> 01:16:14.730
Yep

01:16:14.730 --> 01:16:16.790
AV

01:16:16.790 --> 01:16:20.590
Ja

01:16:20.590 --> 01:16:21.050
Ja

01:16:21.050 --> 01:16:21.290
Ja, FFM-Pack ist am Start

01:16:21.290 --> 01:16:23.290
Die bringen die, die bringen die Libraries gar nicht mit

01:16:23.290 --> 01:16:25.290
Vermutlich

01:16:25.290 --> 01:16:27.290
Lip

01:16:27.290 --> 01:16:32.460
Äh

01:16:32.460 --> 01:16:34.460
Die bringen glaube ich die ganzen Libraries nicht mit

01:16:34.460 --> 01:16:39.120
Äh, suchen wir mal irgendwie nach

01:16:39.120 --> 01:16:44.860
Die haben nur

01:16:44.860 --> 01:16:46.860
Ne, na geil

01:16:46.860 --> 01:16:48.860
Die bringen nur FFM-Pack

01:16:48.860 --> 01:16:50.860
Die Binaries mit

01:16:50.860 --> 01:16:52.860
Das bringt mir ja gar nix

01:16:52.860 --> 01:16:54.860
Und was ist das?

01:16:54.860 --> 01:16:56.860
Das ist das, dies, ne

01:16:56.860 --> 01:16:58.860
Das ist natürlich blöde

01:16:58.860 --> 01:16:59.500
Dann bringen wir mal FFM-Pack mit, das bringt mir ja gar nix

01:16:59.500 --> 01:17:00.000
Dann bringen wir mal FFM-Pack mit, das bringt mir ja gar nix

01:17:00.000 --> 01:17:07.940
Dann bringen wir die Images nicht wirklich was

01:17:07.940 --> 01:17:08.940
Dann bringen wir die Images nicht wirklich was

01:17:08.940 --> 01:17:12.140
Weil

01:17:12.140 --> 01:17:17.140
Weil, weil, weil die FFM-Pack Binaries

01:17:17.140 --> 01:17:20.140
Die brauch ich ja gar nicht

01:17:20.140 --> 01:17:28.720
Gucken wir nochmal was da jetzt drin ist, ob das irgendwie anders ist

01:17:28.720 --> 01:17:29.720
Wer sich fragt was das ist

01:17:29.720 --> 01:17:33.720
Das hier listet alle Libraries auf, auf dem System, hier guckt

01:17:33.720 --> 01:17:38.720
Und, ähm, AV-Format nennt sich eben ein Teil von FFM-Pack

01:17:38.720 --> 01:17:39.720
Und, ähm, AV-Format nennt sich eben ein Teil von FFM-Pack

01:17:39.720 --> 01:17:41.720
Das gibt es immer, wenn es FFM-Pack gibt

01:17:41.720 --> 01:17:43.720
Ja ok, die Images bringen mir nix

01:17:43.720 --> 01:17:46.720
Weil in den Images ist bloß FFM-Pack als Binary drin

01:17:46.720 --> 01:17:51.220
Aber immerhin

01:17:51.220 --> 01:17:55.220
Als halbwegs aktuelle, als genau die Version die ich brauch

01:17:55.220 --> 01:17:57.220
Ok, das heißt wir müssen das selbst machen

01:17:57.220 --> 01:17:59.220
FFM-Pack einbauen

01:17:59.220 --> 01:18:05.750
Oder was haben wir sonst noch so für Images auf Docker Hub

01:18:05.750 --> 01:18:07.750
Jellyfin, ne

01:18:07.750 --> 01:18:11.960
WulHub

01:18:11.960 --> 01:18:13.960
Oh vier, vor vier Jahren

01:18:13.960 --> 01:18:17.960
Ne, ich glaube ich verzichte auf ein vier Jahre altes FFM-Pack

01:18:17.960 --> 01:18:19.960
Kannst du nicht einfach ein fertiges Bild runterladen

01:18:19.960 --> 01:18:21.960
Doch, doch, doch, doch, machen wir jetzt

01:18:21.960 --> 01:18:27.960
Ich dachte nur vielleicht gibt es ein fertiges, fertiges Image-Container-Image was wir verwenden können

01:18:27.960 --> 01:18:30.960
Updated eight years ago

01:18:30.960 --> 01:18:33.960
Und was zum Teufel ist Open Coconut

01:18:33.960 --> 01:18:37.720
Na gut, brauchen wir nicht

01:18:37.720 --> 01:18:39.720
Gucken wir mal hier

01:18:39.720 --> 01:18:44.720
Ich glaube das sind die richtigen Bills, das sind auch die die ich sonst immer verwendet, verwendet hab weil man

01:18:44.720 --> 01:18:48.720
Weil man ein statisches FFM-Pack gebraucht hat

01:18:48.720 --> 01:18:58.690
Ja

01:18:58.690 --> 01:19:00.690
FFM-Pack

01:19:00.690 --> 01:19:02.690
N1128 Dings

01:19:02.690 --> 01:19:04.690
Git commit hash

01:19:04.690 --> 01:19:06.690
Linux GPL

01:19:06.690 --> 01:19:08.690
Linux GPL

01:19:08.690 --> 01:19:10.690
Shared

01:19:10.690 --> 01:19:14.320
Das klingt gut

01:19:14.320 --> 01:19:21.810
Kann es sein, dass die Libraries von FFM-Pack sich LibAV nennen

01:19:21.810 --> 01:19:23.810
Da gibt es mehrere

01:19:23.810 --> 01:19:25.810
Es gibt AV-Format

01:19:25.810 --> 01:19:27.810
Und AV gibt es auch

01:19:27.810 --> 01:19:29.810
Aber es kommt

01:19:29.810 --> 01:19:31.810
Also die Dinger nennen sich immer LibAV

01:19:31.810 --> 01:19:33.810
Und dann kommt halt der Rest hinten dran

01:19:33.810 --> 01:19:35.810
Aber es ist ja egal

01:19:35.810 --> 01:19:37.810
Ich habe nach AV-Format gesucht und das hätte er finden müssen

01:19:37.810 --> 01:19:39.810
Also da sind

01:19:39.810 --> 01:19:41.810
Wir haben es ja auch gesehen, da lagen keine rum

01:19:41.810 --> 01:19:43.810
Aber was haben die hier alles zur Auswahl

01:19:43.810 --> 01:19:45.810
Die haben Linux 64

01:19:45.810 --> 01:19:47.810
Haben die vielleicht auch

01:19:47.810 --> 01:19:49.810
Irgendeine Tag-Version

01:19:49.810 --> 01:19:51.810
Anstatt Master

01:19:51.810 --> 01:19:53.810
So 6.6.1 oder so

01:19:53.810 --> 01:19:55.810
Ja

01:19:55.810 --> 01:19:57.810
Oder 6.0.1

01:19:57.810 --> 01:19:59.810
Welche Packversion habe ich denn bei mir lokal

01:19:59.810 --> 01:20:03.120
6.1

01:20:03.120 --> 01:20:05.120
Gibt es hier 6.1

01:20:05.120 --> 01:20:07.120
Ne gibt es nicht

01:20:07.120 --> 01:20:14.780
Ach das liegt daran

01:20:14.780 --> 01:20:16.780
Weil 6.1 wahrscheinlich gerade Master ist

01:20:16.780 --> 01:20:18.780
Und 6.0.1

01:20:18.780 --> 01:20:20.780
Das letzte Release

01:20:20.780 --> 01:20:22.780
Kann das sein

01:20:22.780 --> 01:20:24.780
Vermutlich

01:20:24.780 --> 01:20:26.780
Dann nehmen wir mal 6.0.1

01:20:26.780 --> 01:20:28.780
6.0.1 müsste auch klar gehen

01:20:28.780 --> 01:20:30.780
Also 6.0.1

01:20:30.780 --> 01:20:34.930
Linux

01:20:34.930 --> 01:20:36.930
6.0.1

01:20:36.930 --> 01:20:38.930
Linux 64

01:20:38.930 --> 01:20:40.930
GPL Shared

01:20:40.930 --> 01:20:42.930
Das brauchen wir

01:20:42.930 --> 01:20:44.930
Was damit gemeint ist, ist folgendes

01:20:44.930 --> 01:20:46.930
Also rate ich jetzt einfach mal

01:20:46.930 --> 01:20:48.930
GPL enthält nur die

01:20:48.930 --> 01:20:50.930
Open Source Codecs

01:20:50.930 --> 01:20:52.930
Und

01:20:52.930 --> 01:20:54.930
Minus Shared bedeutet

01:20:54.930 --> 01:20:56.930
Das ist nur die Library Komponente

01:20:56.930 --> 01:20:58.930
Und das hier ist Library Plus

01:20:58.930 --> 01:21:03.840
Oder eventuell nur Binaries

01:21:03.840 --> 01:21:14.830
Da gibt es aber keine oder

01:21:14.830 --> 01:21:16.830
Das ist der Source Code oder

01:21:16.830 --> 01:21:24.300
Das ist kein

01:21:24.300 --> 01:21:27.810
Das ist doch nur der Source Code

01:21:27.810 --> 01:21:29.810
Das ist doch bestimmt kein

01:21:29.810 --> 01:21:39.580
Fertig gebautes

01:21:39.580 --> 01:21:52.050
Ich glaube nicht das

01:21:52.050 --> 01:21:54.050
Ich glaube das das nur der Source Code ist

01:21:54.050 --> 01:21:56.050
Guck mal mal

01:21:56.050 --> 01:21:58.050
Moment das heißt ja anders

01:21:58.050 --> 01:22:00.050
Z muss weg

01:22:00.050 --> 01:22:02.050
Ja guck das ist nur der Source Code

01:22:02.050 --> 01:22:04.050
Das bringt mir nix

01:22:04.050 --> 01:22:06.050
Da müsste ich FFmpeg auch noch selbst

01:22:06.050 --> 01:22:08.050
Kompilieren

01:22:08.050 --> 01:22:10.050
Ich hab da ein Grenzen den ich da drauf hab

01:22:10.050 --> 01:22:18.420
FFmpeg kommt weg

01:22:18.420 --> 01:22:20.420
Ok Dockerfile

01:22:20.420 --> 01:22:22.420
Wir benutzen das hier

01:22:22.420 --> 01:22:24.420
Wir benutzen das hier

01:22:24.420 --> 01:22:26.420
Linux 64 GPL Shared

01:22:26.420 --> 01:22:34.340
Gehen wir mal in unseren

01:22:34.340 --> 01:22:36.340
Docker Container rein den wir eben hatten

01:22:36.340 --> 01:22:38.340
Und probieren das da mal aus

01:22:38.340 --> 01:22:40.340
Wie das da aussieht

01:22:40.340 --> 01:22:43.840
Wget

01:22:43.840 --> 01:22:45.840
Zack genau

01:22:45.840 --> 01:22:47.840
So

01:22:47.840 --> 01:22:49.840
X

01:22:49.840 --> 01:22:51.840
F

01:22:51.840 --> 01:22:53.840
Z nicht

01:22:53.840 --> 01:22:55.840
FFmpeg

01:22:55.840 --> 01:22:57.840
Ja das ist eine fertig kompilierte Library

01:22:57.840 --> 01:22:59.840
Ok das ist gut

01:22:59.840 --> 01:23:01.840
Hier haben wir es

01:23:01.840 --> 01:23:03.840
Binaries sind auch am Start

01:23:03.840 --> 01:23:05.840
Die wir nicht brauchen

01:23:05.840 --> 01:23:07.840
Die können wir theoretisch löschen noch gleich aus dem Image

01:23:07.840 --> 01:23:09.840
Da es ein bisschen kleiner wird

01:23:09.840 --> 01:23:11.840
Da ist alles drin was wir brauchen

01:23:11.840 --> 01:23:13.840
Genau

01:23:13.840 --> 01:23:15.840
Excellent

01:23:15.840 --> 01:23:17.840
Ok wir bauen unsere Anwendung kurz

01:23:17.840 --> 01:23:19.840
Ein kleines bisschen um

01:23:19.840 --> 01:23:21.840
Nämlich

01:23:21.840 --> 01:23:23.840
Ich lade das hier auch mal runter

01:23:23.840 --> 01:23:28.940
Wget

01:23:28.940 --> 01:23:32.320
Dann packen wir

01:23:32.320 --> 01:23:34.320
Das ganze in unser Docker Ignore File

01:23:34.320 --> 01:23:36.320
Weil ich will garantiert nicht

01:23:36.320 --> 01:23:38.320
Aber Dockerfile ist auch nicht

01:23:38.320 --> 01:23:40.320
Also weil ich will ja nicht

01:23:40.320 --> 01:23:42.320
FFmpeg da irgendwie drinnen liegen haben

01:23:42.320 --> 01:23:44.320
Also

01:23:44.320 --> 01:23:46.320
Machen wir in unser Git Ignore

01:23:46.320 --> 01:23:48.320
In unser Git Ignore File

01:23:48.320 --> 01:23:50.320
Alles was FFmpeg Sternchen hast

01:23:50.320 --> 01:23:52.320
Soll weg

01:23:52.320 --> 01:23:54.320
Ok

01:23:54.320 --> 01:23:56.320
So

01:23:56.320 --> 01:23:58.320
Also

01:23:58.320 --> 01:24:00.320
So

01:24:00.320 --> 01:24:06.580
So

01:24:06.580 --> 01:24:18.910
So

01:24:18.910 --> 01:24:20.910
So

01:24:20.910 --> 01:24:22.910
So

01:24:22.910 --> 01:24:37.260
So

01:24:37.260 --> 01:24:39.260
So

01:24:39.260 --> 01:24:41.260
So

01:24:41.260 --> 01:24:43.260
So

01:24:43.260 --> 01:24:48.430
So

01:24:48.430 --> 01:24:50.430
So

01:24:50.430 --> 01:24:55.920
So

01:24:55.920 --> 01:24:57.920
So

01:24:57.920 --> 01:24:59.920
So

01:24:59.920 --> 01:25:01.920
So

01:25:01.920 --> 01:25:03.920
So

01:25:03.920 --> 01:25:05.920
So

01:25:05.920 --> 01:25:07.920
So

01:25:07.920 --> 01:25:09.920
So

01:25:09.920 --> 01:25:11.920
So

01:25:11.920 --> 01:25:13.920
So

01:25:13.920 --> 01:25:15.920
So

01:25:15.920 --> 01:25:17.920
So

01:25:17.920 --> 01:25:19.920
So

01:25:19.920 --> 01:25:21.920
So

01:25:21.920 --> 01:25:23.920
So

01:25:23.920 --> 01:25:49.680
FFmpeg suche ich jetzt unterhalb von FFmpeg slash lib. Ups. So, mal gucken, ob das jetzt startet. Run. Run. Und Funst. Nice. Ohne Fehler. Ja, ja, und es liest auch, liest auch die Sachen von der Kamera. Also, alles gut. So, FFmpeg slash, also, genau, FFmpeg slash lib.

01:25:49.680 --> 01:26:32.690
Das heißt, im Endeffekt müssen wir jetzt nur das gleiche noch für den Docker-Container machen. Und dann bauen wir den Docker-Container noch ordentlich. So, jetzt haben wir das hier hinkopiert. FFmpeg. FFmpeg machen wir mal hier als letzten Step. Wget. FFmpeg. Wie, wie sagt man Wget, dass er direkt entpacken soll? Also, ta, kann man das einfach so reinpipen? H, X.

01:26:33.830 --> 01:26:34.830
Vielleicht hat X nur

01:26:34.830 --> 01:26:36.910
Z. Kein, kein, kein Pipe

01:26:36.910 --> 01:26:37.470
oder so hin?

01:26:39.670 --> 01:26:40.070
Ne.

01:26:41.650 --> 01:26:42.730
Unexpected Enderfall.

01:26:46.350 --> 01:26:46.830
Ähm.

01:26:48.270 --> 01:26:48.990
Ne, Moment, man muss

01:26:48.990 --> 01:26:51.110
Wget noch sagen, minus O, glaube ich, gell?

01:26:51.190 --> 01:26:51.910
Für Output.

01:26:53.470 --> 01:26:54.930
Oh, Moment. Wget

01:26:54.930 --> 01:26:57.010
pipetar. So, wir fragen es der

01:26:57.010 --> 01:27:00.670
Overflow. Hier.

01:27:01.350 --> 01:27:03.150
Wget, groß O,

01:27:03.390 --> 01:27:05.350
minus, gepiped.

01:27:08.280 --> 01:27:08.820
Ne, Moment,

01:27:08.840 --> 01:27:10.040
das muss ich jetzt hier erstmal testen.

01:27:10.620 --> 01:27:15.730
Wget, minus, groß O, minus.

01:27:15.810 --> 01:27:17.190
Das ist wahrscheinlich Standard-Out.

01:27:17.610 --> 01:27:20.030
Gepiped nach ta, X, Z, F.

01:27:21.610 --> 01:27:22.510
Alles klar.

01:27:22.870 --> 01:27:22.970
Okay.

01:27:23.430 --> 01:27:24.610
Nice, Stack-Overflow, GG.

01:27:33.440 --> 01:27:34.740
Stack-Overflow lügt.

01:27:35.080 --> 01:27:37.040
Ah, Moment, das ist kein Z. Ja, das ist richtig.

01:27:39.420 --> 01:27:39.620
What?

01:27:40.500 --> 01:27:41.680
Archive is compressed.

01:27:42.120 --> 01:27:42.860
Use minus

01:27:42.860 --> 01:27:44.260
J-Option.

01:27:49.140 --> 01:27:49.540
Moment.

01:27:51.140 --> 01:27:52.560
Ey, warum ist,

01:27:52.560 --> 01:27:54.260
warum ist Chat,

01:27:54.260 --> 01:27:56.700
äh, nicht Chat, warum ist, ist Stack-Overflow

01:27:56.700 --> 01:28:01.660
falsch? Okay, minus

01:28:01.660 --> 01:28:03.240
X, V, so?

01:28:03.640 --> 01:28:05.100
Irgendwie? Hey!

01:28:05.840 --> 01:28:06.540
Das funktioniert!

01:28:07.620 --> 01:28:09.000
Nice, kaum macht man's richtig.

01:28:14.020 --> 01:28:15.440
Okay, so, und jetzt ist die

01:28:15.440 --> 01:28:17.120
große Preisfrage, ich lösch den ganzen

01:28:17.120 --> 01:28:18.440
Kreml grad nochmal, ja, ja.

01:28:19.360 --> 01:28:20.660
Jetzt ist die große Preisfrage,

01:28:21.300 --> 01:28:22.460
wie kann man ta

01:28:22.460 --> 01:28:25.160
den Output-Ordner-Namen angeben?

01:28:25.240 --> 01:28:26.300
War das minus C?

01:28:27.300 --> 01:28:30.220
Ta, Output-Directory-Name.

01:28:32.540 --> 01:28:34.420
How to choose directory

01:28:34.420 --> 01:28:37.280
name during

01:28:37.280 --> 01:28:38.280
untarring.

01:28:38.660 --> 01:28:39.640
Genau das wollen wir haben.

01:28:43.310 --> 01:28:45.090
Minus C, pretty name, strip

01:28:45.090 --> 01:28:46.190
components one.

01:28:50.020 --> 01:28:52.060
Ach so, das ist, weil die M kardieren davor.

01:28:54.350 --> 01:28:55.690
Anscheinend geht das nicht.

01:29:01.510 --> 01:29:01.810
What?

01:29:03.310 --> 01:29:04.310
Jetzt, okay, jetzt wird's

01:29:04.310 --> 01:29:05.570
aber advanced. Was?

01:29:06.750 --> 01:29:08.370
Minus, minus, transform

01:29:08.370 --> 01:29:10.310
und dann regex

01:29:10.310 --> 01:29:11.790
für den Dateinamen, oder was?

01:29:12.290 --> 01:29:13.190
Ja, komm, komm.

01:29:14.130 --> 01:29:17.890
Wir wollen's mal nicht übertreiben.

01:29:18.310 --> 01:29:19.590
Ich würd vorschlagen, wir machen einfach

01:29:19.590 --> 01:29:21.430
einen Move danach und gut ist, ja.

01:29:23.170 --> 01:29:23.990
Es muss ja nicht,

01:29:24.050 --> 01:29:25.410
wir müssen's ja nicht komplett übertreiben.

01:29:25.910 --> 01:29:27.050
So, jetzt machen wir einfach Move,

01:29:27.670 --> 01:29:29.410
FFM-Pack nach FFM-Pack.

01:29:29.750 --> 01:29:31.630
Okay, alles gut. Und schon, und schon

01:29:31.630 --> 01:29:32.830
ist es so, wie wir's haben wollen.

01:29:33.590 --> 01:29:34.030
Wunderbar.

01:29:36.650 --> 01:29:39.050
Man kann's ja mit Shell-Hacks auch

01:29:39.050 --> 01:29:39.710
übertreiben.

01:29:41.490 --> 01:29:42.990
So, und als nächstes jetzt noch

01:29:42.990 --> 01:29:44.990
einen Move von FFM-Pack-Sternchen.

01:29:45.570 --> 01:29:47.370
Nach FFM-Pack.

01:29:48.350 --> 01:29:48.510
So.

01:29:49.290 --> 01:29:50.450
Und dann

01:29:50.450 --> 01:29:55.780
nach Build-FFM-Pack.

01:29:56.620 --> 01:29:57.400
So, und wenn ich jetzt

01:29:57.400 --> 01:29:59.280
alles gemacht habe, dann

01:29:59.280 --> 01:29:59.700
sollte,

01:30:00.100 --> 01:30:02.380
dann sollte mein Docker,

01:30:02.880 --> 01:30:05.260
ups, dann sollte mein Docker-Container

01:30:05.820 --> 01:30:07.100
funktionieren.

01:30:11.750 --> 01:30:12.930
Ich, ich bin gespannt.

01:30:15.600 --> 01:30:16.940
Dann löschen wir den Container

01:30:16.940 --> 01:30:21.640
nochmal. Wir könnten

01:30:21.640 --> 01:30:23.620
auch Quiet machen beim, beim BGET.

01:30:24.200 --> 01:30:25.180
Ich glaub, minus,

01:30:25.680 --> 01:30:29.020
minus Q ist es bei BGET und, ähm,

01:30:30.760 --> 01:30:31.960
minus, minus S

01:30:31.960 --> 01:30:33.980
ist es bei, also bei BGET

01:30:33.980 --> 01:30:35.540
ist es minus Q für Quiet

01:30:35.540 --> 01:30:37.760
und bei Curl ist es, glaub ich, minus S

01:30:37.760 --> 01:30:39.460
für Silent, wenn man nicht will, dass der

01:30:39.460 --> 01:30:41.460
unnötige

01:30:41.460 --> 01:30:43.320
Terminal-Outputs macht.

01:30:49.540 --> 01:30:50.940
Okay, Run.

01:30:52.940 --> 01:30:55.440
Jetzt bin ich ja mal gespannt, ob das funktioniert, was ich hier gebaut hab.

01:30:58.720 --> 01:30:59.280
Hier sind wir.

01:30:59.280 --> 01:31:01.360
Bild, also .NET,

01:31:02.220 --> 01:31:03.080
.NET,

01:31:03.100 --> 01:31:05.260
.NET, Backend, DLN.

01:31:17.700 --> 01:31:19.140
Falsche FFM-Pack-Version?

01:31:19.560 --> 01:31:20.000
Fragezeichen?

01:31:27.160 --> 01:31:28.180
Okay, das ist ausgesprochen

01:31:28.760 --> 01:31:29.520
doof jetzt.

01:31:34.420 --> 01:31:35.640
Das ist wirklich doof.

01:31:43.140 --> 01:31:44.780
Was hat er denn für Schmerzen, man?

01:31:45.640 --> 01:31:47.000
.NET, Run. Okay.

01:31:50.840 --> 01:31:51.640
Unable to load.

01:31:51.740 --> 01:31:53.400
Ja, ich weiß. Okay, ich kopier das mal,

01:31:53.400 --> 01:31:54.480
kopier das mal wieder hoch.

01:31:59.980 --> 01:32:01.780
Ja, okay, okay. FFM-Pack

01:32:01.780 --> 01:32:03.580
nicht gefunden. Hab ich, hab ich,

01:32:03.680 --> 01:32:04.940
kapiert? Hab ich kapiert?

01:32:11.480 --> 01:32:11.740
Oh.

01:32:15.840 --> 01:32:17.900
What? Alter, der crasht einfach.

01:32:19.300 --> 01:32:20.200
Was ist denn das

01:32:20.200 --> 01:32:20.480
jetzt?

01:32:23.610 --> 01:32:24.130
Crashchamp.

01:32:31.370 --> 01:32:32.470
Einfach, einfach

01:32:32.470 --> 01:32:33.890
der Crashchamp am Start.

01:32:34.970 --> 01:32:36.150
Weil ich grad versuche,

01:32:36.550 --> 01:32:37.690
Rocker-Container zu bauen,

01:32:38.010 --> 01:32:40.430
für meine Anwendung. Dafür brauch ich FFM-Pack.

01:32:40.550 --> 01:32:42.150
Aber FFM-Pack zeigt sich

01:32:42.150 --> 01:32:43.410
nicht

01:32:43.410 --> 01:32:45.110
kooperativ.

01:32:46.490 --> 01:32:48.570
Achso, ich hab auch die falsche Version. Guck mal.

01:32:48.570 --> 01:32:53.340
Meint ihr, meint ihr, es könnte

01:32:53.340 --> 01:32:55.220
daran liegen, dass ich

01:32:55.220 --> 01:32:57.880
hier lokal FFM-Pack

01:32:57.880 --> 01:32:59.700
6-1 habe

01:32:59.700 --> 01:33:01.400
und im Container

01:33:01.400 --> 01:33:02.320
FFM-Pack

01:33:02.320 --> 01:33:04.400
6-0-1?

01:33:06.740 --> 01:33:08.920
Was meint ihr? Könnte das das Problem sein?

01:33:09.360 --> 01:33:10.500
Ich mein, es, es, es, es

01:33:10.500 --> 01:33:12.320
deutet schon ein bisschen drauf hin, gell?

01:33:12.980 --> 01:33:14.740
Wenn ich, wenn ich hier so Sachen sehe, wie

01:33:14.740 --> 01:33:16.520
einfach, einfach

01:33:16.520 --> 01:33:17.440
Instant Crash.

01:33:21.980 --> 01:33:23.180
Warum crasht der denn?

01:33:25.540 --> 01:33:26.580
Was ist das Problem, man?

01:33:31.660 --> 01:33:32.560
Oh, Wim?

01:33:34.560 --> 01:33:35.800
Okay, was, was hat er denn für

01:33:35.800 --> 01:33:37.320
Stellen? FFM-Pack-Lib.

01:33:39.860 --> 01:33:40.780
Ist das überhaupt richtig?

01:33:41.400 --> 01:33:42.460
FFM-Pack-Lib.

01:33:46.390 --> 01:33:47.910
Die sollten abwärtskompatibel sein.

01:33:48.570 --> 01:33:49.770
Das hätt ich auch gedacht.

01:33:51.010 --> 01:33:51.530
Aber

01:33:51.530 --> 01:33:55.580
vielleicht doch nicht.

01:33:59.360 --> 01:34:01.080
Was ist denn, wenn ich hier irgendeinen Mist angebe

01:34:01.080 --> 01:34:02.920
und dann ausführe?

01:34:04.520 --> 01:34:05.040
Run.

01:34:07.890 --> 01:34:09.390
Dann sagt der Method not supported.

01:34:10.350 --> 01:34:11.250
Hab ich das Richtige

01:34:11.250 --> 01:34:12.090
runtergeladen?

01:34:12.090 --> 01:34:12.210
Hm.

01:34:12.890 --> 01:34:14.190
Hab ich da irgendeinen Mist runtergeladen?

01:34:15.690 --> 01:34:18.310
FFM, also, der, der findet's offensichtlich ja auch.

01:34:18.650 --> 01:34:20.530
Okay, wir machen mal kurz hier einen Return rein,

01:34:20.610 --> 01:34:21.750
um zu gucken, ob's daran liegt.

01:34:25.240 --> 01:34:26.620
Hier haben wir mal hier irgendwie Console.

01:34:27.360 --> 01:34:28.920
Aber irgendwas, dass ich das jetzt, dass ich das

01:34:28.920 --> 01:34:30.220
nicht, das schreiben muss. Console,

01:34:30.600 --> 01:34:32.160
Console-Writeline, ja, perfekt.

01:34:34.100 --> 01:34:34.300
Was?

01:34:34.680 --> 01:34:36.720
Das artet schon wieder aus. Warum muss das alles,

01:34:36.800 --> 01:34:38.020
warum kann das einfach nicht einfach funktionieren?

01:34:39.060 --> 01:34:39.700
Hack W.

01:34:44.300 --> 01:34:45.460
Bist du der Max von YouTube?

01:34:45.960 --> 01:34:46.440
Erwischt.

01:34:50.010 --> 01:34:51.310
Jetzt kann ich mich nicht mehr,

01:34:51.370 --> 01:34:52.030
ausreden.

01:34:55.730 --> 01:34:56.530
Warum geht das?

01:34:56.930 --> 01:34:58.870
Okay, also bis hierhin funzt alles.

01:35:00.090 --> 01:35:01.750
Aber dann crasht das hier

01:35:02.230 --> 01:35:03.770
aus irgendwelchen Gründen.

01:35:04.850 --> 01:35:06.490
Das könnte aber auch woanders ran liegen.

01:35:06.490 --> 01:35:07.490
Fuck it, Alter.

01:35:11.770 --> 01:35:15.070
Der, der crasht, irgendwo, okay, okay, der crasht.

01:35:15.350 --> 01:35:16.630
Ach, ich weiß, warum der crasht.

01:35:17.110 --> 01:35:18.110
Oh, ich kack Noob.

01:35:18.550 --> 01:35:20.350
Alter, es funktioniert alles.

01:35:20.650 --> 01:35:21.190
Guck mal.

01:35:21.750 --> 01:35:22.110
Hier.

01:35:22.750 --> 01:35:24.550
Fällt euch, fällt euch hier was auf?

01:35:24.550 --> 01:35:31.490
Entdeckt ihr hier irgendwas, was im Container so garantiert nicht funktionieren kann?

01:35:33.490 --> 01:35:37.690
Da liest einfach hardcoded von meinem lokalen RTSP-Server was.

01:35:37.690 --> 01:35:39.690
Ne, das kann ja so nicht funktionieren, das gibt's ja da gar nicht.

01:35:40.010 --> 01:35:44.130
Also da sieht man auch schon, mein Error-Handling ist absolut erste Sahne.

01:35:44.270 --> 01:35:45.850
Der handelt einfach gar keine Errors.

01:35:47.410 --> 01:35:50.090
Und, und sag mal so, so sollte man das ja auch nicht machen.

01:35:50.350 --> 01:35:56.390
Das sollte normalerweise ein ordentlicher Background-Service sein, der sich auch bei Fehlern neu startet und sowas.

01:35:56.890 --> 01:35:57.930
Das machen wir dann noch.

01:35:57.990 --> 01:35:58.530
Machen wir dann noch.

01:35:58.910 --> 01:36:00.750
Okay, ich lass es jetzt erstmal so, wie es ist.

01:36:01.710 --> 01:36:03.750
Mein Docker-Container funktioniert auf jeden Fall.

01:36:04.590 --> 01:36:04.910
Jetzt.

01:36:05.170 --> 01:36:06.130
Jetzt funktioniert er.

01:36:07.030 --> 01:36:13.950
Also, funktionieren bedeutet, er crasht, okay, ja, aber, aber, aber es funktioniert.

01:36:14.150 --> 01:36:16.030
Also der Docker-Container ist korrekt.

01:36:18.440 --> 01:36:21.020
Wir können, ich kann euch das auch beweisen, dass der funktioniert.

01:36:21.800 --> 01:36:28.020
Wir machen hier einfach mal ein, kann man hier eigentlich return machen direkt?

01:36:30.140 --> 01:36:31.060
Ne, ein return rein.

01:36:31.940 --> 01:36:32.680
Wir machen dort ein run.

01:36:33.380 --> 01:36:33.480
Und ihr seht, wir haben hier ein Return.

01:36:33.480 --> 01:36:33.720
Und ihr seht, wir haben hier ein Return.

01:36:33.740 --> 01:36:33.800
Und ihr seht, wir haben hier ein Return.

01:36:33.800 --> 01:36:34.520
Zack, es läuft.

01:36:34.640 --> 01:36:34.900
Alles klar.

01:36:35.400 --> 01:36:35.620
Bam.

01:36:37.440 --> 01:36:37.920
Funst.

01:36:38.280 --> 01:36:39.340
Ah, wir brauchen noch was.

01:36:39.800 --> 01:36:45.640
Wir müssen die Interfaces überschreiben, wo er dran bindet.

01:36:48.400 --> 01:36:53.820
Und zwar ASP.NET Core Environment Variables für den Port.

01:37:02.260 --> 01:37:03.520
Das da will ich haben.

01:37:05.920 --> 01:37:07.600
Minus, minus, urls.

01:37:08.440 --> 01:37:09.700
Command Line Argument.

01:37:09.720 --> 01:37:10.760
Okay, das ist auch gut.

01:37:12.500 --> 01:37:13.740
Minus, minus, urls.

01:37:14.460 --> 01:37:15.800
Also, da wollen wir dann haben.

01:37:16.300 --> 01:37:20.520
Soll Listen an HTTP, Doppelpunkt, Doppelpunkt, Sternchen, Punkt.

01:37:21.020 --> 01:37:22.480
Jetzt brauchen wir mal irgendeinen Port hier.

01:37:22.540 --> 01:37:25.280
Keine Ahnung, 8044.

01:37:28.120 --> 01:37:29.480
Funst, nice.

01:37:30.080 --> 01:37:34.180
Okay, da muss das noch als Command in unseren Docker-Container rein.

01:37:34.180 --> 01:37:43.040
Jetzt sind wir mal so frei und kommentieren den ganzen Mediakrempel aus.

01:37:43.740 --> 01:37:48.480
Gehen wir mal in das Docker-File rein und sagen am Ende cmd.

01:37:58.920 --> 01:38:02.860
Ja, also das würde höchstwahrscheinlich...

01:38:02.860 --> 01:38:03.380
Ne, Moment.

01:38:04.140 --> 01:38:04.980
Sekunde.

01:38:14.900 --> 01:38:15.500
.net

01:38:15.500 --> 01:38:18.820
CD, Bild.

01:38:22.150 --> 01:38:22.730
.net

01:38:22.730 --> 01:38:24.910
Backend-DLL

01:38:25.330 --> 01:38:28.130
So, ich hoffe, das funst jetzt.

01:38:29.090 --> 01:38:29.770
Bild.

01:38:32.420 --> 01:38:36.120
Ja, jetzt muss er noch mal kurz das .net-Bild machen.

01:38:36.860 --> 01:38:38.620
So, dann soll der Docker-Container funktionieren.

01:38:39.680 --> 01:38:44.780
Wenn der Docker-Container jetzt funktioniert, dann werden wir anfangen, den Docker-Container ordentlich zu bauen.

01:38:45.220 --> 01:38:47.220
Weil, ich zeige euch auch gleich, was das Problem ist.

01:38:47.320 --> 01:38:48.880
Ein Problem habe ich euch ja schon gezeigt.

01:38:49.240 --> 01:38:56.380
Wenn ich jetzt was ändere in dem Container-Setup, dann dauert es halt ewig, bis das neu gebildet ist.

01:38:56.380 --> 01:39:00.300
Weil der halt von den einzelnen Steps her kaum was cachen kann, ja.

01:39:00.660 --> 01:39:06.540
Also sprich, wenn sich an meiner Rust-App was ändert, muss der quasi ab Step 6 alles neu bauen.

01:39:07.280 --> 01:39:07.900
Das dauert halt.

01:39:08.380 --> 01:39:14.480
Und dann noch schlimmer, wenn ich ein zusätzliches Paket in meinem Image haben will, dann muss er alles ab Step 4 neu bauen.

01:39:14.700 --> 01:39:15.660
Das suckt halt, ne.

01:39:16.020 --> 01:39:16.940
Okay, probieren wir mal aus.

01:39:17.040 --> 01:39:19.400
Docker, Run, CamChamp.

01:39:19.960 --> 01:39:20.620
Schauen wir mal, ob es geht.

01:39:21.420 --> 01:39:22.080
Zack, funzt.

01:39:22.480 --> 01:39:24.720
Docker-Image tut.

01:39:30.930 --> 01:39:31.370
So.

01:39:32.050 --> 01:39:36.350
Ein weiterer Punkt, warum es eine blöde Idee ist, so ein Docker-Image zu bauen.

01:39:37.010 --> 01:39:38.550
Euch fällt hier vielleicht was auf.

01:39:39.270 --> 01:39:43.150
Das Docker-Image ist 3,6 Gigabyte.

01:39:44.590 --> 01:39:47.070
Ich meine, das heißt nicht, dass es nicht funktioniert.

01:39:51.800 --> 01:39:55.800
Aber, ein bisschen groß ist es wahrscheinlich, ja.

01:40:03.310 --> 01:40:07.490
Du kannst dein Zeug auch in einer Pipeline bauen und die Artefakte nur in den Container kopieren.

01:40:22.320 --> 01:40:25.400
Ich wusste, dass gleich irgendjemand kommt und sowas in der Richtung erzählt.

01:40:25.400 --> 01:40:31.110
Wobei, da warst du doch sogar da, wo ich das gesagt habe.

01:40:31.470 --> 01:40:32.530
Lass mir das nicht so lassen.

01:40:34.750 --> 01:40:37.590
Also, man sieht, es ist ein bisschen doof.

01:40:39.210 --> 01:40:43.850
Ach so, du meinst, dass du irgendwie GitHub-Actions machst und dann den Output...

01:40:43.850 --> 01:40:47.710
Ja, okay, das wäre nochmal eine Nummer-Advancer.

01:40:47.810 --> 01:40:49.350
Das machen wir vielleicht das nächste Mal.

01:40:49.950 --> 01:40:50.650
Müssen wir mal gucken.

01:40:51.250 --> 01:40:52.890
Also, das funktioniert.

01:40:53.270 --> 01:40:56.130
Das ist allerdings, wie man sieht hier, echt sehr doof.

01:40:56.130 --> 01:40:59.210
Ja, so ein 8,6 Gigabyte Container-Image.

01:40:59.210 --> 01:41:00.010
Sackt ein bisschen.

01:41:00.470 --> 01:41:02.650
Ich schmeiße nochmal alle meine Container-Images weg.

01:41:03.110 --> 01:41:03.850
Das wird man gleich sehen.

01:41:03.930 --> 01:41:05.110
Da haben wir wieder 5 Gigabyte freigegeben.

01:41:05.530 --> 01:41:07.210
Und jetzt machen wir das Ganze nochmal in hübsch.

01:41:08.250 --> 01:41:09.210
Also, was ist denn...

01:41:09.750 --> 01:41:10.070
Ah, hier.

01:41:10.310 --> 01:41:13.030
Was ist denn die Essenz aus dem Ganzen, was wir hier machen?

01:41:15.830 --> 01:41:16.890
Wir installieren Rust.

01:41:19.210 --> 01:41:20.350
Kompilieren die Rust-App.

01:41:21.270 --> 01:41:22.190
Wir installieren .NET.

01:41:23.130 --> 01:41:24.130
Kompilieren die .NET-App.

01:41:24.230 --> 01:41:25.890
Installieren die Abhängigkeiten für .NET.

01:41:26.550 --> 01:41:27.670
Kompilieren die .NET-App.

01:41:28.910 --> 01:41:32.710
Kopieren die Rust-Library, die wir hier oben gebaut haben, in den Output.

01:41:32.790 --> 01:41:34.790
In den Output-Folder, wo dann die Anwendung drin läuft.

01:41:35.050 --> 01:41:39.810
Kopieren die Webseite in den Web-Server-Folder.

01:41:40.770 --> 01:41:42.130
Wir downloaden den FFmpeg.

01:41:43.330 --> 01:41:44.830
Und kopieren es an die richtige Stelle.

01:41:44.930 --> 01:41:46.930
Und am Ende sagen wir, wie man das Ganze starten kann.

01:41:47.210 --> 01:41:47.710
So.

01:41:49.730 --> 01:41:50.230
Also.

01:41:50.550 --> 01:41:52.230
Das Ganze jetzt noch in schön.

01:41:52.410 --> 01:41:53.270
Und es gibt so was.

01:41:53.610 --> 01:41:54.610
Also, ihr habt jetzt gesehen.

01:41:55.310 --> 01:41:57.390
Chat, ich möchte, dass ihr das alle zur Kenntnis...

01:41:57.470 --> 01:41:58.710
Ach so, fuck, das Image ist weg.

01:41:58.810 --> 01:41:59.310
Okay.

01:41:59.390 --> 01:42:03.470
Dass ihr das alle zur Kenntnis genommen habt, dass das Image, wenn man das so baut,

01:42:03.470 --> 01:42:05.470
3,6 Gigabyte groß ist, ja.

01:42:06.970 --> 01:42:08.970
Chat, Noted, das wird nachher abgefragt.

01:42:09.970 --> 01:42:14.050
Da gibt es doch so ein nice Noted-Emote.

01:42:14.150 --> 01:42:14.650
Ja.

01:42:15.150 --> 01:42:18.840
Habt ihr das, habt ihr das Noted alle, ja?

01:42:19.840 --> 01:42:22.840
Dass es 3,6 Gigabyte ist, dass es keine so gute Idee ist.

01:42:26.560 --> 01:42:27.560
Die .NET-App ist wahrscheinlich recht groß.

01:42:27.660 --> 01:42:28.560
Nee, die ist, die ist...

01:42:29.560 --> 01:42:31.560
Das ist ja, das ist ja sogar eine Framework-dependent-App.

01:42:32.560 --> 01:42:35.560
Die ist nicht groß, die ist, keine Ahnung, 10 MB oder sowas.

01:42:37.560 --> 01:42:38.060
Okay.

01:42:38.060 --> 01:42:39.360
Der Chat, der Chat hat genotet.

01:42:39.360 --> 01:42:39.860
Alles gut.

01:42:39.860 --> 01:42:40.360
Alles klar.

01:42:40.360 --> 01:42:45.360
So, und das ist natürlich doof, weil die Images fressen halt...

01:42:46.360 --> 01:42:47.860
Das ist deutlich zu groß, ja.

01:42:47.960 --> 01:42:54.360
Die Images fressen halt Speicher in der Registry, wenn das auch etwas optimierter da drinnen gespeichert wird.

01:42:54.460 --> 01:43:01.360
Aber auch die Bildzeiten sind relativ groß, weil ab jedem Step, wenn sich hier was ändert, muss das ganze Ding neu durchlaufen werden.

01:43:02.360 --> 01:43:07.360
Und dementsprechend sind natürlich auch die Updates zu den Images, die Diffs, relativ groß.

01:43:07.460 --> 01:43:09.360
Selbst wenn er nicht jedes Mal ein komplett neues Image schreibt.

01:43:10.360 --> 01:43:19.860
Der casht sich ja nur die Stages, das heißt, eure, eure Image-Registry wird über kurz oder lang echt viel Geld kosten, wenn ihr nur solche Images reinhaut.

01:43:19.960 --> 01:43:21.860
Oder wenn ihr die selbst hostet, dann...

01:43:21.960 --> 01:43:24.860
Na gut, ihr könnt's auch bei GitHub hosten, da weiß ich nicht, ab wann die was berechnen.

01:43:26.360 --> 01:43:30.360
Ist auf jeden Fall keine gute Idee, weil es dauert alles länger und suckt.

01:43:30.460 --> 01:43:35.360
Deswegen gibt es bei Docker sowas, das nennt sich Multi-Stage-Build.

01:43:35.460 --> 01:43:37.360
Die Idee dahinter ist folgendes.

01:43:37.460 --> 01:43:39.660
Man macht nicht nur ein Image.

01:43:39.660 --> 01:43:51.260
Sondern man macht für jeden Build-Step, der ein bisschen komplexer ist und Caching braucht, einen eigenen, ja, Build-Step mit eigenem Image draus.

01:43:51.360 --> 01:43:58.260
Und ganz am Ende macht man dann ein Image, wo man die Sachen aus den vorherigen Build-Steps rein kopiert.

01:43:58.360 --> 01:44:06.260
Und das wird dann das Image, was am Ende rausfällt und von Docker gestartet wird oder von Kubernetes oder von irgendeiner Container-Runtime.

01:44:06.360 --> 01:44:08.160
Hat den Vorteil, diesen ganzen Mist hier vorzunehmen.

01:44:08.160 --> 01:44:17.160
Diesen ganzen Mist hier von, wir müssen, wir müssen Rust runterladen, wir brauchen hier komplettes Ding, wir brauchen Rust-Abhängigkeiten von 1,2 Gigabyte.

01:44:17.260 --> 01:44:23.260
Fällt weg, die fallen nur im Build-Prozess an, im eigentlichen Output-Image sind die dann nicht mehr drinne.

01:44:23.360 --> 01:44:29.360
Was wir im Output-Image brauchen, warum unser Output-Image doch immer noch ein bisschen größer ist...

01:44:29.460 --> 01:44:31.860
Ja gut, ist das hier, FFmpeg.

01:44:31.960 --> 01:44:37.960
Aber auch FFmpeg kann gecached werden, weil FFmpeg-Updaten wir ja nicht laufen, sondern immer nur dann, wenn's...

01:44:37.960 --> 01:44:39.960
...notwendig ist.

01:44:40.060 --> 01:44:43.960
Also, würde ich sagen, legen wir mal los.

01:44:44.060 --> 01:44:46.960
Und bauen da mal ein Multi-Stage-Bild draus.

01:44:47.060 --> 01:44:49.960
Ich würde vorschlagen, das erste, was wir machen ist...

01:44:50.060 --> 01:44:57.160
Wir benennen das mal um, dass wir abgucken können.

01:44:57.260 --> 01:45:04.760
Docker-File-Old.

01:45:04.860 --> 01:45:06.760
Docker-File-New.

01:45:06.860 --> 01:45:07.760
Alles klar.

01:45:07.860 --> 01:45:11.760
So, das erste, was wir machen ist, wir gucken mal nach dem offiziellen Rust-Image.

01:45:11.860 --> 01:45:14.760
Weil, dieser Step hier gefällt mir beispielsweise überhaupt nicht.

01:45:14.860 --> 01:45:17.660
Dass wir unser eigenes Rust installieren.

01:45:17.760 --> 01:45:25.760
Und wenn wir eh schon mehrere Images verwenden und unser Image beim Bauen nicht gleich dem Output-Image ist...

01:45:25.860 --> 01:45:30.320
...können wir einfach auch das offizielle Rust-Image verwenden.

01:45:30.420 --> 01:45:37.480
Und wir wollen...

01:45:37.580 --> 01:45:41.480
Rust 1.7.4 Bookworm wollen wir haben.

01:45:41.580 --> 01:45:43.480
Das ist gut.

01:45:43.580 --> 01:45:47.480
Also, wir benutzen jetzt nicht Debian, sondern wir benutzen...

01:45:47.580 --> 01:45:52.480
...Rust 1.7.4 Bookworm.

01:45:52.480 --> 01:45:55.480
Das ist zufälligerweise auch ein Debian, aber das ist echt nur Zufall.

01:45:55.580 --> 01:45:57.480
Müsste nicht sein.

01:45:57.580 --> 01:46:01.480
So, und wir müssen jetzt auch kein Slim-Image oder sonst was verwenden, weil...

01:46:01.580 --> 01:46:04.480
...wir kopieren ja den Output rüber und wir verwenden das Image gar nichts.

01:46:04.580 --> 01:46:07.480
Also, wir könnten ein super fettes Image haben...

01:46:07.580 --> 01:46:11.480
...zum Bauen, wovon wir eigentlich am Ende in dem Target-Image gar nichts verwenden.

01:46:11.580 --> 01:46:14.480
So, Work-Dir-Bild ist glaube ich okay.

01:46:14.580 --> 01:46:20.480
Ähm...

01:46:20.580 --> 01:46:21.480
Update...

01:46:21.580 --> 01:46:23.480
Updaten...

01:46:23.580 --> 01:46:25.380
Können wir uns schenken?

01:46:25.480 --> 01:46:26.380
Ha!

01:46:26.380 --> 01:46:27.380
Update das Image.

01:46:30.320 --> 01:46:32.220
Install.

01:46:32.320 --> 01:46:38.220
WGAT werden wir weiterhin brauchen, weil wir ja noch FFM-Pack irgendwo runterladen müssen.

01:46:38.320 --> 01:46:42.220
Das Curl können wir uns schenken.

01:46:42.320 --> 01:46:44.220
Output kopieren.

01:46:44.320 --> 01:46:47.220
Das müssen wir in der Tat machen.

01:46:53.050 --> 01:46:54.950
Und...

01:46:55.050 --> 01:46:56.950
Wir können uns aber...

01:46:57.050 --> 01:46:58.950
Ne, wobei, ist eigentlich gut.

01:46:59.050 --> 01:47:01.950
Wir können Cargo-Bild machen nur noch, weil wir jetzt das offizielle Image benutzen.

01:47:02.050 --> 01:47:03.950
Da ist Cargo im Path.

01:47:04.950 --> 01:47:06.950
Kann er ohne Update überhaupt die Pakete finden?

01:47:07.050 --> 01:47:07.950
Wir installieren...

01:47:08.050 --> 01:47:09.950
Achso, ja, du hast recht.

01:47:10.050 --> 01:47:12.950
Das könnte sein, dass das ein Problem macht.

01:47:13.050 --> 01:47:19.020
Er würde eigentlich von ausgehen, dass das geht, aber...

01:47:19.120 --> 01:47:20.020
Ja...

01:47:20.120 --> 01:47:22.020
Ja, du hast recht.

01:47:22.120 --> 01:47:26.030
Ja, wir lassen es drin.

01:47:26.130 --> 01:47:27.030
Ihr habt recht.

01:47:27.130 --> 01:47:29.030
Wir lassen es drin.

01:47:29.130 --> 01:47:31.030
So, das können wir uns erstmal schenken hier.

01:47:31.130 --> 01:47:32.030
Wir machen das mal weg hier.

01:47:32.130 --> 01:47:33.030
Bam.

01:47:33.130 --> 01:47:34.030
So, wir haben es ja da drüben noch stehen.

01:47:34.130 --> 01:47:36.030
So, Cargo-Bild-Release.

01:47:36.130 --> 01:47:38.930
Bis zu dem Step sollte das jetzt eigentlich schon durchlaufen.

01:47:38.930 --> 01:47:42.930
Probieren wir mal aus.

01:47:43.030 --> 01:47:45.930
Ob das jetzt funzt?

01:47:48.690 --> 01:47:51.590
Docker-Bild.

01:47:51.690 --> 01:47:54.280
Ah.

01:47:54.380 --> 01:47:56.280
Sieht eigentlich schon mal ganz gut aus.

01:47:56.380 --> 01:47:59.280
Okay, das ist nur Update aktuell.

01:47:59.380 --> 01:48:08.120
Du-du-du-du-du-du-du-du-du-du-du-du-du-du-du.

01:48:08.220 --> 01:48:12.490
Und warum macht der jetzt so Pause-Champ?

01:48:12.590 --> 01:48:14.490
Warum pausiert Champ das gerade so?

01:48:14.590 --> 01:48:15.490
Upget?

01:48:15.590 --> 01:48:18.490
Ach, ne, das war doch das Docker-Image-Pull.

01:48:18.490 --> 01:48:20.490
Ach so.

01:48:20.590 --> 01:48:23.490
Aber guck mal, Cargo-Bild funktioniert jetzt.

01:48:23.590 --> 01:48:25.490
Direkt out of the box.

01:48:25.590 --> 01:48:28.490
Ohne, dass man irgendwie einen Handstand machen muss, dass es funktioniert.

01:48:28.590 --> 01:48:30.490
Alter, meine Kiste, Alter.

01:48:30.590 --> 01:48:32.490
Guckt euch das mal an.

01:48:32.590 --> 01:48:37.490
Die VM ist einfach mal komplett ausgelastet, wenn Rust baut.

01:48:37.590 --> 01:48:41.490
Blazingly-Fast-Compile-Stells.

01:48:41.590 --> 01:48:58.870
Blazingly-Fast, aber CPU-intensive.

01:48:58.970 --> 01:48:59.870
Ja, das stimmt schon.

01:48:59.870 --> 01:49:02.870
Sobald es jetzt in Docker läuft, wir könnten es ja theoretisch auch irgendwie limitieren.

01:49:02.970 --> 01:49:04.870
Aber wozu? Aber wozu?

01:49:04.970 --> 01:49:06.870
Exporting-Layers.

01:49:06.970 --> 01:49:08.870
Okay, das ist noch kein, keine so gut.

01:49:08.970 --> 01:49:10.870
Das hat jetzt bis jetzt noch nicht viel gebracht.

01:49:10.970 --> 01:49:14.950
Weil wir haben ja noch kein Target-Image.

01:49:15.050 --> 01:49:15.950
Wir haben jetzt so, so.

01:49:16.050 --> 01:49:25.950
Okay, das ist der, das ist der Build-Step für, für Rust.

01:49:26.050 --> 01:49:40.570
Ich würde sagen, wir machen in dem gleichen Step die, die FFmpeg-Geschichte.

01:49:40.670 --> 01:49:42.570
Weil sonst muss ich ja jede,

01:49:42.570 --> 01:49:46.570
jede Änderung, die machen wir übrigens auch davor.

01:49:46.670 --> 01:49:51.570
Sonst müsste sich ja bei jeder Änderung quasi in Rust jetzt wieder neu FFmpeg runterladen.

01:49:51.670 --> 01:50:06.340
Das ist natürlich auch nicht, nicht irgendwie Sinn und Zweck der Sache, ne.

01:50:06.440 --> 01:50:11.910
Machen wir mal hier run wget FFmpeg.

01:50:12.010 --> 01:50:14.910
Wir können das auch in einen eigenen, in einen eigenen Step ausladen.

01:50:15.010 --> 01:50:17.910
Also hier wget FFmpeg.

01:50:18.010 --> 01:50:20.910
Und dann wird FFmpeg umbenannt.

01:50:20.910 --> 01:50:27.540
In, vielleicht sollte ich das nicht einfach nur FFmpeg nennen.

01:50:27.640 --> 01:50:32.540
Sondern FFmpeg, äh, wie heißt denn der Kram?

01:50:32.640 --> 01:50:37.620
FFmpeg-n.

01:50:37.720 --> 01:50:41.380
Sehr schön.

01:50:41.480 --> 01:50:43.380
So, das können wir machen.

01:50:45.180 --> 01:50:46.080
Gut.

01:50:46.180 --> 01:50:48.080
So, das ist der erste Build-Step.

01:50:48.180 --> 01:50:52.080
Also FFmpeg runterladen, FFmpeg entpacken, Rust-Zeug kompilieren.

01:50:52.180 --> 01:50:55.080
Und jetzt kommt der Trick bei Multistage-Builds.

01:50:55.180 --> 01:50:57.080
Für den .NET-Part.

01:50:57.080 --> 01:51:00.080
Machen wir ein neues Build-Image.

01:51:00.180 --> 01:51:05.080
Also wieder from, jetzt muss ich mal gucken, .NET-Docker-Images.

01:51:05.180 --> 01:51:14.510
SDK brauchen wir jetzt, genau.

01:51:14.610 --> 01:51:17.510
SDK.

01:51:17.610 --> 01:51:32.190
From, äh, MC, äh, das ist die Microsoft-Docker SDK 8.0.

01:51:32.290 --> 01:51:34.190
Muss dahinter als Versions-Tag.

01:51:34.290 --> 01:51:41.240
Wenn ich jetzt wüsste, welche Versions-Tag es gäbe, wäre schon sehr nice.

01:51:41.340 --> 01:51:43.240
Sieht man das, wenn man hier drauf geht?

01:51:43.340 --> 01:51:45.240
Nein?

01:51:45.340 --> 01:51:48.240
Das wäre auch deutlich zu einfach Microsoft, wenn das funktionieren würde.

01:51:48.340 --> 01:51:51.240
Ja, Feature-Tags.

01:51:51.340 --> 01:51:56.240
Wäre trotzdem ganz nice zu wissen, was es sonst noch gibt.

01:51:56.340 --> 01:52:02.150
Die haben garantiert noch mehr Tags.

01:52:02.250 --> 01:52:07.340
Naja, gut.

01:52:07.440 --> 01:52:08.340
Scheiß drauf.

01:52:08.440 --> 01:52:09.340
Wir, wir, wir machen's.

01:52:09.440 --> 01:52:11.340
Wir machen so.

01:52:11.440 --> 01:52:13.340
So, das Ding nennen wir jetzt.

01:52:13.440 --> 01:52:16.240
Okay, das nennen wir, das hier heißt nicht Build, sondern das heißt Rust.

01:52:16.340 --> 01:52:19.240
Und das hier heißt, äh, .NET.

01:52:19.340 --> 01:52:20.240
Weil das, die...

01:52:20.240 --> 01:52:21.140
Ups.

01:52:21.240 --> 01:52:27.940
Die Namen brauchen wir später, weil wir die Dateien von den einzelnen Steps rauskopieren wollen.

01:52:28.040 --> 01:52:28.940
Machen wir mal hier.

01:52:29.040 --> 01:52:29.940
Komm, ich seh mal.

01:52:30.040 --> 01:52:30.940
Ist okay.

01:52:31.040 --> 01:52:31.940
Build.

01:52:32.040 --> 01:52:32.940
Rust.

01:52:33.040 --> 01:52:33.940
Nächster Step.

01:52:34.040 --> 01:52:36.940
Build.NET.

01:52:37.040 --> 01:52:38.940
So, Microsoft-Image wird gepullt.

01:52:39.040 --> 01:52:39.940
Hm.

01:52:40.040 --> 01:52:40.940
Und jetzt?

01:52:41.040 --> 01:52:45.940
Wir machen wieder Work, Work-Dir-Build.

01:52:46.040 --> 01:52:47.940
Weil, warum nicht?

01:52:48.040 --> 01:52:50.940
So, und jetzt können wir diesen Kram hier rüber kopieren.

01:52:50.940 --> 01:52:53.940
Set no numbers.

01:52:54.040 --> 01:52:55.940
Jetzt können wir diesen Kram hier rüber kopieren.

01:52:56.040 --> 01:52:58.630
Copy.

01:52:58.730 --> 01:53:00.630
Und jetzt kommen sich die Dinger auch nicht mehr in die Quere.

01:53:00.730 --> 01:53:02.630
Das hier ist ein eigener Container beim Bilden.

01:53:02.730 --> 01:53:06.630
Und das hier ist ein eigener Container beim Bilden.

01:53:06.730 --> 01:53:08.630
Okay, jetzt wird das Ganze wieder...

01:53:08.730 --> 01:53:10.630
.NET run. .NET.

01:53:10.730 --> 01:53:11.630
Haben wir's noch hier.

01:53:11.730 --> 01:53:12.630
Publish.

01:53:12.730 --> 01:53:18.460
Okay, da ist...

01:53:18.560 --> 01:53:20.460
Zack.

01:53:20.560 --> 01:53:26.360
Das können wir uns auch sparen, weil .NET garantiert im .NET-Container verfügbar sein wird.

01:53:26.360 --> 01:53:30.360
Werden die ganzen Stages nacheinander gleichzeitig abgearbeitet?

01:53:30.460 --> 01:53:34.360
Gleichzeitig, es sei denn, die eine hat Abhängigkeit auf die andere.

01:53:34.460 --> 01:53:36.360
Das ist relativ schlau.

01:53:36.460 --> 01:53:40.360
Mittlerweile, die ganze Build-Kit-Docker-Bild-Geschichte.

01:53:40.460 --> 01:53:42.360
Du wirst, du wirst gleich sehen.

01:53:42.460 --> 01:53:46.870
Der macht das parallel, es sei denn, es hängt voneinander ab.

01:53:46.970 --> 01:53:47.870
Oh ja, gut.

01:53:47.970 --> 01:53:51.870
Und wenn sie unterschiedlich schnell sind, dann sieht's halt auch nicht parallel aus, aber sie sind parallel.

01:53:51.970 --> 01:53:52.870
Okay.

01:53:52.970 --> 01:53:55.870
.NET publish-c-release-output.

01:53:55.870 --> 01:53:58.870
Eigentlich kann ich mir das komplett schenken, den Output.

01:53:58.970 --> 01:54:00.870
Das kann ruhig das Default-Verzeichnis sein.

01:54:00.970 --> 01:54:02.870
Das ist okay.

01:54:02.970 --> 01:54:08.370
Okay, und jetzt, und jetzt kommt der, und jetzt kommt der eigentliche Trick.

01:54:08.470 --> 01:54:10.370
Jetzt kann man unten nochmal sagen hier...

01:54:10.470 --> 01:54:14.370
App oder so, nennen wir's einfach mal.

01:54:14.470 --> 01:54:15.370
App.

01:54:15.470 --> 01:54:16.370
So, und jetzt sagen wir from.

01:54:16.470 --> 01:54:21.370
Jetzt brauchen wir das Microsoft-Image für ASP.NET Core.

01:54:21.470 --> 01:54:23.370
Hier, das da brauchen wir.

01:54:23.470 --> 01:54:32.210
Wahrscheinlich einfach nur das.

01:54:32.310 --> 01:54:33.210
Moment, ach, nicht runtime.

01:54:33.310 --> 01:54:34.210
ASP.NET da ist.

01:54:34.210 --> 01:54:35.210
ASP.NET da ist doch.

01:54:35.310 --> 01:54:40.850
Genau.

01:54:40.950 --> 01:54:41.850
From.

01:54:41.950 --> 01:54:42.850
So.

01:54:42.950 --> 01:54:43.850
S.

01:54:43.950 --> 01:54:44.850
Gachibus.

01:54:44.950 --> 01:54:46.850
Also runtime oder sowas.

01:54:46.950 --> 01:54:47.850
Keine Ahnung.

01:54:47.950 --> 01:54:50.850
Ich glaub Microsoft nennt das Zeug immer runtime.

01:54:50.950 --> 01:54:51.850
So.

01:54:51.950 --> 01:54:53.850
Workdir.

01:54:53.950 --> 01:54:55.850
Nennen wir's jetzt einfach mal App.

01:54:55.950 --> 01:54:59.850
Dass wir irgendwie, dass wir einen Unterschied haben zwischen, das ist das Output-Image.

01:54:59.950 --> 01:55:00.850
So.

01:55:00.950 --> 01:55:01.850
Jetzt machen wir an der Stelle mal noch nix.

01:55:01.950 --> 01:55:02.850
Ja.

01:55:02.950 --> 01:55:05.850
Ich, ich führ's jetzt einfach mal aus.

01:55:05.950 --> 01:55:06.850
Ist es nicht?

01:55:06.950 --> 01:55:07.850
Wir kommen Ende zwei.

01:55:07.850 --> 01:55:09.850
Auf alle anderen Erfolgen ein Runstatement zusammenzufügen.

01:55:09.950 --> 01:55:10.850
Jedes Command in Dockerfall eigenes Layer.

01:55:10.950 --> 01:55:19.400
Also, ja, da hast du, da hast du nicht unrecht.

01:55:19.500 --> 01:55:22.400
Und zumal in dem Fall macht das Caching auch relativ wenig Sinn.

01:55:22.500 --> 01:55:23.400
Das ist richtig.

01:55:23.500 --> 01:55:26.400
Aber, ja, ich werd's verkraften.

01:55:26.500 --> 01:55:31.800
Ja, es ist schon, ist schon was dran.

01:55:31.900 --> 01:55:35.800
Ich meine, es sei denn, es macht Sinn, dass man die einzelnen Layer cached für sich genommen.

01:55:35.900 --> 01:55:40.310
Aber du hast, du hast recht, ja.

01:55:40.410 --> 01:55:44.070
Okay, also.

01:55:44.170 --> 01:55:46.070
Docker-Bild.

01:55:46.070 --> 01:55:49.070
Jetzt werdet ihr sehen, es sei denn, es kackt ab.

01:55:49.170 --> 01:55:53.600
Es sei denn, es kackt ab.

01:55:53.700 --> 01:55:55.600
Wir müssen jetzt mehrere Builds parallel sehen.

01:55:55.700 --> 01:56:00.600
Nämlich einmal den Rust-Container, einmal den .NET-Container und den Output-Container am Ende.

01:56:00.700 --> 01:56:05.600
Okay, er, er, er pullt erst mal das, er pullt erst mal das Image.

01:56:05.700 --> 01:56:07.600
Zack, und schon ist er fertig.

01:56:07.700 --> 01:56:10.600
Das ging.

01:56:10.700 --> 01:56:12.600
Ach so, ha.

01:56:12.700 --> 01:56:14.600
Docker ist zu schlau, Leute.

01:56:14.700 --> 01:56:16.500
Docker ist zu schlau.

01:56:16.600 --> 01:56:18.500
Der erkennt, dass der, dass von diesem Image nichts benutzt wird.

01:56:18.500 --> 01:56:20.500
Und deswegen baut er es nicht, vermutlich.

01:56:20.600 --> 01:56:24.500
Okay, also muss ich jetzt, muss ich jetzt doch so tun, als will ich was davon haben.

01:56:24.600 --> 01:56:30.500
Und zwar, man kann jetzt, also wir haben ja hier oben die .NET-App, ähm, die .NET-App gebildet, gebildet.

01:56:30.600 --> 01:56:31.500
Und hier die Rust-App.

01:56:31.600 --> 01:56:33.500
Und das ist mein, mein Ziel-Image.

01:56:33.600 --> 01:56:39.500
Das heißt, im Endeffekt muss ich jetzt sowas machen hier, wie copy und jetzt from.

01:56:39.600 --> 01:56:41.500
Wobei, ich glaube, das können wir uns sparen.

01:56:41.600 --> 01:56:42.500
Copy from.

01:56:42.600 --> 01:56:48.400
Hier den Name von dem Image zur Build-Zeit, wo die Dateien liegen.

01:56:48.400 --> 01:56:49.400
Copy from Rust.

01:56:49.500 --> 01:56:51.400
Slash Build.

01:56:51.500 --> 01:56:53.400
Weil, work dir, slash Build.

01:56:53.500 --> 01:56:59.400
Und da drinne gibt es jetzt ein FFmpeg-Folder, zum Beispiel.

01:56:59.500 --> 01:57:03.400
Und den kopieren wir einfach rüber uns als FFmpeg, ja.

01:57:03.500 --> 01:57:19.000
So, als nächstes brauchen wir from Rust noch, ja.

01:57:19.100 --> 01:57:25.370
Build target release libwebrtcrust.so.

01:57:25.470 --> 01:57:29.270
Soll im Prinzip hier exakt genauso heißen.

01:57:29.470 --> 01:57:35.370
Und dann brauchen wir als letzten Step noch, ich bin mir nicht sicher, ob die Reihenfolge gerade die beste ist.

01:57:35.470 --> 01:57:39.370
Und dann brauchen wir als letzten Step noch die .NET-App.

01:57:39.470 --> 01:57:44.370
Und zwar, jetzt ist es from.net.

01:57:44.470 --> 01:57:46.370
From.net.

01:57:46.470 --> 01:57:48.370
Und jetzt kann ich mir immer nicht merken, wo dieser ganze Mist liegt.

01:57:48.470 --> 01:57:50.370
Auf jeden Fall schon mal in Build.

01:57:50.470 --> 01:57:52.370
Habe ich das hier irgendwo stehen?

01:57:52.470 --> 01:57:53.370
Ne.

01:57:54.850 --> 01:57:55.750
Ähm.

01:57:55.850 --> 01:58:04.200
Minus O.

01:58:04.300 --> 01:58:12.290
Ja, auch in Release, aber diesen...

01:58:12.290 --> 01:58:14.290
Liegt FFmpeg nicht unter slash Build?

01:58:14.390 --> 01:58:15.290
Slash...

01:58:15.390 --> 01:58:16.290
Ne.

01:58:16.390 --> 01:58:17.290
Ne.

01:58:17.390 --> 01:58:18.290
FFmpeg kommt hier...

01:58:18.390 --> 01:58:19.290
Achso, Moment.

01:58:19.390 --> 01:58:20.290
Wait a minute.

01:58:20.390 --> 01:58:29.140
Du hast recht.

01:58:29.240 --> 01:58:31.140
Das hätte übrigens gar nicht funktioniert an der Stelle.

01:58:31.240 --> 01:58:33.140
Weil es Verzeichnis nicht gegeben hätte.

01:58:33.240 --> 01:58:34.140
So ist richtig.

01:58:34.240 --> 01:58:35.140
So ist richtig.

01:58:35.240 --> 01:58:36.140
Siehste?

01:58:36.240 --> 01:58:37.140
Chatge...

01:58:37.240 --> 01:58:40.600
High IQ wieder.

01:58:40.700 --> 01:58:41.600
So.

01:58:41.700 --> 01:58:42.600
From Build.

01:58:42.700 --> 01:58:44.600
Ich kann es mir einfach immer nicht merken, wo diese...

01:58:44.700 --> 01:58:45.600
Wo .NET...

01:58:45.700 --> 01:58:47.600
.NET publish-c release.

01:58:47.700 --> 01:58:48.600
Alles klar.

01:58:48.700 --> 01:58:49.600
Gib ihm.

01:58:49.700 --> 01:58:50.600
Wat?

01:58:50.600 --> 01:58:51.600
Was?

01:58:51.700 --> 01:58:52.600
Achso.

01:58:52.700 --> 01:58:53.600
Ha.

01:58:53.700 --> 01:58:54.600
Ja.

01:58:54.700 --> 01:58:57.490
Ja, ja.

01:58:57.590 --> 01:59:04.280
Ist ja gut.

01:59:04.380 --> 01:59:05.280
Nicht Docker.

01:59:05.380 --> 01:59:07.720
Okay.

01:59:07.820 --> 01:59:08.720
Bin.

01:59:08.820 --> 01:59:09.720
Release.

01:59:09.820 --> 01:59:10.720
Net.

01:59:10.820 --> 01:59:16.430
8.

01:59:16.530 --> 01:59:20.400
Publish.

01:59:20.500 --> 01:59:21.400
Bin.

01:59:21.500 --> 01:59:22.400
Release.

01:59:22.500 --> 01:59:23.400
Net.

01:59:23.500 --> 01:59:24.400
8.

01:59:24.500 --> 01:59:25.400
Publish.

01:59:25.500 --> 01:59:30.080
Alright.

01:59:30.180 --> 01:59:31.080
Bin.

01:59:31.180 --> 01:59:32.080
Release.

01:59:32.180 --> 01:59:33.080
Publish.

01:59:33.180 --> 01:59:34.080
Okay.

01:59:34.180 --> 01:59:35.080
Auch hier.

01:59:35.180 --> 01:59:36.080
Gleicher.

01:59:36.180 --> 01:59:37.080
Gleicher.

01:59:37.180 --> 01:59:39.980
Soll die ganzen Cramply einfach in das Verzeichnis schmeißen?

01:59:40.080 --> 01:59:40.980
Einfach.

01:59:40.980 --> 01:59:42.480
Einfach eigenen Output setzen?

01:59:42.580 --> 01:59:42.980
Ja.

01:59:43.080 --> 01:59:44.580
Das wäre auch eine Möglichkeit.

01:59:44.680 --> 01:59:44.980
So.

01:59:45.080 --> 01:59:51.880
Und als letztes kopieren wir noch von Backend www...

01:59:51.980 --> 01:59:53.180
Das da machen wir im Endeffekt.

01:59:53.280 --> 01:59:53.480
Moment.

01:59:53.580 --> 01:59:53.980
Das machen wir nicht.

01:59:54.080 --> 01:59:59.930
wwwroot nach wwwroot.

02:00:00.030 --> 02:00:00.730
Alles klar.

02:00:00.830 --> 02:00:02.730
So.

02:00:02.830 --> 02:00:04.530
Das CMD sparen wir uns jetzt mal.

02:00:04.630 --> 02:00:05.630
Ich hoffe, das funzt jetzt.

02:00:05.730 --> 02:00:06.330
Docker Build.

02:00:06.430 --> 02:00:08.030
Bam.

02:00:08.130 --> 02:00:08.330
Guck.

02:00:08.430 --> 02:00:10.530
Man sieht, er macht die Sachen auch parallel.

02:00:10.630 --> 02:00:11.730
Hier oben ist er am .NET Image.

02:00:11.830 --> 02:00:12.930
Hier unten ist er am Rust Image.

02:00:12.930 --> 02:00:23.040
Guck, hier oben lädt er noch das .NET Image runter.

02:00:23.140 --> 02:00:24.040
Hier unten baut er schon Rust.

02:00:24.140 --> 02:00:25.740
Also es geht bis zu dem Punkt parallel.

02:00:25.840 --> 02:00:28.940
Das letzte, das Output Image, kann er natürlich nicht parallel bauen,

02:00:29.040 --> 02:00:31.240
weil es Abhängigkeiten zu diesen beiden Images hat.

02:00:31.340 --> 02:00:40.840
Hi, wieso muss das FFmpeg in das Rust Image kopiert werden?

02:00:40.940 --> 02:00:42.940
War das nicht vorher für .NET dabei?

02:00:43.040 --> 02:00:43.640
Ne.

02:00:43.740 --> 02:00:47.740
Also übrigens, ich gebe dir recht, es ist ein bisschen irritierend,

02:00:47.840 --> 02:00:48.940
dass es in dem Rust Image ist.

02:00:49.040 --> 02:00:50.340
Ich hatte einfach keinen Bock.

02:00:50.340 --> 02:00:53.740
Für den Download von FFmpeg noch einen eigenen Build-Step zu machen.

02:00:53.840 --> 02:00:56.340
Eigentlich gehört das in den Rust-Step gar nicht rein.

02:00:56.440 --> 02:00:59.640
Das sollte eigentlich ein eigener Step vor allen anderen sein

02:00:59.740 --> 02:01:01.140
oder halt zumindest ein eigenes Image.

02:01:01.240 --> 02:01:04.140
Das war aber nicht im .NET dabei.

02:01:04.240 --> 02:01:04.940
Ne, ne.

02:01:05.040 --> 02:01:06.240
Das muss man runterladen neu.

02:01:06.340 --> 02:01:09.240
So.

02:01:09.340 --> 02:01:10.940
Das hat funktioniert, oder?

02:01:11.040 --> 02:01:12.940
Docker run.

02:01:13.040 --> 02:01:13.940
Schauen wir mal.

02:01:14.040 --> 02:01:15.740
Ups.

02:01:15.840 --> 02:01:19.740
Ach, ich habe keinen Command angegeben, oder?

02:01:19.840 --> 02:01:20.640
Ach so.

02:01:20.740 --> 02:01:21.740
Tja.

02:01:22.040 --> 02:01:25.940
Das ist natürlich nicht so High-IQ gewesen.

02:01:26.040 --> 02:01:34.430
Jetzt müssen wir auch nicht mehr wechseln in Build und auch nicht mehr Test starten,

02:01:34.530 --> 02:01:38.430
sondern wir können einfach sagen .NET backend-dll urls.

02:01:38.530 --> 02:01:42.430
Guck mal, passt mal auf, wie schnell das jetzt bildet auf einmal.

02:01:42.530 --> 02:01:44.430
Bam, fertig.

02:01:44.530 --> 02:01:46.430
Run.

02:01:46.530 --> 02:01:47.430
Geht.

02:01:47.530 --> 02:01:49.430
Easy.

02:01:49.530 --> 02:01:55.760
Easy as fuck. Easy as fuck.

02:01:55.760 --> 02:01:56.660
So, und jetzt passt mal auf.

02:01:56.760 --> 02:01:59.660
Docker-Images.

02:01:59.760 --> 02:02:02.660
Es ist zwar immer noch groß.

02:02:02.760 --> 02:02:05.660
Aber was ist denn daran jetzt noch so groß, Leute?

02:02:05.760 --> 02:02:08.660
Ich meine, das hier ist das Richtige.

02:02:08.760 --> 02:02:10.660
Was ist denn da immer noch so groß?

02:02:10.760 --> 02:02:13.660
Ich meine, FFmpeg ist 140 MB.

02:02:13.760 --> 02:02:17.300
Okay, wir checken mal.

02:02:17.400 --> 02:02:18.300
Wir checken mal kurz mal.

02:02:18.400 --> 02:02:19.300
Ach so, ja doch.

02:02:19.400 --> 02:02:23.300
Die .NET, das ganze .NET-Framework ist ja dabei.

02:02:23.400 --> 02:02:25.300
Und FFmpeg.

02:02:25.300 --> 02:02:27.200
Doch, doch, okay.

02:02:27.300 --> 02:02:28.200
Das lasse ich mir gefallen.

02:02:28.300 --> 02:02:29.200
Ah, wir können.

02:02:29.300 --> 02:02:30.200
Leute, ich habe eine Idee.

02:02:30.300 --> 02:02:32.200
Wir können FFmpeg noch ein bisschen kleiner machen.

02:02:32.300 --> 02:02:34.200
Wir können FFmpeg noch ein bisschen kleiner machen.

02:02:34.300 --> 02:02:35.200
Ja.

02:02:35.300 --> 02:02:37.200
Run.

02:02:37.300 --> 02:02:44.200
Wir gucken mal kurz.

02:02:44.300 --> 02:02:46.200
Ja, guck mal.

02:02:46.300 --> 02:02:49.200
Allein schon der Ordner.

02:02:49.300 --> 02:02:54.200
Allein schon, guck mal, allein schon der Ordner ist 166 MB.

02:02:54.300 --> 02:02:57.200
Und der Rest, der Rest ist einfach das Image.

02:02:57.300 --> 02:02:59.200
Los.

02:02:59.400 --> 02:03:02.200
Benutzt du was nicht AOT-kompatibles?

02:03:02.300 --> 02:03:06.150
Ich glaube nicht.

02:03:06.250 --> 02:03:15.150
Theoretisch, theoretisch könnte ich auch das ganze AOT compilen lassen.

02:03:15.250 --> 02:03:17.150
Das ist noch ein bisschen kleiner.

02:03:17.250 --> 02:03:19.150
Ja, das können wir das nächste Mal machen.

02:03:19.250 --> 02:03:21.150
Ja.

02:03:21.250 --> 02:03:26.000
Das können wir das nächste Mal machen.

02:03:26.100 --> 02:03:29.000
Als nächstes, ich kann mir, ich kann mir das mal aufschreiben.

02:03:29.100 --> 02:03:33.000
Also was wir als nächstes, wir können als nächstes eventuell, wobei das haben wir schon mal gehabt.

02:03:33.000 --> 02:03:34.900
Bild, kann man machen.

02:03:35.000 --> 02:03:41.510
Oder, ähm, ja.

02:03:41.610 --> 02:03:44.510
Aber wir können, wir können noch was relativ Simples machen.

02:03:44.610 --> 02:03:45.510
Das ist kleiner mit.

02:03:45.610 --> 02:03:47.510
Und zwar, wir können.

02:03:47.610 --> 02:03:49.510
Guck mal.

02:03:49.610 --> 02:03:51.510
Wir gucken mal kurz, wie groß hier was ist.

02:03:51.610 --> 02:03:53.510
Ja, update.

02:03:53.610 --> 02:03:55.510
Wie gibt es, äh.

02:03:55.610 --> 02:03:58.820
Gibt es das nicht für Debian?

02:03:58.920 --> 02:04:04.270
Doch, gibt es.

02:04:04.370 --> 02:04:06.270
So, also, guck mal.

02:04:06.370 --> 02:04:08.270
User ist 210 MB groß.

02:04:08.370 --> 02:04:10.270
App ist, also wir können das, wir kriegen das nicht kleiner.

02:04:10.370 --> 02:04:12.270
Das Image.

02:04:12.270 --> 02:04:14.170
Das Image ist halt nun mal, ne.

02:04:14.270 --> 02:04:16.170
100 MB .NET.

02:04:16.270 --> 02:04:19.170
100 MB, äh, Abhängigkeiten von .NET.

02:04:19.270 --> 02:04:20.170
Aus irgendwelchen Gründen.

02:04:20.270 --> 02:04:21.170
Perl Base.

02:04:21.270 --> 02:04:23.170
Ganz essentiell, dass Perl da drauf ist.

02:04:23.270 --> 02:04:25.170
Aber ist für uns nicht.

02:04:25.270 --> 02:04:27.170
Aber was wir machen können, fällt mir gerade ein.

02:04:27.270 --> 02:04:29.170
Wir können bei FFmpeg noch was löschen.

02:04:29.270 --> 02:04:32.170
Und zwar, wir können aus FFmpeg, das probieren wir mal aus.

02:04:32.270 --> 02:04:42.170
Wir können aus FFmpeg, theoretisch, License, Bin, Doc, Include und Man löschen.

02:04:42.370 --> 02:04:44.170
Probieren wir das mal.

02:04:44.270 --> 02:04:49.880
Guck mal.

02:04:49.980 --> 02:04:53.880
Haben wir noch einmal 20 MB gespart.

02:04:53.980 --> 02:04:57.380
Das könnten wir tatsächlich machen.

02:04:57.480 --> 02:05:01.650
Weil das brauchen wir nicht.

02:05:01.750 --> 02:05:15.410
Jetzt sieht man übrigens auch, dass es keine gute Idee war, von mir, das FFmpeg Zeug in den Buildstep von Rust reinzupacken.

02:05:15.510 --> 02:05:17.410
Weil jetzt muss ich Rust neu bilden.

02:05:17.510 --> 02:05:25.370
Dann direkt nur Lib kopieren.

02:05:25.370 --> 02:05:32.500
Du meinst hier, dass wir quasi sagen, Lib.

02:05:32.600 --> 02:05:38.220
Aber das verzeichnet, dann meckert er, dass es das verzeichnet.

02:05:38.320 --> 02:05:42.220
Kann man bei mv.create.directory direkt mit angeben?

02:05:42.320 --> 02:05:44.220
mv-p oder sowas?

02:05:44.320 --> 02:05:48.750
Ne.

02:05:48.850 --> 02:05:50.750
Ne, natürlich nicht.

02:05:50.850 --> 02:05:53.750
Ach, im Runtime Image.

02:05:53.850 --> 02:05:54.750
Ja, sehr gute Idee.

02:05:54.850 --> 02:05:55.750
Excellent.

02:05:55.850 --> 02:05:56.750
Pfeifert.

02:05:56.850 --> 02:05:57.750
Doch, genau.

02:05:57.850 --> 02:06:00.750
Wir kopieren FFmpeg.

02:06:00.850 --> 02:06:04.450
Lib.

02:06:04.450 --> 02:06:16.020
Aber da ist auch wieder hier kein Verzeichnis da.

02:06:16.120 --> 02:06:23.290
Ich meine, wir könnten es auch so machen.

02:06:23.390 --> 02:06:27.290
Und hier einfach nur FFmpeg reinschreiben.

02:06:27.390 --> 02:06:28.290
Ist ja auch nicht verkehrt.

02:06:28.390 --> 02:06:30.290
Testen wir mal, ob das funktioniert.

02:06:30.390 --> 02:06:32.290
FFmpeg.

02:06:32.390 --> 02:06:34.290
mv.ffmpeg.

02:06:34.390 --> 02:06:36.290
Lib.

02:06:36.390 --> 02:06:37.290
Nur nach Lib.

02:06:37.390 --> 02:06:39.290
rm-ffmpeg.

02:06:39.390 --> 02:06:41.290
Yes.

02:06:41.390 --> 02:06:46.910
Lib.

02:06:46.910 --> 02:06:48.810
Schaut mal, ob das jetzt läuft.

02:06:48.910 --> 02:06:54.380
Run.

02:06:54.480 --> 02:06:55.380
Ja, Kunst.

02:06:55.480 --> 02:06:56.380
Wird funktionieren.

02:06:56.480 --> 02:06:57.380
Können wir so machen, ja.

02:06:57.480 --> 02:06:59.380
Ja, eigentlich gar nicht so schlecht.

02:06:59.480 --> 02:07:01.380
Wir kopieren nur Lib rüber.

02:07:01.480 --> 02:07:06.910
Benennen das Verzeichnis in FFmpeg um.

02:07:07.010 --> 02:07:13.910
Kann Docker Copy auch ganze Pfade anlegen?

02:07:14.010 --> 02:07:19.060
Das ist eine gute Frage.

02:07:19.160 --> 02:07:37.090
Entscheidend.

02:07:37.190 --> 02:07:43.060
Ne.

02:07:43.160 --> 02:07:47.060
Ich meine, wir können mkdir davor machen, ja.

02:07:47.060 --> 02:07:47.960
Das wird natürlich...

02:07:48.060 --> 02:07:49.960
Ah, das KLG anscheinend nicht.

02:07:50.060 --> 02:07:52.960
Aber so müsste es auch funktionieren.

02:07:53.060 --> 02:07:53.960
Ja.

02:07:54.060 --> 02:07:56.960
Das ist natürlich blöd, dass ich das FFmpeg...

02:07:57.060 --> 02:08:01.620
Stimmt.

02:08:01.720 --> 02:08:02.620
Ich bin verkehrt.

02:08:02.720 --> 02:08:03.620
Ja, ja.

02:08:03.720 --> 02:08:04.620
Nicht Docker CP.

02:08:04.720 --> 02:08:05.620
Docker File.

02:08:05.720 --> 02:08:06.620
Docker File.

02:08:06.720 --> 02:08:07.620
Copy.

02:08:07.720 --> 02:08:22.550
Copy.

02:08:22.650 --> 02:08:25.550
Copies new files.

02:08:25.650 --> 02:08:27.550
Multiple source.

02:08:27.650 --> 02:08:33.440
Kann irgendwelches White Card Gedöns.

02:08:33.440 --> 02:08:35.340
C-Hown.

02:08:35.440 --> 02:08:38.340
Das mir nicht wirklich was bringt.

02:08:42.560 --> 02:08:45.460
Ich würde aber auch darauf tippen, dass es das nicht kann.

02:08:45.560 --> 02:08:51.250
Lassen wir es einfach mal so.

02:08:51.350 --> 02:08:53.250
Einfach ausprobieren.

02:08:53.350 --> 02:08:55.250
Also ohne Option geht es nicht.

02:08:55.350 --> 02:08:58.250
Ich hatte schon öfters den Fehler, dass der irgendwelche Output...

02:08:58.350 --> 02:09:01.250
Also nicht kopieren kann, weil er keine Verzeichnisse findet.

02:09:01.350 --> 02:09:07.030
Aber so müsste es doch eigentlich auch funktionieren.

02:09:07.130 --> 02:09:11.030
Ich überlege gerade, ob ich da noch einen eigenen Step draus mache mit dem FFmpeg.

02:09:11.030 --> 02:09:13.930
Weil das in der Tat ein bisschen doof ist.

02:09:14.030 --> 02:09:17.880
Komm, wir machen da was eigenes draus.

02:09:17.980 --> 02:09:19.880
Sind wir mal nicht so.

02:09:19.980 --> 02:09:21.880
Machen wir mal.

02:09:21.980 --> 02:09:23.880
Tja.

02:09:23.980 --> 02:09:25.880
FFmpeg.

02:09:25.980 --> 02:09:29.880
Download FFmpeg.

02:09:29.980 --> 02:09:31.880
Äh, what?

02:09:31.980 --> 02:09:33.880
Da waren wir jetzt hier.

02:09:33.980 --> 02:09:35.880
From.

02:09:35.980 --> 02:09:37.880
Debian.

02:09:37.980 --> 02:09:39.880
Debian.

02:09:39.980 --> 02:09:41.880
Bookworm.

02:09:41.880 --> 02:09:45.740
FFmpeg.

02:09:45.840 --> 02:09:47.740
So.

02:09:47.840 --> 02:09:57.770
Ja, ich glaube, so ist es gerade.

02:09:57.870 --> 02:10:01.850
FFmpeg.

02:10:01.950 --> 02:10:03.850
Äh.

02:10:03.950 --> 02:10:08.310
Irgendwie auch Bild.

02:10:08.410 --> 02:10:10.310
Aber das ist halt...

02:10:10.410 --> 02:10:12.310
Da habe ich ja keinen Weg hier drauf, ne?

02:10:12.410 --> 02:10:14.310
Oh, das ist ja doof.

02:10:14.410 --> 02:10:16.310
Komm, scheiß drauf. Ich beiße jetzt in den Saal ab.

02:10:16.410 --> 02:10:18.310
Wir machen das jetzt rückgängig.

02:10:18.410 --> 02:10:20.310
Machen das jetzt einfach hier an der Stelle.

02:10:20.410 --> 02:10:24.070
Lass uns halt nochmal bauen.

02:10:24.170 --> 02:10:31.860
So oft updaten wir FFmpeg ja nicht.

02:10:31.960 --> 02:10:32.960
Okay, zack.

02:10:32.960 --> 02:10:34.860
Ich bin zu groß.

02:10:34.960 --> 02:10:36.860
Also das alte mit den...

02:10:36.960 --> 02:10:38.860
Mit den 3,6 Gig.

02:10:38.960 --> 02:10:44.220
Oh, das ging jetzt erstaunlich schnell.

02:10:44.320 --> 02:10:47.730
Ist der so schlau und hat das gecheckt oder wie?

02:10:47.830 --> 02:10:49.730
Achso, ich habe ja nur das Copy geändert im Endeffekt.

02:10:49.830 --> 02:10:51.730
Ja, kein Wunder, dass das...

02:10:51.830 --> 02:10:53.730
Ist doch gut.

02:10:53.830 --> 02:10:55.730
Hat's doch schon gelohnt.

02:10:55.830 --> 02:10:57.730
Ging schnell.

02:11:01.000 --> 02:11:02.900
So, run.

02:11:03.000 --> 02:11:04.900
Tag, Funz.

02:11:05.000 --> 02:11:06.900
Nice. Okay, sehr gut.

02:11:07.000 --> 02:11:08.900
Dann testen wir doch jetzt mal, ob das mit dem Docker...

02:11:08.900 --> 02:11:10.800
Also, neues Image ist 367.

02:11:10.900 --> 02:11:12.800
Kleiner kriegen wir es nicht.

02:11:12.900 --> 02:11:14.800
Kleiner kriegen wir es nicht.

02:11:14.900 --> 02:11:16.800
Das ist die .NET Runtime.

02:11:16.900 --> 02:11:18.800
Das Base Image.

02:11:18.900 --> 02:11:25.390
Ja, Docker Copy kann Fade erzeugen, aber keine nested Fade, was er machen müsste.

02:11:25.490 --> 02:11:27.390
Ich will ja quasi sowas hier machen.

02:11:27.490 --> 02:11:29.390
Guck mal.

02:11:29.490 --> 02:11:31.390
Lipp.

02:11:33.570 --> 02:11:35.470
Und ich glaube, das geht nicht.

02:11:35.570 --> 02:11:37.470
Wir können es ausprobieren.

02:11:37.570 --> 02:11:39.470
Ich glaube, das geht nicht.

02:11:39.570 --> 02:11:43.160
Ich meine, vielleicht geht es ja doch.

02:11:43.160 --> 02:11:46.890
Okay, es geht doch.

02:11:46.990 --> 02:11:48.890
Easy.

02:11:48.990 --> 02:11:50.890
Ich habe nichts gesagt. Scheint doch zu funktionieren.

02:11:50.990 --> 02:11:52.890
Ja, dann.

02:11:52.990 --> 02:11:54.890
Dann können wir das ja auch wieder rückgängig machen.

02:11:54.990 --> 02:11:56.890
FFmpeg.Lip.

02:11:56.990 --> 02:11:58.890
So, also, ich habe jetzt den Source Code geändert.

02:11:58.990 --> 02:12:00.890
Von meiner .NET Anwendung.

02:12:00.990 --> 02:12:02.890
Von der Idee her, sollte er .NET, nur .NET Rebuilden.

02:12:02.990 --> 02:12:04.890
Und neues Image bauen.

02:12:04.990 --> 02:12:06.890
Äh...

02:12:11.960 --> 02:12:13.860
Da stimmt was nicht, Leute.

02:12:13.960 --> 02:12:20.950
Warum ist das cached?

02:12:21.050 --> 02:12:25.220
Warum ist das cached?

02:12:25.220 --> 02:12:27.120
Ich habe doch eindeutig hier geändert, oder?

02:12:27.220 --> 02:12:29.120
Oder habe ich...

02:12:29.220 --> 02:12:31.120
Moment, habe ich vorher einfach nicht gespeichert?

02:12:31.220 --> 02:12:33.120
Kann das auch sein?

02:12:36.200 --> 02:12:38.100
Moment, Moment, das muss ich jetzt mal ausprobieren.

02:12:38.200 --> 02:12:40.100
Ich...

02:12:40.200 --> 02:12:42.100
Ich kopiere das hier einfach noch ein paar mal, ja.

02:12:42.200 --> 02:12:44.100
Ah, okay.

02:12:44.200 --> 02:12:46.100
Ich habe vorher nicht gespeichert.

02:12:46.200 --> 02:12:48.100
Alles gut.

02:12:48.200 --> 02:12:50.100
My bad time. Sehr gut, Max.

02:12:50.200 --> 02:12:52.100
Gut, alles klar.

02:12:52.200 --> 02:12:54.100
Also, das sollte jetzt funktionieren.

02:12:54.200 --> 02:12:56.100
Run.

02:12:56.200 --> 02:12:58.100
Bam. Ja, Funst.

02:12:58.100 --> 02:13:00.000
Und ihr habt gesehen, wie viel schneller das jetzt bildet.

02:13:00.100 --> 02:13:02.000
Das Image im Vergleich zu vorher.

02:13:02.100 --> 02:13:04.000
Und wie viel kleiner das jetzt ist.

02:13:04.100 --> 02:13:06.000
Können wir uns mal angucken, was passiert, wenn ich in der...

02:13:06.100 --> 02:13:08.000
Also, wenn ich in...

02:13:08.100 --> 02:13:10.000
Wenn ich auf der .NET Seite was ändere.

02:13:10.100 --> 02:13:12.000
Das ist jetzt relativ easy zu zeigen.

02:13:12.100 --> 02:13:14.000
Okay, cached, weil er hat das schon mal gebildet.

02:13:14.100 --> 02:13:16.000
Mit diesen drei Zeilen drin.

02:13:16.100 --> 02:13:18.000
So, gehen wir mal in den Rust Part.

02:13:18.100 --> 02:13:20.000
Gehen wir mal in den Rust Part.

02:13:20.100 --> 02:13:22.000
Und ändern hier irgendwas.

02:13:22.100 --> 02:13:24.000
Keine Ahnung.

02:13:24.100 --> 02:13:28.210
Hier, active connections.

02:13:28.210 --> 02:13:32.110
Soll jetzt unbedingt noch ein Ausrufezeichen hinten haben.

02:13:32.210 --> 02:13:34.110
Build.

02:13:34.210 --> 02:13:36.110
Guck, Cargo run, Build.

02:13:36.210 --> 02:13:38.110
Jetzt muss er nur den Rust Part neu bilden.

02:13:38.210 --> 02:13:40.110
Das dauert natürlich lang, weil Rust...

02:13:40.210 --> 02:13:42.110
...lange braucht zum kombinieren.

02:13:42.210 --> 02:13:47.720
Irgendjemand hat doch vorhin Cargo Chef angesprochen.

02:13:47.820 --> 02:14:01.660
Du, du, du, du.

02:14:01.760 --> 02:14:08.110
Leute, ich habe eine Idee.

02:14:08.210 --> 02:14:11.550
Gibt es so was wie Cargo Pull oder sowas?

02:14:11.650 --> 02:14:13.550
Gibt es so was wie Cargo Pull oder sowas?

02:14:13.650 --> 02:14:15.550
Gibt es so was wie Cargo Pull oder sowas?

02:14:15.650 --> 02:14:17.550
Das könnte man tatsächlich noch ausprobieren.

02:14:17.550 --> 02:14:19.450
Das könnte man tatsächlich noch ausprobieren.

02:14:19.550 --> 02:14:21.450
Weil man könnte jetzt ja an der Stelle...

02:14:21.550 --> 02:14:23.450
Machen wir das mal wieder weg.

02:14:23.550 --> 02:14:25.450
Was macht ihr? Wir haben einen Multistage-Docker-File gebaut.

02:14:25.550 --> 02:14:27.450
Wir haben einen Multistage-Docker-File gebaut.

02:14:27.550 --> 02:14:29.450
Also, was ich mir überlegt habe, ist folgendes.

02:14:29.550 --> 02:14:31.450
Guckt mal. Hier kopiere ich den Source Code Cargo hin und mache ein Bild.

02:14:31.550 --> 02:14:33.450
Guckt mal. Hier kopiere ich den Source Code Cargo hin und mache ein Bild.

02:14:33.550 --> 02:14:35.450
Wenn ich sowas machen könnte, ich weiß nicht, ob es sowas gibt.

02:14:35.550 --> 02:14:37.450
Wenn ich sowas machen könnte, ich weiß nicht, ob es sowas gibt.

02:14:37.550 --> 02:14:39.450
Dann würde ich auch beim Ändern an der Go...

02:14:39.550 --> 02:14:41.450
Dann würde ich auch beim Ändern an der Go...

02:14:41.550 --> 02:14:43.450
Was labere ich mit Go?

02:14:43.550 --> 02:14:45.450
An der Rust...

02:14:45.450 --> 02:14:47.350
An dem Rust-Source-Code.

02:14:47.450 --> 02:14:49.350
Wenn sich nichts an den Dependencies ändert,

02:14:49.450 --> 02:14:51.350
Wenn sich nichts an den Dependencies ändert,

02:14:51.450 --> 02:14:53.350
wäre das hier gecached an der Stelle.

02:14:53.450 --> 02:14:55.350
Gibt es sowas wie Docker-Pull oder sowas?

02:14:55.450 --> 02:14:57.350
Oder Cargo-Cargo-Pull, nicht Docker-Pull.

02:14:57.450 --> 02:14:59.350
Cargo-Pull?

02:14:59.450 --> 02:15:02.850
Was soll das tun?

02:15:02.950 --> 02:15:04.850
Alle Dependencies runterladen,

02:15:04.950 --> 02:15:06.850
die man braucht,

02:15:06.950 --> 02:15:08.850
die in der Cargo-Tommel stehen.

02:15:08.950 --> 02:15:10.850
die man braucht, die in der Cargo-Tommel stehen.

02:15:10.950 --> 02:15:12.850
Weiß ich, ob sowas gibt.

02:15:12.950 --> 02:15:14.850
Also, bei .NET heißt es Restore.

02:15:14.950 --> 02:15:16.850
Cargo-Pull.

02:15:17.050 --> 02:15:28.160
Gibt es sowas?

02:15:28.260 --> 02:15:30.160
Was haben wir denn?

02:15:30.260 --> 02:15:34.560
Build. Check. Clean.

02:15:34.660 --> 02:15:37.880
New. Init. Add.

02:15:37.980 --> 02:15:39.880
Remove. Run.

02:15:39.980 --> 02:15:41.880
Bench. Update.

02:15:41.980 --> 02:15:43.880
Bench. Update.

02:15:43.980 --> 02:15:45.880
Nee.

02:15:45.980 --> 02:15:47.880
Nee, gibt es nicht. Cargo-Fetch.

02:15:47.980 --> 02:15:49.880
Nee, sowas gibt es ja anscheinend nicht.

02:15:49.980 --> 02:15:51.880
Oh.

02:15:51.980 --> 02:15:56.920
Hä?

02:15:57.020 --> 02:16:02.210
Das steht aber gar nicht hier dabei.

02:16:02.310 --> 02:16:16.660
Windows? Was macht denn Cargo-Fetch?

02:16:16.760 --> 02:16:46.470
Minus-List wären alle.

02:16:46.570 --> 02:16:48.470
Weil, das wäre natürlich gut.

02:16:48.570 --> 02:16:52.360
Da muss er nicht jedes Mal diesen ganzen Krempel help.

02:16:52.460 --> 02:17:01.620
Alter, was gibt es denn hier alles?

02:17:01.720 --> 02:17:05.190
Build. Check. Clean. Clippy. Config. Fetch.

02:17:05.290 --> 02:17:07.190
Build. Check. Clean. Clippy. Config. Fetch.

02:17:07.290 --> 02:17:09.190
Okay, das ist schon mal gut.

02:17:09.290 --> 02:17:13.520
Install. Locate.

02:17:13.620 --> 02:17:15.520
Install. Locate.

02:17:15.620 --> 02:17:19.860
Was auch immer miri ist.

02:17:19.960 --> 02:17:21.860
Owner. Package.

02:17:21.960 --> 02:17:25.750
Remove. Report.

02:17:25.850 --> 02:17:30.790
Update.

02:17:30.890 --> 02:17:32.790
Okay, Fetch ist glaube ich echt nicht verkehrt.

02:17:32.890 --> 02:17:34.790
Okay, Fetch ist glaube ich echt nicht verkehrt.

02:17:34.790 --> 02:17:36.690
Was ist das an der Stelle? Das probieren wir jetzt doch

02:17:36.790 --> 02:17:38.690
glatt mal aus. Cargo-Fetch.

02:17:38.790 --> 02:17:40.690
So, dann hat er

02:17:40.790 --> 02:17:42.690
zumindest die Dependencies gecached.

02:17:42.790 --> 02:17:46.260
An der Stelle.

02:17:46.360 --> 02:17:48.260
Das sollte doch eigentlich ganz brauchbar sein.

02:17:48.360 --> 02:17:52.210
Aber er muss den

02:17:52.310 --> 02:17:54.210
gerade trotzdem compilen.

02:17:54.310 --> 02:17:56.210
Ja, keine...

02:17:56.310 --> 02:17:58.210
Ich glaube, da kommen wir jetzt nicht.

02:17:58.310 --> 02:18:00.210
Ich glaube, da kommen wir jetzt nicht drum herum.

02:18:00.310 --> 02:18:02.210
Oh.

02:18:02.310 --> 02:18:04.210
Fail to pass manifest. Warum?

02:18:04.310 --> 02:18:15.810
Ach so.

02:18:15.910 --> 02:18:17.810
Ja. Okay, nee, das funktioniert nicht.

02:18:17.810 --> 02:18:23.450
Das funktioniert so nicht,

02:18:23.550 --> 02:18:25.450
wie ich mir das gedacht habe. Ich glaube, den Compile-Step,

02:18:25.550 --> 02:18:27.450
den können wir nicht, können wir nicht

02:18:27.550 --> 02:18:29.450
beschleunigen. Ich meine, wir könnten das,

02:18:29.550 --> 02:18:31.450
wenn wir, also bei

02:18:31.550 --> 02:18:33.450
GitHub Actions könnte man den

02:18:33.550 --> 02:18:35.450
Bild-Output

02:18:35.550 --> 02:18:37.450
vom letzten Mal cachen,

02:18:37.550 --> 02:18:39.450
dann irgendwie wiederherstellen,

02:18:39.550 --> 02:18:41.450
sodass er an der Stelle dann nicht alles

02:18:41.550 --> 02:18:43.450
neu runter... Was auch immer. Ich kann damit leben.

02:18:43.550 --> 02:18:45.450
Ja, ich kann damit leben. Das ist okay.

02:18:45.550 --> 02:18:49.660
Aber ich würde sagen, passt soweit.

02:18:49.760 --> 02:18:51.660
Mission erfüllt.

02:18:51.760 --> 02:18:53.660
Wir haben ein schnelles

02:18:53.660 --> 02:18:57.560
relativ kleines

02:18:57.660 --> 02:18:59.560
Docker-Image.

02:18:59.660 --> 02:19:01.560
Das ist gut.

02:19:01.660 --> 02:19:03.560
Hat funktioniert.

02:19:03.660 --> 02:19:05.560
Nice.

02:19:05.660 --> 02:19:08.940
Okay, Chat.

02:19:09.040 --> 02:19:10.940
Ich hoffe, ihr konntet jetzt ein bisschen bei der Arbeit noch

02:19:11.040 --> 02:19:13.040
abgammeln bei mir im Stream, bevor ihr heim

02:19:13.140 --> 02:19:14.940
müsst. Ich weiß nicht, ob man das

02:19:15.040 --> 02:19:16.940
als Fortbildung verbuchen kann, wenn man

02:19:17.040 --> 02:19:18.940
nicht viel mit Docker gemacht hat bestimmt.

02:19:19.040 --> 02:19:24.870
Das Problem ist, glaube ich, nicht, dass

02:19:24.970 --> 02:19:26.870
Base-Image,

02:19:26.870 --> 02:19:28.770
dass Debian so groß wäre,

02:19:28.870 --> 02:19:30.770
sondern eben, weil halt die komplette

02:19:30.870 --> 02:19:32.770
.NET-Runtime drauf ist. Sieht man

02:19:32.870 --> 02:19:34.770
ja auch. Und die .NET-Runtime, die ist halt unter

02:19:34.870 --> 02:19:36.770
Ubuntu auch nicht kleiner als

02:19:36.870 --> 02:19:38.770
mit

02:19:38.870 --> 02:19:40.770
Debian.

02:19:40.870 --> 02:19:42.770
Echt?

02:19:42.870 --> 02:19:46.150
Ist das so? Ist das kleiner?

02:19:46.250 --> 02:19:48.150
Okay, Moment. Das probieren wir jetzt mal kurz aus.

02:19:48.250 --> 02:19:52.930
Also.

02:19:53.030 --> 02:19:56.690
Wir haben aktuell

02:19:56.790 --> 02:19:58.690
von unserem

02:19:58.790 --> 02:20:00.690
Imager App, lassen wir mal

02:20:00.790 --> 02:20:02.690
außen vor. Da werden wir nichts dran machen können.

02:20:02.690 --> 02:20:04.590
Das ist mal User. So. In User

02:20:04.690 --> 02:20:06.590
ist lib,

02:20:06.690 --> 02:20:08.590
ist IQ, das

02:20:08.690 --> 02:20:10.590
Brauma und

02:20:10.690 --> 02:20:12.590
Pearl, was auch immer. Und 100 MB

02:20:12.690 --> 02:20:14.590
davon sind .NET.

02:20:14.690 --> 02:20:16.590
Ja, probieren wir das mal aus.

02:20:18.690 --> 02:20:22.480
Okay.

02:20:22.580 --> 02:20:24.480
Okay. Also, was brauchen wir?

02:20:24.580 --> 02:20:26.480
Jammy schisselt

02:20:26.580 --> 02:20:28.480
für ASP. ASP.

02:20:28.580 --> 02:20:34.220
So.

02:20:34.320 --> 02:20:48.640
Äh.

02:20:48.740 --> 02:20:50.640
Ja, nix Preview. Die gibt's wahrscheinlich

02:20:50.640 --> 02:20:52.540
schon komplett.

02:20:52.640 --> 02:20:54.540
Die gibt's. Okay, das. Da bin ich,

02:20:54.640 --> 02:20:56.540
da bin ich jetzt ja mal gespannt.

02:20:56.640 --> 02:20:58.540
Also, im Prinzip

02:20:58.640 --> 02:21:00.540
brauchen wir jetzt nur ASP.

02:21:00.640 --> 02:21:02.540
Jammy

02:21:02.640 --> 02:21:04.540
schisselt.

02:21:04.640 --> 02:21:06.540
Schisselt.

02:21:06.640 --> 02:21:08.540
Schisselt.

02:21:08.640 --> 02:21:14.860
Bild.

02:21:14.960 --> 02:21:16.860
Sehr nice. Stalker Image.

02:21:16.960 --> 02:21:18.860
Ja.

02:21:18.960 --> 02:21:22.240
Damit kann ich leben, oder?

02:21:22.340 --> 02:21:24.240
260 MB.

02:21:24.240 --> 02:21:26.140
260 MB.

02:21:26.240 --> 02:21:29.900
Bash ist da natürlich

02:21:30.000 --> 02:21:31.900
SH drauf. Irgendwas. Da ist nichts drauf.

02:21:32.000 --> 02:21:33.900
Da ist einfach gar nichts drauf.

02:21:34.000 --> 02:21:35.900
Ach so, funktioniert's noch? Das ist eine gute Frage.

02:21:36.000 --> 02:21:37.900
Ja. Ne.

02:21:38.000 --> 02:21:41.530
Ne.

02:21:41.630 --> 02:21:51.370
Ne.

02:21:51.470 --> 02:21:53.370
Fokussiere dich mal.

02:21:53.470 --> 02:21:57.190
Ah, ich glaube, ich weiß, warum.

02:21:57.290 --> 02:21:59.190
Ich weiß, warum. Wir müssen's so schreiben.

02:21:59.290 --> 02:22:01.190
Ne, ne. Wir müssen's

02:22:01.290 --> 02:22:03.190
so schreiben, Leute. Passt mal auf. Ich weiß, woran

02:22:03.290 --> 02:22:05.190
das liegt. Wenn das was, wenn das, wenn das

02:22:05.190 --> 02:22:07.090
jetzt geht, erklär ich euch, woran das lag.

02:22:07.190 --> 02:22:13.800
Wenn's nicht geht, dann nicht.

02:22:13.900 --> 02:22:20.240
Fuck.

02:22:20.340 --> 02:22:22.240
The application

02:22:22.340 --> 02:22:24.240
dot net does not exist.

02:22:24.340 --> 02:22:28.710
Ist das

02:22:28.810 --> 02:22:30.710
vielleicht nur für self-contained

02:22:30.810 --> 02:22:45.540
Apps? Bin ich denn zu viel

02:22:45.640 --> 02:22:47.540
geschisselt?

02:22:47.640 --> 02:22:49.540
Äh, da brauch ich...

02:22:49.640 --> 02:23:12.210
Ich bräuchte mal

02:23:12.310 --> 02:23:14.210
ein Example.

02:23:14.310 --> 02:23:16.210
Ein Example-Docker-File.

02:23:16.310 --> 02:23:18.210
Publish dot net

02:23:18.310 --> 02:23:20.210
nicht auch ne Binary?

02:23:20.310 --> 02:23:22.210
Die ist aber standardmäßig abhängig

02:23:22.310 --> 02:23:24.210
von der, von der Runtime.

02:23:24.310 --> 02:23:26.210
Und wenn die Runtime nicht da ist,

02:23:26.310 --> 02:23:28.210
also, es ist ja nix da,

02:23:28.310 --> 02:23:30.210
dann

02:23:30.310 --> 02:23:32.210
geht das nicht. Die müsste ich als

02:23:32.310 --> 02:23:34.210
self-contained application

02:23:34.310 --> 02:23:36.210
raushauen, dann würde es funktionieren.

02:23:36.310 --> 02:23:39.780
Das ist, das ist geschisselt

02:23:39.880 --> 02:23:45.330
im Entry Point.

02:23:45.430 --> 02:23:47.330
Also quasi so, oder wie? Ne.

02:23:47.430 --> 02:23:49.330
Ich brauch mal

02:23:49.430 --> 02:23:51.330
ein Example. Ich brauch, ich brauch mal

02:23:51.430 --> 02:23:53.330
ein Example-Docker-File.

02:23:53.330 --> 02:23:57.760
Gibt's hier irgendwie ein

02:23:57.860 --> 02:23:59.760
Example-Docker-File? Ja.

02:23:59.860 --> 02:24:01.760
Entry Point. Ach,

02:24:01.860 --> 02:24:03.760
tatsächlich, guck mal.

02:24:03.860 --> 02:24:05.760
Man gibt da wirklich nur...

02:24:05.860 --> 02:24:10.930
Gibt man da vielleicht so wirklich nur

02:24:11.030 --> 02:24:12.930
das hinten gar nicht

02:24:13.030 --> 02:24:21.360
mit an? Das braucht man wahrscheinlich

02:24:21.460 --> 02:24:23.360
gar nicht, ne?

02:24:23.460 --> 02:24:27.180
Geht. Nice. Aha.

02:24:27.280 --> 02:24:29.180
Dot net

02:24:29.280 --> 02:24:31.180
weggeschisselt, anscheinend.

02:24:31.280 --> 02:24:33.180
Gut zu wissen.

02:24:33.280 --> 02:24:35.180
Gut zu wissen. Easy. Easy.

02:24:35.280 --> 02:24:39.390
Guck mal, und jetzt haben wir

02:24:39.390 --> 02:24:41.290
noch 260 MB.

02:24:41.390 --> 02:24:43.290
Und jetzt abschließend mal den Test.

02:24:43.390 --> 02:24:45.290
Wie lange würde so ein komplettes

02:24:45.390 --> 02:24:47.290
Bild jetzt brauchen? Wahrscheinlich

02:24:47.390 --> 02:24:49.290
so eineinhalb Minuten.

02:24:51.600 --> 02:24:53.500
Bild? Weil ich habe jetzt alle meine

02:24:53.600 --> 02:24:55.500
Caches und sonst wie weggeschmissen.

02:24:55.600 --> 02:24:57.500
Okay.

02:24:57.600 --> 02:24:59.500
Also, gucken wir mal drauf, wie lange

02:24:59.600 --> 02:25:02.810
so ein komplettes Bild jetzt braucht.

02:25:02.910 --> 02:25:04.810
Jetzt wird richtig drauf losgeschisselt, ey.

02:25:06.910 --> 02:25:08.810
Das heißt, glaube ich, schmeißeln, gell?

02:25:08.910 --> 02:25:10.810
Auf Deutsch.

02:25:10.910 --> 02:25:12.810
Schisseln.

02:25:12.810 --> 02:25:14.710
Schisseln oder so. Ich glaube, es heißt

02:25:14.810 --> 02:25:21.990
meißeln. Da haben die...

02:25:22.090 --> 02:25:23.990
Ja, ist das ein Image

02:25:24.090 --> 02:25:25.990
von Microsoft oder ist das

02:25:26.090 --> 02:25:27.990
ein Image, was die Canonical-Leute

02:25:28.090 --> 02:25:29.990
schisseln?

02:25:30.090 --> 02:25:37.140
Vielleicht finden wir noch mal.

02:25:37.240 --> 02:25:39.140
Ich habe noch eine Idee.

02:25:39.240 --> 02:25:41.140
Docker-File-Rust.

02:25:41.240 --> 02:25:43.140
Vielleicht gibt es da noch...

02:25:43.240 --> 02:25:45.140
Bald neu der Schissel-Champ.

02:25:45.240 --> 02:25:47.140
Ähm...

02:25:47.240 --> 02:25:49.140
Vielleicht gibt es ja da ein Example für...

02:25:49.240 --> 02:26:10.730
Äh...

02:26:10.730 --> 02:26:12.630
Ich überlege gerade, ob es nicht vielleicht

02:26:12.730 --> 02:26:14.630
was gibt, dass man irgendwie dieses Cargo-Bild...

02:26:14.730 --> 02:26:16.630
Dieses Cargo-Library-Gedöns

02:26:16.730 --> 02:26:18.630
Cachen könnte.

02:26:18.730 --> 02:26:21.940
Habt ihr auch ein bisschen

02:26:22.040 --> 02:26:23.940
gemeißelt heute an euren Containern?

02:26:24.040 --> 02:26:25.940
Sehr nett.

02:26:26.040 --> 02:26:33.600
Cache Rust-Dependent.

02:26:33.700 --> 02:26:45.040
You need a dummy AS

02:26:45.140 --> 02:26:47.040
and your Cargo-Yammel first.

02:26:47.140 --> 02:26:49.040
Then build it to cache the dependencies

02:26:49.140 --> 02:26:51.040
and then copy your...

02:26:51.140 --> 02:26:53.040
Ach so!

02:26:53.140 --> 02:26:55.040
Hi,

02:26:55.040 --> 02:26:56.940
Hi IQ!

02:26:57.040 --> 02:26:58.940
Hi...

02:27:05.860 --> 02:27:07.760
Ach, guck mal!

02:27:07.860 --> 02:27:09.760
Die legen so eine Fake-Lib-AS

02:27:09.860 --> 02:27:13.580
an und danach

02:27:13.680 --> 02:27:15.580
in einem Build-Step die richtige.

02:27:15.680 --> 02:27:19.020
Okay, das probiere ich jetzt noch aus.

02:27:19.120 --> 02:27:21.020
Jetzt wird Rust geschisselt, Leute.

02:27:21.120 --> 02:27:23.020
Okay, Image hat gebildet

02:27:23.120 --> 02:27:25.020
jetzt wie lang? 280 Sekunden.

02:27:25.120 --> 02:27:27.020
Alles klar. Pass auf,

02:27:27.120 --> 02:27:29.020
wir schisseln jetzt das Rust.

02:27:29.120 --> 02:27:31.020
So, also...

02:27:31.120 --> 02:27:33.020
Cargo?

02:27:33.020 --> 02:27:34.920
An der Stelle, wenn man jetzt hier sagt

02:27:35.020 --> 02:27:36.920
Cargo-Build, dann

02:27:37.020 --> 02:27:38.920
meckert er garantiert,

02:27:39.020 --> 02:27:42.560
weil keine

02:27:42.660 --> 02:27:44.560
äh...

02:27:44.660 --> 02:27:46.560
Lib-AS da ist.

02:27:46.660 --> 02:27:48.560
So, wenn ich jetzt sage run

02:27:48.660 --> 02:27:50.560
touch lib...

02:27:50.660 --> 02:27:52.560
Ne, Moment, was? Source

02:27:52.660 --> 02:27:56.960
lib-as...

02:27:57.060 --> 02:28:00.590
Geht das jetzt?

02:28:00.690 --> 02:28:02.590
No, such file or directory.

02:28:02.690 --> 02:28:04.590
Äh...

02:28:04.690 --> 02:28:06.590
Moment, kann das sein, dass es

02:28:06.590 --> 02:28:08.490
touch einfach nicht gibt?

02:28:08.590 --> 02:28:10.490
Das ist zu...

02:28:10.590 --> 02:28:12.490
Hyper-Gachi?

02:28:12.590 --> 02:28:14.490
Ne.

02:28:14.590 --> 02:28:17.930
What?

02:28:18.030 --> 02:28:26.420
Wie jetzt?

02:28:26.520 --> 02:28:28.420
Ist das nicht irgendein Base-Tool, was immer dabei ist?

02:28:28.520 --> 02:28:36.410
Ach, der Source-Ordner

02:28:36.510 --> 02:28:38.410
wird... Okay, okay.

02:28:38.510 --> 02:28:40.410
mkdir Source.

02:28:40.510 --> 02:28:45.700
Äh...

02:28:45.800 --> 02:28:47.700
Ich dachte eigentlich, dass touch-bash

02:28:47.800 --> 02:28:49.700
Build-In ist.

02:28:49.800 --> 02:28:51.700
Okay, ne, passt, passt, passt.

02:28:51.800 --> 02:28:53.700
Passt.

02:28:53.700 --> 02:28:57.620
Ich glaub, Leute, das funnst.

02:28:57.720 --> 02:28:59.620
Better Twitch-TV

02:28:59.720 --> 02:29:01.620
Shizzle. Ja, so oft werden wir das nicht brauchen,

02:29:01.720 --> 02:29:04.930
vermute ich.

02:29:05.030 --> 02:29:06.930
Aber, Leute, ich glaub, das funnst, was ich hier vorhab.

02:29:07.030 --> 02:29:12.290
Glaub, das funnst.

02:29:12.390 --> 02:29:14.290
Guck mal. Der hat, der hat

02:29:14.390 --> 02:29:16.290
jetzt die Datei angelegt, diese leere

02:29:16.390 --> 02:29:18.290
Lib-Datei.

02:29:18.390 --> 02:29:20.290
Jetzt kompiliert er. Und

02:29:20.390 --> 02:29:22.290
jetzt, für den nächsten Step, sollte,

02:29:22.390 --> 02:29:24.290
sollten, sollten die Dependencies

02:29:24.390 --> 02:29:26.290
eigentlich gecached sein.

02:29:26.390 --> 02:29:30.240
Ja, der, ich glaub, ich glaub,

02:29:30.340 --> 02:29:32.240
das funnst, Leute. Ich glaub, ich glaub, das funnst.

02:29:32.340 --> 02:29:37.350
Cargo-Build.

02:29:37.450 --> 02:29:41.750
So, probieren wir jetzt aus.

02:29:41.850 --> 02:29:43.750
Wir ändern

02:29:43.850 --> 02:29:45.750
jetzt, also, eben hat's ja noch lange gedauert. So, wir machen

02:29:45.850 --> 02:29:47.750
jetzt einfach hier doppelten Output. So, ist ja

02:29:47.850 --> 02:29:51.760
egal.

02:29:51.860 --> 02:29:56.230
7TV Emotes.

02:29:56.330 --> 02:29:58.230
Rust.

02:29:58.330 --> 02:30:00.230
Das ist ein gutes

02:30:00.330 --> 02:30:05.080
Emote.

02:30:05.180 --> 02:30:09.030
Das find ich

02:30:09.130 --> 02:30:11.030
gut, das, das mach ich mal.

02:30:11.130 --> 02:30:17.730
Use Emote.

02:30:17.830 --> 02:30:23.350
Ich mein, das bezieht sich ja,

02:30:23.450 --> 02:30:25.350
das bezieht sich ja auf das Game, ja.

02:30:25.450 --> 02:30:27.350
Aber es passt in dem Fall ja auch.

02:30:29.450 --> 02:30:31.350
So, schauen wir mal, wie schnell das jetzt geht.

02:30:33.020 --> 02:30:34.920
Nice. Es funktioniert, guck mal.

02:30:35.020 --> 02:30:36.920
Die Dependencies sind gecached.

02:30:37.020 --> 02:30:38.920
Jetzt. Das ist richtig high

02:30:39.020 --> 02:30:40.920
IQ gewesen. Guck mal, wie viel schneller das

02:30:41.020 --> 02:30:42.920
jetzt fertig ist. Es funktioniert.

02:30:43.020 --> 02:30:44.920
Okay, das ist nice.

02:30:45.020 --> 02:30:46.920
Guck mal. Dadurch, dass der hier eine

02:30:47.020 --> 02:30:48.920
leere Lib, also, hier

02:30:49.020 --> 02:30:50.920
holt er sich die neuesten

02:30:51.020 --> 02:30:52.920
Cargo, das neueste Cargo

02:30:53.020 --> 02:30:54.920
Dependency-File. Dann

02:30:55.020 --> 02:30:56.920
legt er eine Fake-Lib-RS an.

02:30:56.920 --> 02:30:58.820
Sodass Cargo Build funktioniert.

02:30:58.920 --> 02:31:00.820
Ab der Stelle ist es gecached.

02:31:00.920 --> 02:31:02.820
Bis zu dem Zeitpunkt, wo sich an

02:31:02.920 --> 02:31:04.820
meinen Dependencies was ändert. Und da ändert

02:31:04.920 --> 02:31:06.820
sich ja selten was dran. Und nur dann, wenn

02:31:06.920 --> 02:31:08.820
sich die Dependencies ändern, dann

02:31:08.920 --> 02:31:10.820
bildet er Dependency und Anwendung neu.

02:31:10.920 --> 02:31:12.820
Sonst bildet er nur die Anwendung neu.

02:31:12.920 --> 02:31:14.820
Eigentlich sehr nice, oder?

02:31:14.920 --> 02:31:16.820
Excellent.

02:31:16.920 --> 02:31:21.980
Die standard.net

02:31:22.080 --> 02:31:23.980
Docker-File-Templates machen das

02:31:24.080 --> 02:31:25.980
by the way auch. Was?

02:31:26.080 --> 02:31:27.980
Die schisseln?

02:31:27.980 --> 02:31:29.880
Was machen die?

02:31:29.980 --> 02:31:44.970
Ich committe das mal.

02:31:45.070 --> 02:31:46.970
Pack-Wait.

02:31:47.070 --> 02:31:52.010
Hier ist das

02:31:52.110 --> 02:31:55.450
Docker-File drin. Der Urlaub wird

02:31:55.550 --> 02:31:57.450
ausgenutzt, ja. Erst Restore, dann

02:31:57.550 --> 02:31:59.450
Source kopieren. Ach das. Ja.

02:31:59.550 --> 02:32:01.450
Deswegen bin ich drauf gekommen

02:32:01.550 --> 02:32:03.450
mit dem Restore, weil ich bilde mir ein,

02:32:03.550 --> 02:32:05.450
weil ich das da mal gesehen hab. Deswegen wollte ich gucken, ob Cargo

02:32:05.550 --> 02:32:07.450
auch sowas hat. Aber muss

02:32:07.550 --> 02:32:09.450
ein bisschen tricksen. Aber ist schon okay.

02:32:09.550 --> 02:32:11.450
Geht eigentlich ziemlich gut.

02:32:11.550 --> 02:32:13.450
Ähm.

02:32:13.550 --> 02:32:15.450
Okay.

02:32:15.550 --> 02:32:17.450
Ja, das ist noch

02:32:17.550 --> 02:32:19.450
die Sachen vom letzten Mal.

02:32:19.550 --> 02:32:21.450
Die pushe ich jetzt

02:32:21.550 --> 02:32:23.450
einfach

02:32:23.550 --> 02:32:25.450
mal ins

02:32:25.550 --> 02:32:27.450
ins CamChamp Shit.

02:32:27.550 --> 02:32:30.760
Git push

02:32:30.860 --> 02:32:32.760
origin master. Bam.

02:32:32.860 --> 02:32:34.760
Schau mal, was

02:32:34.860 --> 02:32:36.760
der CamChamp macht auf GitHub.

02:32:36.860 --> 02:32:38.760
Der hat

02:32:38.860 --> 02:32:40.760
jetzt ein Comet.

02:32:40.860 --> 02:32:42.760
Und er hat mit Abstand

02:32:42.860 --> 02:32:44.760
die allerbesten Comet-Messages.

02:32:44.860 --> 02:32:54.090
Das gefällt mir.

02:32:54.090 --> 02:32:55.990
Ja, nice.

02:32:56.090 --> 02:32:57.990
Excellent, würde ich dazu sagen.

02:32:58.090 --> 02:32:59.990
Excellent. Guck mal, die machen hier

02:33:00.090 --> 02:33:01.990
super kompliziertes Zeug. Das

02:33:02.090 --> 02:33:08.820
müssen wir gar nicht machen.

02:33:08.920 --> 02:33:10.820
Excellent.

02:33:10.920 --> 02:33:14.580
Okay.

02:33:14.680 --> 02:33:18.600
Ich würde sagen, wir waren heute

02:33:18.700 --> 02:33:20.600
highly effective.

02:33:20.700 --> 02:33:22.600
Nee, effective ist

02:33:22.700 --> 02:33:24.600
das Wort. Highly

02:33:24.700 --> 02:33:26.600
productive, nicht effective.

02:33:26.700 --> 02:33:28.600
Image

02:33:28.700 --> 02:33:30.600
unter 200 MB.

02:33:30.600 --> 02:33:32.500
Da muss ein bisschen was

02:33:32.600 --> 02:33:34.500
weggeschisselt werden.

02:33:34.600 --> 02:33:36.500
Unter 200 MB ist enorm schwierig,

02:33:36.600 --> 02:33:38.500
wenn FFmpeg schon

02:33:38.600 --> 02:33:40.500
140 MB groß ist.

02:33:40.600 --> 02:33:42.500
Und

02:33:42.600 --> 02:33:44.500
dementsprechend das OS.

02:33:44.600 --> 02:33:46.500
Ich glaube nicht, dass das funzt.

02:33:46.600 --> 02:33:48.500
Könnte man

02:33:48.600 --> 02:33:52.260
das Programm auch als Dienst

02:33:52.360 --> 02:33:54.260
programmieren?

02:33:54.360 --> 02:33:56.260
Wie jetzt? Du meinst Windows Service

02:33:56.360 --> 02:33:58.260
oder was?

02:33:58.360 --> 02:34:00.260
Bestimmt.

02:34:00.260 --> 02:34:02.160
Bestimmt. Damit will ich mich nicht

02:34:02.260 --> 02:34:04.160
beschäftigen.

02:34:04.260 --> 02:34:06.160
Also wir müssen... Okay, wir könnten

02:34:06.260 --> 02:34:08.160
FFmpeg selbst kompilieren und wirklich

02:34:08.260 --> 02:34:10.160
nur das einbauen, was wir bräuchten.

02:34:10.260 --> 02:34:12.160
Das wäre eine Möglichkeit. Leute, das machen wir.

02:34:12.260 --> 02:34:14.160
Leute, das machen wir.

02:34:14.260 --> 02:34:19.970
Das machen wir. Nicht jetzt. Nicht jetzt.

02:34:20.070 --> 02:34:21.970
Das machen wir.

02:34:22.070 --> 02:34:23.970
Da habe ich schon lange Bock

02:34:24.070 --> 02:34:25.970
drauf, mal FFmpeg selbst zu bauen mit

02:34:26.070 --> 02:34:27.970
genau den Options, die man braucht. Weil wir

02:34:28.070 --> 02:34:29.970
brauchen nicht viel. Wir brauchen RTSP-Support,

02:34:30.070 --> 02:34:31.970
H.264.

02:34:32.070 --> 02:34:33.970
Noch nicht mal H.264-Support.

02:34:33.970 --> 02:34:35.870
Wir decoden ja nichts.

02:34:35.970 --> 02:34:37.870
Wir brauchen eigentlich nur FFmpeg,

02:34:37.970 --> 02:34:39.870
nur mit RTSP-Support.

02:34:39.970 --> 02:34:43.310
Da wird FFmpeg eine ganze Ecke kleiner.

02:34:43.410 --> 02:34:45.310
Wir brauchen keine Filter. Wir brauchen

02:34:45.410 --> 02:34:47.310
nichts. Netzwerk.

02:34:47.410 --> 02:34:49.310
Wir brauchen Netzwerk, RTSP-Support.

02:34:49.410 --> 02:34:51.310
Das machen wir mal.

02:34:51.410 --> 02:34:57.120
Und dann können wir...

02:34:57.220 --> 02:34:59.120
Das ist... Okay, Leute.

02:34:59.220 --> 02:35:01.120
Unsere Mission wird sein,

02:35:01.220 --> 02:35:03.120
für den nächsten Stream,

02:35:03.220 --> 02:35:05.120
Image...

02:35:05.220 --> 02:35:07.120
Image kleiner...

02:35:07.220 --> 02:35:09.120
kleiner 200 Mbps

02:35:09.120 --> 02:35:11.020
Das machen wir im nächsten Stream.

02:35:11.120 --> 02:35:13.020
Image kleiner 200 Mbps

02:35:13.120 --> 02:35:16.520
Es kann sein, dass wir OpenSSL

02:35:16.620 --> 02:35:18.520
brauchen für RTSP. Das ist möglich.

02:35:18.620 --> 02:35:20.520
Was macht FFmpeg?

02:35:20.620 --> 02:35:22.520
FFmpeg verbindet sich hier

02:35:22.620 --> 02:35:24.520
zu Webcams.

02:35:24.620 --> 02:35:26.520
Also ich kann es ja mal starten, dann siehst du es.

02:35:26.620 --> 02:35:28.520
Also Webcam ist jetzt

02:35:28.620 --> 02:35:30.520
ein bisschen das falsche Wort. Webcam ist

02:35:30.620 --> 02:35:32.520
stellvertretend von einem lokalen RTSP-Server.

02:35:32.620 --> 02:35:34.520
Aber im Prinzip Webcam...

02:35:40.990 --> 02:35:42.890
Oh shit.

02:35:42.990 --> 02:35:44.890
Jetzt habe ich irgendwas kaputt gemacht. Warum?

02:35:44.890 --> 02:35:48.610
Da ist es doch.

02:35:48.710 --> 02:35:52.180
Ach ich kack knub.

02:35:52.280 --> 02:35:57.960
Wie geht's?

02:35:58.060 --> 02:36:01.650
Naja. Angular.

02:36:01.750 --> 02:36:03.650
MonkaS. No.

02:36:03.750 --> 02:36:05.650
I'm no Angular...

02:36:05.750 --> 02:36:07.650
expert.

02:36:07.750 --> 02:36:09.650
No frontend expert.

02:36:09.750 --> 02:36:11.650
And especially

02:36:11.750 --> 02:36:13.650
no Angular expert.

02:36:13.750 --> 02:36:18.760
Okay. MV...

02:36:18.860 --> 02:36:20.760
FFmpeg zu FFmpeg.

02:36:20.860 --> 02:36:22.760
So, jetzt sollte es eigentlich funktionieren.

02:36:22.860 --> 02:36:24.760
Ja. Funst.

02:36:24.760 --> 02:36:26.660
Also was das macht

02:36:26.760 --> 02:36:28.660
ist folgendes. Das verbindet sich zum...

02:36:28.760 --> 02:36:30.660
Achso, jetzt habe ich den Kram hier noch auskommentiert. Kann ich ja gar nicht zeigen.

02:36:30.760 --> 02:36:32.660
So, es verbindet sich lokal zu einer

02:36:32.760 --> 02:36:34.660
Webcam.

02:36:34.760 --> 02:36:36.660
Und dann streamt

02:36:36.760 --> 02:36:38.660
es den Webcam-Output in den

02:36:38.760 --> 02:36:40.660
Browser. Und der Trick dabei

02:36:40.760 --> 02:36:42.660
ist, wenn es jetzt funktioniert, wenn ich es nicht irgendwie

02:36:42.760 --> 02:36:44.660
kaputt gemacht habe, habe ich nicht... Also stellvertretend

02:36:44.760 --> 02:36:46.660
für Webcam-Output gibt es halt ein YouTube-Video

02:36:46.760 --> 02:36:48.660
von mir. So.

02:36:48.760 --> 02:36:50.660
Und ohne zu re-encoden.

02:36:50.760 --> 02:36:52.660
Das ist halt das Ding. Also

02:36:52.760 --> 02:36:54.660
der nimmt einfach... Der connectet sich

02:36:54.660 --> 02:36:56.560
per RTSP.

02:36:56.660 --> 02:36:58.560
FFmpeg RTSP connectet er sich zum...

02:36:58.660 --> 02:37:00.560
zur Webcam.

02:37:00.660 --> 02:37:02.560
Liest die einzelnen

02:37:02.660 --> 02:37:04.560
Frames oder ja, Packages

02:37:04.660 --> 02:37:06.560
aus, aus diesem H.264 encodeten

02:37:06.660 --> 02:37:08.560
Stream. Und schickst die 1

02:37:08.660 --> 02:37:10.560
zu 1 weiter per WebRTC

02:37:10.660 --> 02:37:12.560
in den Browser. Und der Browser decodet

02:37:12.660 --> 02:37:14.560
dann. Also das heißt, es ist...

02:37:14.660 --> 02:37:16.560
Braucht nahezu keine CPU-Last auf

02:37:16.660 --> 02:37:18.560
Serverseite. Bloß ein bisschen zum decoden

02:37:18.660 --> 02:37:20.560
im Browser.

02:37:20.660 --> 02:37:22.560
Und wie performant ist das jetzt im Vergleich zu Go?

02:37:22.660 --> 02:37:24.560
Ich habe keine Ahnung.

02:37:24.560 --> 02:37:26.460
Ob es in der Praxis überhaupt einen

02:37:26.560 --> 02:37:28.460
nennenswerten Unterschied macht?

02:37:28.560 --> 02:37:30.460
Höchstwahrscheinlich nicht.

02:37:30.560 --> 02:37:32.460
Höchstwahrscheinlich nicht, weil

02:37:32.560 --> 02:37:34.460
der große Unterschied

02:37:34.560 --> 02:37:36.460
zwischen Rust und Go in dem Fall

02:37:36.560 --> 02:37:38.460
ist, also wo es wirklich richtig krass

02:37:38.560 --> 02:37:40.460
Performance gut machen könnte,

02:37:40.560 --> 02:37:42.460
ist an der Stelle, wo man oft

02:37:42.560 --> 02:37:44.460
callen muss nach Go

02:37:44.560 --> 02:37:46.460
von .NET aus.

02:37:46.560 --> 02:37:48.460
Und so oft call ich nicht. Ich meine, es sieht

02:37:48.560 --> 02:37:50.460
zwar hier viel aus. Ihr seht es hier durchrattern.

02:37:50.560 --> 02:37:52.460
Aber das sind halt

02:37:52.460 --> 02:37:54.360
auch nur alle 16

02:37:54.460 --> 02:37:56.360
Millisekunden. Alle 16 Millisekunden

02:37:56.460 --> 02:38:03.120
ist halt gar nichts.

02:38:03.220 --> 02:38:05.120
Im Browser kann man das nicht seeken. Korrekt.

02:38:05.220 --> 02:38:07.120
Das geht um Live-Webcams.

02:38:07.220 --> 02:38:09.120
Du kannst

02:38:09.220 --> 02:38:11.120
nicht seeken.

02:38:11.220 --> 02:38:13.120
Wieso nicht RustCamp? Weil

02:38:13.220 --> 02:38:15.120
CampChamp. Weil meine Dinger immer Champ

02:38:15.220 --> 02:38:17.120
heißen. Außerdem ist es nichts, was ich

02:38:17.220 --> 02:38:19.120
will, dass irgendjemand verwendet.

02:38:19.220 --> 02:38:21.120
Das ist gebastelt für mich.

02:38:21.220 --> 02:38:23.120
Und ich werde es wahrscheinlich

02:38:23.220 --> 02:38:27.140
bei mir benutzen.

02:38:27.240 --> 02:38:29.140
So, wo wir gerade dabei sind. Lass mal gucken.

02:38:29.140 --> 02:38:31.040
Ich glaube, der 4er-Champ hat immer noch keine Bugs.

02:38:31.140 --> 02:38:33.040
Nee, obviously

02:38:33.140 --> 02:38:35.040
keine neuen Bugs.

02:38:35.140 --> 02:38:37.040
Ist ja auch komplett bugfrei.

02:38:37.140 --> 02:38:39.040
Der 4M-Champ hat

02:38:39.140 --> 02:38:41.040
natürlich auch keine neuen Bugs.

02:38:41.140 --> 02:38:43.040
Okay, alles klar. Weil Bugs

02:38:43.140 --> 02:38:45.040
produzieren wir hier ja nicht.

02:38:45.140 --> 02:38:47.040
Bei uns ist alles immer

02:38:47.140 --> 02:38:49.040
first try

02:38:49.140 --> 02:38:51.040
five head community

02:38:51.140 --> 02:38:53.040
gefederfrei.

02:38:53.140 --> 02:38:57.630
So, Chat.

02:38:57.730 --> 02:38:59.630
Sehr schön,

02:38:59.730 --> 02:39:01.630
dass es dann heute wunderbar funktioniert.

02:39:01.730 --> 02:39:03.630
Nächster Stream.

02:39:03.730 --> 02:39:05.630
Ahead of time compilation.

02:39:05.730 --> 02:39:07.630
FFmpeg selbst kompilieren. Und gucken,

02:39:07.730 --> 02:39:09.630
dass wir das Image unter 200 MB kriegen.

02:39:09.730 --> 02:39:11.630
Also mit AOT sollte es easy

02:39:11.730 --> 02:39:13.630
funktionieren, weil dann ist auch .NET kleiner.

02:39:13.730 --> 02:39:15.630
Und FFmpeg, wenn das geht...

02:39:15.730 --> 02:39:17.630
Also nee, AOT sollte easy...

02:39:17.730 --> 02:39:19.630
So rum. AOT sollte easy funktionieren. Da ist auch

02:39:19.730 --> 02:39:21.630
diese ganze .NET Anwendung kleiner.

02:39:21.730 --> 02:39:23.630
Wir bräuchten theoretisch auch gar kein .NET

02:39:23.730 --> 02:39:25.630
Image mehr. Und

02:39:25.730 --> 02:39:27.630
FFmpeg, wenn das geht,

02:39:27.730 --> 02:39:29.630
kommen wir easy unter 200 MB.

02:39:29.730 --> 02:39:31.630
Wenn das Custom sich...

02:39:31.730 --> 02:39:33.630
Was jetzt gemacht wird, Offstream,

02:39:33.730 --> 02:39:35.630
ich bin heute noch nicht mal eine Runde gelaufen.

02:39:35.730 --> 02:39:42.720
Das werde ich jetzt machen. Vielleicht

02:39:42.820 --> 02:39:44.720
so in dem Dreh, ja. Wobei man halt sagen muss,

02:39:44.820 --> 02:39:46.720
Teile von der .NET

02:39:46.820 --> 02:39:48.720
Runtime müssen ja trotzdem

02:39:48.820 --> 02:39:50.720
rein. Beziehungsweise

02:39:50.820 --> 02:39:52.720
nicht von der Runtime,

02:39:52.820 --> 02:39:54.720
aber von der Standardlibrary trotzdem rein.

02:39:54.820 --> 02:39:56.720
Weil sonst läuft das Zeug ja nicht.

02:39:56.820 --> 02:40:02.400
Also, wir sehen uns, Leute. Bis dann.

02:40:02.500 --> 02:40:04.400
Macht's gut. Ich hoffe, euch hat das Stream gefallen.

02:40:04.500 --> 02:40:06.400
Wenn euch das Stream gefallen hat, dann könnt ihr mir jetzt

02:40:06.500 --> 02:40:08.400
followen, dass ihr

02:40:08.400 --> 02:40:10.400
beim nächsten

02:40:10.500 --> 02:40:12.400
Broadcaststream oder bei was auch immer wir machen,

02:40:12.500 --> 02:40:14.400
wieder mit am Start seid. Würde mich freuen.

02:40:14.500 --> 02:40:16.400
Und schön, dass ihr da gewesen seid.

02:40:16.500 --> 02:40:18.400
Wir sehen uns im nächsten Stream. Bis dann. Macht's gut.

02:40:18.500 --> 02:40:21.780
See you!

02:40:21.880 --> 02:40:23.780
So, so muss das sein.

02:40:23.880 --> 02:40:25.780
Bis dann. Macht's gut. See you.
