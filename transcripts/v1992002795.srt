1
00:00:02,670 --> 00:00:30,270
Pog Pog Pog Pog Pog Pog Pog Pog

2
00:00:30,270 --> 00:00:31,870
ich muss gerade mal wagen dass mein

3
00:00:31,870 --> 00:00:33,910
browser geupdated ist auf der anderen

4
00:00:33,910 --> 00:00:34,710
seite

5
00:00:34,710 --> 00:00:39,490
ja kekwait kekwaiting dass mein browser

6
00:00:39,490 --> 00:00:40,410
geupdatet ist.

7
00:00:43,580 --> 00:00:45,640
Ich gebe zu, Freitag 12.16 Uhr ist

8
00:00:45,640 --> 00:00:47,760
vielleicht nicht so der normalste Zeitpunkt

9
00:00:47,760 --> 00:00:49,460
zum Streamsauen. Für mich.

10
00:00:53,150 --> 00:00:54,150
Aber warum nicht, ne?

11
00:00:56,930 --> 00:00:57,670
Heckel HD.

12
00:00:58,890 --> 00:00:59,950
Ja, ich habe Urlaub, richtig.

13
00:01:00,910 --> 00:01:02,690
Ich habe Urlaub seit...

14
00:01:03,330 --> 00:01:05,090
Ich meine, letzter Arbeitstag

15
00:01:05,090 --> 00:01:06,390
letzter Arbeitstag

16
00:01:06,390 --> 00:01:07,230
war

17
00:01:07,230 --> 00:01:11,020
am 24.

18
00:01:11,880 --> 00:01:14,560
Wobei, also streng genommen

19
00:01:14,560 --> 00:01:16,380
letzter Arbeitstag war am 24.

20
00:01:16,380 --> 00:01:18,540
Aber ich hatte

21
00:01:18,540 --> 00:01:20,860
ja quasi hier nochmal Bereitschaft

22
00:01:20,860 --> 00:01:22,340
und

23
00:01:22,340 --> 00:01:23,980
hier hatte ich nochmal

24
00:01:23,980 --> 00:01:25,300
Teambuilding-Workshop.

25
00:01:25,960 --> 00:01:28,500
Also insofern... Oh Leute, das war wieder was,

26
00:01:28,640 --> 00:01:29,320
ey, ich sag's euch.

27
00:01:30,100 --> 00:01:31,600
Kann ich euch dann erzählen.

28
00:01:34,580 --> 00:01:36,500
Wobei, es ging. Es war bisher

29
00:01:36,500 --> 00:01:38,320
es war nervig wie

30
00:01:38,320 --> 00:01:39,980
alle Teambuilding-Workshops, aber

31
00:01:39,980 --> 00:01:42,160
insgesamt muss ich sagen, war das tatsächlich noch

32
00:01:42,160 --> 00:01:43,900
der beste Teambuilding-Workshop.

33
00:01:45,920 --> 00:01:46,360
Marabuna

34
00:01:46,360 --> 00:01:47,340
ist 8. Moin.

35
00:01:49,360 --> 00:01:50,060
Düdü-düt.

36
00:01:50,440 --> 00:01:51,140
Düdü-düt.

37
00:01:52,080 --> 00:01:53,740
So. Und

38
00:01:53,740 --> 00:01:56,240
deswegen, also so,

39
00:01:56,340 --> 00:01:58,600
sag mal so, Soft-Urlaub

40
00:01:58,600 --> 00:02:00,160
habe ich quasi schon seit 24.

41
00:02:00,520 --> 00:02:02,300
Aber so richtig hart Urlaub, also wo dann

42
00:02:02,300 --> 00:02:03,400
auch wirklich gar nichts mehr ist,

43
00:02:04,080 --> 00:02:05,620
habe ich quasi seit

44
00:02:05,620 --> 00:02:09,770
gestern. Was war so toll bei dem

45
00:02:09,770 --> 00:02:11,510
Teambuilding? Naja, wie gesagt...

46
00:02:11,510 --> 00:02:12,310
Wartet mal kurz.

47
00:02:14,310 --> 00:02:14,670
Hä?

48
00:02:17,230 --> 00:02:18,070
Mon KS.

49
00:02:20,850 --> 00:02:21,350
Ähm, was so

50
00:02:21,350 --> 00:02:22,390
toll beim Teambuilding war?

51
00:02:22,850 --> 00:02:25,290
Naja, es war nix toll, es war nur weniger nervig.

52
00:02:26,630 --> 00:02:27,410
Also toll habe ich

53
00:02:27,410 --> 00:02:29,390
trotzdem nicht gefunden. Ich mag solche Sachen einfach

54
00:02:29,390 --> 00:02:29,610
nicht.

55
00:02:31,090 --> 00:02:33,550
Aber insgesamt war es tatsächlich ganz, ganz,

56
00:02:33,730 --> 00:02:34,490
ganz okay.

57
00:02:34,490 --> 00:02:36,410
Ja, wir haben natürlich wieder

58
00:02:36,410 --> 00:02:38,030
irgendwelche komischen Spielchen gemacht.

59
00:02:38,730 --> 00:02:40,390
Also wir haben, passt mal auf, passt mal auf.

60
00:02:41,890 --> 00:02:42,210
Ähm,

61
00:02:43,770 --> 00:02:44,370
typisches,

62
00:02:44,430 --> 00:02:46,510
typisches Teambuilding-Spiel, was wir gemacht

63
00:02:46,510 --> 00:02:48,690
haben. Wir hatten zwei Teams,

64
00:02:49,050 --> 00:02:50,890
also, wir waren als ein Team

65
00:02:50,890 --> 00:02:52,590
da, aber wir wurden aufgeteilt in zwei

66
00:02:52,590 --> 00:02:54,970
Teams. Und beide Teams

67
00:02:54,970 --> 00:02:56,350
mussten

68
00:02:56,350 --> 00:02:58,710
einen Atomreaktor

69
00:02:58,710 --> 00:03:00,110
fixen.

70
00:03:00,990 --> 00:03:02,530
Natürlich war das logischerweise

71
00:03:02,530 --> 00:03:04,490
kein echter Atomreaktor und

72
00:03:04,490 --> 00:03:06,690
hatte mit Vorfällen in einem Atomreaktor

73
00:03:06,690 --> 00:03:07,890
auch gar nichts zu tun.

74
00:03:08,410 --> 00:03:10,450
Aber das ist so eine typische Story, die gerne bei

75
00:03:10,450 --> 00:03:12,490
solchen Spielchen auf

76
00:03:12,490 --> 00:03:14,330
auf Teambuildings gemacht wird. Also,

77
00:03:14,790 --> 00:03:16,430
das ging, das ging voll dermaßen.

78
00:03:16,510 --> 00:03:18,210
Das ging voll dermaßen. Also, guckt mal.

79
00:03:19,330 --> 00:03:20,190
Beide Teams,

80
00:03:20,890 --> 00:03:22,470
beide Teams hatten

81
00:03:22,470 --> 00:03:24,170
einen roten Kreis auf der Erde.

82
00:03:24,790 --> 00:03:26,490
So, äh, einen orangen Kreis

83
00:03:26,490 --> 00:03:28,450
auf der Erde. Das war der

84
00:03:28,450 --> 00:03:29,390
Atomreaktor.

85
00:03:30,870 --> 00:03:31,850
Und in der Mitte,

86
00:03:32,510 --> 00:03:34,530
in der Mitte, what, was ist das

87
00:03:34,530 --> 00:03:35,990
hier? Warum macht es so komische Dinger?

88
00:03:36,650 --> 00:03:37,490
So, und in der Mitte,

89
00:03:37,750 --> 00:03:40,430
in der Mitte stand eine Flasche.

90
00:03:40,550 --> 00:03:42,270
Ich mach jetzt, das, das, das wird

91
00:03:42,270 --> 00:03:44,370
kein Buba, Leute. Es wird kein Buba-Bild.

92
00:03:44,550 --> 00:03:46,410
Sieht doch vielleicht ein bisschen so aus. Okay, kein, kein

93
00:03:46,410 --> 00:03:48,290
Buba, ja. So.

94
00:03:48,810 --> 00:03:50,630
Also, in der Mitte stand eine Flasche.

95
00:03:50,890 --> 00:03:52,750
Und da drauf,

96
00:03:53,110 --> 00:03:57,370
da drauf lag

97
00:03:57,370 --> 00:03:59,050
ein Ei. Okay?

98
00:04:01,090 --> 00:04:01,670
Okay, so.

99
00:04:02,350 --> 00:04:03,430
Und dann hast du einen Rucksack

100
00:04:03,430 --> 00:04:05,290
bekommen. Das zweite machen wir einfach wieder weg.

101
00:04:05,950 --> 00:04:06,950
Und dann hast du, what,

102
00:04:07,230 --> 00:04:08,910
alter Paint, mein Gott, Paint ist,

103
00:04:09,270 --> 00:04:11,270
ich bin nicht wirklich traurig, dass Paint

104
00:04:11,270 --> 00:04:12,650
weg ist. Naja, zumindest

105
00:04:12,650 --> 00:04:15,230
hat man dann einen Rucksack bekommen mit Teilen drin.

106
00:04:16,850 --> 00:04:17,330
Und

107
00:04:17,330 --> 00:04:18,350
man musste quasi

108
00:04:18,350 --> 00:04:21,070
mit den Teilen aus dem Rucksack

109
00:04:21,070 --> 00:04:22,970
musste man was bauen.

110
00:04:23,290 --> 00:04:24,150
Im Team zusammen.

111
00:04:25,170 --> 00:04:27,250
Wie man das Ei, ohne

112
00:04:27,250 --> 00:04:29,490
dass es kaputt geht, von der Flasche

113
00:04:29,490 --> 00:04:31,230
bekommt, aus dem Kreis raus

114
00:04:31,230 --> 00:04:33,430
und danach

115
00:04:33,430 --> 00:04:35,330
die Flasche rausbekommt, ohne dass es

116
00:04:35,330 --> 00:04:35,950
kaputt geht.

117
00:04:37,930 --> 00:04:39,470
So, und da hatte man dann,

118
00:04:39,670 --> 00:04:41,110
da hatte man so Sachen drin, wie

119
00:04:41,110 --> 00:04:43,470
ein bisschen, also

120
00:04:43,470 --> 00:04:44,750
eine Schnur war drin,

121
00:04:45,350 --> 00:04:47,650
es war ein Kleiderbügel

122
00:04:47,650 --> 00:04:49,330
drin, eine Mausefalle,

123
00:04:50,070 --> 00:04:51,230
ein paar Kabelbinder.

124
00:04:52,250 --> 00:04:53,270
Was ist mit einem Atomreaktor?

125
00:04:53,270 --> 00:04:53,690
Was hat das mit einem Atomreaktor zu tun?

126
00:04:53,930 --> 00:04:55,130
Also, es hat

127
00:04:55,130 --> 00:04:57,590
insofern was, du darfst nicht, du darfst

128
00:04:57,590 --> 00:04:59,110
nicht in diesen Kreis reingehen,

129
00:04:59,290 --> 00:05:00,890
weil verstrahlt, so nach dem Motto.

130
00:05:01,310 --> 00:05:03,110
Du musstest das alles von außen machen.

131
00:05:03,410 --> 00:05:04,670
Und wir haben das, oh du Scheiß,

132
00:05:05,010 --> 00:05:07,150
ich glaube, wir haben das mit am schnellsten von

133
00:05:07,150 --> 00:05:08,870
allen Teams, die es jemals gegeben hat,

134
00:05:09,130 --> 00:05:11,250
gepackt, weil wir haben einfach alle Teile

135
00:05:11,250 --> 00:05:13,190
links liegen lassen und haben uns

136
00:05:13,190 --> 00:05:13,550
die,

137
00:05:14,850 --> 00:05:16,550
die, wie ist das,

138
00:05:16,710 --> 00:05:18,690
da war so eine aufgewickelte Schnur drin.

139
00:05:19,150 --> 00:05:20,990
Wir haben eine aufgewickelte, wir haben die Schnur

140
00:05:20,990 --> 00:05:21,910
einfach abgewickelt.

141
00:05:23,270 --> 00:05:24,310
Einer ist hierhin,

142
00:05:27,260 --> 00:05:28,380
einer hat es hierhin gestellt,

143
00:05:28,860 --> 00:05:30,860
einer hat es hierhin gestellt, mit der Schnur

144
00:05:30,860 --> 00:05:32,920
drüber gespannt. Wir haben erst dann mit der Schnur

145
00:05:32,920 --> 00:05:34,900
langsam das Ei runtergekickt.

146
00:05:35,620 --> 00:05:37,060
Das ging, weil

147
00:05:37,060 --> 00:05:39,240
das war auf dem Gras, ist nicht

148
00:05:39,240 --> 00:05:40,180
viel passiert mit dem Ei.

149
00:05:41,160 --> 00:05:43,020
Dann haben wir an die Schnur ein bisschen Metall

150
00:05:43,020 --> 00:05:45,080
dran gemacht, dass quasi hier immer

151
00:05:45,080 --> 00:05:47,180
weiter, immer weiter raus gedingst

152
00:05:47,180 --> 00:05:49,280
das Ei. Und danach

153
00:05:49,280 --> 00:05:51,060
sind wir mit der Schnur einfach ein paar Mal

154
00:05:51,060 --> 00:05:53,360
im Kreis gelaufen, bis sie sich um die Flasche

155
00:05:53,360 --> 00:05:55,100
gewickelt hat, dann haben wir die Flasche rausgehoben.

156
00:05:55,480 --> 00:05:57,120
Also das hat irgendwie, keine Ahnung,

157
00:05:57,280 --> 00:05:59,060
acht Minuten gedauert oder so, dann war

158
00:05:59,060 --> 00:06:01,300
das fertig, obwohl 30 angesetzt

159
00:06:01,300 --> 00:06:02,500
waren. Naja,

160
00:06:03,160 --> 00:06:04,940
das sind typische

161
00:06:04,940 --> 00:06:06,160
Teambuilding-Spielchen, ja.

162
00:06:06,860 --> 00:06:08,660
Typische Teambuilding-Spielchen.

163
00:06:09,520 --> 00:06:11,220
Jemand Oracle Pfeife, ich hoffe

164
00:06:11,220 --> 00:06:18,310
ja nicht, ich habe keine Ahnung.

165
00:06:19,050 --> 00:06:20,110
Und ich fasse Datenbanken

166
00:06:20,110 --> 00:06:22,170
auch nicht an, weil ich weiß, dass ich davon keine Ahnung

167
00:06:22,170 --> 00:06:23,950
habe. Und ihr wisst, wie das ist, es ist

168
00:06:23,950 --> 00:06:25,670
wichtig zu wissen, wenn man keinen Plan hat.

169
00:06:26,890 --> 00:06:27,830
Und von Datenbanken,

170
00:06:27,830 --> 00:06:29,890
also insbesondere natürlich

171
00:06:29,890 --> 00:06:30,210
auch

172
00:06:30,210 --> 00:06:30,350
Datenbanken,

173
00:06:30,350 --> 00:06:32,250
Oracle, weil da kommst du ja nur dran,

174
00:06:32,390 --> 00:06:33,150
wenn du viel Geld hast.

175
00:06:33,910 --> 00:06:36,390
Aber so alles, was es da gibt,

176
00:06:36,610 --> 00:06:38,110
ja, ich meine, von Postgres habe ich zumindest

177
00:06:38,110 --> 00:06:40,290
aus Anwendungsentwicklungssicht noch ein bisschen

178
00:06:40,290 --> 00:06:45,810
Ahnung. Aber von Oracle

179
00:06:45,810 --> 00:06:48,030
gar nicht, deswegen halte ich da echt die Finger von

180
00:06:48,030 --> 00:06:50,070
weg. Ja, SAP HANA ist auch ganz, ganz

181
00:06:50,070 --> 00:06:50,670
grausam, Alter.

182
00:06:52,270 --> 00:06:53,990
Bei uns auf der Arbeit gab es eine Diskussion,

183
00:06:54,070 --> 00:06:56,010
was man nehmen sollte. Pass mal auf, müssen wir uns mal vorstellen.

184
00:06:57,270 --> 00:06:58,210
Gab es die Diskussion,

185
00:06:58,270 --> 00:06:59,810
was man nehmen sollte für irgendeine Anwendung?

186
00:06:59,870 --> 00:07:02,050
Ich glaube, es war keine neue Anwendung, aber es sollte umgebaut

187
00:07:02,050 --> 00:07:03,570
werden. Gab es die Diskussion,

188
00:07:03,570 --> 00:07:04,570
Oracle,

189
00:07:05,270 --> 00:07:06,470
SAP HANA,

190
00:07:07,470 --> 00:07:08,950
Sybase

191
00:07:08,950 --> 00:07:10,790
oder Postgres?

192
00:07:11,690 --> 00:07:13,490
Und da haben wir uns alle angeguckt

193
00:07:13,490 --> 00:07:15,890
und haben gesagt, naja, obviously Postgres.

194
00:07:16,530 --> 00:07:17,590
Weil, macht

195
00:07:17,590 --> 00:07:19,310
alles, kann alles,

196
00:07:20,070 --> 00:07:20,610
funktioniert,

197
00:07:21,750 --> 00:07:22,890
ist etabliert,

198
00:07:23,550 --> 00:07:25,790
kostet nichts, läuft auf Linux.

199
00:07:26,430 --> 00:07:27,430
Also im Prinzip so,

200
00:07:27,990 --> 00:07:29,530
warum, warum denkt

201
00:07:29,530 --> 00:07:31,450
ihr überhaupt über die anderen Optionen nach, wenn

202
00:07:31,450 --> 00:07:33,110
ihr einfach Postgres nehmen könnt?

203
00:07:33,570 --> 00:07:35,670
Und am Ende hattest du dann da wirklich Leute

204
00:07:35,670 --> 00:07:36,810
drin, die, die

205
00:07:36,810 --> 00:07:39,550
ultra krasse SAP HANA Fans

206
00:07:39,550 --> 00:07:41,530
waren. Ich kann das nicht verstehen. Ich habe damit

207
00:07:41,530 --> 00:07:43,490
noch nie was gemacht. Ich will damit auch nichts machen.

208
00:07:44,170 --> 00:07:45,510
Allein schon, weil es SAP ist und

209
00:07:45,510 --> 00:07:47,730
wahrscheinlich wieder 30 Trilliarden

210
00:07:47,730 --> 00:07:48,250
kostet.

211
00:07:49,390 --> 00:07:51,570
Und Oracle will man sich auch nicht mehr ans Bein

212
00:07:51,570 --> 00:07:53,550
binden, als notwendig ist. Und irgendeine

213
00:07:53,550 --> 00:07:55,810
uralte Sybase Version von 1995

214
00:07:55,810 --> 00:07:57,490
erst recht. Warum nicht, also

215
00:07:57,490 --> 00:07:59,510
warum nicht einfach stinknormales Postgres,

216
00:07:59,590 --> 00:08:01,290
wenn es doch schon zur Auswahl steht?

217
00:08:03,660 --> 00:08:05,080
Aber war's nicht, war's nicht.

218
00:08:05,140 --> 00:08:05,900
Ey, ist echt

219
00:08:05,900 --> 00:08:08,900
böses Enterprise-Keckel teilweise.

220
00:08:11,450 --> 00:08:12,970
Am Morgen wird MMO gecrindet.

221
00:08:13,250 --> 00:08:14,650
Ich weiß nicht, ob ich MMO im

222
00:08:14,650 --> 00:08:16,730
Stream ein bisschen crinden soll, weil das ist

223
00:08:16,730 --> 00:08:18,810
ultra langweilig zum Zugucken, kann ich euch sagen.

224
00:08:18,890 --> 00:08:20,610
Das ist das langweiligste, was es gibt, ey.

225
00:08:21,450 --> 00:08:22,770
Leute beim MMO-Kreise

226
00:08:22,770 --> 00:08:24,330
crinen zu gucken, zuzugucken.

227
00:08:33,580 --> 00:08:35,180
Postgres macht keine, naja,

228
00:08:35,480 --> 00:08:37,260
gut, Postgres hat keine Lobby-

229
00:08:37,260 --> 00:08:39,200
Arbeitsleute, die vorbeikommen und

230
00:08:39,200 --> 00:08:40,860
also Postgres hat keine

231
00:08:40,860 --> 00:08:43,600
so Lobby-Abteilung, Sales-Abteilung,

232
00:08:43,600 --> 00:08:45,300
die ankommt und dir das Schmacken,

233
00:08:45,320 --> 00:08:47,360
ja, das stimmt, das stimmt schon, ja.

234
00:08:47,960 --> 00:08:49,400
Aber in dem Fall mussten es ja

235
00:08:49,400 --> 00:08:51,160
nicht mal irgendwelche CEOs entscheiden,

236
00:08:51,260 --> 00:08:53,100
sondern wirklich Leute aus der Technik.

237
00:08:53,420 --> 00:08:55,600
Und wie man da ernsthaft auf die Idee kommen kann,

238
00:08:56,000 --> 00:08:57,160
SAP oder Oracle

239
00:08:57,160 --> 00:08:59,460
versus Postgres, also, verstehe ich nicht.

240
00:08:59,780 --> 00:09:00,780
Das ist überhaupt eine Frage,

241
00:09:00,980 --> 00:09:03,780
dass es überhaupt die Frage gibt, verstehe ich nicht.

242
00:09:04,080 --> 00:09:05,280
Wenn du Postgres nehmen kannst,

243
00:09:05,380 --> 00:09:06,680
sollst du immer Postgres nehmen.

244
00:09:07,560 --> 00:09:09,260
Raspberry Pi 5 sind's verfügbar, ich weiß,

245
00:09:09,320 --> 00:09:11,640
ich hab's gesehen. Da habe ich trotzdem noch keinen gekauft.

246
00:09:11,700 --> 00:09:13,680
Was sagt denn, was sagt denn Barry Base?

247
00:09:15,320 --> 00:09:16,320
What the f...

248
00:09:17,680 --> 00:09:18,580
Pi 6?

249
00:09:18,580 --> 00:09:20,580
Warum habe ich am Raspberry Pi 6 gesucht?

250
00:09:21,620 --> 00:09:22,120
5.

251
00:09:23,400 --> 00:09:23,900
Okay.

252
00:09:24,960 --> 00:09:26,460
Die sind nicht verfügbar.

253
00:09:28,790 --> 00:09:29,650
Keck Waiting.

254
00:09:33,590 --> 00:09:37,350
Ja, die Sortierbarkeit war hier auch schon mal besser.

255
00:09:39,640 --> 00:09:42,480
Ja, ja, ja, wir machen gleich, wir machen gleich weiter.

256
00:09:42,480 --> 00:09:44,560
Ich muss den ganzen, ich muss erst mal Betriebssystem

257
00:09:44,960 --> 00:09:46,060
OS Update machen.

258
00:09:46,960 --> 00:09:47,740
OS Update.

259
00:09:48,840 --> 00:09:51,200
Eggman Update, Dings Update.

260
00:09:51,200 --> 00:09:51,680
Dings Update.

261
00:09:51,680 --> 00:09:52,640
Wollen Sie noch irgendwas Updates?

262
00:09:53,900 --> 00:09:57,940
Ähm, ich weiß nicht, was das ist,

263
00:09:58,040 --> 00:09:59,520
aber irgendwas, was wir nicht mehr brauchen.

264
00:10:01,480 --> 00:10:03,100
Weiß auch nicht, warum das installiert ist.

265
00:10:04,040 --> 00:10:06,500
Wenn nicht, war das mal als irgendeine Dieb...

266
00:10:06,500 --> 00:10:12,810
What the f...

267
00:10:12,810 --> 00:10:14,830
Okay, wahrscheinlich, wahrscheinlich

268
00:10:14,830 --> 00:10:17,190
wurde das mal wegen irgendeiner

269
00:10:17,190 --> 00:10:20,870
Dependency mit installiert, hä?

270
00:10:20,870 --> 00:10:23,530
Ach komm, ich lass...

271
00:10:23,530 --> 00:10:25,210
Naja, ich aninstall das einfach.

272
00:10:26,330 --> 00:10:27,630
Wird sich schon wieder installieren,

273
00:10:27,670 --> 00:10:28,130
wenn man's braucht.

274
00:10:28,150 --> 00:10:30,950
So, also, Packages sind geupdatet.

275
00:10:30,950 --> 00:10:33,430
Wichtigster Check, ASCII-Quarium geht noch.

276
00:10:33,430 --> 00:10:36,070
ASCII-Quarium nach LOLCAT gepiped, geht auch noch gut.

277
00:10:36,070 --> 00:10:37,510
Nice, Reboot-Time.

278
00:10:37,510 --> 00:10:44,020
Meinst du nicht?

279
00:10:44,020 --> 00:10:46,740
Aber zeig mal hier, wenn die lieferbar sind.

280
00:10:46,740 --> 00:10:50,680
Ja, Starter-Kit braucht keiner.

281
00:10:50,680 --> 00:10:54,440
Ja doch, doch, Starter-Kit, Starters brauchen Starter, ja?

282
00:10:54,440 --> 00:10:57,240
Wenn die noch ein Netzteil brauchen, vielleicht oder so, ja dann.

283
00:10:57,240 --> 00:10:59,880
Ich mein, es bietet sich an, für den aktuellen Raspberry Pi 5

284
00:10:59,880 --> 00:11:04,280
auch ein Netzteil zu kaufen, weil die haben ja zum ersten Mal

285
00:11:05,000 --> 00:11:09,240
also nicht zum ersten Mal, aber jetzt wiederholt, zum wiederholten Male

286
00:11:09,240 --> 00:11:15,680
bisschen, bisschen mehr Maximum Leistungsbedarf, aber

287
00:11:15,680 --> 00:11:17,880
das brauchen die ja meistens trotzdem nicht.

288
00:11:17,880 --> 00:11:23,220
Also ich, ich würd beim Raspberry Pi mit meinem alten Netzteil ins Rennen gehen.

289
00:11:23,220 --> 00:11:32,550
Das, das geht, glaub ich, immer noch voll klar.

290
00:11:32,550 --> 00:11:36,350
Was kostet das Start-, das Starter-Kit?

291
00:11:36,350 --> 00:11:39,630
Starter-Kit kostet Raspberry Pi

292
00:11:39,630 --> 00:11:41,330
ja, vier Gig reichen Digge.

293
00:11:41,330 --> 00:11:47,410
Äh, SD-Karten, Power Suppler, ein Case, das Case ist halt auch kacke.

294
00:11:47,410 --> 00:11:52,090
Ja, sowas geht vielleicht noch nicht.

295
00:11:52,090 --> 00:11:56,770
Ich, ich, ich würd mir ja sofort wieder das FLIR-Case kaufen.

296
00:11:56,770 --> 00:11:57,770
117€.

297
00:11:57,770 --> 00:12:02,450
Äh, also ich würd mir ja wieder, das gibt's ja auch schon für ein 5er,

298
00:12:02,450 --> 00:12:05,450
Pi 5 FLIR-Case.

299
00:12:05,450 --> 00:12:08,570
Ja, das da würd ich mir wieder kaufen.

300
00:12:08,570 --> 00:12:12,530
Das geht voll klar.

301
00:12:12,530 --> 00:12:14,530
Gibt's auch für Raspberry Pi 5.

302
00:12:14,530 --> 00:12:16,730
Ah, ne, das ist für ein 4er.

303
00:12:16,730 --> 00:12:23,290
Aber ich hab's letztens, ich hab's doch letztens auch schon für ein 5er gesehen.

304
00:12:23,290 --> 00:12:25,650
Himba Pi Fall Gen 2.

305
00:12:25,650 --> 00:12:28,150
Alles klar, genau, das brauchen wir.

306
00:12:28,150 --> 00:12:30,570
Himba, Himba Pi Fall Gen 2.

307
00:12:30,570 --> 00:12:33,850
Ah, das ist sogar fürs, fürs 3er.

308
00:12:33,850 --> 00:12:41,110
Also, ich hab das, ich hab das auf jeden Fall gesehen, dass das auch fürs Pi 5 schon gibt.

309
00:12:41,110 --> 00:12:42,370
Ja, fliegt.

310
00:12:42,370 --> 00:12:43,210
Fliegt.

311
00:12:43,210 --> 00:12:44,210
Das ist für ein Zero.

312
00:12:44,210 --> 00:12:47,370
Aber guck, die haben auch, die haben auch ein Pi 5 Case.

313
00:12:47,370 --> 00:12:52,370
Das ist, das ist so mein To-To-Go, äh, nee, To-Go ist das, also, falsches Wort.

314
00:12:52,370 --> 00:12:55,370
Das ist mein, mein Default Raspberry Pi Case.

315
00:12:55,370 --> 00:12:57,370
Ich find das Ding super.

316
00:12:57,370 --> 00:12:58,370
Das sieht gut aus.

317
00:12:58,370 --> 00:13:00,870
Nicht, dass es so entscheidend wär, aber es sieht clean aus.

318
00:13:00,870 --> 00:13:06,370
Du kannst unten dran relativ gut noch ne, ne, SSD pappen, SATA-SSD, beziehungsweise

319
00:13:06,370 --> 00:13:07,370
auf USB.

320
00:13:07,370 --> 00:13:08,370
SSD pappen.

321
00:13:08,370 --> 00:13:09,370
Ist auch genug Platz.

322
00:13:09,370 --> 00:13:10,370
Oder legst du oben drauf.

323
00:13:10,370 --> 00:13:11,370
Nimmst da so ein bisschen Klebeband.

324
00:13:11,370 --> 00:13:12,370
Ja.

325
00:13:12,370 --> 00:13:13,370
Machst dran.

326
00:13:13,370 --> 00:13:21,750
Und dadurch, dass das gesamte Gehäuse Alu ist, Kek, Kek-Alu, ups, meine E-Mails sind

327
00:13:21,750 --> 00:13:30,970
vielleicht grad ein bisschen groß, weil das Kek-Alu Case ist, verteilt sich die ganze Wärme

328
00:13:30,970 --> 00:13:31,970
auch gut drüber.

329
00:13:31,970 --> 00:13:39,670
Also, aber Leute, die ein Raspberry Pi quasi 24-7 auf, ähm, hoher CPU-Last laufen lassen

330
00:13:39,670 --> 00:13:43,570
wollen, also auch mit 80% plus CPU-Auslastung, dann ist das Case nix.

331
00:13:43,570 --> 00:13:44,570
Das Case.

332
00:13:44,570 --> 00:13:47,550
Also, natürlich, dadurch, dass es so nen großen Metallkörper hat, ne, verteilt die Wärme

333
00:13:47,550 --> 00:13:51,350
ganz gut und hilft auch, ein bisschen die besser abzutransportieren, aber natürlich

334
00:13:51,350 --> 00:13:56,230
wird's auch mit der Zeit zu heiß, wenn du's volle Pulle 24-7 in nem schlecht belüfteten

335
00:13:56,230 --> 00:13:57,510
Raum laufen lässt.

336
00:13:57,510 --> 00:13:58,670
Das ist ja klar.

337
00:13:58,670 --> 00:14:06,400
Aber das sind ja die aller, aller, allermeisten Raspberry Pis nicht.

338
00:14:06,400 --> 00:14:10,360
Du brauchst dann ein neues Netzteil, weil der Raspberry Pi 5 einen USB-C-Anschluss hat.

339
00:14:10,360 --> 00:14:11,360
Ne, brauch ich nicht.

340
00:14:11,360 --> 00:14:16,360
Weil ich ein ganz normales China-Chinesen-USB-Netzteil verwenden würde.

341
00:14:16,360 --> 00:14:17,240
Und.

342
00:14:17,240 --> 00:14:20,420
Und dann ein USB-C-Kabel anschließe.

343
00:14:23,070 --> 00:14:24,570
Also ich habe Berge.

344
00:14:25,350 --> 00:14:25,570
Ja.

345
00:14:26,230 --> 00:14:28,050
Ich habe Berge von denen hier.

346
00:14:29,270 --> 00:14:33,830
Ich habe aber auch welche mit Quick Charge und bis zu...

347
00:14:33,830 --> 00:14:34,950
Was ist Quick Charge?

348
00:14:36,030 --> 00:14:37,250
Bis zu 20...

349
00:14:37,250 --> 00:14:40,310
20 Volt 5 Ampere oder sowas.

350
00:14:47,020 --> 00:14:47,520
Irgendwie so.

351
00:14:49,970 --> 00:14:50,570
Ja, genau.

352
00:14:51,290 --> 00:14:51,450
Ja.

353
00:14:52,210 --> 00:14:53,430
Also sie können sogar Quick Charge.

354
00:14:53,430 --> 00:14:56,590
Also die sollten da nicht auseinanderfallen.

355
00:14:57,870 --> 00:14:59,690
Wenn ich den Raspberry Pi dran anschließe.

356
00:14:59,810 --> 00:15:01,590
Zur Not habe ich noch meine Steckdosenleiste hier.

357
00:15:01,630 --> 00:15:02,990
Die hat auch USB-Anschlüsse.

358
00:15:03,610 --> 00:15:04,290
Also insofern.

359
00:15:04,370 --> 00:15:06,590
Ich denke, ich bin für den Raspberry Pi gerüstet.

360
00:15:06,770 --> 00:15:06,990
Fünfer.

361
00:15:07,470 --> 00:15:09,190
Aber dazu müsste ich mir erstmal einen Fünfer kaufen.

362
00:15:16,320 --> 00:15:16,840
Ja, macht's auch.

363
00:15:18,320 --> 00:15:18,760
Kennst du...

364
00:15:18,760 --> 00:15:19,520
Ja, kenn ich.

365
00:15:20,120 --> 00:15:20,660
Kenn ich.

366
00:15:21,300 --> 00:15:21,580
Ja, ja.

367
00:15:22,660 --> 00:15:23,200
Kenn ich.

368
00:15:24,860 --> 00:15:26,160
Habe ich aber noch nicht mitgemacht.

369
00:15:29,160 --> 00:15:29,320
So.

370
00:15:29,700 --> 00:15:31,060
Jetzt geht's los.

371
00:15:31,060 --> 00:15:31,680
Jetzt werden wir mal...

372
00:15:31,680 --> 00:15:32,000
Rust.

373
00:15:32,400 --> 00:15:33,200
Wobei...

374
00:15:33,200 --> 00:15:33,740
Bevor wir...

375
00:15:33,740 --> 00:15:35,060
Wir machen vielleicht...

376
00:15:35,060 --> 00:15:36,960
Vielleicht erstmal die Docker-Geschichte.

377
00:15:37,440 --> 00:15:39,380
Bin mir gar nicht sicher, wo wir stehen geblieben sind.

378
00:15:39,820 --> 00:15:40,160
Wie immer.

379
00:15:40,480 --> 00:15:43,220
Ihr müsst nicht wirklich bei den letzten Streams dabei gewesen sein.

380
00:15:43,300 --> 00:15:45,520
Weil das ja immer ein bisschen unabhängig voneinander ist.

381
00:15:47,060 --> 00:15:48,380
Schadet allerdings auch nicht.

382
00:15:48,460 --> 00:15:51,440
Das heißt, wenn ihr öfters dabei sein wollt, könnt ihr ein Follow dalassen.

383
00:15:52,020 --> 00:15:52,440
Postchamp.

384
00:15:53,180 --> 00:15:53,480
So.

385
00:15:53,760 --> 00:15:55,720
Also ich muss erstmal den ganzen Krempel starten.

386
00:15:56,240 --> 00:15:56,720
Repos.

387
00:15:57,420 --> 00:15:57,900
Campchamp.

388
00:16:00,570 --> 00:16:02,230
Hier haben wir ein paar uncommittete Sachen drinne.

389
00:16:02,770 --> 00:16:03,130
So.

390
00:16:03,130 --> 00:16:04,570
Hier machen wir Rider auf.

391
00:16:06,890 --> 00:16:09,150
Für unser .NET Backend.

392
00:16:09,670 --> 00:16:11,810
Hier machen wir Rust auf.

393
00:16:12,030 --> 00:16:13,950
Für unser Low-Level-Web-RTC-Zeug.

394
00:16:16,270 --> 00:16:17,310
Ja, Strives, wie kommt's?

395
00:16:18,210 --> 00:16:20,490
Ich zeig dir gleich, was Sache ist.

396
00:16:21,350 --> 00:16:21,850
So, Rust.

397
00:16:21,950 --> 00:16:24,810
Und hier brauchen wir Whistle-Studio-Code für unser Frontend-Zeug.

398
00:16:25,310 --> 00:16:28,290
Und zack, bumm, sind schon immer 80% RAM voll wahrscheinlich.

399
00:16:29,050 --> 00:16:30,370
Haben wir hier einen Chrome...

400
00:16:30,370 --> 00:16:30,990
Oh, es laggt.

401
00:16:31,290 --> 00:16:31,830
Es laggt.

402
00:16:33,970 --> 00:16:34,330
Alter.

403
00:16:34,330 --> 00:16:34,410
Alter.

404
00:16:34,410 --> 00:16:36,430
Die VM, man.

405
00:16:41,440 --> 00:16:43,600
Was ist mit dem einen CPU-Core los hier?

406
00:16:46,320 --> 00:16:46,620
VM?

407
00:16:46,840 --> 00:16:47,520
VM, was ist?

408
00:16:48,560 --> 00:16:49,640
Krieg dich schon mal wieder ein?

409
00:16:49,800 --> 00:16:51,160
Das da oben ist meine CPU-Auslastung.

410
00:16:51,260 --> 00:16:53,560
Also 8 Cores und jeweilige CPU-Auslastungen.

411
00:16:53,760 --> 00:16:55,560
Was zum Teufel geht da im Hintergrund gerade ab?

412
00:16:57,480 --> 00:16:58,340
Ah, Jetbrains.

413
00:16:58,740 --> 00:16:59,680
Jetbrains macht's.

414
00:17:00,020 --> 00:17:01,100
Jetbrains-Java-Dinger.

415
00:17:05,910 --> 00:17:07,250
Mit Wim wäre es besser.

416
00:17:08,310 --> 00:17:08,470
Ne.

417
00:17:09,270 --> 00:17:10,510
Die CPU-Auslastung, ja.

418
00:17:10,510 --> 00:17:11,510
Aber die Möglichkeiten...

419
00:17:12,570 --> 00:17:14,830
Angenehme Sachen zu benutzen, eher nicht.

420
00:17:19,860 --> 00:17:25,560
Es sei denn, du fragst die Hardcore-Wim-Fraktion hier auf YouTube, die für alles Wim-Only macht.

421
00:17:28,610 --> 00:17:28,950
So.

422
00:17:30,150 --> 00:17:30,470
Also.

423
00:17:31,130 --> 00:17:33,290
Dann müssen wir noch unseren RTSP-Server starten.

424
00:17:35,910 --> 00:17:36,730
Den haben wir...

425
00:17:36,730 --> 00:17:37,470
Den hatte ich hier, glaube ich.

426
00:17:37,490 --> 00:17:38,430
Hatte ich ein neues Tab auf.

427
00:17:39,090 --> 00:17:39,530
EMP.

428
00:17:40,570 --> 00:17:42,310
Dann hatte ich da den RTSP-Server drin.

429
00:17:42,410 --> 00:17:43,390
Ja, RTSP.

430
00:17:44,590 --> 00:17:44,810
So.

431
00:17:45,290 --> 00:17:46,910
Da liegt hoffentlich auch das Video drin.

432
00:17:47,930 --> 00:17:48,910
RTSP-Server starten.

433
00:17:50,410 --> 00:17:51,710
FFM-Pack.

434
00:17:54,560 --> 00:17:55,120
Restream.

435
00:17:55,240 --> 00:17:56,020
Plup 2.

436
00:17:56,240 --> 00:17:58,640
Ne, das TS-File haben wir gestreamt, gell.

437
00:18:00,140 --> 00:18:02,860
Okay, und jetzt schauen wir mal, ob alles funktioniert.

438
00:18:03,660 --> 00:18:06,000
Local Host Port 80...

439
00:18:06,000 --> 00:18:07,600
Achso, ich muss die Anwendung ja noch starten.

440
00:18:08,580 --> 00:18:09,680
Äh, Tab...

441
00:18:09,680 --> 00:18:12,740
Das ist ein ganz schön langes Setup hier, bis es funktioniert.

442
00:18:13,400 --> 00:18:13,820
Okay.

443
00:18:14,940 --> 00:18:15,400
Run.

444
00:18:17,670 --> 00:18:19,730
Jetzt schauen wir mal, ob der Kram an sich noch funktioniert.

445
00:18:19,730 --> 00:18:21,290
Dann erzähle ich mal kurz was zu.

446
00:18:22,650 --> 00:18:23,450
Okay, Prager.

447
00:18:23,610 --> 00:18:25,650
Okay, es funktioniert.

448
00:18:25,850 --> 00:18:26,430
Nice, also.

449
00:18:27,050 --> 00:18:29,530
Wir streamen das Video in den Browser.

450
00:18:29,910 --> 00:18:30,390
Alles gut.

451
00:18:31,370 --> 00:18:31,830
Schon frei.

452
00:18:31,990 --> 00:18:32,070
Ja.

453
00:18:32,310 --> 00:18:34,490
Seit letzter Woche Freitag eigentlich die Arbeit vorbei.

454
00:18:35,130 --> 00:18:39,030
Aber ich hatte dann noch eine Woche als Wochenende Bereitschaft und jetzt noch zwei Tage Teambuilding.

455
00:18:39,210 --> 00:18:40,610
Also, so richtig...

456
00:18:41,270 --> 00:18:43,330
Hardcut, so Urlaub.

457
00:18:43,650 --> 00:18:44,370
Erst seit gestern.

458
00:18:45,090 --> 00:18:46,750
Ja, und seit morgen...

459
00:18:46,750 --> 00:18:48,690
So ist es.

460
00:18:49,190 --> 00:18:51,770
Und morgen muss ich da ein bisschen MMO-Kreisekund machen.

461
00:18:51,770 --> 00:18:53,550
Jetzt hat jemand gefragt vorhin.

462
00:18:53,610 --> 00:18:55,610
Welches MMO?

463
00:18:55,610 --> 00:18:57,610
Irgendwo?

464
00:18:57,610 --> 00:18:59,610
Hier.

465
00:18:59,610 --> 00:19:00,350
Hier.

466
00:19:00,350 --> 00:19:03,920
Der ältere Meier hat gefragt.

467
00:19:03,920 --> 00:19:04,920
Bist du noch da?

468
00:19:04,920 --> 00:19:06,920
Welches MMO kann ich dir sagen?

469
00:19:06,920 --> 00:19:08,920
Ich spiele ab morgen wieder...

470
00:19:08,920 --> 00:19:14,720
Dark... äh, Dark Inn.

471
00:19:14,720 --> 00:19:16,720
Dark Age of Camelot.

472
00:19:16,720 --> 00:19:20,220
Das Spiel ist älter, als viele von euch im Chat.

473
00:19:20,220 --> 00:19:22,220
Das kam 2001 raus.

474
00:19:22,220 --> 00:19:26,820
Vor 22 Jahren, Alter.

475
00:19:26,820 --> 00:19:28,820
Vor 22 Jahren, Alter.

476
00:19:28,820 --> 00:19:30,820
Und ich habe es zu EU-Release angefangen zu spielen.

477
00:19:30,820 --> 00:19:31,420
Und ich habe es zu EU-Release angefangen zu spielen.

478
00:19:31,420 --> 00:19:33,420
Und spiele es eigentlich durchgehend immer wieder.

479
00:19:33,420 --> 00:19:35,420
Bestes MMO ever.

480
00:19:35,420 --> 00:19:41,030
Ever.

481
00:19:41,030 --> 00:19:43,030
Nee, gab noch keine Diskussion über die Azubi...

482
00:19:43,030 --> 00:19:45,030
über die FISI-Abschlussprüfung.

483
00:19:45,030 --> 00:19:47,030
Oder Fachinformatik-Abschlussprüfung.

484
00:19:47,030 --> 00:19:49,030
Nee, nichts.

485
00:19:49,030 --> 00:19:51,030
Ich war auch hier nicht on.

486
00:19:51,030 --> 00:19:53,030
Seit dem...

487
00:19:53,030 --> 00:19:55,030
Seit Montag.

488
00:19:55,030 --> 00:19:57,030
Also gab es noch keine Diskussion drüber.

489
00:19:57,030 --> 00:19:59,030
War noch keine Möglichkeit drüber zu diskutieren.

490
00:19:59,030 --> 00:20:01,030
Und wie war die Abschlussprüfung?

491
00:20:01,030 --> 00:20:03,030
War die auch wieder unschaffbar, wie die letzte?

492
00:20:03,030 --> 00:20:18,570
Also, unser Video stoppt.

493
00:20:18,570 --> 00:20:20,570
So, kurze Sache.

494
00:20:20,570 --> 00:20:22,570
Ihr könnt euch gerne über die

495
00:20:22,570 --> 00:20:24,570
über die Fachinformatik-Abschlussprüfung auslassen.

496
00:20:24,570 --> 00:20:26,570
Da sage ich auch gleich was zu.

497
00:20:26,570 --> 00:20:28,570
Wenn ein paar Leute First-Hands-Experience

498
00:20:28,570 --> 00:20:30,570
da haben.

499
00:20:30,570 --> 00:20:32,570
Also, ich sage noch ganz kurz was zur Anwendung.

500
00:20:32,570 --> 00:20:34,570
Wir werden das heute verdockerisieren, dass ich das ordentlich

501
00:20:34,570 --> 00:20:36,570
testen kann, beziehungsweise ordentlich laufen lassen kann

502
00:20:36,570 --> 00:20:38,570
bei mir lokal.

503
00:20:38,570 --> 00:20:40,570
Ganz kurz, ganz simpel Übersicht,

504
00:20:40,570 --> 00:20:42,570
was es gibt.

505
00:20:42,570 --> 00:20:44,570
Wir haben eine Anwendung am Start mit etwas viel

506
00:20:44,570 --> 00:20:46,570
Debug-Output, wie es aussieht.

507
00:20:46,570 --> 00:20:48,570
Wir haben eine

508
00:20:48,570 --> 00:20:50,570
ASP.NET-Web-Anwendung

509
00:20:50,570 --> 00:20:52,570
für die

510
00:20:52,570 --> 00:20:54,570
ja, fürs Frontend,

511
00:20:54,570 --> 00:20:56,570
also als API-Endpunkte fürs Frontend.

512
00:20:56,570 --> 00:20:58,570
Dann haben wir eine Rust

513
00:20:58,570 --> 00:21:00,570
Low-Level-Web-RTC-Geschichte.

514
00:21:00,570 --> 00:21:02,570
Und wir haben ein bisschen

515
00:21:02,570 --> 00:21:04,570
JavaScript, HTML, CSS.

516
00:21:04,570 --> 00:21:06,570
Was passiert, ist folgendes.

517
00:21:06,570 --> 00:21:08,570
In diesem Video nur ganz kurz.

518
00:21:08,570 --> 00:21:10,570
Heute auch nur ganz kurz.

519
00:21:10,570 --> 00:21:12,570
Provider.

520
00:21:12,570 --> 00:21:14,570
Ich kann das nicht.

521
00:21:14,570 --> 00:21:16,570
Ich kann Provider so gut aussprechen,

522
00:21:16,570 --> 00:21:18,570
wie SemperVideo.

523
00:21:18,570 --> 00:21:20,570
Provider.

524
00:21:20,570 --> 00:21:22,570
Ich kann es nicht.

525
00:21:22,570 --> 00:21:26,650
Das ist einfach Original.

526
00:21:26,650 --> 00:21:31,240
Also, im Prinzip

527
00:21:31,240 --> 00:21:33,240
läuft es folgendermaßen.

528
00:21:33,240 --> 00:21:35,240
Kamerastream läuft hier.

529
00:21:35,240 --> 00:21:37,240
Der Kamerastream,

530
00:21:37,240 --> 00:21:39,240
gerade streamt er ein YouTube-Video

531
00:21:39,240 --> 00:21:41,240
von mir, okay?

532
00:21:41,240 --> 00:21:43,240
Kamerastream, RTSP-Server,

533
00:21:43,240 --> 00:21:45,240
FFmpeg pumpt da ein Video rein.

534
00:21:45,240 --> 00:21:47,240
Backend,

535
00:21:47,240 --> 00:21:49,240
äh, .NET-Backend geht per FFmpeg

536
00:21:49,240 --> 00:21:51,240
an den Stream dran.

537
00:21:51,240 --> 00:21:53,240
Und liest

538
00:21:53,240 --> 00:21:55,240
den Stream aus. Dann baut

539
00:21:55,240 --> 00:21:57,240
es mit dem Browser eine WebRTC-

540
00:21:57,240 --> 00:21:59,240
Verbindung auf, mit Hilfe der Low-Level

541
00:21:59,240 --> 00:22:01,240
WebRTC-Rust-Library.

542
00:22:01,240 --> 00:22:03,240
Und dann streamt es das Video

543
00:22:03,240 --> 00:22:05,240
in den Browser. Okay, so

544
00:22:05,240 --> 00:22:07,240
funktioniert es gerade.

545
00:22:07,240 --> 00:22:11,700
Das ist jetzt wirklich absolut High-Level-Overview.

546
00:22:11,700 --> 00:22:13,700
So, nachdem ich das später ja

547
00:22:13,700 --> 00:22:15,700
laufen lassen möchte,

548
00:22:15,700 --> 00:22:19,340
in einem Container,

549
00:22:19,340 --> 00:22:21,340
müssen wir das Ganze jetzt erst

550
00:22:21,340 --> 00:22:23,340
mal vercontainerisieren.

551
00:22:23,340 --> 00:22:25,340
Das heißt, wir brauchen jetzt

552
00:22:25,340 --> 00:22:27,340
weder Rust, noch .NET,

553
00:22:27,340 --> 00:22:29,340
noch JavaScript,

554
00:22:29,340 --> 00:22:31,340
noch sonst irgendwas in der Richtung.

555
00:22:31,340 --> 00:22:34,710
Deswegen stoppe ich die Anwendung

556
00:22:34,710 --> 00:22:36,710
mal wieder. Und wir müssen uns jetzt mal ein

557
00:22:36,710 --> 00:22:38,710
Docker-File aus den Fingern saugen,

558
00:22:38,710 --> 00:22:40,710
das Sinn ergibt.

559
00:22:40,710 --> 00:22:42,710
Ich glaube, dass das tatsächlich ein etwas

560
00:22:42,710 --> 00:22:44,710
komplizierteres Docker-File wird,

561
00:22:44,710 --> 00:22:46,710
weil...

562
00:22:46,710 --> 00:22:48,710
Alter...

563
00:22:48,710 --> 00:22:50,710
Monke ist...

564
00:22:50,710 --> 00:22:52,710
...

565
00:22:52,710 --> 00:22:54,710
Was ist denn jetzt los hier?

566
00:22:54,710 --> 00:22:56,710
Das hört sich ja fast schon

567
00:22:56,710 --> 00:22:58,710
hier...

568
00:22:58,710 --> 00:23:05,220
...mäßig an.

569
00:23:05,220 --> 00:23:07,220
Kommst du mit Rust inzwischen besser zurecht?

570
00:23:07,220 --> 00:23:09,220
Ja, mache ich.

571
00:23:09,220 --> 00:23:11,220
Man muss sagen, das ist zwar bestimmt

572
00:23:11,220 --> 00:23:13,220
immer noch nicht

573
00:23:13,220 --> 00:23:15,220
komplett, so wie das der Rust

574
00:23:15,220 --> 00:23:17,220
Expert

575
00:23:17,220 --> 00:23:19,220
designen würde, aber ich muss

576
00:23:19,220 --> 00:23:21,220
sagen, ich finde, das ist schon ganz brauchbar.

577
00:23:21,220 --> 00:23:23,220
Und du kannst es auch in dem Fall

578
00:23:23,220 --> 00:23:25,220
gar nicht so bauen, wie es der

579
00:23:25,220 --> 00:23:27,220
Rust Expert im

580
00:23:27,220 --> 00:23:29,220
Rust-only-Ökosystem machen würde,

581
00:23:29,220 --> 00:23:31,220
weil wir müssen das Ganze ja über eine C-Schnittstelle

582
00:23:31,220 --> 00:23:33,220
aufrufen von

583
00:23:33,220 --> 00:23:39,930
.NET aus. Also insofern...

584
00:23:39,930 --> 00:23:41,930
Es ist deutlich weniger

585
00:23:41,930 --> 00:23:43,930
Unwrap und sowas drin als am Anfang noch.

586
00:23:43,930 --> 00:23:45,930
Da geht jetzt zum Beispiel sowas

587
00:23:45,930 --> 00:23:47,930
drin wie if let some track

588
00:23:47,930 --> 00:23:49,930
bla sonst wie und...

589
00:23:49,930 --> 00:23:51,930
...

590
00:23:51,930 --> 00:23:53,930
...

591
00:23:53,930 --> 00:23:57,300
Guck mal, und hier...

592
00:23:57,300 --> 00:23:59,300
Das sieht wirklich schon

593
00:23:59,300 --> 00:24:01,300
ziemlich Rust-like

594
00:24:01,300 --> 00:24:03,300
gebaut aus, ja.

595
00:24:03,300 --> 00:24:05,300
Gut. Alright.

596
00:24:05,300 --> 00:24:07,300
Ich würde sagen, wir

597
00:24:07,300 --> 00:24:09,300
dockerisieren das mal.

598
00:24:09,300 --> 00:24:11,300
Also, warum ich glaube, dass das gar nicht

599
00:24:11,300 --> 00:24:13,300
so einfach wird, da ein

600
00:24:13,300 --> 00:24:15,300
reproduzierbares Dockerfile zu...

601
00:24:15,300 --> 00:24:17,300
...

602
00:24:17,300 --> 00:24:19,300
...

603
00:24:19,300 --> 00:24:21,300
Warum das gar nicht so einfach wird, ist,

604
00:24:21,300 --> 00:24:23,300
ich will ein kleines

605
00:24:23,300 --> 00:24:25,300
Image haben, und das, was ich

606
00:24:25,300 --> 00:24:27,300
hier brauche, ist nicht klein.

607
00:24:27,300 --> 00:24:29,300
Das heißt, es muss auf jeden Fall ein Multi

608
00:24:29,300 --> 00:24:31,300
Stage Build, heißt das glaube ich,

609
00:24:31,300 --> 00:24:33,300
werden, wo wir mehrere

610
00:24:33,300 --> 00:24:35,300
Docker-Container haben, wo dann nur

611
00:24:35,300 --> 00:24:37,300
mehrere Docker-Container

612
00:24:37,300 --> 00:24:39,300
beim Build-Prozess benutzen,

613
00:24:39,300 --> 00:24:41,300
um dann daraus

614
00:24:41,300 --> 00:24:43,300
ein möglichst kleines resultierendes

615
00:24:43,300 --> 00:24:45,300
Docker-Image zu bekommen, was wir starten

616
00:24:45,300 --> 00:24:54,630
können. Das heißt, wir machen jetzt erstmal

617
00:24:54,630 --> 00:24:58,780
Docker-Stells. Machst du bei

618
00:24:58,780 --> 00:25:00,780
Advent oft... Zeig mal, was gibt's denn da...

619
00:25:00,780 --> 00:25:02,780
Was gibt's denn da dieses

620
00:25:02,780 --> 00:25:04,780
Jahr... Muss ich das dann auch

621
00:25:04,780 --> 00:25:06,780
in Rust programmieren, Leute, wenn ich damit mache?

622
00:25:06,780 --> 00:25:12,260
Was gibt's denn diesmal für Aufgaben?

623
00:25:12,260 --> 00:25:15,770
Kalender.

624
00:25:15,770 --> 00:25:17,770
Eins.

625
00:25:17,770 --> 00:25:19,770
Oh, Kabel, ja.

626
00:25:19,770 --> 00:25:21,770
Erlang.

627
00:25:21,770 --> 00:25:28,280
Fortran.

628
00:25:28,280 --> 00:25:30,280
Okay, das muss ich

629
00:25:30,280 --> 00:25:33,720
mal in Ruhe durchlesen.

630
00:25:33,720 --> 00:25:35,720
Ich schreib mir das mal auf. Leute, ich schreib mir das mal auf.

631
00:25:35,720 --> 00:25:37,720
Vielleicht machen wir das...

632
00:25:37,720 --> 00:25:39,720
Vielleicht machen wir da echt mit.

633
00:25:39,720 --> 00:25:43,540
Ja. Warum nicht?

634
00:25:43,540 --> 00:25:49,160
Ist doch immer ganz nice.

635
00:25:49,160 --> 00:25:53,430
In was?

636
00:25:53,430 --> 00:25:55,430
Was ist Vlang?

637
00:25:55,430 --> 00:25:57,430
V-Programming.

638
00:25:57,430 --> 00:25:59,430
V-Programming-Language.

639
00:25:59,430 --> 00:26:01,430
Ich sag V.

640
00:26:01,430 --> 00:26:09,160
Die V-Programmiersprache.

641
00:26:09,160 --> 00:26:11,160
Das sieht ein bisschen aus

642
00:26:11,160 --> 00:26:13,160
wie Go, ehrlich gesagt.

643
00:26:13,160 --> 00:26:19,290
Das sieht...

644
00:26:19,290 --> 00:26:21,290
Das sieht Go doch...

645
00:26:21,290 --> 00:26:23,290
Also außer, dass es Fn ist und so, aber...

646
00:26:23,290 --> 00:26:25,290
Moment mal.

647
00:26:25,290 --> 00:26:27,290
Ist Go oder Rust Fn?

648
00:26:27,290 --> 00:26:29,290
Ich bin grad verwirrt.

649
00:26:29,290 --> 00:26:31,290
Rust ist Fn.

650
00:26:31,290 --> 00:26:33,290
Das sieht eine Mischung aus wie zwischen Go und Rust.

651
00:26:43,830 --> 00:26:45,830
Okay.

652
00:26:45,830 --> 00:26:54,200
Ah, ich weiß ja nicht.

653
00:26:54,200 --> 00:26:56,200
Ja, aber das ist jetzt ja nur wirklich kein

654
00:26:56,200 --> 00:26:58,200
Aushängeschild von der Sprache.

655
00:26:58,200 --> 00:27:00,200
Wie groß der Compiler und wie lange es dauert

656
00:27:00,200 --> 00:27:02,200
den Compiler zu bauen, oder?

657
00:27:02,200 --> 00:27:04,200
Ich mein GCC... Ich wollt grad sagen!

658
00:27:04,200 --> 00:27:06,200
Alter, GCC

659
00:27:06,200 --> 00:27:08,200
ist halt auch wieder so ein Ding. Das dauert auch 3 Stunden

660
00:27:08,200 --> 00:27:10,200
bis das fertig ist.

661
00:27:10,200 --> 00:27:12,200
Was aber nicht heißt, dass wenn ich GCC

662
00:27:12,200 --> 00:27:14,200
benutze, dass das schlecht sein muss dann.

663
00:27:14,200 --> 00:27:16,200
Wobei GCC checkt halt auch keiner mehr.

664
00:27:16,200 --> 00:27:23,350
Ist das so? Ich hab damit...

665
00:27:23,350 --> 00:27:25,350
Keine Ahnung. Ich kann dazu nicht

666
00:27:25,350 --> 00:27:28,920
sagen.

667
00:27:28,920 --> 00:27:30,920
Okay, wir bauen jetzt ein Docker-File. Auf geht's!

668
00:27:32,920 --> 00:27:34,920
Ich versuch mal ein bisschen was dabei zu erklären, okay?

669
00:27:34,920 --> 00:27:36,920
Chatgear, wer von euch

670
00:27:36,920 --> 00:27:38,920
hat

671
00:27:38,920 --> 00:27:40,920
viel Plan von Docker?

672
00:27:40,920 --> 00:27:42,920
Also ich krieg das hin. Ich will bloß mal so grob wissen.

673
00:27:42,920 --> 00:27:44,920
Also, machen wir's mal anders. Machen wir's mal anders, ja?

674
00:27:44,920 --> 00:27:46,920
Wer von euch würde

675
00:27:46,920 --> 00:27:48,920
sagen, er ist der krasse

676
00:27:48,920 --> 00:27:50,920
Docker-Container-Bau-Experte?

677
00:27:50,920 --> 00:27:52,920
Wobei man sagen muss, streiche Docker, streiche

678
00:27:52,920 --> 00:27:54,920
Docker, ersetzt es einfach durch Container.

679
00:27:54,920 --> 00:27:56,920
Ja? Weil mit Docker

680
00:27:56,920 --> 00:27:58,920
hat ja außer als CLI-Tool

681
00:27:58,920 --> 00:28:00,920
mit den eigentlichen Containern und das,

682
00:28:00,920 --> 00:28:02,920
wie das heute im, sagen wir mal so, im Enterprise-Umfeld

683
00:28:02,920 --> 00:28:04,920
läuft, eigentlich nur noch wenig zu tun.

684
00:28:04,920 --> 00:28:06,920
Ja? Also seid ihr die krasse

685
00:28:06,920 --> 00:28:08,920
Container-Bau-Profis?

686
00:28:08,920 --> 00:28:10,920
Oder seid, würdet ihr eher sagen,

687
00:28:10,920 --> 00:28:12,920
würdet ihr eher sagen, naja...

688
00:28:14,920 --> 00:28:16,920
Ich hab schon mal ein Docker-File erstellt, aber

689
00:28:16,920 --> 00:28:18,920
sonderlich kompliziert war das nicht.

690
00:28:18,920 --> 00:28:20,920
Also, war das nicht. Waren ein paar Zeilen und fertig ist.

691
00:28:20,920 --> 00:28:22,920
Okay. Also,

692
00:28:22,920 --> 00:28:24,920
denn wir müssen jetzt, ich versuch das mal zu erklären

693
00:28:24,920 --> 00:28:26,920
und dann hoffe ich, dass es

694
00:28:26,920 --> 00:28:28,920
funktioniert.

695
00:28:28,920 --> 00:28:30,920
Also, ich stell mir

696
00:28:30,920 --> 00:28:32,920
das folgendermaßen vor. Wir brauchen ja...

697
00:28:32,920 --> 00:28:34,920
Moment.

698
00:28:36,920 --> 00:28:38,920
Muss ich mal gucken. Also, Ziel ist,

699
00:28:38,920 --> 00:28:40,920
Ziel ist erstmal, ich weiß nämlich nicht, wie lange ich Zeit hab,

700
00:28:40,920 --> 00:28:42,920
vielleicht hab ich nur bis 15 Uhr oder 14.30 Uhr

701
00:28:42,920 --> 00:28:44,920
oder irgendwie so Zeit. Ziel ist erstmal, dass wir

702
00:28:44,920 --> 00:28:46,920
ein Docker-File bauen, was unsere Anwendung eben

703
00:28:46,920 --> 00:28:48,920
in ein Container-Image baut.

704
00:28:48,920 --> 00:28:50,920
Das, das bisschen

705
00:28:50,920 --> 00:28:52,920
unhandliche an dieser Anwendung ist,

706
00:28:52,920 --> 00:28:54,920
ihr seht, es gibt ein

707
00:28:54,920 --> 00:28:56,920
ein Low-Level-Part

708
00:28:56,920 --> 00:28:58,920
in Rust. Das mit Go könnt ihr euch

709
00:28:58,920 --> 00:29:00,920
wegdenken. Das mit Go

710
00:29:00,920 --> 00:29:02,920
gibt es nicht mehr. Also, das gibt es noch, aber

711
00:29:02,920 --> 00:29:04,920
das benutze ich, benutze ich aktuell nicht. Das ist einfach nur da,

712
00:29:04,920 --> 00:29:06,920
zum abgucken. Es gibt

713
00:29:06,920 --> 00:29:08,920
also, es gibt eigentlich

714
00:29:08,920 --> 00:29:10,920
mehrere Parts. Wir brauchen einmal

715
00:29:10,920 --> 00:29:12,920
den Low-Level-Rust-Part

716
00:29:12,920 --> 00:29:14,920
und wir brauchen den .NET

717
00:29:14,920 --> 00:29:16,920
Backend-Part. In Frontend

718
00:29:16,920 --> 00:29:18,920
ist noch nichts drinne. Das ist, das

719
00:29:18,920 --> 00:29:20,920
hab ich mir mal angelegt, falls ich ein bisschen mehr

720
00:29:20,920 --> 00:29:22,920
mache als eine HTML-Seite.

721
00:29:22,920 --> 00:29:24,920
Und in...

722
00:29:24,920 --> 00:29:28,680
Ja.

723
00:29:28,680 --> 00:29:30,680
Hier ist das Rust-Zeug drin.

724
00:29:30,680 --> 00:29:32,680
Und das Ding ist halt,

725
00:29:32,680 --> 00:29:35,990
ihr seht schon,

726
00:29:35,990 --> 00:29:37,990
die Dinger sind relativ groß. Also,

727
00:29:37,990 --> 00:29:39,990
Rust ist 2,2

728
00:29:39,990 --> 00:29:41,990
Gigabyte. Erinnert mich ein bisschen an Node-Modules.

729
00:29:41,990 --> 00:29:43,990
Die installieren ja auch

730
00:29:43,990 --> 00:29:45,990
immer Gott in die Welt. Nicht ganz so

731
00:29:45,990 --> 00:29:47,990
schlimm wie Node-Modules. Node-Modules

732
00:29:47,990 --> 00:29:49,990
wäre das Ding wahrscheinlich eher 15G

733
00:29:49,990 --> 00:29:51,990
groß. Aber Rust ist,

734
00:29:51,990 --> 00:29:53,990
haut auch schon mal richtig rein.

735
00:29:53,990 --> 00:29:55,990
So, dann haben wir unser .NET

736
00:29:55,990 --> 00:29:57,990
Backend und das war's.

737
00:29:57,990 --> 00:29:59,990
So, und wir können jetzt halt nicht einfach

738
00:29:59,990 --> 00:30:01,990
hergehen und ein Docker-Image bauen,

739
00:30:01,990 --> 00:30:03,990
die Anwendung drin bauen und das

740
00:30:03,990 --> 00:30:05,990
Docker-Image hochladen. Was heißt können wir nicht?

741
00:30:05,990 --> 00:30:07,990
Doch, das können wir schon, aber

742
00:30:07,990 --> 00:30:09,990
das machen wir jetzt auch, dass ihr seht, wo das

743
00:30:09,990 --> 00:30:11,990
Problem liegt. Das Docker-Image

744
00:30:11,990 --> 00:30:13,990
ist dann am Ende halt saumäßig groß.

745
00:30:13,990 --> 00:30:15,990
Weil der ganze Mist, den wir hier drinnen

746
00:30:15,990 --> 00:30:17,990
brauchen, um es zu bauen,

747
00:30:17,990 --> 00:30:19,990
dann im Docker-Image landet.

748
00:30:19,990 --> 00:30:21,990
Das will man ja eigentlich nicht. Du willst ja

749
00:30:21,990 --> 00:30:25,690
eigentlich nur den Output haben.

750
00:30:25,690 --> 00:30:27,690
Kann man für Rust kein Docker-Ignore mitgeben?

751
00:30:27,690 --> 00:30:29,690
Doch kannst du, aber du brauchst dieses ganze

752
00:30:29,690 --> 00:30:31,690
Zeug hier drinnen, wenn du die Rust-Anwendung

753
00:30:31,690 --> 00:30:33,690
baust. Also das heißt, du brauchst es dann auch

754
00:30:33,690 --> 00:30:35,690
in den Build-Container.

755
00:30:35,690 --> 00:30:39,510
Und wenn Build-Container gleich

756
00:30:39,510 --> 00:30:41,510
als Basis

757
00:30:41,510 --> 00:30:43,510
für das Image verwendet wird, sind die im

758
00:30:43,510 --> 00:30:45,510
Output-Image auch drinnen. Und dann hast du im Endeffekt

759
00:30:45,510 --> 00:30:47,510
dann Docker-Images, die

760
00:30:47,510 --> 00:30:49,510
3GB groß sind. Das ist natürlich

761
00:30:49,510 --> 00:30:51,510
Kacke. Das will man nicht haben.

762
00:30:51,510 --> 00:30:53,510
Deswegen wird es wahrscheinlich auf ein Multi-Stage

763
00:30:53,510 --> 00:30:55,510
Bild rauslaufen. Ich glaube, so heißt das.

764
00:30:55,510 --> 00:30:57,510
Dass wir erst einmal

765
00:30:57,510 --> 00:30:59,510
Rust bauen, dann

766
00:30:59,510 --> 00:31:01,510
.NET bauen, dann die Sachen rüberkommen,

767
00:31:01,510 --> 00:31:03,510
kopieren und am Ende dann

768
00:31:03,510 --> 00:31:05,510
einen möglichst kleinen

769
00:31:05,510 --> 00:31:09,340
Container bauen.

770
00:31:09,340 --> 00:31:11,340
Doch, doch, doch.

771
00:31:11,340 --> 00:31:13,340
Wir fangen jetzt erst

772
00:31:13,340 --> 00:31:15,340
mal an, wie alle anfangen mit

773
00:31:15,340 --> 00:31:17,340
Docker-Files. Und zwar

774
00:31:17,340 --> 00:31:19,340
wir schreiben das mal untereinander

775
00:31:19,340 --> 00:31:21,340
und da werdet ihr auch gleich sehen, wo das

776
00:31:21,340 --> 00:31:23,340
eigentliche Problem ist.

777
00:31:23,340 --> 00:31:25,340
Ich will ein Debian-Image

778
00:31:25,340 --> 00:31:27,340
nach Möglichkeit.

779
00:31:27,340 --> 00:31:33,080
Also wir fangen mal ganz unbedarft

780
00:31:33,080 --> 00:31:35,080
an. Wir nehmen ein Debian-Image, installieren

781
00:31:35,080 --> 00:31:37,080
uns alle Abhängigkeiten,

782
00:31:37,080 --> 00:31:39,080
kompilieren das und gucken mal, wie groß das Image ist.

783
00:31:39,080 --> 00:31:41,080
Ich persönlich denke, wir werden

784
00:31:41,080 --> 00:31:43,080
am Ende ein Multi-Stage-Bild haben,

785
00:31:43,080 --> 00:31:45,080
das offizielle Rust-Image

786
00:31:45,080 --> 00:31:47,080
für Rust zum Kompilieren verwenden,

787
00:31:47,080 --> 00:31:49,080
das offizielle

788
00:31:49,080 --> 00:31:51,080
ASP.NET-Image

789
00:31:51,080 --> 00:31:53,080
verwenden für das Output-Image und

790
00:31:53,080 --> 00:31:55,080
wahrscheinlich ein stinknormales Debian oder so,

791
00:31:55,080 --> 00:31:57,080
um die .NET-Sache zu

792
00:31:57,080 --> 00:31:59,080
bauen. Oder ne, Moment. Microsoft hat

793
00:31:59,080 --> 00:32:01,080
ja auch offizielle

794
00:32:01,080 --> 00:32:03,080
SDK-Images zum Bauen.

795
00:32:03,080 --> 00:32:05,080
Wir machen das erst mal von Hand und dann

796
00:32:05,080 --> 00:32:07,080
verbessern wir das nach und nach. Also

797
00:32:07,080 --> 00:32:09,080
from, jetzt habe ich keine Ahnung,

798
00:32:09,080 --> 00:32:11,080
Debian-Docker-Hub,

799
00:32:11,080 --> 00:32:17,340
wie da die Tags heißen.

800
00:32:17,340 --> 00:32:19,340
Bookworm. Bookworm klingt gut.

801
00:32:19,340 --> 00:32:24,890
Das ist einfach

802
00:32:24,890 --> 00:32:26,890
Debian-Bookworm, oder?

803
00:32:26,890 --> 00:32:28,890
Debian-Bookworm.

804
00:32:28,890 --> 00:32:32,970
Hau mich einfach gleich

805
00:32:32,970 --> 00:32:34,970
an Rust-Image. Doch, doch, doch.

806
00:32:34,970 --> 00:32:36,970
Wie gesagt, da wird es wahrscheinlich drauf rauslaufen.

807
00:32:36,970 --> 00:32:38,970
Da wird es

808
00:32:38,970 --> 00:32:40,970
wahrscheinlich drauf rauslaufen.

809
00:32:40,970 --> 00:32:42,970
Aber ich bin mir noch unschlüssig,

810
00:32:42,970 --> 00:32:44,970
wie wir das überhaupt bauen.

811
00:32:44,970 --> 00:32:46,970
Also, from Debian-Bookworm

812
00:32:46,970 --> 00:32:48,970
S-Bild oder sowas.

813
00:32:48,970 --> 00:33:00,790
Na, es juckt.

814
00:33:00,790 --> 00:33:02,790
So. Wir bauen

815
00:33:02,790 --> 00:33:04,790
jetzt erst mal ganz simpel

816
00:33:04,790 --> 00:33:06,790
so untereinander das, was wir brauchen,

817
00:33:06,790 --> 00:33:08,790
damit die Anwendung baut. Und dann machen wir es

818
00:33:08,790 --> 00:33:10,790
schön, dass es auch klein wird und dass es nur das

819
00:33:10,790 --> 00:33:12,790
baut, was es soll und rüberkopiert.

820
00:33:12,790 --> 00:33:14,790
Und dass man dann auch sieht, dass es

821
00:33:14,790 --> 00:33:16,790
durchaus Sinn macht, mal

822
00:33:16,790 --> 00:33:18,790
länger als zwei Minuten

823
00:33:18,790 --> 00:33:20,790
in seine Docker-Files zu stecken.

824
00:33:20,790 --> 00:33:22,790
Also. Ich würde

825
00:33:22,790 --> 00:33:24,790
sagen, wir benutzen aktuelles Debian-Image,

826
00:33:24,790 --> 00:33:26,790
weil Debian beste.

827
00:33:26,790 --> 00:33:28,790
Da haben wir sowas wie WorkDir. Kann man das eigentlich auch

828
00:33:28,790 --> 00:33:30,790
kleinschreiben? Ich glaube, man darf das kleinschreiben.

829
00:33:30,790 --> 00:33:32,790
Irgendwie habe ich mir das so angewöhnt, das

830
00:33:32,790 --> 00:33:36,620
immer groß zu schreiben.

831
00:33:36,620 --> 00:33:38,620
Das kann man aber, glaube ich, mittlerweile auch kleinschreiben.

832
00:33:38,620 --> 00:33:42,760
Ja, die schreiben es auch groß. Guck hier

833
00:33:42,760 --> 00:33:44,760
in ihren Examples.

834
00:33:46,760 --> 00:33:48,760
Also, wir fangen ohne Multistage-Bild an.

835
00:33:48,760 --> 00:33:50,760
Wir fangen ganz simpel mit einem

836
00:33:50,760 --> 00:33:54,780
Debian-Image an

837
00:33:54,780 --> 00:33:56,780
und lassen das mal da drinnen bauen. Also,

838
00:33:56,780 --> 00:33:58,780
WorkDir. Machen wir mal sowas wie Bild.

839
00:33:58,780 --> 00:34:02,090
WorkDir heißt,

840
00:34:02,090 --> 00:34:04,090
alle Sachen an Befehle, die jetzt hier

841
00:34:04,090 --> 00:34:06,090
kommen,

842
00:34:06,090 --> 00:34:08,090
kannst du ausführen, ohne dass du vorhin CD

843
00:34:08,090 --> 00:34:10,090
reinschreiben musst, ja?

844
00:34:10,090 --> 00:34:12,090
Also, wenn man jetzt zum Beispiel sowas hier macht,

845
00:34:12,090 --> 00:34:14,090
wie Copy oder sowas,

846
00:34:14,090 --> 00:34:16,090
von A nach B,

847
00:34:16,090 --> 00:34:18,090
dann bezieht sich das automatisch auf Bild.

848
00:34:20,090 --> 00:34:22,090
Was ganz... Achso! Und es sorgt

849
00:34:22,090 --> 00:34:24,090
dafür, dass das Verzeichnis, glaube ich, sogar angelegt wird.

850
00:34:24,090 --> 00:34:26,090
So, als erstes,

851
00:34:26,090 --> 00:34:28,090
weil es ein Debian-Image ist,

852
00:34:28,090 --> 00:34:30,090
run apt

853
00:34:30,090 --> 00:34:32,090
get update.

854
00:34:32,090 --> 00:34:34,090
Okay, also

855
00:34:34,090 --> 00:34:36,090
docker-build.

856
00:34:36,090 --> 00:34:44,460
So, es ist noch nicht

857
00:34:44,460 --> 00:34:46,460
viel passiert.

858
00:34:46,460 --> 00:34:48,460
Hat der jetzt wirklich geupdatet?

859
00:34:48,460 --> 00:34:50,460
Das erscheint mir...

860
00:34:50,460 --> 00:34:52,460
Erschien mir ein bisschen

861
00:34:52,460 --> 00:34:54,460
schnell. Okay,

862
00:34:54,460 --> 00:34:56,460
dann run apt get install.

863
00:34:56,460 --> 00:34:58,460
Was brauchen wir auf jeden Fall?

864
00:34:58,460 --> 00:35:00,460
Wir brauchen bestimmt curl wget.

865
00:35:00,460 --> 00:35:02,460
Curl und so Zeug.

866
00:35:02,460 --> 00:35:04,460
Wget bestimmt auch.

867
00:35:04,460 --> 00:35:07,770
Macht das jetzt was?

868
00:35:07,770 --> 00:35:12,230
Was? Ah!

869
00:35:12,230 --> 00:35:14,230
Y fehlt.

870
00:35:14,230 --> 00:35:16,230
Muss man machen, wenn man das in Scripts verwenden will.

871
00:35:16,230 --> 00:35:18,230
Ansonsten will er nämlich, dass man yes

872
00:35:18,230 --> 00:35:20,230
eintippt. Und man kann nicht yes eintippen,

873
00:35:20,230 --> 00:35:22,230
wenn es interaktiv in einem Script läuft.

874
00:35:22,230 --> 00:35:24,230
Okay, hat funktioniert.

875
00:35:24,230 --> 00:35:26,230
Übrigens, auch so ein Ding.

876
00:35:26,230 --> 00:35:28,230
Docker verwendet ja

877
00:35:28,230 --> 00:35:30,230
seit ein paar Versionen Buildkit.

878
00:35:30,230 --> 00:35:32,230
Also, vielleicht kennt ihr noch Docker-Builds von früher.

879
00:35:32,230 --> 00:35:34,230
Die waren...

880
00:35:34,230 --> 00:35:36,230
Ja...

881
00:35:36,230 --> 00:35:38,230
Sahen anders aus, auf jeden Fall.

882
00:35:38,230 --> 00:35:40,230
Mittlerweile verwenden die ja, glaube ich, Buildkit,

883
00:35:40,230 --> 00:35:42,230
weil es ja nicht verfügbar ist.

884
00:35:42,230 --> 00:35:44,230
Ich muss sagen, mir hat der Output früher besser gefallen,

885
00:35:44,230 --> 00:35:46,230
als der Buildkit-Output.

886
00:35:46,230 --> 00:35:51,980
Der Buildkit-Output sieht sehr fancy aus.

887
00:35:51,980 --> 00:35:53,980
Du hast recht.

888
00:35:53,980 --> 00:35:55,980
Das ist sinnvoll, falls irgendwelche

889
00:35:55,980 --> 00:35:57,980
Rückfragen bei apt kommen.

890
00:35:57,980 --> 00:35:59,980
Ja, das stimmt.

891
00:35:59,980 --> 00:36:01,980
Das schenken wir uns jetzt mal, weil ich wahrscheinlich

892
00:36:01,980 --> 00:36:03,980
eh das Debian-Image da nicht verwenden werde.

893
00:36:03,980 --> 00:36:05,980
Ich weiß gar nicht,

894
00:36:05,980 --> 00:36:07,980
ob man das zum alten Output

895
00:36:07,980 --> 00:36:09,980
wieder umformatieren kann.

896
00:36:09,980 --> 00:36:14,250
So.

897
00:36:14,250 --> 00:36:16,250
Ich gehe jetzt weiter.

898
00:36:16,250 --> 00:36:18,250
Wir installieren ein paar Sachen.

899
00:36:18,250 --> 00:36:20,250
Ich bin mir nicht sicher, was wir sonst noch so brauchen.

900
00:36:20,250 --> 00:36:22,250
So, jetzt...

901
00:36:22,250 --> 00:36:24,250
Ich würde sagen, wir bauen...

902
00:36:24,250 --> 00:36:26,250
Wir bilden erstmal Rust, okay?

903
00:36:26,250 --> 00:36:28,250
Wir bilden erstmal Rust.

904
00:36:28,250 --> 00:36:30,250
Damit man Rust bilden kann,

905
00:36:30,250 --> 00:36:32,250
im Container, also die

906
00:36:32,250 --> 00:36:34,250
Rust-App,

907
00:36:34,250 --> 00:36:36,250
muss ich quasi alles, was hier drin ist...

908
00:36:36,250 --> 00:36:38,250
Ne, Moment.

909
00:36:38,250 --> 00:36:40,250
Nicht alles, was hier rüber ist.

910
00:36:40,250 --> 00:36:42,250
Garantiert nicht alles, was hier rüber ist.

911
00:36:42,250 --> 00:36:44,250
Weil, dann kopiere ich auch 2 GB

912
00:36:44,250 --> 00:36:46,250
weiter rein. Das will ich ja garantiert nicht haben.

913
00:36:46,250 --> 00:36:48,250
Also,

914
00:36:48,250 --> 00:36:50,250
ich will eigentlich nur

915
00:36:50,250 --> 00:36:52,250
aus Web... Wie heißt das Ding?

916
00:36:52,250 --> 00:36:54,250
Mein Ordner.

917
00:36:54,250 --> 00:36:56,250
Aus WebRTCRust

918
00:36:56,250 --> 00:36:58,250
will ich eigentlich nur

919
00:36:58,250 --> 00:37:00,250
Source und die Cargo

920
00:37:00,250 --> 00:37:02,250
Files rüber kopieren.

921
00:37:02,250 --> 00:37:04,250
Cargo ist das NPM von Rust

922
00:37:04,250 --> 00:37:06,250
und in Source liegen halt, wer hätte es gedacht,

923
00:37:06,250 --> 00:37:08,250
die Source Files.

924
00:37:08,250 --> 00:37:10,250
Also, copy

925
00:37:10,250 --> 00:37:12,250
WebRTCRust

926
00:37:12,250 --> 00:37:19,910
Machen wir mal irgendwie sowas.

927
00:37:19,910 --> 00:37:21,910
Cargo, Sternchen,

928
00:37:21,910 --> 00:37:25,800
dahin, copy all, docker, ignore.

929
00:37:25,800 --> 00:37:27,800
Können wir auch machen, aber es sind nur 2 Sachen,

930
00:37:27,800 --> 00:37:29,800
die wir kopieren müssen. Es sollte wahrscheinlich so auch

931
00:37:29,800 --> 00:37:31,800
gehen. So, und dann Source

932
00:37:31,800 --> 00:37:33,800
kopieren wir rüber. Source.

933
00:37:33,800 --> 00:37:37,300
Ich glaube, das muss man so nennen,

934
00:37:37,300 --> 00:37:40,680
damit das funktioniert.

935
00:37:40,680 --> 00:37:42,680
Was macht es denn?

936
00:37:42,680 --> 00:37:44,680
S bezieht sich auf was?

937
00:37:44,680 --> 00:37:46,680
Weiß es Rastprogramm?

938
00:37:46,680 --> 00:37:48,680
Rust.

939
00:37:48,680 --> 00:37:56,470
Was das macht?

940
00:37:56,470 --> 00:37:58,470
Das

941
00:37:58,470 --> 00:38:00,470
sorgt dafür, wenn du ein Update

942
00:38:00,470 --> 00:38:02,470
machst und Rückfragen

943
00:38:02,470 --> 00:38:04,470
kommen in Debian,

944
00:38:04,470 --> 00:38:06,470
dass es die Rückfragen halt einfach

945
00:38:06,470 --> 00:38:08,470
mit der Default Antwort beantwortet.

946
00:38:08,470 --> 00:38:10,470
Anstatt

947
00:38:10,470 --> 00:38:12,470
dass du eine Abfrage kriegst.

948
00:38:12,470 --> 00:38:14,470
Weil du kannst ja in einem interaktiven

949
00:38:14,470 --> 00:38:16,470
Skript, im Docker-Bild,

950
00:38:16,470 --> 00:38:18,470
keine interaktive Abfrage machen an den User.

951
00:38:18,470 --> 00:38:20,470
Weil es gibt ja nichts

952
00:38:20,470 --> 00:38:22,470
zum Inputten.

953
00:38:22,470 --> 00:38:24,470
Also du hast zum Beispiel eine Sache.

954
00:38:24,470 --> 00:38:26,470
Stell dir vor, du hast von Hand

955
00:38:26,470 --> 00:38:28,470
deine ssh-Config rumeditiert.

956
00:38:28,470 --> 00:38:30,470
Du machst ein apt-get oder

957
00:38:30,470 --> 00:38:32,470
apt-upgrade, apt-was auch immer.

958
00:38:32,470 --> 00:38:34,470
Eines der Update-Commands.

959
00:38:34,470 --> 00:38:36,470
Und er sagt dir, hey User,

960
00:38:36,470 --> 00:38:38,470
du musst mir jetzt sagen,

961
00:38:38,470 --> 00:38:40,470
ob du die Default-Maintainer

962
00:38:40,470 --> 00:38:42,470
Version der ssh-Config installieren

963
00:38:42,470 --> 00:38:44,470
möchtest beim Package-Upgrade

964
00:38:44,470 --> 00:38:46,470
oder ob du deine Version behalten

965
00:38:46,470 --> 00:38:48,470
willst. So, ich glaube

966
00:38:48,470 --> 00:38:50,470
Default-Antwort ist deine Version

967
00:38:50,470 --> 00:38:52,470
behalten. Wenn du

968
00:38:52,470 --> 00:38:54,470
das ausschaltest,

969
00:38:54,470 --> 00:38:56,470
dann nimmt er immer die Default-Antwort und fragt

970
00:38:56,470 --> 00:38:58,470
dich nicht. Weil er kann dich ja in einem interaktiven Skript,

971
00:38:58,470 --> 00:39:01,780
was ohne dich läuft, nicht fragen.

972
00:39:01,780 --> 00:39:03,780
So, schauen wir mal, ob das jetzt funktioniert, was ich

973
00:39:03,780 --> 00:39:05,780
hier gemacht habe. Bild.

974
00:39:05,780 --> 00:39:07,780
Ja, scheint

975
00:39:07,780 --> 00:39:09,780
funktioniert. Ist das

976
00:39:09,780 --> 00:39:11,780
nicht durch den Parameter y

977
00:39:11,780 --> 00:39:13,780
nur halb? Das bezieht sich nur auf die

978
00:39:13,780 --> 00:39:15,780
Abfragen von apt, beziehungsweise von

979
00:39:15,780 --> 00:39:17,780
apt-get. Wenn irgendwelche

980
00:39:17,780 --> 00:39:19,780
Packages,

981
00:39:19,780 --> 00:39:21,780
die apt selbst upgradet,

982
00:39:21,780 --> 00:39:23,780
Abfragen haben, dann nicht.

983
00:39:23,780 --> 00:39:25,780
Das bezieht sich nur darauf, dass du nicht mehr

984
00:39:25,780 --> 00:39:27,780
yes bei apt eingeben musst.

985
00:39:27,780 --> 00:39:32,500
Okay, das hat funktioniert.

986
00:39:32,500 --> 00:39:34,500
Dann ist jetzt die große

987
00:39:34,500 --> 00:39:36,500
Preisfrage, Chatge.

988
00:39:36,500 --> 00:39:38,500
Wie kriegen wir

989
00:39:38,500 --> 00:39:40,500
Rust

990
00:39:40,500 --> 00:39:42,500
in unserem

991
00:39:42,500 --> 00:39:44,500
Debian-Image installiert? Ich würde sagen

992
00:39:44,500 --> 00:39:48,580
Rust up, installieren

993
00:39:48,580 --> 00:39:50,580
das damit. Perfekt, exzellent, das wollte

994
00:39:50,580 --> 00:39:52,580
ich haben. Gut, dass wir in weiser Voraussicht schon

995
00:39:52,580 --> 00:39:54,580
mal curl installiert haben.

996
00:39:54,580 --> 00:39:56,580
Was ist das? Run curl proto

997
00:39:56,580 --> 00:39:58,580
https tls v1.2

998
00:39:58,580 --> 00:40:00,580
ssf

999
00:40:00,580 --> 00:40:02,580
ex, genau das wollte ich haben.

1000
00:40:02,580 --> 00:40:04,580
Das ist, genau so hätte ich es auch

1001
00:40:04,580 --> 00:40:06,580
selbst geschrieben.

1002
00:40:06,580 --> 00:40:08,580
So.

1003
00:40:08,580 --> 00:40:11,900
Bild. Oh.

1004
00:40:11,900 --> 00:40:13,900
Was jetzt?

1005
00:40:13,900 --> 00:40:15,900
Unable to run interactively.

1006
00:40:15,900 --> 00:40:17,900
Run with minus

1007
00:40:17,900 --> 00:40:19,900
y to accept

1008
00:40:19,900 --> 00:40:21,900
ach so.

1009
00:40:21,900 --> 00:40:23,900
Ach so, ach so.

1010
00:40:27,660 --> 00:40:29,660
Jetzt bin ich mir unschlüssig. So?

1011
00:40:31,660 --> 00:40:38,300
Nee.

1012
00:40:38,300 --> 00:40:40,300
Moment, ich weiß, wo ich mir das abgucken kann.

1013
00:40:40,300 --> 00:40:42,300
Warte mal.

1014
00:40:42,300 --> 00:40:47,590
Hier, hier, exzellent.

1015
00:40:47,590 --> 00:40:49,590
Äh, minus y.

1016
00:40:49,590 --> 00:40:58,600
Ja, das stimmt.

1017
00:40:58,600 --> 00:41:00,600
DPKG ist ja eigentlich

1018
00:41:00,600 --> 00:41:02,600
die Debian-Geschichte für Packages.

1019
00:41:02,600 --> 00:41:04,600
Okay, Rust wird gedownloaded.

1020
00:41:04,600 --> 00:41:06,600
Das brauchen wir wahrscheinlich nicht, wie gesagt.

1021
00:41:06,600 --> 00:41:08,600
Ich denke, ich werde dann auf das offizielle Rust-Image

1022
00:41:08,600 --> 00:41:10,600
wechseln, was glaube ich auch auf

1023
00:41:10,600 --> 00:41:12,600
Debian basiert, wenn ich das richtig im Kopf habe,

1024
00:41:12,600 --> 00:41:14,600
gell? Ich glaube, das offizielle Rust

1025
00:41:14,600 --> 00:41:16,600
Docker-Image basiert auch auf

1026
00:41:16,600 --> 00:41:20,620
Debian.

1027
00:41:20,620 --> 00:41:22,620
Wie das die geilen Leute sagen.

1028
00:41:22,620 --> 00:41:24,620
Ja, guckt hier.

1029
00:41:24,620 --> 00:41:26,620
Booster.

1030
00:41:26,620 --> 00:41:28,620
Gibt's Bookworm? Bullseye gibt's?

1031
00:41:28,620 --> 00:41:30,620
Bookworm gibt's auch.

1032
00:41:30,620 --> 00:41:32,620
Und Alpine haben sie auch am Start.

1033
00:41:32,620 --> 00:41:34,620
Aber Alpine, scheiß drauf. Kein Bock.

1034
00:41:34,620 --> 00:41:36,620
Geh weg.

1035
00:41:36,620 --> 00:41:40,060
Müsste deine Variante mit minus

1036
00:41:40,060 --> 00:41:42,060
minus minus y auch gehen? Keine Ahnung.

1037
00:41:42,060 --> 00:41:44,060
Nachdem ich mir da unschlüssig war.

1038
00:41:44,060 --> 00:41:46,060
Wir können es ja mal ausprobieren. Nachdem ich mir da unschlüssig

1039
00:41:46,060 --> 00:41:48,060
war, habe ich es mal sein gelassen.

1040
00:41:48,060 --> 00:41:50,060
Nee.

1041
00:41:50,060 --> 00:41:52,060
Funktioniert

1042
00:41:52,060 --> 00:41:54,060
nicht.

1043
00:41:54,060 --> 00:41:56,060
Weil minus minus heißt ja eigentlich,

1044
00:41:56,060 --> 00:41:58,060
es kommen keine Options mehr. Keine Ahnung.

1045
00:41:58,060 --> 00:42:00,060
Ehrlich gesagt

1046
00:42:00,060 --> 00:42:02,060
checke ich auch gar nicht, was das macht.

1047
00:42:02,060 --> 00:42:04,060
Aber ich weiß, dass es funktioniert.

1048
00:42:04,060 --> 00:42:06,060
Und deswegen...

1049
00:42:06,060 --> 00:42:08,060
Ach so.

1050
00:42:08,060 --> 00:42:10,060
Okay, Standard-In. Aber warum

1051
00:42:10,060 --> 00:42:12,060
brauche ich Standard-In, wenn ich es doch schon reinpipe

1052
00:42:12,060 --> 00:42:14,060
in Standard-In? Wie dem auch sei,

1053
00:42:14,060 --> 00:42:16,060
keine Ahnung. Ist mir auch wurscht. Es funktioniert.

1054
00:42:16,060 --> 00:42:23,850
Debian Alpine sehe ich

1055
00:42:23,850 --> 00:42:25,850
tatsächlich auch so.

1056
00:42:25,850 --> 00:42:27,850
Ich kann jetzt zumindest aus meiner Sicht erklären,

1057
00:42:27,850 --> 00:42:29,850
warum ich der Meinung bin, dass Debian größer Alpine

1058
00:42:29,850 --> 00:42:31,850
ist. Also, eines der riesen

1059
00:42:31,850 --> 00:42:33,850
Vorteile von Alpine ist ja erstens,

1060
00:42:33,850 --> 00:42:35,850
dass es minimalistisch ist.

1061
00:42:35,850 --> 00:42:37,850
Minimalistische

1062
00:42:37,850 --> 00:42:39,850
Containerdistribution finde ich aber gar nicht mal

1063
00:42:39,850 --> 00:42:41,850
so relevant, weil

1064
00:42:41,850 --> 00:42:43,850
wenn du richtig dein

1065
00:42:43,850 --> 00:42:45,850
Docker-File baust,

1066
00:42:45,850 --> 00:42:47,850
kopierst du ja nicht quasi dein Bild-Image

1067
00:42:47,850 --> 00:42:49,850
in dein Target-Image rein,

1068
00:42:49,850 --> 00:42:51,850
sondern nur das, was du gebaut hast in dein

1069
00:42:51,850 --> 00:42:53,850
Target-Image rein. Das heißt also das Image,

1070
00:42:53,850 --> 00:42:55,850
was du dann eigentlich startest. Das heißt, es ist

1071
00:42:55,850 --> 00:42:57,850
eh gar nicht so wichtig,

1072
00:42:57,850 --> 00:42:59,850
dass das ein besonders minimalistisches

1073
00:42:59,850 --> 00:43:01,850
System ist, weil Debian ohne zusätzliche

1074
00:43:01,850 --> 00:43:03,850
Sachen installiert ist auch relativ

1075
00:43:03,850 --> 00:43:05,850
minimalistisch. Dann ist es vielleicht

1076
00:43:05,850 --> 00:43:07,850
15 MB mehr

1077
00:43:07,850 --> 00:43:09,850
als Alpine oder so, aber so what.

1078
00:43:09,850 --> 00:43:11,850
Juckt ja nicht. Dazu kommt,

1079
00:43:11,850 --> 00:43:13,850
dass Alpine regelmäßig mal Problemchen hat.

1080
00:43:13,850 --> 00:43:15,850
Zum Beispiel mit DNS-Auflösung.

1081
00:43:15,850 --> 00:43:17,850
Ich weiß nicht, ob das

1082
00:43:17,850 --> 00:43:19,850
mittlerweile gefixt ist, aber

1083
00:43:19,850 --> 00:43:21,850
Debian Alpine hat

1084
00:43:21,850 --> 00:43:23,850
glaube ich mit DNS-Antworten größer

1085
00:43:23,850 --> 00:43:25,850
... einem

1086
00:43:25,850 --> 00:43:27,850
Kilobyte oder sowas Probleme.

1087
00:43:27,850 --> 00:43:29,850
Alpine DNS

1088
00:43:29,850 --> 00:43:33,350
Error. Ja,

1089
00:43:33,350 --> 00:43:35,350
genau, hier.

1090
00:43:35,350 --> 00:43:37,350
DNS-Resolution in Alpine.

1091
00:43:37,350 --> 00:43:39,350
Ach ja, und das liegt daran,

1092
00:43:39,350 --> 00:43:41,350
dass Alpine, um besonders

1093
00:43:41,350 --> 00:43:43,350
minimalistisch zu sein,

1094
00:43:43,350 --> 00:43:45,350
nicht die normale

1095
00:43:45,350 --> 00:43:47,350
glibc verwendet,

1096
00:43:47,350 --> 00:43:49,350
sondern musel

1097
00:43:49,350 --> 00:43:51,350
libc. Das ist quasi

1098
00:43:51,350 --> 00:43:53,350
eine alternative Implementierung

1099
00:43:53,350 --> 00:43:55,350
der c-Standard-Library.

1100
00:43:55,350 --> 00:43:57,350
Wobei man sagen muss, was

1101
00:43:57,350 --> 00:43:59,350
in glibc drin ist, ist nicht unbedingt

1102
00:43:59,350 --> 00:44:01,350
alles rein standard.

1103
00:44:01,350 --> 00:44:03,350
Es ist eine

1104
00:44:03,350 --> 00:44:05,350
Neuimplementierung.

1105
00:44:05,350 --> 00:44:07,350
Und besonders minimalistisch

1106
00:44:07,350 --> 00:44:09,350
und schön für

1107
00:44:09,350 --> 00:44:11,350
Selfcontent-Anwendungen und sowas.

1108
00:44:11,350 --> 00:44:13,350
Darauf basiert Alpine, aber

1109
00:44:13,350 --> 00:44:15,350
die haben zum Beispiel Probleme aufgrund dessen

1110
00:44:15,350 --> 00:44:17,350
mit größeren DNS-Antworten. Ich bin mir gar nicht

1111
00:44:17,350 --> 00:44:19,350
sicher, ob hier drin steht, was das eigentliche

1112
00:44:19,350 --> 00:44:21,350
Problem

1113
00:44:21,350 --> 00:44:28,440
ist. Aber das Problem

1114
00:44:28,440 --> 00:44:30,440
ist, wenn die DNS-Antworten zu groß sind,

1115
00:44:30,440 --> 00:44:32,440
...

1116
00:44:32,440 --> 00:44:34,440
... dann gibt es

1117
00:44:34,440 --> 00:44:36,440
einen Error in Alpine.

1118
00:44:36,440 --> 00:44:38,440
Zumindest war das mal ein größeres

1119
00:44:38,440 --> 00:44:40,440
Problem vor einem halben Jahr oder so.

1120
00:44:40,440 --> 00:44:43,880
Das habe ich mir gemerkt.

1121
00:44:43,880 --> 00:44:45,880
Das kann durchaus sein, dass es gefixt ist.

1122
00:44:45,880 --> 00:44:47,880
Jaja. Das kann durchaus sein,

1123
00:44:47,880 --> 00:44:49,880
dass es gefixt ist.

1124
00:44:49,880 --> 00:44:51,880
Ich gehe auch mal stark von aus, dass es

1125
00:44:51,880 --> 00:44:53,880
gefixt ist. Aber Alpine hat öfters mal kleine Probleme.

1126
00:44:53,880 --> 00:44:57,450
Das Debian-Image ist größer,

1127
00:44:57,450 --> 00:44:59,450
das stimmt. Aber so ein riesen

1128
00:44:59,450 --> 00:45:01,450
Unterschied ist es am Ende nicht.

1129
00:45:01,450 --> 00:45:08,220
Und ich finde Debian einfach angenehmer.

1130
00:45:08,220 --> 00:45:10,220
Cargo-Chef.

1131
00:45:10,220 --> 00:45:12,220
Was es nicht alles gibt.

1132
00:45:12,220 --> 00:45:23,880
Cargo-Chef.

1133
00:45:23,880 --> 00:45:25,880
Das ist der Grund, warum ich Debian

1134
00:45:25,880 --> 00:45:27,880
gerne verwende als Base-Image.

1135
00:45:27,880 --> 00:45:29,880
Wie gesagt, ich glaube auch gar nicht, dass wir hierbei

1136
00:45:29,880 --> 00:45:31,880
bleiben werden, sondern das Rust-Base-Image

1137
00:45:31,880 --> 00:45:33,880
verwenden. Okay.

1138
00:45:33,880 --> 00:45:35,880
Jetgear, auf geht's. Docker-Build

1139
00:45:35,880 --> 00:45:37,880
am Start. Und jetzt

1140
00:45:37,880 --> 00:45:39,880
müssen wir Rust

1141
00:45:39,880 --> 00:45:41,880
bilden. Also,

1142
00:45:41,880 --> 00:45:43,880
wir brauchen jetzt sowas wie

1143
00:45:43,880 --> 00:45:45,880
Cargo-Build-Release.

1144
00:45:45,880 --> 00:45:47,880
Wir testen erstmal, ob das so

1145
00:45:47,880 --> 00:45:49,880
funktioniert.

1146
00:45:49,880 --> 00:45:51,880
Also, run, cd,

1147
00:45:51,880 --> 00:45:55,640
achso, Moment.

1148
00:45:55,640 --> 00:45:57,640
Was muss man machen,

1149
00:45:57,640 --> 00:45:59,640
nachdem man Rust abinstalliert hat?

1150
00:45:59,640 --> 00:46:01,640
Werden wir jetzt gleich sehen.

1151
00:46:01,640 --> 00:46:03,640
cd webrtc rusts

1152
00:46:03,640 --> 00:46:05,640
und da drinnen machen wir jetzt

1153
00:46:05,640 --> 00:46:07,640
Cargo-Build-Release. Vermutlich wird das nicht

1154
00:46:07,640 --> 00:46:09,640
funktionieren.

1155
00:46:09,640 --> 00:46:11,640
Bam, wer hätte das gedacht?

1156
00:46:11,640 --> 00:46:13,640
Can't cd to webrtc

1157
00:46:13,640 --> 00:46:15,640
rusts.

1158
00:46:15,640 --> 00:46:17,640
Warum nicht? Was ist das Problem?

1159
00:46:17,640 --> 00:46:19,640
Ah, ich kack noob.

1160
00:46:19,640 --> 00:46:21,640
Ich muss gar nicht cd'en. Ich habe doch alles hier

1161
00:46:21,640 --> 00:46:30,070
richtig hin kopiert. Lul.

1162
00:46:30,070 --> 00:46:32,070
Ich nehme wahrscheinlich

1163
00:46:32,070 --> 00:46:34,070
einfach die

1164
00:46:34,070 --> 00:46:36,070
offiziellen Microsoft ASP

1165
00:46:36,070 --> 00:46:40,790
.NET Core-Images.

1166
00:46:40,790 --> 00:46:42,790
So, Build.

1167
00:46:42,790 --> 00:46:44,790
Geht nicht, weil Cargo

1168
00:46:44,790 --> 00:46:46,790
not found. Ja, wunderbar.

1169
00:46:46,790 --> 00:46:48,790
Ähm, Alter,

1170
00:46:48,790 --> 00:46:50,790
wo liegt denn bitteschön Cargo,

1171
00:46:50,790 --> 00:46:52,790
nachdem man Rust abinstalliert

1172
00:46:52,790 --> 00:46:54,790
hat?

1173
00:46:54,790 --> 00:46:56,790
Okay, wir

1174
00:46:56,790 --> 00:46:58,790
...

1175
00:46:58,790 --> 00:47:03,450
Moment.

1176
00:47:03,450 --> 00:47:05,450
Wir gucken mal nach, Leute.

1177
00:47:05,450 --> 00:47:07,450
Wir gucken mal nach.

1178
00:47:07,450 --> 00:47:09,450
Wir machen uns mal einfach.

1179
00:47:09,450 --> 00:47:11,450
Wir taggen das Build schon mal gleich.

1180
00:47:11,450 --> 00:47:13,450
Und zwar als CamChamp

1181
00:47:13,450 --> 00:47:15,450
Version 0.1.

1182
00:47:15,450 --> 00:47:17,450
So, jetzt können wir sagen, docker run

1183
00:47:17,450 --> 00:47:19,450
...

1184
00:47:19,450 --> 00:47:21,450
Naja, "-rm".

1185
00:47:21,450 --> 00:47:23,450
Ist es "-it", oder ist es

1186
00:47:23,450 --> 00:47:25,450
...

1187
00:47:25,450 --> 00:47:27,450
Es gibt so ein paar Sachen, die mache ich prinzipiell

1188
00:47:27,450 --> 00:47:29,450
immer falsch.

1189
00:47:29,450 --> 00:47:31,450
So, CamChamp.

1190
00:47:31,450 --> 00:47:33,450
Bash.

1191
00:47:33,450 --> 00:47:35,450
Hat's funktioniert?

1192
00:47:35,450 --> 00:47:37,450
Okay, hat funktioniert.

1193
00:47:37,450 --> 00:47:39,450
So, ähm, was wollte ich jetzt

1194
00:47:39,450 --> 00:47:41,450
gucken, wo Cargo liegt, gell?

1195
00:47:41,450 --> 00:47:43,450
Also, wir sind jetzt, nur mal zur

1196
00:47:43,450 --> 00:47:45,450
Erklärung, falls man das so schnell

1197
00:47:45,450 --> 00:47:47,450
nicht mitgekommen ist. Ich zeig das noch mal.

1198
00:47:47,450 --> 00:47:49,450
Also, ich habe das Container-Image

1199
00:47:49,450 --> 00:47:51,450
gebaut. Und da kommt ja so eine

1200
00:47:51,450 --> 00:47:53,450
ID raus, oder

1201
00:47:53,450 --> 00:47:55,450
man gibt dem Container-Image einen Namen.

1202
00:47:55,450 --> 00:47:57,450
Einen Tag.

1203
00:47:57,450 --> 00:47:59,450
Und ich habe das, ich habe das

1204
00:47:59,450 --> 00:48:01,450
Image gebaut, ich habe das Image getaggt,

1205
00:48:01,450 --> 00:48:03,450
mit dem Name. Und jetzt kann ich

1206
00:48:03,450 --> 00:48:05,450
das Image starten.

1207
00:48:05,450 --> 00:48:07,450
So, und "-rm",

1208
00:48:07,450 --> 00:48:09,450
heißt, nachdem ich das Image gestartet habe

1209
00:48:09,450 --> 00:48:11,450
und quasi es wieder gestoppt wird,

1210
00:48:11,450 --> 00:48:13,450
soll es auch gleich gelöscht werden.

1211
00:48:13,450 --> 00:48:15,450
"-i", ist Interactive

1212
00:48:15,450 --> 00:48:17,450
und "-t", ist

1213
00:48:17,450 --> 00:48:19,450
Konsolen-Allocation oder

1214
00:48:19,450 --> 00:48:21,450
irgendwie sowas. Das ist

1215
00:48:21,450 --> 00:48:23,450
der Tag vom eben gebauten Image und das ist

1216
00:48:23,450 --> 00:48:25,450
das Programm, was er da drinnen starten soll.

1217
00:48:25,450 --> 00:48:27,450
Also im Prinzip startet er eine Shell,

1218
00:48:27,450 --> 00:48:29,450
im Container-Image.

1219
00:48:29,450 --> 00:48:31,450
Das heißt, wir können jetzt nachgucken,

1220
00:48:31,450 --> 00:48:33,450
wo RustUp den Kram

1221
00:48:33,450 --> 00:48:37,020
installiert hat.

1222
00:48:37,020 --> 00:48:39,020
Keine Ahnung. Guck mal, es gibt da auch ein

1223
00:48:39,020 --> 00:48:41,020
Cargo. Cargo? Bin?

1224
00:48:41,020 --> 00:48:43,020
Cargo.

1225
00:48:43,020 --> 00:48:45,020
Okay, vielleicht, soll ich das vielleicht direkt angeben?

1226
00:48:45,020 --> 00:48:52,230
Soll ich das vielleicht...

1227
00:48:52,230 --> 00:48:54,230
Wo ist eigentlich meine...

1228
00:48:54,230 --> 00:48:56,230
Wo ist eigentlich meine Cargo-

1229
00:48:56,230 --> 00:48:58,230
Tommel und sowas? Irgendwie...

1230
00:48:58,230 --> 00:49:00,230
Irgendwie ist die weg.

1231
00:49:00,230 --> 00:49:02,230
Badabumdingsbumsdansch

1232
00:49:02,230 --> 00:49:04,230
Wo ist denn die hin?

1233
00:49:04,230 --> 00:49:06,230
Die habe ich doch immer kopiert, die müsste doch eigentlich auch da sein.

1234
00:49:06,230 --> 00:49:10,630
Na, war es das nicht?

1235
00:49:10,630 --> 00:49:14,780
So, Build, Cargo,

1236
00:49:14,780 --> 00:49:16,780
Cargo, ne, Bin,

1237
00:49:16,780 --> 00:49:18,780
Cargo,

1238
00:49:18,780 --> 00:49:20,780
ja, äh,

1239
00:49:20,780 --> 00:49:22,780
Build.

1240
00:49:22,780 --> 00:49:24,780
No Cargo

1241
00:49:24,780 --> 00:49:26,780
Tommel found. Ja, ja, ist okay.

1242
00:49:26,780 --> 00:49:28,780
Ist gut, ist gut. Also

1243
00:49:28,780 --> 00:49:30,780
nochmal bauen. Run

1244
00:49:30,780 --> 00:49:32,780
und zwar Run Cargo

1245
00:49:32,780 --> 00:49:34,780
Build Release

1246
00:49:34,780 --> 00:49:36,780
und wo ist das Problem?

1247
00:49:36,780 --> 00:49:38,780
Sorry for Bash. Pog

1248
00:49:38,780 --> 00:49:40,780
Subscription. Wo ist das Problem,

1249
00:49:40,780 --> 00:49:42,780
dass er meine Tommel-Config

1250
00:49:42,780 --> 00:49:44,780
nicht rüberkopiert? Da ist sie doch.

1251
00:49:44,780 --> 00:49:48,660
Hier, guck, da ist noch Bestande.

1252
00:49:48,660 --> 00:49:50,660
Ach, guck mal, das ist klein geschrieben.

1253
00:49:50,660 --> 00:49:52,660
Muss das groß geschrieben sein vielleicht?

1254
00:49:52,660 --> 00:49:54,660
So. Übrigens, jetzt

1255
00:49:54,660 --> 00:49:56,660
sieht man eine Sache,

1256
00:49:56,660 --> 00:49:58,660
worauf man unbedingt achten muss beim Docker,

1257
00:49:58,660 --> 00:50:00,660
beim Docker-Image erstellen.

1258
00:50:00,660 --> 00:50:02,660
Was wird jetzt passieren, Leute,

1259
00:50:02,660 --> 00:50:04,660
wenn ich das nochmal bilden lasse?

1260
00:50:04,660 --> 00:50:06,660
Also, ich zeige euch das mal.

1261
00:50:06,660 --> 00:50:08,660
So, ja.

1262
00:50:08,660 --> 00:50:10,660
Docker Run, äh, nicht Docker Run, Build.

1263
00:50:10,660 --> 00:50:12,660
Ihr seht, zack, bumm,

1264
00:50:12,660 --> 00:50:14,660
geht relativ schnell. Und jetzt passt

1265
00:50:14,660 --> 00:50:16,660
mal auf. Wenn ich jetzt,

1266
00:50:16,660 --> 00:50:18,660
was wird, was wird jetzt passieren,

1267
00:50:18,660 --> 00:50:20,660
wenn ich das hier ändere

1268
00:50:20,660 --> 00:50:22,660
an der Stelle? Genau, Rebuild ab dem

1269
00:50:22,660 --> 00:50:24,660
Step. Der wird alles hier unten drunter neu

1270
00:50:24,660 --> 00:50:26,660
ausführen, also inklusive Download von Rust.

1271
00:50:26,660 --> 00:50:28,660
Das heißt, man sollte sich wirklich gut

1272
00:50:28,660 --> 00:50:30,660
überlegen, wie man seine

1273
00:50:30,660 --> 00:50:32,660
einzelnen Steps im Docker-File

1274
00:50:32,660 --> 00:50:34,660
definiert. Das heißt, es wäre

1275
00:50:34,660 --> 00:50:36,660
deutlich sinnvoller, die

1276
00:50:36,660 --> 00:50:38,660
Installation hier zu machen

1277
00:50:38,660 --> 00:50:40,660
und das Kopieren

1278
00:50:40,660 --> 00:50:42,660
und das Installieren danach.

1279
00:50:42,660 --> 00:50:44,660
Weil das hier wird sich

1280
00:50:44,660 --> 00:50:46,660
öfters ändern. Download

1281
00:50:46,660 --> 00:50:48,660
von der Rust-Runtime

1282
00:50:48,660 --> 00:50:50,660
muss wahrscheinlich nicht öfters

1283
00:50:50,660 --> 00:50:56,020
passieren. Build.

1284
00:50:56,020 --> 00:50:58,020
Hey!

1285
00:50:58,020 --> 00:51:00,020
Ach, nee.

1286
00:51:00,020 --> 00:51:02,020
Ich dachte, es kompletiert schon. Es lädt gerade Rust

1287
00:51:02,020 --> 00:51:06,420
runter. Rust.

1288
00:51:06,420 --> 00:51:19,460
Du, du, du, du, du, du,

1289
00:51:19,460 --> 00:51:21,460
du, du, du, du, du.

1290
00:51:21,460 --> 00:51:23,460
Au, au, au.

1291
00:51:23,460 --> 00:51:37,660
Ich weiß,

1292
00:51:37,660 --> 00:51:39,660
woran es liegt. Das ist Debian.

1293
00:51:39,660 --> 00:51:41,660
Dem fehlen seine ganzen

1294
00:51:41,660 --> 00:51:43,660
Package...

1295
00:51:43,660 --> 00:51:45,660
Devil Library

1296
00:51:45,660 --> 00:51:47,660
Geschichten.

1297
00:51:47,660 --> 00:51:49,660
Und jetzt kommt wieder ein Problem,

1298
00:51:49,660 --> 00:51:51,660
was ich habe, was ich mir bei Debian seit

1299
00:51:51,660 --> 00:51:53,660
Jahren nicht merken kann.

1300
00:51:53,660 --> 00:51:55,660
Wie heißt dieses Package?

1301
00:51:55,660 --> 00:51:57,660
Heißt es Build Essentials

1302
00:51:57,660 --> 00:51:59,660
oder heißt es Build Essentials?

1303
00:51:59,660 --> 00:52:01,660
Upt Install

1304
00:52:01,660 --> 00:52:03,660
Build Essentials

1305
00:52:03,660 --> 00:52:05,660
Essentials

1306
00:52:05,660 --> 00:52:07,660
Es heißt Build Essentials.

1307
00:52:07,660 --> 00:52:09,660
Nein, es heißt Build Essentials.

1308
00:52:09,660 --> 00:52:11,660
Ich bring das

1309
00:52:11,660 --> 00:52:13,660
ohne Scheiß jedes Mal, ich schreib das

1310
00:52:13,660 --> 00:52:15,660
jedes Mal falsch. Jedes Mal.

1311
00:52:15,660 --> 00:52:17,660
Glücklicherweise hat man Auto Complete und meistens ist es

1312
00:52:17,660 --> 00:52:19,660
kein Problem.

1313
00:52:19,660 --> 00:52:21,660
Build Essentials. So, und jetzt seht ihr,

1314
00:52:21,660 --> 00:52:23,660
was auch doof ist?

1315
00:52:23,660 --> 00:52:25,660
Ich passe diesen Step hier oben an

1316
00:52:25,660 --> 00:52:27,660
und jetzt wird alles nochmal neu ausgeführt.

1317
00:52:27,660 --> 00:52:29,660
Das heißt, man sollte schon

1318
00:52:29,660 --> 00:52:31,660
seine Docker Steps

1319
00:52:31,660 --> 00:52:33,660
carefull

1320
00:52:33,660 --> 00:52:35,660
wählen, dass das nicht

1321
00:52:35,660 --> 00:52:37,660
ausartet in

1322
00:52:37,660 --> 00:52:39,660
500 neuen Installs und so.

1323
00:52:39,660 --> 00:52:43,670
Ah ja, und jedes Image ist

1324
00:52:43,670 --> 00:52:45,670
lokal bei mir in der Registry noch drinnen.

1325
00:52:45,670 --> 00:52:47,670
Und ich müsste jetzt erstmal

1326
00:52:47,670 --> 00:52:49,670
Docker cleanen. Ihr werdet sehen,

1327
00:52:49,670 --> 00:52:51,670
guck mal, wir haben angefangen bei 100...

1328
00:52:51,670 --> 00:52:53,670
Wie viel haben wir? Warte mal, Chat ist doch ganz einfach

1329
00:52:53,670 --> 00:52:55,670
rauszufinden, bei wie viel

1330
00:52:55,670 --> 00:52:57,670
Plattenplatz wir angefangen haben.

1331
00:52:57,670 --> 00:52:59,670
Also wir werden jetzt einige Gigabyte

1332
00:52:59,670 --> 00:53:01,670
verschwinden.

1333
00:53:01,670 --> 00:53:05,240
Wir haben angefangen bei

1334
00:53:05,240 --> 00:53:09,060
100, guck mal,

1335
00:53:09,060 --> 00:53:11,060
3 Gig haben wir schon

1336
00:53:11,060 --> 00:53:14,630
verbraucht. Oh, guck mal,

1337
00:53:14,630 --> 00:53:18,070
es funzt.

1338
00:53:18,070 --> 00:53:20,070
Rust Compiled.

1339
00:53:20,070 --> 00:53:31,190
Oh, Alter, Rust Compiled, aber echt

1340
00:53:31,190 --> 00:53:43,460
lange. Rust

1341
00:53:43,460 --> 00:53:45,460
Placingly Fast.

1342
00:53:45,460 --> 00:53:49,740
Gut, ich mein,

1343
00:53:49,740 --> 00:53:51,740
es dauert halt 20 Milliarden Dependencies

1344
00:53:51,740 --> 00:53:53,740
zu... Boah, Alter, guckt euch

1345
00:53:53,740 --> 00:53:55,740
die CPU-Auslastung an, Mann.

1346
00:53:55,740 --> 00:53:57,740
Meine

1347
00:53:57,740 --> 00:53:59,740
VM ist einfach komplett...

1348
00:53:59,740 --> 00:54:01,740
Alter!

1349
00:54:01,740 --> 00:54:03,740
Fuck!

1350
00:54:03,740 --> 00:54:05,740
Okay,

1351
00:54:05,740 --> 00:54:07,740
er ist fertig, alles klar. Die VM ist einfach

1352
00:54:07,740 --> 00:54:09,740
komplett ausgesetzt. Aber ist ja gut, ist ja gut.

1353
00:54:09,740 --> 00:54:11,740
Unbenutzte CPU-Cores sind

1354
00:54:11,740 --> 00:54:13,740
wasted CPU-Cores, ja?

1355
00:54:13,740 --> 00:54:15,740
Okay, es hat

1356
00:54:15,740 --> 00:54:17,740
funktioniert, nice. So, wenn ich

1357
00:54:17,740 --> 00:54:19,740
jetzt nochmal bilde, geht's natürlich deutlich

1358
00:54:19,740 --> 00:54:21,740
schneller, alles klar. So, wenn das

1359
00:54:21,740 --> 00:54:23,740
jetzt funktioniert hat, nicht exec,

1360
00:54:23,740 --> 00:54:25,740
run, wenn das jetzt funktioniert hat,

1361
00:54:25,740 --> 00:54:27,740
haben wir hier eine

1362
00:54:27,740 --> 00:54:29,740
Target

1363
00:54:29,740 --> 00:54:31,740
Release

1364
00:54:31,740 --> 00:54:33,740
haben wir die Library drinnen liegen, okay.

1365
00:54:33,740 --> 00:54:35,740
Excellent, hat funktioniert, nice.

1366
00:54:35,740 --> 00:54:37,740
Alles gut.

1367
00:54:37,740 --> 00:54:39,740
So, Dockerfile.

1368
00:54:39,740 --> 00:54:41,740
Übrigens auch ein weiteres Problem,

1369
00:54:41,740 --> 00:54:43,740
wo jetzt Multistage-Builds schon sehr

1370
00:54:43,740 --> 00:54:45,740
sinnvoll wären, weil

1371
00:54:45,740 --> 00:54:47,740
wenn ich jetzt

1372
00:54:47,740 --> 00:54:49,740
was an meinem Rust-Source-Code ändere,

1373
00:54:49,740 --> 00:54:51,740
macht er dir alle folgenden, ab hier,

1374
00:54:51,740 --> 00:54:53,740
alle folgenden Steps

1375
00:54:53,740 --> 00:54:55,740
neu. Das heißt, als nächstes kommt hier unser

1376
00:54:55,740 --> 00:54:57,740
.NET-Build und da wird dann auch

1377
00:54:57,740 --> 00:54:59,740
jedes Mal neu ausgeführt, also

1378
00:54:59,740 --> 00:55:01,740
das wird auf jeden Fall auf

1379
00:55:01,740 --> 00:55:03,740
Multistage-Builds rauslaufen,

1380
00:55:03,740 --> 00:55:05,740
dass das ordentlich funktioniert.

1381
00:55:05,740 --> 00:55:07,740
Okay, aber ich will's

1382
00:55:07,740 --> 00:55:09,740
einmal zum Laufen bekommen, bevor wir's komplizierter

1383
00:55:09,740 --> 00:55:11,740
machen. Also, wir haben jetzt

1384
00:55:11,740 --> 00:55:13,740
hier Cargo, Cargo-Build, okay, das ist

1385
00:55:13,740 --> 00:55:15,740
richtig, alles klar.

1386
00:55:15,740 --> 00:55:17,740
Wie war das übrigens nochmal? Docker prune?

1387
00:55:17,740 --> 00:55:19,740
Ne, Docker oder Docker prune?

1388
00:55:19,740 --> 00:55:23,050
Es gab doch so ein

1389
00:55:23,050 --> 00:55:25,050
System prune.

1390
00:55:25,050 --> 00:55:27,050
Docker System

1391
00:55:27,050 --> 00:55:29,050
prune minus a, genau.

1392
00:55:29,050 --> 00:55:31,050
So, guck doch mal. Jetzt haben wir 106,

1393
00:55:31,050 --> 00:55:33,050
106 Gig.

1394
00:55:33,050 --> 00:55:35,050
Ich sag Docker mal, alle,

1395
00:55:35,050 --> 00:55:40,410
bevor ich jetzt irgendwie, ja,

1396
00:55:40,410 --> 00:55:42,410
ich glaube Ubuntu und

1397
00:55:42,410 --> 00:55:44,410
Hello World und Traffic brauchen wir nicht mehr,

1398
00:55:44,410 --> 00:55:46,410
sieben Monate ago.

1399
00:55:46,410 --> 00:55:48,410
Jetzt sagen wir mal, Docker

1400
00:55:48,410 --> 00:55:50,410
löscht einfach mal alles.

1401
00:55:50,410 --> 00:55:52,410
Oh fuck, jetzt muss ich den

1402
00:55:52,410 --> 00:56:00,580
Camp-Champ neu bauen. Egal, egal.

1403
00:56:00,580 --> 00:56:02,580
20, Leute,

1404
00:56:02,580 --> 00:56:04,580
20 Gig, einfach mal

1405
00:56:04,580 --> 00:56:12,060
weg. Ja, ja, ja,

1406
00:56:12,060 --> 00:56:14,060
hast du recht. Das geht jetzt aber nicht richtig,

1407
00:56:14,060 --> 00:56:16,060
wobei, naja, es würde doch, doch,

1408
00:56:16,060 --> 00:56:18,060
doch, es würde schon funktionieren,

1409
00:56:18,060 --> 00:56:20,060
ich könnte jetzt, ich könnte hier oben schon

1410
00:56:20,060 --> 00:56:22,060
die .NET Runtime installieren und sonst was,

1411
00:56:22,060 --> 00:56:24,060
aber das dumme ist halt, wenn man

1412
00:56:24,060 --> 00:56:26,060
sag mal so logisch gruppieren will,

1413
00:56:26,060 --> 00:56:28,060
so nach dem Motto, wir bauen erst Rust

1414
00:56:28,060 --> 00:56:30,060
und dann bauen wir .NET,

1415
00:56:30,060 --> 00:56:32,060
dann würde ich ab diesem

1416
00:56:32,060 --> 00:56:34,060
Step hier, sobald sich mein Rust-Source-Code

1417
00:56:34,060 --> 00:56:36,060
ändert, halt immer das, das ganze

1418
00:56:36,060 --> 00:56:38,060
.NET Zeug neu bauen. Deswegen, das

1419
00:56:38,060 --> 00:56:40,060
schreit eigentlich nach Multi-Stage-Build.

1420
00:56:40,060 --> 00:56:42,060
So, jetzt brauchen wir .NET

1421
00:56:42,060 --> 00:56:44,060
als nächstes.

1422
00:56:44,060 --> 00:56:49,860
Gig, hört sich

1423
00:56:49,860 --> 00:56:51,860
Boomer an. Echt, warum?

1424
00:56:51,860 --> 00:56:53,860
Was, was, was sagen die coolen Nichts,

1425
00:56:53,860 --> 00:56:55,860
was sagen die coolen Nichts-Boomer

1426
00:56:55,860 --> 00:56:59,240
zu Gigabyte?

1427
00:56:59,240 --> 00:57:03,320
GB? Wobei es ja

1428
00:57:03,320 --> 00:57:05,320
eigentlich Gibi, Gibi, ne,

1429
00:57:05,320 --> 00:57:07,320
Moment, Gibi oder Gibi

1430
00:57:07,320 --> 00:57:09,320
heißen müsste?

1431
00:57:09,320 --> 00:57:13,590
Gibi, gell?

1432
00:57:13,590 --> 00:57:15,590
Gibi? Aber es ist Meebi und nicht Meebi.

1433
00:57:17,590 --> 00:57:19,590
Niemand

1434
00:57:19,590 --> 00:57:21,590
Leute, ohne Scheiß, ich

1435
00:57:21,590 --> 00:57:23,590
kenne niemand, der diese Einheiten

1436
00:57:23,590 --> 00:57:25,590
verwendet, in der Aussprache, ja?

1437
00:57:25,590 --> 00:57:27,590
Vielleicht zum Rechnen und so, aber in der Aussprache

1438
00:57:27,590 --> 00:57:33,460
niemand, niemand.

1439
00:57:33,460 --> 00:57:35,460
Okay, weiter, jetzt brauchen wir, jetzt brauchen wir

1440
00:57:35,460 --> 00:57:39,930
unser .NET Zeug.

1441
00:57:39,930 --> 00:57:41,930
Gibt es offizielle Node.js-elt, äh,

1442
00:57:41,930 --> 00:57:43,930
Node.js-elt Images?

1443
00:57:43,930 --> 00:57:45,930
Node.js Chiseled Images?

1444
00:57:45,930 --> 00:57:47,930
Es gibt auf

1445
00:57:47,930 --> 00:57:49,930
jeden Fall offizielle Node Images, relativ

1446
00:57:49,930 --> 00:57:51,930
sicher. Nachdem ich wenig Node-Anwendungen

1447
00:57:51,930 --> 00:57:53,930
baue, weiß ich es nicht, aber es würde mich enorm

1448
00:57:53,930 --> 00:58:00,380
wundern, wenn es die nicht gäbe.

1449
00:58:00,380 --> 00:58:02,380
So, also, ich sehe schon, wir müssen trotzdem

1450
00:58:02,380 --> 00:58:04,380
die Sachen in unterschiedlichen Verzeichnissen

1451
00:58:04,380 --> 00:58:06,380
machen, weil ich kann ja schlecht

1452
00:58:06,380 --> 00:58:08,380
im gleichen Bildverzeichnis, äh,

1453
00:58:08,380 --> 00:58:10,380
.NET und Rust

1454
00:58:10,380 --> 00:58:12,380
bilden, wobei,

1455
00:58:12,380 --> 00:58:14,380
warum eigentlich nicht? Die kommen sich ja

1456
00:58:14,380 --> 00:58:16,380
nicht richtig, nicht wirklich in die Quere, oder?

1457
00:58:16,380 --> 00:58:20,260
Wobei, das durchaus, das ist,

1458
00:58:20,260 --> 00:58:22,260
das könnte durchaus ein bisschen verwirrend werden,

1459
00:58:22,260 --> 00:58:24,260
für den einen oder anderen Compiler, wenn

1460
00:58:24,260 --> 00:58:26,260
es mehrere, okay, schauen wir mal.

1461
00:58:26,260 --> 00:58:28,260
Also, als erstes müssen wir jetzt

1462
00:58:28,260 --> 00:58:30,260
.NET installieren. .NET lässt

1463
00:58:30,260 --> 00:58:32,260
sich relativ easy installieren, nämlich so,

1464
00:58:32,260 --> 00:58:37,180
.NET 8.

1465
00:58:37,180 --> 00:58:39,180
Ich schreibe jetzt mal was rein, bevor jetzt gleich,

1466
00:58:39,180 --> 00:58:41,180
jetzt hatten wir nämlich schon öfters im Chat, dass ich

1467
00:58:41,180 --> 00:58:43,180
10 Minuten vorher was erzählt habe,

1468
00:58:43,180 --> 00:58:45,180
und dann kam jemand rein,

1469
00:58:45,180 --> 00:58:47,180
beiß, danke schon für den Sub, Dennis, danke,

1470
00:58:47,180 --> 00:58:49,180
subscription, Leute. Ich schreibe das jetzt oben

1471
00:58:49,180 --> 00:58:51,180
als Kommentar rein, weil

1472
00:58:51,180 --> 00:58:53,180
viele im Chat lacken critical

1473
00:58:53,180 --> 00:58:55,180
information, wenn sie in den Stream reinkommen.

1474
00:58:55,180 --> 00:58:57,180
Und ich weiß nicht mehr, was es für ein Thema

1475
00:58:57,180 --> 00:58:59,180
war. Ich habe letztens, glaube ich,

1476
00:58:59,180 --> 00:59:01,180
20 Minuten lang,

1477
00:59:01,180 --> 00:59:03,180
fünfmal das gleiche erklärt, und dann

1478
00:59:03,180 --> 00:59:05,180
kamen immer Leute ins Stream und sagen,

1479
00:59:05,180 --> 00:59:07,180
Max, aber so macht man das doch gar nicht, macht

1480
00:59:07,180 --> 00:59:09,180
es doch so und so. Ja, ich

1481
00:59:09,180 --> 00:59:11,180
weiß, deswegen machen wir es erstmal einfach,

1482
00:59:11,180 --> 00:59:13,180
und dann machen wir es ein bisschen komplizierter, aber richtig,

1483
00:59:13,180 --> 00:59:15,180
fünf Minuten später kam wieder einer rein,

1484
00:59:15,180 --> 00:59:17,180
Max, aber das macht man doch gar nicht so, macht es

1485
00:59:17,180 --> 00:59:19,180
doch mal anders. Wir schreiben das da rein,

1486
00:59:19,180 --> 00:59:21,180
deswegen schreibe ich das jetzt mal da oben rein,

1487
00:59:21,180 --> 00:59:23,180
am Ende machen wir

1488
00:59:23,180 --> 00:59:25,180
Multistage, heißt das Multistage

1489
00:59:25,180 --> 00:59:28,620
oder Multistage Build?

1490
00:59:28,620 --> 00:59:30,620
Soccer Multi, ups.

1491
00:59:30,620 --> 00:59:32,620
Soccer Multistage

1492
00:59:32,620 --> 00:59:36,440
Build.

1493
00:59:36,440 --> 00:59:38,440
Das ist alles

1494
00:59:38,440 --> 00:59:40,440
an die

1495
00:59:40,440 --> 00:59:42,440
Five Hat Community

1496
00:59:42,440 --> 00:59:45,750
dass das nicht wieder so ist

1497
00:59:45,750 --> 00:59:51,370
wie das letzte Mal.

1498
00:59:51,370 --> 00:59:53,370
Style92

1499
00:59:53,370 --> 00:59:55,370
Pog-Subscription

1500
00:59:55,370 --> 00:59:57,370
Danke für die ganzen Subs, Leute, es ist

1501
00:59:57,370 --> 01:00:01,060
sehr...

1502
01:00:01,060 --> 01:00:03,060
So, also jetzt installieren wir erstmal

1503
01:00:03,060 --> 01:00:06,630
.net

1504
01:00:06,630 --> 01:00:12,730
Build

1505
01:00:16,730 --> 01:00:20,300
Warum bildet er

1506
01:00:20,300 --> 01:00:22,300
jetzt alles? Achso, weil

1507
01:00:22,300 --> 01:00:24,300
ich gerade alle meine Images weggeworfen habe,

1508
01:00:24,300 --> 01:00:27,740
ja, das würde es erklären.

1509
01:00:27,740 --> 01:00:33,740
Wenn man alle Images löscht,

1510
01:00:33,740 --> 01:00:37,940
Alter, meine Nase läuft zu schlimm,

1511
01:00:37,940 --> 01:00:42,660
ich habe nichts zum Putzen.

1512
01:00:42,660 --> 01:00:44,660
Nicht das hier irgendwie...

1513
01:00:44,660 --> 01:00:46,660
Nochmal

1514
01:00:46,660 --> 01:00:52,470
brauche ich das nicht.

1515
01:00:52,470 --> 01:00:54,470
Eine Sache sieht man aber jetzt schon,

1516
01:00:54,470 --> 01:00:56,470
was ein richtig großer Vorteil

1517
01:00:56,470 --> 01:00:58,470
von Docker ist.

1518
01:00:58,470 --> 01:01:00,470
Und es ist genau eines der Dinger,

1519
01:01:00,470 --> 01:01:02,470
wofür Docker ursprünglich erfunden wurde.

1520
01:01:02,470 --> 01:01:04,470
Für das ganze Zeug, was da raus

1521
01:01:04,470 --> 01:01:06,470
gewachsen ist an Container Ökosystemen

1522
01:01:06,470 --> 01:01:08,470
und wie teilweise

1523
01:01:08,470 --> 01:01:10,470
Docker heute auch, also Docker selbst,

1524
01:01:10,470 --> 01:01:12,470
für Sachen verwendet wird, wofür es gar nicht

1525
01:01:12,470 --> 01:01:14,470
gedacht ist.

1526
01:01:14,470 --> 01:01:16,470
Das war ja damals noch nicht abzusehen,

1527
01:01:16,470 --> 01:01:18,470
aber genau für sowas wurde

1528
01:01:18,470 --> 01:01:20,470
Docker ursprünglich entwickelt.

1529
01:01:20,470 --> 01:01:22,470
Nämlich um diese ganze Sache mit

1530
01:01:22,470 --> 01:01:24,470
ich entwickle was,

1531
01:01:24,470 --> 01:01:26,470
auf meiner Kiste kompiliert es,

1532
01:01:26,470 --> 01:01:28,470
auf meiner Kiste läuft es, aber auf dem Server

1533
01:01:28,470 --> 01:01:30,470
läuft es nicht, auf der anderen

1534
01:01:30,470 --> 01:01:32,470
Entwicklerkiste läuft es nicht, zu vermeiden.

1535
01:01:32,470 --> 01:01:34,470
Hauptsächlich ursprüngliche

1536
01:01:34,470 --> 01:01:36,470
Docker-Idee war ja sogar, es funktioniert

1537
01:01:36,470 --> 01:01:38,470
auf meiner Entwicklerkiste, aber auf der anderen

1538
01:01:38,470 --> 01:01:40,470
Entwicklerkiste nicht. Das war eines der ursprünglichen

1539
01:01:40,470 --> 01:01:42,470
Ideen in der Docker. Und man sieht auch schon,

1540
01:01:42,470 --> 01:01:44,470
dass es genau hierfür was

1541
01:01:44,470 --> 01:01:46,470
bringt. Auch wenn wir das hier nicht optimal machen

1542
01:01:46,470 --> 01:01:48,470
und wenn das langsam ist und wenn das nicht schön ist,

1543
01:01:48,470 --> 01:01:50,470
es ist nachvollziehbar.

1544
01:01:50,470 --> 01:01:52,470
Das heißt, wenn es funktioniert,

1545
01:01:52,470 --> 01:01:54,470
das Bild jetzt, und ich das Image

1546
01:01:54,470 --> 01:01:56,470
lösche, dann funktioniert es das nächste Mal wieder.

1547
01:01:58,470 --> 01:02:00,470
Und wenn das Image weg ist, ist der ganze

1548
01:02:00,470 --> 01:02:02,470
Müll aus dem lokalen System

1549
01:02:02,470 --> 01:02:06,040
auch weg. Richtig, genau.

1550
01:02:06,040 --> 01:02:08,040
So, jetzt haben wir .NET installiert.

1551
01:02:08,040 --> 01:02:10,040
Jetzt können wir als nächstes

1552
01:02:10,040 --> 01:02:12,040
äh Copy

1553
01:02:12,040 --> 01:02:14,040
aus unserem Backend-Projekt

1554
01:02:14,040 --> 01:02:16,040
können wir die ganzen CS-Files

1555
01:02:16,040 --> 01:02:18,040
rüberkopieren.

1556
01:02:18,040 --> 01:02:20,040
Da muss ich jetzt aber mal nachgucken, was wir noch so haben.

1557
01:02:22,040 --> 01:02:27,780
Wir brauchen

1558
01:02:27,780 --> 01:02:29,780
ganzen CS-Files und wir brauchen

1559
01:02:29,780 --> 01:02:33,350
das Projekt-File.

1560
01:02:33,350 --> 01:02:35,350
Mehr brauchen wir

1561
01:02:35,350 --> 01:02:37,350
eigentlich nicht.

1562
01:02:37,350 --> 01:02:39,350
Also alle CS-Backend-Files

1563
01:02:39,350 --> 01:02:41,350
und das Sternchen.c

1564
01:02:41,350 --> 01:02:43,350
Wobei, Moment.

1565
01:02:43,350 --> 01:02:46,660
Ne, das kopiert

1566
01:02:46,660 --> 01:02:48,660
ihr hier nicht mit. So, die zwei Files

1567
01:02:48,660 --> 01:02:50,660
brauchen wir. Danach

1568
01:02:50,660 --> 01:02:52,660
können wir theoretisch schon mal probieren,

1569
01:02:52,660 --> 01:02:54,660
wie es mit

1570
01:02:54,660 --> 01:02:56,660
äh .NET

1571
01:02:56,660 --> 01:02:58,660
publish. Warte mal, ich glaube, ich habe

1572
01:02:58,660 --> 01:03:00,660
gerade was im Handy gekriegt.

1573
01:03:00,660 --> 01:03:02,660
Nix. Dann können wir gucken, wie es aussieht mit

1574
01:03:02,660 --> 01:03:04,660
.NET publish

1575
01:03:04,660 --> 01:03:06,660
Wie geht das? War .NET build?

1576
01:03:06,660 --> 01:03:08,660
.NET publish

1577
01:03:08,660 --> 01:03:10,660
release. Das habe ich

1578
01:03:10,660 --> 01:03:14,230
Ja, und so, weil wir es

1579
01:03:14,230 --> 01:03:16,230
ja installieren mit Docker, äh

1580
01:03:16,230 --> 01:03:18,230
weil wir es ja installieren mit

1581
01:03:18,230 --> 01:03:20,230
mit dem Install-Skript.

1582
01:03:20,230 --> 01:03:22,230
Ok, .NET publish

1583
01:03:22,230 --> 01:03:24,230
release. Schauen wir mal, ob das

1584
01:03:24,230 --> 01:03:31,320
funktioniert. Docker haben

1585
01:03:31,320 --> 01:03:33,320
mir das Leben für meine Bachelor-Arbeit leicht gemacht.

1586
01:03:33,320 --> 01:03:35,320
Ja.

1587
01:03:35,320 --> 01:03:37,320
Genau für sowas ist, oh fuck, was jetzt?

1588
01:03:37,320 --> 01:03:39,320
Was hat er denn jetzt für Probleme?

1589
01:03:39,320 --> 01:03:41,320
Ja. Please install

1590
01:03:41,320 --> 01:03:43,320
libIQ.

1591
01:03:43,320 --> 01:03:45,320
Machen wir. Ja.

1592
01:03:45,320 --> 01:03:47,320
Das ist eines der wenigen .NET

1593
01:03:47,320 --> 01:03:49,320
Oh fuck. Oh fuck.

1594
01:03:49,320 --> 01:03:53,460
Ne.

1595
01:03:53,460 --> 01:03:59,590
Ok.

1596
01:03:59,590 --> 01:04:01,590
Das ist das Problem, wenn ich

1597
01:04:01,590 --> 01:04:03,590
alles da oben reinschreibe, dann muss ich

1598
01:04:03,590 --> 01:04:05,590
den ganzen Shit nochmal durchlaufen lassen.

1599
01:04:05,590 --> 01:04:07,590
Das dauert wieder zwei Minuten, da habe ich keinen Bock drauf.

1600
01:04:07,590 --> 01:04:11,930
Oh man, was? libIQ gibt's

1601
01:04:11,930 --> 01:04:13,930
nicht. Ok. exec

1602
01:04:13,930 --> 01:04:15,930
debian

1603
01:04:15,930 --> 01:04:17,930
Warum gibt's das? Nein, nein, nein, nein,

1604
01:04:17,930 --> 01:04:19,930
nein, nein.

1605
01:04:19,930 --> 01:04:21,930
debian, warum gibt's

1606
01:04:21,930 --> 01:04:23,930
das nicht? apt

1607
01:04:23,930 --> 01:04:25,930
apt search

1608
01:04:25,930 --> 01:04:29,750
libIQ

1609
01:04:29,750 --> 01:04:31,750
libIQ-dev muss ich installieren. Ok.

1610
01:04:31,750 --> 01:04:33,750
Alles klar.

1611
01:04:33,750 --> 01:04:35,750
libIQ-dev

1612
01:04:35,750 --> 01:04:37,750
highIQ

1613
01:04:37,750 --> 01:04:39,750
library

1614
01:04:39,750 --> 01:04:43,580
lib highIQ

1615
01:04:43,580 --> 01:04:45,580
Das sieht doch schon besser aus.

1616
01:04:45,580 --> 01:04:50,680
So.

1617
01:04:50,680 --> 01:04:52,680
Und jetzt haben wir unser Image am Start.

1618
01:04:52,680 --> 01:04:54,680
Mit

1619
01:04:54,680 --> 01:04:56,680
gebauter Anwendung drin, das heißt,

1620
01:04:56,680 --> 01:04:58,680
nachdem die Anwendung jetzt fertig ist,

1621
01:04:58,680 --> 01:05:00,680
achso, Moment, eins brauchen wir noch,

1622
01:05:00,680 --> 01:05:02,680
eins brauchen wir noch, wir brauchen noch

1623
01:05:02,680 --> 01:05:04,680
ähm, copy

1624
01:05:04,680 --> 01:05:06,680
das können wir eigentlich

1625
01:05:06,680 --> 01:05:08,680
danach machen, weil wenn sich das ändert, muss

1626
01:05:08,680 --> 01:05:10,680
ich die Anwendung nicht neu machen. Äh, copy

1627
01:05:10,680 --> 01:05:12,680
backend www root

1628
01:05:12,680 --> 01:05:14,680
nach

1629
01:05:14,680 --> 01:05:16,680
www root. Also für unsere

1630
01:05:16,680 --> 01:05:18,680
Webseite, die muss ja auch noch mit reinkopiert werden.

1631
01:05:18,680 --> 01:05:20,680
Build.

1632
01:05:20,680 --> 01:05:22,680
Ok. Run. Jetzt können wir

1633
01:05:22,680 --> 01:05:24,680
gucken, ob die Anwendung funktioniert.

1634
01:05:24,680 --> 01:05:26,680
Also unser Container-Image, würde ich sagen, ist jetzt

1635
01:05:26,680 --> 01:05:28,680
erstmal fertig. Mal gucken, ob's funktioniert, was

1636
01:05:28,680 --> 01:05:36,660
ich hier gebaut hab. Ähm.

1637
01:05:36,660 --> 01:05:45,800
.net

1638
01:05:45,800 --> 01:05:47,800
Ach, Moment. Oh, das ist ja kacke.

1639
01:05:47,800 --> 01:05:51,560
.net, .net

1640
01:05:51,560 --> 01:05:53,560
Und jetzt muss man glaube ich angeben,

1641
01:05:53,560 --> 01:05:55,560
wo ist es denn?

1642
01:05:55,560 --> 01:05:57,560
bin-release

1643
01:05:57,560 --> 01:05:59,560
backend-dll

1644
01:05:59,560 --> 01:06:01,560
Genau. Und bam!

1645
01:06:01,560 --> 01:06:03,560
Es geht nicht, weil unable to load

1646
01:06:03,560 --> 01:06:05,560
shared-library-web-rtc-rust

1647
01:06:05,560 --> 01:06:09,130
But why?

1648
01:06:09,130 --> 01:06:11,130
Warum ist

1649
01:06:11,130 --> 01:06:13,130
das denn? Achso, weil das im falschen

1650
01:06:13,130 --> 01:06:15,130
Ordner liegt.

1651
01:06:15,130 --> 01:06:17,130
Das liegt nämlich unter

1652
01:06:17,130 --> 01:06:19,130
target-release

1653
01:06:19,130 --> 01:06:21,130
lib-web-rtc-rust

1654
01:06:21,130 --> 01:06:25,130
Muss man auch noch gleich moven.

1655
01:06:25,130 --> 01:06:28,440
Jetzt gucken, ob's jetzt läuft.

1656
01:06:28,440 --> 01:06:32,330
Äh, wat?

1657
01:06:32,330 --> 01:06:34,330
Ach!

1658
01:06:34,330 --> 01:06:36,330
Nee, Moment. Nee, hä?

1659
01:06:36,330 --> 01:06:41,180
Vielleicht, weil das nicht im

1660
01:06:41,180 --> 01:06:43,180
im richtigen Verzeichnis liegt.

1661
01:06:43,180 --> 01:06:45,180
Einmal, cp

1662
01:06:45,180 --> 01:06:47,180
lib-web-rtc-rust

1663
01:06:47,180 --> 01:06:49,180
Kann sein. Ich bin mir nicht ganz sicher,

1664
01:06:49,180 --> 01:06:51,180
wo das hin muss.

1665
01:06:51,180 --> 01:06:55,960
release.net. Hier vielleicht?

1666
01:06:55,960 --> 01:06:57,960
bin-release. Also wir müssen unser Image

1667
01:06:57,960 --> 01:06:59,960
auf jeden Fall noch fixen.

1668
01:06:59,960 --> 01:07:01,960
.net

1669
01:07:01,960 --> 01:07:03,960
run

1670
01:07:03,960 --> 01:07:05,960
backend-dll

1671
01:07:05,960 --> 01:07:07,960
Ey, Funst!

1672
01:07:07,960 --> 01:07:09,960
Pog!

1673
01:07:09,960 --> 01:07:11,960
Warum funktioniert

1674
01:07:11,960 --> 01:07:13,960
denn das? Ich hab doch gar kein FFM-Pack drauf. Sollte

1675
01:07:13,960 --> 01:07:15,960
das jetzt nicht eigentlich

1676
01:07:15,960 --> 01:07:17,960
crashen? Weil...

1677
01:07:17,960 --> 01:07:24,220
Nee, das ist dumm,

1678
01:07:24,220 --> 01:07:26,220
was ich hier mache.

1679
01:07:26,220 --> 01:07:28,220
Such .net nach der Library im Verzeichnis,

1680
01:07:28,220 --> 01:07:30,220
wo du startest, wenn du nichts Spezielles

1681
01:07:30,220 --> 01:07:32,220
angibst.

1682
01:07:32,220 --> 01:07:34,220
Okay, also aber prinzipiell, das hier kommt von Rust.

1683
01:07:34,220 --> 01:07:36,220
Also prinzipiell funktioniert das.

1684
01:07:36,220 --> 01:07:38,220
Als erstes hat es natürlich keinen www-Root.

1685
01:07:38,220 --> 01:07:40,220
Wir müssen das auf jeden Fall noch ein bisschen

1686
01:07:40,220 --> 01:07:42,220
umkopieren. Das ist eklig so.

1687
01:07:42,220 --> 01:07:44,220
Ich will das Image aber

1688
01:07:44,220 --> 01:07:46,220
so eh nicht lassen. Insofern...

1689
01:07:46,220 --> 01:07:48,220
Was mich wundert, ist, dass der nicht meckert,

1690
01:07:48,220 --> 01:07:50,220
dass FFM-Pack

1691
01:07:50,220 --> 01:07:52,220
Probleme hat.

1692
01:07:52,220 --> 01:07:54,220
Hier. Ah, ich weiß,

1693
01:07:54,220 --> 01:07:56,220
woran das liegt, dass der nicht meckert, dass FFM-Pack

1694
01:07:56,220 --> 01:07:58,220
Probleme hat. Das ist nämlich in einem

1695
01:07:58,220 --> 01:08:00,220
Thread drinne. Und der Thread,

1696
01:08:00,220 --> 01:08:02,220
der crasht einfach. Und ich

1697
01:08:02,220 --> 01:08:04,220
bekomm nix von mit. Wir machen das jetzt mal

1698
01:08:04,220 --> 01:08:06,220
anders. Wir sagen jetzt mal FFM-Pack

1699
01:08:06,220 --> 01:08:08,220
Log Level

1700
01:08:08,220 --> 01:08:10,220
oder sowas. Konnte man doch hier setzen.

1701
01:08:10,220 --> 01:08:16,340
Set Log Level. Das setzen wir jetzt

1702
01:08:16,340 --> 01:08:18,340
hier irgendwie auf Quiet oder sowas.

1703
01:08:18,340 --> 01:08:22,740
Quiet, beste.

1704
01:08:22,740 --> 01:08:24,740
Wir setzen mal das Log Level und dann

1705
01:08:24,740 --> 01:08:26,740
sollten wir jetzt gleich nen Fehler bekommen.

1706
01:08:26,740 --> 01:08:28,740
Also was musste ich

1707
01:08:28,740 --> 01:08:30,740
jetzt noch machen? Ich musste,

1708
01:08:30,740 --> 01:08:32,740
ich musste es moven.

1709
01:08:32,740 --> 01:08:34,740
Kann man bei .net Publish

1710
01:08:34,740 --> 01:08:36,740
nicht nen Output Path angeben?

1711
01:08:36,740 --> 01:08:38,740
...

1712
01:08:38,740 --> 01:08:40,740
Das muss ich grad mal ausprobieren. Konnte man nicht sagen?

1713
01:08:40,740 --> 01:08:42,740
.net Publish

1714
01:08:42,740 --> 01:08:44,740
minus O Build.

1715
01:08:44,740 --> 01:08:46,740
Doch, konnte man. Also.

1716
01:08:46,740 --> 01:08:48,740
.net minus O kommt

1717
01:08:48,740 --> 01:08:52,820
nach Bild rein.

1718
01:08:52,820 --> 01:08:54,820
Und dann

1719
01:08:54,820 --> 01:08:58,460
moven wir noch.

1720
01:08:58,460 --> 01:09:00,460
Dann moven wir noch.

1721
01:09:00,460 --> 01:09:02,460
Target. Oh.

1722
01:09:02,460 --> 01:09:04,460
Mist. Vergessen, wo es ist.

1723
01:09:04,460 --> 01:09:06,460
Warum will ich ja nicht immer exec eintippen?

1724
01:09:06,460 --> 01:09:08,460
Target Release

1725
01:09:08,460 --> 01:09:10,460
libwebrtcrust.so

1726
01:09:10,460 --> 01:09:12,460
libwebrtcrust.so

1727
01:09:12,460 --> 01:09:14,460
...

1728
01:09:14,460 --> 01:09:16,460
Moven wir noch.

1729
01:09:16,460 --> 01:09:20,730
nach Build.

1730
01:09:20,730 --> 01:09:22,730
Ok?

1731
01:09:22,730 --> 01:09:24,730
So.

1732
01:09:24,730 --> 01:09:26,730
Und ich

1733
01:09:26,730 --> 01:09:28,730
hoffe, dass es jetzt ordentlich crasht.

1734
01:09:28,730 --> 01:09:30,730
Weil wenn es ordentlich crasht,

1735
01:09:30,730 --> 01:09:32,730
dann können wir nämlich

1736
01:09:32,730 --> 01:09:39,110
den Container ordentlich bauen.

1737
01:09:39,110 --> 01:09:41,110
So. Mal hier run.

1738
01:09:41,110 --> 01:09:44,810
Schauen wir mal, ob das hier gut aussieht.

1739
01:09:44,810 --> 01:09:46,810
Jetzt haben wir nen Ordner Build.

1740
01:09:46,810 --> 01:09:48,810
Ach so, da haben wir BWW-Route. Musste auch noch rein.

1741
01:09:48,810 --> 01:09:57,570
Wieso lese ich immer WebAds

1742
01:09:57,570 --> 01:09:58,230
Hier Crust

1743
01:09:58,230 --> 01:09:59,830
Passt doch

1744
01:09:59,830 --> 01:10:02,610
Ganzen Schalentiere hier

1745
01:10:02,610 --> 01:10:04,450
Krustentiere am Start

1746
01:10:04,450 --> 01:10:09,870
Okay

1747
01:10:09,870 --> 01:10:12,750
.NET, .NET, Run

1748
01:10:12,750 --> 01:10:13,570
Ne, nicht Run

1749
01:10:13,570 --> 01:10:15,410
Backend, DLL

1750
01:10:15,410 --> 01:10:18,610
Jawoll, FFM-Pack crasht

1751
01:10:18,610 --> 01:10:18,890
Okay

1752
01:10:18,890 --> 01:10:21,670
Das würde es natürlich erklären

1753
01:10:21,670 --> 01:10:22,290
Und jetzt sagen wir mal

1754
01:10:22,290 --> 01:10:24,350
Upt, Install, FFM-Pack

1755
01:10:24,350 --> 01:10:26,930
Das brauchen wir nämlich auch noch

1756
01:10:26,930 --> 01:10:28,790
Wir brauchen auch noch FFM-Pack

1757
01:10:28,790 --> 01:10:30,830
Oh, da fällt mir gerade was ein

1758
01:10:30,830 --> 01:10:33,430
Leute, es ist keine gute Idee, wie ich das gebaut habe

1759
01:10:33,430 --> 01:10:35,390
Wir sollten vielleicht eine

1760
01:10:35,390 --> 01:10:38,470
Statische, feste FFM-Pack-Version nehmen

1761
01:10:38,470 --> 01:10:40,070
Weil ansonsten

1762
01:10:40,070 --> 01:10:41,770
Ist es immer davon abhängig

1763
01:10:41,770 --> 01:10:43,910
Dass die Betriebssystem-Version

1764
01:10:43,910 --> 01:10:47,890
Also die Betriebssystem-FFM-Pack-Version

1765
01:10:47,890 --> 01:10:50,210
Von dem, was ich benutze

1766
01:10:50,210 --> 01:10:51,070
Als Base-Image

1767
01:10:51,070 --> 01:10:53,610
Mit der von meiner Entwicklerkiste übereinstimmt

1768
01:10:53,610 --> 01:10:55,650
Weil ich will ja neues FFM-Pack benutzen

1769
01:10:55,650 --> 01:10:57,890
Gucken wir mal, ob das jetzt funktioniert

1770
01:10:57,890 --> 01:10:59,130
Backend, nope

1771
01:10:59,130 --> 01:11:03,520
Der findet einfach mein FFM-Pack nicht

1772
01:11:03,520 --> 01:11:04,720
Obwohl es installiert ist

1773
01:11:04,720 --> 01:11:07,320
Das ist aber sehr

1774
01:11:07,320 --> 01:11:08,960
Keck-Weight

1775
01:11:08,960 --> 01:11:11,860
Gut, der Rest funktioniert

1776
01:11:11,860 --> 01:11:13,700
Also der Container scheint schon mal halbwegs

1777
01:11:13,700 --> 01:11:15,560
Halbwegs brauchbar zu sein

1778
01:11:15,560 --> 01:11:18,830
Äh, LD-Config

1779
01:11:18,830 --> 01:11:20,130
Lass mal kurz gucken, wo ist denn

1780
01:11:20,130 --> 01:11:22,070
Wo liegt meine Library

1781
01:11:22,070 --> 01:11:23,190
What?

1782
01:11:24,570 --> 01:11:26,610
Alter, was ist denn das für ein Scheiß-Fart

1783
01:11:26,610 --> 01:11:29,250
Lipx86

1784
01:11:29,250 --> 01:11:29,970
64

1785
01:11:29,970 --> 01:11:31,610
Linux-Knu

1786
01:11:32,010 --> 01:11:34,830
Da hätte ich ja im Leben nicht dran gedacht, dass das da liegt

1787
01:11:34,830 --> 01:11:38,270
Ja, da guckt meine Anwendung natürlich auch nicht nach, ob das da liegt

1788
01:11:38,270 --> 01:11:45,670
Außerdem ist es die falsche FFM-Pack-Version

1789
01:11:45,670 --> 01:11:49,690
Ich entwickle mit FFM-Pack 6.1, glaube ich

1790
01:11:49,690 --> 01:11:52,030
Und das hier ist FFM-Pack 5.9

1791
01:11:52,030 --> 01:11:52,670
Sehe ich das richtig?

1792
01:11:52,790 --> 01:11:53,610
5.1

1793
01:11:53,610 --> 01:11:55,850
Ja, das kann ja nicht funktionieren

1794
01:11:55,850 --> 01:11:57,970
Okay

1795
01:11:57,970 --> 01:12:00,110
So, dann fixen wir mal das Docker-Image

1796
01:12:00,110 --> 01:12:00,550
Weiter

1797
01:12:00,550 --> 01:12:03,310
Als nächstes mussten wir noch

1798
01:12:03,310 --> 01:12:04,670
Ne, das machen wir hier

1799
01:12:04,670 --> 01:12:08,040
Wo ist die Sache mit www.google.com?

1800
01:12:08,040 --> 01:12:08,140
Wo ist die Sache mit www.google.com?

1801
01:12:08,140 --> 01:12:09,680
Hier, www.root

1802
01:12:09,680 --> 01:12:12,100
Ne, www.root soll nicht dahin kopiert werden

1803
01:12:12,100 --> 01:12:12,740
Sondern nach

1804
01:12:12,740 --> 01:12:14,660
Build

1805
01:12:14,660 --> 01:12:19,440
Also das ist alles noch sehr unoptimiert

1806
01:12:19,440 --> 01:12:19,700
Hier

1807
01:12:19,700 --> 01:12:24,260
Wie, okay, wo bekommen wir eine statische

1808
01:12:24,260 --> 01:12:27,310
Also noch eine Build-Step

1809
01:12:27,310 --> 01:12:28,370
Um FFM-Pack zu bauen

1810
01:12:28,370 --> 01:12:30,070
Ne, ich baue FFM-Pack nicht

1811
01:12:30,070 --> 01:12:33,390
Es gibt ein Projekt, was Nightly Builds von FFM-Pack macht

1812
01:12:33,390 --> 01:12:34,930
Das werde ich verwenden

1813
01:12:34,930 --> 01:12:37,130
Ich bin mir nur nicht mehr ganz sicher

1814
01:12:37,130 --> 01:12:38,990
Wie das, wie das

1815
01:12:38,990 --> 01:12:40,730
Es gibt ein paar Projekte, die das machen

1816
01:12:40,730 --> 01:12:41,110
Das müssen wir uns vorstellen

1817
01:12:41,110 --> 01:12:43,690
Wir müssen es gleich mal auf Github raussuchen

1818
01:12:43,690 --> 01:12:50,580
Ich will jetzt aber erstmal checken

1819
01:12:50,580 --> 01:12:53,280
Ob prinzipiell das, was ich hier gebaut habe

1820
01:12:53,280 --> 01:12:54,160
Funktioniert

1821
01:12:54,160 --> 01:12:56,700
Also, .net

1822
01:12:56,700 --> 01:12:59,240
.net

1823
01:12:59,240 --> 01:13:00,080
.net

1824
01:13:00,080 --> 01:13:02,420
Backend

1825
01:13:02,420 --> 01:13:04,480
Okay

1826
01:13:04,480 --> 01:13:06,320
Gut, funktioniert alles

1827
01:13:06,320 --> 01:13:08,160
www.root ist auch da

1828
01:13:08,160 --> 01:13:09,820
Okay, es liegt echt nur an FFM-Pack

1829
01:13:09,820 --> 01:13:12,780
Jetzt müssen wir uns ein FFM-Pack-Build suchen

1830
01:13:12,780 --> 01:13:15,020
Mit allen Dependencies drinne

1831
01:13:15,020 --> 01:13:15,280
Und dann müssen wir uns ein FFM-Pack-Build suchen

1832
01:13:15,300 --> 01:13:16,800
FFM-Pack-Bild

1833
01:13:16,800 --> 01:13:19,040
Für, für Linux

1834
01:13:19,040 --> 01:13:23,360
Und zwar nicht ein Binary-FFM-Pack-Bild

1835
01:13:23,360 --> 01:13:25,640
Sondern mit

1836
01:13:25,640 --> 01:13:26,880
Ja, ich suche ja ein fertiges Bild

1837
01:13:26,880 --> 01:13:28,800
Sondern ich suche ja nicht die Binaries

1838
01:13:28,800 --> 01:13:31,740
Das könnte sogar das richtige Projekt sein, was ich suche

1839
01:13:31,740 --> 01:13:35,060
Lass mal, gibt es da nicht vielleicht sogar ein offizielles Docker-Image

1840
01:13:35,060 --> 01:13:38,740
Mit FFM-Pack-Library versioniert oder so?

1841
01:13:41,550 --> 01:13:41,850
Guck mal

1842
01:13:41,850 --> 01:13:46,130
Aber das ist wahrscheinlich nur normales FFM-Pack

1843
01:13:46,130 --> 01:13:47,170
Und nicht die FFM-Pack-Library-Library-Library-Library-Library-Library-Library-Library-Library-Library-Library-Library-Library-Library-Library

1844
01:13:47,190 --> 01:13:47,730
Oder?

1845
01:13:49,150 --> 01:13:49,710
Oder?

1846
01:13:51,350 --> 01:13:51,910
Oder?

1847
01:13:52,910 --> 01:13:55,630
Ne, das ist, na wobei, man weiß es ja nicht

1848
01:13:55,630 --> 01:13:56,630
Man weiß es nicht

1849
01:13:56,630 --> 01:13:59,790
Probieren wir mal aus

1850
01:13:59,790 --> 01:14:04,040
Holen wir das mal

1851
01:14:04,040 --> 01:14:05,820
CLI

1852
01:14:05,820 --> 01:14:08,620
CLI

1853
01:14:08,620 --> 01:14:12,980
Haben die auch ein Nicht-CLI-Image?

1854
01:14:16,120 --> 01:14:19,200
Wobei, bezieht sich, bezieht sich, auf was bezieht sich denn CLI?

1855
01:14:19,700 --> 01:14:20,680
Auf FFM-Pack?

1856
01:14:23,010 --> 01:14:23,970
Oder auf

1857
01:14:23,970 --> 01:14:24,210
FFM-Pack?

1858
01:14:24,210 --> 01:14:24,230
Oder auf FFM-Pack?

1859
01:14:24,750 --> 01:14:28,210
Dass das Image, dass es Shells und so dabei hat

1860
01:14:28,210 --> 01:14:32,350
CLI? LS?

1861
01:14:33,690 --> 01:14:38,210
Was sind denn die Unterschiede zwischen den einzelnen Sachen überhaupt?

1862
01:14:47,000 --> 01:14:50,240
Ja, das, das, so war ich, so schlau war ich auch

1863
01:14:50,240 --> 01:15:01,120
Ich vermute, da ist die

1864
01:15:01,120 --> 01:15:04,700
Das sind wahrscheinlich einfach nur Binaries

1865
01:15:04,700 --> 01:15:05,680
Und da ist die

1866
01:15:05,680 --> 01:15:09,680
Da sind die, die ganzen

1867
01:15:09,680 --> 01:15:13,980
Die Library-Parts von FFM-Pack, die spielen

1868
01:15:13,980 --> 01:15:15,220
Ich brauche gar nicht dabei

1869
01:15:15,220 --> 01:15:19,390
Okay, gucken wir, gucken wir uns das mal an

1870
01:15:19,390 --> 01:15:20,050
Also

1871
01:15:20,050 --> 01:15:24,170
Wir machen jetzt mal, wir starten einfach mal einen Docker-Container

1872
01:15:24,170 --> 01:15:27,130
Mit, mit dem Image

1873
01:15:27,130 --> 01:15:28,870
Und zwar FFM-Pack

1874
01:15:28,870 --> 01:15:32,090
Nehmen wir mal AMD64 Latest

1875
01:15:32,090 --> 01:15:33,650
Bäm

1876
01:15:33,650 --> 01:15:35,210
Und gucken wir mal rein

1877
01:15:35,210 --> 01:15:37,030
Was es da so gibt

1878
01:15:37,030 --> 01:15:41,130
Ob da FFM-Pack tatsächlich auch als Library drinnen liegt?

1879
01:15:41,390 --> 01:15:43,310
Weil da können wir nämlich die Images gleich verwenden

1880
01:15:43,310 --> 01:15:44,910
Und

1881
01:15:44,910 --> 01:15:51,610
Okay

1882
01:15:51,610 --> 01:15:54,290
Der versucht gerade FFM-Pack direkt zu starten

1883
01:15:54,290 --> 01:15:55,870
Mit einer Datei, die Bash heißt

1884
01:15:55,870 --> 01:15:56,850
Das ist natürlich blöd

1885
01:15:56,850 --> 01:15:59,710
Da müssen wir jetzt Entry-Point überschreiben

1886
01:15:59,710 --> 01:16:01,690
Minus, Minus

1887
01:16:01,690 --> 01:16:03,030
Entry-Point

1888
01:16:03,030 --> 01:16:04,130
Bash

1889
01:16:04,130 --> 01:16:07,230
Bin ich auf dem Kopf nicht gebacken, jawohl, doch gut

1890
01:16:07,230 --> 01:16:08,150
Passt

1891
01:16:08,150 --> 01:16:11,850
Hier, FFM-Pack ist am Start

1892
01:16:11,850 --> 01:16:14,730
Yep

1893
01:16:14,730 --> 01:16:16,790
AV

1894
01:16:16,790 --> 01:16:20,590
Ja

1895
01:16:20,590 --> 01:16:21,050
Ja

1896
01:16:21,050 --> 01:16:21,290
Ja, FFM-Pack ist am Start

1897
01:16:21,290 --> 01:16:23,290
Die bringen die, die bringen die Libraries gar nicht mit

1898
01:16:23,290 --> 01:16:25,290
Vermutlich

1899
01:16:25,290 --> 01:16:27,290
Lip

1900
01:16:27,290 --> 01:16:32,460
Äh

1901
01:16:32,460 --> 01:16:34,460
Die bringen glaube ich die ganzen Libraries nicht mit

1902
01:16:34,460 --> 01:16:39,120
Äh, suchen wir mal irgendwie nach

1903
01:16:39,120 --> 01:16:44,860
Die haben nur

1904
01:16:44,860 --> 01:16:46,860
Ne, na geil

1905
01:16:46,860 --> 01:16:48,860
Die bringen nur FFM-Pack

1906
01:16:48,860 --> 01:16:50,860
Die Binaries mit

1907
01:16:50,860 --> 01:16:52,860
Das bringt mir ja gar nix

1908
01:16:52,860 --> 01:16:54,860
Und was ist das?

1909
01:16:54,860 --> 01:16:56,860
Das ist das, dies, ne

1910
01:16:56,860 --> 01:16:58,860
Das ist natürlich blöde

1911
01:16:58,860 --> 01:16:59,500
Dann bringen wir mal FFM-Pack mit, das bringt mir ja gar nix

1912
01:16:59,500 --> 01:17:00,000
Dann bringen wir mal FFM-Pack mit, das bringt mir ja gar nix

1913
01:17:00,000 --> 01:17:07,940
Dann bringen wir die Images nicht wirklich was

1914
01:17:07,940 --> 01:17:08,940
Dann bringen wir die Images nicht wirklich was

1915
01:17:08,940 --> 01:17:12,140
Weil

1916
01:17:12,140 --> 01:17:17,140
Weil, weil, weil die FFM-Pack Binaries

1917
01:17:17,140 --> 01:17:20,140
Die brauch ich ja gar nicht

1918
01:17:20,140 --> 01:17:28,720
Gucken wir nochmal was da jetzt drin ist, ob das irgendwie anders ist

1919
01:17:28,720 --> 01:17:29,720
Wer sich fragt was das ist

1920
01:17:29,720 --> 01:17:33,720
Das hier listet alle Libraries auf, auf dem System, hier guckt

1921
01:17:33,720 --> 01:17:38,720
Und, ähm, AV-Format nennt sich eben ein Teil von FFM-Pack

1922
01:17:38,720 --> 01:17:39,720
Und, ähm, AV-Format nennt sich eben ein Teil von FFM-Pack

1923
01:17:39,720 --> 01:17:41,720
Das gibt es immer, wenn es FFM-Pack gibt

1924
01:17:41,720 --> 01:17:43,720
Ja ok, die Images bringen mir nix

1925
01:17:43,720 --> 01:17:46,720
Weil in den Images ist bloß FFM-Pack als Binary drin

1926
01:17:46,720 --> 01:17:51,220
Aber immerhin

1927
01:17:51,220 --> 01:17:55,220
Als halbwegs aktuelle, als genau die Version die ich brauch

1928
01:17:55,220 --> 01:17:57,220
Ok, das heißt wir müssen das selbst machen

1929
01:17:57,220 --> 01:17:59,220
FFM-Pack einbauen

1930
01:17:59,220 --> 01:18:05,750
Oder was haben wir sonst noch so für Images auf Docker Hub

1931
01:18:05,750 --> 01:18:07,750
Jellyfin, ne

1932
01:18:07,750 --> 01:18:11,960
WulHub

1933
01:18:11,960 --> 01:18:13,960
Oh vier, vor vier Jahren

1934
01:18:13,960 --> 01:18:17,960
Ne, ich glaube ich verzichte auf ein vier Jahre altes FFM-Pack

1935
01:18:17,960 --> 01:18:19,960
Kannst du nicht einfach ein fertiges Bild runterladen

1936
01:18:19,960 --> 01:18:21,960
Doch, doch, doch, doch, machen wir jetzt

1937
01:18:21,960 --> 01:18:27,960
Ich dachte nur vielleicht gibt es ein fertiges, fertiges Image-Container-Image was wir verwenden können

1938
01:18:27,960 --> 01:18:30,960
Updated eight years ago

1939
01:18:30,960 --> 01:18:33,960
Und was zum Teufel ist Open Coconut

1940
01:18:33,960 --> 01:18:37,720
Na gut, brauchen wir nicht

1941
01:18:37,720 --> 01:18:39,720
Gucken wir mal hier

1942
01:18:39,720 --> 01:18:44,720
Ich glaube das sind die richtigen Bills, das sind auch die die ich sonst immer verwendet, verwendet hab weil man

1943
01:18:44,720 --> 01:18:48,720
Weil man ein statisches FFM-Pack gebraucht hat

1944
01:18:48,720 --> 01:18:58,690
Ja

1945
01:18:58,690 --> 01:19:00,690
FFM-Pack

1946
01:19:00,690 --> 01:19:02,690
N1128 Dings

1947
01:19:02,690 --> 01:19:04,690
Git commit hash

1948
01:19:04,690 --> 01:19:06,690
Linux GPL

1949
01:19:06,690 --> 01:19:08,690
Linux GPL

1950
01:19:08,690 --> 01:19:10,690
Shared

1951
01:19:10,690 --> 01:19:14,320
Das klingt gut

1952
01:19:14,320 --> 01:19:21,810
Kann es sein, dass die Libraries von FFM-Pack sich LibAV nennen

1953
01:19:21,810 --> 01:19:23,810
Da gibt es mehrere

1954
01:19:23,810 --> 01:19:25,810
Es gibt AV-Format

1955
01:19:25,810 --> 01:19:27,810
Und AV gibt es auch

1956
01:19:27,810 --> 01:19:29,810
Aber es kommt

1957
01:19:29,810 --> 01:19:31,810
Also die Dinger nennen sich immer LibAV

1958
01:19:31,810 --> 01:19:33,810
Und dann kommt halt der Rest hinten dran

1959
01:19:33,810 --> 01:19:35,810
Aber es ist ja egal

1960
01:19:35,810 --> 01:19:37,810
Ich habe nach AV-Format gesucht und das hätte er finden müssen

1961
01:19:37,810 --> 01:19:39,810
Also da sind

1962
01:19:39,810 --> 01:19:41,810
Wir haben es ja auch gesehen, da lagen keine rum

1963
01:19:41,810 --> 01:19:43,810
Aber was haben die hier alles zur Auswahl

1964
01:19:43,810 --> 01:19:45,810
Die haben Linux 64

1965
01:19:45,810 --> 01:19:47,810
Haben die vielleicht auch

1966
01:19:47,810 --> 01:19:49,810
Irgendeine Tag-Version

1967
01:19:49,810 --> 01:19:51,810
Anstatt Master

1968
01:19:51,810 --> 01:19:53,810
So 6.6.1 oder so

1969
01:19:53,810 --> 01:19:55,810
Ja

1970
01:19:55,810 --> 01:19:57,810
Oder 6.0.1

1971
01:19:57,810 --> 01:19:59,810
Welche Packversion habe ich denn bei mir lokal

1972
01:19:59,810 --> 01:20:03,120
6.1

1973
01:20:03,120 --> 01:20:05,120
Gibt es hier 6.1

1974
01:20:05,120 --> 01:20:07,120
Ne gibt es nicht

1975
01:20:07,120 --> 01:20:14,780
Ach das liegt daran

1976
01:20:14,780 --> 01:20:16,780
Weil 6.1 wahrscheinlich gerade Master ist

1977
01:20:16,780 --> 01:20:18,780
Und 6.0.1

1978
01:20:18,780 --> 01:20:20,780
Das letzte Release

1979
01:20:20,780 --> 01:20:22,780
Kann das sein

1980
01:20:22,780 --> 01:20:24,780
Vermutlich

1981
01:20:24,780 --> 01:20:26,780
Dann nehmen wir mal 6.0.1

1982
01:20:26,780 --> 01:20:28,780
6.0.1 müsste auch klar gehen

1983
01:20:28,780 --> 01:20:30,780
Also 6.0.1

1984
01:20:30,780 --> 01:20:34,930
Linux

1985
01:20:34,930 --> 01:20:36,930
6.0.1

1986
01:20:36,930 --> 01:20:38,930
Linux 64

1987
01:20:38,930 --> 01:20:40,930
GPL Shared

1988
01:20:40,930 --> 01:20:42,930
Das brauchen wir

1989
01:20:42,930 --> 01:20:44,930
Was damit gemeint ist, ist folgendes

1990
01:20:44,930 --> 01:20:46,930
Also rate ich jetzt einfach mal

1991
01:20:46,930 --> 01:20:48,930
GPL enthält nur die

1992
01:20:48,930 --> 01:20:50,930
Open Source Codecs

1993
01:20:50,930 --> 01:20:52,930
Und

1994
01:20:52,930 --> 01:20:54,930
Minus Shared bedeutet

1995
01:20:54,930 --> 01:20:56,930
Das ist nur die Library Komponente

1996
01:20:56,930 --> 01:20:58,930
Und das hier ist Library Plus

1997
01:20:58,930 --> 01:21:03,840
Oder eventuell nur Binaries

1998
01:21:03,840 --> 01:21:14,830
Da gibt es aber keine oder

1999
01:21:14,830 --> 01:21:16,830
Das ist der Source Code oder

2000
01:21:16,830 --> 01:21:24,300
Das ist kein

2001
01:21:24,300 --> 01:21:27,810
Das ist doch nur der Source Code

2002
01:21:27,810 --> 01:21:29,810
Das ist doch bestimmt kein

2003
01:21:29,810 --> 01:21:39,580
Fertig gebautes

2004
01:21:39,580 --> 01:21:52,050
Ich glaube nicht das

2005
01:21:52,050 --> 01:21:54,050
Ich glaube das das nur der Source Code ist

2006
01:21:54,050 --> 01:21:56,050
Guck mal mal

2007
01:21:56,050 --> 01:21:58,050
Moment das heißt ja anders

2008
01:21:58,050 --> 01:22:00,050
Z muss weg

2009
01:22:00,050 --> 01:22:02,050
Ja guck das ist nur der Source Code

2010
01:22:02,050 --> 01:22:04,050
Das bringt mir nix

2011
01:22:04,050 --> 01:22:06,050
Da müsste ich FFmpeg auch noch selbst

2012
01:22:06,050 --> 01:22:08,050
Kompilieren

2013
01:22:08,050 --> 01:22:10,050
Ich hab da ein Grenzen den ich da drauf hab

2014
01:22:10,050 --> 01:22:18,420
FFmpeg kommt weg

2015
01:22:18,420 --> 01:22:20,420
Ok Dockerfile

2016
01:22:20,420 --> 01:22:22,420
Wir benutzen das hier

2017
01:22:22,420 --> 01:22:24,420
Wir benutzen das hier

2018
01:22:24,420 --> 01:22:26,420
Linux 64 GPL Shared

2019
01:22:26,420 --> 01:22:34,340
Gehen wir mal in unseren

2020
01:22:34,340 --> 01:22:36,340
Docker Container rein den wir eben hatten

2021
01:22:36,340 --> 01:22:38,340
Und probieren das da mal aus

2022
01:22:38,340 --> 01:22:40,340
Wie das da aussieht

2023
01:22:40,340 --> 01:22:43,840
Wget

2024
01:22:43,840 --> 01:22:45,840
Zack genau

2025
01:22:45,840 --> 01:22:47,840
So

2026
01:22:47,840 --> 01:22:49,840
X

2027
01:22:49,840 --> 01:22:51,840
F

2028
01:22:51,840 --> 01:22:53,840
Z nicht

2029
01:22:53,840 --> 01:22:55,840
FFmpeg

2030
01:22:55,840 --> 01:22:57,840
Ja das ist eine fertig kompilierte Library

2031
01:22:57,840 --> 01:22:59,840
Ok das ist gut

2032
01:22:59,840 --> 01:23:01,840
Hier haben wir es

2033
01:23:01,840 --> 01:23:03,840
Binaries sind auch am Start

2034
01:23:03,840 --> 01:23:05,840
Die wir nicht brauchen

2035
01:23:05,840 --> 01:23:07,840
Die können wir theoretisch löschen noch gleich aus dem Image

2036
01:23:07,840 --> 01:23:09,840
Da es ein bisschen kleiner wird

2037
01:23:09,840 --> 01:23:11,840
Da ist alles drin was wir brauchen

2038
01:23:11,840 --> 01:23:13,840
Genau

2039
01:23:13,840 --> 01:23:15,840
Excellent

2040
01:23:15,840 --> 01:23:17,840
Ok wir bauen unsere Anwendung kurz

2041
01:23:17,840 --> 01:23:19,840
Ein kleines bisschen um

2042
01:23:19,840 --> 01:23:21,840
Nämlich

2043
01:23:21,840 --> 01:23:23,840
Ich lade das hier auch mal runter

2044
01:23:23,840 --> 01:23:28,940
Wget

2045
01:23:28,940 --> 01:23:32,320
Dann packen wir

2046
01:23:32,320 --> 01:23:34,320
Das ganze in unser Docker Ignore File

2047
01:23:34,320 --> 01:23:36,320
Weil ich will garantiert nicht

2048
01:23:36,320 --> 01:23:38,320
Aber Dockerfile ist auch nicht

2049
01:23:38,320 --> 01:23:40,320
Also weil ich will ja nicht

2050
01:23:40,320 --> 01:23:42,320
FFmpeg da irgendwie drinnen liegen haben

2051
01:23:42,320 --> 01:23:44,320
Also

2052
01:23:44,320 --> 01:23:46,320
Machen wir in unser Git Ignore

2053
01:23:46,320 --> 01:23:48,320
In unser Git Ignore File

2054
01:23:48,320 --> 01:23:50,320
Alles was FFmpeg Sternchen hast

2055
01:23:50,320 --> 01:23:52,320
Soll weg

2056
01:23:52,320 --> 01:23:54,320
Ok

2057
01:23:54,320 --> 01:23:56,320
So

2058
01:23:56,320 --> 01:23:58,320
Also

2059
01:23:58,320 --> 01:24:00,320
So

2060
01:24:00,320 --> 01:24:06,580
So

2061
01:24:06,580 --> 01:24:18,910
So

2062
01:24:18,910 --> 01:24:20,910
So

2063
01:24:20,910 --> 01:24:22,910
So

2064
01:24:22,910 --> 01:24:37,260
So

2065
01:24:37,260 --> 01:24:39,260
So

2066
01:24:39,260 --> 01:24:41,260
So

2067
01:24:41,260 --> 01:24:43,260
So

2068
01:24:43,260 --> 01:24:48,430
So

2069
01:24:48,430 --> 01:24:50,430
So

2070
01:24:50,430 --> 01:24:55,920
So

2071
01:24:55,920 --> 01:24:57,920
So

2072
01:24:57,920 --> 01:24:59,920
So

2073
01:24:59,920 --> 01:25:01,920
So

2074
01:25:01,920 --> 01:25:03,920
So

2075
01:25:03,920 --> 01:25:05,920
So

2076
01:25:05,920 --> 01:25:07,920
So

2077
01:25:07,920 --> 01:25:09,920
So

2078
01:25:09,920 --> 01:25:11,920
So

2079
01:25:11,920 --> 01:25:13,920
So

2080
01:25:13,920 --> 01:25:15,920
So

2081
01:25:15,920 --> 01:25:17,920
So

2082
01:25:17,920 --> 01:25:19,920
So

2083
01:25:19,920 --> 01:25:21,920
So

2084
01:25:21,920 --> 01:25:23,920
So

2085
01:25:23,920 --> 01:25:49,680
FFmpeg suche ich jetzt unterhalb von FFmpeg slash lib. Ups. So, mal gucken, ob das jetzt startet. Run. Run. Und Funst. Nice. Ohne Fehler. Ja, ja, und es liest auch, liest auch die Sachen von der Kamera. Also, alles gut. So, FFmpeg slash, also, genau, FFmpeg slash lib.

2086
01:25:49,680 --> 01:26:32,690
Das heißt, im Endeffekt müssen wir jetzt nur das gleiche noch für den Docker-Container machen. Und dann bauen wir den Docker-Container noch ordentlich. So, jetzt haben wir das hier hinkopiert. FFmpeg. FFmpeg machen wir mal hier als letzten Step. Wget. FFmpeg. Wie, wie sagt man Wget, dass er direkt entpacken soll? Also, ta, kann man das einfach so reinpipen? H, X.

2087
01:26:33,830 --> 01:26:34,830
Vielleicht hat X nur

2088
01:26:34,830 --> 01:26:36,910
Z. Kein, kein, kein Pipe

2089
01:26:36,910 --> 01:26:37,470
oder so hin?

2090
01:26:39,670 --> 01:26:40,070
Ne.

2091
01:26:41,650 --> 01:26:42,730
Unexpected Enderfall.

2092
01:26:46,350 --> 01:26:46,830
Ähm.

2093
01:26:48,270 --> 01:26:48,990
Ne, Moment, man muss

2094
01:26:48,990 --> 01:26:51,110
Wget noch sagen, minus O, glaube ich, gell?

2095
01:26:51,190 --> 01:26:51,910
Für Output.

2096
01:26:53,470 --> 01:26:54,930
Oh, Moment. Wget

2097
01:26:54,930 --> 01:26:57,010
pipetar. So, wir fragen es der

2098
01:26:57,010 --> 01:27:00,670
Overflow. Hier.

2099
01:27:01,350 --> 01:27:03,150
Wget, groß O,

2100
01:27:03,390 --> 01:27:05,350
minus, gepiped.

2101
01:27:08,280 --> 01:27:08,820
Ne, Moment,

2102
01:27:08,840 --> 01:27:10,040
das muss ich jetzt hier erstmal testen.

2103
01:27:10,620 --> 01:27:15,730
Wget, minus, groß O, minus.

2104
01:27:15,810 --> 01:27:17,190
Das ist wahrscheinlich Standard-Out.

2105
01:27:17,610 --> 01:27:20,030
Gepiped nach ta, X, Z, F.

2106
01:27:21,610 --> 01:27:22,510
Alles klar.

2107
01:27:22,870 --> 01:27:22,970
Okay.

2108
01:27:23,430 --> 01:27:24,610
Nice, Stack-Overflow, GG.

2109
01:27:33,440 --> 01:27:34,740
Stack-Overflow lügt.

2110
01:27:35,080 --> 01:27:37,040
Ah, Moment, das ist kein Z. Ja, das ist richtig.

2111
01:27:39,420 --> 01:27:39,620
What?

2112
01:27:40,500 --> 01:27:41,680
Archive is compressed.

2113
01:27:42,120 --> 01:27:42,860
Use minus

2114
01:27:42,860 --> 01:27:44,260
J-Option.

2115
01:27:49,140 --> 01:27:49,540
Moment.

2116
01:27:51,140 --> 01:27:52,560
Ey, warum ist,

2117
01:27:52,560 --> 01:27:54,260
warum ist Chat,

2118
01:27:54,260 --> 01:27:56,700
äh, nicht Chat, warum ist, ist Stack-Overflow

2119
01:27:56,700 --> 01:28:01,660
falsch? Okay, minus

2120
01:28:01,660 --> 01:28:03,240
X, V, so?

2121
01:28:03,640 --> 01:28:05,100
Irgendwie? Hey!

2122
01:28:05,840 --> 01:28:06,540
Das funktioniert!

2123
01:28:07,620 --> 01:28:09,000
Nice, kaum macht man's richtig.

2124
01:28:14,020 --> 01:28:15,440
Okay, so, und jetzt ist die

2125
01:28:15,440 --> 01:28:17,120
große Preisfrage, ich lösch den ganzen

2126
01:28:17,120 --> 01:28:18,440
Kreml grad nochmal, ja, ja.

2127
01:28:19,360 --> 01:28:20,660
Jetzt ist die große Preisfrage,

2128
01:28:21,300 --> 01:28:22,460
wie kann man ta

2129
01:28:22,460 --> 01:28:25,160
den Output-Ordner-Namen angeben?

2130
01:28:25,240 --> 01:28:26,300
War das minus C?

2131
01:28:27,300 --> 01:28:30,220
Ta, Output-Directory-Name.

2132
01:28:32,540 --> 01:28:34,420
How to choose directory

2133
01:28:34,420 --> 01:28:37,280
name during

2134
01:28:37,280 --> 01:28:38,280
untarring.

2135
01:28:38,660 --> 01:28:39,640
Genau das wollen wir haben.

2136
01:28:43,310 --> 01:28:45,090
Minus C, pretty name, strip

2137
01:28:45,090 --> 01:28:46,190
components one.

2138
01:28:50,020 --> 01:28:52,060
Ach so, das ist, weil die M kardieren davor.

2139
01:28:54,350 --> 01:28:55,690
Anscheinend geht das nicht.

2140
01:29:01,510 --> 01:29:01,810
What?

2141
01:29:03,310 --> 01:29:04,310
Jetzt, okay, jetzt wird's

2142
01:29:04,310 --> 01:29:05,570
aber advanced. Was?

2143
01:29:06,750 --> 01:29:08,370
Minus, minus, transform

2144
01:29:08,370 --> 01:29:10,310
und dann regex

2145
01:29:10,310 --> 01:29:11,790
für den Dateinamen, oder was?

2146
01:29:12,290 --> 01:29:13,190
Ja, komm, komm.

2147
01:29:14,130 --> 01:29:17,890
Wir wollen's mal nicht übertreiben.

2148
01:29:18,310 --> 01:29:19,590
Ich würd vorschlagen, wir machen einfach

2149
01:29:19,590 --> 01:29:21,430
einen Move danach und gut ist, ja.

2150
01:29:23,170 --> 01:29:23,990
Es muss ja nicht,

2151
01:29:24,050 --> 01:29:25,410
wir müssen's ja nicht komplett übertreiben.

2152
01:29:25,910 --> 01:29:27,050
So, jetzt machen wir einfach Move,

2153
01:29:27,670 --> 01:29:29,410
FFM-Pack nach FFM-Pack.

2154
01:29:29,750 --> 01:29:31,630
Okay, alles gut. Und schon, und schon

2155
01:29:31,630 --> 01:29:32,830
ist es so, wie wir's haben wollen.

2156
01:29:33,590 --> 01:29:34,030
Wunderbar.

2157
01:29:36,650 --> 01:29:39,050
Man kann's ja mit Shell-Hacks auch

2158
01:29:39,050 --> 01:29:39,710
übertreiben.

2159
01:29:41,490 --> 01:29:42,990
So, und als nächstes jetzt noch

2160
01:29:42,990 --> 01:29:44,990
einen Move von FFM-Pack-Sternchen.

2161
01:29:45,570 --> 01:29:47,370
Nach FFM-Pack.

2162
01:29:48,350 --> 01:29:48,510
So.

2163
01:29:49,290 --> 01:29:50,450
Und dann

2164
01:29:50,450 --> 01:29:55,780
nach Build-FFM-Pack.

2165
01:29:56,620 --> 01:29:57,400
So, und wenn ich jetzt

2166
01:29:57,400 --> 01:29:59,280
alles gemacht habe, dann

2167
01:29:59,280 --> 01:29:59,700
sollte,

2168
01:30:00,100 --> 01:30:02,380
dann sollte mein Docker,

2169
01:30:02,880 --> 01:30:05,260
ups, dann sollte mein Docker-Container

2170
01:30:05,820 --> 01:30:07,100
funktionieren.

2171
01:30:11,750 --> 01:30:12,930
Ich, ich bin gespannt.

2172
01:30:15,600 --> 01:30:16,940
Dann löschen wir den Container

2173
01:30:16,940 --> 01:30:21,640
nochmal. Wir könnten

2174
01:30:21,640 --> 01:30:23,620
auch Quiet machen beim, beim BGET.

2175
01:30:24,200 --> 01:30:25,180
Ich glaub, minus,

2176
01:30:25,680 --> 01:30:29,020
minus Q ist es bei BGET und, ähm,

2177
01:30:30,760 --> 01:30:31,960
minus, minus S

2178
01:30:31,960 --> 01:30:33,980
ist es bei, also bei BGET

2179
01:30:33,980 --> 01:30:35,540
ist es minus Q für Quiet

2180
01:30:35,540 --> 01:30:37,760
und bei Curl ist es, glaub ich, minus S

2181
01:30:37,760 --> 01:30:39,460
für Silent, wenn man nicht will, dass der

2182
01:30:39,460 --> 01:30:41,460
unnötige

2183
01:30:41,460 --> 01:30:43,320
Terminal-Outputs macht.

2184
01:30:49,540 --> 01:30:50,940
Okay, Run.

2185
01:30:52,940 --> 01:30:55,440
Jetzt bin ich ja mal gespannt, ob das funktioniert, was ich hier gebaut hab.

2186
01:30:58,720 --> 01:30:59,280
Hier sind wir.

2187
01:30:59,280 --> 01:31:01,360
Bild, also .NET,

2188
01:31:02,220 --> 01:31:03,080
.NET,

2189
01:31:03,100 --> 01:31:05,260
.NET, Backend, DLN.

2190
01:31:17,700 --> 01:31:19,140
Falsche FFM-Pack-Version?

2191
01:31:19,560 --> 01:31:20,000
Fragezeichen?

2192
01:31:27,160 --> 01:31:28,180
Okay, das ist ausgesprochen

2193
01:31:28,760 --> 01:31:29,520
doof jetzt.

2194
01:31:34,420 --> 01:31:35,640
Das ist wirklich doof.

2195
01:31:43,140 --> 01:31:44,780
Was hat er denn für Schmerzen, man?

2196
01:31:45,640 --> 01:31:47,000
.NET, Run. Okay.

2197
01:31:50,840 --> 01:31:51,640
Unable to load.

2198
01:31:51,740 --> 01:31:53,400
Ja, ich weiß. Okay, ich kopier das mal,

2199
01:31:53,400 --> 01:31:54,480
kopier das mal wieder hoch.

2200
01:31:59,980 --> 01:32:01,780
Ja, okay, okay. FFM-Pack

2201
01:32:01,780 --> 01:32:03,580
nicht gefunden. Hab ich, hab ich,

2202
01:32:03,680 --> 01:32:04,940
kapiert? Hab ich kapiert?

2203
01:32:11,480 --> 01:32:11,740
Oh.

2204
01:32:15,840 --> 01:32:17,900
What? Alter, der crasht einfach.

2205
01:32:19,300 --> 01:32:20,200
Was ist denn das

2206
01:32:20,200 --> 01:32:20,480
jetzt?

2207
01:32:23,610 --> 01:32:24,130
Crashchamp.

2208
01:32:31,370 --> 01:32:32,470
Einfach, einfach

2209
01:32:32,470 --> 01:32:33,890
der Crashchamp am Start.

2210
01:32:34,970 --> 01:32:36,150
Weil ich grad versuche,

2211
01:32:36,550 --> 01:32:37,690
Rocker-Container zu bauen,

2212
01:32:38,010 --> 01:32:40,430
für meine Anwendung. Dafür brauch ich FFM-Pack.

2213
01:32:40,550 --> 01:32:42,150
Aber FFM-Pack zeigt sich

2214
01:32:42,150 --> 01:32:43,410
nicht

2215
01:32:43,410 --> 01:32:45,110
kooperativ.

2216
01:32:46,490 --> 01:32:48,570
Achso, ich hab auch die falsche Version. Guck mal.

2217
01:32:48,570 --> 01:32:53,340
Meint ihr, meint ihr, es könnte

2218
01:32:53,340 --> 01:32:55,220
daran liegen, dass ich

2219
01:32:55,220 --> 01:32:57,880
hier lokal FFM-Pack

2220
01:32:57,880 --> 01:32:59,700
6-1 habe

2221
01:32:59,700 --> 01:33:01,400
und im Container

2222
01:33:01,400 --> 01:33:02,320
FFM-Pack

2223
01:33:02,320 --> 01:33:04,400
6-0-1?

2224
01:33:06,740 --> 01:33:08,920
Was meint ihr? Könnte das das Problem sein?

2225
01:33:09,360 --> 01:33:10,500
Ich mein, es, es, es, es

2226
01:33:10,500 --> 01:33:12,320
deutet schon ein bisschen drauf hin, gell?

2227
01:33:12,980 --> 01:33:14,740
Wenn ich, wenn ich hier so Sachen sehe, wie

2228
01:33:14,740 --> 01:33:16,520
einfach, einfach

2229
01:33:16,520 --> 01:33:17,440
Instant Crash.

2230
01:33:21,980 --> 01:33:23,180
Warum crasht der denn?

2231
01:33:25,540 --> 01:33:26,580
Was ist das Problem, man?

2232
01:33:31,660 --> 01:33:32,560
Oh, Wim?

2233
01:33:34,560 --> 01:33:35,800
Okay, was, was hat er denn für

2234
01:33:35,800 --> 01:33:37,320
Stellen? FFM-Pack-Lib.

2235
01:33:39,860 --> 01:33:40,780
Ist das überhaupt richtig?

2236
01:33:41,400 --> 01:33:42,460
FFM-Pack-Lib.

2237
01:33:46,390 --> 01:33:47,910
Die sollten abwärtskompatibel sein.

2238
01:33:48,570 --> 01:33:49,770
Das hätt ich auch gedacht.

2239
01:33:51,010 --> 01:33:51,530
Aber

2240
01:33:51,530 --> 01:33:55,580
vielleicht doch nicht.

2241
01:33:59,360 --> 01:34:01,080
Was ist denn, wenn ich hier irgendeinen Mist angebe

2242
01:34:01,080 --> 01:34:02,920
und dann ausführe?

2243
01:34:04,520 --> 01:34:05,040
Run.

2244
01:34:07,890 --> 01:34:09,390
Dann sagt der Method not supported.

2245
01:34:10,350 --> 01:34:11,250
Hab ich das Richtige

2246
01:34:11,250 --> 01:34:12,090
runtergeladen?

2247
01:34:12,090 --> 01:34:12,210
Hm.

2248
01:34:12,890 --> 01:34:14,190
Hab ich da irgendeinen Mist runtergeladen?

2249
01:34:15,690 --> 01:34:18,310
FFM, also, der, der findet's offensichtlich ja auch.

2250
01:34:18,650 --> 01:34:20,530
Okay, wir machen mal kurz hier einen Return rein,

2251
01:34:20,610 --> 01:34:21,750
um zu gucken, ob's daran liegt.

2252
01:34:25,240 --> 01:34:26,620
Hier haben wir mal hier irgendwie Console.

2253
01:34:27,360 --> 01:34:28,920
Aber irgendwas, dass ich das jetzt, dass ich das

2254
01:34:28,920 --> 01:34:30,220
nicht, das schreiben muss. Console,

2255
01:34:30,600 --> 01:34:32,160
Console-Writeline, ja, perfekt.

2256
01:34:34,100 --> 01:34:34,300
Was?

2257
01:34:34,680 --> 01:34:36,720
Das artet schon wieder aus. Warum muss das alles,

2258
01:34:36,800 --> 01:34:38,020
warum kann das einfach nicht einfach funktionieren?

2259
01:34:39,060 --> 01:34:39,700
Hack W.

2260
01:34:44,300 --> 01:34:45,460
Bist du der Max von YouTube?

2261
01:34:45,960 --> 01:34:46,440
Erwischt.

2262
01:34:50,010 --> 01:34:51,310
Jetzt kann ich mich nicht mehr,

2263
01:34:51,370 --> 01:34:52,030
ausreden.

2264
01:34:55,730 --> 01:34:56,530
Warum geht das?

2265
01:34:56,930 --> 01:34:58,870
Okay, also bis hierhin funzt alles.

2266
01:35:00,090 --> 01:35:01,750
Aber dann crasht das hier

2267
01:35:02,230 --> 01:35:03,770
aus irgendwelchen Gründen.

2268
01:35:04,850 --> 01:35:06,490
Das könnte aber auch woanders ran liegen.

2269
01:35:06,490 --> 01:35:07,490
Fuck it, Alter.

2270
01:35:11,770 --> 01:35:15,070
Der, der crasht, irgendwo, okay, okay, der crasht.

2271
01:35:15,350 --> 01:35:16,630
Ach, ich weiß, warum der crasht.

2272
01:35:17,110 --> 01:35:18,110
Oh, ich kack Noob.

2273
01:35:18,550 --> 01:35:20,350
Alter, es funktioniert alles.

2274
01:35:20,650 --> 01:35:21,190
Guck mal.

2275
01:35:21,750 --> 01:35:22,110
Hier.

2276
01:35:22,750 --> 01:35:24,550
Fällt euch, fällt euch hier was auf?

2277
01:35:24,550 --> 01:35:31,490
Entdeckt ihr hier irgendwas, was im Container so garantiert nicht funktionieren kann?

2278
01:35:33,490 --> 01:35:37,690
Da liest einfach hardcoded von meinem lokalen RTSP-Server was.

2279
01:35:37,690 --> 01:35:39,690
Ne, das kann ja so nicht funktionieren, das gibt's ja da gar nicht.

2280
01:35:40,010 --> 01:35:44,130
Also da sieht man auch schon, mein Error-Handling ist absolut erste Sahne.

2281
01:35:44,270 --> 01:35:45,850
Der handelt einfach gar keine Errors.

2282
01:35:47,410 --> 01:35:50,090
Und, und sag mal so, so sollte man das ja auch nicht machen.

2283
01:35:50,350 --> 01:35:56,390
Das sollte normalerweise ein ordentlicher Background-Service sein, der sich auch bei Fehlern neu startet und sowas.

2284
01:35:56,890 --> 01:35:57,930
Das machen wir dann noch.

2285
01:35:57,990 --> 01:35:58,530
Machen wir dann noch.

2286
01:35:58,910 --> 01:36:00,750
Okay, ich lass es jetzt erstmal so, wie es ist.

2287
01:36:01,710 --> 01:36:03,750
Mein Docker-Container funktioniert auf jeden Fall.

2288
01:36:04,590 --> 01:36:04,910
Jetzt.

2289
01:36:05,170 --> 01:36:06,130
Jetzt funktioniert er.

2290
01:36:07,030 --> 01:36:13,950
Also, funktionieren bedeutet, er crasht, okay, ja, aber, aber, aber es funktioniert.

2291
01:36:14,150 --> 01:36:16,030
Also der Docker-Container ist korrekt.

2292
01:36:18,440 --> 01:36:21,020
Wir können, ich kann euch das auch beweisen, dass der funktioniert.

2293
01:36:21,800 --> 01:36:28,020
Wir machen hier einfach mal ein, kann man hier eigentlich return machen direkt?

2294
01:36:30,140 --> 01:36:31,060
Ne, ein return rein.

2295
01:36:31,940 --> 01:36:32,680
Wir machen dort ein run.

2296
01:36:33,380 --> 01:36:33,480
Und ihr seht, wir haben hier ein Return.

2297
01:36:33,480 --> 01:36:33,720
Und ihr seht, wir haben hier ein Return.

2298
01:36:33,740 --> 01:36:33,800
Und ihr seht, wir haben hier ein Return.

2299
01:36:33,800 --> 01:36:34,520
Zack, es läuft.

2300
01:36:34,640 --> 01:36:34,900
Alles klar.

2301
01:36:35,400 --> 01:36:35,620
Bam.

2302
01:36:37,440 --> 01:36:37,920
Funst.

2303
01:36:38,280 --> 01:36:39,340
Ah, wir brauchen noch was.

2304
01:36:39,800 --> 01:36:45,640
Wir müssen die Interfaces überschreiben, wo er dran bindet.

2305
01:36:48,400 --> 01:36:53,820
Und zwar ASP.NET Core Environment Variables für den Port.

2306
01:37:02,260 --> 01:37:03,520
Das da will ich haben.

2307
01:37:05,920 --> 01:37:07,600
Minus, minus, urls.

2308
01:37:08,440 --> 01:37:09,700
Command Line Argument.

2309
01:37:09,720 --> 01:37:10,760
Okay, das ist auch gut.

2310
01:37:12,500 --> 01:37:13,740
Minus, minus, urls.

2311
01:37:14,460 --> 01:37:15,800
Also, da wollen wir dann haben.

2312
01:37:16,300 --> 01:37:20,520
Soll Listen an HTTP, Doppelpunkt, Doppelpunkt, Sternchen, Punkt.

2313
01:37:21,020 --> 01:37:22,480
Jetzt brauchen wir mal irgendeinen Port hier.

2314
01:37:22,540 --> 01:37:25,280
Keine Ahnung, 8044.

2315
01:37:28,120 --> 01:37:29,480
Funst, nice.

2316
01:37:30,080 --> 01:37:34,180
Okay, da muss das noch als Command in unseren Docker-Container rein.

2317
01:37:34,180 --> 01:37:43,040
Jetzt sind wir mal so frei und kommentieren den ganzen Mediakrempel aus.

2318
01:37:43,740 --> 01:37:48,480
Gehen wir mal in das Docker-File rein und sagen am Ende cmd.

2319
01:37:58,920 --> 01:38:02,860
Ja, also das würde höchstwahrscheinlich...

2320
01:38:02,860 --> 01:38:03,380
Ne, Moment.

2321
01:38:04,140 --> 01:38:04,980
Sekunde.

2322
01:38:14,900 --> 01:38:15,500
.net

2323
01:38:15,500 --> 01:38:18,820
CD, Bild.

2324
01:38:22,150 --> 01:38:22,730
.net

2325
01:38:22,730 --> 01:38:24,910
Backend-DLL

2326
01:38:25,330 --> 01:38:28,130
So, ich hoffe, das funst jetzt.

2327
01:38:29,090 --> 01:38:29,770
Bild.

2328
01:38:32,420 --> 01:38:36,120
Ja, jetzt muss er noch mal kurz das .net-Bild machen.

2329
01:38:36,860 --> 01:38:38,620
So, dann soll der Docker-Container funktionieren.

2330
01:38:39,680 --> 01:38:44,780
Wenn der Docker-Container jetzt funktioniert, dann werden wir anfangen, den Docker-Container ordentlich zu bauen.

2331
01:38:45,220 --> 01:38:47,220
Weil, ich zeige euch auch gleich, was das Problem ist.

2332
01:38:47,320 --> 01:38:48,880
Ein Problem habe ich euch ja schon gezeigt.

2333
01:38:49,240 --> 01:38:56,380
Wenn ich jetzt was ändere in dem Container-Setup, dann dauert es halt ewig, bis das neu gebildet ist.

2334
01:38:56,380 --> 01:39:00,300
Weil der halt von den einzelnen Steps her kaum was cachen kann, ja.

2335
01:39:00,660 --> 01:39:06,540
Also sprich, wenn sich an meiner Rust-App was ändert, muss der quasi ab Step 6 alles neu bauen.

2336
01:39:07,280 --> 01:39:07,900
Das dauert halt.

2337
01:39:08,380 --> 01:39:14,480
Und dann noch schlimmer, wenn ich ein zusätzliches Paket in meinem Image haben will, dann muss er alles ab Step 4 neu bauen.

2338
01:39:14,700 --> 01:39:15,660
Das suckt halt, ne.

2339
01:39:16,020 --> 01:39:16,940
Okay, probieren wir mal aus.

2340
01:39:17,040 --> 01:39:19,400
Docker, Run, CamChamp.

2341
01:39:19,960 --> 01:39:20,620
Schauen wir mal, ob es geht.

2342
01:39:21,420 --> 01:39:22,080
Zack, funzt.

2343
01:39:22,480 --> 01:39:24,720
Docker-Image tut.

2344
01:39:30,930 --> 01:39:31,370
So.

2345
01:39:32,050 --> 01:39:36,350
Ein weiterer Punkt, warum es eine blöde Idee ist, so ein Docker-Image zu bauen.

2346
01:39:37,010 --> 01:39:38,550
Euch fällt hier vielleicht was auf.

2347
01:39:39,270 --> 01:39:43,150
Das Docker-Image ist 3,6 Gigabyte.

2348
01:39:44,590 --> 01:39:47,070
Ich meine, das heißt nicht, dass es nicht funktioniert.

2349
01:39:51,800 --> 01:39:55,800
Aber, ein bisschen groß ist es wahrscheinlich, ja.

2350
01:40:03,310 --> 01:40:07,490
Du kannst dein Zeug auch in einer Pipeline bauen und die Artefakte nur in den Container kopieren.

2351
01:40:22,320 --> 01:40:25,400
Ich wusste, dass gleich irgendjemand kommt und sowas in der Richtung erzählt.

2352
01:40:25,400 --> 01:40:31,110
Wobei, da warst du doch sogar da, wo ich das gesagt habe.

2353
01:40:31,470 --> 01:40:32,530
Lass mir das nicht so lassen.

2354
01:40:34,750 --> 01:40:37,590
Also, man sieht, es ist ein bisschen doof.

2355
01:40:39,210 --> 01:40:43,850
Ach so, du meinst, dass du irgendwie GitHub-Actions machst und dann den Output...

2356
01:40:43,850 --> 01:40:47,710
Ja, okay, das wäre nochmal eine Nummer-Advancer.

2357
01:40:47,810 --> 01:40:49,350
Das machen wir vielleicht das nächste Mal.

2358
01:40:49,950 --> 01:40:50,650
Müssen wir mal gucken.

2359
01:40:51,250 --> 01:40:52,890
Also, das funktioniert.

2360
01:40:53,270 --> 01:40:56,130
Das ist allerdings, wie man sieht hier, echt sehr doof.

2361
01:40:56,130 --> 01:40:59,210
Ja, so ein 8,6 Gigabyte Container-Image.

2362
01:40:59,210 --> 01:41:00,010
Sackt ein bisschen.

2363
01:41:00,470 --> 01:41:02,650
Ich schmeiße nochmal alle meine Container-Images weg.

2364
01:41:03,110 --> 01:41:03,850
Das wird man gleich sehen.

2365
01:41:03,930 --> 01:41:05,110
Da haben wir wieder 5 Gigabyte freigegeben.

2366
01:41:05,530 --> 01:41:07,210
Und jetzt machen wir das Ganze nochmal in hübsch.

2367
01:41:08,250 --> 01:41:09,210
Also, was ist denn...

2368
01:41:09,750 --> 01:41:10,070
Ah, hier.

2369
01:41:10,310 --> 01:41:13,030
Was ist denn die Essenz aus dem Ganzen, was wir hier machen?

2370
01:41:15,830 --> 01:41:16,890
Wir installieren Rust.

2371
01:41:19,210 --> 01:41:20,350
Kompilieren die Rust-App.

2372
01:41:21,270 --> 01:41:22,190
Wir installieren .NET.

2373
01:41:23,130 --> 01:41:24,130
Kompilieren die .NET-App.

2374
01:41:24,230 --> 01:41:25,890
Installieren die Abhängigkeiten für .NET.

2375
01:41:26,550 --> 01:41:27,670
Kompilieren die .NET-App.

2376
01:41:28,910 --> 01:41:32,710
Kopieren die Rust-Library, die wir hier oben gebaut haben, in den Output.

2377
01:41:32,790 --> 01:41:34,790
In den Output-Folder, wo dann die Anwendung drin läuft.

2378
01:41:35,050 --> 01:41:39,810
Kopieren die Webseite in den Web-Server-Folder.

2379
01:41:40,770 --> 01:41:42,130
Wir downloaden den FFmpeg.

2380
01:41:43,330 --> 01:41:44,830
Und kopieren es an die richtige Stelle.

2381
01:41:44,930 --> 01:41:46,930
Und am Ende sagen wir, wie man das Ganze starten kann.

2382
01:41:47,210 --> 01:41:47,710
So.

2383
01:41:49,730 --> 01:41:50,230
Also.

2384
01:41:50,550 --> 01:41:52,230
Das Ganze jetzt noch in schön.

2385
01:41:52,410 --> 01:41:53,270
Und es gibt so was.

2386
01:41:53,610 --> 01:41:54,610
Also, ihr habt jetzt gesehen.

2387
01:41:55,310 --> 01:41:57,390
Chat, ich möchte, dass ihr das alle zur Kenntnis...

2388
01:41:57,470 --> 01:41:58,710
Ach so, fuck, das Image ist weg.

2389
01:41:58,810 --> 01:41:59,310
Okay.

2390
01:41:59,390 --> 01:42:03,470
Dass ihr das alle zur Kenntnis genommen habt, dass das Image, wenn man das so baut,

2391
01:42:03,470 --> 01:42:05,470
3,6 Gigabyte groß ist, ja.

2392
01:42:06,970 --> 01:42:08,970
Chat, Noted, das wird nachher abgefragt.

2393
01:42:09,970 --> 01:42:14,050
Da gibt es doch so ein nice Noted-Emote.

2394
01:42:14,150 --> 01:42:14,650
Ja.

2395
01:42:15,150 --> 01:42:18,840
Habt ihr das, habt ihr das Noted alle, ja?

2396
01:42:19,840 --> 01:42:22,840
Dass es 3,6 Gigabyte ist, dass es keine so gute Idee ist.

2397
01:42:26,560 --> 01:42:27,560
Die .NET-App ist wahrscheinlich recht groß.

2398
01:42:27,660 --> 01:42:28,560
Nee, die ist, die ist...

2399
01:42:29,560 --> 01:42:31,560
Das ist ja, das ist ja sogar eine Framework-dependent-App.

2400
01:42:32,560 --> 01:42:35,560
Die ist nicht groß, die ist, keine Ahnung, 10 MB oder sowas.

2401
01:42:37,560 --> 01:42:38,060
Okay.

2402
01:42:38,060 --> 01:42:39,360
Der Chat, der Chat hat genotet.

2403
01:42:39,360 --> 01:42:39,860
Alles gut.

2404
01:42:39,860 --> 01:42:40,360
Alles klar.

2405
01:42:40,360 --> 01:42:45,360
So, und das ist natürlich doof, weil die Images fressen halt...

2406
01:42:46,360 --> 01:42:47,860
Das ist deutlich zu groß, ja.

2407
01:42:47,960 --> 01:42:54,360
Die Images fressen halt Speicher in der Registry, wenn das auch etwas optimierter da drinnen gespeichert wird.

2408
01:42:54,460 --> 01:43:01,360
Aber auch die Bildzeiten sind relativ groß, weil ab jedem Step, wenn sich hier was ändert, muss das ganze Ding neu durchlaufen werden.

2409
01:43:02,360 --> 01:43:07,360
Und dementsprechend sind natürlich auch die Updates zu den Images, die Diffs, relativ groß.

2410
01:43:07,460 --> 01:43:09,360
Selbst wenn er nicht jedes Mal ein komplett neues Image schreibt.

2411
01:43:10,360 --> 01:43:19,860
Der casht sich ja nur die Stages, das heißt, eure, eure Image-Registry wird über kurz oder lang echt viel Geld kosten, wenn ihr nur solche Images reinhaut.

2412
01:43:19,960 --> 01:43:21,860
Oder wenn ihr die selbst hostet, dann...

2413
01:43:21,960 --> 01:43:24,860
Na gut, ihr könnt's auch bei GitHub hosten, da weiß ich nicht, ab wann die was berechnen.

2414
01:43:26,360 --> 01:43:30,360
Ist auf jeden Fall keine gute Idee, weil es dauert alles länger und suckt.

2415
01:43:30,460 --> 01:43:35,360
Deswegen gibt es bei Docker sowas, das nennt sich Multi-Stage-Build.

2416
01:43:35,460 --> 01:43:37,360
Die Idee dahinter ist folgendes.

2417
01:43:37,460 --> 01:43:39,660
Man macht nicht nur ein Image.

2418
01:43:39,660 --> 01:43:51,260
Sondern man macht für jeden Build-Step, der ein bisschen komplexer ist und Caching braucht, einen eigenen, ja, Build-Step mit eigenem Image draus.

2419
01:43:51,360 --> 01:43:58,260
Und ganz am Ende macht man dann ein Image, wo man die Sachen aus den vorherigen Build-Steps rein kopiert.

2420
01:43:58,360 --> 01:44:06,260
Und das wird dann das Image, was am Ende rausfällt und von Docker gestartet wird oder von Kubernetes oder von irgendeiner Container-Runtime.

2421
01:44:06,360 --> 01:44:08,160
Hat den Vorteil, diesen ganzen Mist hier vorzunehmen.

2422
01:44:08,160 --> 01:44:17,160
Diesen ganzen Mist hier von, wir müssen, wir müssen Rust runterladen, wir brauchen hier komplettes Ding, wir brauchen Rust-Abhängigkeiten von 1,2 Gigabyte.

2423
01:44:17,260 --> 01:44:23,260
Fällt weg, die fallen nur im Build-Prozess an, im eigentlichen Output-Image sind die dann nicht mehr drinne.

2424
01:44:23,360 --> 01:44:29,360
Was wir im Output-Image brauchen, warum unser Output-Image doch immer noch ein bisschen größer ist...

2425
01:44:29,460 --> 01:44:31,860
Ja gut, ist das hier, FFmpeg.

2426
01:44:31,960 --> 01:44:37,960
Aber auch FFmpeg kann gecached werden, weil FFmpeg-Updaten wir ja nicht laufen, sondern immer nur dann, wenn's...

2427
01:44:37,960 --> 01:44:39,960
...notwendig ist.

2428
01:44:40,060 --> 01:44:43,960
Also, würde ich sagen, legen wir mal los.

2429
01:44:44,060 --> 01:44:46,960
Und bauen da mal ein Multi-Stage-Bild draus.

2430
01:44:47,060 --> 01:44:49,960
Ich würde vorschlagen, das erste, was wir machen ist...

2431
01:44:50,060 --> 01:44:57,160
Wir benennen das mal um, dass wir abgucken können.

2432
01:44:57,260 --> 01:45:04,760
Docker-File-Old.

2433
01:45:04,860 --> 01:45:06,760
Docker-File-New.

2434
01:45:06,860 --> 01:45:07,760
Alles klar.

2435
01:45:07,860 --> 01:45:11,760
So, das erste, was wir machen ist, wir gucken mal nach dem offiziellen Rust-Image.

2436
01:45:11,860 --> 01:45:14,760
Weil, dieser Step hier gefällt mir beispielsweise überhaupt nicht.

2437
01:45:14,860 --> 01:45:17,660
Dass wir unser eigenes Rust installieren.

2438
01:45:17,760 --> 01:45:25,760
Und wenn wir eh schon mehrere Images verwenden und unser Image beim Bauen nicht gleich dem Output-Image ist...

2439
01:45:25,860 --> 01:45:30,320
...können wir einfach auch das offizielle Rust-Image verwenden.

2440
01:45:30,420 --> 01:45:37,480
Und wir wollen...

2441
01:45:37,580 --> 01:45:41,480
Rust 1.7.4 Bookworm wollen wir haben.

2442
01:45:41,580 --> 01:45:43,480
Das ist gut.

2443
01:45:43,580 --> 01:45:47,480
Also, wir benutzen jetzt nicht Debian, sondern wir benutzen...

2444
01:45:47,580 --> 01:45:52,480
...Rust 1.7.4 Bookworm.

2445
01:45:52,480 --> 01:45:55,480
Das ist zufälligerweise auch ein Debian, aber das ist echt nur Zufall.

2446
01:45:55,580 --> 01:45:57,480
Müsste nicht sein.

2447
01:45:57,580 --> 01:46:01,480
So, und wir müssen jetzt auch kein Slim-Image oder sonst was verwenden, weil...

2448
01:46:01,580 --> 01:46:04,480
...wir kopieren ja den Output rüber und wir verwenden das Image gar nichts.

2449
01:46:04,580 --> 01:46:07,480
Also, wir könnten ein super fettes Image haben...

2450
01:46:07,580 --> 01:46:11,480
...zum Bauen, wovon wir eigentlich am Ende in dem Target-Image gar nichts verwenden.

2451
01:46:11,580 --> 01:46:14,480
So, Work-Dir-Bild ist glaube ich okay.

2452
01:46:14,580 --> 01:46:20,480
Ähm...

2453
01:46:20,580 --> 01:46:21,480
Update...

2454
01:46:21,580 --> 01:46:23,480
Updaten...

2455
01:46:23,580 --> 01:46:25,380
Können wir uns schenken?

2456
01:46:25,480 --> 01:46:26,380
Ha!

2457
01:46:26,380 --> 01:46:27,380
Update das Image.

2458
01:46:30,320 --> 01:46:32,220
Install.

2459
01:46:32,320 --> 01:46:38,220
WGAT werden wir weiterhin brauchen, weil wir ja noch FFM-Pack irgendwo runterladen müssen.

2460
01:46:38,320 --> 01:46:42,220
Das Curl können wir uns schenken.

2461
01:46:42,320 --> 01:46:44,220
Output kopieren.

2462
01:46:44,320 --> 01:46:47,220
Das müssen wir in der Tat machen.

2463
01:46:53,050 --> 01:46:54,950
Und...

2464
01:46:55,050 --> 01:46:56,950
Wir können uns aber...

2465
01:46:57,050 --> 01:46:58,950
Ne, wobei, ist eigentlich gut.

2466
01:46:59,050 --> 01:47:01,950
Wir können Cargo-Bild machen nur noch, weil wir jetzt das offizielle Image benutzen.

2467
01:47:02,050 --> 01:47:03,950
Da ist Cargo im Path.

2468
01:47:04,950 --> 01:47:06,950
Kann er ohne Update überhaupt die Pakete finden?

2469
01:47:07,050 --> 01:47:07,950
Wir installieren...

2470
01:47:08,050 --> 01:47:09,950
Achso, ja, du hast recht.

2471
01:47:10,050 --> 01:47:12,950
Das könnte sein, dass das ein Problem macht.

2472
01:47:13,050 --> 01:47:19,020
Er würde eigentlich von ausgehen, dass das geht, aber...

2473
01:47:19,120 --> 01:47:20,020
Ja...

2474
01:47:20,120 --> 01:47:22,020
Ja, du hast recht.

2475
01:47:22,120 --> 01:47:26,030
Ja, wir lassen es drin.

2476
01:47:26,130 --> 01:47:27,030
Ihr habt recht.

2477
01:47:27,130 --> 01:47:29,030
Wir lassen es drin.

2478
01:47:29,130 --> 01:47:31,030
So, das können wir uns erstmal schenken hier.

2479
01:47:31,130 --> 01:47:32,030
Wir machen das mal weg hier.

2480
01:47:32,130 --> 01:47:33,030
Bam.

2481
01:47:33,130 --> 01:47:34,030
So, wir haben es ja da drüben noch stehen.

2482
01:47:34,130 --> 01:47:36,030
So, Cargo-Bild-Release.

2483
01:47:36,130 --> 01:47:38,930
Bis zu dem Step sollte das jetzt eigentlich schon durchlaufen.

2484
01:47:38,930 --> 01:47:42,930
Probieren wir mal aus.

2485
01:47:43,030 --> 01:47:45,930
Ob das jetzt funzt?

2486
01:47:48,690 --> 01:47:51,590
Docker-Bild.

2487
01:47:51,690 --> 01:47:54,280
Ah.

2488
01:47:54,380 --> 01:47:56,280
Sieht eigentlich schon mal ganz gut aus.

2489
01:47:56,380 --> 01:47:59,280
Okay, das ist nur Update aktuell.

2490
01:47:59,380 --> 01:48:08,120
Du-du-du-du-du-du-du-du-du-du-du-du-du-du-du.

2491
01:48:08,220 --> 01:48:12,490
Und warum macht der jetzt so Pause-Champ?

2492
01:48:12,590 --> 01:48:14,490
Warum pausiert Champ das gerade so?

2493
01:48:14,590 --> 01:48:15,490
Upget?

2494
01:48:15,590 --> 01:48:18,490
Ach, ne, das war doch das Docker-Image-Pull.

2495
01:48:18,490 --> 01:48:20,490
Ach so.

2496
01:48:20,590 --> 01:48:23,490
Aber guck mal, Cargo-Bild funktioniert jetzt.

2497
01:48:23,590 --> 01:48:25,490
Direkt out of the box.

2498
01:48:25,590 --> 01:48:28,490
Ohne, dass man irgendwie einen Handstand machen muss, dass es funktioniert.

2499
01:48:28,590 --> 01:48:30,490
Alter, meine Kiste, Alter.

2500
01:48:30,590 --> 01:48:32,490
Guckt euch das mal an.

2501
01:48:32,590 --> 01:48:37,490
Die VM ist einfach mal komplett ausgelastet, wenn Rust baut.

2502
01:48:37,590 --> 01:48:41,490
Blazingly-Fast-Compile-Stells.

2503
01:48:41,590 --> 01:48:58,870
Blazingly-Fast, aber CPU-intensive.

2504
01:48:58,970 --> 01:48:59,870
Ja, das stimmt schon.

2505
01:48:59,870 --> 01:49:02,870
Sobald es jetzt in Docker läuft, wir könnten es ja theoretisch auch irgendwie limitieren.

2506
01:49:02,970 --> 01:49:04,870
Aber wozu? Aber wozu?

2507
01:49:04,970 --> 01:49:06,870
Exporting-Layers.

2508
01:49:06,970 --> 01:49:08,870
Okay, das ist noch kein, keine so gut.

2509
01:49:08,970 --> 01:49:10,870
Das hat jetzt bis jetzt noch nicht viel gebracht.

2510
01:49:10,970 --> 01:49:14,950
Weil wir haben ja noch kein Target-Image.

2511
01:49:15,050 --> 01:49:15,950
Wir haben jetzt so, so.

2512
01:49:16,050 --> 01:49:25,950
Okay, das ist der, das ist der Build-Step für, für Rust.

2513
01:49:26,050 --> 01:49:40,570
Ich würde sagen, wir machen in dem gleichen Step die, die FFmpeg-Geschichte.

2514
01:49:40,670 --> 01:49:42,570
Weil sonst muss ich ja jede,

2515
01:49:42,570 --> 01:49:46,570
jede Änderung, die machen wir übrigens auch davor.

2516
01:49:46,670 --> 01:49:51,570
Sonst müsste sich ja bei jeder Änderung quasi in Rust jetzt wieder neu FFmpeg runterladen.

2517
01:49:51,670 --> 01:50:06,340
Das ist natürlich auch nicht, nicht irgendwie Sinn und Zweck der Sache, ne.

2518
01:50:06,440 --> 01:50:11,910
Machen wir mal hier run wget FFmpeg.

2519
01:50:12,010 --> 01:50:14,910
Wir können das auch in einen eigenen, in einen eigenen Step ausladen.

2520
01:50:15,010 --> 01:50:17,910
Also hier wget FFmpeg.

2521
01:50:18,010 --> 01:50:20,910
Und dann wird FFmpeg umbenannt.

2522
01:50:20,910 --> 01:50:27,540
In, vielleicht sollte ich das nicht einfach nur FFmpeg nennen.

2523
01:50:27,640 --> 01:50:32,540
Sondern FFmpeg, äh, wie heißt denn der Kram?

2524
01:50:32,640 --> 01:50:37,620
FFmpeg-n.

2525
01:50:37,720 --> 01:50:41,380
Sehr schön.

2526
01:50:41,480 --> 01:50:43,380
So, das können wir machen.

2527
01:50:45,180 --> 01:50:46,080
Gut.

2528
01:50:46,180 --> 01:50:48,080
So, das ist der erste Build-Step.

2529
01:50:48,180 --> 01:50:52,080
Also FFmpeg runterladen, FFmpeg entpacken, Rust-Zeug kompilieren.

2530
01:50:52,180 --> 01:50:55,080
Und jetzt kommt der Trick bei Multistage-Builds.

2531
01:50:55,180 --> 01:50:57,080
Für den .NET-Part.

2532
01:50:57,080 --> 01:51:00,080
Machen wir ein neues Build-Image.

2533
01:51:00,180 --> 01:51:05,080
Also wieder from, jetzt muss ich mal gucken, .NET-Docker-Images.

2534
01:51:05,180 --> 01:51:14,510
SDK brauchen wir jetzt, genau.

2535
01:51:14,610 --> 01:51:17,510
SDK.

2536
01:51:17,610 --> 01:51:32,190
From, äh, MC, äh, das ist die Microsoft-Docker SDK 8.0.

2537
01:51:32,290 --> 01:51:34,190
Muss dahinter als Versions-Tag.

2538
01:51:34,290 --> 01:51:41,240
Wenn ich jetzt wüsste, welche Versions-Tag es gäbe, wäre schon sehr nice.

2539
01:51:41,340 --> 01:51:43,240
Sieht man das, wenn man hier drauf geht?

2540
01:51:43,340 --> 01:51:45,240
Nein?

2541
01:51:45,340 --> 01:51:48,240
Das wäre auch deutlich zu einfach Microsoft, wenn das funktionieren würde.

2542
01:51:48,340 --> 01:51:51,240
Ja, Feature-Tags.

2543
01:51:51,340 --> 01:51:56,240
Wäre trotzdem ganz nice zu wissen, was es sonst noch gibt.

2544
01:51:56,340 --> 01:52:02,150
Die haben garantiert noch mehr Tags.

2545
01:52:02,250 --> 01:52:07,340
Naja, gut.

2546
01:52:07,440 --> 01:52:08,340
Scheiß drauf.

2547
01:52:08,440 --> 01:52:09,340
Wir, wir, wir machen's.

2548
01:52:09,440 --> 01:52:11,340
Wir machen so.

2549
01:52:11,440 --> 01:52:13,340
So, das Ding nennen wir jetzt.

2550
01:52:13,440 --> 01:52:16,240
Okay, das nennen wir, das hier heißt nicht Build, sondern das heißt Rust.

2551
01:52:16,340 --> 01:52:19,240
Und das hier heißt, äh, .NET.

2552
01:52:19,340 --> 01:52:20,240
Weil das, die...

2553
01:52:20,240 --> 01:52:21,140
Ups.

2554
01:52:21,240 --> 01:52:27,940
Die Namen brauchen wir später, weil wir die Dateien von den einzelnen Steps rauskopieren wollen.

2555
01:52:28,040 --> 01:52:28,940
Machen wir mal hier.

2556
01:52:29,040 --> 01:52:29,940
Komm, ich seh mal.

2557
01:52:30,040 --> 01:52:30,940
Ist okay.

2558
01:52:31,040 --> 01:52:31,940
Build.

2559
01:52:32,040 --> 01:52:32,940
Rust.

2560
01:52:33,040 --> 01:52:33,940
Nächster Step.

2561
01:52:34,040 --> 01:52:36,940
Build.NET.

2562
01:52:37,040 --> 01:52:38,940
So, Microsoft-Image wird gepullt.

2563
01:52:39,040 --> 01:52:39,940
Hm.

2564
01:52:40,040 --> 01:52:40,940
Und jetzt?

2565
01:52:41,040 --> 01:52:45,940
Wir machen wieder Work, Work-Dir-Build.

2566
01:52:46,040 --> 01:52:47,940
Weil, warum nicht?

2567
01:52:48,040 --> 01:52:50,940
So, und jetzt können wir diesen Kram hier rüber kopieren.

2568
01:52:50,940 --> 01:52:53,940
Set no numbers.

2569
01:52:54,040 --> 01:52:55,940
Jetzt können wir diesen Kram hier rüber kopieren.

2570
01:52:56,040 --> 01:52:58,630
Copy.

2571
01:52:58,730 --> 01:53:00,630
Und jetzt kommen sich die Dinger auch nicht mehr in die Quere.

2572
01:53:00,730 --> 01:53:02,630
Das hier ist ein eigener Container beim Bilden.

2573
01:53:02,730 --> 01:53:06,630
Und das hier ist ein eigener Container beim Bilden.

2574
01:53:06,730 --> 01:53:08,630
Okay, jetzt wird das Ganze wieder...

2575
01:53:08,730 --> 01:53:10,630
.NET run. .NET.

2576
01:53:10,730 --> 01:53:11,630
Haben wir's noch hier.

2577
01:53:11,730 --> 01:53:12,630
Publish.

2578
01:53:12,730 --> 01:53:18,460
Okay, da ist...

2579
01:53:18,560 --> 01:53:20,460
Zack.

2580
01:53:20,560 --> 01:53:26,360
Das können wir uns auch sparen, weil .NET garantiert im .NET-Container verfügbar sein wird.

2581
01:53:26,360 --> 01:53:30,360
Werden die ganzen Stages nacheinander gleichzeitig abgearbeitet?

2582
01:53:30,460 --> 01:53:34,360
Gleichzeitig, es sei denn, die eine hat Abhängigkeit auf die andere.

2583
01:53:34,460 --> 01:53:36,360
Das ist relativ schlau.

2584
01:53:36,460 --> 01:53:40,360
Mittlerweile, die ganze Build-Kit-Docker-Bild-Geschichte.

2585
01:53:40,460 --> 01:53:42,360
Du wirst, du wirst gleich sehen.

2586
01:53:42,460 --> 01:53:46,870
Der macht das parallel, es sei denn, es hängt voneinander ab.

2587
01:53:46,970 --> 01:53:47,870
Oh ja, gut.

2588
01:53:47,970 --> 01:53:51,870
Und wenn sie unterschiedlich schnell sind, dann sieht's halt auch nicht parallel aus, aber sie sind parallel.

2589
01:53:51,970 --> 01:53:52,870
Okay.

2590
01:53:52,970 --> 01:53:55,870
.NET publish-c-release-output.

2591
01:53:55,870 --> 01:53:58,870
Eigentlich kann ich mir das komplett schenken, den Output.

2592
01:53:58,970 --> 01:54:00,870
Das kann ruhig das Default-Verzeichnis sein.

2593
01:54:00,970 --> 01:54:02,870
Das ist okay.

2594
01:54:02,970 --> 01:54:08,370
Okay, und jetzt, und jetzt kommt der, und jetzt kommt der eigentliche Trick.

2595
01:54:08,470 --> 01:54:10,370
Jetzt kann man unten nochmal sagen hier...

2596
01:54:10,470 --> 01:54:14,370
App oder so, nennen wir's einfach mal.

2597
01:54:14,470 --> 01:54:15,370
App.

2598
01:54:15,470 --> 01:54:16,370
So, und jetzt sagen wir from.

2599
01:54:16,470 --> 01:54:21,370
Jetzt brauchen wir das Microsoft-Image für ASP.NET Core.

2600
01:54:21,470 --> 01:54:23,370
Hier, das da brauchen wir.

2601
01:54:23,470 --> 01:54:32,210
Wahrscheinlich einfach nur das.

2602
01:54:32,310 --> 01:54:33,210
Moment, ach, nicht runtime.

2603
01:54:33,310 --> 01:54:34,210
ASP.NET da ist.

2604
01:54:34,210 --> 01:54:35,210
ASP.NET da ist doch.

2605
01:54:35,310 --> 01:54:40,850
Genau.

2606
01:54:40,950 --> 01:54:41,850
From.

2607
01:54:41,950 --> 01:54:42,850
So.

2608
01:54:42,950 --> 01:54:43,850
S.

2609
01:54:43,950 --> 01:54:44,850
Gachibus.

2610
01:54:44,950 --> 01:54:46,850
Also runtime oder sowas.

2611
01:54:46,950 --> 01:54:47,850
Keine Ahnung.

2612
01:54:47,950 --> 01:54:50,850
Ich glaub Microsoft nennt das Zeug immer runtime.

2613
01:54:50,950 --> 01:54:51,850
So.

2614
01:54:51,950 --> 01:54:53,850
Workdir.

2615
01:54:53,950 --> 01:54:55,850
Nennen wir's jetzt einfach mal App.

2616
01:54:55,950 --> 01:54:59,850
Dass wir irgendwie, dass wir einen Unterschied haben zwischen, das ist das Output-Image.

2617
01:54:59,950 --> 01:55:00,850
So.

2618
01:55:00,950 --> 01:55:01,850
Jetzt machen wir an der Stelle mal noch nix.

2619
01:55:01,950 --> 01:55:02,850
Ja.

2620
01:55:02,950 --> 01:55:05,850
Ich, ich führ's jetzt einfach mal aus.

2621
01:55:05,950 --> 01:55:06,850
Ist es nicht?

2622
01:55:06,950 --> 01:55:07,850
Wir kommen Ende zwei.

2623
01:55:07,850 --> 01:55:09,850
Auf alle anderen Erfolgen ein Runstatement zusammenzufügen.

2624
01:55:09,950 --> 01:55:10,850
Jedes Command in Dockerfall eigenes Layer.

2625
01:55:10,950 --> 01:55:19,400
Also, ja, da hast du, da hast du nicht unrecht.

2626
01:55:19,500 --> 01:55:22,400
Und zumal in dem Fall macht das Caching auch relativ wenig Sinn.

2627
01:55:22,500 --> 01:55:23,400
Das ist richtig.

2628
01:55:23,500 --> 01:55:26,400
Aber, ja, ich werd's verkraften.

2629
01:55:26,500 --> 01:55:31,800
Ja, es ist schon, ist schon was dran.

2630
01:55:31,900 --> 01:55:35,800
Ich meine, es sei denn, es macht Sinn, dass man die einzelnen Layer cached für sich genommen.

2631
01:55:35,900 --> 01:55:40,310
Aber du hast, du hast recht, ja.

2632
01:55:40,410 --> 01:55:44,070
Okay, also.

2633
01:55:44,170 --> 01:55:46,070
Docker-Bild.

2634
01:55:46,070 --> 01:55:49,070
Jetzt werdet ihr sehen, es sei denn, es kackt ab.

2635
01:55:49,170 --> 01:55:53,600
Es sei denn, es kackt ab.

2636
01:55:53,700 --> 01:55:55,600
Wir müssen jetzt mehrere Builds parallel sehen.

2637
01:55:55,700 --> 01:56:00,600
Nämlich einmal den Rust-Container, einmal den .NET-Container und den Output-Container am Ende.

2638
01:56:00,700 --> 01:56:05,600
Okay, er, er, er pullt erst mal das, er pullt erst mal das Image.

2639
01:56:05,700 --> 01:56:07,600
Zack, und schon ist er fertig.

2640
01:56:07,700 --> 01:56:10,600
Das ging.

2641
01:56:10,700 --> 01:56:12,600
Ach so, ha.

2642
01:56:12,700 --> 01:56:14,600
Docker ist zu schlau, Leute.

2643
01:56:14,700 --> 01:56:16,500
Docker ist zu schlau.

2644
01:56:16,600 --> 01:56:18,500
Der erkennt, dass der, dass von diesem Image nichts benutzt wird.

2645
01:56:18,500 --> 01:56:20,500
Und deswegen baut er es nicht, vermutlich.

2646
01:56:20,600 --> 01:56:24,500
Okay, also muss ich jetzt, muss ich jetzt doch so tun, als will ich was davon haben.

2647
01:56:24,600 --> 01:56:30,500
Und zwar, man kann jetzt, also wir haben ja hier oben die .NET-App, ähm, die .NET-App gebildet, gebildet.

2648
01:56:30,600 --> 01:56:31,500
Und hier die Rust-App.

2649
01:56:31,600 --> 01:56:33,500
Und das ist mein, mein Ziel-Image.

2650
01:56:33,600 --> 01:56:39,500
Das heißt, im Endeffekt muss ich jetzt sowas machen hier, wie copy und jetzt from.

2651
01:56:39,600 --> 01:56:41,500
Wobei, ich glaube, das können wir uns sparen.

2652
01:56:41,600 --> 01:56:42,500
Copy from.

2653
01:56:42,600 --> 01:56:48,400
Hier den Name von dem Image zur Build-Zeit, wo die Dateien liegen.

2654
01:56:48,400 --> 01:56:49,400
Copy from Rust.

2655
01:56:49,500 --> 01:56:51,400
Slash Build.

2656
01:56:51,500 --> 01:56:53,400
Weil, work dir, slash Build.

2657
01:56:53,500 --> 01:56:59,400
Und da drinne gibt es jetzt ein FFmpeg-Folder, zum Beispiel.

2658
01:56:59,500 --> 01:57:03,400
Und den kopieren wir einfach rüber uns als FFmpeg, ja.

2659
01:57:03,500 --> 01:57:19,000
So, als nächstes brauchen wir from Rust noch, ja.

2660
01:57:19,100 --> 01:57:25,370
Build target release libwebrtcrust.so.

2661
01:57:25,470 --> 01:57:29,270
Soll im Prinzip hier exakt genauso heißen.

2662
01:57:29,470 --> 01:57:35,370
Und dann brauchen wir als letzten Step noch, ich bin mir nicht sicher, ob die Reihenfolge gerade die beste ist.

2663
01:57:35,470 --> 01:57:39,370
Und dann brauchen wir als letzten Step noch die .NET-App.

2664
01:57:39,470 --> 01:57:44,370
Und zwar, jetzt ist es from.net.

2665
01:57:44,470 --> 01:57:46,370
From.net.

2666
01:57:46,470 --> 01:57:48,370
Und jetzt kann ich mir immer nicht merken, wo dieser ganze Mist liegt.

2667
01:57:48,470 --> 01:57:50,370
Auf jeden Fall schon mal in Build.

2668
01:57:50,470 --> 01:57:52,370
Habe ich das hier irgendwo stehen?

2669
01:57:52,470 --> 01:57:53,370
Ne.

2670
01:57:54,850 --> 01:57:55,750
Ähm.

2671
01:57:55,850 --> 01:58:04,200
Minus O.

2672
01:58:04,300 --> 01:58:12,290
Ja, auch in Release, aber diesen...

2673
01:58:12,290 --> 01:58:14,290
Liegt FFmpeg nicht unter slash Build?

2674
01:58:14,390 --> 01:58:15,290
Slash...

2675
01:58:15,390 --> 01:58:16,290
Ne.

2676
01:58:16,390 --> 01:58:17,290
Ne.

2677
01:58:17,390 --> 01:58:18,290
FFmpeg kommt hier...

2678
01:58:18,390 --> 01:58:19,290
Achso, Moment.

2679
01:58:19,390 --> 01:58:20,290
Wait a minute.

2680
01:58:20,390 --> 01:58:29,140
Du hast recht.

2681
01:58:29,240 --> 01:58:31,140
Das hätte übrigens gar nicht funktioniert an der Stelle.

2682
01:58:31,240 --> 01:58:33,140
Weil es Verzeichnis nicht gegeben hätte.

2683
01:58:33,240 --> 01:58:34,140
So ist richtig.

2684
01:58:34,240 --> 01:58:35,140
So ist richtig.

2685
01:58:35,240 --> 01:58:36,140
Siehste?

2686
01:58:36,240 --> 01:58:37,140
Chatge...

2687
01:58:37,240 --> 01:58:40,600
High IQ wieder.

2688
01:58:40,700 --> 01:58:41,600
So.

2689
01:58:41,700 --> 01:58:42,600
From Build.

2690
01:58:42,700 --> 01:58:44,600
Ich kann es mir einfach immer nicht merken, wo diese...

2691
01:58:44,700 --> 01:58:45,600
Wo .NET...

2692
01:58:45,700 --> 01:58:47,600
.NET publish-c release.

2693
01:58:47,700 --> 01:58:48,600
Alles klar.

2694
01:58:48,700 --> 01:58:49,600
Gib ihm.

2695
01:58:49,700 --> 01:58:50,600
Wat?

2696
01:58:50,600 --> 01:58:51,600
Was?

2697
01:58:51,700 --> 01:58:52,600
Achso.

2698
01:58:52,700 --> 01:58:53,600
Ha.

2699
01:58:53,700 --> 01:58:54,600
Ja.

2700
01:58:54,700 --> 01:58:57,490
Ja, ja.

2701
01:58:57,590 --> 01:59:04,280
Ist ja gut.

2702
01:59:04,380 --> 01:59:05,280
Nicht Docker.

2703
01:59:05,380 --> 01:59:07,720
Okay.

2704
01:59:07,820 --> 01:59:08,720
Bin.

2705
01:59:08,820 --> 01:59:09,720
Release.

2706
01:59:09,820 --> 01:59:10,720
Net.

2707
01:59:10,820 --> 01:59:16,430
8.

2708
01:59:16,530 --> 01:59:20,400
Publish.

2709
01:59:20,500 --> 01:59:21,400
Bin.

2710
01:59:21,500 --> 01:59:22,400
Release.

2711
01:59:22,500 --> 01:59:23,400
Net.

2712
01:59:23,500 --> 01:59:24,400
8.

2713
01:59:24,500 --> 01:59:25,400
Publish.

2714
01:59:25,500 --> 01:59:30,080
Alright.

2715
01:59:30,180 --> 01:59:31,080
Bin.

2716
01:59:31,180 --> 01:59:32,080
Release.

2717
01:59:32,180 --> 01:59:33,080
Publish.

2718
01:59:33,180 --> 01:59:34,080
Okay.

2719
01:59:34,180 --> 01:59:35,080
Auch hier.

2720
01:59:35,180 --> 01:59:36,080
Gleicher.

2721
01:59:36,180 --> 01:59:37,080
Gleicher.

2722
01:59:37,180 --> 01:59:39,980
Soll die ganzen Cramply einfach in das Verzeichnis schmeißen?

2723
01:59:40,080 --> 01:59:40,980
Einfach.

2724
01:59:40,980 --> 01:59:42,480
Einfach eigenen Output setzen?

2725
01:59:42,580 --> 01:59:42,980
Ja.

2726
01:59:43,080 --> 01:59:44,580
Das wäre auch eine Möglichkeit.

2727
01:59:44,680 --> 01:59:44,980
So.

2728
01:59:45,080 --> 01:59:51,880
Und als letztes kopieren wir noch von Backend www...

2729
01:59:51,980 --> 01:59:53,180
Das da machen wir im Endeffekt.

2730
01:59:53,280 --> 01:59:53,480
Moment.

2731
01:59:53,580 --> 01:59:53,980
Das machen wir nicht.

2732
01:59:54,080 --> 01:59:59,930
wwwroot nach wwwroot.

2733
02:00:00,030 --> 02:00:00,730
Alles klar.

2734
02:00:00,830 --> 02:00:02,730
So.

2735
02:00:02,830 --> 02:00:04,530
Das CMD sparen wir uns jetzt mal.

2736
02:00:04,630 --> 02:00:05,630
Ich hoffe, das funzt jetzt.

2737
02:00:05,730 --> 02:00:06,330
Docker Build.

2738
02:00:06,430 --> 02:00:08,030
Bam.

2739
02:00:08,130 --> 02:00:08,330
Guck.

2740
02:00:08,430 --> 02:00:10,530
Man sieht, er macht die Sachen auch parallel.

2741
02:00:10,630 --> 02:00:11,730
Hier oben ist er am .NET Image.

2742
02:00:11,830 --> 02:00:12,930
Hier unten ist er am Rust Image.

2743
02:00:12,930 --> 02:00:23,040
Guck, hier oben lädt er noch das .NET Image runter.

2744
02:00:23,140 --> 02:00:24,040
Hier unten baut er schon Rust.

2745
02:00:24,140 --> 02:00:25,740
Also es geht bis zu dem Punkt parallel.

2746
02:00:25,840 --> 02:00:28,940
Das letzte, das Output Image, kann er natürlich nicht parallel bauen,

2747
02:00:29,040 --> 02:00:31,240
weil es Abhängigkeiten zu diesen beiden Images hat.

2748
02:00:31,340 --> 02:00:40,840
Hi, wieso muss das FFmpeg in das Rust Image kopiert werden?

2749
02:00:40,940 --> 02:00:42,940
War das nicht vorher für .NET dabei?

2750
02:00:43,040 --> 02:00:43,640
Ne.

2751
02:00:43,740 --> 02:00:47,740
Also übrigens, ich gebe dir recht, es ist ein bisschen irritierend,

2752
02:00:47,840 --> 02:00:48,940
dass es in dem Rust Image ist.

2753
02:00:49,040 --> 02:00:50,340
Ich hatte einfach keinen Bock.

2754
02:00:50,340 --> 02:00:53,740
Für den Download von FFmpeg noch einen eigenen Build-Step zu machen.

2755
02:00:53,840 --> 02:00:56,340
Eigentlich gehört das in den Rust-Step gar nicht rein.

2756
02:00:56,440 --> 02:00:59,640
Das sollte eigentlich ein eigener Step vor allen anderen sein

2757
02:00:59,740 --> 02:01:01,140
oder halt zumindest ein eigenes Image.

2758
02:01:01,240 --> 02:01:04,140
Das war aber nicht im .NET dabei.

2759
02:01:04,240 --> 02:01:04,940
Ne, ne.

2760
02:01:05,040 --> 02:01:06,240
Das muss man runterladen neu.

2761
02:01:06,340 --> 02:01:09,240
So.

2762
02:01:09,340 --> 02:01:10,940
Das hat funktioniert, oder?

2763
02:01:11,040 --> 02:01:12,940
Docker run.

2764
02:01:13,040 --> 02:01:13,940
Schauen wir mal.

2765
02:01:14,040 --> 02:01:15,740
Ups.

2766
02:01:15,840 --> 02:01:19,740
Ach, ich habe keinen Command angegeben, oder?

2767
02:01:19,840 --> 02:01:20,640
Ach so.

2768
02:01:20,740 --> 02:01:21,740
Tja.

2769
02:01:22,040 --> 02:01:25,940
Das ist natürlich nicht so High-IQ gewesen.

2770
02:01:26,040 --> 02:01:34,430
Jetzt müssen wir auch nicht mehr wechseln in Build und auch nicht mehr Test starten,

2771
02:01:34,530 --> 02:01:38,430
sondern wir können einfach sagen .NET backend-dll urls.

2772
02:01:38,530 --> 02:01:42,430
Guck mal, passt mal auf, wie schnell das jetzt bildet auf einmal.

2773
02:01:42,530 --> 02:01:44,430
Bam, fertig.

2774
02:01:44,530 --> 02:01:46,430
Run.

2775
02:01:46,530 --> 02:01:47,430
Geht.

2776
02:01:47,530 --> 02:01:49,430
Easy.

2777
02:01:49,530 --> 02:01:55,760
Easy as fuck. Easy as fuck.

2778
02:01:55,760 --> 02:01:56,660
So, und jetzt passt mal auf.

2779
02:01:56,760 --> 02:01:59,660
Docker-Images.

2780
02:01:59,760 --> 02:02:02,660
Es ist zwar immer noch groß.

2781
02:02:02,760 --> 02:02:05,660
Aber was ist denn daran jetzt noch so groß, Leute?

2782
02:02:05,760 --> 02:02:08,660
Ich meine, das hier ist das Richtige.

2783
02:02:08,760 --> 02:02:10,660
Was ist denn da immer noch so groß?

2784
02:02:10,760 --> 02:02:13,660
Ich meine, FFmpeg ist 140 MB.

2785
02:02:13,760 --> 02:02:17,300
Okay, wir checken mal.

2786
02:02:17,400 --> 02:02:18,300
Wir checken mal kurz mal.

2787
02:02:18,400 --> 02:02:19,300
Ach so, ja doch.

2788
02:02:19,400 --> 02:02:23,300
Die .NET, das ganze .NET-Framework ist ja dabei.

2789
02:02:23,400 --> 02:02:25,300
Und FFmpeg.

2790
02:02:25,300 --> 02:02:27,200
Doch, doch, okay.

2791
02:02:27,300 --> 02:02:28,200
Das lasse ich mir gefallen.

2792
02:02:28,300 --> 02:02:29,200
Ah, wir können.

2793
02:02:29,300 --> 02:02:30,200
Leute, ich habe eine Idee.

2794
02:02:30,300 --> 02:02:32,200
Wir können FFmpeg noch ein bisschen kleiner machen.

2795
02:02:32,300 --> 02:02:34,200
Wir können FFmpeg noch ein bisschen kleiner machen.

2796
02:02:34,300 --> 02:02:35,200
Ja.

2797
02:02:35,300 --> 02:02:37,200
Run.

2798
02:02:37,300 --> 02:02:44,200
Wir gucken mal kurz.

2799
02:02:44,300 --> 02:02:46,200
Ja, guck mal.

2800
02:02:46,300 --> 02:02:49,200
Allein schon der Ordner.

2801
02:02:49,300 --> 02:02:54,200
Allein schon, guck mal, allein schon der Ordner ist 166 MB.

2802
02:02:54,300 --> 02:02:57,200
Und der Rest, der Rest ist einfach das Image.

2803
02:02:57,300 --> 02:02:59,200
Los.

2804
02:02:59,400 --> 02:03:02,200
Benutzt du was nicht AOT-kompatibles?

2805
02:03:02,300 --> 02:03:06,150
Ich glaube nicht.

2806
02:03:06,250 --> 02:03:15,150
Theoretisch, theoretisch könnte ich auch das ganze AOT compilen lassen.

2807
02:03:15,250 --> 02:03:17,150
Das ist noch ein bisschen kleiner.

2808
02:03:17,250 --> 02:03:19,150
Ja, das können wir das nächste Mal machen.

2809
02:03:19,250 --> 02:03:21,150
Ja.

2810
02:03:21,250 --> 02:03:26,000
Das können wir das nächste Mal machen.

2811
02:03:26,100 --> 02:03:29,000
Als nächstes, ich kann mir, ich kann mir das mal aufschreiben.

2812
02:03:29,100 --> 02:03:33,000
Also was wir als nächstes, wir können als nächstes eventuell, wobei das haben wir schon mal gehabt.

2813
02:03:33,000 --> 02:03:34,900
Bild, kann man machen.

2814
02:03:35,000 --> 02:03:41,510
Oder, ähm, ja.

2815
02:03:41,610 --> 02:03:44,510
Aber wir können, wir können noch was relativ Simples machen.

2816
02:03:44,610 --> 02:03:45,510
Das ist kleiner mit.

2817
02:03:45,610 --> 02:03:47,510
Und zwar, wir können.

2818
02:03:47,610 --> 02:03:49,510
Guck mal.

2819
02:03:49,610 --> 02:03:51,510
Wir gucken mal kurz, wie groß hier was ist.

2820
02:03:51,610 --> 02:03:53,510
Ja, update.

2821
02:03:53,610 --> 02:03:55,510
Wie gibt es, äh.

2822
02:03:55,610 --> 02:03:58,820
Gibt es das nicht für Debian?

2823
02:03:58,920 --> 02:04:04,270
Doch, gibt es.

2824
02:04:04,370 --> 02:04:06,270
So, also, guck mal.

2825
02:04:06,370 --> 02:04:08,270
User ist 210 MB groß.

2826
02:04:08,370 --> 02:04:10,270
App ist, also wir können das, wir kriegen das nicht kleiner.

2827
02:04:10,370 --> 02:04:12,270
Das Image.

2828
02:04:12,270 --> 02:04:14,170
Das Image ist halt nun mal, ne.

2829
02:04:14,270 --> 02:04:16,170
100 MB .NET.

2830
02:04:16,270 --> 02:04:19,170
100 MB, äh, Abhängigkeiten von .NET.

2831
02:04:19,270 --> 02:04:20,170
Aus irgendwelchen Gründen.

2832
02:04:20,270 --> 02:04:21,170
Perl Base.

2833
02:04:21,270 --> 02:04:23,170
Ganz essentiell, dass Perl da drauf ist.

2834
02:04:23,270 --> 02:04:25,170
Aber ist für uns nicht.

2835
02:04:25,270 --> 02:04:27,170
Aber was wir machen können, fällt mir gerade ein.

2836
02:04:27,270 --> 02:04:29,170
Wir können bei FFmpeg noch was löschen.

2837
02:04:29,270 --> 02:04:32,170
Und zwar, wir können aus FFmpeg, das probieren wir mal aus.

2838
02:04:32,270 --> 02:04:42,170
Wir können aus FFmpeg, theoretisch, License, Bin, Doc, Include und Man löschen.

2839
02:04:42,370 --> 02:04:44,170
Probieren wir das mal.

2840
02:04:44,270 --> 02:04:49,880
Guck mal.

2841
02:04:49,980 --> 02:04:53,880
Haben wir noch einmal 20 MB gespart.

2842
02:04:53,980 --> 02:04:57,380
Das könnten wir tatsächlich machen.

2843
02:04:57,480 --> 02:05:01,650
Weil das brauchen wir nicht.

2844
02:05:01,750 --> 02:05:15,410
Jetzt sieht man übrigens auch, dass es keine gute Idee war, von mir, das FFmpeg Zeug in den Buildstep von Rust reinzupacken.

2845
02:05:15,510 --> 02:05:17,410
Weil jetzt muss ich Rust neu bilden.

2846
02:05:17,510 --> 02:05:25,370
Dann direkt nur Lib kopieren.

2847
02:05:25,370 --> 02:05:32,500
Du meinst hier, dass wir quasi sagen, Lib.

2848
02:05:32,600 --> 02:05:38,220
Aber das verzeichnet, dann meckert er, dass es das verzeichnet.

2849
02:05:38,320 --> 02:05:42,220
Kann man bei mv.create.directory direkt mit angeben?

2850
02:05:42,320 --> 02:05:44,220
mv-p oder sowas?

2851
02:05:44,320 --> 02:05:48,750
Ne.

2852
02:05:48,850 --> 02:05:50,750
Ne, natürlich nicht.

2853
02:05:50,850 --> 02:05:53,750
Ach, im Runtime Image.

2854
02:05:53,850 --> 02:05:54,750
Ja, sehr gute Idee.

2855
02:05:54,850 --> 02:05:55,750
Excellent.

2856
02:05:55,850 --> 02:05:56,750
Pfeifert.

2857
02:05:56,850 --> 02:05:57,750
Doch, genau.

2858
02:05:57,850 --> 02:06:00,750
Wir kopieren FFmpeg.

2859
02:06:00,850 --> 02:06:04,450
Lib.

2860
02:06:04,450 --> 02:06:16,020
Aber da ist auch wieder hier kein Verzeichnis da.

2861
02:06:16,120 --> 02:06:23,290
Ich meine, wir könnten es auch so machen.

2862
02:06:23,390 --> 02:06:27,290
Und hier einfach nur FFmpeg reinschreiben.

2863
02:06:27,390 --> 02:06:28,290
Ist ja auch nicht verkehrt.

2864
02:06:28,390 --> 02:06:30,290
Testen wir mal, ob das funktioniert.

2865
02:06:30,390 --> 02:06:32,290
FFmpeg.

2866
02:06:32,390 --> 02:06:34,290
mv.ffmpeg.

2867
02:06:34,390 --> 02:06:36,290
Lib.

2868
02:06:36,390 --> 02:06:37,290
Nur nach Lib.

2869
02:06:37,390 --> 02:06:39,290
rm-ffmpeg.

2870
02:06:39,390 --> 02:06:41,290
Yes.

2871
02:06:41,390 --> 02:06:46,910
Lib.

2872
02:06:46,910 --> 02:06:48,810
Schaut mal, ob das jetzt läuft.

2873
02:06:48,910 --> 02:06:54,380
Run.

2874
02:06:54,480 --> 02:06:55,380
Ja, Kunst.

2875
02:06:55,480 --> 02:06:56,380
Wird funktionieren.

2876
02:06:56,480 --> 02:06:57,380
Können wir so machen, ja.

2877
02:06:57,480 --> 02:06:59,380
Ja, eigentlich gar nicht so schlecht.

2878
02:06:59,480 --> 02:07:01,380
Wir kopieren nur Lib rüber.

2879
02:07:01,480 --> 02:07:06,910
Benennen das Verzeichnis in FFmpeg um.

2880
02:07:07,010 --> 02:07:13,910
Kann Docker Copy auch ganze Pfade anlegen?

2881
02:07:14,010 --> 02:07:19,060
Das ist eine gute Frage.

2882
02:07:19,160 --> 02:07:37,090
Entscheidend.

2883
02:07:37,190 --> 02:07:43,060
Ne.

2884
02:07:43,160 --> 02:07:47,060
Ich meine, wir können mkdir davor machen, ja.

2885
02:07:47,060 --> 02:07:47,960
Das wird natürlich...

2886
02:07:48,060 --> 02:07:49,960
Ah, das KLG anscheinend nicht.

2887
02:07:50,060 --> 02:07:52,960
Aber so müsste es auch funktionieren.

2888
02:07:53,060 --> 02:07:53,960
Ja.

2889
02:07:54,060 --> 02:07:56,960
Das ist natürlich blöd, dass ich das FFmpeg...

2890
02:07:57,060 --> 02:08:01,620
Stimmt.

2891
02:08:01,720 --> 02:08:02,620
Ich bin verkehrt.

2892
02:08:02,720 --> 02:08:03,620
Ja, ja.

2893
02:08:03,720 --> 02:08:04,620
Nicht Docker CP.

2894
02:08:04,720 --> 02:08:05,620
Docker File.

2895
02:08:05,720 --> 02:08:06,620
Docker File.

2896
02:08:06,720 --> 02:08:07,620
Copy.

2897
02:08:07,720 --> 02:08:22,550
Copy.

2898
02:08:22,650 --> 02:08:25,550
Copies new files.

2899
02:08:25,650 --> 02:08:27,550
Multiple source.

2900
02:08:27,650 --> 02:08:33,440
Kann irgendwelches White Card Gedöns.

2901
02:08:33,440 --> 02:08:35,340
C-Hown.

2902
02:08:35,440 --> 02:08:38,340
Das mir nicht wirklich was bringt.

2903
02:08:42,560 --> 02:08:45,460
Ich würde aber auch darauf tippen, dass es das nicht kann.

2904
02:08:45,560 --> 02:08:51,250
Lassen wir es einfach mal so.

2905
02:08:51,350 --> 02:08:53,250
Einfach ausprobieren.

2906
02:08:53,350 --> 02:08:55,250
Also ohne Option geht es nicht.

2907
02:08:55,350 --> 02:08:58,250
Ich hatte schon öfters den Fehler, dass der irgendwelche Output...

2908
02:08:58,350 --> 02:09:01,250
Also nicht kopieren kann, weil er keine Verzeichnisse findet.

2909
02:09:01,350 --> 02:09:07,030
Aber so müsste es doch eigentlich auch funktionieren.

2910
02:09:07,130 --> 02:09:11,030
Ich überlege gerade, ob ich da noch einen eigenen Step draus mache mit dem FFmpeg.

2911
02:09:11,030 --> 02:09:13,930
Weil das in der Tat ein bisschen doof ist.

2912
02:09:14,030 --> 02:09:17,880
Komm, wir machen da was eigenes draus.

2913
02:09:17,980 --> 02:09:19,880
Sind wir mal nicht so.

2914
02:09:19,980 --> 02:09:21,880
Machen wir mal.

2915
02:09:21,980 --> 02:09:23,880
Tja.

2916
02:09:23,980 --> 02:09:25,880
FFmpeg.

2917
02:09:25,980 --> 02:09:29,880
Download FFmpeg.

2918
02:09:29,980 --> 02:09:31,880
Äh, what?

2919
02:09:31,980 --> 02:09:33,880
Da waren wir jetzt hier.

2920
02:09:33,980 --> 02:09:35,880
From.

2921
02:09:35,980 --> 02:09:37,880
Debian.

2922
02:09:37,980 --> 02:09:39,880
Debian.

2923
02:09:39,980 --> 02:09:41,880
Bookworm.

2924
02:09:41,880 --> 02:09:45,740
FFmpeg.

2925
02:09:45,840 --> 02:09:47,740
So.

2926
02:09:47,840 --> 02:09:57,770
Ja, ich glaube, so ist es gerade.

2927
02:09:57,870 --> 02:10:01,850
FFmpeg.

2928
02:10:01,950 --> 02:10:03,850
Äh.

2929
02:10:03,950 --> 02:10:08,310
Irgendwie auch Bild.

2930
02:10:08,410 --> 02:10:10,310
Aber das ist halt...

2931
02:10:10,410 --> 02:10:12,310
Da habe ich ja keinen Weg hier drauf, ne?

2932
02:10:12,410 --> 02:10:14,310
Oh, das ist ja doof.

2933
02:10:14,410 --> 02:10:16,310
Komm, scheiß drauf. Ich beiße jetzt in den Saal ab.

2934
02:10:16,410 --> 02:10:18,310
Wir machen das jetzt rückgängig.

2935
02:10:18,410 --> 02:10:20,310
Machen das jetzt einfach hier an der Stelle.

2936
02:10:20,410 --> 02:10:24,070
Lass uns halt nochmal bauen.

2937
02:10:24,170 --> 02:10:31,860
So oft updaten wir FFmpeg ja nicht.

2938
02:10:31,960 --> 02:10:32,960
Okay, zack.

2939
02:10:32,960 --> 02:10:34,860
Ich bin zu groß.

2940
02:10:34,960 --> 02:10:36,860
Also das alte mit den...

2941
02:10:36,960 --> 02:10:38,860
Mit den 3,6 Gig.

2942
02:10:38,960 --> 02:10:44,220
Oh, das ging jetzt erstaunlich schnell.

2943
02:10:44,320 --> 02:10:47,730
Ist der so schlau und hat das gecheckt oder wie?

2944
02:10:47,830 --> 02:10:49,730
Achso, ich habe ja nur das Copy geändert im Endeffekt.

2945
02:10:49,830 --> 02:10:51,730
Ja, kein Wunder, dass das...

2946
02:10:51,830 --> 02:10:53,730
Ist doch gut.

2947
02:10:53,830 --> 02:10:55,730
Hat's doch schon gelohnt.

2948
02:10:55,830 --> 02:10:57,730
Ging schnell.

2949
02:11:01,000 --> 02:11:02,900
So, run.

2950
02:11:03,000 --> 02:11:04,900
Tag, Funz.

2951
02:11:05,000 --> 02:11:06,900
Nice. Okay, sehr gut.

2952
02:11:07,000 --> 02:11:08,900
Dann testen wir doch jetzt mal, ob das mit dem Docker...

2953
02:11:08,900 --> 02:11:10,800
Also, neues Image ist 367.

2954
02:11:10,900 --> 02:11:12,800
Kleiner kriegen wir es nicht.

2955
02:11:12,900 --> 02:11:14,800
Kleiner kriegen wir es nicht.

2956
02:11:14,900 --> 02:11:16,800
Das ist die .NET Runtime.

2957
02:11:16,900 --> 02:11:18,800
Das Base Image.

2958
02:11:18,900 --> 02:11:25,390
Ja, Docker Copy kann Fade erzeugen, aber keine nested Fade, was er machen müsste.

2959
02:11:25,490 --> 02:11:27,390
Ich will ja quasi sowas hier machen.

2960
02:11:27,490 --> 02:11:29,390
Guck mal.

2961
02:11:29,490 --> 02:11:31,390
Lipp.

2962
02:11:33,570 --> 02:11:35,470
Und ich glaube, das geht nicht.

2963
02:11:35,570 --> 02:11:37,470
Wir können es ausprobieren.

2964
02:11:37,570 --> 02:11:39,470
Ich glaube, das geht nicht.

2965
02:11:39,570 --> 02:11:43,160
Ich meine, vielleicht geht es ja doch.

2966
02:11:43,160 --> 02:11:46,890
Okay, es geht doch.

2967
02:11:46,990 --> 02:11:48,890
Easy.

2968
02:11:48,990 --> 02:11:50,890
Ich habe nichts gesagt. Scheint doch zu funktionieren.

2969
02:11:50,990 --> 02:11:52,890
Ja, dann.

2970
02:11:52,990 --> 02:11:54,890
Dann können wir das ja auch wieder rückgängig machen.

2971
02:11:54,990 --> 02:11:56,890
FFmpeg.Lip.

2972
02:11:56,990 --> 02:11:58,890
So, also, ich habe jetzt den Source Code geändert.

2973
02:11:58,990 --> 02:12:00,890
Von meiner .NET Anwendung.

2974
02:12:00,990 --> 02:12:02,890
Von der Idee her, sollte er .NET, nur .NET Rebuilden.

2975
02:12:02,990 --> 02:12:04,890
Und neues Image bauen.

2976
02:12:04,990 --> 02:12:06,890
Äh...

2977
02:12:11,960 --> 02:12:13,860
Da stimmt was nicht, Leute.

2978
02:12:13,960 --> 02:12:20,950
Warum ist das cached?

2979
02:12:21,050 --> 02:12:25,220
Warum ist das cached?

2980
02:12:25,220 --> 02:12:27,120
Ich habe doch eindeutig hier geändert, oder?

2981
02:12:27,220 --> 02:12:29,120
Oder habe ich...

2982
02:12:29,220 --> 02:12:31,120
Moment, habe ich vorher einfach nicht gespeichert?

2983
02:12:31,220 --> 02:12:33,120
Kann das auch sein?

2984
02:12:36,200 --> 02:12:38,100
Moment, Moment, das muss ich jetzt mal ausprobieren.

2985
02:12:38,200 --> 02:12:40,100
Ich...

2986
02:12:40,200 --> 02:12:42,100
Ich kopiere das hier einfach noch ein paar mal, ja.

2987
02:12:42,200 --> 02:12:44,100
Ah, okay.

2988
02:12:44,200 --> 02:12:46,100
Ich habe vorher nicht gespeichert.

2989
02:12:46,200 --> 02:12:48,100
Alles gut.

2990
02:12:48,200 --> 02:12:50,100
My bad time. Sehr gut, Max.

2991
02:12:50,200 --> 02:12:52,100
Gut, alles klar.

2992
02:12:52,200 --> 02:12:54,100
Also, das sollte jetzt funktionieren.

2993
02:12:54,200 --> 02:12:56,100
Run.

2994
02:12:56,200 --> 02:12:58,100
Bam. Ja, Funst.

2995
02:12:58,100 --> 02:13:00,000
Und ihr habt gesehen, wie viel schneller das jetzt bildet.

2996
02:13:00,100 --> 02:13:02,000
Das Image im Vergleich zu vorher.

2997
02:13:02,100 --> 02:13:04,000
Und wie viel kleiner das jetzt ist.

2998
02:13:04,100 --> 02:13:06,000
Können wir uns mal angucken, was passiert, wenn ich in der...

2999
02:13:06,100 --> 02:13:08,000
Also, wenn ich in...

3000
02:13:08,100 --> 02:13:10,000
Wenn ich auf der .NET Seite was ändere.

3001
02:13:10,100 --> 02:13:12,000
Das ist jetzt relativ easy zu zeigen.

3002
02:13:12,100 --> 02:13:14,000
Okay, cached, weil er hat das schon mal gebildet.

3003
02:13:14,100 --> 02:13:16,000
Mit diesen drei Zeilen drin.

3004
02:13:16,100 --> 02:13:18,000
So, gehen wir mal in den Rust Part.

3005
02:13:18,100 --> 02:13:20,000
Gehen wir mal in den Rust Part.

3006
02:13:20,100 --> 02:13:22,000
Und ändern hier irgendwas.

3007
02:13:22,100 --> 02:13:24,000
Keine Ahnung.

3008
02:13:24,100 --> 02:13:28,210
Hier, active connections.

3009
02:13:28,210 --> 02:13:32,110
Soll jetzt unbedingt noch ein Ausrufezeichen hinten haben.

3010
02:13:32,210 --> 02:13:34,110
Build.

3011
02:13:34,210 --> 02:13:36,110
Guck, Cargo run, Build.

3012
02:13:36,210 --> 02:13:38,110
Jetzt muss er nur den Rust Part neu bilden.

3013
02:13:38,210 --> 02:13:40,110
Das dauert natürlich lang, weil Rust...

3014
02:13:40,210 --> 02:13:42,110
...lange braucht zum kombinieren.

3015
02:13:42,210 --> 02:13:47,720
Irgendjemand hat doch vorhin Cargo Chef angesprochen.

3016
02:13:47,820 --> 02:14:01,660
Du, du, du, du.

3017
02:14:01,760 --> 02:14:08,110
Leute, ich habe eine Idee.

3018
02:14:08,210 --> 02:14:11,550
Gibt es so was wie Cargo Pull oder sowas?

3019
02:14:11,650 --> 02:14:13,550
Gibt es so was wie Cargo Pull oder sowas?

3020
02:14:13,650 --> 02:14:15,550
Gibt es so was wie Cargo Pull oder sowas?

3021
02:14:15,650 --> 02:14:17,550
Das könnte man tatsächlich noch ausprobieren.

3022
02:14:17,550 --> 02:14:19,450
Das könnte man tatsächlich noch ausprobieren.

3023
02:14:19,550 --> 02:14:21,450
Weil man könnte jetzt ja an der Stelle...

3024
02:14:21,550 --> 02:14:23,450
Machen wir das mal wieder weg.

3025
02:14:23,550 --> 02:14:25,450
Was macht ihr? Wir haben einen Multistage-Docker-File gebaut.

3026
02:14:25,550 --> 02:14:27,450
Wir haben einen Multistage-Docker-File gebaut.

3027
02:14:27,550 --> 02:14:29,450
Also, was ich mir überlegt habe, ist folgendes.

3028
02:14:29,550 --> 02:14:31,450
Guckt mal. Hier kopiere ich den Source Code Cargo hin und mache ein Bild.

3029
02:14:31,550 --> 02:14:33,450
Guckt mal. Hier kopiere ich den Source Code Cargo hin und mache ein Bild.

3030
02:14:33,550 --> 02:14:35,450
Wenn ich sowas machen könnte, ich weiß nicht, ob es sowas gibt.

3031
02:14:35,550 --> 02:14:37,450
Wenn ich sowas machen könnte, ich weiß nicht, ob es sowas gibt.

3032
02:14:37,550 --> 02:14:39,450
Dann würde ich auch beim Ändern an der Go...

3033
02:14:39,550 --> 02:14:41,450
Dann würde ich auch beim Ändern an der Go...

3034
02:14:41,550 --> 02:14:43,450
Was labere ich mit Go?

3035
02:14:43,550 --> 02:14:45,450
An der Rust...

3036
02:14:45,450 --> 02:14:47,350
An dem Rust-Source-Code.

3037
02:14:47,450 --> 02:14:49,350
Wenn sich nichts an den Dependencies ändert,

3038
02:14:49,450 --> 02:14:51,350
Wenn sich nichts an den Dependencies ändert,

3039
02:14:51,450 --> 02:14:53,350
wäre das hier gecached an der Stelle.

3040
02:14:53,450 --> 02:14:55,350
Gibt es sowas wie Docker-Pull oder sowas?

3041
02:14:55,450 --> 02:14:57,350
Oder Cargo-Cargo-Pull, nicht Docker-Pull.

3042
02:14:57,450 --> 02:14:59,350
Cargo-Pull?

3043
02:14:59,450 --> 02:15:02,850
Was soll das tun?

3044
02:15:02,950 --> 02:15:04,850
Alle Dependencies runterladen,

3045
02:15:04,950 --> 02:15:06,850
die man braucht,

3046
02:15:06,950 --> 02:15:08,850
die in der Cargo-Tommel stehen.

3047
02:15:08,950 --> 02:15:10,850
die man braucht, die in der Cargo-Tommel stehen.

3048
02:15:10,950 --> 02:15:12,850
Weiß ich, ob sowas gibt.

3049
02:15:12,950 --> 02:15:14,850
Also, bei .NET heißt es Restore.

3050
02:15:14,950 --> 02:15:16,850
Cargo-Pull.

3051
02:15:17,050 --> 02:15:28,160
Gibt es sowas?

3052
02:15:28,260 --> 02:15:30,160
Was haben wir denn?

3053
02:15:30,260 --> 02:15:34,560
Build. Check. Clean.

3054
02:15:34,660 --> 02:15:37,880
New. Init. Add.

3055
02:15:37,980 --> 02:15:39,880
Remove. Run.

3056
02:15:39,980 --> 02:15:41,880
Bench. Update.

3057
02:15:41,980 --> 02:15:43,880
Bench. Update.

3058
02:15:43,980 --> 02:15:45,880
Nee.

3059
02:15:45,980 --> 02:15:47,880
Nee, gibt es nicht. Cargo-Fetch.

3060
02:15:47,980 --> 02:15:49,880
Nee, sowas gibt es ja anscheinend nicht.

3061
02:15:49,980 --> 02:15:51,880
Oh.

3062
02:15:51,980 --> 02:15:56,920
Hä?

3063
02:15:57,020 --> 02:16:02,210
Das steht aber gar nicht hier dabei.

3064
02:16:02,310 --> 02:16:16,660
Windows? Was macht denn Cargo-Fetch?

3065
02:16:16,760 --> 02:16:46,470
Minus-List wären alle.

3066
02:16:46,570 --> 02:16:48,470
Weil, das wäre natürlich gut.

3067
02:16:48,570 --> 02:16:52,360
Da muss er nicht jedes Mal diesen ganzen Krempel help.

3068
02:16:52,460 --> 02:17:01,620
Alter, was gibt es denn hier alles?

3069
02:17:01,720 --> 02:17:05,190
Build. Check. Clean. Clippy. Config. Fetch.

3070
02:17:05,290 --> 02:17:07,190
Build. Check. Clean. Clippy. Config. Fetch.

3071
02:17:07,290 --> 02:17:09,190
Okay, das ist schon mal gut.

3072
02:17:09,290 --> 02:17:13,520
Install. Locate.

3073
02:17:13,620 --> 02:17:15,520
Install. Locate.

3074
02:17:15,620 --> 02:17:19,860
Was auch immer miri ist.

3075
02:17:19,960 --> 02:17:21,860
Owner. Package.

3076
02:17:21,960 --> 02:17:25,750
Remove. Report.

3077
02:17:25,850 --> 02:17:30,790
Update.

3078
02:17:30,890 --> 02:17:32,790
Okay, Fetch ist glaube ich echt nicht verkehrt.

3079
02:17:32,890 --> 02:17:34,790
Okay, Fetch ist glaube ich echt nicht verkehrt.

3080
02:17:34,790 --> 02:17:36,690
Was ist das an der Stelle? Das probieren wir jetzt doch

3081
02:17:36,790 --> 02:17:38,690
glatt mal aus. Cargo-Fetch.

3082
02:17:38,790 --> 02:17:40,690
So, dann hat er

3083
02:17:40,790 --> 02:17:42,690
zumindest die Dependencies gecached.

3084
02:17:42,790 --> 02:17:46,260
An der Stelle.

3085
02:17:46,360 --> 02:17:48,260
Das sollte doch eigentlich ganz brauchbar sein.

3086
02:17:48,360 --> 02:17:52,210
Aber er muss den

3087
02:17:52,310 --> 02:17:54,210
gerade trotzdem compilen.

3088
02:17:54,310 --> 02:17:56,210
Ja, keine...

3089
02:17:56,310 --> 02:17:58,210
Ich glaube, da kommen wir jetzt nicht.

3090
02:17:58,310 --> 02:18:00,210
Ich glaube, da kommen wir jetzt nicht drum herum.

3091
02:18:00,310 --> 02:18:02,210
Oh.

3092
02:18:02,310 --> 02:18:04,210
Fail to pass manifest. Warum?

3093
02:18:04,310 --> 02:18:15,810
Ach so.

3094
02:18:15,910 --> 02:18:17,810
Ja. Okay, nee, das funktioniert nicht.

3095
02:18:17,810 --> 02:18:23,450
Das funktioniert so nicht,

3096
02:18:23,550 --> 02:18:25,450
wie ich mir das gedacht habe. Ich glaube, den Compile-Step,

3097
02:18:25,550 --> 02:18:27,450
den können wir nicht, können wir nicht

3098
02:18:27,550 --> 02:18:29,450
beschleunigen. Ich meine, wir könnten das,

3099
02:18:29,550 --> 02:18:31,450
wenn wir, also bei

3100
02:18:31,550 --> 02:18:33,450
GitHub Actions könnte man den

3101
02:18:33,550 --> 02:18:35,450
Bild-Output

3102
02:18:35,550 --> 02:18:37,450
vom letzten Mal cachen,

3103
02:18:37,550 --> 02:18:39,450
dann irgendwie wiederherstellen,

3104
02:18:39,550 --> 02:18:41,450
sodass er an der Stelle dann nicht alles

3105
02:18:41,550 --> 02:18:43,450
neu runter... Was auch immer. Ich kann damit leben.

3106
02:18:43,550 --> 02:18:45,450
Ja, ich kann damit leben. Das ist okay.

3107
02:18:45,550 --> 02:18:49,660
Aber ich würde sagen, passt soweit.

3108
02:18:49,760 --> 02:18:51,660
Mission erfüllt.

3109
02:18:51,760 --> 02:18:53,660
Wir haben ein schnelles

3110
02:18:53,660 --> 02:18:57,560
relativ kleines

3111
02:18:57,660 --> 02:18:59,560
Docker-Image.

3112
02:18:59,660 --> 02:19:01,560
Das ist gut.

3113
02:19:01,660 --> 02:19:03,560
Hat funktioniert.

3114
02:19:03,660 --> 02:19:05,560
Nice.

3115
02:19:05,660 --> 02:19:08,940
Okay, Chat.

3116
02:19:09,040 --> 02:19:10,940
Ich hoffe, ihr konntet jetzt ein bisschen bei der Arbeit noch

3117
02:19:11,040 --> 02:19:13,040
abgammeln bei mir im Stream, bevor ihr heim

3118
02:19:13,140 --> 02:19:14,940
müsst. Ich weiß nicht, ob man das

3119
02:19:15,040 --> 02:19:16,940
als Fortbildung verbuchen kann, wenn man

3120
02:19:17,040 --> 02:19:18,940
nicht viel mit Docker gemacht hat bestimmt.

3121
02:19:19,040 --> 02:19:24,870
Das Problem ist, glaube ich, nicht, dass

3122
02:19:24,970 --> 02:19:26,870
Base-Image,

3123
02:19:26,870 --> 02:19:28,770
dass Debian so groß wäre,

3124
02:19:28,870 --> 02:19:30,770
sondern eben, weil halt die komplette

3125
02:19:30,870 --> 02:19:32,770
.NET-Runtime drauf ist. Sieht man

3126
02:19:32,870 --> 02:19:34,770
ja auch. Und die .NET-Runtime, die ist halt unter

3127
02:19:34,870 --> 02:19:36,770
Ubuntu auch nicht kleiner als

3128
02:19:36,870 --> 02:19:38,770
mit

3129
02:19:38,870 --> 02:19:40,770
Debian.

3130
02:19:40,870 --> 02:19:42,770
Echt?

3131
02:19:42,870 --> 02:19:46,150
Ist das so? Ist das kleiner?

3132
02:19:46,250 --> 02:19:48,150
Okay, Moment. Das probieren wir jetzt mal kurz aus.

3133
02:19:48,250 --> 02:19:52,930
Also.

3134
02:19:53,030 --> 02:19:56,690
Wir haben aktuell

3135
02:19:56,790 --> 02:19:58,690
von unserem

3136
02:19:58,790 --> 02:20:00,690
Imager App, lassen wir mal

3137
02:20:00,790 --> 02:20:02,690
außen vor. Da werden wir nichts dran machen können.

3138
02:20:02,690 --> 02:20:04,590
Das ist mal User. So. In User

3139
02:20:04,690 --> 02:20:06,590
ist lib,

3140
02:20:06,690 --> 02:20:08,590
ist IQ, das

3141
02:20:08,690 --> 02:20:10,590
Brauma und

3142
02:20:10,690 --> 02:20:12,590
Pearl, was auch immer. Und 100 MB

3143
02:20:12,690 --> 02:20:14,590
davon sind .NET.

3144
02:20:14,690 --> 02:20:16,590
Ja, probieren wir das mal aus.

3145
02:20:18,690 --> 02:20:22,480
Okay.

3146
02:20:22,580 --> 02:20:24,480
Okay. Also, was brauchen wir?

3147
02:20:24,580 --> 02:20:26,480
Jammy schisselt

3148
02:20:26,580 --> 02:20:28,480
für ASP. ASP.

3149
02:20:28,580 --> 02:20:34,220
So.

3150
02:20:34,320 --> 02:20:48,640
Äh.

3151
02:20:48,740 --> 02:20:50,640
Ja, nix Preview. Die gibt's wahrscheinlich

3152
02:20:50,640 --> 02:20:52,540
schon komplett.

3153
02:20:52,640 --> 02:20:54,540
Die gibt's. Okay, das. Da bin ich,

3154
02:20:54,640 --> 02:20:56,540
da bin ich jetzt ja mal gespannt.

3155
02:20:56,640 --> 02:20:58,540
Also, im Prinzip

3156
02:20:58,640 --> 02:21:00,540
brauchen wir jetzt nur ASP.

3157
02:21:00,640 --> 02:21:02,540
Jammy

3158
02:21:02,640 --> 02:21:04,540
schisselt.

3159
02:21:04,640 --> 02:21:06,540
Schisselt.

3160
02:21:06,640 --> 02:21:08,540
Schisselt.

3161
02:21:08,640 --> 02:21:14,860
Bild.

3162
02:21:14,960 --> 02:21:16,860
Sehr nice. Stalker Image.

3163
02:21:16,960 --> 02:21:18,860
Ja.

3164
02:21:18,960 --> 02:21:22,240
Damit kann ich leben, oder?

3165
02:21:22,340 --> 02:21:24,240
260 MB.

3166
02:21:24,240 --> 02:21:26,140
260 MB.

3167
02:21:26,240 --> 02:21:29,900
Bash ist da natürlich

3168
02:21:30,000 --> 02:21:31,900
SH drauf. Irgendwas. Da ist nichts drauf.

3169
02:21:32,000 --> 02:21:33,900
Da ist einfach gar nichts drauf.

3170
02:21:34,000 --> 02:21:35,900
Ach so, funktioniert's noch? Das ist eine gute Frage.

3171
02:21:36,000 --> 02:21:37,900
Ja. Ne.

3172
02:21:38,000 --> 02:21:41,530
Ne.

3173
02:21:41,630 --> 02:21:51,370
Ne.

3174
02:21:51,470 --> 02:21:53,370
Fokussiere dich mal.

3175
02:21:53,470 --> 02:21:57,190
Ah, ich glaube, ich weiß, warum.

3176
02:21:57,290 --> 02:21:59,190
Ich weiß, warum. Wir müssen's so schreiben.

3177
02:21:59,290 --> 02:22:01,190
Ne, ne. Wir müssen's

3178
02:22:01,290 --> 02:22:03,190
so schreiben, Leute. Passt mal auf. Ich weiß, woran

3179
02:22:03,290 --> 02:22:05,190
das liegt. Wenn das was, wenn das, wenn das

3180
02:22:05,190 --> 02:22:07,090
jetzt geht, erklär ich euch, woran das lag.

3181
02:22:07,190 --> 02:22:13,800
Wenn's nicht geht, dann nicht.

3182
02:22:13,900 --> 02:22:20,240
Fuck.

3183
02:22:20,340 --> 02:22:22,240
The application

3184
02:22:22,340 --> 02:22:24,240
dot net does not exist.

3185
02:22:24,340 --> 02:22:28,710
Ist das

3186
02:22:28,810 --> 02:22:30,710
vielleicht nur für self-contained

3187
02:22:30,810 --> 02:22:45,540
Apps? Bin ich denn zu viel

3188
02:22:45,640 --> 02:22:47,540
geschisselt?

3189
02:22:47,640 --> 02:22:49,540
Äh, da brauch ich...

3190
02:22:49,640 --> 02:23:12,210
Ich bräuchte mal

3191
02:23:12,310 --> 02:23:14,210
ein Example.

3192
02:23:14,310 --> 02:23:16,210
Ein Example-Docker-File.

3193
02:23:16,310 --> 02:23:18,210
Publish dot net

3194
02:23:18,310 --> 02:23:20,210
nicht auch ne Binary?

3195
02:23:20,310 --> 02:23:22,210
Die ist aber standardmäßig abhängig

3196
02:23:22,310 --> 02:23:24,210
von der, von der Runtime.

3197
02:23:24,310 --> 02:23:26,210
Und wenn die Runtime nicht da ist,

3198
02:23:26,310 --> 02:23:28,210
also, es ist ja nix da,

3199
02:23:28,310 --> 02:23:30,210
dann

3200
02:23:30,310 --> 02:23:32,210
geht das nicht. Die müsste ich als

3201
02:23:32,310 --> 02:23:34,210
self-contained application

3202
02:23:34,310 --> 02:23:36,210
raushauen, dann würde es funktionieren.

3203
02:23:36,310 --> 02:23:39,780
Das ist, das ist geschisselt

3204
02:23:39,880 --> 02:23:45,330
im Entry Point.

3205
02:23:45,430 --> 02:23:47,330
Also quasi so, oder wie? Ne.

3206
02:23:47,430 --> 02:23:49,330
Ich brauch mal

3207
02:23:49,430 --> 02:23:51,330
ein Example. Ich brauch, ich brauch mal

3208
02:23:51,430 --> 02:23:53,330
ein Example-Docker-File.

3209
02:23:53,330 --> 02:23:57,760
Gibt's hier irgendwie ein

3210
02:23:57,860 --> 02:23:59,760
Example-Docker-File? Ja.

3211
02:23:59,860 --> 02:24:01,760
Entry Point. Ach,

3212
02:24:01,860 --> 02:24:03,760
tatsächlich, guck mal.

3213
02:24:03,860 --> 02:24:05,760
Man gibt da wirklich nur...

3214
02:24:05,860 --> 02:24:10,930
Gibt man da vielleicht so wirklich nur

3215
02:24:11,030 --> 02:24:12,930
das hinten gar nicht

3216
02:24:13,030 --> 02:24:21,360
mit an? Das braucht man wahrscheinlich

3217
02:24:21,460 --> 02:24:23,360
gar nicht, ne?

3218
02:24:23,460 --> 02:24:27,180
Geht. Nice. Aha.

3219
02:24:27,280 --> 02:24:29,180
Dot net

3220
02:24:29,280 --> 02:24:31,180
weggeschisselt, anscheinend.

3221
02:24:31,280 --> 02:24:33,180
Gut zu wissen.

3222
02:24:33,280 --> 02:24:35,180
Gut zu wissen. Easy. Easy.

3223
02:24:35,280 --> 02:24:39,390
Guck mal, und jetzt haben wir

3224
02:24:39,390 --> 02:24:41,290
noch 260 MB.

3225
02:24:41,390 --> 02:24:43,290
Und jetzt abschließend mal den Test.

3226
02:24:43,390 --> 02:24:45,290
Wie lange würde so ein komplettes

3227
02:24:45,390 --> 02:24:47,290
Bild jetzt brauchen? Wahrscheinlich

3228
02:24:47,390 --> 02:24:49,290
so eineinhalb Minuten.

3229
02:24:51,600 --> 02:24:53,500
Bild? Weil ich habe jetzt alle meine

3230
02:24:53,600 --> 02:24:55,500
Caches und sonst wie weggeschmissen.

3231
02:24:55,600 --> 02:24:57,500
Okay.

3232
02:24:57,600 --> 02:24:59,500
Also, gucken wir mal drauf, wie lange

3233
02:24:59,600 --> 02:25:02,810
so ein komplettes Bild jetzt braucht.

3234
02:25:02,910 --> 02:25:04,810
Jetzt wird richtig drauf losgeschisselt, ey.

3235
02:25:06,910 --> 02:25:08,810
Das heißt, glaube ich, schmeißeln, gell?

3236
02:25:08,910 --> 02:25:10,810
Auf Deutsch.

3237
02:25:10,910 --> 02:25:12,810
Schisseln.

3238
02:25:12,810 --> 02:25:14,710
Schisseln oder so. Ich glaube, es heißt

3239
02:25:14,810 --> 02:25:21,990
meißeln. Da haben die...

3240
02:25:22,090 --> 02:25:23,990
Ja, ist das ein Image

3241
02:25:24,090 --> 02:25:25,990
von Microsoft oder ist das

3242
02:25:26,090 --> 02:25:27,990
ein Image, was die Canonical-Leute

3243
02:25:28,090 --> 02:25:29,990
schisseln?

3244
02:25:30,090 --> 02:25:37,140
Vielleicht finden wir noch mal.

3245
02:25:37,240 --> 02:25:39,140
Ich habe noch eine Idee.

3246
02:25:39,240 --> 02:25:41,140
Docker-File-Rust.

3247
02:25:41,240 --> 02:25:43,140
Vielleicht gibt es da noch...

3248
02:25:43,240 --> 02:25:45,140
Bald neu der Schissel-Champ.

3249
02:25:45,240 --> 02:25:47,140
Ähm...

3250
02:25:47,240 --> 02:25:49,140
Vielleicht gibt es ja da ein Example für...

3251
02:25:49,240 --> 02:26:10,730
Äh...

3252
02:26:10,730 --> 02:26:12,630
Ich überlege gerade, ob es nicht vielleicht

3253
02:26:12,730 --> 02:26:14,630
was gibt, dass man irgendwie dieses Cargo-Bild...

3254
02:26:14,730 --> 02:26:16,630
Dieses Cargo-Library-Gedöns

3255
02:26:16,730 --> 02:26:18,630
Cachen könnte.

3256
02:26:18,730 --> 02:26:21,940
Habt ihr auch ein bisschen

3257
02:26:22,040 --> 02:26:23,940
gemeißelt heute an euren Containern?

3258
02:26:24,040 --> 02:26:25,940
Sehr nett.

3259
02:26:26,040 --> 02:26:33,600
Cache Rust-Dependent.

3260
02:26:33,700 --> 02:26:45,040
You need a dummy AS

3261
02:26:45,140 --> 02:26:47,040
and your Cargo-Yammel first.

3262
02:26:47,140 --> 02:26:49,040
Then build it to cache the dependencies

3263
02:26:49,140 --> 02:26:51,040
and then copy your...

3264
02:26:51,140 --> 02:26:53,040
Ach so!

3265
02:26:53,140 --> 02:26:55,040
Hi,

3266
02:26:55,040 --> 02:26:56,940
Hi IQ!

3267
02:26:57,040 --> 02:26:58,940
Hi...

3268
02:27:05,860 --> 02:27:07,760
Ach, guck mal!

3269
02:27:07,860 --> 02:27:09,760
Die legen so eine Fake-Lib-AS

3270
02:27:09,860 --> 02:27:13,580
an und danach

3271
02:27:13,680 --> 02:27:15,580
in einem Build-Step die richtige.

3272
02:27:15,680 --> 02:27:19,020
Okay, das probiere ich jetzt noch aus.

3273
02:27:19,120 --> 02:27:21,020
Jetzt wird Rust geschisselt, Leute.

3274
02:27:21,120 --> 02:27:23,020
Okay, Image hat gebildet

3275
02:27:23,120 --> 02:27:25,020
jetzt wie lang? 280 Sekunden.

3276
02:27:25,120 --> 02:27:27,020
Alles klar. Pass auf,

3277
02:27:27,120 --> 02:27:29,020
wir schisseln jetzt das Rust.

3278
02:27:29,120 --> 02:27:31,020
So, also...

3279
02:27:31,120 --> 02:27:33,020
Cargo?

3280
02:27:33,020 --> 02:27:34,920
An der Stelle, wenn man jetzt hier sagt

3281
02:27:35,020 --> 02:27:36,920
Cargo-Build, dann

3282
02:27:37,020 --> 02:27:38,920
meckert er garantiert,

3283
02:27:39,020 --> 02:27:42,560
weil keine

3284
02:27:42,660 --> 02:27:44,560
äh...

3285
02:27:44,660 --> 02:27:46,560
Lib-AS da ist.

3286
02:27:46,660 --> 02:27:48,560
So, wenn ich jetzt sage run

3287
02:27:48,660 --> 02:27:50,560
touch lib...

3288
02:27:50,660 --> 02:27:52,560
Ne, Moment, was? Source

3289
02:27:52,660 --> 02:27:56,960
lib-as...

3290
02:27:57,060 --> 02:28:00,590
Geht das jetzt?

3291
02:28:00,690 --> 02:28:02,590
No, such file or directory.

3292
02:28:02,690 --> 02:28:04,590
Äh...

3293
02:28:04,690 --> 02:28:06,590
Moment, kann das sein, dass es

3294
02:28:06,590 --> 02:28:08,490
touch einfach nicht gibt?

3295
02:28:08,590 --> 02:28:10,490
Das ist zu...

3296
02:28:10,590 --> 02:28:12,490
Hyper-Gachi?

3297
02:28:12,590 --> 02:28:14,490
Ne.

3298
02:28:14,590 --> 02:28:17,930
What?

3299
02:28:18,030 --> 02:28:26,420
Wie jetzt?

3300
02:28:26,520 --> 02:28:28,420
Ist das nicht irgendein Base-Tool, was immer dabei ist?

3301
02:28:28,520 --> 02:28:36,410
Ach, der Source-Ordner

3302
02:28:36,510 --> 02:28:38,410
wird... Okay, okay.

3303
02:28:38,510 --> 02:28:40,410
mkdir Source.

3304
02:28:40,510 --> 02:28:45,700
Äh...

3305
02:28:45,800 --> 02:28:47,700
Ich dachte eigentlich, dass touch-bash

3306
02:28:47,800 --> 02:28:49,700
Build-In ist.

3307
02:28:49,800 --> 02:28:51,700
Okay, ne, passt, passt, passt.

3308
02:28:51,800 --> 02:28:53,700
Passt.

3309
02:28:53,700 --> 02:28:57,620
Ich glaub, Leute, das funnst.

3310
02:28:57,720 --> 02:28:59,620
Better Twitch-TV

3311
02:28:59,720 --> 02:29:01,620
Shizzle. Ja, so oft werden wir das nicht brauchen,

3312
02:29:01,720 --> 02:29:04,930
vermute ich.

3313
02:29:05,030 --> 02:29:06,930
Aber, Leute, ich glaub, das funnst, was ich hier vorhab.

3314
02:29:07,030 --> 02:29:12,290
Glaub, das funnst.

3315
02:29:12,390 --> 02:29:14,290
Guck mal. Der hat, der hat

3316
02:29:14,390 --> 02:29:16,290
jetzt die Datei angelegt, diese leere

3317
02:29:16,390 --> 02:29:18,290
Lib-Datei.

3318
02:29:18,390 --> 02:29:20,290
Jetzt kompiliert er. Und

3319
02:29:20,390 --> 02:29:22,290
jetzt, für den nächsten Step, sollte,

3320
02:29:22,390 --> 02:29:24,290
sollten, sollten die Dependencies

3321
02:29:24,390 --> 02:29:26,290
eigentlich gecached sein.

3322
02:29:26,390 --> 02:29:30,240
Ja, der, ich glaub, ich glaub,

3323
02:29:30,340 --> 02:29:32,240
das funnst, Leute. Ich glaub, ich glaub, das funnst.

3324
02:29:32,340 --> 02:29:37,350
Cargo-Build.

3325
02:29:37,450 --> 02:29:41,750
So, probieren wir jetzt aus.

3326
02:29:41,850 --> 02:29:43,750
Wir ändern

3327
02:29:43,850 --> 02:29:45,750
jetzt, also, eben hat's ja noch lange gedauert. So, wir machen

3328
02:29:45,850 --> 02:29:47,750
jetzt einfach hier doppelten Output. So, ist ja

3329
02:29:47,850 --> 02:29:51,760
egal.

3330
02:29:51,860 --> 02:29:56,230
7TV Emotes.

3331
02:29:56,330 --> 02:29:58,230
Rust.

3332
02:29:58,330 --> 02:30:00,230
Das ist ein gutes

3333
02:30:00,330 --> 02:30:05,080
Emote.

3334
02:30:05,180 --> 02:30:09,030
Das find ich

3335
02:30:09,130 --> 02:30:11,030
gut, das, das mach ich mal.

3336
02:30:11,130 --> 02:30:17,730
Use Emote.

3337
02:30:17,830 --> 02:30:23,350
Ich mein, das bezieht sich ja,

3338
02:30:23,450 --> 02:30:25,350
das bezieht sich ja auf das Game, ja.

3339
02:30:25,450 --> 02:30:27,350
Aber es passt in dem Fall ja auch.

3340
02:30:29,450 --> 02:30:31,350
So, schauen wir mal, wie schnell das jetzt geht.

3341
02:30:33,020 --> 02:30:34,920
Nice. Es funktioniert, guck mal.

3342
02:30:35,020 --> 02:30:36,920
Die Dependencies sind gecached.

3343
02:30:37,020 --> 02:30:38,920
Jetzt. Das ist richtig high

3344
02:30:39,020 --> 02:30:40,920
IQ gewesen. Guck mal, wie viel schneller das

3345
02:30:41,020 --> 02:30:42,920
jetzt fertig ist. Es funktioniert.

3346
02:30:43,020 --> 02:30:44,920
Okay, das ist nice.

3347
02:30:45,020 --> 02:30:46,920
Guck mal. Dadurch, dass der hier eine

3348
02:30:47,020 --> 02:30:48,920
leere Lib, also, hier

3349
02:30:49,020 --> 02:30:50,920
holt er sich die neuesten

3350
02:30:51,020 --> 02:30:52,920
Cargo, das neueste Cargo

3351
02:30:53,020 --> 02:30:54,920
Dependency-File. Dann

3352
02:30:55,020 --> 02:30:56,920
legt er eine Fake-Lib-RS an.

3353
02:30:56,920 --> 02:30:58,820
Sodass Cargo Build funktioniert.

3354
02:30:58,920 --> 02:31:00,820
Ab der Stelle ist es gecached.

3355
02:31:00,920 --> 02:31:02,820
Bis zu dem Zeitpunkt, wo sich an

3356
02:31:02,920 --> 02:31:04,820
meinen Dependencies was ändert. Und da ändert

3357
02:31:04,920 --> 02:31:06,820
sich ja selten was dran. Und nur dann, wenn

3358
02:31:06,920 --> 02:31:08,820
sich die Dependencies ändern, dann

3359
02:31:08,920 --> 02:31:10,820
bildet er Dependency und Anwendung neu.

3360
02:31:10,920 --> 02:31:12,820
Sonst bildet er nur die Anwendung neu.

3361
02:31:12,920 --> 02:31:14,820
Eigentlich sehr nice, oder?

3362
02:31:14,920 --> 02:31:16,820
Excellent.

3363
02:31:16,920 --> 02:31:21,980
Die standard.net

3364
02:31:22,080 --> 02:31:23,980
Docker-File-Templates machen das

3365
02:31:24,080 --> 02:31:25,980
by the way auch. Was?

3366
02:31:26,080 --> 02:31:27,980
Die schisseln?

3367
02:31:27,980 --> 02:31:29,880
Was machen die?

3368
02:31:29,980 --> 02:31:44,970
Ich committe das mal.

3369
02:31:45,070 --> 02:31:46,970
Pack-Wait.

3370
02:31:47,070 --> 02:31:52,010
Hier ist das

3371
02:31:52,110 --> 02:31:55,450
Docker-File drin. Der Urlaub wird

3372
02:31:55,550 --> 02:31:57,450
ausgenutzt, ja. Erst Restore, dann

3373
02:31:57,550 --> 02:31:59,450
Source kopieren. Ach das. Ja.

3374
02:31:59,550 --> 02:32:01,450
Deswegen bin ich drauf gekommen

3375
02:32:01,550 --> 02:32:03,450
mit dem Restore, weil ich bilde mir ein,

3376
02:32:03,550 --> 02:32:05,450
weil ich das da mal gesehen hab. Deswegen wollte ich gucken, ob Cargo

3377
02:32:05,550 --> 02:32:07,450
auch sowas hat. Aber muss

3378
02:32:07,550 --> 02:32:09,450
ein bisschen tricksen. Aber ist schon okay.

3379
02:32:09,550 --> 02:32:11,450
Geht eigentlich ziemlich gut.

3380
02:32:11,550 --> 02:32:13,450
Ähm.

3381
02:32:13,550 --> 02:32:15,450
Okay.

3382
02:32:15,550 --> 02:32:17,450
Ja, das ist noch

3383
02:32:17,550 --> 02:32:19,450
die Sachen vom letzten Mal.

3384
02:32:19,550 --> 02:32:21,450
Die pushe ich jetzt

3385
02:32:21,550 --> 02:32:23,450
einfach

3386
02:32:23,550 --> 02:32:25,450
mal ins

3387
02:32:25,550 --> 02:32:27,450
ins CamChamp Shit.

3388
02:32:27,550 --> 02:32:30,760
Git push

3389
02:32:30,860 --> 02:32:32,760
origin master. Bam.

3390
02:32:32,860 --> 02:32:34,760
Schau mal, was

3391
02:32:34,860 --> 02:32:36,760
der CamChamp macht auf GitHub.

3392
02:32:36,860 --> 02:32:38,760
Der hat

3393
02:32:38,860 --> 02:32:40,760
jetzt ein Comet.

3394
02:32:40,860 --> 02:32:42,760
Und er hat mit Abstand

3395
02:32:42,860 --> 02:32:44,760
die allerbesten Comet-Messages.

3396
02:32:44,860 --> 02:32:54,090
Das gefällt mir.

3397
02:32:54,090 --> 02:32:55,990
Ja, nice.

3398
02:32:56,090 --> 02:32:57,990
Excellent, würde ich dazu sagen.

3399
02:32:58,090 --> 02:32:59,990
Excellent. Guck mal, die machen hier

3400
02:33:00,090 --> 02:33:01,990
super kompliziertes Zeug. Das

3401
02:33:02,090 --> 02:33:08,820
müssen wir gar nicht machen.

3402
02:33:08,920 --> 02:33:10,820
Excellent.

3403
02:33:10,920 --> 02:33:14,580
Okay.

3404
02:33:14,680 --> 02:33:18,600
Ich würde sagen, wir waren heute

3405
02:33:18,700 --> 02:33:20,600
highly effective.

3406
02:33:20,700 --> 02:33:22,600
Nee, effective ist

3407
02:33:22,700 --> 02:33:24,600
das Wort. Highly

3408
02:33:24,700 --> 02:33:26,600
productive, nicht effective.

3409
02:33:26,700 --> 02:33:28,600
Image

3410
02:33:28,700 --> 02:33:30,600
unter 200 MB.

3411
02:33:30,600 --> 02:33:32,500
Da muss ein bisschen was

3412
02:33:32,600 --> 02:33:34,500
weggeschisselt werden.

3413
02:33:34,600 --> 02:33:36,500
Unter 200 MB ist enorm schwierig,

3414
02:33:36,600 --> 02:33:38,500
wenn FFmpeg schon

3415
02:33:38,600 --> 02:33:40,500
140 MB groß ist.

3416
02:33:40,600 --> 02:33:42,500
Und

3417
02:33:42,600 --> 02:33:44,500
dementsprechend das OS.

3418
02:33:44,600 --> 02:33:46,500
Ich glaube nicht, dass das funzt.

3419
02:33:46,600 --> 02:33:48,500
Könnte man

3420
02:33:48,600 --> 02:33:52,260
das Programm auch als Dienst

3421
02:33:52,360 --> 02:33:54,260
programmieren?

3422
02:33:54,360 --> 02:33:56,260
Wie jetzt? Du meinst Windows Service

3423
02:33:56,360 --> 02:33:58,260
oder was?

3424
02:33:58,360 --> 02:34:00,260
Bestimmt.

3425
02:34:00,260 --> 02:34:02,160
Bestimmt. Damit will ich mich nicht

3426
02:34:02,260 --> 02:34:04,160
beschäftigen.

3427
02:34:04,260 --> 02:34:06,160
Also wir müssen... Okay, wir könnten

3428
02:34:06,260 --> 02:34:08,160
FFmpeg selbst kompilieren und wirklich

3429
02:34:08,260 --> 02:34:10,160
nur das einbauen, was wir bräuchten.

3430
02:34:10,260 --> 02:34:12,160
Das wäre eine Möglichkeit. Leute, das machen wir.

3431
02:34:12,260 --> 02:34:14,160
Leute, das machen wir.

3432
02:34:14,260 --> 02:34:19,970
Das machen wir. Nicht jetzt. Nicht jetzt.

3433
02:34:20,070 --> 02:34:21,970
Das machen wir.

3434
02:34:22,070 --> 02:34:23,970
Da habe ich schon lange Bock

3435
02:34:24,070 --> 02:34:25,970
drauf, mal FFmpeg selbst zu bauen mit

3436
02:34:26,070 --> 02:34:27,970
genau den Options, die man braucht. Weil wir

3437
02:34:28,070 --> 02:34:29,970
brauchen nicht viel. Wir brauchen RTSP-Support,

3438
02:34:30,070 --> 02:34:31,970
H.264.

3439
02:34:32,070 --> 02:34:33,970
Noch nicht mal H.264-Support.

3440
02:34:33,970 --> 02:34:35,870
Wir decoden ja nichts.

3441
02:34:35,970 --> 02:34:37,870
Wir brauchen eigentlich nur FFmpeg,

3442
02:34:37,970 --> 02:34:39,870
nur mit RTSP-Support.

3443
02:34:39,970 --> 02:34:43,310
Da wird FFmpeg eine ganze Ecke kleiner.

3444
02:34:43,410 --> 02:34:45,310
Wir brauchen keine Filter. Wir brauchen

3445
02:34:45,410 --> 02:34:47,310
nichts. Netzwerk.

3446
02:34:47,410 --> 02:34:49,310
Wir brauchen Netzwerk, RTSP-Support.

3447
02:34:49,410 --> 02:34:51,310
Das machen wir mal.

3448
02:34:51,410 --> 02:34:57,120
Und dann können wir...

3449
02:34:57,220 --> 02:34:59,120
Das ist... Okay, Leute.

3450
02:34:59,220 --> 02:35:01,120
Unsere Mission wird sein,

3451
02:35:01,220 --> 02:35:03,120
für den nächsten Stream,

3452
02:35:03,220 --> 02:35:05,120
Image...

3453
02:35:05,220 --> 02:35:07,120
Image kleiner...

3454
02:35:07,220 --> 02:35:09,120
kleiner 200 Mbps

3455
02:35:09,120 --> 02:35:11,020
Das machen wir im nächsten Stream.

3456
02:35:11,120 --> 02:35:13,020
Image kleiner 200 Mbps

3457
02:35:13,120 --> 02:35:16,520
Es kann sein, dass wir OpenSSL

3458
02:35:16,620 --> 02:35:18,520
brauchen für RTSP. Das ist möglich.

3459
02:35:18,620 --> 02:35:20,520
Was macht FFmpeg?

3460
02:35:20,620 --> 02:35:22,520
FFmpeg verbindet sich hier

3461
02:35:22,620 --> 02:35:24,520
zu Webcams.

3462
02:35:24,620 --> 02:35:26,520
Also ich kann es ja mal starten, dann siehst du es.

3463
02:35:26,620 --> 02:35:28,520
Also Webcam ist jetzt

3464
02:35:28,620 --> 02:35:30,520
ein bisschen das falsche Wort. Webcam ist

3465
02:35:30,620 --> 02:35:32,520
stellvertretend von einem lokalen RTSP-Server.

3466
02:35:32,620 --> 02:35:34,520
Aber im Prinzip Webcam...

3467
02:35:40,990 --> 02:35:42,890
Oh shit.

3468
02:35:42,990 --> 02:35:44,890
Jetzt habe ich irgendwas kaputt gemacht. Warum?

3469
02:35:44,890 --> 02:35:48,610
Da ist es doch.

3470
02:35:48,710 --> 02:35:52,180
Ach ich kack knub.

3471
02:35:52,280 --> 02:35:57,960
Wie geht's?

3472
02:35:58,060 --> 02:36:01,650
Naja. Angular.

3473
02:36:01,750 --> 02:36:03,650
MonkaS. No.

3474
02:36:03,750 --> 02:36:05,650
I'm no Angular...

3475
02:36:05,750 --> 02:36:07,650
expert.

3476
02:36:07,750 --> 02:36:09,650
No frontend expert.

3477
02:36:09,750 --> 02:36:11,650
And especially

3478
02:36:11,750 --> 02:36:13,650
no Angular expert.

3479
02:36:13,750 --> 02:36:18,760
Okay. MV...

3480
02:36:18,860 --> 02:36:20,760
FFmpeg zu FFmpeg.

3481
02:36:20,860 --> 02:36:22,760
So, jetzt sollte es eigentlich funktionieren.

3482
02:36:22,860 --> 02:36:24,760
Ja. Funst.

3483
02:36:24,760 --> 02:36:26,660
Also was das macht

3484
02:36:26,760 --> 02:36:28,660
ist folgendes. Das verbindet sich zum...

3485
02:36:28,760 --> 02:36:30,660
Achso, jetzt habe ich den Kram hier noch auskommentiert. Kann ich ja gar nicht zeigen.

3486
02:36:30,760 --> 02:36:32,660
So, es verbindet sich lokal zu einer

3487
02:36:32,760 --> 02:36:34,660
Webcam.

3488
02:36:34,760 --> 02:36:36,660
Und dann streamt

3489
02:36:36,760 --> 02:36:38,660
es den Webcam-Output in den

3490
02:36:38,760 --> 02:36:40,660
Browser. Und der Trick dabei

3491
02:36:40,760 --> 02:36:42,660
ist, wenn es jetzt funktioniert, wenn ich es nicht irgendwie

3492
02:36:42,760 --> 02:36:44,660
kaputt gemacht habe, habe ich nicht... Also stellvertretend

3493
02:36:44,760 --> 02:36:46,660
für Webcam-Output gibt es halt ein YouTube-Video

3494
02:36:46,760 --> 02:36:48,660
von mir. So.

3495
02:36:48,760 --> 02:36:50,660
Und ohne zu re-encoden.

3496
02:36:50,760 --> 02:36:52,660
Das ist halt das Ding. Also

3497
02:36:52,760 --> 02:36:54,660
der nimmt einfach... Der connectet sich

3498
02:36:54,660 --> 02:36:56,560
per RTSP.

3499
02:36:56,660 --> 02:36:58,560
FFmpeg RTSP connectet er sich zum...

3500
02:36:58,660 --> 02:37:00,560
zur Webcam.

3501
02:37:00,660 --> 02:37:02,560
Liest die einzelnen

3502
02:37:02,660 --> 02:37:04,560
Frames oder ja, Packages

3503
02:37:04,660 --> 02:37:06,560
aus, aus diesem H.264 encodeten

3504
02:37:06,660 --> 02:37:08,560
Stream. Und schickst die 1

3505
02:37:08,660 --> 02:37:10,560
zu 1 weiter per WebRTC

3506
02:37:10,660 --> 02:37:12,560
in den Browser. Und der Browser decodet

3507
02:37:12,660 --> 02:37:14,560
dann. Also das heißt, es ist...

3508
02:37:14,660 --> 02:37:16,560
Braucht nahezu keine CPU-Last auf

3509
02:37:16,660 --> 02:37:18,560
Serverseite. Bloß ein bisschen zum decoden

3510
02:37:18,660 --> 02:37:20,560
im Browser.

3511
02:37:20,660 --> 02:37:22,560
Und wie performant ist das jetzt im Vergleich zu Go?

3512
02:37:22,660 --> 02:37:24,560
Ich habe keine Ahnung.

3513
02:37:24,560 --> 02:37:26,460
Ob es in der Praxis überhaupt einen

3514
02:37:26,560 --> 02:37:28,460
nennenswerten Unterschied macht?

3515
02:37:28,560 --> 02:37:30,460
Höchstwahrscheinlich nicht.

3516
02:37:30,560 --> 02:37:32,460
Höchstwahrscheinlich nicht, weil

3517
02:37:32,560 --> 02:37:34,460
der große Unterschied

3518
02:37:34,560 --> 02:37:36,460
zwischen Rust und Go in dem Fall

3519
02:37:36,560 --> 02:37:38,460
ist, also wo es wirklich richtig krass

3520
02:37:38,560 --> 02:37:40,460
Performance gut machen könnte,

3521
02:37:40,560 --> 02:37:42,460
ist an der Stelle, wo man oft

3522
02:37:42,560 --> 02:37:44,460
callen muss nach Go

3523
02:37:44,560 --> 02:37:46,460
von .NET aus.

3524
02:37:46,560 --> 02:37:48,460
Und so oft call ich nicht. Ich meine, es sieht

3525
02:37:48,560 --> 02:37:50,460
zwar hier viel aus. Ihr seht es hier durchrattern.

3526
02:37:50,560 --> 02:37:52,460
Aber das sind halt

3527
02:37:52,460 --> 02:37:54,360
auch nur alle 16

3528
02:37:54,460 --> 02:37:56,360
Millisekunden. Alle 16 Millisekunden

3529
02:37:56,460 --> 02:38:03,120
ist halt gar nichts.

3530
02:38:03,220 --> 02:38:05,120
Im Browser kann man das nicht seeken. Korrekt.

3531
02:38:05,220 --> 02:38:07,120
Das geht um Live-Webcams.

3532
02:38:07,220 --> 02:38:09,120
Du kannst

3533
02:38:09,220 --> 02:38:11,120
nicht seeken.

3534
02:38:11,220 --> 02:38:13,120
Wieso nicht RustCamp? Weil

3535
02:38:13,220 --> 02:38:15,120
CampChamp. Weil meine Dinger immer Champ

3536
02:38:15,220 --> 02:38:17,120
heißen. Außerdem ist es nichts, was ich

3537
02:38:17,220 --> 02:38:19,120
will, dass irgendjemand verwendet.

3538
02:38:19,220 --> 02:38:21,120
Das ist gebastelt für mich.

3539
02:38:21,220 --> 02:38:23,120
Und ich werde es wahrscheinlich

3540
02:38:23,220 --> 02:38:27,140
bei mir benutzen.

3541
02:38:27,240 --> 02:38:29,140
So, wo wir gerade dabei sind. Lass mal gucken.

3542
02:38:29,140 --> 02:38:31,040
Ich glaube, der 4er-Champ hat immer noch keine Bugs.

3543
02:38:31,140 --> 02:38:33,040
Nee, obviously

3544
02:38:33,140 --> 02:38:35,040
keine neuen Bugs.

3545
02:38:35,140 --> 02:38:37,040
Ist ja auch komplett bugfrei.

3546
02:38:37,140 --> 02:38:39,040
Der 4M-Champ hat

3547
02:38:39,140 --> 02:38:41,040
natürlich auch keine neuen Bugs.

3548
02:38:41,140 --> 02:38:43,040
Okay, alles klar. Weil Bugs

3549
02:38:43,140 --> 02:38:45,040
produzieren wir hier ja nicht.

3550
02:38:45,140 --> 02:38:47,040
Bei uns ist alles immer

3551
02:38:47,140 --> 02:38:49,040
first try

3552
02:38:49,140 --> 02:38:51,040
five head community

3553
02:38:51,140 --> 02:38:53,040
gefederfrei.

3554
02:38:53,140 --> 02:38:57,630
So, Chat.

3555
02:38:57,730 --> 02:38:59,630
Sehr schön,

3556
02:38:59,730 --> 02:39:01,630
dass es dann heute wunderbar funktioniert.

3557
02:39:01,730 --> 02:39:03,630
Nächster Stream.

3558
02:39:03,730 --> 02:39:05,630
Ahead of time compilation.

3559
02:39:05,730 --> 02:39:07,630
FFmpeg selbst kompilieren. Und gucken,

3560
02:39:07,730 --> 02:39:09,630
dass wir das Image unter 200 MB kriegen.

3561
02:39:09,730 --> 02:39:11,630
Also mit AOT sollte es easy

3562
02:39:11,730 --> 02:39:13,630
funktionieren, weil dann ist auch .NET kleiner.

3563
02:39:13,730 --> 02:39:15,630
Und FFmpeg, wenn das geht...

3564
02:39:15,730 --> 02:39:17,630
Also nee, AOT sollte easy...

3565
02:39:17,730 --> 02:39:19,630
So rum. AOT sollte easy funktionieren. Da ist auch

3566
02:39:19,730 --> 02:39:21,630
diese ganze .NET Anwendung kleiner.

3567
02:39:21,730 --> 02:39:23,630
Wir bräuchten theoretisch auch gar kein .NET

3568
02:39:23,730 --> 02:39:25,630
Image mehr. Und

3569
02:39:25,730 --> 02:39:27,630
FFmpeg, wenn das geht,

3570
02:39:27,730 --> 02:39:29,630
kommen wir easy unter 200 MB.

3571
02:39:29,730 --> 02:39:31,630
Wenn das Custom sich...

3572
02:39:31,730 --> 02:39:33,630
Was jetzt gemacht wird, Offstream,

3573
02:39:33,730 --> 02:39:35,630
ich bin heute noch nicht mal eine Runde gelaufen.

3574
02:39:35,730 --> 02:39:42,720
Das werde ich jetzt machen. Vielleicht

3575
02:39:42,820 --> 02:39:44,720
so in dem Dreh, ja. Wobei man halt sagen muss,

3576
02:39:44,820 --> 02:39:46,720
Teile von der .NET

3577
02:39:46,820 --> 02:39:48,720
Runtime müssen ja trotzdem

3578
02:39:48,820 --> 02:39:50,720
rein. Beziehungsweise

3579
02:39:50,820 --> 02:39:52,720
nicht von der Runtime,

3580
02:39:52,820 --> 02:39:54,720
aber von der Standardlibrary trotzdem rein.

3581
02:39:54,820 --> 02:39:56,720
Weil sonst läuft das Zeug ja nicht.

3582
02:39:56,820 --> 02:40:02,400
Also, wir sehen uns, Leute. Bis dann.

3583
02:40:02,500 --> 02:40:04,400
Macht's gut. Ich hoffe, euch hat das Stream gefallen.

3584
02:40:04,500 --> 02:40:06,400
Wenn euch das Stream gefallen hat, dann könnt ihr mir jetzt

3585
02:40:06,500 --> 02:40:08,400
followen, dass ihr

3586
02:40:08,400 --> 02:40:10,400
beim nächsten

3587
02:40:10,500 --> 02:40:12,400
Broadcaststream oder bei was auch immer wir machen,

3588
02:40:12,500 --> 02:40:14,400
wieder mit am Start seid. Würde mich freuen.

3589
02:40:14,500 --> 02:40:16,400
Und schön, dass ihr da gewesen seid.

3590
02:40:16,500 --> 02:40:18,400
Wir sehen uns im nächsten Stream. Bis dann. Macht's gut.

3591
02:40:18,500 --> 02:40:21,780
See you!

3592
02:40:21,880 --> 02:40:23,780
So, so muss das sein.

3593
02:40:23,880 --> 02:40:25,780
Bis dann. Macht's gut. See you.
