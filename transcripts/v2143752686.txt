Ich dachte mir, ich muss mal den Team Sound anklicken.
Das sind jetzt alle woke-ige Leute, IT-Experte, by the way.
Ich habe letztens 10 Minuten gebraucht, bis ich es geschafft habe, einem Zoom-Call zu joinen.
Das hat mich verwirrt.
Machen wir kurz die VM an und Package-Updates, weil Art-Schlienungs, by the way.
Wahrscheinlich schon wieder neue Packages gibt.
Ja, Packages. Jawohl, war doch klar.
Gibt immer was Neues.
Schlienungs.
Webex ist noch mehr Paints-Champion. Ja, das stimmt.
Aber Webex ist ja auch quasi schon eines der Original-Konferenz- und Web-Voice-Chat-Enterprise-Tools.
Das hat man schon benutzt, da gab es Teams nicht.
Ich bin mir nicht mal sicher.
Ich glaube sogar, Webex ist älter als Skype.
Das gab es schon, als ich meine Ausbildung gemacht habe.
Also ich kann mich daran erinnern, wir haben 2008 oder so, haben wir schon Webex-Calls gemacht.
Ich war damals Schrott und ist wahrscheinlich heute immer noch Schrott.
Ich glaube, es gibt keine Webex-Enjoyers.
Was ist eigentlich ein Asa-File?
Asa.
Ja, das dachte ich mir.
Dass das sowas wie ein TAR ist.
Aber, ach, das ist irgendein Elektron.
Simple Asa TAR-like Archive.
Warum kann man nicht einfach TAR benutzen?
Wenn es...
Ah.
Yes.
Hier ist Code-Upgrade geribelt.
Hab ich irgendwas vergessen?
Ja, lass mal kurz gucken, ob es Jetbrain-Updates gibt.
Webex ist Paints-Champion.
Ach, Rider hat es jetzt auch geschafft auf 2024 1.1.
Okay, nice.
Gleich ge-upgraded werden.
Wir hatten zu, also lange bevor es Teams gab, oder Skype for Business, kennt das noch jemand?
Skype for Business, Alter?
So modern sah das damals nicht aus.
Skype for Business und bevor es, und bevor es Skype for Business gab, gab es Lünk, Link, oder wie das heißt.
Ja, genau.
Lünk.
Lünk.
Lünk.
Nee, Lünk hieß das, glaube ich, mit C, ja.
Das haben die dann gekauft.
Was kam am Wahl-O-Mat raus?
Da kam raus, ich soll irgendwelche Bill Gates-Pflanze-uns-5G-Chips-ein-Leute wählen.
Das kenne ich nicht mehr, das kenne ich nicht.
Ja, Skype, Skype, Leute.
Also, wir hatten damals noch...
Jetzt kommen wir da...
Opa Max erzählt vom Krieg.
Ich weiß, wir hatten noch Teamspeak und bevor es Teamspeak gab, kennt ihr noch, ähm, guck, ob das noch jemand kennt, es gab noch zwei weitere Sachen, die früher beliebt waren.
Ventrilo, kennt das jemand noch?
Das war so ein bisschen, so die Konkurrenz zu, zu, zu Teamspeak und dann gab es noch, was sehr beliebt war bei CS-Playern, ganz, ganz früher, äh, ist das irgendwie so?
Nee.
Nicht Rieger.
Äh.
Irgendwie so?
Software?
Nein, das meine ich nicht, Software.
Wusste gar nicht, dass das auf irgendeinem Typ basiert.
Ja, diesen Krempel gab es auch noch.
Ich glaube, das war das aller, aller, allererste Voice...
Nee, das stimmt nicht.
Das stimmt nicht.
Ich glaube, das allererste Voice-Ding, was ich jemals benutzt habe, war NetMeeting, falls das noch jemand kennt.
Das ist auch von Microsoft.
Das ist quasi der...
Ur-Ur-Uropa von Teams, NetMeeting.
Und das war absolut unvorstellbar mit den vielen, ähm, mit den vielen Dingern hier.
Das konntest du vergessen.
Das war...
Ja, das sah eher so aus.
Eher so war die Auflösung damals.
NetMeeting.
Ja.
Das war, das war, das ist wirklich der Ur-Ur-Urgroßvater.
Sein, sein Opa von Teams.
Aber, eins muss man ihnen zugute halten.
Es basierte nicht auf Elektron und war sauschnell gestartet und gestoppt.
Konnte man das mit Modem benutzen?
Klar, natürlich.
So gut wie alles damals war für Modem-Sachen ausgelegt.
Ja.
Ich weiß gar nicht, wie ich da jetzt drauf gekommen bin, ehrlich gesagt.
Ach ja, jetzt, ich weiß wieder, genau.
Also sprich, wir hatten damals noch auf der Arbeit, wie gesagt, zu Zeiten von WebEx und sonst was.
Wir hatten damals eine Videokonferenzanlage.
Das war ein großer CRT-Bildschirm von Tandberg Videokonferenz.
Ich glaube, mittlerweile hat Cisco, genau, mittlerweile hat Cisco die gekauft.
Und das war so ein großer, ja, sowas, so in der Richtung.
Das war so ein großer CRT.
Der, der, der war aber gefühlt nicht so hoch wie der, sondern eher breit.
Das war ein riesig fetter CRT.
Ja.
Ja.
Das war der fetteste CRT, den ich je gesehen habe.
Und vielleicht haben die hier auf Ebay noch ein paar, noch ein paar Bilder von.
Ja.
Also das war gefühlt ein 40 Zoll CRT.
Das war riesengroß.
Das war artig schwer.
Oh, ein Videokonferenzsystem mit CRT, ja.
Also, der Kram ist teilweise schon älter, als man denkt.
Aber, eins muss man sagen, wirklich gut funktioniert.
Hatte es damals auch schon nicht.
Und das, obwohl wir für die damalige Zeit als Internetprovider eine überdurchschnittliche gute Anbindung hatten.
Aber es war laggy as fuck.
Es hatte Aussatz.
Es war einfach Schrott.
Also, Reboot.
Ich muss mal kurz mein Headset entknoten, schnell.
Also, ich kann mich nie daran erinnern, dass BOS irgendwo, oder ich weiß übrigens gar nicht, wie man das korrekt ausspricht.
BOS.
Dass das jemals gehypt wurde.
Ach, meinst du solche...
Jetzt weiß ich, was du meinst.
Du meinst solche Teleshopping-Sendungen, ja.
Das wurde damals angepriesen.
Das war eigentlich auch eine coole Sache für die damalige Zeit.
Ich hab's nie live mitbekommen.
Ich hab mittlerweile mal ein paar Videos drüber geguckt.
Das muss für die Zeit schon echt cool gewesen sein.
Ja, aber das heißt irgendwie anders.
Ja, die Gausen, das war noch so ein Ding bei CRT Bildschirmen.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ich hab's noch ein paar Mal gezeigt, aber weil es hier so viele nicht ganz so alte Boomer wie mich gibt,
für alle, die es noch nicht gesehen haben.
So sah das aus, wenn man sein CRT degaust hat.
Entmagnetisiert oder sowas.
So sah das aus, pass auf.
Wackel, wackel.
Ja, genau.
So, hier.
Jawohl.
Jawoll.
Da wurde degaust damals.
Und so hat man das bestimmt nicht gemacht.
Mit einem fetten Magnet, Alter.
Boah.
Erstmal EMP-Schockwelle durchs ganze Haus hier.
Toaster fällt aus.
Engine running.
Lass mich raten, den Prompt.
Oh, ja.
Dass die Mode passt, erstaunlich gut platziert.
Okay, Reboot erfolgreich.
Passt.
Wir brauchen die VM jetzt nicht.
Ich wollte bloß Package-Update machen.
Aber wir können in der VM mal kurz gucken,
was diese Woche auf Shithub trendet.
Explore.
Aiko heißt BOS jetzt, ja.
Here is what's popular in GitHub today.
Ne, Trending.
Also, was haben wir hier am Start?
Hydra.
Backend.
Was?
Auxilos RS.
Was?
Alternativ was Spanisches.
Keine Ahnung, was das sein soll.
Was bin ich hier sehend?
Ohne es jetzt zu übersetzen.
Was könnten wir hier, was könnten wir hier sehen?
Wir sehen auf jeden Fall eine Node.js-Anwendung für, ah, Emergencies, okay, also für Notfallwarnung oder sowas.
Notfallwarnung, SOS, Notfallwarnungssystem für Spanien oder irgendwie was in der Richtung.
Rate ich jetzt einfach mal.
Wo ist der Übersetzen-Knopf hin?
Ach so, ich bin in Firefox, da gibt es das nicht, gell?
Hier bei Firefox.
Hier bei Firefox.
Was ist denn in Chromium?
Translate Page.
Emergency Response Project.
Rain and, okay, also Hochwasser, Überschwemmung, Flut, Katastrophen, Regen.
Okay, für Spanien.
Vermutlich, oder weiß ich nicht, ob es für Spanien ist.
Ne, für, okay, wo ist das?
Wo ist Rio Grande?
Das klingt eher Südamerika, oder?
Brasilien, ja, ja, Brasilien.
Okay.
Sag mal.
Wieder, wieder was gelernt hier.
IC-Light.
What?
Okay, das ist irgendwelche AI-Image-Processing, würde ich mal sagen.
Kawaii-Logos!
Das müssen wir uns angucken, ganz wichtig.
Zeig mal her.
Ah ja, ja.
Was ist das?
Was kann man damit machen?
Traue ich mich, das aufzumachen hier im Stream?
Read me.
Ist das irgendeine?
Das ist irgendeine Logo-Generator-AI, oder?
Ne.
Okay, ich habe, achso, keine Ahnung, was ich hier sehen werde.
Okay.
Das trennt.
IT-Tools.
WeChat.
June.
Also die Projektbeschreibung lässt manchmal schon etwas zu wünschen übrig.
Keine Ahnung, was, es ist ein Rust-Projekt.
Ich meine, allein schon deswegen hat es 700 Sterne verdient, weil es ein Rust-Projekt ist.
Keine Beschreibung, nix.
Safe Systems Lab.
Moment, das ist eine neue Programmiersprache in Rust.
What?
Nein, das brauchen wir jetzt nicht auch noch.
Das ist irgendein AI-Kryptogramm.
Warum ist denn da so viel Zeug, was ich noch nie gesehen habe in den GitHub-Trends?
Das bringt ja, das ist ja diesmal tatsächlich ganz nice.
Ach, ich weiß warum.
Weil es auf Today steht und nicht auf Weekly.
Vielleicht soll ich es mal öfters auf Today stellen.
Da sieht man auch wenigstens das eine oder andere Neue.
Mal kurz gucken, was ist, wenn man das auf Weekly stellt.
War das diese Rust plus Golang?
Ich habe keine Ahnung, so genau habe ich es mir nicht angeguckt.
Okay, hier gibt es Kolmogorov-Arnold-Netzwerk, Networks.
Obviously, alles klar.
Das ist High-IQ-Shit.
Massive, massive High-IQ.
Eine Alternative zu Multilayered Perceptrons.
Ach du Scheiße.
Da bräuchte ich mal Algorithmen verstehen jetzt.
Whatever.
Alles klar, oder?
Logisch.
Trivial.
Ja, klar.
Okay.
Like NeoFetch, but much faster.
Because written mostly in C.
Ja, da flippt jetzt die Rust-Taskforce aus, wenn sie das hieß.
Übrigens, ich benutze mittlerweile...
By the way, ich use FastFetch, by the way, auch wenn ich NeoFetch eingebe,
weil NeoFetch mittlerweile ein Alias auf FastFetch ist.
GPT Researcher...
Wieso?
Was wieso das ein Alias ist?
Weil NeoFetch nicht mehr weiterentwickelt wird und ich mir aber FastFetch nicht merken möchte vom Namen her.
Ich kann jetzt FastFetch machen oder NeoFetch, das ist halt genau das Gleiche.
Dockploy.
Aha.
AI.
Oh, wann gibt's den Takedown von Nintendo?
Wann gibt's den Takedown von Nintendo?
Ist die Frage, ob das offiziell... ob das Pokémon-Artwork...
Okay, man weiß es nicht. Artwork ist verwendet.
Machst du noch viel mit Terraform?
Ja, fast täglich. Wieso?
Wie strukturierst du deine Terraform, falls...
Oh, meistens nicht so wie...
Nicht so gut, dass ich nach einer Weile noch gut durchblicken würde.
Also die grundsätzliche Struktur, auf die wir uns so...
Wie nennt man das heutzutage so schon?
Committed haben.
Zumindest bei uns im Team, die zwei Leute, die damit was tun, ist Folgendes.
Also, wir haben ein eigenes... so eine eigene Gruppe, also die...
Dort, wo ich arbeite, die haben lokale GitLab-Installationen.
Wir haben eine eigene Gruppe für Terraform-Module.
Dort bauen wir unsere Terraform-Module.
Und dann haben wir für jede Umgebung in einem Projekt ein eigenes... also...
Jedes Produkt... oder jeder Service. Sagen wir mal Service.
Ja, Service ist besser.
Jeder Service hat eine eigene Gruppe im GitLab.
Da drunter hat jede Stage, also jede Umgebung von diesem Service, ein eigenes Repo.
Wo dann alle Terraform-Sachen konfiguriert werden, die eben für diese Stage von diesem Service gebraucht werden.
Und die Terraform-Module selbst, wie gesagt, die sind in diesem Terraform-Modul-Ordner jeweils jedes Modul in einem eigenen Repo drinne.
Und die sind eigentlich...
Die sind zum größten Teil ähnlich strukturiert.
Es gibt, als die üblichen Files von Variablen, Zeug, Gedöns.
Dann gibt es einen Ordner Test.
Das ist insofern ganz nice, weil man kann in diesem Test-Ordner...
Zumindest haben wir das so eingerichtet.
Man kann in diesem Test-Ordner eine Beispiel-Konfiguration für das Terraform-Modul, was sich in dem Repo befindet, ablegen.
Und bei einem Push in einem speziellen Branch...
Läuft dann eine GitLab CI-Pipeline, die in einer Testumgebung das mit den Exempelwerten einmal ausführt.
Das heißt, du weißt auch, dass der ganze Krempel abschließend funktioniert, ohne dass das wirklich einmal extern für irgendein Projekt konfiguriert werden muss.
Das ist so ein Wegwerf-Ding.
Das läuft mit irgendeinem Beispiel-Ding einmal durch, danach wird es wieder destroyed.
Aber du weißt, dass es funktioniert.
Und ansonsten habe ich eigentlich alle meine Terraform-Modul-Files...
Also alle Terraform-Files, die das Modul ausmachen.
Letztendlich, Terraform hat es ja nicht so mit Unterordnern und sonst was.
Terraform nimmt alles absteigend vom aktuellen Verzeichnis, was mit tf endet, als soll ich applyen.
Es sei denn, du strengst das mit irgendwelchen Tags ein.
Ich habe meistens alles an Terraform-Files im Hauptverzeichnis liegen.
Von Config, also alles, was dazu kommt.
Es sei denn, ich include irgendwelche lokalen Sachen.
Dann kommen die in Unterordner.
Also zum Beispiel habe ich mal das Postgres-Modul geforkt.
Das bestand auch nur aus drei Terraform-Dateien oder so.
Weil es irgendeinen Bug hatte und Upstream nicht gefixt bekommen hat.
Also Upstream intern bei uns hat nicht richtig funktioniert.
Dann habe ich mir das in einen Sub-Ordner reinkopiert und habe da die Sachen drin angepasst.
Aber das meiste liegt bei mir einfach beim Terraform-Modul im Main-Verzeichnis.
Und dann halt die Aufteilung je nach Service und Umgebung, wo das included wird.
Ist das dieser komische Editor, der nur für macOS, der super gehypt war,
der nur für macOS zur Verfügung steht, die gesagt haben, sie wollen jetzt auch ein Linux-Release rausbringen, aber das gibt es noch nicht?
Ja, genau.
Ich gucke mir das Ding irgendwann mal an, wenn es ein Linux-Release gibt.
Geht auch ein bisschen für Linux.
Gut, es gibt aber auch genug Editoren, die gehen halt komplett unter Linux.
Nicht nur ein bisschen.
Also ich sehe da jetzt noch nicht den großen Vorteil für mich.
AI.
AI.
Guck mal, wenn ein Betriebssystem schon Ad-Remover braucht, da weißt du, dass irgendwas im Arsch ist.
Okay, nice.
Jetzt wissen wir Bescheid.
Aktuelle Shithub-Trends.
End-Meeting, Mann.
Eine Runde kurz Aquarium entspannen und Tee trinken.
Excellent.
Pogge.
Mir juckt die Nase.
Was ist da los?
Gestern sind so viele Polen gefahren, glaube ich.
Sind ganz schön viele geflogen gestern, als ich mit dem Fahrrad rumgefahren bin.
Diese Pusteblumenpollen sind da, ganz viele weiße Pusteblumendinger.
Wie lange bis Autohersteller Werbung auf die Navis bringen?
Mich würde nicht wundern, wenn es das sogar schon gibt.
Ich meine, wir leben in Zeiten, wo die Sitzheizung im Auto eingebaut ist, aber nur mit Abo freigeschaltet wird.
Wobei, ich glaube, da haben sie ja wieder zurückgerudert, gell?
Aber da wird ausgetestet, was geht.
Da wird ausgetestet, was geht.
Also über kurz oder lang wird das in irgendeiner Form kommen.
Genauso wie, wenn Lootboxen ver...
Staubsauger hat seine Katze.
Okay, den scheint das auch noch toll zu finden.
Homelab Server Room, Oktober Overview.
Okay, jetzt zeig mal her.
Ich finde das immer interessant, was die Leute so bei sich daheim haben.
Guys, Ken from iTech here.
So, today we're gonna be doing an update.
Da siehst du schon gleich wieder, dass das garantiert irgendwo bei den Amis ist oder irgendwo, wo noch Strom billig ist.
Das Rack von dem, wenn ich mir das hier angucke, was ist das da unten?
Das ist ein USV.
Und das ist noch nicht mal komplett voll.
Dieses ganze Zeug, das frisst bestimmt 400 Watt.
Idle, alles zusammen.
Und das geht einfach, also das daneben lassen wir mal alles weg.
Das geht einfach super ins Geld.
Aber bei den Amis ist das, glaube ich, alles weniger ein Problem.
...on my network slash server rack.
And this is for October of 2023.
Okay, wir spulen mal ein bisschen vor.
...APC Smart UPSs.
These are the 1500...
...UPSs.
...just check the status of the UPS.
It also gives me alerts if it goes on battery.
Jetzt macht's piep piep.
...and now looking at our server rack.
Ach so, ich dachte, da hat er den Strom ausgeschaltet.
...at the bottom here...
Eine...
Ach, gucke mal!
Da hatten wir's doch das letzte Mal von.
Ich hab doch das letzte Mal gesagt, es ist enorm schwierig zuzuordnen,
wenn du keine Kommunikation hast zwischen deinem Wechselrahmen und deinem Betriebssystem,
zu wissen, welche Platte ausgefallen ist.
Genau deswegen hat er da vorne die Aufkleber drauf.
Dass der weiß, wenn sein Linux meldet, Festplatte kaputt, SDF ist kaputt,
und dann guckst du im Log nach und siehst, SDF war die mit dieser Seriennummer,
dann weißt du, welche Festplatte was ist.
Das ist nämlich echt ein Nachteil von selbstgebauten Lösungen
im Vergleich zu fertigen Storage-Systemen.
Die Kommunikation zwischen dem...
zwischen deinem Diskrahmen, deinem Backplane und deiner Logik betriebssystemseitig,
die erkennt, wenn eine Platte kaputt ist, dann anzuzeigen, hier, die ist kaputt.
Ja, das ist super schwarze Magie.
Es gibt so ein eigenes Protokoll für die Kommunikation zwischen...
Also wenn dein Rechner überhaupt einen passenden Anschluss dafür hat.
Super schwarze Magie, das Ganze, nennt sich SGPIO.
Und niemand checkt's.
Ich frage mich immer, was die alle mit so vielen Storage-Systemen daheim machen.
Letztens hatten wir auch jemanden angeguckt, der hatte im Keller zwei Racks stehen,
eines komplett mit Netzwerkequipment, beim anderen irgendwie die Hälfte mit Storage.
Was machen die da eigentlich alles?
Ich meine, ich habe ja schon den Eindruck,
dass ich nicht ganz normal bin mit meiner Geschichte.
Ich meine, ich glaube ja schon nicht, dass ich ganz normal bin.
Ups, das ist übrigens falsch.
Ja, mit meinem Technik-Server-Raum.
Ich glaube, ich bin ja schon nicht ganz normal.
Übrigens, das Unified-Zeug habe ich mittlerweile gar nicht mehr.
Aber was die Amis da teilweise bei sich im Keller stehen haben,
ist so übertrieben.
Jetzt mal unabhängig von dem,
wenn es manche Leute nur für Content das machen.
Ich sage mal Techno-Tim oder so,
der jetzt ja irgendwie seine, haben wir letztens ein Video geguckt,
der teilweise Sachen in irgendeine Co-Location gefahren hat und dann whatever.
Das ist dann auch kein Homelab mehr.
Wirst du Marvel Rivals zocken?
Ich weiß weder was, ich weiß nicht mal von der Existenz des Games.
Also wahrscheinlich nicht. Hast du dieses Homelab schon gesehen?
Das Video meine ich doch.
Ja, das meine ich doch.
Genau das meinte ich. Das haben wir letztens geguckt.
Das ist der Typ mit dem, man muss ja sagen, super ordentlich.
Das sieht mehr Rechenzentrum aus wie Rechenzentren, die ich kenne hier.
Aber hier super übertrieben, ey, für daheim.
Da frage ich mich mal, was machen die da eigentlich mit?
Gut, hier hat er auch ein Video, woran er das erklärt.
Ich bin kein großer Marvel- und Superhelden-Fan.
So, das ist nicht das richtige Game für mich.
Hast du schon mal bei einer Bank gearbeitet in Frankfurt am Main?
Nee, wie kommt es darauf?
Ich will die Stromkosten nicht zahlen.
Ich auch nicht.
Ja, wie gesagt, ich glaube schon, dass ich nicht normal bin mit diesem Setup.
Aber was die Amis hier teilweise am Start haben, ist komplett unnormal.
Und ich frage mich halt,
was machen die mit diesem ganzen Storage-Zeug?
Bei mir ist es so aktuell, ich habe
auf meinem, das ist noch ein Gen 10 HP Microserver oder so, das ist nicht der ganz
aktuelle, aber weitem schnell genug, da habe ich SSDs drinne.
Ich habe,
wenn ich das jetzt Mist erzähle,
ich glaube, drei 12TB Platten drinne.
Oder zwei.
Ich glaube, ich weiß es ehrlich gesagt gar nicht.
Ich glaube, ich habe nur einen RAID 1.
Ja, nee, habe ich nicht.
Ach, keine Ahnung.
Ist auch egal, worauf ich raus will.
Was ich eigentlich sagen will ist, mein Backup sieht folgendermaßen aus.
Ich lasse einmal nachts ein Air-Sync auf eine externe USB-Platte laufen.
Fertig.
Und ich frage mich, was machen die mit ihrem Ultra-High-End,
High-End ist das nicht, das sind auch ein bisschen ältere Kiste,
mit ihrem ultraübertriebenen vielen Storage-Dingern immer.
Sind das alte Server, die
mit alten Platten,
die nur zwei Terabyte Kapazität haben.
Und da brauchst du halt einfach so viel,
dass du ungefähr auf das kommst, was ich mit drei 12TB habe.
Und ansonsten, ich habe, das hier oben sieht eher nach irgendeiner SSD-Geschichte oder so aus.
Keine Ahnung, was die damit alles immer treiben.
Backup sollte aber auch extern irgendwo liegen.
Ja, und jetzt?
Du hast recht.
Es gibt ja die schöne 3-2-1-Regel.
Leute, gibt es irgendjemand?
Wer kennt die 3-2-1-Regel bei Backups?
Oder nicht nur bei Storage?
Ihr kennt das?
Okay, wer kennt es nicht so?
Also okay, ich kann es ja mal erklären.
Also 3-2-1-Regel ist damit gemeint.
Du solltest Daten mit, genau, ja, richtig.
Du solltest Daten mit, siehste, gut, dass du schreibst.
Ich hätte es sogar jetzt ein bisschen durcheinander gebracht.
Man soll mindestens dreimal die Daten irgendwo haben.
Also sprich, es zählt auch einmal auf dem Live-System und irgendwie dann halt noch zweimal.
Also du solltest die Daten dreimal irgendwo haben.
Du solltest das auf mindestens zwei unterschiedlichen Medien haben und eine davon Offsite.
Seriously, niemand macht das so richtig.
Und ich habe kein Offsite-Backup.
Ich habe schon ein paar Mal überlegt mit Offsite-Backup.
Ja, gibt ja mittlerweile relativ erschwinglichen Cloud-Speicher.
Könnte man beispielsweise auf irgendwas Encryptedes in der Cloud schieben.
Also das schon Encrypted hochgeladen wird.
Aber habe ich bisher so nicht gemacht.
Jetzt doch, das ist eine Sache tatsächlich so.
Eine Sache ist tatsächlich so.
Mein Passwort-Safe.
Mein Passwort-Safe habe ich
verschlüsselt auf dem USB-Stick.
Also nochmal extra verschlüsselt, den verschlüsseln, Passwort-Safe
auf dem USB-Stick.
Den habe ich tatsächlich noch mal ein bisschen weiter vom Haus weg gelagert.
Sollte wirklich die Hütte irgendwie immer einstürzen.
Man weiß ja nie.
Das ist das Einzige, was ich wirklich unbedingt brauche.
Dass ich überall anders wieder Zugang zu kriege.
Mein KeePass Passwort-Safe.
Auch keine schlechte Idee, kann man machen.
Why not?
Okay, lass mal hier weiterkommen.
And now for our primary storage,
we have a Dell PowerEdge R630.
Das ist eine ziemlich alte Kiste, glaube ich.
R630.
Ich meine, da müssen wir jetzt wissen, welche Generation.
Ja, aber höchstwahrscheinlich eine nicht ganz so aktuelle.
Wobei die gar nicht mal so alt aussieht von den von den Trays hier vorne.
Die alten sahen viel flacher aus.
Aber wahrscheinlich nicht das aktuelle.
Die Amis kaufen sich, glaube ich, viel altes Zeug auf Ebay.
Und Leistung ist ja mehr als ausreichend immer noch.
Und wenn der Stromverbrauch keine Rolle spielt, ja, dann gib ihm.
Guck mal, warum hat der hier oben noch zwei CD-Laufwerke?
Was ist das denn für High IQ Shit?
And a NetApp DS4243.
Oder DVD oder Blu-Ray oder so.
PowerEdge Server, we have our two boot drives off to the left.
Blu-Ray, da ist ein B drauf.
Blu-Ray, da ist ein B drauf, glaube ich.
600 GIG SAS Drives, that we use for our VMs.
600 GIG SAS Drives, ja, da kommt ein bisschen was zusammen.
Wobei, je nachdem mit Raten, so geht da auch schon ein bisschen was weg.
Was kostet eigentlich, ich weiß es nicht, aber bestimmt deutlich billiger als bei uns.
Ich könnte mir vorstellen, dass bei den
Amis manche vielleicht sogar ihren eigenen Generator mit Diesel oder so betreiben.
Storage.
NetApp DS4243.
We have 14 10TB Enterprise Drives that are in a RAID Z1 that is pulled together.
For a 140TB.
Was? Wie viel?
Jetzt habe ich es genau an der falschen Stelle geskippt.
For a 140TB.
140TB.
Okay.
Also heißt es im Endeffekt.
Ja.
Bräuchtest du, bräuchtest du 10?
Bräuchtest du normalerweise 10 14TB Platten?
Könntest du quasi mit 1 HE Kiste abfackeln?
Na, vielleicht nicht ganz.
Na doch, nicht ganz.
2 HE Kiste, könntest du das abfackeln mit 14TB Platten?
Wenn man jetzt halt natürlich nur
2, 3, 3TB Platten drin hat oder so.
Wobei, nee, ich glaube, das stimmt nicht.
63.
Das heißt ja nicht, dass was da vorne draufsteht, dass das auch jetzt was drinnen steckt.
20TB usable storage, raw and then we have 120TB.
Wait a minute.
Was hat er denn laufen?
Hört mal, guck mal.
Warte mal, warte mal.
42, 43.
We have 14 10TB.
Okay, 14 10TB.
Alles klar.
Okay.
We have 14 10TB that are in a RAID-Z1 that is pulled together.
RAID-Z1, das ist doch sowas wie ein RAID-5, oder?
Ja.
Ja, das ist eine schlechte Idee.
10 Stück RAID-5, das ist eine ganz schlechte Idee.
Ich bin mir nicht sicher, ob bei 10 Platten
die Chance, dass es kaputt geht, schon höher ist als die Chance, dass es ganz bleibt.
Aber so ungefähr in dem Dreh dürfte bei RAID-5...
Gut, bei ZFS ist es vielleicht ein bisschen weniger kritisch, weil es
regelmäßig guckt, ob noch alles checksum-mäßig okay ist.
Aber wenn es erst mal kaputt ist, ist es kaputt.
Und dann ist die Chance, dass du beim Recover einen Error hast, enorm hoch.
Es gibt doch RAID-5-Failure-Calculator.
Genau, RAID-5, 10, number...
Wie viel hat er?
Ich habe es jetzt schon wieder vergessen.
14.
Nee, warte mal.
Wie viel waren es jetzt?
Jetki, ihr habt doch besser aufgepasst als ich, oder?
14.
14 10TB-Drives.
Errorless-Rebuild-Success-Chance Null.
Und selbst mit ein bisschen besseren...
Okay, ja, die Chance, dass es kaputt geht, ist höher als dass es ganz bleibt.
Was ist denn so?
Ich bin mir nicht sicher, was die aktuelle
Unrecoverable Read Error Rate ist von aktuellen Platten.
Müssen wir mal gucken.
Lasst uns mal schauen. 14TB.
Ja, was gibt's denn da aktuell hier?
WD, ähm, nee, wie heißen diese Dinge?
Seagate, IronWolf, sowas hier.
Das sind also von denen die ausgewiesenen Nassplatten.
Error Rate.
Da müssen wir irgendwie Datasheet oder so mal gucken.
Okay, Error...
Ja, äh, 15 haben die, okay.
Ich weiß nicht, welche Platten er drin hat, aber 15.
Guckt mal, das ist eines der Gründe, das ist ein richtig gutes Beispiel jetzt.
Das ist eines der Gründe, warum ich immer sage, RAID-5 ist bei großen...
äh, RAID-verbunden, äh, Kamik...
Also es ist, es ist ja fast besser, man lässt ganz...
Naja, nicht gerade, ja.
Doch, es ist besser, man lässt das RAID ganz weg, weil dann ist wenigstens nur
die Daten verloren auf den, auf der Platte, die kaputt geht.
So ist dann, ist alles weg.
Also RAID 5 mit 14 Platten
ist eine super blöde Idee.
Wie man jetzt hier sieht.
Also man hat mit den Standard-NAS-Festplatten bei 14 Drives und 10 Terabyte...
10 Terabyte letztendlich, ne, weil umso größer die Platten sind, umso mehr
Chance ist halt das ein Read-Error, also du hast 75% Chance, dass das Ganze kaputt...
Ne, äh, doch, ne, warte, warte, warte, warte, warte.
Ich bin Pepega im Kopf, äh, äh...
65, fuck, äh, 65% Chance, dass es kaputt geht und 35% Chance nur, dass es fehlerfrei
durchläuft.
RAID 6 ist DEUTLICH besser, aber auch bei solch...
Also eine RAID, ein RAID mit einer großen Plattenanzahl ist in der Regel eigentlich
dazu verdammt, früher oder später kaputt zu gehen.
Deswegen machen die ja auch in großen Storage-Systemen so einen riesen Aufriss.
Und man sieht auch wieder an der Stelle schön, RAID ersetzt kein Backup.
Mal unabhängig davon, von der Geschichte hier, ist RAID und Backup eh was komplett
Weil RAID dient dazu, die Verfügbarkeit deines Storages zu gewährleisten.
Und Backup dient dazu, dass du keine Daten verlierst.
Weil bei einem RAID, wenn du aus Versehen was löscht, ist es weg.
Es ist hoch verfügbar weg.
Und mit Backup ist es noch da.
Besser Backup als RAID.
Ganz ehrlich, im Heimbereich würde ich immer sagen, macht lieber einen Backup, bevor ihr mit Anfang einen
RAID zu bauen.
In der Regel habt ihr im Heimbereich von einem RAID gar nicht mal so viel Backup.
Also mal angenommen, ihr habt eine Kiste mit zwei Laufwerks-Schächten drinne.
Macht lieber einmal nächtlich einen Backup von der einen Platte auf die anderen.
Asynchron, ja.
Anstatt einen RAID 1 zu machen.
Da habt ihr unterm Strich mehr von.
Weil das auch gegen, ups, ich habe das falsche gelöscht, schützt.
Ja, also eine nicht...
Warte.
Habt ihr Glück gehabt?
65% Chance, dass es kaputt geht.
Ich würde sagen, Glück ist aufgebraucht beim nächsten Rebuild.
Ich weiß, so funktioniert random das nicht.
Aber beim nächsten Rebuild.
Ist vorbei.
Wir haben zwei Xeon E5, E4s.
Sind aufgebrochen.
Wir haben zwei 10-Cores, für ein Total von 20 Cores.
Und das sind die Laufwerks-CPUs.
Und für RAM haben wir 240 GB.
Ja, okay, ich fahre mal ein bisschen weiter.
Jetzt habe ich immer noch nicht verstanden, warum man eine Kiste mit zwei Blu-Ray-Laufwerken hat.
Nächster Rebuild, wir haben
meinen kleinen Blu-Ray-Server.
Ja.
Das ist das, was ich benutze, um Blu-Rays zu sehen oder Blu-Rays zu machen.
Und das ist nur der günstige alte AMD.
Leute, wann ist das letzte Mal gewesen, dass ihr euch eine Blu-Ray gekauft habt?
Ich glaube, also PlayStation Games mal außen vor.
Ich rede jetzt von Filmen und sowas, ja.
Ich glaube, ich habe mir noch nie, glaube ich, ich will jetzt nicht hundertprozentig sagen,
ich glaube, ich habe mir noch nie im Leben
einen Film oder irgendwas auf Blu-Ray gekauft.
Außer halt PlayStation Games.
Hätte irgendjemand wirklich gedacht,
Anfang der oder Mitte der 90er,
hätte wirklich, Anfang bis Mitte der 90er, hätte wirklich mal
jemand gedacht, dass Schallplatten, CDs und MP3-Player und das ganze Zeug quasi
überleben?
Also ich nicht.
Aber es ist heute so.
Die Leute kaufen lieber wieder Schallplatten, weil also die Leute, die
gerne was im Regal stehen haben, ja, die kaufen lieber Schallplatten als CDs,
um sich das dann anzugucken.
Und MP3-Player hat auch niemand mehr.
Jeder hat heute ein Smartphone, was auch MP3s abspielen kann und streamt sich die Musik da drauf.
Also Leute, die es einfach nur konsumieren wollen, die machen das über einen Streaming-Service online.
Whatever.
Und niemand kauft mehr CDs.
Schallplatten haben einen besonderen Klang.
Ja, vor allem, wenn du sie, wenn du sie auflegst, dann macht es erst mal
und dann geht's los.
Qualität von Blu-Ray ist schon besser als 4K-Streaming, das liegt an der Bitrate.
Ich bin eh teilweise, wenn ich mir das mal Debug-mäßig angucke, schockiert.
Muss man gleich auf Twitter posten.
Sind alle ja immer nur noch schockiert, wie mies die Bitrate ist von
Streaming. Streaming-Bitrate muss nicht kacke sein, ist aber oftmals kacke.
Mal gucken, ob er es sagt.
Ja, er hat dafür gesagt, dass das sind Blu-Ray-Laufwerke, dass er damit Blu-Rays
watcht und Blu-Rays createt. Wie auch immer das zu deuten ist, ja.
In Graphics
and we have the 2LG Blu-Ray-Drives.
Okay, and then the next server here.
So this is a Dell PowerEdge.
R730.
Ich glaube, der hat einmal eBay leer gekauft.
That is a VMware ESXi host.
ESX, okay.
So in this we have a boot drive to the left.
Okay, wenn das da unten, wenn das da unten nur Storage ist und das ein ESX.
But why? Weil's geht, weil's Strom nichts kostet.
We have a boot drive to the left.
Was ist denn das daneben?
And we have our...
Ich spule mal ein bisschen vor.
Ja, ich wurscht.
So, Provider Kabelmodem.
Switch-Stells, oh, guck mal hier.
Der hat auch so ein schönes, nice Keystone-Patch-Panel mit LC-Stecker hier vorne
für Glasfaser hinten, R45-Stecker. Die Dinger sind nice.
So eins habe ich auch.
Das mag ich, diese Sorte von Panels.
Äh.
Going up top, we are now at our network layer.
So we have our modem for Spectrum.
And then our...
Was ist denn das, was er da hat?
Ist das, ey, das ist irgend so ein UniFi-Ding, oder?
Die Amis stehen da voll drauf auf dieses UniFi-Zeug.
Also ich habe auch ein Ubiquiti-Switch, allerdings kein UniFi-Switch, sondern ein Edge-Switch ES16XG.
Die Chance.
Die Chance vertan, in XD zu nennen.
Das ist ein 10-Gigabit-Switch, den habe ich schon seit Jahren.
And then our Cloud-Key in the back, which is these are.
Okay, ich spule mal vor.
Nicht so spannend.
Uh, this is just an old Dell-Altiplex-Server that used to run Blue-Virus.
Uh, which is a cheap, unmanaged, uh,
Trenet 2.5-Gig-Switch.
Ja, wahrscheinlich für PoE, gehe ich mal von aus.
Currently rarely being used.
Nochmal Blu-Ray-Stells.
Was treibt der denn da?
Hat er früher, hat er früher Sicherheits-Kopien angefertigt für andere Leute, etwa auf Blu-Ray?
Four cores and eight threads by primary WAN as Spectrum.
Cool business.
Okay, natürlich brauchst du da auch logischerweise zwei Internet-Anschlüsse für die Ausfall-Sicherheit.
Klar.
And that gives us about a hundred, a hundred down and twenty to thirty or so up.
Chris,
ich frage mich auch immer, wozu die das haben.
Ich glaube, das ist bei vielen einfach Hobby.
Und die haben da Spaß dran.
Die Hardware ist ja auch nicht die neueste.
Also da ist bestimmt auch viel, ah cool, ich habe ein cooles Angebot auf eBay.
Ich kaufe das einfach mal und dann sich freuen, dass man was gefunden hat.
Okay, hier ist ein HiFi-Stells am Start.
Das geht wahrscheinlich durchs ganze Haus durch.
Ja.
Upstairs, outside, Küche, Küche.
Sonos Amps that control the music.
Ist das nicht total unpraktisch, wenn das im Keller steht?
Da kommt man überhaupt nicht richtig dran.
Sind das Schallplatten hier hinten?
Ja, guck mal.
Alter, CD bzw.
DVD, Blu-Ray-Rollinge, wie lange habe ich das nicht mehr gesehen, Mann?
Früher war das normal.
Früher hatte jeder so eine Spindel CD-RW und CD, ähm, wie heißt ein CD, CDR?
Was gab es da?
CDRW, CDR, also das eine war nur einfach beschreibbar, das andere war mehrfach beschreibbar.
Rumstehen, so eine Spindel hatte, hatte jeder früher auf dem Tisch.
Mittlerweile, ich habe nicht mal mehr ein optisches Laufwerk
im Rechner. Habt ihr noch ein optisches Laufwerk im Rechner?
Also ich glaube legit, die letzten drei oder vier Rechner-Generationen, die ich hatte,
die hatten alle kein optisches Laufwerk mehr.
Nicht mal per USB, nix.
Das einzige, was ich habe, ist, ich habe einen SD-Kartenleser per USB dran, weil ich
das brauche, wenn ich, wenn ich einen Raspberry Pi flashen will oder so.
Nix. Die ganzen Gehäuse vorne, die haben zwar alle noch Einschübe, aber die sind
einfach, einfach zu, ja, oder aber Meshified, wie bei dem neuen Gehäuse.
Aber da mit Staubfilter.
Ja, also was die damit immer alle machen, verstehe ich nicht so genau.
Mit Budget, das gucken wir uns nicht jetzt an, sondern ich finde, ich finde diese
Homelab-Videos immer spannend. Erstens, weil ich es immer
spannend finde, was die Leute so bei sich daheim stehen haben, daheim stehen haben.
Und was ich eigentlich noch viel interessanter finde, leider sagt da kaum
einer was zu, was er denn letztendlich damit macht.
What's running on my Homelab?
Okay, er erklärt uns das.
Okay, Techno Tim.
Wir wissen, er macht in seinem Homelab
eigentlich nix.
Außer sich um sein Homelab zu kümmern und ein Dashboard, sorry, ein Dashboard hat er
laufen, ja, ein Dashboard, aber ansonsten ist es Verwaltung, um die Verwaltung zu
verwalten, der Verwaltung. Wobei hat er nicht, hat er nicht sein Homelab letztens
auch co-located in zu irgendeinem Anbieter?
Ja, Leute, das gucken wir uns nicht an das Video, aber das wurde mir vorher empfohlen
und ich dachte mir, ich muss euch das mal zeigen.
Das hätte ich ja auch nicht gedacht, dass ich so was mal auf YouTube sehe.
Guck mal, lest euch mal diesen Titel durch.
Neofetch has been discontinued.
What's the alternative?
Und dann sitzt da die übelste Oma,
die uns jetzt erklärt Archly looks by the way oder so.
Da hätte ich im Leben nicht mit gerechnet, dass ich ein Video aufmache.
Guck mal,
wo uns die Oma erklärt, dass, dass man jetzt Fast Fetch verwendet anstatt Neofetch.
Ich weiß nicht, ich finde das nice, ja.
Da hätte ich bloß, da hätte ich im Leben nicht mit,
jetzt mal ernsthaft, hättet ihr damit gerechnet, wenn ihr dieses Video aufmacht,
dass euch hier die Oma begrüßt?
Im Leben hätte ich damit nicht gerechnet.
Die macht das schon mega lange, echt?
Alter, 14 Jahre.
Windows 7 Startup.
What the hell?
Aber ja, zwischenzeitlich hat die aufgehört, oder?
Ja, nee, hab ich nicht mitbekommen.
Die macht, ja, die macht das fast schon länger als ich.
Mein Channel ist 2010 entstanden.
Aber das ist, da war ich, da war ich schon echt überrascht.
Ist aber nice, oder?
Ich finde, ich finde das cool.
Die Oma am Start ist.
Ich hab Koffee, Alter.
Warum denn das?
Zu wenig getrunken gestern, glaube ich.
Ich hab zwar über einen Liter, eineinhalb Liter
gestern Mittag gesoffen.
Budget. So, was ist da Budget?
Hey guys, it's Mike.
Moin, Mike.
Aber das hat man ja auch wieder beim Fahrradfahren rausgeschwitzt.
Ja, magst du ans Trinken erinnern?
Excellent, hat funktioniert.
Ich hab meinen Tee schon halb leer.
So, was haben wir denn? Was können wir uns sonst noch angucken?
Elon. Never use Git Pull.
Das ist so ein Ding.
Wenn einer sagt, man soll never, never was benutzen, dann ist das never die richtige Antwort.
Okay, da ist ein Sternchen hinten dran.
Lass mal prädikten, was er uns sagen will.
Er möchte uns wahrscheinlich sagen, dass Git Pull alleine doof ist.
Da gebe ich ihm recht.
Git Pull alleine sorgt dann für so doofe Meldungen wie
Merge Master into Master und so ein Blödsinn.
Man sollte
eventuell Git Pull minus minus Rebase machen, dann passiert das nicht.
Sicherstellen, dass es ein Fast Forward Merge ist, wenn man das, wenn man blickt, was das ist.
Man kann alternativ auch stashen, pullen,
applyen, aber ein Rebase Pull ist wahrscheinlich die bessere, die beste Variante.
Wenn man das im gleichen Branch gemacht hat.
Das einfachste ist natürlich, einfach einen Feature Branch aufzumachen.
Wenn man nicht zu faul ist,
was in Git nichts kostet und
easy gemacht ist, Feature Branch aufmachen.
Dann einmal das
pullen und dann rein merchen.
Mal gucken, warum. Mal gucken, warum wir kein Git Pull verwenden sollen.
So you just finished writing some code.
You commit it, you push it and then rejected.
Of course, what happened here is that someone else, let's call them John, was
working on the same branch as you. You both started out.
Deswegen hab also
in der letzten Firma, wo ich gearbeitet habe, da wo ich mir das aussuchen durfte, wie die Leute
das benennen sollen, haben wir gesagt, wir nehmen das Kürzel vor Feature, vor
Branch Namen. Ja, da hatte ich dann so was wie Max Slash.
Also wenn das mal ein Kürzel wäre.
Max Slash Keck W Feature.
Da ist man sich nicht in die Quere gekommen.
Das fand ich eigentlich eine sehr nice Regelung.
Same commit as you wrote your code, making your local commit.
John was also working on the code, making his own commit.
However, John pushed his code first to the remote.
Das Problem ist, wenn du jetzt einfach geht
pull machst und die Changes vertragen sich, dann kriegst du so eine richtig dumme
Merge Comet Message, die mich immer richtig abgefuckt hat, wenn ich die gesehen habe.
Da kommt dann so was wie Merge Master into Master.
Das ist so eine Message, die braucht niemand.
Die hat keinen Informations Mehrwert mehr größeren Gehalt.
Da kann man sich sparen.
Ich bin mittlerweile Fan von Git Pull minus minus Rebase, um das Ganze zu.
Umgehen.
Und wenn es Konflikte gibt, gibt es
die E.
Sample to GitHub.
So then when you try to push your commit, it gets rejected.
Ja, und warum das nicht passiert, wenn hier nichts beziehungsweise wenn remote
nicht passiert ist, liegt daran, weil Git dann einen fast forward Merge machen kann.
Ein fast forward Merge ist kein Merge, sondern einfach nur, dass der aktuelle, um
jetzt mal alle Leute zu verwirren, der aktuelle Head Pointer von Git wird quasi
umgebogen auf die auf das neue Comet, ohne wirklich.
Zwei Comments zu merchen, weil es ja dazwischen nichts passiert.
Remote Branch ist.
Wir haben jetzt sicherlich alle verstanden
of your local branch.
This means that the remote branch has
new commits that your local branch doesn't have yet.
But there is an easy fix.
You just do a Git Pull to get.
Gibt es denn ein Git Pull nur um Daten des
letzten Comments und nicht die ganze History zu bekommen, was unter Umständen lange dauern kann?
Ja, gibt es allerdings kein Pull, sondern das musst du bei einem Clown angeben.
Das ist dann minus minus.
Depth oder so weiß ich aus dem Kopf gerade nicht.
Vielleicht geht das auch bei Git Pull.
Aber bei einem Clown geht es auf jeden Fall.
Da kannst du angeben, wie weit der zurück die History pullen soll.
Ich glaube, es ist ja, das kannst du bei Clown angeben.
Die einfachste Variante, um nachzugucken, ob
es Remote Changes gibt, ohne zu pullen, ist Git Fetch.
Mit Git Fetch guckst du nach, ob es Neuigkeiten gibt auf einem deiner Remotes.
Relativ gibst du das Remote an,
wo du nachgucken willst und dann ändert das allerdings lokal nichts.
Man darf nicht vergessen, viele Git
Commands sind quasi auch nur ein Skript um weitere Git Commands.
Also ein Git Pull ist im Endeffekt ein Fetch gefolgt von einem Merge.
Fetch zum Nachgucken, was es Remote gibt und das dann merchen mit lokal.
New Changes and then.
Genau.
Actually, here is why you shouldn't do this.
When you do a Git Pull in this situation, you're actually creating a fresh Merge
Commit. You see, what happens is that your Commit and John's Commit both had the same
ancestor. So by default, Git Pull will merge the two new Commits together by
creating an entirely new Commit. Und das ist doof.
Das ist doof, weil die Dinge automatisch eine unsinnige.
Wenn man danach sucht, findet man da auch total viel.
Merge Master into Master findet man dann.
Merge Master into Master.
Da findet man.
Da findet man auch ganz viel.
Wenn man darauf GitHub sucht, ist das voll und das kommt daher.
If everybody on the team does this over time, you'll just end up with a confusing
Richtig unsinnig.
With a bunch of extra useless Merge Commits in it.
Und weil das, weil das manche Leute nicht kennen, was was geht.
Ich muss mal in irgendein Git Repo rein.
Am besten in irgendeinem Git Repo, was nicht von mir ist.
Sieht hier irgendwie was aus nach einem, was nicht.
Mock sich von mir.
Warum ich das mag.
Was ist denn eigentlich hier mit meiner.
Das scheint nicht das richtige Symbol zu sein.
Man kann man kann sagen geht es.
Es ist Krass.
Nee.
Oh fuck.
Wie ging das noch mal?
Lock Minus Minus Krass.
Genau.
Da kann man sich tatsächlich so einen.
Die History malen lassen.
Mit Woher kommen einzelne Commits?
Guck. Hier ist das Base Commit.
Hier wurde wurde das quasi gefolgt.
Hier wurde es wieder zusammen gemerkt mit diesem Commit.
Es ist manchmal ganz nice.
Es gibt auch grafische Tools dazu.
Aber wenn man einfach nur mal so eine kleine Übersicht braucht, dann ist das hier echt nice.
Doch Rebase macht es insofern besser, weil ein Rebase kein Merge ist.
Dann siehst du das hier nicht.
Wobei manchmal will man ja einen Merge haben.
Also wenn jemand beispielsweise wirklich hier absichtlich einen Branch aufmacht für
ein neues Feature, dann finde ich es sehr sinnvoll zu sagen.
Ja, das wird jetzt hier gemerged.
Dann finde ich es
aussagekräftig zu sagen Okay, dann führt hier wirklich zwei Sachen zusammen.
Das finde ich auch okay.
Was ich aber auch blöd finde, ist das, was er hier gerade beschreibt.
Alle fuddeln auf Master rum und dann hast du nur so blöde Commits wie Merge Master
into Master. Das ist halt unsinnig.
Das braucht keiner.
This makes it really hard to navigate the Commit History.
For example, when you're looking for a specific Commit in which a certain feature
was worked on.
Or a bug was fixed.
Because then you have to sift through all those useless Merge Commits first.
Yep, Clock, sehe ich auch so.
What you usually want to do instead is to just put your Commit after the other
person's Commit.
Das, das passiert.
Wenn du Git Pull minus minus Rebase machst,
sofern es keine Merge Commits, keine Merge Konflikte gibt, keine Konflikte gibt,
kann man bei einem Rebase noch Merge Konflikt sagen, aber auch Rebase Konflikt.
Und hier sieht man auch schön, was passiert, wenn es im Remote Master keinen weiteren
Commit gegeben hat, weil dann macht Git einfach direkt das hier, also ohne C,
schiebt einfach den Pointer um auf euren und gut ist, ohne dass überhaupt ein Merge passiert.
The other person's Commit.
That way the Commit History will stay linear and clean.
So instead of using the regular Git Pull,
which creates the extra Merge Commit, use Git Pull Rebase.
Passiert so einmal alle fünf Minuten.
Was denn? Was ist das hier?
Ein Wort von mir.
Die History malen lassen mit Woher kommen einzelne Commits?
Guck hier.
Ja, die History malen lassen mit.
Ah, ich habe es gehört.
Das ist Windows Shit.
Ich verstehe das nicht.
Manchmal ist das, manchmal nicht.
Die letzten Streams waren es mal wieder nicht.
Was ist denn das schon wieder?
Okay, wir testen was.
Ich glaube, ich weiß, woran es liegt.
Wenn ich, wenn ich hier Browser reloaden ist, ist es jetzt wieder beim Browser reloaden.
Das Debug hatte ich schon mal, dass beim Browser reloaden die.
Das Audio gespackt hat.
Ja, keine Ahnung.
Wartet mal, ich mache mal hier mal muten und so.
Ja, keine Ahnung.
Ich glaube, ich brauche echt mal ordentliches neues Verlängerungskabel.
Zu meinem Audio Interface.
Ja, machen wir jetzt erst mal weiter für heute.
Okay, weiter.
What does that do?
Let's rewind first to the initial situation before we did the regular git pull.
All right.
So, all right.
Git pull rebase will take your commit, temporarily put it to the side.
Do the git pull.
Ah ja, wir haben jetzt doch git pull minus minus rebase.
Das ist das, was ich von Anfang an gesagt habe.
Easy.
Siehste?
Wir haben jetzt das Video sparen können.
Einfach, einfach das machen, was der Max sagt.
Easy. So, so muss das sein.
Easy as fuck.
Even works if you or the other person did multiple commits.
But wait, I hear you say, what about merge conflicts?
Das ist kein Problem, das hast du bei rebase genauso.
What if the changes the other person made and my changes are in conflict?
Da gibt es einen Konflikt.
When you do a regular git pull,
you just get a merge conflict.
Ja, jetzt kriegst du einen rebase-Konflikt oder, naja, wie auch immer man das nennen mag.
When you do a git pull rebase, you of course still can get merge-Konflikt.
Ja, klar.
In that case, git will tell you though.
Then you can just undo the entire pull with a git rebase abort.
Ja.
This will undo everything and restore your local repo to the state it was in before you pulled.
Then you can just pull normally with the regular git pull and fix the merge
conflict as you usually would.
So to summarize, when I work on a project.
Okay, das ist tatsächlich ein Video.
Ich gebe dem recht.
Ich finde, normales git pull ist in dem Fall,
wenn man nicht weiß, was man da so treibt, sollte man es tatsächlich lassen.
Git pull minus minus rebase ist die bessere Variante.
Ja, man kann natürlich weiterhin git pull verwenden, wenn man beispielsweise einen
repo hat, sagen wir mal, wir haben jetzt irgendeinen Linux-Sourcecode ausgecheckt und wir möchten einfach
nur einen neuen Stand pullen, ohne dass wir da drin aktiv selbst was machen.
Dann kannst du einfach ganz normal pullen, dann passiert auch nix.
Ja, gebe ich ihm recht.
Tatsächlich eines dieser Videos mal, wo einer sagt, man soll es nicht machen, wo
ich da auch am Ende sage, das ist sinnig.
Kann man machen.
Aber ein rebase fixen ist, also merge-Konflikte in einem rebase fixen, ist meistens deutlich ekliger,
als Konflikte, also je nachdem, wie viele Comments da geht, als Konflikte in einem
Merge zu fixen, weil ein rebase ist im Prinzip eine Schleife, die
alle deine Comments in der richtigen Reihenfolge nacheinander applied.
Das heißt, wenn du Pech hast, kriegst du mehrere Merge-Konflikte
mit alten Ständen.
Also du hast fünf Comments und die werden nach und nach applied.
Dann kann es sein, dass das erste Comet überhaupt nicht die endgültige Version ist,
aber jetzt den Merge-Konflikt verursacht.
Da musst du den fixen, das nächste musst du fixen.
Deswegen ist das tatsächlich, was er vorgeschlagen hat, gar nicht so blöd.
Nämlich es erst mal zu pullen und dann den Merge zu machen.
Dann musst du die Sätze fixen.
Dann kannst du die Sachen nur in der endgültigen Variante fixen.
Also beim Rebase hast du potenziell mehr
Konflikte, weil es ganz viele Comments nacheinander sind, als bei einem Merge, wo
es nur mit dem finalen Stand gemerged wird.
Also macht durchaus schon Sinn.
Je nachdem, wie umfangreich das ist, das abzubrechen.
Oh ne, das kann ich mir jetzt nicht angucken.
Das ist ja schon wieder TechnoTim.
Building my Ultimate All-in-One-Homelapse-Server.
Wait a minute! Hat er nicht vor zwei Wochen
schon noch seine Server ausgelagert in irgendeine Co-Location?
Warum bildet er jetzt schon wieder einen All-in-One-Homelapse-Server?
What the fuck?
Okay, ich get it.
Es ist YouTube-Content, ja.
Es ist wahrscheinlich sponsort.
Homelapse?
Mit einer 4090. Ist das eine 4090?
Ist das eine 4090?
Wo sah man die Grafikkarte?
Vergessen.
Was ist denn da drinne?
But why?
Ah ja, die guten Oktur-Lüfter.
Beste.
Ja, was ist denn das?
And it's like also the few top builds.
Okay, keine Ahnung, ich weiß nicht, was das für eine Grafikkarte ist.
Ich find's nicht.
Best OS for Programming.
Ah, ein Fire-Ship-Video. Nice.
Ja, aber das Zeug kostet auch ein Schweinegeld.
Das ist doch sicherlich nicht alles gesponsort.
Das würde man ja auch sehen in dem Video.
Also ich weiß, ich glaube, das ist echt einfach nur riesengroßes Hobby.
Aber ich verstehe, das ist so übertrieben schon.
Ich kann der Sache nicht ganz folgen.
Lass uns mal angucken, was Fire-Ship sagt.
Was Fire-Ship sagt, was das beste OS ist.
Also für mich ist es relativ klar.
Für mich ist das beste OS zum Programmieren Linux.
Arch Linux, by the way.
Aber für mich ist die beste Kombination tatsächlich Windows plus Linux gleichzeitig.
Für alles, was Windows gut kann.
Windows für alles, was Linux gut kann.
Linux und nicht NetMeeting.
Ja, das ist so meine, meine Philosophie.
Ich würde auch ein Mac verwenden, wenn es sein muss.
Mac ist eigentlich ein ganz guter Kompromiss aus, sagen wir mal so Linux,
Unix-artig genug, um nicht zu nerven und ja, eine schöne einheitliche Oberfläche für alle,
die das brauchen und mögen.
Bei Mac ist halt nicht so viel mit.
Ich passe mein Mac an, wie ich will.
Mac OS ist Mac OS.
Da kannst du bei weitem nicht so viel customizen wie hier beispielsweise
mit einem Archilux und i3.
Aber es gibt ja auch genug, die wollen das nicht.
Ja, und hauptsächlich unter Windows entwickeln ist Paintschamp.
Keine Ahnung, wer das freiwillig macht.
Kriegst du Rissanfälle.
Ich muss auf der Arbeit ein Windows Laptop benutzen.
Das fuckt mich schon genug ab.
Glücklicherweise mache ich damit nicht viel
außer mich auf Linux einzuloggen.
Jobs.
Please, please allow me to interject for a moment.
It's not Linux.
It's GNU plus Linux.
Gates or Torvalds.
In today's video, we'll look at the differences between Mac,
Windows and Linux from the perspective of a software engineer.
For more than a decade,
I've enjoyed the pleasure and pain of all three of these operating systems
and have realized that FreeBSD is superior to all of them.
But I don't want that secret to get out.
Many years ago, when I got my first real job,
I was assigned a Windows machine and got introduced to beautiful technologies
like Java and Oracle Database.
From my cubicle, I used these tools to build crappy websites
for a failing Fortune 500 company.
It sucked, but luckily through divine intervention,
I was fired from that job and started doing remote work full time
with my brand new MacBook Pro.
This bad boy had a dual core CPU and a full gigabyte of RAM.
I traveled around the country from Starbucks to Starbucks
drinking soy lattes while developing Ruby on Rails applications on my MacBook.
But eventually I realized that the real hardcore developers were using Linux.
As fate would have it,
my MacBook Pro stopped working right on schedule exactly two years after I bought it.
So that's when I built my first PC from scratch and installed Ubuntu.
Around this time, Richard Stallman called it spyware.
So I experimented with a bunch of other
distros, but have mostly stuck with Debian.
What I'm referring to as Linux is in fact GNU Linux.
Or as I've recently taken a coin in it, GNU plus Linux.
Das war klar, dass er das einbauen muss.
Allow me to interpret.
Haben wir nicht sogar irgendein Kommando dafür?
Manjaro mit i3, what the fuck?
Das ist outdated as fuck, was hier steht.
Das muss, müssen wir anpassen.
Ich weiß nicht, wie man das anpasst, aber das ist falsch.
Ich benutze nicht Manjaro mit i3.
Moment, ich weiß nicht mal, wie der Bot heißt, den ich da benutze.
Nightbot, oder?
Moment, Nightbot, das muss ich mal kurz ändern.
Okay, excellent.
Die Modgis wissen ja deutlich besser Bescheid als ich.
Linux.
The GNU plus Linux system.
Linux is not an operating system
to itself, but rather another free component of a fully functioning GNU
system made useful by the GNU core libs, shell utilities and vital system
components comprising a full OS as defined by POSIX.
What I've learned over the years is that there's no perfect OS.
Like today, I use Windows, but use the Windows subsystem for Linux for
development and always keep a MacBook Pro along with myself.
Ich bin kein großer WSL-Enjoyer.
Ski-Goggles available for traveling.
Now, when using three different operating systems, it's important to have an IDE
that runs on all of them.
And there's nothing better than JetBrains IDEs, the sponsor of today's video.
Es ist Sponsor, okay.
Ich muss nämlich sagen, ich gebe ihm voll und ganz recht, obwohl das ein Sponsorship
ist und obwohl ich nicht gesponsert bin, jetzt hier das zu sagen.
Ja, gebe ich ihm recht.
Die JetBrains Dinger sind echt nice.
Der einzige Nachteil bei JetBrains Sachen ist, zwei Nachteile, zwei, zwei Nachteile.
Das erste ist, es kostet was.
Haken wir das mal ab.
Das erste ist, die sind nicht gerade schmal, die IDEs.
Also wenn man jetzt sagt, ey, ich benutze Rider für Backend.
Ich habe Goland offen, weil ich noch was in Go basteln will.
Plus ich habe vielleicht noch Visual Studio Code für Frontend oder gar WebStorm.
Manche benutzen ja WebStorm dafür offen.
Das kann schon mal 8 GB RAM fressen.
Nur deine IDEs.
Also die sind nicht gerade schmal.
Ja, und der weitere Negativpunkt ist ja, die kosten was.
Wobei das auch nicht so ganz stimmt.
Manche davon kannst du kostenlos verwenden.
IntelliJ ist kostenlos und PyCharm ist kostenlos und
Fleet ist kostenlos, wobei ich niemand kenne, der ernsthaft Fleet verwendet.
Was? Geht das jetzt?
Aber da funktioniert doch die Hälfte nicht, oder?
Lass mal kurz checken.
Z, so sagen wir das, Editor, Editor.
Aha, okay.
Chatgib, das muss man mal kurz ausprobieren.
Snapshot, take Snapshot, Snapshot mal von der Kiste.
Habe ich jetzt aus wie ein abgebrochener Snapshot?
Pet Editor.
Ich würde sagen, wir nehmen das.
Das ist jetzt ein bisschen Side-Tracken, gebe ich zu, aber.
013.4, okay, Ups.
Installieren wir mal, mal gucken.
Ja.
Ich ja, ich würde immer noch, ich würde immer einen Snapshot machen.
Valken Tools, hoffentlich läuft das in der Form überhaupt das Ding.
Okay.
Sinne.
Rust, natürlich.
Erst mal Blazingly Fast.
Was in Rust nicht Blazingly Fast ist, sind tatsächlich die Build und Compile Times.
Bis mal was fertig ist.
Das Web Assembly?
What? Darwin?
Okay, ich lasse ihn einfach, ich lasse ihn einfach mal machen.
Okay, da wird jetzt erst mal das halbe Internet runtergeladen.
Machen wir mal nebenbei.
Gucken wir mal, wie die Auslastung so ist.
Da oben sieht man es zwar auch, aber Hardtop ist ein bisschen außerhalb der Kräfte.
Kauf halt einen größeren Computer.
Ich würde sagen, ich würde sagen, für eine VM sind 8 CPU Cores und
24 GB RAM mehr als genug.
Das ist mehr als manche in ihrem echten Rechner haben.
Miley Search.
Max, verwenden wir das nicht auch?
Oder was heißt wir?
Ich mache ja da gar nichts.
Verwenden wir das nicht auch im Archiv?
Ja, also noch wird erst mal das halbe Internet runtergeladen.
Gerade Jamel.
Sag mal, nachdem wir jetzt wissen, dass Jason eigentlich Jean-Saul heißt.
Wie heißt denn dann Jamel?
Ja, das ist nicht so viel mit Linux Build.
Was? Was hat er?
Was hat er für Probleme?
Cannot be built because it requires Rust C175 or newer.
Ja, aber der hat doch Rust gerade installiert, oder?
Rust Version.
Aha.
Rust Up.
Ich habe anscheinend nicht die aktuellste Updates Stable.
Mein Rust, mein Rust ist zu outdated, overrated,
jebaited.
Okay, ist es jetzt besser?
Okay, noch mal.
Machen wir das noch mal.
Yes.
Okay.
Wow.
Boah.
Das ist mal CPU-Auslastung.
Beim Compilen.
Einfach mal komplett ausgelastet.
Acht CPU-Kerne.
Noch, weil er viel parallel machen kann.
Ja, da geht der Stromverbrauch gerade richtig steil.
Brauche ich wahrscheinlich so viel wie die Amis mit ihrem Rack im Idle.
Moin, arbeitet jemand mit Excel VBA?
Oh ne, großen Bogen mache ich da drumherum.
Aber bestimmt gibt es die einen oder anderen, die das noch
usen müssen oder vielleicht sogar gerne benutzen.
Ist VBA nicht outdated?
Haben die da jetzt nicht irgendwie vorderst durch was zu ersetzen?
Ich habe da letztens mal was gelesen.
Aber das wird nicht passieren so schnell, weil VBA noch überall ist.
Man kann Python in Excel benutzen.
Nice. Die Leute sind eh total gestört.
Es gibt ja auch einen, der einen Ray Tracer gebaut hat in Excel.
Oh, ist die VM lahm jetzt.
Excel Ray Tracing.
Ja, etwas übertrieben vielleicht.
Was sagt eigentlich die Gesamtauslastung von meinem Rechner?
Da hat er ein bisschen mehr als acht CPU-Kerne.
Okay, da sagt insgesamt 41 Prozent.
Okay, Leute, wir sind immerhin schon bei fast 1000 Packages angekommen.
Rust, Build Times und vor allem
diese Dinger mit Rust hat hunderttausend Abhängigkeiten immer.
Du, du, du.
Wir können eigentlich das Video weiter gucken in der Zwischenzeit.
Aber jetzt macht er Progress, wir sind fast durch.
Was will der eigentlich mit Web Assembly hier die ganze Zeit?
Was im Time war sie?
Es ist blazingly fast, nur nicht beim Compilen.
Ja, das Rest ist blazingly fast.
Aber immerhin lastet er richtig schön alle CPUs aus.
Ich bin mal gespannt, ob das dann auch startet.
Okay, 50 Packages noch.
Präge.
Jetzt wird es langsamer.
Jetzt hat er die Sachen, die man schön parallelisieren kann, durch.
Wobei es immer noch alles ausgelastet.
Wim.
Wie jetzt?
Wahrscheinlich Wim Navigation.
Man muss sagen, diese Terminal Sache hier sieht richtig Hackerman-mäßig gerade aus, oder?
Mit diesem Compile-Job, der oben durchläuft, unten drunter,
die updaten der Ausgabe von HardHop.
Okay, 15 Projekte noch.
Präge, Präge, hoffentlich sind wir bald fertig.
Ah, ah, ah, vier, vier, drei, zwei.
Oh, jetzt wird nur noch UI kompiliert.
Eins.
Und jetzt wird Z abschließend kompiliert.
Bam.
Nachdem alle Abhängigkeiten durch sind.
Da geht noch mal CPU-Auslastung.
Was für unsinniger Spam.
Ja.
Compiler.
Das ist, das ist so Chebade wie der Windows-Progress-Balken.
99 Prozent fertig.
Drei Stunden später.
99 Prozent fertig.
Wir hätten noch das Video fertig gucken sollen.
Weil jetzt will ich nicht umswitchen, weil ich mir jetzt jedes Mal denke.
Gleich switch ich um und dann ist er fertig.
Okay, ich lasse ihn jetzt kompilieren.
Wir gucken das Video fertig.
Was?
Wo sind wir gerade stehen geblieben?
Ah, er hat gerade Jetplanes beworben.
Which contains everything you'll need for the craziness of JavaScript development,
but can now understand and write code
faster thanks to the AI assistant.
It's a programming optimized model that can offer suggestions, describe your code
and write your code while understanding the context of a large project.
But most importantly, the IDE is reliable and fun to use.
It's got an intuitive minimal interface.
Ich benutze, ich benutze dieses ganze AI Zeug von Jetplanes gar nicht.
Aber die IDE finde ich nice.
Also WebStorm ist jetzt nicht so meins.
Habe ich mal probiert.
Find Visual Studio Code angenehmer.
Aber für Go, für C-Sharp und sowas sind die Jetplanes Dinger einfach nice und
höchstwahrscheinlich auch für Kotlin und Java, wenn man damit was macht.
Wir haben ja mal ein bisschen damit rumgespielt.
Ja, für Python ist auch so die Dinger nice.
Also Jetplanes IDEs sind für mich die besten, die es gibt.
A tons of power under the hood.
Bei ihm ist es Paid Placement, bei mir nicht.
Don't need to install a bunch of plugins to start being productive.
And best of all, you can try out Jetplanes
IDEs for your favorite programming language with a 30 day free trial.
Use the link in the description.
But now let's talk about the pros and cons of developing on a Macintosh.
Apple by far makes the best hardware, but to obtain it, you must pay a large
tribute like a thousand dollars just for a stand.
In addition, another major drawback is.
Nicht nur 1000 Euro für einen Monitorstand,
sondern auch 300 Dollar für einen VESA Mount.
Vielleicht erinnert sich der ein oder andere.
That you can't upgrade these machines.
If you want to add more RAM, storage or
GPUs, the upgrade options are extremely limited.
On top of that, that ecosystem is designed to lock you in.
If you want to build apps for iOS,
or the Apple Vision Pro, you'll almost certainly need to own a Mac.
And if your hardware ever breaks,
you'll find that the components are glued or soldered into place,
which means it's impossible to repair without going to the Apple Store.
And there's been a lot of controversy around the right to repair.
But nobody really wants to repair their old MacBook.
By the time it breaks,
there's going to be some awesome new thing that you'll just have to buy.
But more important than the hardware is the software.
And one thing that's really nice about Mac OS is that it's Unix based.
Unix has been around since the 70s and
has a really nice file system design.
Das ist, ich glaube, auch BSD based.
Also,
das ist auch eines der großen Vorteile, die ich bei Mac OS sehe.
Das ist Unix artig genug, dass es dich nicht nervt.
That uses forward slashes and Mac comes
with a bunch of good developer tools out of the box like ZShell, Git, Vim and so on.
In addition, you can use package managers
like Homebrew to easily install and manage different development tools.
The terminal experience on a Mac is nice and tools in the GUI look really
nice, although they can be pretty annoying to use.
I'm looking at U-Finder, but most importantly,
everything works out of the box with zero configuration.
Mac OS prevents you from going down
customization rabbit holes, spending days configuring pointless stuff
on your machine instead of writing code that's actually useful.
But if you want to get really good at computers, you'll need to learn Linux.
On the server, Linux is king.
The vast majority of servers running in the cloud,
powering the world's infrastructure, run Linux.
And that's because it's free, open source and reliable.
However...
Und der Rest unter Windows ist, weil es irgendein Windows-Prozess ist,
und der Rest unter Windows ist, weil es irgendein Windows-Prozess ist,
und der Rest unter Windows ist, weil es irgendein Windows-Prozess ist,
der nur unter Windows funktioniert, so Exchange oder sowas.
Oder wobei, ich wollte gerade sagen MSSQL, aber nein,
MSSQL gibt es ja tatsächlich mittlerweile auch für Linux.
Es gibt Verrückte, die machen das tatsächlich.
...few normies actually use it for their personal computers.
Why is that? It has to do with complexity.
To use Linux, you first need to choose a family.
Like Debian, Arch, Red Hat, Gentoo and many others.
Then you have to choose a distro in that family.
Like under Red Hat, you've got Enterprise Linux,
Fedora, CentOS, Locky...
Ja, das ist jetzt tatsächlich schon ein bisschen übertragen.
Ja, das ist jetzt tatsächlich schon ein bisschen übertragen.
Ja, das ist jetzt tatsächlich schon ein bisschen übertragen.
Ja, das ist jetzt tatsächlich schon ein bisschen übertragen.
Ja, das ist jetzt tatsächlich schon ein bisschen übertragen.
So wirklich viel Auswahl, die sich jetzt anbietet,
auch für jemand, der da einschließt, ist ja nicht.
Die Leute sollen Linux Mint verwenden, die neu anfangen
und noch gar keine Ahnung haben, und alle anderen Arch, fertig.
...Linux and many others.
Then you'll have to choose a desktop environment
like GNOME, KDE and so on.
Außerdem war das hier...
...then you'll have to choose a...
War das nicht das...
Ist das nicht das CentOS-Logo hier neben?
Was es nicht mehr gibt?
Ist es nicht das Debian-Logo? Erzähl mir nix.
Debian-Logo ist dieser Kringel.
Ich glaube, das ist das CentOS-Logo.
...Rocky Linux and many others.
Ja, Rocky Linux ist...
Wie heißt das andere?
Alma Linux, ne?
Alles, das die ganzen Red Hat nachbauten.
...and many others.
Then you'll have to choose a desktop environment
like GNOME, KDE and so on.
Then finally you'll need to open up the terminal,
type in a bunch of commands to resolve dependencies,
compile things from source, update file permissions.
Then a few weeks later, you should be good to go.
Some distros are designed to be extremely user-friendly,
like the Debian-based Linux Mint.
But if you really want to be an Apex Alpha,
you'll likely want to go with something in the Arch family,
allowing you to legally say, I use Arch by the way.
So sieht's aus.
Not only is Linux free,
but it offers you the most flexibility
for customizing your machine.
And in turn, you're likely...
Moment, hat er da etwa Neo Fetch verwendet?
Eieiei, wir haben doch gerade gelernt, Neo Fetch is outdated.
...for customizing your machine.
And in turn, you're likely to learn a lot more
about how computers actually work when you use it.
And if you really want to get into something like penetration,
distros like Kali Linux are highly optimized for that activity.
In addition, if you're deploying applications on Linux servers,
you'll be much more familiar with the Linux ecosystem
when you use it every day.
And there's all kinds of amazing developer tools
you can use on Linux that may have a higher learning curve initially,
but can dramatically improve your productivity.
But there are quite a few drawbacks.
The support for commercial software like Adobe products
and a large number of games and drivers for hardware is just non-existent.
Linux only has a single-digit market share of personal computers,
and many developers just choose to use Linux.
But Linux is not the only open-source kernel.
If you're really brave, you can use other kernels like OpenBSD,
Minix or Redux, but then you'll really be on your own.
And ultimately, when you have to configure a lot of things by hand,
it makes the entire system more brittle,
which means you'll eventually break something stupid
and end up spending two days debugging your bash profile,
which is one of the leading causes of a neckbeard.
Linux can be painful at times, but you need that pain to grow.
You don't know real pain, though, until you've tried to develop on Windows.
Das stimmt wohl!
It does.
At first, you're going to need to train your brain,
to charge your mom's credit card $199 for Windows Pro.
Then, when you install it, it's going to try and sell you a bunch of crapware,
like Microsoft Office and OneDrive.
Even if you decline, you'll still need to log into a Microsoft account,
so it can spy on you in perpetuity,
in order to resell you that same crapware every day for the rest of your life.
When you boot it up, you'll find artificial intelligence everywhere.
You'll need a co-pilot just to manage all your co-pilots.
Now, if you're coming from Unix, you'll notice some weird things,
like it uses backslashes for file paths,
and every day or two, the system will shut down.
Für mich war es früher natürlich so, dass man sich nicht mehr daran interessiert,
Natürlich umgedreht.
Ich habe mit Windows angefangen, so wie jeder früher,
bis ich dann irgendwann mal was mit Linux zu tun hatte.
Aber ich struggle jedes Mal,
wenn ich unter Windows irgendwelche Pfade von Hand mal wo schreiben muss.
Der Mann mag kein Windows, hat ja auch recht.
Allein schon diese Leerzeichen da drin.
Gut, das kannst du unter Linux auch machen,
aber ist eher nicht so verbreitet.
...uses backslashes for file paths,
and every day or two,
the system will shut down and update
to make sure you have the latest spyware installed.
...when it comes to...
...Chat sagt, der böse Turk hat geschrieben,
er hat die Anlage...
Das war irgendein Debian-based Ding, oder?
Da habe ich ewig nicht mehr gehört.
Als die Updates so merkwürdig wurden,
dass nach jedem Disk-Upgrade Xorg abgeschmiert ist,
das neu kompilieren musste,
echt auf MX umgestiegen.
Warum nicht gleich, wie die ganzen Giga-Chats,
direkt Arch-Linux?
Weil wir wissen ja, die wahren Linux-Alpha-User
sind unter Arch-Linux unterwegs.
...when it comes to open-source-software development,
Microsoft has some skeletons in the closet.
In the 90s it had a strategy to embrace open standards,
extend them in incompatible ways,
in order to extinguish them later on.
And Ballmer once called Linux a cancer.
How much do you think this advanced operating environment is worth?
But nowadays things are different.
Even though I hate Microsoft,
I use Microsoft VS Code to write my Microsoft TypeScript code,
then push it to Microsoft GitHub,
install my Microsoft NPM-Packages,
then deploy it to Microsoft Azure
from my Microsoft Windows machine.
At some point Microsoft realized,
the way to win over developers
was to become less like Windows and more like Linux,
and the killer feature for that
is the Windows subsystem for Linux,
which allows you to run a full Linux distro inside of Windows,
not just an emulated one,
which gives you the best of both worlds.
You can use all your favorite Linux-Terms,
Linux-Terminal-Apps,
and even run Linux-GUI-Apps like VLC and GIMP.
In the past I used to dual boot Windows and Linux,
but WSL has made that unnecessary.
It's not perfect,
and there are some random issues that come up.
Wie gesagt, meine Sache ist, Windows hier, Linux hier.
WSL can be painfully slow at times,
but it's a pretty awesome feature overall.
And one huge benefit of Windows over Mac OS
is that it's not kept in a walled garden.
Windows is proprietary,
but it can be installed on any hardware.
Sehe ich richtig, dass hier so viel WSL drin ist,
aber es nicht in einem walled garden ist,
dass hier sogar die Stromkabel RGB haben,
das ist natürlich wichtig für das letzte bisschen Performance.
Ja, Kali ist jetzt eher was zum Weniger,
zum täglich benutzen.
Ich muss dir ehrlich sagen,
ich habe den Sinn von Kali Linux
noch nicht so hundertprozentig gecheckt.
Vielleicht kann mir das mal einer von euch erklären.
Ich weiß selbstverständlich, wofür es gedacht ist und alles.
Aber,
warum kann ich nicht,
mal angenommen, ich brauche einen Man-in-the-Middle-Proxy,
warum kann ich das nicht einfach
auf irgendeinem anderen Linux installieren und gut ist?
Warum muss ich dazu Kali Linux booten,
auf dem ich dann wahrscheinlich vieles andere,
was ich eigentlich bräuchte, nicht habe?
Ja, zum Beispiel meine IDE und mein ganzes Zeug zum Entwickeln
und nicht richtig eingerichtet ist.
Ja, im Prinzip ist es eine Package-Sammlung
mit ein bisschen Vorkonfiguration.
Also hundertprozentig den Sinn davon,
warum man es verwenden soll.
Also ich weiß schon, wofür es da ist,
aber so richtig kapiert, wann ich es jetzt verwende,
für mich der Vorteil, wo der große Vorteil ist,
habe ich auch noch nicht.
Weil zum Beispiel eine Sache,
wo man zwar hätte dafür gebrauchen können,
erinnert sich vielleicht noch der ein oder andere,
haben wir ja im Stream gemacht.
Ich habe mal, das machen normale Linux-Distributionen auch nicht.
Oder beziehungsweise meine Artstellung macht das auch nichts.
Macht das auch nicht.
Nicht, dass man es jetzt irgendwie bräuchte, oder?
Also zum Beispiel, ich wollte mal mitschneiden,
den Traffic von einer Android-App.
Jaja, das verstehe ich schon,
aber ich habe für mich noch nicht kapiert,
was der, wann ich es dann verwenden würde.
Zum Beispiel, ich wollte mal mitschneiden,
was für den Traffic von einer Android-App.
Das Problem war, die Android-App, die hat nur über HTTPS
mit ihrem Hersteller-Server geredet.
Also haben wir folgendes gemacht.
Wir haben einen Android-Emulator installiert,
den es so auch nicht fertig in Kali gab,
out of the box.
Dann haben wir die App da drin gestartet,
haben ein eigenes Zertifikat in den Trust-Store reingepackt.
Und dann haben wir, ich weiß es nicht mehr,
ob es Burp oder mit dem Proxy war,
kann ich mich nicht mal genau daran erinnern,
dazwischen gehängt, um zu gucken,
was die App jetzt eigentlich so konfiguriert.
Und nebenbei habe ich versucht,
manche Aufrufe davon nachzubauen in meiner IDE.
Nichts davon hätte ich gescheit unter Kali Linux machen können.
Außer den Part vielleicht mit dem Proxy,
aber da hätte ich alles andere drumherum nicht gehabt.
Also, das Einzige, wofür ich es mir wirklich vorstellen könnte,
ist so, und dafür ist es ja, glaube ich, auch gedacht,
aber das mache ich dann einfach nicht oft genug,
ich habe einen Kali Linux auf dem USB-Stick,
dass ich jetzt spontan mal testen kann,
irgendwie Brute Force, Passwort knacken auf irgendeinem WLAN,
Passwort save, whatever.
Ja, dass ich irgendwas schnell am Start habe.
Das ist kein System, was ich jetzt irgendwie installiert
auf meinem Notebook verwenden würde,
um da regelmäßig Sachen mitzumachen.
Und was sollen wir jetzt verwenden?
Which means you can easily upgrade your RAM, CPU, GPU, etc.
But now that brings us to the final question.
Which tribe should you join?
Well, I've created a hand-
Arch, by the way.
The flowchart to help you choose.
The first question is, are you rich?
Okay, wenn wir rich sind, Mac OS.
100 pro.
Rich.
If you answered yes, then the answer is pretty easy.
Mac OS.
But if you answered no, the next question is-
You have a life.
Okay.
Yes, kommt Windows.
No, kommt Arch Linux.
Is do you have a girlfriend and or a life?
If you answered yes, then Windows is the optimal choice.
Then your final question should be, do I want an operating system-
Du nieder Gott.
That's designed by God and-
Kommt da jetzt Tempel OS?
Bei der Frage kann ja eigentlich nur Tempel OS kommen, oder?
Self.
If you answered no, then Linux is your best choice.
But if you answered yes, then the obvious choice would be Tempel OS.
Das war klar, dass das noch irgendwie da rein musste.
Schade, dass der Tempel OS-Typ nicht mehr lebt.
Er war fertig kompilieren und ich habe nicht rechtzeitig mein Sudo-Passwort eingegeben.
Fuck.
Aber der sollte das Bild eigentlich noch haben.
Okay.
Editor fertig.
Jetzt bin ich mal gespannt, Leute.
Z.
Postchamp.
Crash.
Okay.
Nice.
Ah, Vulkan mag er in meiner VM wahrscheinlich nicht.
Irgendwelche Vulkan-Probleme vielleicht?
Dass das nicht gescheit in der VM funktioniert?
Kann sein.
Siehste, Leute?
Das ist der Grund.
Warum ich das nicht gescheit in der VM mache?
Warum ich das nicht gescheit in der VM mache?
Weil ich jetzt einen Snapshot gemacht habe.
Jetzt kann ich nämlich den Snapshot restauren und der ganze Schmodder ist wieder weg.
So wie das sein muss.
Wer weiß, mit was, mit wieviel tausend Rust-Sachen, der mir jetzt mein Package-Cache-Verzeichnis
da vollgemüllt hat.
Dann werden wir das jetzt mal updaten.
Und nachdem wir das jetzt haben, löschen wir den Snapshot.
Nice.
Excellent.
So muss das sein.
Hat nicht funktioniert.
Sedge.
Ich hätte mir das gerne mal angeguckt, den Z-Editor.
Sieht in das Thai-Lang genauso aus, jaja.
Jaja.
Ich will eigentlich nur mal den Editor nehmen.
Ich werde das irgendwann mal ausprobieren, wenn es gescheit in der VM läuft.
Also Software, die nicht ordentlich in der VM funktioniert.
Das ist halt irgendwie nicht so sinnig für mich.
Best Code Editor, Programming Tierlist.
Damit über G-Bated in den Thumbnails kommt dann was ganz anderes raus.
Ähm.
Du kannst es nochmal unter Windows Builds.
Moment, gibt es dafür Windows Builds?
Nee, oder?
Gibt es nicht.
Mac und Linux auch nicht wahrscheinlich.
Ernsthaft, da gibt es Windows Builds für?
Nee, nee, das probiere ich jetzt nicht aus.
Das probiere ich jetzt nicht aus.
Vielleicht bei echt woanders.
Nee, kein Bock.
Chat.
Ich gehe heute schon ein bisschen früher auf.
Ich habe übelst Hunger.
Und ich merke, dass ich ein bisschen Kopfweh kriege.
Also habe, kriege.
Und das muss nicht sein.
Vielleicht hören wir uns am Mittag.
Wir müssen noch ein paar Sachen ausprobieren.
Zum Beispiel.
Meinen neuen ZigBee Stick flashen.
Und gucken, wie man mit dem Stick.
ZigBee und Thread Geräte gleichzeitig ansteuern kann.
Und gucken, wie man mit dem Stick.
ZigBee und Thread Geräte gleichzeitig ansteuern kann.
ZigBee und Thread Geräte gleichzeitig ansteuern kann.
Das muss man wohl mit einer Custom Firmware flashen.
Das muss man wohl mit einer Custom Firmware flashen.
Oder mit einer extra Firmware Flash.
Und dann zusätzliche Sachen starten.
Und dann zusätzliche Sachen starten.
Die sich in Software um ZigBee und Thread kümmern.
Ich finde das nice.
Warum?
Wann machst du das?
Eventuell am Mittag, aber wahrscheinlich ja irgendwann nächste Woche.
Woche. Lachsnudeln essen gleich. Nein! Und auch kein Spaghetti, keine Spaghetti Bolognese. Heute
gibt es was anderes. Ich weiß aber nicht was. Lachs und Nudeln habe ich aber auch noch. Das
gibt es morgen dann. Bis dann, Leute. Macht's gut. Wir hören uns. See you.
