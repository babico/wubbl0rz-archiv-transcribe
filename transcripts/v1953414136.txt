So da bin ich
Der go champ ist am start was ich vorhabe sage ich gleich
Ich habe ich habe nicht viel vor
Aber dort wo ich arbeite die haben was vor und ich habe mir gedacht wir können was für bauen
Ich update mal kurz meine vm und ich muss mal kurz die kirby musik ausmachen
So anstrengend
Du du du du du du du du ich muss ich muss erst mal die leute die jetzt schon da sind kurz verschrecken
exzellent
Jetzt wird es jetzt muss gerade empfohlen wird euch veranwaltet ich muss mich aufs go programmieren einstellen
Ich war mal kurz package update in meiner vm aber gerade dabei sind hat nicht funktioniert warum nicht
Arzbein was jetzt los
Gibt gibt gar nicht so viel
Läuft alles bei dir in der vm
Das ist mein host das vor
Gucken wir lassen es mal auf bis die bis die vor die vm ist schon fertig updatet das ging jetzt viel schneller als mir das
vorgestellt haben
Warum warum geht hier gachi bass nicht über die vm doch geht doch
Ihr könnt jetzt noch den beruhigenden klängen lauschen bis die packages geupdated sind da mache ich ein bisschen was entspannendes dass man sich
konzentrieren kann
Und dann erkläre ich euch was wir eigentlich machen
Warum ist das so langsam mit updaten?
Was macht das denn eine halbe stunde für den eigenen theme zum upgraden? Yes
Okay
Exzellent haben wir irgendwas zum upgraden
Haben wir nicht aber nicht reboot zack
okay
Dann machen wir ein bisschen was entspannendes
Okay, was ist das meditative music that rive moment was was macht das chat moment was?
re
Verb
Das kann ich nicht mal aussprechen. Ich weiß nicht was es heißen soll
Reits in the brain was
Ach so das vibriert im kopf oder wie oder was
Wenn ich noch vom letzten mal an doch im zweifelsfall eine runde
Wuppwuppwupp ein bisschen lautes wuppwuppwupp hier das geht einfach wuppwupp aus leise wuppwupp machen
Okay, so ist gut
Warum immer update weil arch by the way
Rolling release da muss halt öfters mal updaten
Du du du du
Gut
Pogu
Einfach mal der random Pogu
Haben wir hier noch 8 das garmen zeug haben wir ja hier noch da müssen wir auch mal fertig machen
okay, also
Wie viel go erfahrung hast du schon es geht
Also ich habe schon die einen anderen sachen in go gemacht
Aber noch nie was wirklich richtig großes
Ich habe beispielsweise web rtc
Sachen schon in go gebaut ich habe
Wir haben im stream auch schon command line tools gebaut ich habe ich habe ein bisschen was umfangreicheres
Für die arbeit gebaut also mein letzter job nicht der aktuelle
Aber es hält sich immer so es ist jetzt nicht dass ich komplett planlos bin was go angeht aber
Ich bin jetzt auch nicht der go profi das problem ist
Ich habe ich mache sehr selten was mit go und habe auch schon eine weile nicht mehr mit go gemacht
Und go gemacht das heißt ich habe jetzt wahrscheinlich erst mal ein bisschen anlaufschwierigkeit aber das wird schon wird schon hinhauen
Vielleicht mal mein mikrofon nicht einstellen so oder ansonsten
Schauen wir mal ich werde euch jetzt erst mal erzählen
Was ich mir überlegt habe und zwar also
Das
Weshalb und warum ist ja immer eine wichtige sache also warum wir das in go machen ist eigentlich relativ einfach das liegt daran
weil
Ja genau
Das liegt daran
weil
wir auf der arbeit
Ein java entwickler haben der dort net nicht mag aber der gerne an dem tool mit basteln will
Was im endeffekt heißt dort net fällt flach
Also go
Wobei ich nicht mal sicher bin ob wir das tool überhaupt brauchen
Da habe ich mir jetzt aber noch gar keine gedanken großartig drüber gemacht
Würdest du go für cli verwenden oder lieber was aus preis immer immer go wenn du was also jetzt nicht
Versus python sondern immer go wenn du was haben willst was sich einfach verteilen lässt
Go binaries das ist easy du kannst go binaries auf jedes x beliebige linux system kopieren der letzten
15 jahre ich glaube das geht rückwirkend bis kernels wo 635 36 oder sowas
Also wenn du es wenn du einfach was haben willst zum kopieren zum ausführen es geht
Self-contained binary mäßig ist go einfach das beste was es gibt sobald du externe abhängigkeiten hast sieht es natürlich schon wieder anders aus da
Musst du trotzdem wieder um viele sachen gedanken machen
Wie sieht das ökosystem von go aus ich würde mal sagen go hat eines der größten ökosystem aller programmier sprachen
Also sicherlich hat javascript vielleicht eventuell noch ein bisschen was mehr ja python auch riesen ökosystem
Aber trotzdem also go hat hat ein massive großes ökosystem
Wird das kompiliert oder wird immer eine installation belötigt nein das wird nicht einfach nur kompiliert go ist viel besser in dem fall
go baut
Behaupte ich jetzt einfach mal die besten
Self-contained binaries von allen sprachen weil das auch eines der erklärten ziele von go ist
Go hat keinerlei abhängigkeiten zu irgendwas was auf deinem system läuft nicht mal lip c oder sonst was gar nix
Dementsprechend läuft go auch rückwirkend bis kernels wo 636 glaube ich weil ich weiß ich nicht go minimum kernel
keller
Go muss man go lang suchen ja hier ist doch da
Ja, go required minimum kernel version 26 32 ich meinte fuck das ist von wann?
2008 oder so
na ja ja vielleicht doch
Nee sagen wir mal okay sagen wir mal 2010 2010 guck mal hier
2009 leute
2009 das heißt du kompilierst heute ein go binary auf einem ganz neuen system
Kopierst das auf linux drauf von vor 14 jahren und es läuft einfach
Sofern es go only ist und keine externen abhängigkeiten hat wie sieht es mit windows aus geht geht auch
habe ich noch nie benutzt aber kannst auch kannst mit go nv glaube ich glaube dass du mit go nv sogar
Cross
Kannst du cross plattformen kompilieren von linux zu windows aus mit go
glaube ja dass das geht
Also mit net geht es auf jeden fall ich glaube mit go geht das auch weil du kannst mit go ja auch
Kostkompilieren für also von x86 kiste für eine armkiste also kannst du beispielsweise
Raspberry Pi bei also binaries von Raspberry Pi erstellen auf deiner x86 kiste das funktioniert so aber jetzt versuche ich erst mal zu erklären
Was ich machen will und zwar da muss ich jetzt ein bisschen ausholen
Wobei ich lasse den scheiß einfach weg ist eigentlich vollkommen unbedeutend
Was gemacht werden soll ist folgendes heute ist jemand bei uns auf der arbeit auf die glorreiche idee gekommen also wir haben einen message bus
Oder wir haben einen message broker
Auf der arbeit das ist ein apache
active mq
Artemis das sowas
Neues
Keine ahnung warum es das unbedingt sein musste aber ich glaube weil in dieser party
Anwendung das braucht so das ist das ist quasi next next next gen
Active mq so das unterstützt das protokoll
amq p 1.0 wohlgemerkt active mq selber unterstützt plus amq p
0.9 1 warum warum man so verwirrend macht ich habe keine ahnung
Rabbit mq kann übrigens auch bloß 0.9 1 oder mit add-on 1.0
Warum das nicht abwärts kompatibel und was die da machen ich habe keine ahnung ist mir auch vollkommen egal
Es ist so also wir haben wir haben einen message broker
active mq artemis
Da dran hängen paar services
Und einer dieser services der möchte nachts was machen
Das problem ist nur dass irgendwie keiner in der lage ist
Ich versuche das jetzt so weit zu umschreiben wie wie geht ohne jetzt alle details zu erzählen
Also wie keiner in der lage ist das ordentlich zu triggern dass das nachts passiert
Und daraufhin habe ich gesagt leute
Das läuft doch eh alles in der klasse
Das läuft doch eh alles in der cloud warum machen wir nicht irgendeinen container
Hauen das in irgendeinen cloud run rein oder in unseren kubernetes cluster rein
Der einfach eine message published nachts in den message broker
mit dem was da drin stehen muss
Und daraufhin macht dann der andere microservice was er machen soll
Und da kamen die ersten bei mir auf der arbeit haben gesagt auch nein das können wir doch nicht machen
Weil irgendwie gibt es interne policy dass solche automatisierten jobs
nicht über eigene container die getriggert werden gestartet werden dürfen sondern über eine
Unternehmensweit eingesetzte workflow automation als ich das gehört habe habe ich gesagt okay ich ziehe alle wie das alles wieder zurück das
Vergesst was ich vergesst was ich gesagt habe damit will ich nichts zu tun haben
Ich habe gedacht das klingt mir schon viel zu böses enterprise
gut aber daraufhin
Kam ein entwickler und hat gemeint max das ist eine gute idee
Lass uns einfach was bauen und auf github pushen muss ja nix muss ja nix mit mit der arbeit direkt zu tun haben
Wir können es dann halt benutzen wenn es da ist aber wen juckt es ja
Lass einfach mal bauen morgen okay
Und im prinzip soll das was ganz simples werden
Exakt das exakt das war geplant und da kam jemand an okay wir müssen eine unternehmensweite
workflow automation workflow automation tool was auch immer verwenden
Und jetzt werden wir es trotzdem machen jetzt bauen wir zusammen ein mini cli tool
Was in am qp was über über am qp 1.0 an messagebroker was publischen kann und sonst nix
Und fertig dazu kann man da nur sagen
Das bedeutet auch wir brauchen jetzt erst mal damit wir überhaupt anfangen können einen lokalen active mq
Artemis broker ich habe aber schon geguckt die haben ein docker image was man einfach starten kann
Dann schnappen wir uns go land und versuchen mal da drüben ein mini qtool zu bauen
Die haben ein docker image was man einfach starten kann dann schnappen wir uns go land
Und versuchen mal da drin eine message zu veröffentlichen
Also ich muss da gleich sagen disclaimer ich mache nicht so oft was in go
Ich bin nicht komplett ahnungslos in go ich habe beispielsweise schon mal relativ low level c interop mit go gemacht das war
Extremely pains champ da ist das wischl studio code
cgo also dass das wischl studio go
Plugin ist immer abgestürzt wenn man cgo verwendet hat
Ist egal brauche heute nicht dass ich habe schon ein paar sachen aber wie gesagt ich verwende go nicht so oft
Und mit mit active mq habe ich noch nie was gemacht also das heißt wir brauchen das erst mal in active mq server dazu starten wir
mal ein docker container
Bei der gelegenheit wie restarten docker mal weil docker nach dem reboot manchmal ein bisschen rum spackt
Ups
Docker run
Lasst uns mal alles klar docker funst container am start rust rewrite
Ice freak danke für den zapf du wirst lachen
Der kollege auf der arbeit also der entwickler von der arbeit meinte warum muss es denn go sein lasst doch in rust machen
Hab ich da habe ich gesagt ja aber nur wenn es blazingly fast ist und dann haben wir uns am ende darauf geeinigt dass wir es doch
Lieber in go machen weil wir beide in go mehr durchblicken als in rust
Chat wie
Hättet ihr das gemacht welches tool hättet ihr welche welche umgebung hättet ihr für den mini für den mini cli tool verwendet
Go oder rust rust ist für selfcontained für selfcontained binaries auch nicht schlecht wenn man es gegen musel lip c
Kompiliert dann ist auch relativ ruby wenn sie im fall nicht so gut jaja chat chat alles gut alles klar
Ahja und der grund warum wir überhaupt ein eigenes tool bauen ist weil es anscheinend keinen ordentlichen
commandline active mq 1 am qp
1.0
Commandline client gibt soweit ich das verstanden habe ich habe noch nicht danach gesucht und ich werde auch nicht danach suchen weil wenn ich
Danach suche und finde was dann
Können wir gar kein eigenes tool bauen das fände ich doof
Ich ignoriere das einfach ob es was geben könnte und wir brauchen einfach ein tool
Kann ein bisschen ein bisschen proger stellt zu machen habe ich immer wieder bock drauf
Eines tool ist immer sehe ich genau so sehe ich genau so außerdem kann man das dann komplett customizen auf unsere needs
geiler satz
Kasten kasten meist ja auch immer auf eure needs ja
Wie werden guies für sowas wie spotify gemacht das ist ganz eklig das willst du glaube ich nicht wissen
Das ist höchstwahrscheinlich einfach nur ein browser
Und was das sich elektron nennt
Was viel ram braucht
Aber aus irgendwelchen gründen sich großer beliebtheit erfreut glaube das willst du nicht das willst du nicht machen
Obwohl doch jetzt
Ignoriere mein blödes gelaber elektron ist für das was es macht eigentlich das beste was es gibt
Aber spotify ist ziemlich sicher elektron übrigens genauso wie microsoft teams wobei teams 2.0 nicht mehr und discord
Discord ist auch elektron discord hat aber viele zumindest bei dem native client relativ viele
eigens
Angedockten c++ note extensions soweit ich weiß das nie angeguckt weil discord hat ja kein source code
Ja discord muss es gibt es gibt zwei sachen die man immer flamen muss das eine ist elektron das andere ist java
Es ist egal ob das berechtigt oder unberechtigt ist aber kann man mal kann man mal zwischendurch zwischendurch immer machen
Ja und okay c++ c++ flame ich ja gar nicht einfach just for fun
C++ flame ich weil c++ es verdient hat und wirklich scheiße ist
Also java hat es ja nicht mal groß verdient
Ja war hat es ja nicht mal groß verdient und elektron hat es eigentlich auch nicht groß verdient
Aber c++ hat es verdient
Du machst gerade was mit elektron und java background ja warum nicht
Und patrick heute auf arbeit neues projekt vorgestellt hat gefragt ob ja
Besse so muss das machen
Kein game ready driver so also doch erstellt
Lasst uns mal kurz gucken
Apache artemis image
Wenn man das jetzt auch richtig schreiben kann
gibt es da ein
docker image
official docker image na ist doch pog
use our docu or check out our
Documentation guck mal das muss man bei den apache projekten erst echt mal lassen die haben meistens zumindest ein paar sinnvolle docks guck mal hier
official docker images docker run
61614 ok man muss zwei sachen runnen warum
Messaging port und http
Http hat das ding in webinterface wahrscheinlich hat das ding webinterface
Once the broker starts you can open the webmanagement console ok verstehe
Default username und password ist artemis you can also use shellkommando
moment
Wollen die mir sagen da ist da ist ein command line tool etwa integriert
Das wollen wir gar nicht wissen es gibt keine command line tools dafür
Ignore
Wir sind wir sind mal so frei wir gucken wir gucken kurz rein wir gucken ich will einfach nur wissen ich meine vielleicht müssen wir
Vielleicht vielleicht bauen wir doch nichts selbst ja
shell
Aufpackt das hat echt ein eingebautes command line tool
1
Was auf damit muss ich go ab benutzen ja ist auch
Go geht es ist vielleicht nicht meine lieblingssprache aber es geht geht voll klar
ok command line interface
getting help
shell
transfer
Wir müssen eigentlich gar nicht selbst bauen
Alter
Man kann einfach sagen artemis producer und dann die message so wie es aussieht
Naja
Nee wir bauen jetzt trotzdem was
Auch wenn wir es nicht brauchen zumindest zumindest mal ein bisschen basteln können wir lass uns mal kurz angucken wie das funktioniert
hier gibt es dann ein beispiel für
Okay das ist auch noch mega easy zu benutzen und welche message sendet der jetzt
Let's try sending messages
Wo ist denn hier die message die er sendet adress hello world ist nee das ist das ist die message queue
Ja okay das ist natürlich jetzt
Ach hier so minus minus data hängt man da einfach was dran
Na gut egal wir bauen das trotzdem selbst easy also docker run my container
Nee nee nee so ein kack machen wir nicht wir machen docker run
Nee
Einfach einfach docker run
Minus minus am
Dass es wieder weg ist gleich danach vergessen es vergesse ich das minus port
Ach da ist schon am
Apache active mq latest alpine okay dann dann pull mal dann
your system can make
Warum habe ich da gerade irgendwelche in instant exceptions bekommen am anfang timeout
Typisches java program erst mal exception nach dem start
Gestartet beim exception aber auch typisch java es geht gleich weiter trotz exception
Okay, so und jetzt habe ich angeblich ein
Quatsch habe ja gar kein teamox am start jetzt habe ich angegeben was das da
ach das war für
Mojo was ich dann doch nicht ausprobiert habe
Local
host port was 81
61 flashed console
Wenn ich mich jetzt so richtig wenn ich jetzt so richtig schreibe ok hat funktioniert
Funktioniert okay
Lock in to your active mq
Okay als webinterface geht schon mal
Artemis artemis
Remember me yes
Da sind wir okay
Jmx monka w
Monka w und users consumers ich will einfach nur eine message publischen leute jetzt
key cloak integration
übertreibt halt mal
Yolo kia rest api jetzt lasst mich in ruhe ich will ich will einfach ich will das einfach nur api technik ansprechen gut ist
okay also
Go go land
Jetzt wird es jetzt mit advanced ich habe schon wie gesagt eine weile nix mehr in go gemacht
Enable new i ja würde ich schon sagen
nur i
Mir wurde mal gesagt dass es zwei sichere dinge im leben gibt der tote java exception beim staat
Ja, ich habe letztens auch einen schlauen spruch gehört
Erst wenn sich der mosquito auf deine eier setzt
Lernst du dass man probleme nicht nur mit gewalt lösen kann
Der ist aber eigentlich gar nicht schlecht oder
Ist eigentlich ziemlich fein fährt oder
So weiß ich weiß ich wo ich das wo ich das gelesen habe aufgeräumt ist nicht schlecht
so ein new project ich bin immer verwirrt wenn ich neue go projekte anlege weil
man kann das dann auswählen irgendwie zwischen
Zwischen modules und nicht modules und go path und
Ich glaube ich will das und dann macht es standardmäßig
nen
modules
Also ich habe das jetzt mal frei übersetzt das war irgendein bildchen mit mit spruch auf englisch und war sicherlich gewählter
Ausgedrückt als wie ich jetzt übersetzt habe ich fand das nicht schlecht so wir haben go 1 2 1 3 installiert ist das ist das neu
Weil wir haben arch linux damit ja das ist
verhältnismäßig
ok
enable vendoring support automatically
das
Funktioniert nicht so richtig ich lasse einfach mal alles default my awesome project ganz toll so muss das moment moment moment
so heißt es nicht das heißt
Message champ
Schreibt man chat bei go muss man sich ja immer penibel daran halten dass man alles richtig macht von der schreibweise her und so gedünst
Muss das projekt mit einem kleinen buchstaben anfangen oder oder wenn ich im großbuchstaben macht kackt er dann komplett ab
Bei go ist das alles möglich
Also wie gesagt go flippt auch aus wenn du was importiert hast was du nicht benutzt und und wenn du bei einem if die die
Klammer auf der falschen zeile zumachst
Implodiert go klein und will nicht mehr
Okay, ich hoffe das tut einfach create
Suggested plugin plugin kubernetes nene jetzt nicht
Okay nice wenn sehe ich das richtig dass er nicht mal einen main go file anlegt er macht gar nix
Main.go muss man glaube ich machen jetzt konnte man sagen hallo
Das war ich bin schon wieder richtbar print
Nee
printen
Okay, es ist schon schon direkt lost
Ich weiß nicht mal mehr wie man brennt macht ne das war format war das fmt war das oder fmt punkt
Import an die function um sieht nicht so eklig aus
so
Und jetzt und jetzt meint es ist go es ist go das heißt es muss so sein sonst mag das nicht
Und wir machen das war alles mal ein bisschen größer
size ja
Okay perfekt so muss es sein package sollte auch main sein
Warum geht es sonst nicht oder wie was passiert wenn ich hier print rindeln
War das nicht fmt oder so
Okay, was ist der unterschied zwischen print line und fmt print line keckel
mit oder ohne ohne
Okay, das muss ich jetzt das muss ich jetzt mal aus ausführen
Go
Message champ was war es einfach go run
Main
go run main oder
Hey, aber go build war das go run punkt oder go run punkt
Package ist not the main package. Okay, da muss das wirklich main sein. Okay
Jetzt funsters keckel da sind wir
Er ist alles schon ein bisschen her was in der unterschied zwischen print line und
fmt in line
Mein schäler ist auch wieder da. Wo warst du denn? Ja, was ist die difference interessiert mich auch
Esoterischen sachen da wieder wer entwickelt solche elektronen apps sind es dann fronten entwickler oder gibt es extra elektronen entwickler
Naja, der grund warum sich elektron so durchgesetzt hat ist dass damit auch web entwickler desktop anwendungen entwickeln können
Also kannst du von ausgehen dass es vornehmlich
Webentwickler sind weil du hast ja im prinzip einen browser nur halt als eigenes fenster
Für deine anwendung also in eigenen
Eigenes browser fenster exklusiv für deine anwendung und note dabei also es werden ich gehe mal davon aus wenn du solche umfangreichen
Sachen wie discord nimmst ja das sind sicherlich nicht nur fronten entwickler dran beteiligt die haben ja beispielsweise auch eigene c++
modules und sowas mit drinne
aber insgesamt würde ich sagen
Wahrscheinlich mehr fronten entwickler die elektronen verwenden also wenn ihr wenn jetzt irgendjemand sagen wir mal ein
Oldschool boomer windows only wpf entwickler ist da wird er wahrscheinlich nicht so unbedingt elektronen verwenden
Wobei es weiß ich gar nicht was ich schlimmer finden soll
Wer sie laut sage für den zahn
war
Wo wann gibt es das release von deiner elektronen app
Ach
Bist du so jung chain lohr so jung und schon auf so vielen discord servern gebannt
Musste auch erst mal schaffen so also kommen wir zur eigentlichen sache
Wir können schon mal print line machen das schon mal enorm enorm. Okay, es gibt eine github
go
am qp 1.0 library die habe ich schon gefunden von microsoft azure go am qp
Es gibt auch von datadog eine oder von
Vcabbage okay leute wenn ich die auswahl habe moment moment habe sehe ich das richtig
Microsoft hat es gefolgt von vcabbage
Das heißt vcabbage ist original und datadog hat es gefolgt von azure na nice
Jeder gut also ist das wahrscheinlich die beste library die es für go gibt
Wie viel funds das denn
Install the module
Gut da geht es jetzt schon los wie ich überhaupt nicht mehr weiß wie das funktioniert
Ging das nicht einfach alter ging das nicht so und jetzt sinkt die pendent siehst
Okay, okay, okay
Ja, ja an justin das ist auch eine sache die mich an go übelst abfakt
Ich würde es halt einfach mal gerne drin stehen lassen ohne dass es beim speichern gleich removed wird beziehungsweise nicht kompiliert
So ich hoffe es hat jetzt funktioniert
Stimmt man kann so komische dinger machen gäbe es aber trotzdem trotzdem eklige
Ich bin bin dann zu blöd für jetzt wieder weg
Okay, wie benutzt man es connect to broker
Okay, wo ist es hin?
Moment wait a minute das verschwindet wenn ich den
Ich habe ich irgendwie safe und fokus oder sowas was zum teufel ist kontext
Ich bezweifle dass der das haben will ach hier kontext tatsächlich
Das ist einfach nur platzhalter oder
Das ist einfach nur ein platzhalter oder ne was ist das
Kontext zu du
Was soll das denn schon wieder sein
Das ist komisches go geduld wieder to do returns in non empty kontext
Code should use
Alter ich habe absolut keinen blassen schimmer was sie überhaupt von mir wollen aber das der example code
Unterkante dank für den sag ich habe keine ahnung was sie von mir wollen aber wir lassen es einfach mal okay einfach so
Okay, ein coupé local host
Okay, ein coupé local host
Local host port was 61617 oder sowas nicht minus a
Warum ex posten der 30 milliarden ports nie macht er gar nicht lieber c
Also wenn ich die auswahl ab c oder c++
Okay, ganz ehrlich leute wenn ich die auswahl habe c oder c++
Wahrscheinlich würde ich sagen ja dann
Lieber c++ wenn es für sowas wie microcontroller ist beispielsweise 32 aber
möglichst wenig
von den bullshit parts von c++ nutzen das dem ort war ich da nicht rein aber
Das hat zu hohes
Missusage quasi so potenzial aber die idee finde ich gut
Das das erkennst du erst wenn du es für das klein warst wenn das normal großes erkennt man gar nichts so jetzt okay jetzt erzählt er
mir weil an just variable kon
sondern machen wir jetzt mal
Einfach so ne das geht error handling ist ja auch komplett overrated in goal nach geweck weg
Hey wie kann ich beides diskaden leute
Kann man es einfach weglassen
Ja so ist gut so ist gut einfach einfach ja moment ich kann aber hier dann sagen
Kontext und hier so ne dass das geht dann das geht dann
Muss ich so machen dass das funktioniert okay aber ich lasse es mal trotzdem mit error handling drinne
Okay, so bla bla bla bla error handling
Error
Und ansonsten
Check wait so return
Alles klar dann gehen wir mal nach go projects message champ und sagen go run
Error na super funktioniert ja schon mal aber wenn der port ist ja auch falsch es ist 6 16 16
error
ja
gut
Ich meine das ist nicht http aber
telnet
Localhost
Okay, das funktioniert
Da geht in den port gut das heißt ja noch nix ist ja nur der docker proxy der das der das annimmt
Woher weiß ich jetzt ob das überhaupt anders
61616
Ist anscheinend
Weitergeleitet oder
Machten das webinterface
Das geht noch okay was sagen die denn
You can also use the shell command to interact with the
Seher dass das der port ist ja die schreiben das hier nämlich auch weil es ist auch der einzige port neben dem webinterface der
weitergeleitet ist
Das ist der richtige port
61616 ich glaube nicht dass es am qps ist
Doch ist es
Alles klar
Highly secure jetzt jetzt mal hier go checker mans wie kriege ich jetzt die fehlermeldung eigentlich was das problem ist
Ist das irgendwie dem error error objekt drinne
sage ich dann
Fmt print okay go lang print error kann man das einfach so printen wie man will
Einfach hier den error reinhauen und dann
Na yes yes yes excellent excellent das muss man doch bestimmt okay go lang print error
würdest du deine was wusstest du dass doch keine ports öffnet ja wusste ich
Da gibt es muss man paar zeilen zusätzlich eintragen weil docker eigene
iptables ip table chains anlegt
Kann man kann man nicht einfach hier ist es doch da vielleicht muss man es auch mit fmt machen dann ist
hier
unexpected protocol header
0x3
expected 0x0 das ist ja eine erstklassige fehlermeldung dafür dass man sich mit am qp anstatt am qps
verbindet ich finde das kann man original also wirklich
obviously anhand dieser fehlermeldung erkennen
ganz klare error message ja finde ich auch und jetzt funktioniert
Geil jetzt weiß man Bescheid so also wie veröffentlicht man jetzt eine message also call am qp deal to connect to am qp broker
this creates blablabla connection ich vermute die connection
die müssen wir uns merken aber ich habe gemerkt leute die go benutzen die kürzen gerne ab weil wir machen auch con
Ich persönlich würde nicht kon schreiben sondern oder einfach nur c wenn schon dann richtig kon
oder oder oder gleich connection ich ich persönlich mag ja ausgeschriebene sachen
aber das scheint im go
im go ökosystem nicht so angesagt zu sein
chat wer von euch ist experience go programmer wie würdet ihr die variablen nennen kon kon
weglassen oder connection
Oder einfach c kon
okay
ich finde als als
.net c sharp fan connection ausgeschrieben auch nicht schlecht
cn ja cn wäre eher so die c variante
und und java wäre wäre wäre
connection händler factory
Message
Response singleton
Manager in java würde das ungefähr so heißen das ding in go heißt einfach kon
Okay, was kann man mit diesem kon objekt denn so machen close und new session okay das ist in der tat
sehr
Minimalistisch wahrscheinlich muss ich jetzt sagen new session vermute ich jetzt einfach mal
Ja steht ja sogar da
Jetzt jetzt jetzt scheint das tolle go error handling
Ich das ist auch so ein ding ich weiß viele finden das gerade toll an go ich mag es persönlich jetzt nicht so
Ich meine das hier ist doch standard error handling oder mein
print den error und geht raus
Okay, session wie geht es weiter
Once the session has been created
Create a mqp sender to message okay und the receiver
Was genau ist der plan ich will eine mqp message senden über go
Sender
error
Aber das kann man das irgendwie ein bisschen schöner machen in go anstatt jedes mal hier print error zack bumm
weil
Das ist halt das coole an der exception
Da muss an der stelle einfach gar nichts machen das reicht einfach
Weil es geht nicht weil wir so auf der arbeit brauchen
Okay, was wollen die hier von mir new sender konnte was zum teufel ist diese kontextgeschichte
carries deadlines
Das ist cancellation token source
quasi
Aber das ist doch also ich finde das ist das ist das ist super obskur benannt oder
kontext punkt to do
also das ist
Gewöhnungsbedürftig name of peers receiving terminus was
Was ist ein cancellation token das ist in der dotnet standard library ein ja man kann nicht mal sagen ein
Was eingebaut also das ist der eingebaute klasse in der dotnet standard library und sehr viele methoden
also und klassen unterstützen das wenn man denen ein
cancellation token übergibt in dotnet
dass du dann
Das asynchron quasi canceln kannst du ergibt dem cancellation token und irgendwann setzt du das auf true
Das auf canceled das token und dann und dann return das bevor es fertig ist
So und was was ist denn das hier jetzt target name of peers receiving terminus
what
Was das sein soll aber gut gibt es ist das hier vielleicht
Überladen oder so news moment ist das
Ist das der name von diesem sender also kann ich jetzt einfach mal keckel nennen zum beispiel
Was auch immer target ist in dem in dem zusammenhang okay
sender
send context am coupé new message hello
Okay, so jetzt sollte eine message schicken
Was ich was ich sehr merkwürdig finde ist
Warum hängt er jetzt und an welcher stelle hängt er
Guckt man mal ins web interface ob der jetzt was gemacht hat
Konsumers
Producers sessions nee gibt noch nicht mal sessions aber connections gibt es
Nee, das ist ja selbst oder okay der hängt jetzt einfach und und wo hängt der
leute gutes
gutes print print line debugging
Nee der hängt bei new session
warum denn das
Dann machen wir das doch mal mit timeout jetzt
Nehmen der im moment noch nicht mal kann das sein dass es vorhin auch schon nicht funktioniert hat
Und der einfach nur jetzt hängt weil das versucht mit einem qps sich zu connecten dass das connect noch nie funktioniert hat
unexpected protocol header 0x3 expected 0x0
Aha okay
Ich weiß keine ahnung x3 was
Protokoll zassel protokoll tls protokoll am coupé ja
Expected 0x0
Ist das das was das server sagt also wir müssen per am coupé connecten da muss man bestimmt irgendein options objekt hier übergeben
Und was was muss man da rein rein stecken an der stelle hier sowas
Gatschi bass
Ach hier kann man umstellen was er benutzen soll aha okay
Also hostname string tls tls connection
Port ist richtig aber kommen wir kommen eine response wie stelle ich das jetzt um
Gibt es da vielleicht noch mehr
Deal configuration
Jetzt mal
Jetzt mal was anderes lasst uns gerade mal noch mal kurz was ausprobieren so das hier hing jetzt ja ne
Jetzt jetzt muss ich das mal ausprobieren
Das hier hing jetzt ja ne jetzt jetzt muss ich das mal ausprobieren dass ich ein bisschen was go mäßiges lerne
Was muss ich machen?
Okay und jetzt
Time duration
Das war doch jetzt so eine ganz komische syntax oder
irgendwie fünf mal
Time second oder sowas
Okay das aber schon mal falsch
Aber
Das kann man da nicht reinschreiben okay das ist auch wieder so ein coding aber aber error handling ist schon mal komplett outdated
Overrated out debated
Zdx 0 outplayed
Doppelpunkt aber das hier funktioniert auch nicht
Ich checke nicht wie man das benutzt wie funktioniert das moment
Und und jetzt sage ich hier kontext to do oder also das ist bis sie ist nicht also
komisch zu benutzen
Seconds ja das funst jetzt okay sondern das timeout jetzt nach fünf sekunden gucken wir doch mal 1 2 3 4 5 bär
hey tatsächlich
funst und was und was macht kontext background
Returns it is never canceled has no valid has no deadline
Okay, das wollen wir schon mal nicht
Okay, anscheinend funktioniert das was ich hier gemacht habe wir haben den timeout und müssen jetzt keinen standard tcp timeout oder sowas abwarten
Es bringt aber immer noch nix weil das connecten nicht funktioniert
Kann man jetzt diesen kontext eigentlich bei den anderen auch einfach funktionieren benutzen oder spackt es dann rum
Weil man den kontext mehrfach verwendet hat
Werden wir wie gleich gleich sehen
okay
Also wie connectet man den jetzt mit einem anderen protokoll gibt es da auch irgendwas auf der seite drauf
ja konst
If proto id what
Er ist das ding
Vielleicht sollten wir mal in die richtige gucken ja
Source code lesen
Weil ich es nicht checke sondern
Wo ist das drinne kann man kann man irgendwie hier anklicken und kommt dann zum so guck mal da
Got it
Opts
Opts
cp opts if
Er cp ist connection up connection options obviously cp
hostname new connection
Und in dem moment anhand
Ne man kann was man kann nur am qp
Oder
Am qp plus ssl benutzen
Was will er jetzt denn von mir mit der fehler meldung
Was hat er denn für schmerzen
Also wir haben ein
Unexpected protocoll header und wenn man hier guckt hat man ja gerade gesehen
Das 0x
0x3
ist
Ich weiß gar nicht sagt mein server dass er 0x3 meint oder oder meint mein client es müsste
Ist das eine fehler meldung vom server was soll die fehler so bescheuert
Aber
Okay kann man das irgendwie umstellen
Ja also ich meine ich habe nur zwei varianten am qp s
oder am qp so beides funst net
heißt im endeffekt ich muss
Ach muss ich username passwort und so noch eingeben dass es funst ist dann anders aus
Okay
Wie jetzt
Wie geht man überhaupt in username
Sassel type geht man hier jetzt
Server sagt er will authentifizierung ja dann
muss ich das hier jetzt sagen
sassel type
Okay, was passiert damit jetzt
Unauthorized access unable to validate user username 0 okay
Okay das sieht schon mal das sieht schon mal besser aus
Also da müssen wir jetzt was sagen
plaintext
Okay, soll mir recht sein plaintext user
artemis passwort
artemis
Tag kak wait hat funktioniert
Nice
okay, und jetzt haben wir im web interface ein
Nichts mehr okay, das ist auch nicht schlecht
Das ist auch nicht schlecht weil die connection ist jetzt auch abgebaut queues
Addresses ach guck mal hier
hier keckel
Queue count ich bin ich habe von diesem produkt keine ahnung aber ich ich vermute mal es hat halbwegs funktioniert
Was ist das runtime bei der c-sharp library heißt es übrigens connection factory ja das ist ja auch nicht schlimm
addresses queues
LQ ach hier guck mal keckel da ist es doch
Ich bin mir nicht so ganz ich also okay das ist der queue name
Moment wie haben die das hier vorhin genannt addresses punkt oder
Addresses
Punkt wie ist das hello world die hat noch irgendwo so ein beispiel vorhin wo war das denn
Wo habe ich das eben gesehen mit dem hello world example
Ja, habe ich das gesehen
Address hello world okay, da muss man address wahrscheinlich sagen target address keckel
okay, run
Und jetzt ich reime das auch nur ganz wild zusammen gerade
Okay, address keckel
Was
Naja das irgendwas anderes
Also ich vermute mal das hat jetzt funktioniert ehrlich gesagt wir brauchen jetzt noch was was listen da dran wobei ich eigentlich auch
Vermuten würde das hier eine message queue jetzt
Dass man irgendwo die die messages sehen kann die da drin sind hier im web interface
Dlq
Okay, so wirklich checken tue ich es nicht aber allein schon dass das auftaucht
Würde ich mal sagen hat es funktioniert
Diagnostics wo was zum was ist das
recordet das jetzt
Das macht einfach gar nichts
Wir hängen uns mal da dran und lauschen aber
addresses
Okay, kann ich was zu dlq schicken ich weiß nicht was dlq sein soll aber wir schicken es einfach mal dahin
Ja
Message count 0 das ist was anderes
Message count 1
Ja das web interface ist schrott aber
Data hello da ist es doch
Okay, das hat funktioniert also wenn man an dlq schickt dann dann ist alles gut
dlq
Ich weiß nicht was das ist aber
Das funktioniert okay, das heißt das war im prinzip schon das message senden das ist doch gar nicht so sonderlich kompliziert
Musst du vorher ein topic einrichten
Eventuell ich habe davon echt keine ahnung also im web interface machen wir es nicht wir gucken uns mal weiter die die docs an von der
Von der library was die sonst noch so schreiben
Okay name of peers receiving
Terminus was auch immer das ist
Send message create a new receiver
Ja kann ich jetzt
Okay, das heißt doch ich
Hängt das jetzt
Hängt das jetzt
Unendlich lang bis oder für irgendeinen timeout bis das ja das hängt jetzt okay
Dann machen wir das doch mal in der eigenen go go routine
Moment jetzt jetzt jetzt wird's advance go multithreading gedönnt
Session also hier go wie war das jetzt function so
Und jetzt kommt das hier rein
wir listen an kecke
Und senden oder die dlq will es wir listen an dlq und dann senden wir was an dlq
das scheint funktioniert zu haben
Wir sind mal
Nummer auf nummer sicher okay das funktioniert das funktioniert
das klappt echt
Fmt
Fmt was print das groß geschrieben ja das funktioniert
Der bekommt jetzt eine message und dann kann man sich die message anzeigen lassen data als bytes okay
Auch gut so jetzt kommt jetzt kommt bytes to string in go was war das drill konf
nee
Iota nee scheiße
Oder einfach nur string
ist es so
Nee nee ist nicht wir sind nicht in python das ist nicht
Moment das ist ein ein
Moment ist das ein mehrdimensionales was ist das
data section contains
Muss ich da jetzt sowas hier machen
Ja, alter ist das wir wer hat sich das ausgedacht
Handling des todesmann
Okay aber scheint zu funktionieren leute es scheint es scheint zu funktionieren ich mache noch mal kurz ein sleep hier dazwischen
auch wenn es liebst immer unschön sind aber
Okay
Target keckel und hier auch mal gucken ob das dann funktioniert das funktioniert doch
Funs okay
Das kann man anscheinend anscheinend taucht das nur hier richtig auf
Sobald man wo ist es denn hier atem ist
So okay das sind keine message queues anscheinend
Das hier sind anscheinend keine message queues das sind irgendwelche
Channels oder sowas wo die nur funktionieren also die ist nicht speichern sondern die nur
Quasi
Wenn einer attached ist um die zu lesen dann geht's
Was auch immer für wäre es zeug interessiert mich nicht wichtig ist wie man eine nachricht schickt der recht es geht das ist die einzige
library des gibt
Okay, dass das funst
Okay, dann würde ich sagen wird es zeit daraus jetzt ein command line tool zu bauen
Ich war mal die schrift die schrift mal kurz ein bisschen kleiner
Ja da brauchen wir ein command line tool draus
So das mit dem das mit dem receiver das können wir uns eigentlich sparen das brauchen wir nicht mehr einmal getestet gut ist
Session ja das ist eigentlich okay so gut dann müssen wir jetzt da müssen wir es okay ich meine es ist eigentlich super
Simpel was wir als command line tool brauchen wir brauchen wir brauchen eine option wie waren kommands hier oder so
wir brauchen eine option
Minus minus server und wir brauchen eine option minus minus user
Minus minus minus passwort oder wisst ihr was noch viel besser wäre nicht minus minus passwort
Sondern dass man das aus einem pfeil lesen kann
Wisst ihr auch warum das besser wäre wobei ich mir gar nicht so sicher bin ob das besser ist
Weil dann kann man das als kubernetes secret
Mounten also man kann das secret als pfeil mounten
Braucht es nicht als environment variable was heißt man könnte es
Reloaden ohne dass man den pott neu starten muss und die chance
Dass es in irgendeinem debug output drinnen steht das passwort ist geringer
also vielleicht
Sollten wir das einlesen von user und passwort aus einer aus einem secret unterstützen beziehungsweise halt
Letztendlich aus oder aus einer konfig map besser gesagt oder aus dem konfig pfeil
Ja wir machen erst mal wir machen erst mal command line arguments ja also mehr brauchen wir ja nicht wenn ich das richtig sehe wir
Brauchen minus minus server da geben wir das hier an
Und wir brauchen username und passwort ich glaube das war moment wir brauchen noch wir brauchen noch minus minus message
Wir wollen ja auch irgendwas übergeben können
Es gibt auch eine ganz gute command line parser library für go die haben wir hier schon mal verwendet im stream da kannst du da kannst du
auswählen ob
Command line wenn nicht command line gesetzt dann aus environment variable
Alles cobra ich weiß es nicht mehr genau
Wie macht man den command line parsing mit der schmitter mit der mit der standard library
Kong ist sehr nun ja
dass da da fehlt noch der restliche satz ist
Ist ist was es ist existiert oder was
Aber rapid mq bringt mir nix das ist nämlich nur am qp 0.9.1
Okay, wie von uns das mit der standard library im port flag
Flag in held message for flag okay das sieht tatsächlich relativ
simpel aus
Also würden wir jetzt sagen hier flag war
Nee war also mama server
Gleich flag string
Was ist der unterschied zwischen string string war
Wenn wir wollen er immer ist das check jetzt den unterschied nicht
Ach so hier ist es der return werden hier schreibt das in der variable rein das reicht schon okay name server
Value das ist die fault value wahrscheinlich wir wollen keinen default value haben er soll er soll abkacken wenn es nicht funktioniert
Ist nicht erlaubt okay
Okay für mir unschlüssig
What
Okay kacke schon mal so ist das schon mal falsch
Ach man muss noch sagen
Ach so für hier dann brauchen wir hier oben wahrscheinlich args
Wie geht das sternchen args args?
Main go
Was ist das us args ach nee einfach nur us args
Einfach nur pass okay geht trotzdem nicht okay dann bin ich da bin ich zu pp dafür wie das funktioniert
flex go lang der zeichen ist ja aber
Irgendwas anzeigen
How to is flex flex package genau
Weird flex
Okay, wir können es auf jeden fall schon mal so machen okay wir gehen man default value an 1 2 3 das funst
Es ist minus server und dann einfach so
nee
Das ist mit dem zweiten minus was gibt doch gar keinen sinn
Ich will jetzt auch keine parametern go run übergeben sondern an mein programm
Hey
Okay, go wir hinterfragen das einfach mal nicht das ist so und gut ist ja so und jetzt und jetzt können wir checken
Okay ist okay da brauchen wir noch mehrfach jetzt
Wollen jetzt auch für message ihr moment momente mal wo wir gerade dabei sind ja wo wir gerade dabei sind geht auch so was
Geht auch
Und das geht auch okay es geht jegliche schreibweise
Alles gut dann kann man es auch so machen
message
M p server
Message to send
Super high iq hilfe message hilfe messages user password user
Passwort zack
Okay nice likes pass
Da war gut so
Heißt im endeffekt auch das schmeißen wir raus jetzt müssen wir noch checken gibt es gibt es in go irgendwas schönes
Ah ja die target queue fehlt mir noch stimmt du hast recht ja ja ja ja hast recht
Das ist halt schön an go dass man es nicht mal kompilieren kann wenn das hier nicht benutzt wird
gibt es in go
Eine schöne möglichkeit jetzt zu checken ob eines hier von null ist wahrscheinlich muss man das ganz
explizit mit einem if machen also if
If
user
ist
so
keck weh
Das ist das finde ich halt mega nervig an go
Jetzt muss ich das hier löschen dass ich das überhaupt kompilieren kann zum ausprobieren
Moment es kann ja nicht null sein
Warum ist das überhaupt ein pointer?
Das kann doch niemals null sein oder ach doch na klar kann das null sein wenn es nicht nee
Hä warum warum ist das ein pointer das macht doch an der stelle keinen sinn oder
Ach das ist nur wenn ich es nicht passe
Okay, ja macht sinn macht sinn
Ja, okay, ja macht sinn aber jetzt muss ich auch sternchen user machen weil es ansonsten geht
Go go warum ist das jetzt?
Achso, weil ich es nie ausgetauscht hab hier hinten
Flagg provided but not defined. Okay, das hat zumindest schon mal gescheide
Okay, jetzt funzt das
Okay, flagg provided, das ist das ist okay. Das ist okay. So, wenn ich jetzt nach user
Okay, und dann dann dann geht es nicht
Leuchtet leuchtet leuchtet ein okay. So jetzt haben wir den ganzen krempel übrigens soll ich das vielleicht mal ordentlich
So if user leer empty gibt es da irgendwas schöneres außer
so
Wenn das ist doch das doch highly highly pepega, oder?
All options must be set
Heck wait all options must be said kegway und
Generiert das jetzt eigentlich auch ein minus help. Oh
Kann man das minus help vielleicht auch so aufrufen help print print print
Hey nice
Moment das hat es vorher auch schon vorher auch schon funktioniert. Achso kann man das
programmatisch irgendwie ausgeben dass man
So all flags must be said und dann
Usage ah usage
So all flags must be said und dann
Usage ah usage
Usage vielleicht was ist jetzt verschmerzen ist not
Okay, gut gut gut gut gut und und und jetzt return ich gehe mal davon aus dass es nicht abbrecht
Nice, okay, funktioniert all options all options must be set. Heck wait haben wir nun ein new line hinten dran
All options must be set, calculate.
Here. Usage of bla bla bla. Message. Stimmt.
Okay. Damit bin ich fine.
Da brauche ich keine Zusatzlibrary.
Was hat der hier für Schmerzen?
Last argument of println ends with a redundant newline.
Ne. Stimmt doch überhaupt nicht.
Ich will noch einen extra newline.
Machen wir nochmal.
Noch einen zweiten newline.
Ppga. Message.
Output.
Erwie.
Würde ich anstatt backslash n jetzt einfach nochmal
ein leeres println dahinter machen oder wie?
Okay, das ist also die coolere Variante in Go.
Stimmt, man könnte auch einen print machen.
Ja, stimmt eigentlich.
Dann sagt man zweimal backslash.
Ja, das ist auch eine Möglichkeit.
Ja. Okay, gut.
Nice.
Was war das hier nochmal, was da zurückkommt?
Cancel function. Braucht man nicht.
Da wird nichts gecancelt hier.
Heißt im Endeffekt, wir können das hier jetzt verwenden.
Server usage.
Wir können uns sicher sein, an der Stelle ist es alles gesetzt.
Minus minus Server kommt hier hin.
Sternchen. Server.
Dann als Sternchen user.
Sternchen password.
Session und so. Lass mal weg.
Target name ist Sternchen queue.
Was kann man hier eigentlich für Options setzen?
Oh, ganz viel abgedrehtes Zeug, was wir weglassen.
Könntest du es nicht so anhaben?
Traue ich mich das anzuklicken?
Ja, sieht nicht schlimm aus.
Wie? Ach so.
Ja, das ist auch keine schlechte Idee.
Was aber?
Has empty field config.
Das finde ich gut.
Ah, Moment.
Das ist irgendwas Selbstgebautes.
Ich dachte, so was wäre in der Standard Library dabei.
Das wäre sehr praktisch.
Das ist Overkill hierfür jetzt.
Wo sind wir stehen geblieben?
Queue message.
Ah ja, hier kommt die Message.
Okay, byte message.
Okay.
Ähm.
Oh.
Was jetzt?
Y löscht die Zeile und macht nicht redo.
Was ist das?
Podcasts.
Wie heißt das?
Podkeys.
Ach, wie heißt der Keyboard?
Keymap.
Androids control redo.
Ach so.
Ja, nee, nee, nee, nee.
Redo ist Y.
Mir egal, ob das irgendwas anderes war.
So, und dann will ich move line noch haben.
Oder weiß jetzt gar nicht, wie der Crample heißt.
Move line.
Start line.
Das ist bestimmt nicht richtig drin.
Ach doch, ist. Okay.
Dann habe ich nichts gesagt.
So, warum funsten das hier jetzt nicht?
Hello.
Sternchen. Message.
Ach, geht doch. Ich habe nur zu viel gelöscht.
Okay, heißt im Endeffekt.
Probieren wir doch mal aus, ob es funktioniert.
Minus, minus User. Okay, machen wir mal anders.
Minus, minus Server. Gleich.
AMQP, Doppel Punkt, Doppel Slash.
Localhost, Doppel Punkt, 61616.
Ich glaube, das war so.
Minus, minus User. Artemis.
Minus, minus Passwort. Gleich.
Artemis.
Minus, minus Message. Gleich.
Packweight.
Und was brauchen wir jetzt noch?
Minus, minus Queue.
Minus, minus Queue. Gleich.
Ähm.
Hat funktioniert.
Würde ich mal behaupten.
Ne, wir senden das an
DLQ. Ups.
Wir senden das an DLQ, weil da kommt es auch auf jeden Fall an.
DLQ, Message Count 9.
Und jetzt, bam.
Message Count
10.
Dieses Webinterface ist extrem pp-iger.
Hallo.
Ne, das ist nicht das Richtige.
Kann man das Netz sortieren?
Message ID. Ach, unten. Unten ist die Neueste.
Okay. Packweight. Ja, hat funktioniert.
Ja.
Chat, jetzt brauche ich eure 5Head-Ideen.
Was kann man da noch Sinnvolles einbauen?
Ich meine, für meine Funktionalität
reicht das eigentlich.
Ja.
Wir könnten auch, wir können auch schreiben.
Print.
Ähm.
Message Send.
Wir könnten auch ein bisschen Debug.
Ausgabe. Komm, wir machen noch eine Debug-Ausgabe.
Ich schreibe noch rein.
FMT.
Print.
Wie ging das jetzt nochmal hier?
Server.
Server. Doppelpunkt.
Und jetzt?
So?
Ne.
Ah, Print F.
Fast.
Weglassen? Ne.
Was? Prozent V?
Ach, ohne die.
Okay, nice. Das will ich haben.
Kann ich mal schreiben.
User-Name und Passwort.
Das faken wir jetzt.
Pass mal auf.
Debated.
Debated.
Das ist Hardcoded-Sternchen einfach immer.
So.
Passwort und Message.
Message sollten wir noch ausgeben.
Etwas.
User. User. User vielleicht noch.
Okay.
Das sieht doch schon mal ganz brauchbar aus jetzt.
So. FMT.
Print. Neue Zeile.
Dann schreiben wir jetzt hier noch rein.
Wollen wir noch eine Debug-Ausgabe machen?
Wir könnten noch
Minus Minus Verbose oder Verbis
einfügen und dann
noch ein bisschen sinnloses Zeug ausgeben.
So.
Aber wenn es nicht geht, dann kackt es eh ab
und gibt eine Fehlermeldung aus.
Schleife für eine Message.
Das ist tatsächlich eine ganz gute Idee.
Repeat. Könnten wir
machen. Passwort aus
Env war einlesen.
Ja, Moment, Moment.
Das muss ich noch mal kurz aufschreiben.
Repeat. Repeat finde ich tatsächlich
ganz sinnig.
Wir brauchen Env
und wahrscheinlich auch File.
Weil ehrlich gesagt, also
ganz ehrlich, wir müssen es nicht übertreiben.
Eine Sache reicht.
Also entweder.
Also wenn File supported ist, dann kann man das als
Config-Map reinmachen.
Sag mal, kann ich nicht den Default-Value
so setzen?
Genau. Kann ich nicht sowas wie
get Env und dann sagen
ja, ähm
Kackle
Server oder sowas?
Was macht der jetzt?
Was macht der denn jetzt, wenn jetzt
Kackle Server gesetzt ist?
Er nimmt das nur als Default, oder?
Die Frage ist
Okay, dann nimmt er es da.
Und wenn ich jetzt Server weglasse,
dann nimmt er Plop.
Okay, so und wenn jetzt
das hier nicht gesetzt ist,
dann sagt er
All must be set.
Ja, klingt
doch eigentlich ganz
sinnvoll, oder?
Muss die Server-Flag löschen.
Warum?
Das scheint doch so zu funktionieren, oder?
Bin ich ja jetzt...
Scheint doch zu gehen.
Message, Champ, Server.
Ja, und wenn
das nicht gefunden wird, dann Empty String.
Und dann catcht es das hier.
Das ist doch eigentlich ganz gut.
Da machen wir jetzt User
noch rein.
User
Ah, haben wir hier noch
das Passwort.
Nein, die Message per Env
Das war bestimmt nicht.
Das ist unsinnig.
Die...
Ja, wie übergibt man das jetzt überhaupt?
Na gut, man müsste das
ins Container-Image einbauen.
Aber wenn man das doch eh ins Container...
Aber das Passwort bauen wir nicht ins Container-Image.
Also die Message ist okay.
Müssen wir mal gucken.
Also ich glaube, so ist das okay.
Ja, ja.
Q kann auch über Env...
Ja, ist der Funs noch.
Ja, okay.
So, jetzt könnte man
mal noch ein bisschen hier
Zeug reinschreiben.
Vielleicht sollten wir noch
ein Minusminus-Timeout
noch dabei hinzufügen.
Ich glaube ein Timeout-Flag
wäre vielleicht gar nicht schlecht.
Falls das zu lahm ist.
Timeout...
Moment, get Int
jetzt.
Get Env
Timeout
Ah, das geht nicht, weil es ein String ist.
Timeout in
Seconds
Wie bekomme ich den...
Oh, das...
Jetzt wird's goldchampig.
Wie bekomme ich denn das jetzt zu einem Int?
Was?
Strl, Conf, Ar...
Nee.
Artoy
Aber das funktioniert so nicht.
Das Error-Handling
in Go, man. Das mach ich mal fertig.
Wir ignorieren das einfach
jetzt. Easy.
Moment, wenn das...
Wir brauchen das doch.
Weil dann ist Num
doch nicht gesetzt, oder? Wenn Error.
Also müssen wir jetzt gucken.
If Error
dann ist Num
gleich 5.
Ja?
Okay, Num.
Ja, sowas.
Sowas brauchen wir da.
Und Timeout
wird verwendet an der Stelle
hier.
Wäre es jetzt nicht sinnvoller,
wenn ich sag Int war
und dann
hier und Num oder so
mache?
Wie funzt das jetzt?
Ah, hier als erstes.
Und
so? Nee.
Einfach nur Num?
Ach nee, das ist ja kein Pointer. Deswegen funzt das nicht.
Ich bin... Jetzt hat mich
Go komplett verwirrt.
Was ist das Problem?
Und wie kann ich mir jetzt die Optionen
anzeigen lassen da vorne?
Name, String, Value. Ist doch richtig.
Ah, da fehlt ein Komma.
Okay, aber
jetzt ist falsch.
But it returns nothing. Achso, ja.
Okay.
Okay, okay, gut.
Nehmen wir das
Timeout. Moment, da kann ich
mir das doch mit dem
Error komplett sparen an der Stelle.
Oder?
Nee.
Wenn das hier ein Error ist,
dann ist das Timeout...
Da muss ich überhaupt kein Default
jemals setzen, oder?
So. Das funktioniert jetzt?
Nee. Warum?
Weil?
Ah, weil es ein Pointer
ste... Nee.
Was will er denn von mir?
Ist doch ein Int. Warum geht das nicht?
Und das geht?
Äh. Was hat er denn jetzt
für Schmerzen?
Cannot use Timeout?
Mal TimeSeconds type int?
Was will er denn von mir?
Ich kann an der Stelle eine 5 schreiben. Warum kann ich
da keine Int hinschreiben?
Und jetzt? Was machen wir jetzt?
String, Conf, Pass, Int.
Infer, Base,
From, Size, Fits.
Verstehe ich nicht, was mir das sagen soll.
Muss man sagen TimeDuration oder
sowas hier? Und jetzt?
Timeout? Nee.
Ach, das... Hä?
Natürlich macht das... Natürlich macht
das ein Int.
PassInt? Das ist doch eindeutig
ein Int. Steht doch sogar dran.
Was will es denn jetzt von mir, Mann?
Checkt das irgendjemand?
Was will das denn?
Ich kann an der Stelle ein Int schreiben. Warum kann ich
ein Int-Variable da hinschreiben?
Moment, einfach nur TimeSecond?
Geht's vielleicht umgedreht?
Okay.
Was soll das vielleicht?
Irgendwie klammern?
Dereferenzieren?
Ich hab absolut
keine Ahnung, warum das nicht funktioniert.
Okay.
Golang, Time
Seconds mal
Int.
Ja, hier.
Moment.
Int31n?
What?
Will der mir ernsthaft erzählen, ich muss
sowas machen? Alles klar,
Go. Perfekt.
Ey, es funzt.
Okay, das ist echt...
Das ist hochgradig.
Das ist ja oben, finde ich,
übrigens viel zu kompliziert.
Für
das kurze, was ich hier machen will.
Das geht bestimmt noch deutlich schöner.
Ergibt das überhaupt Sinn?
Er benutzt das und...
Ja doch, ich glaube, das passt hier.
Doch, ich glaube,
das ergibt Sinn.
Das geht bestimmt schöner, wie ich das hier oben gebaut hab,
aber es funzt.
Jetzt können wir das Timeout...
Wenn Timeout nicht übergeben ist,
dann ist es 5.
Dann lass uns das auch grad mal ausgeben hier.
Timeout.
Timeout.
5 Seconds.
Ah, das ist gut.
Timeout 5 Seconds.
Dann kann man
ein Default Value
hier in den Hilfetext
irgendwie schreiben.
Ich glaub nicht, da muss man wahrscheinlich sagen,
Default 5 Seconds oder sowas.
Minus, minus Help.
Ja.
Ah ne, ach guck mal.
Das macht...
Okay, das ist nicht schlecht.
Sobald aber eine Umgebungsvariable...
Egal, scheiß drauf.
Wir müssen es jetzt nicht übertreiben.
Also das funzt.
Message. Message sent.
Okay, jetzt schreiben wir hier oben noch ein bisschen
hin, was passiert.
Wir sind ja mal super ordentlich.
Ja. Connecting.
Beste.
It.
Session.
Dass wir wissen, was er grad so treibt.
Falls er abkackt.
Oder hängt oder keine Ahnung.
Create Session.
Create Sender.
Äh.
Sending. Message.
Die Message
gebe ich ja hier oben schon Debug-mäßig aus.
Okay.
Gut.
Jetzt wissen wir wahrscheinlich... Oh, Leute.
Ich hab das Wichtigste ver... Chat.
Ich hab das Wichtigste vergessen.
Und ihr wisst auch insgeheim,
was es ist. Wer weiß es, Chat.
Was hab ich vergessen? Ganz, ganz,
ganz. Also ohne ist es
eigentlich gar nicht möglich.
Was hab ich vergessen, Leute?
Wer drauf
kommt, bekommt ein Sub.
Emojis. Korrekt.
Du hast gewonnen.
Die Rakete, ja.
Agreement.
Payment Processing. So.
Pog.
Emojis fehlen.
Das ist das, also
absolut essential.
So.
Jetzt ist es viel gleich.
Einfach um Längen besser
schon. Um Längen besser.
Komm. Send Message
können wir uns sparen.
Da kommt jetzt einfach dann.
Checkmark.
Check. Oh, beautiful.
Ähm.
Create Sender.
Das interessiert doch keiner. Niemand weiß,
was ein Sender überhaupt ist.
Das lassen wir weg.
Create Session. Was gibt es denn da?
Was gibt es denn da für ein
Und die Ausgaben rappen. Was?
Ähm. Session.
Was könnte man da für ein Emoji
für nehmen? Für Session.
Keine Ahnung. Fällt mir jetzt echt
nichts ein für
äh. Kent.
Warum auch immer.
Ähm. Connecting.
Ein Baugrad.
Das ist gut.
Connecting is Network.
Nee. Internet.
Es gibt doch Cloud.
Okay. Besser.
Cloud mit Sonne.
Oder so ein
Blitz. Oder so ein Blitz.
Ähm.
High Voltage.
Oh. Siehe.
Wollen wir kurz aufs Handy gucken.
Nee. Nix für mich.
Der Baugrad.
Wie heißt denn das auf.
Kran kann ich nicht suchen.
Da findet man die ukrainische Fahne.
Ähm.
Emoji Kran.
Das da. Genau.
Nee. Das erkennt man nicht.
Das erkennt man nicht richtig.
Bei Darksteam.
Mehr Emoji.
Mehr Emoji Gedanken als Rest.
So. Perfekt. Oder?
So ist top.
Ey. Zarex. Das finde ich gut.
Zarex. Das ist gut.
Das ist mal für Connecting. Oder?
Für Connecting machen wir das.
Sehr schön. Sehr. Also.
Also. Jetzt ist das Web
5.0 ready. Würde ich sagen.
Okay.
Zack. Führst du aus. Bam.
Na.
Trify. Ja. Würde ich sofort
nehmen als Emote. Wenn es funktioniert.
So. Was hatten wir sonst noch gesagt?
Nein. Übrigens Chat. Wir bauen kein
Web Interface. Falls das jetzt irgendwie kommt.
Ah. Repeat. Repeat ist tatsächlich
eine ganz gute Idee.
Das ist tatsächlich gar keine schlechte Idee.
Dann Repeat einzubauen.
Env und File
ist eigentlich egal.
Hauptsache steht nicht im Klartext
drinne. Wofür brauche ich das?
Dass wir nachts auf der Arbeit.
Nächtlich.
Messages schicken können.
An ein armen Coupé Server.
Das läuft in einem Kubanetes.
Wird per
Kubanetes Cronjob gestartet. Einmal nachts.
Und dann macht es halt einfach nur das.
Und dann fliegt es wieder weg.
So. Ähm. Repeat.
Repeat finde ich tatsächlich ganz gut.
Kann man das Ding gleich 5 mal schicken.
Komm wir machen den
Standard Timeout mal auf 15.
Wollen wir mal nicht so sein.
Brauchen wir noch Repeat.
Chat.
Ich hab ne Idee. Können wir das nicht deutlich
einfacher hier machen.
Indem ich einfach sage.
Hier.
Lass mich mal kurz probieren.
Ob das so funktioniert.
Könnte ich nicht einfach sagen.
Timeout. Also das hier mir einfach
sparen.
Timeout int.
Das hier lassen
wir weg.
Name Timeout. Default ist
15.
So.
Value muss ich wahrscheinlich sowas hier dann machen.
Dass das funktioniert.
String.
15.
Timeout int. 15.
Und jetzt sag ich hier unten einfach.
Äh Quatsch nicht 15.
Ähm.
Achso. Ja ne.
Ich bräuchte jetzt sowas hier.
Aber das gibt es ja nicht.
Gibt es sowas?
Sowas gibt es bestimmt nicht in Go. Oder?
Ok. Dann lass ich das so wie es war.
Ok. Dann bleibt das jetzt so.
Aber hier können wir
hier können wir noch machen.
Wie wollte ich es denn? Repeat.
Gibt es nicht.
Repeat. Doch das müsste
doch. Guck mal. Ich könnte jetzt.
Ja.
Ich könnte jetzt gucken.
Wenn Repeat quasi
0 ist.
Dann.
Setze ich es.
Ähm. Sternchen.
Dann setze ich es
auf.
Das ist aber auch 15.
Will ich ja gar nicht.
Ich will es ja eigentlich alles insetzen.
Ok. Das ist dumm.
Das ist richtig dumm.
Da muss ich das.
Das ist aber schon echt durch die Brust ins Auge.
Jetzt oder?
Das muss doch
schöner gehen als sowas.
So. Das Repeat ist.
Standardmäßig ist 0.
Wenn er nichts findet.
0. Und das da.
Das ist im Prinzip.
So. Hier. Nur mit.
Nur nicht mit Timeout.
Sondern mit.
Und jetzt. Help.
Was ist jetzt drin?
Ja. Default.
Default ist halt 0.
Ähm. Was ist das denn jetzt?
Überhaupt.
Nee. Repeat kannst du auch mehrfach eingeben.
Was ist denn das jetzt überhaupt?
Was steht denn da jetzt drin?
Was ist denn das jetzt für eine Zahl?
0. Das ist doch gut.
Und warum weiß der da nicht, dass
Default 0 ist?
Warum erkennt er nicht, dass hier
Default 0?
Das verstehe ich jetzt nicht.
Was ist, wenn ich hier 1 angebe?
Hä?
Wait a minute.
Wenn 0 drin steht, zeigt er das
nicht als Default an?
Das ist ekliger, inkonsistenter
Kram. Ich will ja, dass
das Repeat Default 0 ist.
Dann nenn ich es nicht Repeat.
So. Ich nenn es nicht Repeat. Ich nenn es
Count.
Dann weiß man nämlich gleich, was das ist.
Aber Refactor. Rename.
Und.
Wow. Was bin ich?
Okay.
Okay. So ist es in Ordnung.
Alles klar. So lassen wir das.
So. Wunderbar.
Ähm. Default 1.
Dann kann man jetzt
Minus Minus Count angeben.
Und gut ist.
Oh. Wunderbar.
Perfektes Tool. Beste.
Moment.
Eine Second. Nein.
On.
Ja. Sehr schön.
Wisst ihr, was auch noch cool wäre?
Wenn man die Message
aus Standard inlesen könnte.
Aber das wird mir jetzt langsam zu
kompliziert.
Ich...
Das ist schon äußerst
bloated eigentlich für das, was es
machen soll. Aber Message
aus Standard in wäre tatsächlich ganz praktisch.
Oder? Ja. Wie liest
man aus? Okay. Golang.
Read. Standard in.
How can I read from Standard
in? Input. In Console.
Ne. Nicht in Console. Ich will
Standard in.
Reading input
from Standard in. Ja.
New Reader.
IO Reader.
US. Okay.
Das ist outdated Antwort.
Ne. Doch nicht.
Buff IO. New Scanner.
Standard in.
Moment. Ich will nicht scannen. Ich will
einfach komplett in Standard in readen.
Geht das?
Geht das nicht einfach auch so?
Read.
So read.
Read to end oder so was.
Golang.
Read all Standard in.
Ja.
Bis EOF.
Korrekt.
Ah hier.
IO. Read all.
Standard in. Perfekt.
Echt?
Im Digital Ocean
gab es...
Moment. Aber das hat doch mit
den Flex gar nichts zu tun.
Ach ne. Das ist woher
er das lesen soll.
Ich will ja gar
keine... Achso Moment. Doch.
Will ich. Entweder ist es ein Flag
oder...
Was? If filename, file
args, file... Hä?
Ich hätte mir das Leben jetzt
eigentlich ganz einfach gemacht ehrlich gesagt.
Also ich hätte
mir das Leben jetzt super einfach
gemacht. Wenn...
Wenn Message...
Wenn Message leer ist,
dann reade ich das hier einfach
in Message. Fertig.
Oder habe ich da irgendeinen
Denkfehler drin?
Ähm.
Im Moment wird sich das komische
Errorhandling wieder machen.
Error.
Und jetzt sagen wir einfach Message
gleich
Standard in. Fertig.
Ne geht nicht, weil...
Ah. Type bytes.
Ok. Ich muss
sagen... Wie war das?
String? Das ist doch eigentlich...
Das ist doch eigentlich ok so, oder?
Weil wenn ich jetzt die Message
rausschmeiße,
dann versucht der Standard
ihn zu readen. Ok. Was nicht funktioniert
das machen wir Echo 1, 2, 3.
So. Fertig. Hat funktioniert.
Also im Prinzip
ist das... Wenn du es einfach
nur aufrufst, gar nicht. Das ist dann so ähnlich wie bei
Crap. Wenn du einfach nur Crap
aufrufst... Oder auch nicht.
Ich finde das kann man durchaus
so lassen, wie es ist.
Das steht sogar...
Weil jetzt könnte man tatsächlich...
Guckt mal. Jetzt könnte man sowas
hier machen. JQ
Berlin Haus. Perfekt.
Das wollte ich schon immer.
Wollte ich schon immer queuen hier.
Ja.
JQ.
Mal gucken ob das jetzt... Mal gucken ob das
funktioniert.
Easy. Guck.
Jason Message gesendet. Berlin Hauptbahnhof.
Ah Max, wo ist denn
der Unterschied zu Message?
Ja, dass man Standard In lesen kann.
Dass es deutlich angenehmer ist
sowas hier in Standard In rein
zu pipen dynamisch, als
Minus Minus Message
Curl
Bla Bla.
Und wenn das hier länger wird,
dann willst du es auch lieber mit einem Echo
in Standard In reinhauen.
Doch. Ich kann ja auch Minus...
Ich kann auch Minus Minus Count 2
angeben. Dann schickt das zweimal.
Also, jetzt noch nicht.
Aber das...
Ich meine, das ist doch echt in Ordnung so.
Das kann man so lassen. Standard In.
Weil es ist eigentlich total
Overkill.
Du hast keinen interaktiven
Modus. Ne, das habe ich nicht.
Kann man das irgendwie erkennen?
Kann man irgendwie
erkennen,
ob da ein Standard
in Attached
hat oder sowas?
Da weiß ich nämlich auch gar nicht, wie man
das unter Leidungsgescheit macht.
Also quasi,
ob ich erkennen kann,
ob was reingepiped wird oder nicht.
Also, dass ich unterscheiden kann zwischen so,
ich gebe hier von Hand was ein.
Ne, wahrscheinlich nicht, oder?
Ja, das ist, weil er sagt
hier Read All.
Detect Standard In
from Command.
Ach ja.
Ach ja, hier, guck mal.
Ach ja, nice.
Genau das habe ich gesucht.
Ups.
Data is being piped.
Data is read from Terminal.
Ja, genau das wollte ich haben.
Weil da kann man nämlich sagen,
nur wenn Stat...
Okay, das ist ein bisschen weird,
aber okay.
Wenn das...
Ja, genau.
Jetzt sagt er, all options
must be set.
Und wenn ich was reinpipe,
dann funzt es. Ja, so ist das
noch viel, viel nicer.
Jetzt checkt er das nämlich einfach so.
Und da können wir uns jetzt, ganz ehrlich,
das Errorhandling an der Stelle,
können wir uns wahrscheinlich
sparen, oder? Ach komm,
da ist was drin.
Wenn wir jetzt mal hier sagen, wir echoen
mal nichts, dann geht das auch,
weil dann ist in dem Echo...
Dann ist noch ein new line drin, da müssen wir echo minus n machen.
Und dann sagt er, all options
must be set.
Genau, weil jetzt Message leer ist.
Ja, nice.
Können wir so lassen. Gut, so bleibt es jetzt.
Easy.
Heckel. Ich glaube, ganz ehrlich,
das reicht für unsere Zwecke
voll und ganz aus, was wir hier
gebaut haben. Achso, Moment,
der count, countet noch gar nicht.
Send Message,
hier.
Ist das, ist das der,
der Standardweg in Go,
ordentlich ne Vorschleife zu machen?
Oder gibt's da auch irgendwelche
Sachen, die,
ist es verpönt,
das so zu machen?
Man weiß es in Go manchmal ja nicht so genau.
Kleiner count.
Was macht denn, was ist
eigentlich hier mit range?
Das ist doch eher,
wenn ich
irgendwie loopen will durch ein Array oder so was.
Kleiner count.
Und das kommt jetzt
da rein.
So, fertig.
So, count to, zack.
Jetzt hat er es zweimal geschickt.
Wir können auch das so machen.
Sending Message.
Ja, jetzt schreibt er das zweimal.
Und
hier machen wir, was muss man machen?
%v?
Oder jetzt hier i?
Ne.
Ach ne.
Gibt's sowas wie printf?
Ne, printf.
Muss man selbst
Newline machen.
Okay, komm, machen wir eins, gleich,
kleiner count.
Parallelsenden, jetzt wird's aber advanced.
Dann ist er,
ne, ne, ne, dann ist er im Zweifelsfall
dann, bevor Send Message
alle durch sind.
Das ist schon okay so, das ist fein so.
Ich glaub, das können wir so lassen.
Komm mal, Sending Message, 1, 2.
Funst.
Waitgroup, ne, ne, ne, das machen wir jetzt nicht.
Das machen wir nicht.
Aber das gefällt mir, das ist tatsächlich echt super,
super easy jetzt gewesen.
Ich mein, das sind,
sind am Ende, sind am Ende
108 Zeilen und davon kannst du die
meisten Sachen eigentlich rausschmeißen,
weil es Bonus ist, den wir wahrscheinlich
nicht brauchen werden.
Weil, jetzt mal ernsthaft, wir brauchen auch
kein Config-File, hab ich mir gerade überlegt,
weil entweder
übergebt man das Ganze per Environment-Variablen,
außer die Message, die Message muss man
irgendwie sich anders überlegen, wie man die reinkriegt.
Oder per Commandline-Arguments.
Und das ist
Kubernetes-technisch vollkommen egal.
Ich kann eine Config-Map
mounten, ich kann Secrets
Environment-mäßig mounten,
das ist eigentlich egal, wichtig ist nur,
dass es nicht zufällig in irgendwelchen Logs
erscheint oder so.
Denk an die Verbosity-Flag, wenn du dein
JSON da reinnimmst, willst du es nicht immer sehen.
Doch.
Einfach immer voll, voll Verbis.
Ich mein,
wir haben noch 10 Minuten Zeit, wollen wir mal nicht so sein.
Verbose.
Wie würden wir das jetzt machen?
Bool wahrscheinlich.
Bool.
Verbose.
Default ist
false, das brauchen wir nicht über, oder?
Na doch, doch, doch, das wollen wir auch gesetzt
haben über Environment-Variablen.
Nee, das wollen wir,
das kann man auch ins Container-Image einbauen,
ob es jetzt,
komm, nee.
Ach ja, jetzt funzt das ja wieder nicht.
Weil das hier ja ein String ist.
Kann man getenv
nicht sagen, dass er das umwandeln soll
in irgendwas gleich?
Äh, geht nicht.
Ich mein,
ich muss jetzt wieder sowas Hässliches machen,
wie hier oben.
Das ist so, äh.
Wir brauchen jetzt eigentlich
sowas hier.
Wieder, wieder oben.
Nur jetzt brauchen wir Bool.
Pass Bool.
If Error.
Verbose gleich,
ja,
Moment, wann gibt es dann
einen Error?
Wann gibt es da jemals
einen Error?
Okay, ja, doch.
Wenn da irgendein Shit drin steht, so blub, blub, blub, blub
oder so, dann ist es
fals, ja, okay.
Dann ist es so, und dann ist das hier und
Bool
wahr.
Okay, nice.
Ich hoffe, das passt.
Ich hoffe, das passt so.
Man könnte jetzt theoretisch auch sagen,
wenn wir hier schon
das haben,
Mann, das brauchen wir nicht hier.
Message, nee, das ist alles gut.
Wir können jetzt zum Beispiel hier noch ein If sagen.
Wir können sagen, if,
hab ich das nicht?
Äh, if,
if das, nur dann
geben wir diesen Krempel hier aus.
Ja, das ist schon mal nett verkehrt.
Also jetzt sollte er das alles
nicht ausgeben. Wenn ich da
Minus, Minus, Ver, Ver,
Verbose, dann gibt er alles
aus. Newline
vor dem Erot, macht man das nicht so? Schreibt man das
alles super
kompakt, oder?
Was? Newline?
Äh.
Ich weiß nicht, was ihr meint.
Ach, du meinst das hier, oder wie?
Hä?
Nee, oder?
Zeile 49?
Also wirklich so?
Das sieht doch so gequetscht aus, hä?
Ich find das so schicker.
Aber das ist wahrscheinlich nicht
der Go-Way, das so zu machen.
Leute, wenn wir
Verbose anhaben, ja?
Soll er dann das hier auch noch ausgeben?
Also, nee, umgedreht.
Wenn wir Verbose aushaben, soll er das hier dann auch noch ausgeben?
Ich glaube, das ist eine Ausgabe,
die können wir echt immer drinnen lassen.
Ja, ich denke auch.
Wenn man das hier angebt,
dann gibt er halt noch den anderen Müll mit aus.
Minus, Minus,
Silent auch noch!
Minus, Minus,
Komm, jetzt lass mal nicht übertreiben.
Jetzt lass uns mal nicht übertreiben.
Wir müssen es nicht übertreiben, man.
Ne.
Minus, Minus, Silent mach ich nicht.
Man muss das hier
noch in irgendwelchen Ifs rappen,
alles und so.
Version Flag?
Ja.
Das hat mir jetzt,
okay, komm, Version Flag ist easy.
Version, Version Flag.
Also, ähm.
Wobei.
Ja doch, Version Flag.
Version Flag ist easy.
Version Flag mit Commit Hash Output.
Leute, jetzt
wird es aber übertrieben.
Dann brauchen wir noch einen GitHub Actions
Buildstep als nächstes,
der uns immer automatisch
vor dem Erzeugen
des Binaries und Bereitstellen
noch den aktuellen Hash mit
reinbaut.
Ja, klar.
Ne, ne, ne, ne. Das ist okay so.
Das kann so, das kann
so bleiben. Das ist echt
einfach, ja? Echt?
Okay,
zeig her. Also, machen wir
jetzt hier
noch ein
Flag Bool
Version.
Die Version ist was?
Keckel?
Habt ihr euch vorgestellt, wie das funktioniert?
Äh, was?
Achso.
Okay.
Und es ist auch nicht Bool, sondern es ist,
ja, was ist es denn überhaupt?
Ist es ein Bool Flag?
Ja gut, es ist ein Bool Flag, logisch.
An der Stelle.
Es ist ein Bool Flag.
Und dann,
das ist das Erste, was ich gucke hier.
If, if
Version, Moment, was?
Build-ldflags
Full Package Path
Moment.
What? Jetzt wird es
abgedreht. Go Build!
Jaja.
Full Package Path?
Also Main?
Oder was?
Ähm.
Mir fällt jetzt grad nichts anderes ein.
Value?
If Version, und jetzt
kann ich halt einfach sagen,
Rind? Ja?
Nee.
Version ist mein,
mein
Flag, ob ich das ausgeben will.
Ja, okay.
Hab ich jetzt ja, aber das,
achso, das macht er nicht automatisch.
Also muss ich hier sowas,
sowas machen.
Ach nee, da muss ich jetzt ja noch hinter,
was es ist. Es ist ein
Int, nee, Moment, es ist Go.
Int?
Hm, äh, ähm.
Wie rum jetzt?
Int? Nee, shit.
Int?
Ach, ohne Doppelpunkt.
Okay.
String. Was?
Non-Boolean Condition in If Statement.
Okay.
Ach, da steht's ja. 1.0.
Okay, nice.
Ähm, warum sagt er jetzt
all, achso, ach, Moment.
Ich muss ja, ich muss ja neu bilden.
Okay, das ist tatsächlich ganz cool.
Aber, jetzt was
anderes.
Woher krieg ich das jetzt?
Muss ich mir das jetzt über irgendein Shell-Skript holen
oder wie? Also quasi
Git, äh, Head,
Comet oder was auch immer und dann
das hinten dransetzen?
Ja, okay.
Oh, das ist wirklich,
das ist echt gar nicht so übel, muss ich sagen.
Äh?
Nö, find ich,
find ich eigentlich
ganz gut so. Ich mein,
korrekterweise müsste man das ja eigentlich Version
Option nennen und dann, ähm,
wir nennen das hier Release.
Wir nennen das hier Release.
Dann heißt es nicht so dumm.
Okay. Oh, und das
hier nennen wir
Release.
Dann liest sich das
vielleicht ein bisschen schöner.
Ah ja, es wird aus irgendwelchen Gründen großgeschrieben.
Jo.
Und jetzt, letzte Minute,
wenn man
jetzt noch "--help!" angibt,
kann ich in den Usage
Output direkt die Version
noch reinhauen?
Kann man dem irgendwie sagen,
Custom Output oder sowas?
Usage? Oder Help
Text? Äh,
Flag?
Golang?
Help Message?
Was, Default?
Ne.
Ach hier, Print?
Ne, Print Default ist wieder was anderes.
Ne, ich glaub das,
ich glaub das funzt.
Der sagt dann einfach,
der sagt dann einfach Usage.
Scheinbar kann man,
ne, wir machen jetzt auch Schluss. Reicht schon.
So. Perfekt.
Funzt alles.
Na, fertig.
Aber wir brauchen das Tool wahrscheinlich gar nicht.
Bin ich, bin ich noch auf
Shit? Shit hab eingeloggt.
Ne.
Okay, zack, abbrechen.
Alles klar, sehr schön.
Haben wir doch heute mal wieder was Sinnvolles gemacht.
Jetzt ist Badge-Time, Leute.
Wollen wir heute zur Abwechslung mal wieder Outro-Musik?
Falls wir das überhaupt noch
irgendwo haben.
Nein, das ist nicht das richtige Outro.
Nicht das richtige Outro.
Das ist
besser.
Jawoll, das
Outro-Musik.
Also Leute, bis denn, macht's gut.
See you.
