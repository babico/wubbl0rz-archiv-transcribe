Das war's für heute.
Bis zum nächsten Mal.
Tschüss!
HoGoo!
Da bin ich wieder.
Ich hab mir gedacht,
wir machen heute nochmal was Gescheites.
Ich dachte mir, wir machen nochmal was, was, was, was gestern, was gestern nicht so gut geklappt hat.
Ich hab mich heute den Tag über ein bisschen schlau gemacht.
Wie das ordentlich funktioniert.
Und heute zeige ich euch, wie es richtig geht.
Hoffentlich zum nächsten Mal.
Tschüss!
Zumindest.
Guck mal.
Das sind die Vors.
Warum geht mir Twitch eigentlich so auf den Sack?
Mit diesem Kack.
Pop-up.
Zirconne.
Wo geht's weg?
Exzellent.
Dunkel.
Wie kriegen wir die Seite wieder normal hell jetzt?
Kann man auch nichts anklicken?
Ziemlicher Sack.
Okay, 5-Header.
Serious Max, wo bist du?
Ich brauch hier HTML 5-Head Kenntnisse.
Ich hab keine Ahnung.
Section.
Layouts.
Okay, das ist alles gleichdunkel.
Also muss es ja irgendwas damit zu tun haben.
Irgendwas mit der Section.
Okay, okay.
Wir fixen den Twitch-Chat jetzt schnell.
Background, Chatroom.
Keine Ahnung.
Alter, die gehen mir auf den Keks, Mann.
Twitch.
Müssen wir jetzt doch wieder
Incognito-Tap machen.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
ImCognitoTap machen.
Dann gehen wir hier.
FFZ-Control, Centrum.
Jetzt ist der ganze Klammerblock wieder auf Deutsch.
Moment, Moment ich brauch den Song nochmal.
Geht nur 2 Minuten.
So, sichern. Wider herstellen.
Jeffz dem ponk!
Yes.
Exellent!
Du du
Du ja Twitch möchte das ich mich anmelde.
Pepega Twitch.
Du du du
Arch by the way.
Also.
Wir machen heute tatsächlich was
sinnvolles.
Und zwar folgendes.
Ich könnte mir vorstellen ein paar
von euch waren gestern im Stream dabei.
Wo wir uns ein bisschen mit
Terraform und Google Cloud abgequält
haben. Ich habe heute
den Tag nach dem Stream ein bisschen
genutzt. Ich habe so heute Mittag mir das Ganze angeschaut
mal für so 3-4 Stunden.
Und ich glaube ich blick
jetzt ganz gut durch. Ich will mir allerdings nicht
die Lorben hier alleine geben.
Ich habe auch ganz gute Tutorials gefunden
dazu. Was Google Cloud
und Terraform angeht. Manche Sachen sind
tatsächlich nicht so ganz klar.
Also zum Beispiel wie man Ressourcen
miteinander linked. Also zum Beispiel wenn man
eine VM anlegt.
Wie man dem ein ordentliches Netzwerk
Interface gibt. Und ohne das immer wieder
von Hand angeben zu müssen. Das ist alles nicht
so logisch auf den ersten
Blick. Aber gut man.
Ja.
Was ist das schon?
Du, du, du, du.
Du, du, du.
Doch. Machen wir mal ein bisschen Wup Wup Wup an
wieder.
Du, du. Du.
Was auch noch massiv Nice
ist. Der hier
Du, du, du, du, du.
Du, du, du, du.
Du, du, du, du.
Also noch Kontakt
zu Dr. KaBoom
Lange her
Also
das letzte Mal
hat, ich glaube, hat er
letztes Jahr versucht anzurufen, da habe
ich nicht gesehen, dass er
angerufen hat, hat schnell SMS geschrieben, da hat er
dann nichts mal geschrieben.
Also ne, ne, lange nicht
mehr, lange nicht mehr.
Du, du, du,
du, du, du.
Ja.
Leute, ich quäle euch jetzt nicht mit
18 Minuten 8 Bit
Musik. Ein bisschen, bisschen muss ich
mal laufen lassen.
Genau.
Also ihr erinnert euch vielleicht noch an das, was wir gestern
gemacht haben. Wir haben versucht hier ein paar Sachen über Terraform
in der Google Cloud zu
provisionieren.
Und ich mache
das mal wieder auf.
Und wir werden heute was Ähnliches
machen. Allerdings heute
zeige ich euch, wie man es richtig macht.
So.
Wo sind wir hier stehen geblieben
gestern?
Sollte ich nicht
irgendwo in der History was haben?
Open Recent?
Moment, haben wir da
gar nichts angelegt? Hä?
Moment, wo waren wir denn?
CD?
CD, Repos?
Camp?
Hä?
Haben wir da gestern gar nichts angelegt?
Müssen wir doch haben.
Ich bin jetzt total, total,
total hängen geblieben. Wo haben wir
es denn?
Ich glaube, ich habe das wieder gelöscht.
Kann das sein? Ich habe
das wieder, ich habe das wieder weggeschmissen.
Ah, ich habe das wieder
weggeschmissen. Okay, alles klar.
Das ist aber auch nicht schlimm, weil
wir brauchen das heute nicht.
Und
weil ich so confident bin
heute, dass das was wird,
erinnert mich an das,
was ich gesagt habe am Ende des Streams.
Pack ich das
Ganze sogar in ein Git Repo, wenn ihr wollt,
was wir heute machen.
Dass ihr euch das angucken könnt.
Soll ich?
Wir fangen erst mal an, oder? Wir fangen
erst mal an, bevor ich ein Git Repo mache.
Ich glaube, ich glaube, wir gucken
erst mal, wie weit wir kommen.
Wir gucken erst mal, wir gucken erst mal, wie weit wir kommen.
Wir können ja schon mal ein Repo anlegen.
MK Dear?
Tja, wie nennen, wie nennen wir den?
Krempel denn?
Ähm
Terraform?
Oder sollen wir es mal,
soll es mal...
Nennen wir es mal so.
Weil das ist im Endeffekt das, was wir machen.
So, ich mache jetzt mal ein bisschen andere Musik an.
Lass mal gucken, was haben wir hier?
Epic Chillstep Collection.
Das ist so
so richtig aus
MW2 Zeiten so was, wer so was da noch gehört hat.
Ich meine,
das gibt sich heute keiner mehr.
Das ist nicht mehr im Trend.
Wupp, wupp, wupp, wupp, wupp.
Egal.
Es chillt.
Ob es nicht zu laut?
Ja, passt.
Ja, müsste eigentlich gehen.
Haftbefehl.
Hey, ich würde ja ab und zu mal
gescheite Musik spielen,
was nicht jetzt unbedingt Haftbefehl wäre.
Wenn ich nicht
Monkathos Probleme bekommen würde auf Twitch,
ich könnte, ich könnte
ein extra
so nen, so nen
Watt-Audiospur-Austausch
Ding machen.
Na gut, will eben auch sein.
Also wir werden heute Folgendes machen, Leute.
Ich sag's euch, wir werden uns heute ganz ordentlich machen.
Und zwar, wir gehen
in die Google Cloud, dort werden wir
mit Terraform, wir legen uns auch ein neues Projekt
an, und dann, dass wir sehen, dass das alles reproduzierbar
mit Terraform funktioniert.
Wir legen heute eine
Jump-VM an,
um in den privaten, um in die private Netze
auf der Google Cloud zu kommen.
Wir konfigurieren den Google Provider
in Terraform, wir legen den Netzwerk
an, wir legen den Subnet an, wir legen
den Router an, wir legen Nat-Regeln an, dass man
nach außen kommt, wir legen Firewall-Regeln
an, dass man per SSH reinkommt.
Wir legen ein Kubernetes-Cluster an, wir legen
eine Kubernetes-
eine Audiospur mit den
Weisheiten von Homelander.
What?
Ich brauch irgendwas ohne Gerede.
Ein Kubernetes-Cluster mit einem extra
Kubernetes-Cluster Note Pool.
Und mal gucken, wie weit wir kommen.
Und das Ziel ist, dass das alles
auf Knopfdruck in einem neuen
Google Cloud Projekt aufgebaut werden kann
per Terraform und kein Rumgeklick
im Webinterface. Das heißt,
damit wir jetzt
log in GCP, damit wir das auch ordentlich
machen können, klar das schaffen wir,
und alles easy schaffen wir das heute im Stream.
Leute, ihr vergesst eine Sache, es ist immer ein
Unterschied, und das müsst ihr
zugeben, dass es so ist.
Es ist ein Unterschied, ob ich im Stream
selbst Sachen neu ausprobiere
oder mir das vorher
angeguckt hab. Wenn ich mir das vorher
angeguckt hab, geht das in der Regel deutlich
strukturierter und schneller, als wenn
ich keine Ahnung hab.
Also immer wenn ich mir neue Sachen
angucke, ist das planlos, und wenn ich Sachen
mach, die ich mir vorher angeguckt hab, geht das
meistens relativ schnell. Doch kann sein.
Ich weiß es nicht genau.
Also ich zeige euch heute, wie es richtig geht.
Terraform mit Google Cloud. Denn wie gesagt,
ich hab mich schlau gemacht, ich hab offstream
das Ganze mir noch ein bisschen angeschaut und mir
gedacht, und im Stream zeige ich
das jetzt, und wir verfeinern das ein bisschen
zusammen. Ich glaube, es ist die bessere Variante,
wenn ich mich vorher ein bisschen schlau mache
und wir das dann im Stream zusammen
verfeinern. Wie gesagt,
ich will auch nicht so sehr die fremden
Lorbeeren ernten. Ich hab mir
ein Video dazu angeguckt heute,
was sehr hilfreich war. Nämlich so ein paar
Kniffe, wie man ordentlich ein Kubernetes
Cluster anlegt.
Und zwar hab ich mir angeguckt auf
YouTube GKE Terraform.
Das hab ich einfach mal eingegeben und hab ein
ziemlich gutes Tutorial gefunden.
Ich glaube das hier.
Das heißt, inspiriert von dem, was
er da gemacht hat. Ich hab das ein bisschen angepasst
für das, was ich brauche. Paar Sachen
mach ich nicht. Also zum Beispiel diese ganzen
extra Accounts, die er angelegt hat.
Also wie gesagt, ich will natürlich gar so sehr fremde
Lorbeeren ernten.
Wir machen es auch in einer anderen Zone und so was.
Und Logging und so Zeug machen wir auch
nicht an. Aber da hab ich mich
heute ein bisschen schlau gemacht und mir
auch die Examples von ihm angeguckt.
Und das auch schon mal so aufgebaut,
wie ich es denn brauche.
Weil es ist tatsächlich gar nicht so einfach da
durchzubl... Oh fuck, ich bin nicht mal eingeloggt.
Okay, Zack.
Ihr seid... Wir sind gleich...
Hier gibt's gleich wieder was zu sehen.
Clipboard ausschalten.
Sekunde, ich muss mal kurz mein
Passwort und Mail
Copy.
Die Mail ist nicht schlimm, die Mail hab ich schon
geleakt. Aber das
Passwort will ich nicht unbedingt leaken,
ehrlich zu sein.
Ihr seid schon drin, nice.
Nichts anderes hab ich von euch
erwartet, Chet. Nichts
anderes. Ihr seid einfach
die geilsten Hacker-Mans überhaupt.
Da kann man einfach
nichts machen gegen euch.
Coursen los.
Best Practice
Passwort 123456,
wenn schon.
So.
Ich bin wieder da.
Und ihr seid
hoffentlich auch wieder da. Und zwar
ich bin eingeloggt in der Google Cloud.
Zack. Nee, da.
Zack. So. Wir haben hier
ein Projekt
mit dem tollen Name
Cackle. Da werden wir
heute nichts drin machen. Und ich probier's noch mal mit dem
Darkreader, aber ich fürchte...
Es ist einfach schon
komplett broken.
Es ist so broken,
dass ich's nur nicht mal mehr einschalten kann
mittlerweile.
Gibt's irgendeine sinnvolle Alternative zum
Darkreader?
Ja.
Wo liegen die Scripts?
Ich glaube, lass mal gucken,
ob die überhaupt irgendwo liegen.
Wupplors.files.
Die könnten hier irgendwo liegen.
Repos, Scripts,
Shortcuts.
Hier liegen die.
Hier liegen die. Aber nicht alle.
Die meisten davon gehen übrigens auch gar nicht.
Das ist zum Beispiel leer.
Hier. Fenster zum
Killen.
Und das zum Clipboard-toggeln ist da
drinne.
Ansonsten, glaube ich, wird da gar nichts
verwendet.
Ja. Also. Wir haben hier ein Projekt
mit dem vielverheißenen Titel
Cackle. Das werden wir nicht verwenden, weil
ich wollte euch ja zeigen, wie man das macht, wenn man
ein komplett neues Projekt in der Google Cloud anlegt.
Also, dass ich gar nichts jetzt hier
von dem vielleicht verwenden könnte, was ich im Vorfeld
schon ausprobiert hab, dass das alles schön
in unserer Terraform provisioniert wird. Wir machen
das Ganze mal auf.
In einem extra
PenStore.
Das heißt, wir legen jetzt ein neues Projekt an.
New Project.
Chat. Ich brauch tollen Namen dafür.
Wir nennen es nicht MyBroadject94176.
1474.
Sondern wir brauchen was.
Wer ist denn gerade?
Gibt es eine Möglichkeit, das rauszubekommen?
Wer ist der am längsten
subscribte Zuschauer, der gerade
da ist?
Wahrscheinlich
das Serious Max oder sowas.
Es gibt ja teilweise Leute, die sind schon ewig dabei.
31 Monate.
Was erst später?
Ich bin mir nicht sicher, ob man sich das
auflisten kann.
Okay. Name ist im Prinzip
Projektchamp. Flamongo. Danke schön
für den Sub.
Projekt.
Es heißt einfach Projekt.
Es heißt,
wir machen es so wie gestern.
Wir werden es einfach streamen.
Keine Organisation.
Projekt ID. Edit.
Es muss, glaube ich,
ich bin mir nicht sicher, ich glaube
die Projekt ID
muss UNIX sein.
Weltweit.
Bin ich mir nicht ganz sicher. Ich glaube schon.
Ich glaube, die muss UNIX sein.
Also im Prinzip können wir sowas machen, wie hier
wenn man das hier gleich nennen will.
Projektname, könnte man sich
was ausdenken.
Cackle Stream. So, jetzt gucken wir mal, ob
das von irgendjemand anderes genommen hat.
Hey, Cackle Stream
ist available als Projekt. Nice.
Dann sind wir mal so.
Cackle Stream 1.
Massive.
Massive ID.
Besser kann es nicht heißen als Projekt.
So. Blablabla.
Ja. Ihr seht, ich habe
im Vorfeld schon ein bisschen ausprobiert.
Zack.
Zack.
Cackle Stream 1. Da sind wir.
So. Neues Projekt.
Es ist noch nichts enabled.
Keine VM API
eingeschaltet, wie ihr sehen werdet.
Das ist so, wie das halt ist, wenn man ein neues
Projekt anlegt.
Keine Kubernetes Workload
sonst was eingeschaltet.
Nichts. Das werden wir jetzt alles zusammen
konfigurieren über Terraform.
Und wie gesagt, ich habe mich
ein bisschen inspirieren lassen von dem,
wie der Typ das im Video gemacht hat.
Ich fand, das ist eigentlich eine ganz sinnige Geschichte.
Der hat die Dateien durchnummeriert.
Es ist zwar für Terraform letztendlich
egal, wie die Dateien heißen.
Weil Terraform
wurstet alle Dateien zusammen
in quasi ein großes globales
Ding und applied das dann.
Aber es ist
zum Strukturierten, zum Denken, dass man
nichts vergisst. Gar nicht verkehrt.
Wir fangen an mit einem Jumphost als VM.
Wir machen weiter mit so was in der Richtung.
Also das werden wir jetzt auch machen.
Chet, bevor wir anfangen, soll ich euch
noch mal kurz erklären, was Terraform ist.
Bevor wir jetzt Terraform machen,
für alle, die nicht wissen, was Terraform ist,
soll ich euch noch mal erklären, was Terraform ist.
Postchamp.
Erde formen.
Ja, genau. Das ist es.
Wir formen die Erde.
Klimawandel ist nicht mehr.
Wir haben das alles umgeformt. Easy.
Welt gerettet. Wubbler Stream
5 Head.
Ist wie bei Chet GPT.
Hätte auch keiner
Chet GPT erfinden müssen, wenn sie allen Wubbler
Stream Chet gekannt hätten.
Also ich erkläre euch kurz, was Terraform
ist. Wir gucken mal, was Terraform selbst dazu sagt.
Terraform.
Terraform bei
Haschikorp. Ich weiß immer noch nicht, wie man die
richtig ausspricht. Das ist übrigens der Vakrant
Erfinder, der das gegründet hat. 2014
oder so was in der Richtung.
Wenn es Terraform sagt über sich selbst,
vergesst das mal
mit Cloud.
Es ist
bescheuert. Das hier.
Terraform ist ein Open Source Infrastructure
Escout Software Tool,
das dich sicherlich
ermöglicht.
Wenn du nicht weißt,
was es macht, weißt du es danach auch nicht.
Wenn du keine Ahnung hast,
was es machen soll, dann hast du ja auch keine Ahnung
danach.
Also
Terraform ist ein Tool, was verschiedene Cloud
Provider unterstützt und
wo man quasi
reproduzierbar
Cloud Infrastruktur mit aufbauen
kann. Jeder Cloud Provider hat ja
so seine Besonderheiten, wie man
Sachen anlegt. AWS,
Azure, Google.
Das abstrahiert
Terraform ein bisschen. Wobei man sagen muss,
man konfiguriert Terraform schon unterschiedlich
je nach Cloud Provider, aber
der Vorteil ist versus, also es gibt
zwei Varianten, wie man das Ganze machen kann. Mal angenommen,
ich möchte in der Cloud
10 VMs anlegen.
10 virtuelle Maschinen.
Das ist jetzt
ein simples Beispiel, gebe ich zu.
Da gibt es jetzt die Möglichkeit, ich gehe ins Web
Interface, zum Beispiel bei Google,
gehe hier auf Compute Engine, VM Instance,
klicke auf Create,
ich gehe nochmal kurz in das andere Projekt
rein, dann könnt ihr es sehen.
Hab ich die disabled?
Ich kann Knoop wieder.
Ich gehe hier rein, ich aktiviere die
AP, ich klicke auf Create for M
und das mache ich zehnmal von Hand.
Dann habe ich das nächste Projekt, da klicke ich das
Gut, dass wir ein neues Projekt angelegt haben.
Ich habe keine Ahnung, was mit meinem Projekt verkehrt
ist, aber okay.
Das Google Cloud Sache,
das muss man manchmal nicht so hinterfragen.
So, und da würde ich dann
meine 10 VMs durchklicken und immer und immer wieder.
Oder ich definiere
Act, ja genau,
bestimmt. Oder ich
definiere diese 10 VMs in Terraform
und da kann ich immer wieder das
gleiche Terraform-File laufen,
lasst uns kommen am Ende die 10 VMs raus.
Und das Schöne an Terraform ist, ihr werdet
es gleich sehen, wenn ich es benutze, für alle, die es noch nicht kennen,
was ist das?
Und das Schöne an Terraform ist, ich kann mit Terraform
auch die Infrastruktur, die ich angelegt habe,
einfach wieder rückgängig
machen. Also wenn ich die 10 VMs
wieder entfernen will, muss ich die auch nicht wieder löschen
im Webinterface und dann sagt einfach Terraform
Destroy und es ist wieder weg.
Also es ist, um reproduzierbar Cloud
Infrastruktur aufzubauen
oder eben zu professionieren,
wie das die coolen Leute sagen.
Und das Stichwort, was man kennen muss,
weil man im Vorstellungsgespräch glänzen will,
ist E-Mode.
Das heißt Infrastructure as Code.
Die coolen Leute sprechen das schon gar nicht mehr
Infrastructure as Code aus, sondern E-Mode.
Also wenn ihr alle
normalen, die noch normal ticken,
im Hirn verwirren wollt, dann sagt ihr,
ich kenne mich auch mit E-Mode-Tools aus.
Da weiß auch, da weiß auf den ersten
Moment immer keiner, was gemeint ist.
Auch wenn es alle coolen Leute mit E-Mode
abkürzen.
Infrastructure as Code.
Also sprich IAC.
Nicht einfach,
IAC.
Nicht IAC.
IAC.
So, genau.
Falls du fragen willst, was der Entsch...
Ich wusste, dass du das fragen willst.
Mein Chat hat nämlich noch gar nicht geladen.
Ich wusste, dass du das fragen willst.
Das ist eines der meistgestellten Fragen überhaupt,
wenn es um das Thema Terraform geht.
Was ist der Unterschied zwischen Ansible und Terraform?
Die beiden Tools haben gar nicht so viel
miteinander gemeint, wie es auf den ersten Blick aussehen mag.
Terraform.
Also es gibt gewisse Überschneidung,
aber, sagen wir mal so,
80% Terraform, 80%
Ansible und 20% Überschneidung.
Vielleicht, wenn es hochkommt.
Also, Terraform ist ein Tool,
mit dem man Infrastruktur anlegt.
Zum Beispiel, professioniere
mir ein Kubernetes-Cluster in Google Cloud.
Lege mir in Azure 10 VMs an.
Erstelle mir bei AWS eine Datenbank
und irgendwie
lasse 5 Container-Images laufen.
Das mache ich in Terraform.
Hier, leg mir Storage Buckets an und sowas.
Also ich definiere in Terraform
meine Infrastruktur und lasse Terraform die Infrastruktur
managen, anlegen,
ändern und löschen.
Terraform hat auch einen lokalen State.
Also sprich, Terraform merkt sich,
was es gemacht hat und erkennt Änderungen.
Wenn irgendjemand von Hand dran rumgespielt hat,
kann man das Ganze wieder überbügeln.
Also Terraform ist zum Anlegen der Infrastruktur.
Ansible ist zum Konfigurieren
von VMs zum Beispiel.
Ansible ist zum Konfigurieren,
Terraform ist zum Anlegen.
Zum Beispiel, mit Terraform
würdest du 10 VMs erzeugen in der Cloud.
Und mit Ansible
würdest du dann die 10 VMs,
wenn das notwendig ist,
im Detail linux-seitig konfigurieren.
Meistens braucht man das aber,
wenn man es gescheit macht, mittlerweile gar nicht mehr.
Weil in der idealen Welt
sollte Cloud-Infrastruktur
möglichst stateless sein.
Was es natürlich im praktischen
Anwendungsfall auch nicht ist.
Aber in der Theorie.
Am besten ist, du brauchst gar kein Ansible mehr.
Wenn du komplexere Konfigurationen machen willst,
dann ist Ansible immer noch das Beste.
Weil mit Terraform kannst du
deine angelegten VMs nicht konfigurieren.
Das höchste der Gefühle in Terraform
ist ein Cloud-Init-File.
Und in dem Cloud-Init-File
Custom Bash Scripts.
Was natürlich ein bisschen
laggt versus Ansible.
Dafür ist Infrastruktur professioniert,
um Längen besser in Terraform,
allein schon wegen State-Tracking.
Was Ansible nicht macht.
Ja, so könnte man es vielleicht umschreiben.
Ja, Helix.
Hat man verstanden, denke ich, oder?
Also, es sind zwei
unterschiedliche Tools
für unterschiedliche Anwendungsgebiete.
Wenn sie auch ein bisschen Überschneidung haben.
Gut, also,
dann würde ich sagen, fangen wir an.
Ups, da wollte ich jetzt nicht hin.
Wir haben ein neues, leeres Projekt.
Das heißt, das allererste, was man machen muss,
wenn man Sachen in der Google Cloud
über Terraform anlegt, ist
den Google-Provider konfigurieren.
Das machen wir folgendermaßen.
Wir legen die Datei an.
Ich lasse mich jetzt mal inspirieren von dem Video,
was ich heute geguckt habe.
Der hat die Dinger nämlich auch so benannt.
Also, das erste, was wir anlegen,
ist
config
für unsere Cloud.
So globale, globale config.
So, und das nennen wir jetzt mal
provider.terraform.
So, da geht man zum Beispiel
so Sachen an wie
Region, Zone,
dass man überhaupt Google Cloud verwenden will.
Und eine Sache, die werde ich jetzt
schreiben ins Terraform-File.
Aber dann müssen wir, bevor wir anfangen,
eine Sache im Web-Interface von Hand machen.
Und ihr werdet auch gleich sehen, warum.
Weil das ist so ein kleines, so ein kleines Henne-Ei-Problem.
Wir werden nämlich heute auch unseren Terraform-State
sinnvoll
managen. Okay.
Also, wir legen eine Variable an.
Variable heißt hier project,
checked ID.
Das habe ich übernommen
aus der Sache gestern.
Description, project ID.
Dann kopieren wir uns das Ganze noch ein paar Mal.
Also, wir brauchen die Projekt ID.
Wir brauchen die Region.
Und wir brauchen die Zone.
Wir sind faul.
Und ID kommt weg.
Das ist nur eine Variable, da steht aktuell noch nichts drin.
Wenn man die Fault-Value reinschreiben will,
kann man das Ganze so machen.
Das wollen wir aber nicht.
Jetzt müssen wir die Google-Provider konfigurieren.
Das ist auch relativ easy.
Dann sagen wir Provider.
Google.
Wir wollen die Google-Cloud verwenden.
Und jetzt müssen wir angeben, auf welches...
Übrigens,
gebt nicht so viel auf
dieses Terraform-Auto-Complete.
Das ist ziemlich errotz, habe ich mittlerweile auch schon mitgekriegt.
So, var, project ID
und Region
wollen wir verwenden.
Region.
Jetzt müssen wir natürlich noch das Ganze füllen
mit Variablen. Es gibt zwei Varianten.
Ich zeige euch mal, was passiert, wenn ich das Ganze
laufen lasse.
Terraform-init.
Terraform-apply.
Dann fragt er mich nämlich,
was soll ich denn benutzen?
Aber ich will das ja nicht jedes Mal von Hand angeben.
Das ist immer...
Das ist relativ pepega. Also, ich müsste jetzt
bei jedem Start Projekt ID
und solche Geschichten von Hand angeben, will ich nicht.
Deswegen brechen wir ab.
Und machen das folgendermaßen. Wir legen ein...
Das kann ich aber nicht merken.
Terraform.tf war es.
Heißt, glaube ich, an.
Ein File mit Variablen drinne.
Ich muss mal kurz spicken.
Wie man das...
Ja, okay, easy.
So machen wir das.
Genau. Also, in
das Variablen-File schreiben wir jetzt rein,
was wir für diesen speziellen
Fall denn verwenden wollen. Wir haben eine
Projekt-ID, die sich Cackle Stream 1 nennt.
Wir benutzen die Region
Europe West 3, was für
Frankfurt steht. Also, das hier kann man ja auch schnappen, das ist
Frankfurt. Und das hier ist
auch Frankfurt, ja. Also,
der Unterschied zwischen einer Region und einer Zone ist,
eine Zone ist quasi eine
Unter-Under-Region.
Es gibt quasi
die Google-Geschichte
in Frankfurt, gibt es
Europe West A, Europe West 3B,
Europe West 3C.
Moin Michael, 50 Trillionen.
Hast du eine Null mehr mittlerweile im Namen?
Das sieht irgendwie anders aus. Das ist nicht mal
normal. Da stimmt
irgendwas mit deinen Nullen nicht heute.
Hast du eine Null weniger vielleicht?
So, also jetzt können wir hier
angeben, wo wir unsere Sachen aufbauen wollen.
Wohlgemerkt, aktuell macht das
Ganze noch gar nichts. Wir füllen einfach
diese Variablen. Das hat den Vorteil,
mal angenommen, ich möchte jetzt in einem anderen
Projekt exakt das gleiche aufbauen,
dann würde ich einfach die Variablen anpassen
und das laufen lassen. Und schon hätte ich in einem
neuen Projekt auch alle Ressourcen
professioniert, die ich hier drin
anlege. Das ist jetzt im Prinzip
Vorarbeit, die wir machen müssen.
Wie kriege ich raus, welche Stadt, welche
Regionsnamen hat? Einfach googeln.
Nicht AWS.
Einfach googeln.
Guck, da steht hier.
Frankfurt.
Ich muss Darkreader
anmachen.
Ich dreh am Rad ohne Darkreader.
Das ist mir einfach zu hell.
So, also da steht hier. Guck,
wenn du hier jetzt nach Frankfurt suchst.
Siehst ihr, West ist Frankfurt.
Und die anderen
sind London.
Und dann gibt es noch
Italien.
Dann gibt es noch
Belgien.
Dann gibt es, was haben wir hier?
Spanien, Madrid.
Ah nee, das ist schon South West. Okay.
Ja, Europ West gibt es sonst nicht.
Ah nee, hier. Es gibt noch Niederlande.
Und dann haben wir noch
Zürich in der Schweiz.
Milan, Paris.
Ja, also die Sachen gibt es wohl anscheinend.
Kannst du offiziell gucken bei denen
in der Tabelle, was das
oder was liegt.
So, und eine Sache, das habe ich gestern ja auch schon gesagt.
Man muss bei Google ein bisschen
vorsichtig sein,
wann man Regionen
und wann man Zonen nimmt.
Es kommt manchmal vor,
wie gesagt, genau das gleiche.
Erklärst du auch ein bisschen was zu Terraform, wie das so funktioniert.
Ja, mach ich, mach ich.
Zumindest beim Anlegen von den Ressourcen.
Aktuell haben wir noch nichts gemacht.
Ja, es gibt manchmal
bei Google
mit dem Provider hier, also bei dem Terraform
Provider von Google, gibt es
manchmal die Einstellung, dass man angeben kann
Location.
So, und bei Location kann man
entweder eine Region
oder eine Zone eintragen. Der Unterschied
ist, wenn ich eine Zone eintrage,
dann wird die Ressource nur einmal aufgebaut, nämlich
genau da. Wenn ich eine Region
eintrage, wird sie dreimal aufgebaut, nämlich
in West 3A, West 3B,
West 3C. Was cool sein kann,
was aber auch ins Geld geht.
Das heißt, da muss ich schon überlegen, was schreibt man bei Location
rein. Wir werden heute ein Google
Kubernetes Cluster unter anderem aufbauen
und da geben wir auch nur die Zone
an und nicht die Region, weil
ich habe ein Google Cloud
Demo Account für den Stream und da hat man
ein Storage Limit von 250 GB
SSD. Und wenn ich das
zu groß aufbaut, dann
dann funktioniert es einfach nicht. Deswegen
muss man halt gucken. Okay.
Also fangen wir mal an.
Das ist jetzt hier so bloß vorgeplänkelt.
Eine Sache machen wir jetzt und da kann ich euch
nur wärmstens empfehlen, so was
oder so ähnlich auch
zu machen, denn Terraform
merkt sich,
was es aufgebaut hat.
Also wenn ich mit Terraform eine VM aufbaue,
die den Namen Bloop hat
und die ID 1,
dann merkt sich Terraform, dass es
die aufgebaut hat. Und
ich kann die mit Terraform auch einfach
wieder löschen. Und wenn jetzt jemand
anderes herkommt
und an der VM rumschraubt, im Web
Interface zum Beispiel,
und ich dann Terraform ausführe, dann merkt das
Terraform, dass der State von ihm
anders ist als der State, wie er in der
Cloud ist und kann das korrigieren. Also
Terraform merkt sich, was es gemacht hat.
Jetzt ist die Sache nur die, irgendwo muss
Terraform sich ja speichern,
diesen State, was es gemacht hat.
So, wenn man es einfach nur
normal ausführt,
etwas zu definieren, dann gibt es
ein, ich glaube man sieht es ja auch schon irgendwo,
dann gibt es einen Terraform
lokalen Terraform-State.
Bei mir lokal auf der Festplatte.
Das ist meistens nicht so sinnvoll,
wenn man das mit mehreren Leuten benutzt. Deswegen
gibt es eine Sache, die kann ich euch
empfehlen, das so zu machen
und zwar das Ganze in einem
Storage-Bucket zu speichern
in der Cloud. Dann müsst ihr euch auch keine
Gedanken machen über
Logs von Filesystemen
oder sonst was, sondern ihr speichert es einfach
in der Cloud. Das ist natürlich so ein kleines
Hand-to-Hand Problem, wenn ich
den Terraform-State in der Cloud speichern
will, aber meine Cloud mit Terraform
professionieren will. Das heißt, das
Storage-Bucket, das muss ich einmal
initial von Hand anlegen
oder mit einem anderen
Terraform-Projekt, weil ich kann
ich das Projekt, den State managen und
gleichzeitig das Bucket für den State anlegen
innerhalb dieses
Terraforms
Environments. Ist logisch, oder?
Ich meine,
er kann ja schlecht sein State speichern,
bevor er das angelegt hat. Er kann sich anlegen,
bevor er sein State speichert.
Terraform-Init. Genau.
Also man macht ein anderes Terraform-Projekt
oder wie wir es jetzt hier von Hand,
in dem Fall von uns hier, wir machen das von
Hand. Also wir gehen jetzt nach Cloud Storage.
Kann sein, dass wir das noch
enablen müssen. Ne, müssen wir nicht. Create.
Na, ist der Sound-Show vorbei? War aber
kurze. Ne.
Einfach kein Sound-Trainer. Nice.
Wir legen jetzt ein Storage-Bucket an.
Das nennen wir jetzt einfach,
wie habe ich unser Projekt genannt?
Kaggle Stream 1.
Kaggle Stream 1 Tools.
Continue.
Region.
Legen wir auch. Europe.
West Frankfurt
an. Next.
Standard. Next.
Uniform.
Next.
Und jetzt, ja, Create.
Ja, Public Access
gibt es nicht.
So.
Und jetzt müssen wir noch eine Sache machen,
die oft
zur Verwirrung führt. Und zwar,
wenn man ein neues Projekt anlegt,
dann Login,
dann muss man sich nochmal neu einloggen.
Oder man macht nochmal einen G-Cloud
Init. Das geht auch.
Man muss sich nochmal neu einloggen. Und ich glaube,
man kann dann angeben Project
oder sowas.
Ja.
Und
wir loggen uns hierfür ein.
Ja, bei mir macht
er den, ja, GCP, Test-Account,
Allow.
Weil ansonsten haben wir nachher Probleme, dass man
manchmal keine Berechtigung hat, wenn man
sich nicht explizit für das neue Projekt
nochmal mit dem Google Tool eingeloggt
hat. So. Aber jetzt
sollte eigentlich alles funktionieren.
So, wir haben unser Storage-
Bucket angelegt,
was eigentlich jetzt hier stehen sollte.
Ah ne,
ich bin schon drinne.
Ah, verwirrt.
So, also wir haben hier unser Storage-Bucket.
Und dementsprechend können wir Terraform
jetzt sagen, schreibt das mal hier rein.
Das ist wie der Darkreader schon wieder richtig am
abspacken. Guckt euch mal an.
Drecks Tool, Alter.
Ihr nehmt mal eine gute Alternative zum Darkreader.
So, und
jetzt müssen wir Terraform sagen,
dass es den State da speichern
soll. Und das macht man. Hallo?
Backend. Backend, GCS.
Fragt mir nicht wofür
GCS steht. Google Cloud Storage
wahrscheinlich. So.
Bucket. Da kommt jetzt das
rein, was wir gerade angelegt haben.
Und jetzt kann man, um das noch besser zu strukturieren,
kann man ihm noch sagen,
dass er einen Prefix angeben soll.
Ein Prefix ist quasi ein Ordner.
Da kann man jetzt entweder sowas machen wie
Terraform-State
oder man könnte sowas machen wie
Terraform-Dev-State, wenn man mehrere
Environments hat. Wir machen einfach mal
Terraform-State. Und applyen das
mal und gucken, ob das alles funktioniert. Wie gesagt,
es passiert noch nichts, weil wir haben
noch gar keine Ressourcen definiert, aber wir gucken mal,
ob so die grundsätzliche Sache funktioniert.
Apply. Bam. Ach so,
init. Erstmal.
Apply.
Hat applied.
Hat funktioniert. Nice.
Das heißt, wir sollten jetzt in diesen Tools, falls Terraform
schon mal reingeschrieben hat,
ein Terraform-Ordner haben, mit unserem
State drinnen. Und jetzt brauchen wir
die Buckets nicht mehr.
Aziele, das erledigt.
Pff.
Warum ich das nicht von AI generieren lassen?
Weil mein Chat, mein Chat ist einfach
mehr FIFAT als AI.
Ich mach Chat-Triphen-Development. Wenn ich nicht
weiter weiß, frage ich den Chat, das hat bessere Ergebnisse
als Chat-GPT.
Gut, jetzt können wir anfangen, unsere Ressourcen
anzulegen.
Das erste, was wir anlegen müssen,
damit wir unser Google-Projekt ordentlich
konfigurieren können, ist, also
aktuell sieht man noch nichts, und zur Zeit ist ja nichts passiert.
Er hat nichts angelegt,
er hat im Prinzip einfach nur sein State
initial einmal gesüngt. So, das erste,
was wir brauchen, ist ein Netzwerk.
So.
1 minus vpc
Punkt Terraform.
Es heißt vpc, ich glaube
Virtual Private Connection oder Cloud.
Weiß ich gar nicht wofür das steht.
Es ist im Prinzip ein Netzwerk.
Äh, Virtual Private Cloud, so rum.
Ja.
Da kann man Netzwerke angeben, was man
anlegen möchte in der Google Cloud.
Es gibt eine Sache,
die Copy-Paste ich mir jetzt mal.
Die habe ich straight geklaut
aus dem Tutorial-Video, was ich heute
geguckt habe. Wie gesagt, ich habe euch das Video hier gezeigt.
Könnt ihr euch auch mal angucken, ist nicht schlecht.
Und zwar,
wenn man ein neues Projekt
anlegt, muss man hier erstmal
alle APs aktivieren.
Zum Beispiel, wenn ich jetzt aktuell hier reingehe
und sage, Compute Engine, VM
Instances, sagt er mir, ja nee,
nichts VM Instances,
es ist nichts mit VMs, ich muss erstmal die
Storage, die Compute Engine AP aktivieren.
Kennt ihr mal eine gute, okay, warte mal.
Dark Reader Alternative.
Hatte Firefox nicht
noch was eingebaut mittlerweile?
Das ist richtig...
Das ist richtig mies,
Mann.
Ähm...
Firefox-Allows,
würde ich erzählen, ne, ne, ne.
Add-on on
Themes,
nee, das brauche ich ja nicht.
Nee, Chrome hat das auch nur für Webseiten,
die das unterstützen.
Was haben wir hier? Ah, super.
Sehr vertrauenserweckende.
Dark Reader hat auch verschiedene
Modi. Okay, welchen Modi soll ich
verwenden, dass meine Google Cloud-Seite
nicht immer abscheißt?
Was?
Was, in Chrome?
Okay, ich bin jetzt zwar nicht eingeloggt,
aber sagt mal.
Wo, wo kann man hier
in Chrome?
Geh mal auf den Reiter
More.
Hier?
Und dann?
Auto Dark Mode
for Web Content. Moment, warum
ist denn das hier Dark überhaupt gerade schon?
Ah, weil ich auch einen Dark Reader an habe,
keck.
Dark Mode
Enable, relaunch.
Nee, nee, nee, nee, das ist...
Ach, geht das jetzt?
Ja, da machen wir,
da machen wir das doch einfach in Chrome.
Lull.
Da, da machen wir das doch einfach
in Chrome.
Warum kann das, warum kann das Chrome und
warum kann das Firefox
nicht, warum kann das nur Chrome?
Was ist das?
Was ist das?
Was ist da los?
Als besser.
Okay, nice.
Ja, dann machen wir das doch so.
Dann haben wir überhaupt keine Probleme mehr.
Also, wo bin ich stehen geblieben?
Genau, manche Sachen, seht ihr ja hier,
muss man erst aktivieren.
Passwort leak, ich habe überhaupt kein Passwort geleaked.
Das sind ja nur Sternchen,
was man eingibt.
Und wenn ja, was ich geleaked habe,
was habe ich eingeteilt?
Also,
was habe ich geleaked?
Und wenn ja, was ich geleaked habe, was habe ich eingetippt?
Was habe ich eingetippt?
So, also,
wenn man ein Projekt neu anlegt,
das ist eine Playlist
hier, 2015, Epic
Chillstep Collection.
Wurst 1, 2, 3, Scheiße,
leaked.
Wenn man ein neues Projekt
anlegt, da sind ja manche Sachen nicht
aktiviert. So, und das habe ich ja direkt
straight aus dem Tutorial-Video gerippt.
Man kann die Dinger so einschalten.
Das heißt, wenn ich jetzt mein Terraform-State
applye,
dann schaltet das erstmal die Apis ein,
was man machen muss in einem neu angelegten
Projekt, bevor man eben diese
Apis verwenden kann.
Ist eigentlich logisch.
Warum wir das hier reinmachen?
Vielleicht sollten wir das auch hier gar nicht reinmachen.
Sondern eigentlich
gehört das doch eher noch in Provider,
oder? Apis einschalten.
Würde ich mal sagen.
Also, jetzt legen wir ein Netzwerk
an in der Google Cloud. Netzwerk anlegen
in der Google Cloud ist auch nicht sonderlich kompliziert.
Wir müssen sagen, Google
Compute Network.
Man darf kein Enter
drücken, weil Visual Studio Code wieder rumbackt.
Jetzt kann man so ein Name ausdenken dafür.
Wie nennen wir unser
Netzwerk? Default ist übrigens schon
belegt. Man kann sein Netzwerk nicht Default
nennen. Wir können es,
wir können es
Global oder so oder
keine Ahnung.
Kekelnetwork.
Da kann man also Sachen angeben
wie zum Beispiel Name.
Was man nicht wirklich angehen muss
an der Stelle, glaube ich, dass nicht
das Pflichtigste. So, jetzt
kommt, jetzt wird es ein bisschen, jetzt wird es ein bisschen
spannender, was man für sein Netzwerk angeben kann.
Rooting Mode.
Regional.
Also, wir
brauchen das, wir brauchen das nicht irgendwie
sonst wo. Ich will nicht von
Europa in die USA oder sonst was mit dem
Netzwerk. Das reicht, wenn es regional verfügbar
ist. Aber wenn ich jetzt die Region
ausnutze, dann wäre das so
schon mal ganz sinnvoll. Rooting Mode
Regional. Dann wollen wir
Autocreate Subnetz. Das
soll auf False gehen.
Also sprich, ich will alle Subnetze
auch gefälligst von Hand anlegen.
Und dann kann man sagen
Delete Default
Roots on Create. Und das machen wir
auch False, weil
das ist tatsächlich eine wichtige
Geschichte. Kann man
Terraform auch lokal ausprobieren
zum Lernen.
Ja, aber
es bietet sich an, sich einen Test Cloud
Account zu machen, um da
ein bisschen rumzubasteln. Das ist ja lokal
bei mir hier. Ich professioniere
halt Cloud Sachen. Du kannst auch KVM
und sowas professionieren, aber
so wirklich cool ist
Terraform eigentlich nur für Cloud-Anbieter.
Das heißt, du kannst dir irgendeinen Probe-Account
machen bei irgendeinem Cloud-Anbieter und damit
rumspielen. Das ist im Prinzip egal, ob es jetzt
Google, Azure, AWS, Digital Ocean
oder sonst was ist. Ich würde einen der
drei großen empfehlen, weil man da eben
mehr Möglichkeiten hat, weil die mir anbieten.
Da kann man auch beispielsweise mal
Managed-Datenbank drüber anlegen und solche
Geschichten. So, aber das hier
ist wichtig. Das würde ich tatsächlich
auf False setzen,
denn sonst löscht
er die Route, womit man
ins Internet kommt.
Also das Netzwerk hat nach dem Erstellen
eine Default-Route,
wo man ins Internet rauskommt, zum Beispiel
für Packages,
Package-Updates.
Und naja, die will ich ja nicht
löschen. Die soll ja gefällig da bleiben.
Und jetzt können wir noch was machen, das ist auch
übrigens straight aus dem
Tutorial-Video gerippt.
Depends on. Ich vermute mal,
dass man das nicht braucht, aber er
hat das trotzdem gemacht und ich mache das jetzt an
der Stelle auch, weil
also meine Vermutung
ist übrigens, das Autocomplete ist
mega, mega pepega.
Das kann nur einmal Autocompleten
und so, Container.
Das soll er erst machen,
nachdem die ganzen APs aktiviert
wurden. Da wäre ich ohne das Tutorial-Video
gar nicht drauf gekommen. Also das ist auch schon
mal sinnvoll so.
Also, Depends on,
dass er das erst macht, nachdem
das hier durch ist. Danach müssen wir uns um
Abhängigkeiten und so erstmal keine Gedanken machen.
So, was er jetzt macht ist, er erstellt
ein Netzwerk. Und euch wird vielleicht
auffallen, dass bei diesem Netzwerk
so ziemlich alles fehlt,
was ein Netzwerk
ausmacht. Zum Beispiel IPs, Subnetze,
Gateways und so was in der Richtung.
Das gibt man an der Stelle
noch gar nicht an.
Das ist quasi nur der
Container für weitere Netzwerke,
den man hier anlegt.
Wenn man jetzt wirklich richtige
Netze anlegen will, dann macht man das
mit Subnetz.
Also legen wir eine neue Datei an.
New File, 2.
Subnet
Punkt TF
Und da gibt man jetzt ein,
dass wir ein, jetzt wollen wir kein Google
Compute Network haben, jetzt wollen wir ein
Google Compute
Subnet haben.
Alter, wie das nicht funktioniert mit dem
Enter drücken. So, und das kriegt den Namen
Brauchen wir da mal, das ist das Schwierigste
sind Stinger zu benamen.
Muss man eine Kreditkarte hinterlegen
für einen Free Account? Ja, aber
der, ja musst du, aber der
Free Account ist, der wird nicht
belastet, also der ist hart gecapped auf
300 Dollar und du musst explizit
es danach aktivieren, dass Abbuchungen starten.
Wie gesagt, es macht
keinen großen Unterschied, wo das ausbricht.
Ich glaube Google hat 300
Dollar
gratis pro
Trial, ich glaube Azure hat 200 Euro
gratis Trial
und ich weiß nicht, was AWS hat.
Wir brauchen einen guten Namen für das Netz.
Das eine wird global
genannt.
Internal.
Wir fangen gerade
nichts anderes ein. So,
internal. Global
und internal, ergibt eigentlich, die
Bezeichnung ist eigentlich ziemlich
pepega von mir, gerade kann sich keiner was
drunter vorstellen.
Und da muss man jetzt Sachen angeben
wie zum Beispiel Subnetz Ranges
und sowas, also kann man dem Ding nochmal Namen geben.
Internal Network
internal soll das ganze Ding
heißen. Und jetzt muss man
angeben eine IP SIDR
Range.
Chat wird in der Berufsschule
aufgepasst. Für was steht das ganze?
Nicht Google?
Wer weiß es?
Classless?
Classless?
Einmal please for vollständigen Chat.
Classless Interdomain
Routing. Exzellent.
Habt ihr gegoogelt oder habt ihr es gewusst?
Seid mal ehrlich.
Jetzt sind
sie alle ruhig.
Jetzt sagen sie alles.
Ich hab alle gegoogelt.
Exposed.
Exposed.
CCNA.
Ja gut, dann weißt du das.
Classless Interdomain Routing.
Und da gibt man jetzt so die altbekannten
Dinge an.
Zum Beispiel 10.10.0
slash 24.
Zum Beispiel.
Ja, man könnte auch slash 8
oder irgendwie sowas angehen. Aber slash
slash 24
sollte uns an der Stelle
erstmal ausreichen.
Jetzt geben wir
eine region an. Und an der Stelle
hier geben wir jetzt auch wirklich eine region an.
Denn das Netzwerk ist region
übergreifend. Also alle
Zonen in dieser Region
funktionieren mit diesem Netzwerk.
Wir geben eine region an. Dann muss man noch
ein übergeordnetes
Netzwerk-Container
oder wie auch immer man es nennen soll.
Also das hier, was wir hier angelegt haben
angeben. Und das kann man
jetzt referenzieren an der Stelle.
Und zwar kann man jetzt sagen Google
Compute Network Global.
Das ist das, was wir vorher angelegt haben.
Das bietet er mir in der Autovervollständigung schon an.
Dann
kann man noch angeben.
Kann ich übrigens auch mal
ich glaub hier muss man noch ID machen.
ID oder Self?
Ich bin mir nicht ganz sicher, ob
so auch funktioniert.
Das ist nämlich auch so eine Feinheit, die ich heute
gelernt habe. Jedes oder das
meiste dieser
in Google Cloud Ressourcen
die haben eine, die haben ein Attribut.
Das nennt sich Self-Link.
Und das kann man bei anderen Ressourcen
hinzufügen, dass automatisch
Abhängigkeiten definiert werden.
Also sprich, wenn ich das hier hinzufüge,
dann kann ich das hier hinzufügen.
Also sprich, wenn ich das hier hinzufüge,
das bedeutet, dass Terraform weiß,
das hier muss zuerst
angelegt werden, bevor das
hier angelegt wird.
Und das geht mit dieser Self-Link-Geschichte.
Mal gucken, ob das an der Stelle auch
funktioniert.
Okay, dann müssen wir noch Folgendes
angeben. Private IP Access gleich.
True. Wir wollen ja
nur, steht hier, man kann übrigens
hovern und dann gibt es Hilfe angezeigt.
Ja.
Ja, wollen wir.
Wir wollen von der Google APs, wir wollen ja von
VMs beispielsweise, unser Kombiniertes-Cluster draufkommen.
Und jetzt,
was, was ich so ohne das Tutorial,
was ich geguckt hätte, im Leben nicht
rausgefunden hätte. Wie gesagt, ich rede
von diesem...
Ich habe mir dieses Tutorial-Video
heute Mittag angeguckt.
Das hier, vom Anton.
Und er hat das wirklich, er hat das wirklich gut erklärt.
Sonst hätte ich, sonst hätte ich das jetzt an der Stelle
beispielsweise gar nicht gecheckt,
dass man das machen muss. Und zwar
ist es jetzt so,
wir, wir, wir applyn das mal. Ich zeige,
ich zeige euch jetzt erstmal
sehr gute Tutorials, wie...
Oh ne, Leute, fuck, Alter, ich kriege jetzt gerade
wieder Bauchweh, da hab ich jetzt ja gar keinen Bock drauf.
Ich hab heute Abend noch zwei Stück Pizza gefuttert.
Nicht schon wieder streamen, wo ich kacken gehen muss
zwischendurch.
Pepo Pupu Toilet
Fire.
So, ich applyn
das jetzt, dann kann ich euch mal eines der
Vorzüge von Terraform zeigen. Also applyn.
Terraform
applyn.
Jetzt sagt er mir, okay, was
würde er anlegen?
Ähm, er legt
ein Compute-Network an, er legt
ein Subnet an mit diesem, mit dieser IP
Range und überhaupt passt.
Jetzt kann ich sagen, yes, jawoll,
legt den Shit an und gut ist.
Mach ich jetzt. Und das dauert jetzt
kurz.
Das dauert jetzt kurz.
So ein paar, ein paar Sekunden,
so zwanzig, dreißig Sekunden oder so.
Oh Leute, ich hab Bauchweh.
Fuck man, von zwei Stück Pizza kann doch gar
nicht sein, Alter.
Zu wenig geh ich in Frankfurt auch
nix mehr essen, weil ich hab übelste
Vertrag vieles nicht mehr.
Oh, ich muss mal kurz aufs Klo
aufstehen.
Oh, ich muss mal kurz aufs Klo
aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo
aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufstehen.
Oh.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
Oh, ich muss mal kurz aufs Klo aufstehen.
