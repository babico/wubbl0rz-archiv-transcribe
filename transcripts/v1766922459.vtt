WEBVTT

00:30.000 --> 00:32.000
Das war's für heute.

00:32.000 --> 00:34.000
Vielen Dank für's Zuschauen.

00:34.000 --> 00:36.000
Bis zum nächsten Mal.

01:00.000 --> 01:02.000
Das war's für heute.

01:02.000 --> 01:04.000
Bis zum nächsten Mal.

01:30.000 --> 01:32.000
Das war's für heute.

01:32.000 --> 01:34.000
Bis zum nächsten Mal.

01:34.000 --> 01:36.000
Bis zum nächsten Mal.

02:01.000 --> 02:15.220
The

02:15.220 --> 02:28.260
so auf geht's

02:28.260 --> 02:38.760
ha guck mal heute ist der der fodja oder wie er heißt nicht da zuerst sonst ist der

02:39.460 --> 02:40.680
so auf geht's

02:40.680 --> 02:48.700
ha guck mal heute ist der die kinder

02:48.960 --> 03:00.760
hat

03:00.760 --> 03:02.600
da

03:02.600 --> 03:08.280
ich bin ganz schön im arsch mal gucken wie viele feiferts sachen wir hinkriegen aber ich habe jetzt schon glaube ich

03:08.480 --> 03:11.920
vier fünf tage glaube vier tage ist nicht mal gestreamt ich glaube das reicht

03:15.040 --> 03:20.520
Machen wir auto update bei new tech ja vielleicht und manchmal gucken so was in der richtung also was wir heute machen

03:23.440 --> 03:25.440
Moment

03:33.600 --> 03:36.800
Ja jetzt muss ich noch was schreiben war ganz gut minuten was der sekunde

03:38.800 --> 03:41.800
Leute kommen immer zu super super günstigen

03:43.200 --> 03:45.200
Zeitpunkten der anruf was schreiben

03:49.480 --> 03:53.080
Ja da sage ich da sage ich gleich was zu da sage ich gleich was zu

03:54.600 --> 03:56.600
Bisschen laut

03:56.760 --> 03:58.760
Bisschen was zackigeres kommen

04:03.560 --> 04:05.560
Exzellent

04:12.360 --> 04:15.880
Oh zu ja ja ich sage ich sage ich sage gleich was zu

04:16.700 --> 04:16.780
Alexanders

04:16.780 --> 04:19.280
R Dave

04:25.200 --> 04:27.200
Oh zu ja ja ich sage ich sage ich sage gleich was zu

04:35.280 --> 04:36.640
Also

04:36.640 --> 04:37.760
ok

04:37.760 --> 04:39.760
kurz um anfangen

04:40.520 --> 04:43.680
ich ich sehe nicht weil was sie oben geschrieben würde weil weil

04:43.680 --> 04:47.760
Ja wahrscheinlich werden wir sowas in der richtung machen ich weiß auch nicht ob es push bei new tech

04:47.760 --> 04:53.640
Aber mal was mal gucken was in der richtung auf jeden fall wir machen zumindest auch nicht die richtig hardcore variante mit

04:55.000 --> 04:59.760
Verwaltet sich komplett selbst und update sich komplett selbst synchron zu dem was im github ist

05:00.760 --> 05:07.120
In die richtung in der richtung müssen wir mal gucken was da ich zeige euch übrigens auch mal was cooles was ich auf github gefunden habe

05:07.200 --> 05:12.760
Wo ich glaube das ist sehr praktisch was heißt auf github ja doch ist auf github das könnte recht praktisch sein für alle

05:12.960 --> 05:14.960
Aber ich kann auch erst mal was

05:15.760 --> 05:19.680
zu meiner o2 geschichte erzählen mit

05:21.400 --> 05:23.400
Der telefonnummer

05:24.440 --> 05:30.120
O mann leute das ist echt absoluter wahnsinn die sind so extrem unfähig wieder

05:31.000 --> 05:33.160
Ich werde jeden tag auf twitter posten

05:34.600 --> 05:36.600
Ich mache agocd

05:36.760 --> 05:39.520
looks cd habe ich noch nicht habe ich keinen plan von

05:39.720 --> 05:45.440
So wobei sich das glaube ich ich habe ich habe damals ein oder andere video drüber geguckt gar nicht so viel nimmt

05:45.960 --> 05:51.680
Also flux cd kenne ich nur wir haben auf der arbeit flux cd oder flux wie immer man das dann richtig ausspricht

05:52.640 --> 05:59.200
lasst das mit dem warum warum ist das ok jetzt musst du mich überzeugen warum ist flux besser als

06:01.840 --> 06:06.160
Jetzt muss er jetzt muss er auch mich überzeugen woran es liegt

06:06.160 --> 06:11.360
Also der eine oder andere der bei mir auf twitter am start ist der wird ja vielleicht schon gesehen haben

06:12.480 --> 06:15.520
Kann sich auch einfach beides angucken und an das passende nehmen

06:16.480 --> 06:21.680
Der wird ja schon gesehen haben dass ich also übrigens leute ich bin jetzt ganz offiziell

06:22.720 --> 06:24.720
nicht der wendler

06:27.040 --> 06:29.040
Ganz ganz offiziell

06:29.920 --> 06:31.920
Ganz ganz offiziell

06:32.160 --> 06:38.360
Hab ich mir nix zu schulden kommen lassen guck dir warum hat das eigentlich 160 like so random einfach 160 likes

06:39.680 --> 06:47.080
Weil ich keine eintragung habe auf meinem führungszeug ist also leute ich habe mir den vertrag geholt bei o2

06:48.240 --> 06:50.240
weil

06:50.240 --> 06:52.360
Ich habe wir haben das sogar im stream gemacht

06:54.280 --> 06:56.280
Wir haben anbieter verglichen

06:57.280 --> 06:59.280
Und sind zu dem schluss gekommen

07:01.880 --> 07:05.800
Das o2 für mich das beste angebot hat preisleistungstechnisch

07:06.520 --> 07:08.520
und dass ich mehrere

07:09.320 --> 07:11.320
datenkarten haben kann

07:11.400 --> 07:17.560
Und dass ich e sims haben kann multisims haben kann so fand ich ganz gut preislich ist auch ok 40 gigabyte im monat für

07:17.840 --> 07:19.760
Keine ahnung ich habe es vergessen

07:19.760 --> 07:21.920
zumindest ich habe mir ein o2

07:22.920 --> 07:29.640
Starter set bestellt bei denen oder so ein o2 set mit dem vertrag zusammen kam per post und dann habe ich das ganze

07:30.040 --> 07:31.720
aktiviert morgens

07:31.720 --> 07:36.800
Denkt man sich ja nichts böses dabei ja man legt simkarten ins handy

07:38.040 --> 07:40.040
geht auf die aktivierungswebseite

07:41.040 --> 07:43.240
gibt seine puck und seine

07:44.800 --> 07:47.440
Simkarten nummer ein und was es da noch alles gibt

07:47.920 --> 07:54.040
Muss namen eingeben und zeug und dann ist gut das ist mir gar zu klassisch mario hier jetzt

07:56.800 --> 07:58.800
Exzellent

08:00.320 --> 08:02.320
Und

08:07.200 --> 08:09.760
Wo ist mein twitter jetzt hin habe ich mein twitter auf

08:09.760 --> 08:12.280
Terraform ne mit terraform mache ich heute eh nix

08:13.920 --> 08:15.920
Ok zumindest

08:16.800 --> 08:22.640
Hat das aktivieren der simkarte funktioniert und nachdem du deine simkarte aktiviert hast steht ja auch in dieser

08:22.960 --> 08:29.680
o2 start anleitung drinne soll man sich einfach einen o2 account dann mit dieser nummer erstellen und dann kann man sich dann

08:29.680 --> 08:34.480
Damit einloggen und dann kann man dann alle möglichen sachen sehen und vor allem kann man auch die

08:34.480 --> 08:40.800
Rufnummern portierung direkt über das web interface beauftragen also in seinem account also kein problem simkarte aktiviert

08:41.440 --> 08:43.440
versucht account anzulegen

08:43.760 --> 08:48.880
Und jedes mal wenn ich mich einlogge in mein account kommt das hier ich sehe nichts in meinem account also ich kann weder gucken wieviel habe ich verbraucht

08:50.400 --> 08:54.080
Wie viel ist noch übrig ich kann auch keine rufnummer portierung beauftragen

08:54.880 --> 08:56.880
Ich kann auch keine rufnummer portierung beauftragen

08:57.360 --> 08:59.360
Ich kann auch keine rufnummer portierung beauftragen

09:00.160 --> 09:04.320
Oder wie viel ist noch übrig ich kann auch keine rufnummer portierung beauftragen

09:06.080 --> 09:08.000
Wohlgemerkt

09:08.000 --> 09:13.280
Könnte ich theoretisch über ein formular eine rufnummern übernahme beauftragen aber ganz im ernst

09:13.920 --> 09:18.640
Ich möchte nicht meine rufnummer zu einem account umziehen oder bei einem anbieter bleiben

09:18.920 --> 09:23.680
Der nicht in der lage ist die einfachsten dinger auf die reihe zu bekommen nämlich

09:24.160 --> 09:26.160
einen login in meinen account

09:26.880 --> 09:30.800
Du hast die schon seit über einem jahr na geil so zumindest

09:31.760 --> 09:33.760
Was habe ich gemacht?

09:33.760 --> 09:39.520
Ich habe bei der hotline angerufen und die hotline hat gemeint da da müssen sie warten einen tag

09:40.560 --> 09:47.440
Ich habe den ich habe den dann auch noch gefragt so das haben sie sich jetzt nur ausgedacht oder um mich zu beruhigen also das wird morgen auch nicht gehen

09:47.440 --> 09:51.680
Doch doch das wirkt drehen na okay habe ich mir gedacht naja

09:51.840 --> 09:56.160
Übliche beruhigungsversuche wird wahrscheinlich nicht so wird wahrscheinlich nicht stimmen

09:57.040 --> 10:02.800
Zwischenzeitlich noch ein bisschen auf twitter gepostet die leute verrückt gemacht noch mal hotline angerufen der hotline typ meinte

10:02.800 --> 10:04.800
Oh das sieht aber merkwürdig aus

10:05.280 --> 10:11.280
Und sagt ich muss kurz rücksprache halten also wohlgemerkt der zweite hotline typ ich muss kurz rücksprache halten

10:12.000 --> 10:15.760
Und dann hat er mich 30 minuten in die warte schleife gelegt und auf einmal war ich weg

10:17.280 --> 10:19.280
Dann habe ich ein bisschen rumgespammt

10:19.600 --> 10:23.680
Dann habe ich ein bisschen rumgespammt auf twitter ich meine man sieht es ja hier

10:24.560 --> 10:26.560
Ich habe hier gemeckert über

10:27.600 --> 10:31.440
Ich habe hier gemeckert über über o2 und ich habe hier gemeckert über o2

10:32.160 --> 10:34.160
und irgendwann

10:36.800 --> 10:40.120
Bin ich dann auf die idee gekommen ich könnte mich ja mal

10:44.200 --> 10:46.200
Bei

10:47.160 --> 10:49.160
Alter

10:49.920 --> 10:52.320
Gatschi gatschi bus man

10:54.400 --> 10:56.400
Twitter please

10:58.400 --> 11:02.000
Musst ja schon aufpassen wo du auf seinem eigenen profil runter scrollst man

11:05.120 --> 11:13.640
Ich war ich war kurz ich trau mich nicht weiter zu scrollen ich trau mich nicht weiter zu scrollen keine ahnung was da gleich kommt

11:17.200 --> 11:24.880
Zumindest irgendwann hat dann auch einer von o2 ich muss jetzt wirklich aufpassen wo ich hier so dann hat er

11:24.880 --> 11:28.720
Dann einer bei o2 geschrieben sie können hier eigentlich auch nix machen

11:29.120 --> 11:33.600
Ich soll mal ich soll mal in die community ich soll mal in die community gehen

11:34.320 --> 11:36.320
Ich kann nicht drücken ich bin nicht mal eingeloggt

11:37.040 --> 11:43.560
Also sie zeigen tossbeiträge wenn man nicht eingeloggt ist also bin ich bin ich in die o2 community und habe folgenden thread aufgemacht

11:44.560 --> 11:46.560
Man

11:46.880 --> 11:54.000
Also ich finde ich habe das den passenden user name gewählt für meinen und auch den passenden avatar für meine

11:54.800 --> 11:56.800
community beiträge

11:58.560 --> 12:05.200
So und ich habe die o2 community gefragt simkarte aktiviert blablabla gibt fehler wenn ich mich einloggen kann ich muss ich muss

12:05.200 --> 12:07.480
Ach ja das habe ich ja ganz vergessen zu erzählen

12:08.200 --> 12:13.920
Da ist irgendwas total kaputt weil der erste typ bei der hotline hat mich mit falschem namen

12:14.440 --> 12:22.360
Angeredet der weiß ja eigentlich wie ich heiße und er meinte her k. Punkt ich heiße nicht kam mit anfangs buchstabe nachname

12:22.640 --> 12:29.640
Herr k. Punkt was wer zum teufel ist her k. Punkt also bei denen ist irgendwas total im arsch vielleicht hatte her k. Punkt vor 20

12:29.640 --> 12:32.760
Jahren war die gleiche ruftnummer ich weiß es nicht zumindest

12:32.760 --> 12:34.760
Aber ich

12:35.280 --> 12:39.400
Ich aufgemacht so weiter geht es dann wurden dann wurden haben

12:39.800 --> 12:46.880
Das sind ja übrigens keine also auch wenn niemand denkt dass in wohnen von mitarbeiter sind keine wohnen von mitarbeiter das sind freiwillige community helfer

12:48.000 --> 12:53.100
Da habe ich das habe ich schon gemacht kein problem ich bin ja nicht der übelste k. Punkt wenn ich das dann lese

13:00.160 --> 13:02.160
Als hätte ich das nicht gemacht ja

13:02.760 --> 13:07.840
Als hätte ich nicht passwort vergessen gemacht na gut weiter weiter bla bla bla bla bla bla

13:08.160 --> 13:14.880
So und irgendwann habe ich dann mein gift gepostet hier habe ich den gift gepostet wie ich mich einlogge und wie es halt nicht geht

13:14.880 --> 13:17.720
Ich logge mich mit der ruftnummer ein und es geht nicht

13:22.680 --> 13:29.760
Also ich weiß die leute werden jetzt wieder verlangsamen gucken ob ich hier gerade irgendwo meine ruftnummer geleakt habe oder mein passwort vielleicht geleakt habe

13:29.760 --> 13:31.760
Oder so habe ich aber nicht

13:32.760 --> 13:34.760
gut

13:35.400 --> 13:40.200
Einer person gefällt das wer gefällt das autokat ja gefällt das ok mal katja find es nice dass ich

13:40.960 --> 13:44.960
Gifts poste high high iq user mögen sie

13:45.400 --> 13:49.280
So also bla bla bla und da liegt ein technisches problem vor ach nee

13:50.160 --> 13:52.160
Ok

13:52.320 --> 13:57.880
Und jetzt kommt jennifer um die ecke das muss ich ja sagen also auch wenn ich jetzt ein bisschen auf autos schimpfe

13:58.320 --> 14:00.320
Jennifer gibt sich zumindest mühe

14:00.960 --> 14:06.640
Jennifer hat es bis jetzt schon nicht hinbekommen dass es funktioniert beziehungsweise die kann das ja nicht machen sie kann ja nur ihre

14:07.960 --> 14:13.080
Support das ist jennifer als first level support die hat weder ahnung davon noch hat sie rechte dazu was zu machen

14:13.840 --> 14:15.960
das muss ja auch als first level support nicht

14:16.760 --> 14:22.120
Und sie hat es verstanden und sie kümmert sich drum so jennifer hat ein ticket aufgemacht

14:23.720 --> 14:27.840
Jennifer hat ein ticket aufgemacht und dieses ticket wurde ein tag später geschlossen

14:28.440 --> 14:31.480
Mit der meldung per sms der fehler ist behoben

14:32.440 --> 14:36.840
Selbstverständlich war der fehler nicht behoben ich glaube so viel so viel ist schon mal klar wenn ich jetzt schon das würde ich

14:36.840 --> 14:41.360
euch das ja nicht erzählen der fehler war selbstverständlich nachdem das ticket geschlossen wurde nicht behoben

14:42.240 --> 14:47.800
Also dann geht es noch weiter bla bla bla bla bla bla bla bla bla bla bla bla

14:48.920 --> 14:55.360
Jennifer hat erkannt woran es liegt also jennifer weiß zumindest schon mal ein bisschen mehr als der nur nach 15 first level support

14:55.360 --> 14:57.360
Also sie blickt da schon ein bisschen mehr durch

14:57.840 --> 15:00.800
So bla bla bla bla bla bla bla bla

15:01.360 --> 15:02.880
so

15:02.880 --> 15:08.480
Und dann habe ich ich poste da jetzt auch jeden tag ich poste als jeden tag ein tag gewartet und es geht immer noch nicht

15:10.240 --> 15:16.800
Ticket ist aufgemacht so jetzt hat sie ein zweites weiteres ticket aufgemacht in der hoffnung es wird das alles ein wenig

15:17.160 --> 15:22.320
Beschleunigen es geht immer noch nicht weiterhin gleicher fehler mit paar stunden abstand dazwischen

15:22.480 --> 15:29.760
So und heute morgen hat sie geschrieben das ticket ist es ist sehr bedauerlich das ticket ist immer noch da habe ich nichts mehr drauf geantwortet

15:30.800 --> 15:36.320
Weil wisst ihr was ich jetzt gemacht habe in der zwischenzeit achso und dann dann habe ich mich dazu entschieden

15:36.800 --> 15:39.160
Ich werde jetzt jeden tag auf twitter

15:40.120 --> 15:42.120
posten

15:43.120 --> 15:45.120
Can't do

15:45.240 --> 15:50.960
Dass es immer noch nicht geht so natürlich natürlich bin ich ja nicht total bescheuert

15:51.600 --> 15:55.920
Was habe ich gemacht ich habe mir ein aldi torque starter set geholt

15:56.840 --> 16:04.480
Und habe heute ein aldi ein aldi torque starter set aktiviert und habe bei aldi torque die rufnummer mitnahme beauftragt

16:04.920 --> 16:09.760
Was innerhalb von acht stunden funktioniert hat also den termin zur ruftnummer also

16:10.680 --> 16:17.640
Aldi torque hat aktiviert account angelegt ich habe ruftnummer mitnahme beantragt die haben jetzt gesagt nächste woche mittwoch wird die ruftnummer umgezogen

16:18.240 --> 16:20.240
also aldi doch hat es alles innerhalb von

16:20.800 --> 16:25.880
7 8 stunden komplett hinbekommen abgewickelt und das obwohl ich mich verschrieben hatte

16:26.360 --> 16:32.200
Bei der ruftnummer portierung die erst abgelehnt wurde also ich habe mehrere ruftnummer portierung anfragen allesamt gleich nach hat funktioniert

16:32.840 --> 16:36.560
Aldi torque ging einfach so jetzt ist die sache

16:37.360 --> 16:44.760
Ich werde folgendes machen das habe ich übrigens jennifer auch geschrieben sagt eigentlich ist es zu spät ich habe jetzt bin jetzt schon bei einem anderen anbieter

16:45.320 --> 16:49.660
Aber ich lasse es weiter laufen leute ich lasse es weiter laufen

16:50.880 --> 16:54.400
Und wenn es nur ist um jeden tag auf den sack zu gehen

16:56.120 --> 17:02.800
Ich poste jetzt jeden tag in diesem thread dass es nicht funktioniert und ich poste jeden tag

17:03.240 --> 17:07.000
Auf twitter dass es nicht funktioniert das wird nämlich o2

17:07.520 --> 17:15.360
Ich wieder rufe den vertrag nicht ich wieder rufe den vertrag nicht ich bezahle dafür die 12 euro im monat nur um o2 flamen zu können

17:15.360 --> 17:17.360
Das ist mir egal

17:17.720 --> 17:21.800
Und vielleicht kriegen sie es ja hin ich kann die ruftnummer doch noch portieren dann halt von aldi dahin

17:24.920 --> 17:27.080
Und jetzt kommt jetzt kommt der hit

17:31.800 --> 17:33.800
Jetzt kommt der hit

17:34.520 --> 17:39.880
Es haben schon meinen tweet von heute morgen dass es o2 wieder nicht hinbekommen hat

17:40.520 --> 17:42.840
Wieder nicht hinbekommen hat über

17:43.360 --> 17:48.880
10.000 leute gesehen man hat jetzt ja neuerdings gescheite analytics für für die für die tweets über

17:49.400 --> 17:54.160
10.000 leute haben den tweet gesehen also wissen dass ich mache das so lange

17:55.360 --> 17:57.240
bis entweder

17:57.240 --> 18:00.500
irgendein marketing mensch von o2 einschreiten muss

18:02.920 --> 18:04.920
Oder sonst was keine ahnung

18:05.920 --> 18:12.920
Also ich werde ich werde jeden tag ich werde jeden tag posten hier und ich werde jeden tag auf twitter posten

18:15.680 --> 18:17.680
Einfach nur um die abzufacken

18:21.040 --> 18:23.040
Marcel davis ist nicht von o2

18:24.680 --> 18:28.360
Aber die sehen auch blau die sind auch blau von dem anbieter wo der herkommt

18:31.160 --> 18:33.160
Also

18:35.800 --> 18:40.440
Also leute das wird jetzt das wird jetzt jeden tag leider leider gezwungenermaßen

18:43.680 --> 18:47.960
Wir feiern den zwei millionsten kommentar war ich das vielleicht

18:54.040 --> 18:56.480
Wer verfasst moment

18:57.200 --> 19:01.040
Fakt ich habe es ich habe knapp ich habe knapp verpasst

19:04.320 --> 19:11.320
Den o2 kenne du gemt der für mich jeden tag postet ich poste schon selbst das mache ich das poste ich selbst

19:12.400 --> 19:15.080
Also ich werde ich werde den jetzt jeden tag

19:16.600 --> 19:24.000
Ich werde den jetzt jeden tag posten ich werde den jetzt jeden tag posten ich werde den jetzt jeden tag posten

19:24.000 --> 19:29.440
Also ich werde ich werde den jetzt jeden tag gehöre ich auf den sack gehen

19:31.640 --> 19:38.240
Und wie gesagt über 10.000 bis morgen sind 15.000 leute leute ich habe euch miss erzählt offiziell also bei mir in der app ich sehe

19:38.240 --> 19:40.240
Schon über 10.000 aber leute

19:42.880 --> 19:48.640
Ah, nee, okay, okay, whoo, aber mal klück gehabt noch mal klück gehabt doch kein mist erzählt

19:54.480 --> 20:00.120
Nee das das bleibt nur der bahn vorenthalten atheno dankeschön für den sub

20:03.040 --> 20:06.120
Warum hat der bahnheit eigentlich abgenommen ganz einfach

20:06.760 --> 20:14.180
Ich habe zwar immer noch die ansage dass ich gefälligst 50 prozent beziehungsweise zwei tage bei mir die woche

20:14.480 --> 20:17.080
Im büro sein soll aber ich mache das einfach nicht mehr

20:18.720 --> 20:20.600
Und ich denke mir so ey

20:20.600 --> 20:22.940
Schmeißt mich doch raus wenn es euch nicht gefällt

20:23.500 --> 20:26.100
Weil ich habe ja eh schon gekündigt zu ende des monats

20:28.660 --> 20:31.980
Die können im prinzip einfach gar nichts mehr machen was sollen sie machen ja

20:32.580 --> 20:37.780
Ich fahre einfach nicht mehr hin zweimal die woche und einmal die woche halte ich irgendwie aus mit der bahn

20:41.180 --> 20:46.020
Kannst du generell was zu deinem kubernetes ja kubernetes kubernetes kubernetes

20:46.860 --> 20:54.800
Hier ist ja auch die frage ist es k8s oder ist es kates habe ich auch schon gehört wobei ich sagen muss kates

20:55.460 --> 20:57.900
Ist irgendwie sehr unvorteilhaft die abkürzung

21:01.540 --> 21:09.500
Ja kann ich was zu sagen das ist die simpelste variant die es überhaupt gibt zum ausprobieren lokal mit minikube das ist kein cluster

21:09.820 --> 21:15.820
Ich habe kein extra note irgendwie jeder heim und raspberry pi oder sonst was wir machen das ganz billig

21:16.020 --> 21:21.380
In der vm mit minikube und docker drin fertig braucht man ja auch nicht brauchen wir ein riesen cluster um ein bisschen rum zu basteln

21:22.380 --> 21:27.180
Ansonsten in zukunft ist es höchstwahrscheinlich fast ausschließlich google cloud

21:27.940 --> 21:29.940
Und da bin ich mir noch nicht ganz sicher

21:30.460 --> 21:37.380
Wie gut weil aktuell ist es also bei meinem aktuellen arbeitgeber ist es es kubernetes also man managt

21:39.420 --> 21:42.300
Wie hat man das managt hostet also

21:42.620 --> 21:45.900
Es ist kubernetes service

21:47.860 --> 21:50.500
Und in zukunft ist wahrscheinlich hauptsächlich google

21:52.060 --> 21:54.540
Und da bin ich mir noch nicht sicher wie gut

21:55.900 --> 22:03.820
Die geschichte mit google autopilot mit dem kubernetes autopilot funktioniert ob man vielleicht sogar noch weniger selbst managen muss

22:04.620 --> 22:08.780
Bei dem google kubernetes cluster mit autopilot wie ohnehin schon

22:08.940 --> 22:12.380
Mal gucken wie gut das taug das weiß ich nicht habe ich keine praktischen erfahrungen mit

22:13.340 --> 22:18.180
Ansonsten in zukunft wahrscheinlich aus ausschließlich oder nahezu ausschließlich google

22:20.500 --> 22:22.500
Kubernetes

22:30.300 --> 22:34.900
Soll er machen selbst wenn er mir ein schlechtes zeugnis ausstellt wird mich das nicht jucken

22:39.300 --> 22:43.980
Ich habe nun super poggers zwischenzeugnis wird schwierig das irgendwie jetzt zu begründen

22:45.580 --> 22:48.460
Meinung zum thema als start up in die cloud

22:49.700 --> 22:51.700
Das ist wahrscheinlich das beste was du machen kannst

22:52.540 --> 22:57.420
Also es kommt natürlich ein bisschen auf deinen service und die größ an wenn du in ein mann entwickler bist

22:57.660 --> 23:00.940
Der noch nicht mal irgendwie einen ordentlichen prototyp am laufen hat

23:01.260 --> 23:05.860
Wenn du einfach nur ein bisschen was online stellen willst kannst auch eine vm nehmen mit

23:05.940 --> 23:11.460
Der anwendung drauf und im reverse proxy davor also man muss es ja nicht übertreiben und

23:12.660 --> 23:19.140
Selbst wenn zufälligerweise pewdiepie ein video über deinen service macht kannst du immer noch mal auf die schnelle ram und cpu hochskalieren

23:21.300 --> 23:26.340
Gut ist das dürfte unterm strich wahrscheinlich die einfachste variant und auch die billigste variant sein

23:26.500 --> 23:28.500
Und naja gut

23:28.500 --> 23:35.700
Der vorteil ist davon du musst dich weder mit serverless geschichten noch mit kubernetes und sonst was beschäftigen du kannst es einfach

23:36.500 --> 23:38.980
relativ schnell aufstehen ich meine ganz im ernst vm

23:39.780 --> 23:47.300
Ich weiß leute die die sich gut mit kubernetes ausgehen die sagen so überhaupt kein akt kubernetes cluster ist schnell aufwärts das stimmt das stimmt man muss aber

23:47.700 --> 23:49.700
an ganz vielen stellvertretungen

23:50.260 --> 23:52.400
Dass man es eben gescheit macht

23:53.400 --> 23:58.100
Wenn man bisschen liebungserfahrung hat ist so eine vm-easy angelegt web interface clip click Vaater und drauf

24:00.000 --> 24:06.040
Ja aber wenn man ein bisschen bisschen was größeres forum finde ich ist das die logische die logische konsequenzen weil was bleibt

24:06.040 --> 24:08.680
Dir denn realistisch hierarchاي niemand der sayt belongs in deiner工作stelle

24:09.900 --> 24:13.020
Also so dieses reais vastly

24:13.880 --> 24:17.180
Etwa in der kunstprinenger

24:17.180 --> 24:23.220
Bleibt dir denn realistisch betrachtet als datum anderes übrig eigenes rechenzentrum wirst ja wohl kaum betreiben können

24:24.700 --> 24:28.940
Und bei der wayne vm ist auch klaut solange sie nicht auf deinem esx läuft

24:30.980 --> 24:32.180
Also

24:32.180 --> 24:38.220
Wissen wir ist kein eigenes rechenzentrum betreiben wollen du hast auch weder du hast auch nicht die anbindung dafür um dir mal

24:38.540 --> 24:40.540
Irgendwie den server und dann schreibt dich zu stellen

24:40.540 --> 24:46.060
Also ich finde gerade für start ups ist die logische konsequenz eigentlich in krempel in der cloud zu hosten

24:47.740 --> 24:49.180
Sofern ich

24:49.180 --> 24:51.180
irgendwelche

24:51.180 --> 24:53.740
Ich zum beispiel datenschutzgründe oder so

24:54.860 --> 25:01.180
Dagegen sprechen je nachdem was das startup macht ja flubio du kannst ja ein bisschen was erzählen vielleicht können wir mehr dazu sagen

25:01.980 --> 25:04.220
Damit wollte ich mich noch beschäftigen habe ich nicht

25:04.540 --> 25:11.500
Es gibt ja noch mehr möglichkeiten für lokale installation als minikube minikube ist ja noch nicht mal dafür gedacht dass man darauf wirklich sachen laufen lässt

25:11.500 --> 25:13.500
Sondern das ist für lokales basteln gedacht

25:15.740 --> 25:24.540
K3s ist quasi so ein light weight kubernetes was weniger ram braucht weniger cpu braucht und ich glaube die sagen selbst sie sind besonders gut geeignet für

25:25.340 --> 25:33.900
K3s ist quasi so ein light weight kubernetes was weniger ram braucht weniger cpu braucht und ich glaube die sagen selbst sie sind besonders gut geeignet für

25:35.100 --> 25:37.100
zum beispiel irgendwie

25:37.580 --> 25:39.580
self-hosted raspberry pi cluster und solche geschichten

25:40.700 --> 25:42.700
so was hat der

25:44.540 --> 25:51.580
Der twingo eigentlich jetzt zu flux geschrieben ich finde einfach den ansatz von flux besser wir haben von argots ja flux weil es einfach besser in den

25:52.060 --> 25:54.220
nativen kubernetes ansatz passt

25:55.980 --> 26:01.220
Okay es schadet ja nix sich mit allen möglichen sachen mal zu beschäftigen

26:05.020 --> 26:11.980
Also du kannst ja limits setzen wo habt ihr die wo habt ihr die vor einem laufe bei google oder wie

26:17.740 --> 26:21.260
Ja also du kannst bei den meisten cloud anbietern ja irgendwelche limits setzen

26:22.860 --> 26:24.860
Was du was du ausgeben kannst

26:26.460 --> 26:29.500
Also du kannst ja limits setzen bei google oder wie

26:34.220 --> 26:36.220
Ja

26:49.740 --> 26:52.860
Das kann man so pauschal nicht sagen ich glaube es kommt drauf an

26:53.660 --> 26:57.500
Was man für leute hat wenn man hauptsächlich leute hat die sich

26:58.540 --> 27:00.860
mit linux die linux hintergrund haben

27:01.500 --> 27:08.060
Dann ist wahrscheinlich eine vm mit linux drauf einfacher zu betreiben für die weil serverless allein jetzt irgendwie ein paar

27:08.780 --> 27:10.780
zeilen dotnet

27:10.780 --> 27:14.140
java python sonstige go was halt beliebte sprache dafür sind

27:15.260 --> 27:20.900
in irgendein funktion workload pappen ist ja das eine aber du hast ja

27:22.780 --> 27:29.780
Damit noch kein service der gescheit funktioniert du hast einen endpunkt den du aufrufen kannst der dann irgendwelche statischen dinger ausgeben kann oder so

27:29.780 --> 27:32.020
Das ist ja nicht in uns weg das sagen du brauchst dann auch noch

27:34.500 --> 27:40.780
Du brauchst dann auch noch irgendwie die möglichkeit dann zeug persistent zu machen du musst ja noch die passende cloud datenbank dazu verwenden

27:41.340 --> 27:48.380
Dies ja jeder große cloud anbieter hat aber musst du dich auch damit auseinandersetzen also ich denke wenn du viele leute mit linux hintergrund hast ist

27:49.220 --> 27:51.220
linux vm sich mieten

27:52.260 --> 27:53.780
Darauf

27:53.780 --> 27:55.780
postgres zu installieren und

27:56.540 --> 27:57.700
in den

27:57.740 --> 28:01.140
Dienst drauf zu klatschen im reverse proxy davor wahrscheinlich einfacher

28:01.460 --> 28:07.500
Als ich erst mal in irgendwelche cloud native entwicklung einzuarbeiten wenn man wiederum leute hat die sich damit auskennen

28:07.820 --> 28:09.540
Dann ist das

28:09.540 --> 28:15.260
Wahrscheinlich unterm strich die einfachere sache also wenn man mal davon ausgeht dass du leute hast die sich mit beidem gut auskennt

28:15.260 --> 28:20.900
Dann hast du recht dann ist wahrscheinlich dass die einfachere variante aber das kann man ja nicht nicht unbedingt voraussetzen

28:21.900 --> 28:23.900
Das ist richtig ja

28:27.700 --> 28:33.540
Also gut ich meine cloud also google google cloud ist für vm ist jetzt auch nicht unbedingt besser

28:34.100 --> 28:40.820
Als als ova oder hetsner oder sonst was mein du hast natürlich mehr auswahl im google ökosystem vm ist vm

28:42.500 --> 28:49.380
Ich muss sagen ich bin jetzt noch nicht mal gucken beim neuen arbeitgeber verwenden wir ja bloß noch google cloud also da werde ich mich in zukunft

28:49.380 --> 28:51.380
Wahrscheinlich dann auch besser mit auskennen

28:51.580 --> 28:55.580
Ich bin jetzt zum aktuellen zeitpunkt nicht der riesen google cloud

28:56.300 --> 29:02.700
Experte ja also keine ahnung was sie dir alles anbieten du kannst da sicherlich auch vms hoher und runter skalieren und sonst was

29:04.500 --> 29:08.700
Im endeffekt ist es eine vm wenn ihr halt im google ökosystem seid

29:09.180 --> 29:12.780
Habt ihr die chance noch mehr von denen zu verwenden ihr könnt zum beispiel die

29:13.540 --> 29:17.280
Im endeffekt ist ist eine vm wenn ihr halt im google ökosystem seid

29:17.820 --> 29:21.260
Habt ihr die chance noch mehr von denen zu verwenden ihr könnt zum beispiel die

29:21.660 --> 29:26.720
Die hausend postgres geschichte von denen ist sehr nice wenn man sich leisten kann oder man einen bock drauf hat

29:27.300 --> 29:28.700
oder generell

29:28.700 --> 29:33.220
Managed;; managen bank also ich denke wenn man das dann wirklich sich dafür entscheidet

29:33.780 --> 29:37.380
Seine sachen in der cloud zu betreiben dann sollte man es auch richtig machen

29:38.540 --> 29:40.540
Also sprich dann kann man auch

29:41.540 --> 29:43.940
Managed datenbank verwenden

29:47.420 --> 29:49.420
Und man kann die managed

29:50.500 --> 29:52.500
Container registry verwenden

29:53.340 --> 29:54.380
und

29:54.380 --> 29:56.380
irgendein managed

29:56.980 --> 30:03.020
No sql datenbank oder was auch immer oder ein managed wenn man das denn wirklich wenn man denn eben was gut

30:04.460 --> 30:07.460
Containerisieren kann an seinen anwendung auch eine managed kubernetes

30:07.980 --> 30:12.620
Gerade mit autopilot soll das ziemlich gut sein wobei ich wie gesagt habe ich noch nicht ausprobiert

30:13.420 --> 30:17.660
Ja deswegen also wie gesagt die dinger sind meist bei asia auch also

30:18.220 --> 30:23.300
viel billiger als ova und hetzner wirst du bei google garantiert nicht recht nicht hinkommen und

30:24.540 --> 30:26.820
Also die haben ja auch ordentliche ordentliche

30:28.060 --> 30:34.540
Oms im angebot da kannst du teilweise bei hetzner kannst du glaube ich kisten bis zu 24 kerne oder so mieten

30:37.860 --> 30:44.180
Ja s3 ist natürlich auch was nice ist für persistence muss dir keine gedanken mehr machen um irgendwelche

30:46.780 --> 30:52.860
Filelocks und sonst was also wenn man wenn man wirklich dann in die cloud geht also wenn man sich dafür entschieden hat zu sagen

30:52.860 --> 30:57.700
Hey, wir machen jetzt ein größeres fass auf ich finde dann sollte man es auch richtig machen cloud storage

30:58.220 --> 31:04.900
cloud managed datenbank managed no sql managed container registry alle möglichen dinger die es denn dann so gibt weil

31:05.660 --> 31:12.660
Dann hast du einfach weniger administrativen auffangen man hat anderen administrativen auffangen aber da ist finde ich nicht so groß wie bei einer riesen flotte

31:13.380 --> 31:18.420
lielungskisten die du dich kommt wurde dich selbst komplett drum kümmern muss bei den dinger muss verwalten muss updaten du musst

31:18.860 --> 31:20.260
security

31:20.260 --> 31:25.300
Früher waren es mailinglisten heute muss heute irgendwelche feeds dir angucken

31:27.900 --> 31:29.900
Du musst schauen dass das ding auch

31:30.740 --> 31:38.820
Synchron bleibt zwischen den einzelnen klassen aus dem klassen selbst einrichten das ist alles was das kann man machen bringt aber meistens gar nichts

31:50.420 --> 31:52.420
Ja dann lohnt sich nicht

31:54.140 --> 31:55.820
Also

31:55.820 --> 31:58.620
zumindest nicht das was ich gesagt habe also

31:59.460 --> 32:00.980
Ich

32:00.980 --> 32:02.980
Wenn die dinger so custom sind

32:03.940 --> 32:09.980
Also wenn man die die coolen sachen aus der cloud nicht verwenden kann die einem das leben leichter machen

32:10.220 --> 32:14.460
Dann ist halt auch die die frage obssönig ist ja wobei man halt sagen muss

32:14.900 --> 32:20.180
Was ist einer was ist einer container registry so custom ist dass es nicht geht also ich wüsste gar nicht wie man die

32:23.020 --> 32:25.020
Also

32:25.140 --> 32:27.420
Container registry ist ja eine container registry so

32:29.100 --> 32:31.100
Sie machen ja alle das gleiche

32:31.540 --> 32:37.420
Es ist jetzt nicht so dass die die die docker container registry groß anders ist als die github container registry

32:37.620 --> 32:42.860
von der api vom ansprechen her ja gut aber gut ich war ich weiß ja nicht wie euer zeug ist

32:44.740 --> 32:50.400
Das muss man natürlich dann machen also man muss also finde ich zumindest wenn man den schritt macht von von

32:50.940 --> 32:52.860
selbst gebastelt vms

32:52.860 --> 32:57.740
Zu mehr cloud services dann muss ich es auch lohnen und lohnen finde ich tut sich das nur

32:57.860 --> 33:03.940
Wenn man auch möglichst viel von den bereitgestellten services benutzen kann so dass man halt selbst den aufwand nicht mehr hat

33:03.940 --> 33:06.700
Das ist ja gerade der vorteil an der ganzen cloud geschichte

33:07.780 --> 33:11.660
Wenn ich dann doch wieder alles selber secret manager zum beispiel ja

33:15.100 --> 33:20.740
Ja ist individuelle geschichte muss man gucken ob es das lohnt

33:20.740 --> 33:22.740
Ja

33:25.540 --> 33:27.540
Kollege und ich wir sollten

33:27.700 --> 33:33.180
Vielleicht irgendwann eine eigene consulting firma machen da kann ich den stream dazu benutzen leute zu

33:35.100 --> 33:41.780
Akquirieren soll ich sagen ja dazu kann ich dir alles erzählen was du willst melde dich mal bier bei mir

33:41.780 --> 33:43.780
Ja

33:46.100 --> 33:51.460
Schön hast du den weg her gefunden hat der final faulenzer ach nee der feiner schuld ich habe fein

33:51.820 --> 33:54.100
Faulenzer fragt mich nicht wie ich da drauf gekommen bin

33:56.420 --> 34:00.580
Ne gut jetzt haben wir genug gelabert ich schaue noch mal kurz drüber

34:02.420 --> 34:05.140
Serverless ist gratis naja

34:08.100 --> 34:10.540
Ich weiß nicht ob man das so pauschal sagen kann

34:11.900 --> 34:14.540
Das kommt darauf an wie viel serverless du machst

34:19.540 --> 34:23.620
Also die meisten die serverless machen für die ist es bestimmt nicht gratis

34:28.100 --> 34:32.660
Wenn du im free kontingent bleibst bei deinem jeweiligen anbieter dann ist das gratis

34:35.340 --> 34:37.340
Das ist ein bisschen wie

34:37.580 --> 34:44.320
Bei google maps google maps hat ein relativ großzügiges free kontingent aber danach ist es abfakt teuer

34:50.620 --> 34:58.100
Das ist das google service mit dem habe ich schon erfahrungen gesammelt wir haben also ein kleines projekt gebastelt mit für den ruten planer

34:58.780 --> 35:02.980
Für so wo man so so und das war das war eher so ein so ein

35:03.940 --> 35:08.100
Prototyp was wir da gebaut haben da konnten handwerker konnten eintragen

35:10.500 --> 35:13.460
Wo sie termine gemacht haben

35:14.300 --> 35:17.780
Und wann die termine sind und der ruten planer hat dann den

35:18.420 --> 35:24.460
besten weg errechnet zwischen den kunden dass sie zu der jeweiligen urzeit da sind das ist gar nicht so eins gar nicht so einfach

35:24.900 --> 35:26.700
das ist ja quasi

35:26.700 --> 35:31.260
Wie heißt das so schön traveling salesman problem mit time windows lots

35:32.220 --> 35:38.420
Hab ich natürlich nicht selbst gemacht ich habe eine fertige open source projekt von github benutzt damals

35:39.740 --> 35:41.740
Was

35:42.380 --> 35:46.580
Quasi den ruten planer implementiert hat explizit für

35:47.340 --> 35:53.340
Solche aufgaben fälle und dann auf open street maps zurückgegriffen hat für für die ruten planung

35:55.060 --> 36:00.700
Jetzt ist tatsächlich nicht einfach es ist auch nicht abschließend gelöst aber du kannst mit genug umprobieren gute lösungen finden

36:01.420 --> 36:03.420
Dass das ging ganz gut

36:03.740 --> 36:07.980
Ist nie was draus geworden aber da habe ich da habe ich erfahrungen gesammelt mit mit google maps

36:08.340 --> 36:12.780
Und das ist schon relativ teuer wenn man das freie kontingent überschreitet

36:21.300 --> 36:23.300
Ja das meinte

36:23.300 --> 36:25.740
Github containeregisterie ist ein witz

36:27.020 --> 36:31.260
Für kostenlos also doch eins ganz gut warum ist sie ein witz

36:34.500 --> 36:38.980
Die benutzen wir heute übrigens auch ich mache mal kurz updates ich mache mal kurz updates leute

36:39.660 --> 36:41.660
Vielleicht habe ich wieder corona ich hoffe ja nicht

36:42.860 --> 36:47.100
Heute hat mich ein kollege angeschrieben von der arbeit den ich am mittwoch den ich also mittwoch

36:47.220 --> 36:54.660
Gestern gestern gestern gestern auf der neben mir gesessen hat auf der arbeit gestern und hat gemeint seit heute ist sein test positiv

37:01.220 --> 37:04.980
Und ihr kennt mich ich bilde mir dann auch ein so nach dem motto mir juckts im hals und sowas

37:06.700 --> 37:08.500
Wir werden nicht keck ws service deployen wir machen wieder so ein

37:08.500 --> 37:14.420
Modus wie das hier ist das ist ein modus wie das hier ist das ist ein modus wie das hier ist das ist ein modus wie das hier ist

37:14.420 --> 37:21.280
Wir werden nicht keck ws service deployen wir machen wieder so eine kleine testapp dafür aber ich mach mal ich mach mal hier die

37:21.860 --> 37:24.060
die vm an und mach mal updates nebenbei

37:25.740 --> 37:29.860
Du hattest es auch erst also ich hatte es einmal bisher und mir reicht es

37:31.700 --> 37:36.700
Eine gute sache ist ich mein ich war davor schon geimpft ich habe es mal bekommen

37:37.380 --> 37:39.380
Und

37:40.380 --> 37:46.780
Die neuen varianten sind ja auch quasi noch ein bisschen unschädlicher als das was ich hatte weil ich war wirklich

37:47.860 --> 37:55.260
14 tage oder drei wochen insgesamt also war ich ziemlich im arsch also richtig kacke was war es so eine so eine woche eineinhalb wochen lang

37:55.380 --> 38:00.260
Aber danach ging es irgendwie nur mal zwei wochen bis ich wieder halbwegs fett war es war mega beschissen jetzt will ich nicht noch machen

38:00.820 --> 38:03.300
Ich kann euch sagen das war wirklich wirklich beschissen

38:06.700 --> 38:12.500
Richtig räudig jemanden also schön zu sagen also ich hoffe nicht dass ich das noch mal habe

38:14.300 --> 38:16.300
Es muss wirklich nicht nicht nicht sein

38:18.220 --> 38:22.380
So wo sind wir denn stehen geblieben das letzte mal bei unserem

38:23.500 --> 38:25.500
kubanides gebastelt

38:27.580 --> 38:29.900
Repos minikube das klingt eigentlich ganz gut

38:29.900 --> 38:35.100
Wir haben das letzte mal nur ganz ganz kleine basics gemacht wir haben

38:37.100 --> 38:39.100
Wir haben

38:40.100 --> 38:42.100
Wir haben

38:43.500 --> 38:50.300
Wir haben ein deployment angelegt mit einer test app drinnen mit health check readiness check

38:51.260 --> 38:54.740
den load balancer service davor und ein reverse proxy

38:54.900 --> 38:59.460
Und der keckle keck weh punktservices alles klar

39:00.420 --> 39:05.140
Nice akubanides cluster am start ich glaube mehr haben wir das letzte mal gar nicht gemacht

39:06.900 --> 39:12.580
Das ist die app so heute muss ich mich erstmal auf github einloggen bin ich hier schon eingeloggen fuck

39:18.500 --> 39:20.020
Check

39:21.020 --> 39:27.900
Ehm chat macht ihr die augen zu ihr guckt nicht hin oder

39:32.300 --> 39:34.300
Guckt ihr alle weg

39:40.900 --> 39:47.780
Ich muss mir sicher sein dass ihr weg guckt bevor ich das eingebe ok alles klar ich glaube euch chat ich glaube euch

39:50.020 --> 39:52.020
Ja

40:08.900 --> 40:14.300
Ups wieder hat er gar nicht rein denn ich war reingehen

40:21.000 --> 40:23.000
randomly

40:24.180 --> 40:27.220
Okay bevor, ich mich noch öffentlich verteppern leute

40:30.580 --> 40:32.580
Okay

40:37.900 --> 40:39.860
Ich meine ich hab zwei fuck der un рублей zu τ

40:43.940 --> 40:45.940
Sms code

40:51.020 --> 40:57.180
Okay alles klar da sind wir wieder

41:00.540 --> 41:02.540
Durch den black screen durch geschaut

41:04.420 --> 41:10.760
Gg eats okay also wir legen mal ein neues repo an new repository private

41:13.700 --> 41:15.700
Krasse krasse banger hier am start

41:20.020 --> 41:24.740
Okay weiter also wir brauchen den repository wir machen es jetzt gleich richtig

41:27.580 --> 41:33.340
Ich mache das repo erst mal private weil ich bin mir nicht ganz sicher was ich alles reinpusche

41:33.660 --> 41:36.620
Ich weiß ob ich will dass jeder alles sieht

41:37.140 --> 41:43.460
Ich meine ihr seht alles im stream ja aber ich bin mir nicht sicher ob ich nicht im hintergrund vielleicht da was ein oder andere reinmachen muss

41:43.660 --> 41:48.460
Ich weiß ich will dass man public sieht weiß ich noch nicht deswegen lasse ich erst mal private wenn am ende des streams nix drinne ist

41:48.460 --> 41:50.460
mach ich es public

41:51.180 --> 41:53.180
Okay

41:54.100 --> 41:57.660
Wir machen es jetzt auch richtig wir machen wir machen zwei repos

41:58.460 --> 42:01.980
Wir machen ein repo für unser ganzes kubernetes zeug

42:02.620 --> 42:06.460
Und wir machen ein repo für unsere app die wir dann deployen in kubernetes

42:06.540 --> 42:13.220
Für unser ganzes kubernetes zeug und wir machen ein repo für unsere app die wir dann deployen in kubernetes

42:14.540 --> 42:16.540
So

42:17.580 --> 42:19.580
K8s

42:21.740 --> 42:24.460
Okay private private templates

42:28.020 --> 42:32.700
Ja das wollte ich euch nämlich zeigen das ist gut den packen wir da schon mal rein

42:36.460 --> 42:39.540
Wir brauchen keine readme scheiß drauf

42:46.620 --> 42:52.140
Mit flux kannst du auch ein mono repo betreiben reicht doch in unterschiedliche ordner aufzuteilen

42:55.020 --> 42:57.740
Das kann ich mit agro cd auch machen wenn ich will

42:59.900 --> 43:02.740
Ich kann auch alles da in eins aber ehrlich gesagt

43:03.700 --> 43:11.060
Ich finde es nicht so sinnvoll infrastruktur jammel konflikt für kubernetes und die anwendung ins gleiche repo zu packen

43:12.820 --> 43:15.300
Also man kann es ganz praktischen gründen

43:15.860 --> 43:23.060
Weil du dann immer das gleich immer das repo anfassen muss wenn die anwendung anfassen außerdem was hat die anwendung mit einer kubernetes konflikt zu tun ja eigentlich gar nix

43:23.860 --> 43:28.180
Und im enterprise umfeld oder im business umfeld sind es auch komplett andere konfig zu machen

43:28.740 --> 43:33.220
Aber normalerweise ist ja derjenige der was in der die anwendung entwickelt überhaupt nicht der

43:34.020 --> 43:41.300
Der die basic kubernetes konfig macht da macht vielleicht die ein oder anderen jammel files explizit für seine anwendung dass er die schön deployen kann

43:41.300 --> 43:43.300
Je nachdem wie man es mit berechtigung gemacht hat

43:47.380 --> 43:54.980
Und das ist auch ganz wichtig die anwendung der jammel konfig macht die anwendung der jammel konfig macht die anwendung der jammel konfig

43:54.980 --> 43:56.980
Also

44:01.940 --> 44:03.940
Also

44:03.940 --> 44:05.940
Klonen wir das ganze mal kurz

44:06.420 --> 44:08.420
ne moment

44:12.340 --> 44:18.100
Ich hoffe ich bin mir nicht ganz sicher ich hoffe ich habe mein ssh key hier

44:20.980 --> 44:22.980
Pack

44:24.980 --> 44:31.060
Ich glaube ich muss den von der alten vm holen der alten vm ist da drauf sein exzellent

44:40.980 --> 44:44.980
Mokka ws swan supreme dankeschön für den sub

44:47.620 --> 44:49.620
Mal das hier zumachen

44:49.780 --> 44:55.060
So ssh keys ich muss mir mal kurz mein ssh key rüber kopieren

44:58.420 --> 45:07.220
System ctl start sshd ip habe ich die da ok alles klar

45:09.780 --> 45:11.780
Kurz zeug rüber kopieren

45:12.100 --> 45:14.100
Ich glaube das ist es so

45:17.140 --> 45:24.100
Fuck man welcher welcher key ist es jetzt eigentlich genau kurz checken

45:26.020 --> 45:28.820
Er gibt nicht so viele keys nice ok

45:31.620 --> 45:34.820
Ich glaube ich muss den von der alten vm holen

45:35.780 --> 45:39.700
Er gibt nicht so viele keys nice ok

45:42.020 --> 45:44.020
Da kopiere ich einfach alle rüber

45:46.980 --> 45:48.980
Punkt ssh

45:50.900 --> 45:54.340
Punkt ssh ok was

46:04.980 --> 46:06.980
Hä

46:15.540 --> 46:18.900
Ach so das geht ja gar nicht ne wollte ich gerade sagen das macht der das macht er hier

46:19.540 --> 46:21.540
ähm stimmt wie mach das

46:22.100 --> 46:24.100
Wahrscheinlich muss ich einmal es capen oder

46:24.500 --> 46:28.980
Das ist eine gute frage siehst du mal manchmal kommt man auf ganz simple simple sachen nicht

46:35.780 --> 46:37.780
Ne wie heißt mein user

46:39.780 --> 46:43.300
Ach max lull ok fast fast fast

46:48.100 --> 46:50.100
Ok nice

46:52.100 --> 46:55.700
Jetzt stimmt wahrscheinlich die jetzt stimmt wahrscheinlich die berechtigung nicht

47:01.140 --> 47:03.940
Doch die berechtigung stimmt alles gut

47:05.300 --> 47:07.300
Alter was mit der musik los

47:13.380 --> 47:18.020
So ich glaube jetzt passt das hier können wir da ausmachen so wenn ich jetzt glück habe darf ich mein

47:19.140 --> 47:22.740
Git repo klonen wobei wir alle wissen dass das das jit repo ist

47:24.340 --> 47:26.340
So klonen

47:27.380 --> 47:29.380
Und und und post jam post

47:30.340 --> 47:33.380
Ach so ja das ist weiß ich dass ich dass ich in empty repo geklaunt hat

47:34.260 --> 47:37.940
So also da sind wir drin das ist unser kubernetes repo

47:40.740 --> 47:42.740
Dann

47:44.500 --> 47:46.500
Ja ist eigentlich gut passt doch

47:47.460 --> 47:49.460
Denke ich das kann man erst mal so lassen

47:51.140 --> 47:55.620
Also unser kubernetes repo da machen wir noch mal einen neuen tab auf für unsere app

47:55.620 --> 47:59.780
Du du du du du du du du

48:02.260 --> 48:05.380
New repo cute app

48:09.540 --> 48:13.620
Private habe ich auch private gemacht der private bla bla bla

48:14.820 --> 48:19.460
Etten wir auch hier dazu bei prometis überhaupt egal machen wir mal

48:20.420 --> 48:24.820
Welchen file editor verwendet auf der kommando zeile wim ansonsten studio code

48:27.460 --> 48:34.260
Jetzt haben wir unsere zwei repos angelegt und checken wir das noch mal schnell aus das shit repo

48:36.420 --> 48:38.420
Git klonen

48:41.060 --> 48:45.220
Okay, dann legen wir doch mal los ich bin gerade überlegen mit was war mit was am besten anfangen

48:46.100 --> 48:50.140
Als erstes würde ich sagen starten wir unseren lokalen kubernetes cluster

48:53.300 --> 48:58.460
Weil ansonsten können wir nichts machen solange nicht gestartet ist ich gehe davon aus wir müssen den heute ein paar mal

48:59.060 --> 49:02.900
Starten und stoppen vielleicht sollte ich mir mal irgendwie so ein clean up script oder so bauen

49:03.460 --> 49:09.300
Aber starten wir das ding erst mal ja also noch mal für alle die beim letzten stream nicht dabei gewesen seid

49:09.540 --> 49:13.580
Wenn ihr lokal und wie gesagt das ist nur für lokal zum ausprobieren gedacht

49:13.900 --> 49:20.860
Wenn der lokal ein bisschen mit kubernetes rum basteln wollte dann kann ich euch nur wärmstens minikube ans herz legen das ist ein

49:22.700 --> 49:27.380
Mini kubernetes single node ich glaube man kann es mittlerweile sogar klassen

49:29.540 --> 49:33.500
Sicher zumindest kann sie verschiedene backends verwenden der kann

49:34.140 --> 49:41.260
Das ganze virtualisiert starten der kann das allerdings auch in dem docker container die kubernetes api laufen lassen das reicht schon

49:42.260 --> 49:49.620
Für lokal wie gesagt das ist auch nicht gedacht um dort irgendwelche produktiven apps oder so drin laufen zu lassen ist um lokal in

49:49.900 --> 49:55.420
Auf der linux kiste zu basteln und sachen auszuprobieren das ist nicht gedacht dafür

49:56.260 --> 50:03.260
Irgendwas wichtiges laufen zu lassen ja aber wenn man es dafür benutzt ist es super ja man hat zum beispiel so man hat man hat addons dabei

50:03.420 --> 50:05.420
Man kann zum beispiel direkt

50:06.260 --> 50:11.860
In ingress in engine x ingress installieren lassen das ist quasi so in so eine art reverse proxy

50:12.740 --> 50:19.260
Dass ich meine pots also meine container im cluster laufen lassen kann und trotzdem drauf zugreifen kann und solche geschichten

50:22.140 --> 50:24.140
Ist ganz praktisch

50:26.460 --> 50:31.360
Nächsten stream kann ich euch jetzt gleich sagen nächsten stream werden wir das alles noch ein bisschen

50:32.360 --> 50:34.360
Etwarnster machen

50:35.520 --> 50:43.960
Nämlich dann bauen wir das so dass ich das selbst verwaltet also dass man da nur noch starten muss und sich alles erst mal so selbst installiert was man braucht

50:45.360 --> 50:50.200
Das war mal müssen wir müssen aber dann heute machen wir ein bisschen bisschen was kleines zumal ich auch

50:50.760 --> 50:56.360
Irgendwie ziemlich im arsch bin heute also wo fangen wir denn jetzt am besten mit an

50:56.360 --> 50:59.520
Das letzte mal hatten wir

51:04.360 --> 51:06.360
Ich mach das noch mal auf

51:08.360 --> 51:13.360
Das letzte mal hatten wir was ganz simples gemacht ja so eine hallo welt app die

51:14.840 --> 51:19.760
Mit sechs containern quasi im cluster gelaufen ist ja pots aber meistens in pots auch in container

51:19.760 --> 51:26.320
Wo sechs container im cluster gelaufen sind und wir hatten hells endpunkt wo man checken kann ob die app bereit ist

51:27.120 --> 51:31.720
den load balancer service vor und reverse proxy das war es so was ähnliches werden wir jetzt auch bauen

51:32.640 --> 51:38.440
Ja, genau drachenflieger so sieht es aus so was ähnliches werden wir jetzt auch bauen allerdings

51:39.800 --> 51:41.800
Will ich euch mal

51:42.760 --> 51:46.640
Ein paar sachen zeigen und hier muss ich jetzt noch mal disclaimer sagen

51:46.840 --> 51:48.840
Ich bin nicht der

51:49.880 --> 51:57.280
Krasseste kubernetes stelze auf der welt ja also ich benutze das als nennen wir es mal anwender

51:58.400 --> 52:00.400
Bei uns auf der arbeit

52:00.960 --> 52:04.960
Ich habe da auch schon die deployments angelegt und sachen drüber laufen lassen

52:07.120 --> 52:11.480
Aber ich bin niemand der da jetzt wo ich wo ich selbst sagen würde ich blick da 100 prozentig

52:12.480 --> 52:17.320
Aber ich bin niemand der da jetzt wo ich wo ich selbst sagen würde ich blick da 100 prozentig bei allem durch

52:25.760 --> 52:30.560
So und es gibt einen trend so die letzten jahre über

52:32.080 --> 52:36.720
Das ganze nennt sich get ops hat sich irgend einer wieder einen dollen namen ausgedacht für irgendwas

52:37.320 --> 52:41.360
Und zwar geht es darum so mal um das jetzt in zwei drei setzen zusammenzufassen

52:42.400 --> 52:44.600
dass man seine cluster das ist

52:45.120 --> 52:51.840
Zwei so im kubernetes umfeld entstanden wobei ich bin ich sicher bin ob es da überhaupt wirklich ursprünglich entstanden ist aber zumindest ist es da relativ

52:52.040 --> 52:57.120
Beliebt dass man eben seine cluster nicht mehr von hand administriert ja ich kann jetzt zum beispiel

52:58.800 --> 53:03.080
Muss ich mal kurz den alias anlegen habe ich bei mir auch sonst mittlerweile drinne

53:04.080 --> 53:06.080
Alias

53:14.520 --> 53:16.520
Das ist so richtig schreiben kann

53:18.880 --> 53:23.400
Ich kann zwar die laufenden pots mir anzeigen lassen und solche geschichten

53:23.400 --> 53:25.400
Und

53:28.360 --> 53:34.400
Machst du keine cluster administration in dem fall ja also normalerweise früher hast du es oder nimm als ich

53:34.400 --> 53:36.920
Ne ich mache relativ wenig an denen

53:39.160 --> 53:41.160
Wie nennt man das so an denen

53:42.240 --> 53:48.720
In rein von kubernetes rum wir haben da anwendungen drauf laufen wie gesagt ich habe da auch schon deployments erstellt

53:49.480 --> 53:51.040
Und

53:51.040 --> 53:56.080
Ich gucke mir regelmäßig auch die grafen dazu an wie wie auch immer das ist dann immer

53:57.120 --> 54:03.600
Erkennt man ja recht wenig drauf unsere grafen aber ich habe wie gesagt von den von den internen sachen jetzt nicht so den wahnsinnsplan

54:04.320 --> 54:10.080
Deswegen habe ich mir gedacht bevor ich meinen neuen job anfangen muss ich mich auch ein bisschen mit kubernetes mal

54:10.520 --> 54:15.240
In reihen auseinandersetzen ich meine wie gesagt ich kann das bedienen ich kann da was drauf deployen

54:16.280 --> 54:17.320
ich

54:17.560 --> 54:23.160
Kann einstellen dass das ding drauf skalieren soll es skalieren zwischen einem und sechs pots

54:28.400 --> 54:30.720
Ansonsten habe ich da auch nicht so den wahnsinnigen plan von

54:31.320 --> 54:35.480
Aber das ist das gute mir macht es ja spaß so neue dinger mir anzugucken

54:35.960 --> 54:43.720
Was ist ein pot pot ist quasi ein container in kubernetes wobei das nicht ganz stimmt ein pot ist quasi eine container gruppe

54:44.720 --> 54:51.720
Es muss ein pot muss nicht ein container sein das ist oftmals so aber es gibt auch die möglichkeit dass du in einem pot in kubernetes

54:51.720 --> 54:53.720
also pot ist quasi so eine

54:53.720 --> 54:57.720
so eine so eine container logische container gruppe

54:57.720 --> 54:59.720
du kannst zum beispiel

54:59.720 --> 55:04.720
einen pot starten da ist dann deine anwendung drinne plus

55:04.720 --> 55:08.720
einen weiterer container für logging oder sowas

55:08.720 --> 55:15.720
Das ist dann so eine einheit zusammen ist halt deine anwendung plus noch ein bisschen was was die anwendung brauche zum beispiel secret management oder sowas

55:15.720 --> 55:21.720
könntest du zum beispiel auch noch reinpacken dass du dass du deine passwörter und sowas irgendwie in die anwendung reinkriegst

55:21.720 --> 55:27.720
on the fly dass du da irgendwie noch einen secret manager als als zweiten container im pot laufen hast

55:27.720 --> 55:33.720
dann hast du im endeffekt dann ein pot besteht aus einer anwendung aus irgendeinem monitoring logging container

55:33.720 --> 55:39.720
besteht aus einer anwendung aus irgendeinem monitoring logging container und irgendwas für secrets injecten

55:39.720 --> 55:46.720
hat nichts mit potman zu tun ne und ein pot ist quasi so die kleinste einheit die kubernetes verwaltet

55:52.720 --> 55:58.720
so genau was ich jetzt erzählen wollte und irgendjemand ist dann auf die idee gekommen könnte das ganze ja gitops nennen und zwar

55:59.720 --> 56:06.720
der gedanke dahinter ist dass man seinen cluster nicht mehr von hand administriert so wie wir es jetzt hier am anfang noch machen werden

56:06.720 --> 56:15.720
sondern dass man in git repo hat wo die gesamte cluster konfiguration drinne liegt nicht nur cluster konfiguration ist ja so gar nicht mehr richtig

56:15.720 --> 56:22.720
also alles was in deinem kubernetes cluster läuft nicht nur die nicht nur die config für den kubernetes cluster an sich sondern auch die config für alle

56:22.720 --> 56:29.720
also die manifest sind das die kubernetes jammel files drinne liegt sondern auch für die ganzen anwendungen die da drauf deployed werden

56:29.720 --> 56:43.720
und alles mögliche und so dass das ganze und das machen wir jetzt auch gleich und so dass das ganze gesüngt wird immer sobald einer was pusht

56:43.720 --> 56:54.720
natürlich gibt es da noch paar zwischenschritte die man einbauen kann man muss ja nicht direkt sein cluster quasi an public oder an git repo hängen

56:54.720 --> 57:01.720
sondern man kann ja noch irgendeinen bildstep dazwischen haben der noch irgendwelche checks macht oder berechtigungsstufen dazwischen oder sowas

57:01.720 --> 57:12.720
aber das ist zumindest so der hintergedanke ist man hat ein man hat ein git repo mit der gesamten cluster konfig allem was dazugehört

57:12.720 --> 57:22.720
und man ändert nichts mehr von hand am kubernetes cluster sondern macht das nur noch über config falls im git pusht das und der cluster applied es automatisch

57:23.720 --> 57:33.720
so das ist das ist so die die idee dahinter ist die config dann in den repos secrets ne die config liegt hier ganz normal im repo drinne für den klasse machen wir jetzt mal gleich

57:33.720 --> 57:45.720
und secret management ist tatsächlich ein bisschen kompliziert ok wir fangen mal an so das erste was wir von hand installieren ist argocd

57:45.720 --> 57:55.720
oder ich muss auch gerade lass mich gerade in mich gehen wie fangen wir denn am besten an

57:55.720 --> 58:19.720
die bräuchten bräuchten eigentlich nach einer anwendung ums auszuprobieren egal wir installieren das ganze jetzt mal und gut ist also wir legen jetzt wir legen jetzt mal ein jammel file an

58:19.720 --> 58:27.720
es gibt es gibt verschiedenste arten das das zu installieren aber wir können es ja wir können es auch mal über den jammel file

58:27.720 --> 58:31.720
lass mal kurz was gucken

58:31.720 --> 58:41.720
lass mal kurz was abgucken

58:41.720 --> 59:06.720
ja ich habe heute schon hier mehr sachen gelesen ob argocd oder flux oder sonst was

59:06.720 --> 59:13.720
ok wie dem auch sei ich zeige euch jetzt mal was cooles bevor wir richtig anfangen

59:13.720 --> 59:21.720
so das kopiere ich mir jetzt mal aus was raus was ich schon was schon angelegt habe ich mache das jetzt einfach mal und dann erkläre ich was dazu

59:21.720 --> 59:41.720
so

59:41.720 --> 59:56.720
wie war das jetzt am besten

59:56.720 --> 01:00:10.720
kann ich mir nämlich aus dem kopf beim besten will nicht merken

01:00:10.720 --> 01:00:24.720
ich glaube wir fangen wir fangen bisschen kleiner an ich lasse ich lasse den schitt erst mal weg ich habe da schon ein bisschen was kasse meist für mich deswegen ist

01:00:24.720 --> 01:00:29.720
ok also

01:00:29.720 --> 01:00:43.720
ich installiere absichtlich mal was altes dass ich euch was zeigen kann so also jetzt erstmal wurscht ich habe eine datei angelegt wo nichts anderes drinne steht wie dass wir das hier installieren und wir installieren argocd was das ist seht ihr gleich

01:00:43.720 --> 01:00:58.720
kubectl apply-k punkt

01:00:58.720 --> 01:01:13.720
ich bin doof ich habe den namespace vergessen na geil ja das ist halt ein bisschen doof weil man copy pasted aus sachen wo das ganze schon wieder anders ausschaut

01:01:13.720 --> 01:01:16.720
moin don't cry so much

01:01:16.720 --> 01:01:21.720
wollte mir das jetzt eigentlich aus was raus kopieren wo es schon wo es schon funktioniert

01:01:21.720 --> 01:01:25.720
komm wir machen den namespace noch ein

01:01:25.720 --> 01:01:31.720
komm wir machen es jetzt richtig

01:01:31.720 --> 01:01:43.720
das ist auch ein bisschen

01:01:43.720 --> 01:01:48.720
ok jetzt das ganze noch mal

01:01:48.720 --> 01:01:55.720
also was im richtigen verzeichnis noch werden

01:01:55.720 --> 01:02:03.720
so jetzt wunderbar also wir haben jetzt argocd installiert ich zeige euch jetzt gleich was das ist aber vorher will ich euch noch was auf github zeigen

01:02:03.720 --> 01:02:15.720
wo ich finde das ist was richtig was richtig praktisches und zwar renovate wahrscheinlich kennen das die ein oder anderen schon wenn ich zeige euch das mal finde ich was sehr nice ist

01:02:16.720 --> 01:02:29.720
github add wir können alles hinzufügen github commit-a-m-init github push wunderbar jetzt gehen wir mal in unser github repo gucken

01:02:29.720 --> 01:02:44.720
cute kubernetes zack da sind wir haben das installiert so gucken wir mal was läuft auf unserem kubernetes cluster wir haben jetzt schon ein paar dinger laufen wir haben argocd laufen wir haben die ganzen basic container laufen die startmäßig mit dabei sind und wir haben den reverse proxy laufen

01:02:44.720 --> 01:02:50.720
damit ich jetzt darauf zugreifen kann auf argocd muss ich zwei sachen machen

01:02:50.720 --> 01:02:57.720
wobei ich wollte euch vorher eigentlich noch was cooles auf github zeigen ich zeige euch jetzt erstmal was cooles auf github so ich habe das jetzt gepusht

01:02:57.720 --> 01:03:04.720
und vielleicht ist euch jetzt aufgefallen dass es eigentlich ein issue geben sollte an der stelle müssen wir mal gucken

01:03:04.720 --> 01:03:21.720
renovate login ich bin mir nicht sicher was da kommt wenn ich mich einlogge deswegen mache ich euch mal kurz aus eigentlich gar nichts oder cute cute

01:03:21.720 --> 01:03:36.720
alles klar da sind wir es ist gelaufen vor ein zwanzig minuten hat aber nix aufgemacht

01:03:36.720 --> 01:03:53.720
bisschen leaken schadet nichts ja ach jetzt ok alles gut also ich habe ich habe wirklich cooles projekt gefunden das ganze nennt sich renovate und was das macht ist folgendes ihr werdet gleich sehen das ist mega nice

01:03:53.720 --> 01:04:16.720
es ist ein bisschen sowas wie dependa bot falls ihr dependa bot oder dependo dependa bot heißt das ding von github nur dass sie sich ein bisschen auf zusätzlich zu allen anderen sachen so ein bisschen auch auf kubernetes und jammelfeil und paketmanagement spezialisiert haben

01:04:16.720 --> 01:04:37.720
wir haben in unserem repo noch nix großartig drinne wir haben nur ein jammelfeil was definiert das und das müsst ihr jetzt müsst ihr euch merken dass ihr seht was seht was das macht wir haben nur ein jammelfeil wenn wir das applyen auf unseren kubernetes cluster installiert das argo cd von dieser url sonst nix

01:04:37.720 --> 01:05:02.720
man beachte das ref hier hinten dran ich habe da eine hardcoded versionsnummer ich hoffe die versionsnummer gab es sonst wird es jetzt gleich richtig funktionieren was ich was ich euch zeigen will 265 gab es 261 ja wahrscheinlich über text text text text 2.6.1

01:05:02.720 --> 01:05:23.480
ja doch 2.6.1 gab es alles gut also man beachte hinten die die die die hardcoded version die ich da reingeschrieben habe so und wenn ich das ganz jetzt merche der sagt mir hier ok damit renovate funktioniert er hat auch schon detected dass ich hier

01:05:24.480 --> 01:05:53.240
habe die erkennt muss ich eine renovate konfig bei mir ins repo pappen nämlich das da hey der ist ja richtig schlau man das ist cool normalerweise ist da nämlich nicht meine extended konfig drin sondern nur so eine basic konfig ich habe nämlich noch ein privates

01:05:53.240 --> 01:06:12.000
repo wo ich ein paar secrets dafür hinterlegt habe dass ich nix aus versehen liege und so was der erkennt das automatisch nicht nicht nicht übel ok review changes ja wir haben das jetzt alles reviewed alles gut alles super reviewed und passt wunderbar

01:06:13.000 --> 01:06:26.760
gemercht ich habe jetzt in meinem repo noch zusätzlich eine renovate jason liegen und was renovate jetzt macht ist folgendes ich gehe jetzt hätte es nicht eigentlich den issue aufmachen sollen

01:06:26.760 --> 01:06:27.760
ach jetzt hat es den issue aufgemacht okay jetzt ist gut hat alles funktioniert so und was euch jetzt vielleicht auch fällt es gibt ein pull request nachdem ich hier diese renovate jason angelegt habe es gibt ein pull request und zwar hat renovate mein repo nach abhängigkeiten gescannt nach dem was ich benutze wie gesagt ist ein bisschen sowas wie die penderbot und zwar ist renovate aufgemacht

01:06:56.760 --> 01:07:16.760
es ist mir aufgefallen dass ich in meinem kubanetes yaml file eine abhängigkeit drinne habe nämlich version 2.6.1 und renovate hat erkannt aktuell ist version 2.6.5 willst du nicht deine version updaten weil du was altes verwendest

01:07:16.760 --> 01:07:42.760
es kann nervig sein wenn man beispielsweise zu doof war seine rpm äh seine rpm seine node modules richtig richtig aufzuräumen und erstmal 8000 pull requests bekommt aber ich finde für ein infrastruktur repo ist das wirklich praktisch weil du willst bei den meisten sachen zumindest mal einen hinweis drauf haben dass es eine neue version gibt und du überwachst es ja auch nicht ständig

01:07:43.760 --> 01:08:08.760
den gibt es lokal den kannst du passt mal auf striker ist es viel besser ist viel besser du kannst renovate laufen lassen entweder als github app von denen hosted du kannst renovate laufen lassen als lokalen docker container als lokale cli du kannst auch installieren und lokalbar die einfach ausführen du kannst im kubanetes cluster laufen lassen und

01:08:08.760 --> 01:08:38.760
du kannst es als github action laufen lassen und das ist eine sehr coole geschichte du kannst quasi nach jedem pull oder nach jedem nach jedem push kannst du das quasi über die github action den docker container davon ausführen der macht dann das gleiche also wenn du keinen bock hast diesen hosted service von denen zu verwenden kannst du das benutzen das finde ich ist eine sehr coole geschichte und der hat mich jetzt darauf hingewiesen guck mal da max also hier im dashboard steht alles was er gefunden hat

01:08:38.760 --> 01:08:45.160
steht drin hier guck mal her max ich habe erkannt du verwendest in deinen config files

01:08:45.160 --> 01:09:05.760
über gitlab kannst du es auch laufen lassen du verwendest in deinen config files und zwar hier verwendest du eine alte version der macht sogar die release notes rein guck mal du kannst sogar die release notes angucken an der stelle was er erkannt hat

01:09:05.760 --> 01:09:35.640
bis darauf hast du auf einen blick alles drinne was du wissen musst zu dem aktuellen release und dann kannst du dich entscheiden willst du abcreateen oder nicht so jetzt sage ich merge pull request alles klar wunderbar und schon habe ich hier drinne die aktuellste version und er sagt gut gibt nichts weiteres mehr und das finde ich enorm praktisch das habe ich über den youtube video gefunden und das ding ist auch wirklich

01:09:35.640 --> 01:10:05.640
beliebt renovate guck mal das hat das hat ordentlich viele sterne guck mal es hat 11.000 sterne mittlerweile ich kannte vorher nur die panda bot und ich muss sagen insgesamt finde ich renovate deutlich cooler als die panda bot weil es einfach mehr kann ich mein wer hat schon den parser dabei um so was hier hinten als version zu erkennen es ist ein kubanedas customized file mit einer hardcoded versionsnummer an der ende von der

01:10:05.640 --> 01:10:35.560
url also dass er dass sie das erkennen als version und das abgleichen und die anbieten zu updaten ist wirklich eine sehr coole geschichte äußerst hock würde ich sagen ist das ganze ja so jetzt kommen zum thema argo cd den forward profil kann ich mir immer nicht merken wir können übrigens noch ein weiteres nice tool installieren nämlich k9s

01:10:35.560 --> 01:10:59.480
das ist ein command line interface beziehungsweise konsolen klein für kubanedas ich weiß auch schwören manche leute drauf es ist ein bisschen netter als kubectl mein mit kubectl kannst du alles machen mit k9s kannst du nicht alles machen aber vieles hast du ein schönes command line gui für

01:11:05.560 --> 01:11:14.200
also ich habe keine pots gestartet ok deswegen sieht man jetzt auch nichts drin ok das moment namespace all aha ich war im default namespace

01:11:14.200 --> 01:11:35.440
ja man muss ein bisschen aufpassen es ist mega nice ja die können übrigens auch ich teile renovate supported languages die haben wirklich extrem viel extrem viel zeug drin also sie können ruby on rail gems npm package

01:11:35.440 --> 01:12:05.200
ist und alles mögliche also dort net glaube können sie auch kannst ja sehr du kannst auch sehr viel konfigurieren und du kannst es selbst hausen wenn du nicht diesen service haben ich glaube du kannst sogar das frontend selbst posten ja also das ist wirklich cool das eigentlich dumme ist finde ich jetzt wenn man es übertreibt und zwar gerade frontend packages haben ja oftmals 50 milliarden abhängigkeiten und da wirst du ziemlich gespammt das ist gar nicht an sich das problem

01:12:05.200 --> 01:12:34.480
wenn die leute das dann allerdings einzeln accepten über github hast du auf einmal deine gesamte githistorie voll mit merge dependency update ich will nicht sagen dass die info dass du eine dependency upgraded hast in deinem source code jetzt irgendwie oder deine npm konf oder so dass das unwichtig ist aber ganz ehrlich ich brauche nicht auf einen normalen commit 10

01:12:36.160 --> 01:13:02.400
irgendwelche renovate commits deswegen finde ich ist es ganz sinnig wenn man das für ich habe es noch nicht benutzt für ein frontend projekt wenn man das für ein frontend projekt benutzt wo wirklich viele dependencies hat vielleicht sollte sich jemand die mühe machen und nicht wie ich gerade im github die pull requests durchklicken sondern vielleicht die pull requests auf der kommando zeile alle merchen und dann halt dass das irgendwie

01:13:02.400 --> 01:13:16.800
ohne großartige merge commits und ein abschließendes irgendwie oder so was github auto merge dann hast du aber immer noch einen history eintrag

01:13:16.800 --> 01:13:42.760
kann das sich einstellen dass du alle dependencies in einen commit also ob du das einstellen kannst dass er das alles in ein pull request macht weiß ich nicht da müsste er die alten irgendwie schließen oder so das passt nicht also du kannst es selbst machen ja das geht du kannst es

01:13:42.760 --> 01:13:55.600
einfach für kommando zeile merchen zum beispiel alles nacheinander und dann nur einmal push muss halt immer gucken dass er keine keine merge commits die ganze zeit anlegt einmal pullen vorher und dann kannst du es alles merchen und dann kannst du es pushen

01:13:55.600 --> 01:14:25.240
musste kannst du machen musste aber noch nicht mal wenn du wenn du gepullt hast und du hast den hast den aktuellen stand kannst du einfach merchen dann macht er ein fast forward merge ohne merge commit da brauchst du noch nicht mal in extra extra branche ja aber ist auf jeden fall sinnig und man sollte das machen wenn man wirklich viele dependencies im frontend projekt hat wo man nicht

01:14:25.240 --> 01:14:53.560
zu gespammt werden will so also wir waren bei agocd also ich habe euch ja erzählt wir haben in git repo gemacht wo unsere git konf unsere klasse klasse konfig drinne ist und es soll jetzt ja so sein dass leute wir machen wir machen mal was wobei ich hab's jetzt ich hab's jetzt schon upgraded

01:14:55.240 --> 01:15:09.720
wobei ihr werdet es ihr werdet es gleich sehen ihr werdet es gleich sehen ich habe nämlich noch nicht applied das ganze ich hoffe ich hab nicht auto apply auto apply drin glaub nicht oder

01:15:09.720 --> 01:15:34.040
ich hab ja gar nichts drin ok ist gut ich habe noch gar nichts angelegt alles gut ich habe nicht mal cluster keys oder so registrieren man kann group anlegen ok das ist gut so wir machen jetzt support weiterleitung ich hab das über k9s noch nie gemacht shift f ok wir wollen uns weiterleiten auf agocd

01:16:04.040 --> 01:16:21.440
ok war ich halt fort vorwärts von hand es ist auch über 1024 keine ahnung warum das nicht funktioniert

01:16:21.440 --> 01:16:40.840
wie können sie einfach von hand machen hast du den ingress 9 zählt für den neuen miniklub klasse ja eigentlich schon aber den brauche ich nicht dafür mit port weiterleitung wollen wir das einfach mal so

01:16:40.840 --> 01:17:08.920
funktioniert sofort also port 808 ist port 8080 ist anscheinend doch doch available so localhost port 8080 jetzt müssen wir noch das password rauskriegen accept accept agocd am start wir machen mal das ist gar nicht so flash bang wie man denkt war doch immer noch ziemlich flash bang wenn das ding sich zum ersten mal installiert

01:17:08.920 --> 01:17:37.760
dann hat es ein default secret gesetzt für den admin user das muss man einmal auslesen und zwar get secrets agocd namespace agocd agocd initial admin secret das brauche man achso das da genau das da brauche man und das ist natürlich ein kubernetes secret

01:17:37.760 --> 01:18:07.600
und wie wir ja alle wissen sind kubernetes secrets nicht wirklich secret weil jetzt passt mal auf wenn ich das jetzt base 64 die code dann sieht man da auf einmal ein password drinne also das ist auch base 64 wie gesagt kubernetes secrets heißen zwar secrets damit ist aber nicht gemeint dass die nicht lesbar sind die hätten sie auch passwörter nennen können es ist halt einfach ein passwörter

01:18:07.760 --> 01:18:36.320
und was man oder zertifikat was man unter secret im cluster eintragen kann aber es heißt nicht dass die verschlüsselt sind das allerwichtigste zuerst settings appearance dark theme enable die wichtigste sache schon mal erledigt so normalerweise würde ich jetzt das ganze ding hier auch wir sehen ihr seht wir haben noch eine alte version normalerweise würde ich das ganze ding jetzt ja auch über

01:18:37.760 --> 01:18:38.720
jammel files konfigurieren anstatt das hier übers web interface zu machen aber ich zeige euch das jetzt mal übers web interface als erstes müssen wir unseren unser repo hinzufügen ich habe das ehrlich gesagt einmal vor einer ganzen weile gemacht und bisher nur über jammel files wieder mal gucken ob ich das überhaupt noch sich selbst deployen lassen das wollte ich eigentlich für nächsten stream machen das wollte das wollte ich eigentlich für nächsten

01:19:07.760 --> 01:19:13.280
stream machen dass das ding sich selbst updaten kann aber wir können wir können es auch

01:19:17.600 --> 01:19:30.800
wir können es auch machen dann bräuchten wir allerdings hier irgendwie noch so was wie okay machen wir das mal dann bräuchten wir sowas wie apps und ich kann ich copy paste mir das mal von

01:19:37.760 --> 01:20:04.480
apps von meinem anderen repo ergo cd alles klar muss ja muss ich aber ein bisschen muss ich aber ein bisschen anpassen so apps so new file ergo cd app definition ergibt ergibt hoffentlich gleich halbwegs sinn wenn man dann sieht wie es läuft

01:20:08.160 --> 01:20:14.320
so das dumme dabei ist jetzt nur ich habe noch gar kein repo key hinter hinterlegt

01:20:19.920 --> 01:20:22.000
willst du spick ich spicke die ganze zeit schon

01:20:29.280 --> 01:20:35.920
ja das kenne ich das ist ganz cool weil das asynchron verschlüsselt mit einem im cluster generierten key ist ganz nice

01:20:38.000 --> 01:20:41.280
ich bin in letzter zeit so ein bisschen auf external secrets hängen geblieben

01:20:46.160 --> 01:20:50.080
nee ich bin in letzter zeit ein bisschen auf external secrets hängen geblieben da kannst du

01:20:50.080 --> 01:20:57.920
nämlich beispielsweise azure key vault den google secret manager und den aws secret manager und alles mögliche dranhängen

01:20:59.200 --> 01:21:04.160
und da deine secrets herziehen das sind sie das sind sich alle 15 sekunden oder sowas

01:21:05.040 --> 01:21:09.360
dann brauchst du nämlich die secrets schlicht und ergreifend gar nicht einzuchecken in irgendwelche yaml files

01:21:11.200 --> 01:21:15.040
aber du hast so ein bisschen ein hennei problem weil manchmal brauchst du ja auch initial

01:21:15.040 --> 01:21:20.720
das eine oder andere so jetzt muss ich mal kurz überlegen wie ich das mache leute und zwar das problem ist

01:21:22.160 --> 01:21:25.840
ich müsste jetzt ich müsste jetzt den repo key irgendwo hinterlegen

01:21:34.160 --> 01:21:38.000
also ich weiß wie ich es machen kann das problem ich ich will euch ja ich will euch ja nicht immer

01:21:38.000 --> 01:21:45.280
den screen screen pleck pleck machen ich weiß wie wir es machen wir fügen wir fügen einfach initial

01:21:45.280 --> 01:21:50.960
mal ein secret ich weiß wie wir es machen wir fügen den secret hinzu

01:21:52.480 --> 01:21:56.320
das passt schon wir fügen den secret wir fügen den secret hinzu

01:21:56.400 --> 01:21:57.280
und

01:22:00.160 --> 01:22:03.920
ja genau wir fügen wir fügen den secret hinzu

01:22:05.200 --> 01:22:09.840
ich überlege gerade ob ich einen token habe

01:22:10.800 --> 01:22:15.680
muss mal kurz gucken ob ich überhaupt einen token habe was da drauf zugreifen kann ja ist ein bisschen blöd

01:22:15.680 --> 01:22:22.160
wartet mal lasst mich mal kurz gucken ob ich einen token habe was da drauf zugreifen kann ja ist ein bisschen blöd

01:22:22.160 --> 01:22:26.720
token habe was da drauf zugreifen kann ja ist ein bisschen blöd wartet mal lasst mich mal kurz gucken

01:22:29.440 --> 01:22:38.480
token das kann ich euch jetzt halt nicht on stream zeigen blöd personal access tokens

01:22:41.360 --> 01:22:44.400
expires soon ja gut so soll mal expiren

01:22:44.400 --> 01:22:55.520
repository access ok nice da kann ich die anderen auch hinzufügen alles klar sehr gut

01:22:56.560 --> 01:23:00.640
nice gut dann habe ich dann habe ich einen token hier was ich verwenden kann alles gut

01:23:01.440 --> 01:23:08.960
da muss ich euch jetzt tatsächlich noch mal kurz schwärzen und ich muss mein clipboard ausschalten

01:23:09.200 --> 01:23:14.560
weil ansonsten kopiere ich jetzt mein password mein token das ist ein bisschen ein bisschen blöd

01:23:19.440 --> 01:23:21.840
kurz kurz überlegen wo ich das mache

01:23:27.680 --> 01:23:30.800
ist blöd wenn man das alles so umschiffen muss aber gut

01:23:30.800 --> 01:23:41.760
ich muss ich muss repos minikube wir gehen jetzt einfach da rein start

01:23:54.480 --> 01:24:00.160
so ok ich habe es gespeichert glaube ich glaube ihr könnt wieder ihr könnt wieder gucken

01:24:01.040 --> 01:24:07.680
das werde ich einfach nicht pushen aber nicht dass das das token hat so gut wie das token hat so

01:24:07.680 --> 01:24:15.440
gut wie keine rechte ich hoffe ich werde nichts ich werde nichts liegen liegen also ich habe hier

01:24:15.440 --> 01:24:24.920
eine datei die sich nennt super geheimpunkt sh die sollte ich besser nicht öffnen ich mache jetzt

01:24:24.920 --> 01:24:30.520
mal kurz start start sr script für meinen cluster weil so ein paar sachen brauche ich halt die

01:24:30.520 --> 01:24:34.280
standardmäßig da sind normalerweise würde ich mir die auch aus einem secret manager holen

01:24:34.280 --> 01:24:39.720
allerdings jetzt jetzt ist zu funktioniert es funktioniert sonst nicht richtig hier und streben

01:24:39.720 --> 01:24:49.320
wir legen jetzt in dem start sr legen wir wenn wir initial den klassen hochfahren legen wir

01:24:49.320 --> 01:24:58.400
einfach zwei namespaces an dass es dann da keine probleme mehr gibt und wir createn ein secret

01:24:58.400 --> 01:25:11.000
einmal falsches tab und ripp ach nee excellent token github user github token gibt kein falsches tab

01:25:11.000 --> 01:25:21.080
so github github user ist einfach github user ist wo bloß wobei das egal ist was man da reinschreibt

01:25:21.080 --> 01:25:34.480
ok gut das sollte sollte hoffentlich jetzt reichen cmord plus x start.sh ja ja ok alles klar so secret

01:25:34.480 --> 01:25:39.480
ist drin packt man das hatte ich das hatte ich heute eigentlich gar nicht vor jetzt jetzt war

01:25:39.640 --> 01:25:43.680
komplizierter als das ganze sein muss ich habe euch an sich gezeigt was wir eigentlich genau

01:25:43.680 --> 01:25:47.400
machen wie man es eigentlich benutzt und ich bastel jetzt irgendwelche sachen die bevor man

01:25:47.400 --> 01:25:52.560
das gesehen hat eigentlich keinen sinn ergeben also irgendwie nicht so optimal aber was willst du

01:25:52.560 --> 01:26:00.120
machen was willst du tun würde jetzt der echte gangster dazu sagen so also jetzt haben wir hier

01:26:00.120 --> 01:26:09.160
die app angelegt wir sollten jetzt zugriff haben auf unser repo projekt projekt ist default

01:26:09.160 --> 01:26:17.480
kennst du ein paar gute sources um sich mal also nebenbei macht man das nicht kubernetes selbst

01:26:17.480 --> 01:26:23.360
so der reine kern ist gar nicht mal das problem aber das ist einfach ein fass ohne boden du musst

01:26:23.360 --> 01:26:32.040
dich mit so viel trittanbieter sachen beschäftigen mit so viel abläufen mit

01:26:32.040 --> 01:26:38.920
mit so vielen zusatz technologien wie generierte dann jammel pfeils wie bauste

01:26:38.920 --> 01:26:46.360
deine manifest zusammen und alles mögliche bei welchem klaut anbieter machst du wie was

01:26:46.360 --> 01:26:54.200
und so was ist ein fass ohne boden gute sources es gibt gute videos auf github zum lernen also

01:26:54.200 --> 01:27:02.120
im deutschsprachigen bereich finde ich so mal als übersicht finde ich das video wirklich gut

01:27:02.120 --> 01:27:10.760
ja das hier also wenn er irgendeiner sich mal zwei stunden kubanitas angucken will von jemand der

01:27:10.760 --> 01:27:14.360
sich im vorfeld ein bisschen gedanken dazu gemacht hat nicht einfach stream startet wie ich und

01:27:14.360 --> 01:27:22.960
aufgeht er macht wirklich aber auch nur die basics also der erklärt wie man labels anlegt

01:27:22.960 --> 01:27:27.080
wie man jammel pfeils anlegt die pläute ein paar pots skaliert die glaube ich mal

01:27:27.080 --> 01:27:33.040
rauf macht einen macht einen reverse proxy davor aber das kann ich wirklich empfehlen das video

01:27:33.040 --> 01:27:41.200
link please hier siehst auch den titel leute warum warum wollte ok ich pass den link aber

01:27:41.200 --> 01:27:48.240
meine titel suchen auf youtube kriegt man doch kriegt man auch gebacken so jetzt muss ich

01:27:48.240 --> 01:27:53.160
bisschen magic machen weil eigentlich war das für diesen stream gar nicht geplant was ich

01:27:53.160 --> 01:27:58.640
jetzt mache und zwar wir haben argocd deployed ihr habt noch keine ahnung was argocd ist das wollte

01:27:58.640 --> 01:28:02.200
ich euch jetzt eigentlich zeigen aber der chat hat gesagt ich soll es richtig machen und zwar

01:28:02.200 --> 01:28:07.320
dass ich das ganze selbst verwaltet ok aber was mit der musik los monka es das macht mich aber

01:28:07.320 --> 01:28:23.520
fertig ja schon besser ich versuche jetzt so ein minimales sample zu basteln was funktioniert

01:28:23.520 --> 01:28:32.960
so customize jetzt kommt jetzt kommt super krasse magic wo ihr nix versteht und ehrlich

01:28:32.960 --> 01:28:39.560
ich auch nicht ich zeige es euch trotzdem gleich beim massive magic keine ahnung habe

01:28:39.560 --> 01:28:48.360
ich auf github gefunden high IQ shit ist falsch ist falsch auch hier hin ne moment

01:28:48.360 --> 01:28:57.920
ne das ist hier ist richtig richtig richtig high q shit so namespace haben war aber argocd selber

01:28:57.920 --> 01:29:11.560
noch ja so das ingress lasse ich jetzt mal weg

01:29:11.560 --> 01:29:16.320
wobei das lassen wir auch weg ok

01:29:16.320 --> 01:29:31.880
jetzt muss ich überlegen dass ich nix vergesse ich hoffe dass ich hoffe das funktioniert so

01:29:42.280 --> 01:29:48.560
also sieht das aus wenn ich stinger machen muss die ich eigentlich gar nicht vor hatte

01:29:48.560 --> 01:30:14.280
eigentlich das repo sondern cute ok so wenn ich das jetzt richtig gemacht habe dann sollte

01:30:14.400 --> 01:30:18.720
dann sollte sich das jetzt applyen lassen ich hoffe ich habe nix verkehrt gemacht

01:30:18.720 --> 01:30:29.000
schau mal mal guck mal mal apply post jam post jam post jam wie das hat es einfach

01:30:29.000 --> 01:30:37.320
funktioniert seriously hey das hat funktioniert war sie nicht gedacht aber der zugriff auf repo

01:30:37.320 --> 01:30:47.840
funktioniert nicht oder repo jam geht nicht was infra ah moment moment ich hab's falsch

01:30:47.840 --> 01:30:57.800
benannt bonkers ah projekt infra habe ich ja weggelassen hier default default projekt alles

01:30:57.800 --> 01:31:18.960
gut jetzt ist jetzt sogar komplett abgekackt ja ja warum ist das ist das hier so wunderbar ok

01:31:18.960 --> 01:31:29.600
er war warum authentication required habe ich doch gemacht na geil jetzt habe ich

01:31:29.600 --> 01:31:34.120
chat ich hätte ich hätte nicht dinger machen soll ich heute überhaupt nicht vor

01:31:34.120 --> 01:31:39.680
hat jetzt habe ich jetzt habe ich irgendwas verkackt warum geht das nicht github secret

01:31:39.680 --> 01:31:44.280
github secret habe ich doch angelegt github secret oder habe ich nicht github secret angelegt

01:31:45.280 --> 01:31:52.240
github secret doch habe ich angelegt im namespace na dann guckt man mal wo ans liegt

01:31:52.240 --> 01:32:07.800
pots all namespaces agocd ist richtig github secret sieht eigentlich ok aus

01:32:07.800 --> 01:32:13.360
wisst ihr was ich mache den klasser noch mal kurz aus und wieder an ich bin mir nicht ganz sicher ob

01:32:13.360 --> 01:32:21.920
ich nicht im vorfeld irgendwie komisches zeug eingestellt habe ich mache den klasser noch mal

01:32:21.920 --> 01:32:28.280
aus und noch mal an und dann dann gucken wir mal so und damit ich euch zeigen kann was agocd jetzt

01:32:28.280 --> 01:32:37.000
eigentlich cooles macht mache ich die versionsnummer noch mal runter wir gehen wieder auf 261 runter

01:32:37.000 --> 01:32:45.240
so hier es läuft kein kubernetes zeug mehr und wir führen jetzt mal mini cube start aus

01:32:45.240 --> 01:32:53.880
mini cube das können wir eigentlich hier reinschreiben start.sh

01:32:53.880 --> 01:33:07.760
mini cube start genau und dann applyen wir das ganze noch mal und ich hoffe dann funktioniert

01:33:07.760 --> 01:33:11.600
sonst war das ja heute war das ja heute nix

01:33:11.600 --> 01:33:20.920
auf starten so angelegt apply

01:33:20.920 --> 01:33:29.680
oh was hat er für schmerzen oben warning was

01:33:29.680 --> 01:33:39.320
ja ja das hat er jetzt erstellt ok gut jetzt sollten wir get pots sollten wir wieder unsere

01:33:39.320 --> 01:33:42.960
agocd pots bekommen ok wunderbar das funktioniert ja alles gut

01:33:42.960 --> 01:33:48.400
secret secret

01:33:48.400 --> 01:33:52.760
muss man wieder raus auslesen

01:33:52.760 --> 01:34:03.200
ok da ist das wie kriegen wir das jemand eine gute idee wie wir das hier rauskriegen

01:34:03.200 --> 01:34:13.200
passwort man kann auch irgendwelche jason outputs hier machen das ist mir aber zu kompliziert

01:34:13.200 --> 01:34:29.720
wenn man grab passwort hat an field 2 ok alles klar jetzt base base 64 decode

01:34:29.720 --> 01:34:40.880
habe ich lehrzeichen drin oder zu viel view secret das kenne ich nicht das muss ich mir

01:34:40.880 --> 01:34:58.720
mal aufschreiben das ist eine gute gute idee was hat er für schmerzen ok base 64 decode

01:34:58.720 --> 01:35:10.480
alles klar hier haben wir das passwort forward port forward machen localhost 8080 admin passwort

01:35:10.480 --> 01:35:21.800
save unknown was ich habe doch ein passwort hinterlegt man wo ist das problem habe ich

01:35:21.800 --> 01:35:35.880
das habe ich den falschen key hinterlegt eigentlich den falschen key ich weiß was

01:35:35.880 --> 01:35:41.600
ich ich weiß was ich verkehrt gemacht habe oder ich weiß was ich verkehrt gemacht habe

01:35:41.600 --> 01:35:46.680
ich habe mein super ich habe doch hier mein super super geheimpunkt sh was wo ich nicht

01:35:46.680 --> 01:35:50.600
reingucken darf was jetzt natürlich schön in der history drinne ist dass ich auf was ich reingucke

01:35:50.600 --> 01:36:04.280
ich muss das noch sourcen super geheim super geheim punkt sh bin basch so start

01:36:04.280 --> 01:36:33.460
ich bin jetzt total beschert

01:36:34.280 --> 01:36:45.640
äh bin ich blind oder was

01:37:04.280 --> 01:37:28.000
doch doch das macht einen unterschied wenn ich keinen punkt schlechter vormachen dann versucht

01:37:28.000 --> 01:37:39.600
das global zu finden und ansonsten halt nicht ah so naja gut

01:37:39.600 --> 01:37:48.560
ich hoffe der fährt es jetzt gleich noch mal alles hoch

01:37:48.560 --> 01:37:55.520
ne ja ja allready exist allready exist weißt du was

01:37:55.520 --> 01:38:02.800
die liet nicht man setzt mal richtig das habe ich das habe ich jetzt echt nicht gesehen mit dem

01:38:02.800 --> 01:38:09.640
ok so jetzt aber apply

01:38:16.000 --> 01:38:18.240
auf mini cube gib alles gib gas

01:38:18.240 --> 01:38:28.320
so wenn ich jetzt richtig gemacht habe

01:38:28.320 --> 01:38:38.320
ok das ist noch nicht gestartet das dauert kurz guck mal die putz fahne jetzt erst hoch

01:38:38.320 --> 01:38:42.080
ich habe jetzt den klasse erst gestartet das dauert jetzt 20 20 sekunden

01:38:48.240 --> 01:38:54.080
warte mal bis die pots ready sind wichtig ist der hier der agus server das ist da wo das

01:38:54.080 --> 01:39:02.640
frontend club drauf läuft der muss ready sein so get secrets da ist es wunderbar genau das will

01:39:02.640 --> 01:39:11.560
ich haben forward forward ich hoffe jetzt geht die verbindung zu meinem get repo sonst kriege ich

01:39:11.560 --> 01:39:26.080
anfälle pass das not exist gut das ist ja ein anderes problem pass das not exist ja einmal

01:39:26.080 --> 01:39:33.880
richtig machen wer schon nicht verkehrt ja pass das not exist pass agus cd das schon mal nicht

01:39:33.880 --> 01:39:44.040
verkehrt das schon mal gut welcher welcher pass existet bitteschön nicht oder moment jetzt ich

01:39:44.040 --> 01:39:52.440
glaube ich habe das einfach nie gepusht oder ja natürlich geht et minus a ok und und geht

01:39:52.440 --> 01:40:00.440
kommet minus a minus m kacke also exakte best practice so wie man seine kommets immer benennt

01:40:00.600 --> 01:40:04.600
geht push origin master

01:40:10.040 --> 01:40:15.600
geht pull minus minus freebase an der einen datei sollte sich ja nichts geändert haben

01:40:15.600 --> 01:40:24.920
ok dann nicht

01:40:31.920 --> 01:40:37.600
ich will ich wollte ich ich wollte eigentlich nicht forsten muss ich auch nicht muss ich auch

01:40:37.600 --> 01:40:42.200
nicht weil dann fehlt mir die renovate wir machen es jetzt das war das war schon ok das war schon ok

01:40:42.200 --> 01:40:43.200
weil man kann es natürlich

01:40:43.200 --> 01:40:56.520
jetzt versucht er den mörsch zu machen was wahrscheinlich auch nicht geht wir machen wir

01:40:56.520 --> 01:41:01.380
machen es jetzt einfach so wie es sich gehört freebase scheiß drauf das hat einen doofen

01:41:01.380 --> 01:41:13.820
fehler sagt er hier bärmlich juckt mich nicht einfach jetzt check out fertig ist jetzt haben

01:41:13.820 --> 01:41:18.260
jetzt haben wir es einfach überschrieben mit dem aktuellen mit dem aktuellen master stand

01:41:18.260 --> 01:41:23.740
kann man auch reingucken das auch soweit das ist der ganze ganze müll drinne den wir hier drin

01:41:23.740 --> 01:41:31.980
haben wollen kann sagen get rebase minus minus continue ja kackel push bar kackel push

01:41:31.980 --> 01:41:47.500
versioner absicht ich habe die ich habe die absichtlich wieder runter runter runter gestellt

01:41:47.500 --> 01:41:51.860
eben dass ich das dass ich das zeigen kann wie sich das wie sich das selbst updated

01:41:51.860 --> 01:42:02.540
gut ha es funktioniert leute guck mal vielleicht ist euch jetzt schon was

01:42:02.540 --> 01:42:09.020
aufgefallen ich musste nichts an meinem cluster machen und hier sind auf einmal zwei apps

01:42:09.020 --> 01:42:18.300
aufgeploppt einmal agro cd selbst und einmal einmal ein root eine root anwendung die root

01:42:18.300 --> 01:42:23.620
anwendung dient dazu alle anderen anwendungen agro cd zu registrieren gibt es mehrere ansätze

01:42:23.620 --> 01:42:27.340
wie man das ganze machen kann aber ich habe es jetzt halt so gemacht wie es gemacht habe

01:42:27.340 --> 01:42:33.860
so und jetzt seht ihr man hat agro cd in agro cd und es hat sich im hintergrund selbst gesüngt

01:42:33.860 --> 01:42:39.380
wie euch vielleicht aufgefallen ist weil ich habe nix geupdatet so jetzt sinken wir agro cd mal

01:42:39.380 --> 01:42:44.780
weil er der meinung ist dass irgendwie die hälfte outdated ist ok soll mir recht sein so sinkt

01:42:44.780 --> 01:42:53.460
hält sie alles klar so und was man jetzt daran sieht ist ich kann jetzt durch einen push in

01:42:53.460 --> 01:43:00.380
meinem repo sachen in meinem cluster aktualisieren dadurch agro cd pullt mein git repo alle 15

01:43:00.380 --> 01:43:06.020
sekunden agro kann sich auch selber update da muss man allerdings ein bisschen aufpassen

01:43:06.020 --> 01:43:12.700
wenn man es kaputt macht ist blöd ich kann jetzt quasi mit einem config update in meinem git repo

01:43:12.700 --> 01:43:23.060
also in dem hier wenn ich hier was wenn ich hier was reinpushe kann ich es updaten so und

01:43:23.060 --> 01:43:35.420
agro cd selber ist ja noch auf version agro cd customise ist ja noch auf version 2.61 was man

01:43:35.420 --> 01:43:39.220
je nachdem wie man es eingestellt hat hier auch sieht aber an der stelle an der stelle nicht aber

01:43:39.220 --> 01:43:45.220
hier oben sieht man es agro cd ist noch auf 261 so und jetzt um das ganze mal zusammenzubringen

01:43:45.220 --> 01:43:51.820
wenn ich jetzt ich mache den pull request hier den muss ich umbenennen sonst hat renovate kein

01:43:51.860 --> 01:44:01.540
bock mehr kein bock drauf das noch mal zu machen check weh besser nahe für pull request das heißt

01:44:01.540 --> 01:44:10.180
unser cluster läuft jetzt so vor sich hin und macht 30 millionen requests am tag auf meiner

01:44:10.180 --> 01:44:19.260
vm lokal und ich war so beschäftigt mit geld zählen dass ich nicht mitbekommen habe dass

01:44:19.260 --> 01:44:26.100
agro cd 265 rausgekommen ist ich meine ich bin ja immer noch auf 261 und wir wissen ja

01:44:26.100 --> 01:44:32.820
allerwichtigste play singly fast und immer die neueste version deswegen möchte ich agro cd

01:44:32.820 --> 01:44:43.020
deswegen will ich erstmal bescheid gesagt bekommen haben dass agro cd 265 raus ist und dann will ich

01:44:43.020 --> 01:44:50.060
agro cd automatisch updaten lassen mit also sich selber automatisch updaten lassen so ich sag

01:44:50.060 --> 01:44:58.140
jetzt meinem renovate bock noch mal er soll mein repo analysieren und irgendwann macht er das dann

01:44:58.140 --> 01:45:05.580
auch man kann hier übrigens in das dashboard reingehen und gucken was er was er denn so macht und

01:45:05.580 --> 01:45:09.020
wann er denn wann er denn gelaufen ist normalerweise dauert es nicht lang normalerweise

01:45:09.020 --> 01:45:15.260
vielleicht eine minute oder so dann ist er am start über dieses master issue hier kann man

01:45:15.260 --> 01:45:21.300
übrigens renovate steuern also man kann hier unten dann ein häkchen reinsetzen und dann habe

01:45:21.300 --> 01:45:26.380
ich habe ich eben das häkchen überhaupt reingemacht man kann das häkchen rein machen und das triggert

01:45:26.380 --> 01:45:32.780
über den webhook den bot dass der das der jetzt gefälligst mal laufen soll so und wenn der bot

01:45:32.780 --> 01:45:40.420
läuft okay ist gelaufen dann hat er bot wieder festgestellt das hatten wir eben schon mal hat

01:45:40.420 --> 01:45:47.420
er festgestellt max achtung achtung playsingly fast deine version ist outdated und zwar du kannst

01:45:47.420 --> 01:45:54.580
updaten von agro cd 261 auf 265 dann sage ich ja zeigt mal her was was hat sich denn hier so ok

01:45:54.580 --> 01:46:00.780
hier wird eine versionsnummer angepasst ok wunderbar das sieht gut aus das wird gemerched und das

01:46:00.780 --> 01:46:07.380
allerwichtigste immer eine rakete das funktioniert das natürlich gar nicht vor allem wenn es

01:46:07.380 --> 01:46:11.580
rust projekte sind muss unbedingt eine rakete drunter und so eine komische grabe dann wird

01:46:11.580 --> 01:46:16.740
das ganze gemerched und jetzt passt mal auf ich merke das hier auf github und jetzt gucken wir

01:46:16.740 --> 01:46:23.340
mal wie lang es dauert bis agro cd das mitbekommt konfirm

01:46:23.340 --> 01:46:27.220
schauen wir mal

01:46:27.220 --> 01:46:31.580
ich starte mal meinen timer

01:46:31.580 --> 01:46:47.060
und wenn habe ich auto update überhaupt eingeschaltet ich hoffe ich hoffe doch

01:46:47.060 --> 01:46:56.780
ah guck mal hier ach mist ich habe agro ok ich habe auto update nicht eingeschaltet für agro cd so

01:46:56.780 --> 01:47:01.700
leute der zeigt mir jetzt an guck mal da es ist ein update da jetzt klicke ich auf sync

01:47:01.700 --> 01:47:13.460
normalerweise hätte es jetzt automatisch gemacht klicke ich auf sync und nach nichts allzu langer

01:47:14.300 --> 01:47:42.860
ah jetzt ok oder nicht allzu langer zeit werdet ihr feststellen habe ich gleich agro cd

01:47:42.860 --> 01:47:54.740
265 am start ist wahrscheinlich schon fertig der forward ist ausgegangen ich habe noch ich

01:47:54.740 --> 01:48:00.540
habe noch kein reverse proxy davor der port weiterleitung ist ausgegangen und ich habe

01:48:00.540 --> 01:48:09.260
agro cd 265 am start das heißt ich musste nix von hand an meinem cluster machen wenn man das jetzt

01:48:09.260 --> 01:48:15.060
richtig eingestellt hätte also wenn man den eingang hätte so dass man keine port weiterleitung

01:48:15.060 --> 01:48:19.860
braucht und hätte ich automatischen sync eingeschaltet dann hätte ich das cluster

01:48:19.860 --> 01:48:27.780
jetzt quasi komplett von alleine geupdatet nur mit dem merchandise pull requests da muss man

01:48:27.780 --> 01:48:35.420
sich halt überlegen ob man das so in dieser tragweite haben will radian tracer muss man

01:48:35.420 --> 01:48:41.300
sich dann wirklich überlegen gerade wenn agro cd sich selbst update ist vielleicht ein bisschen

01:48:41.300 --> 01:48:59.860
fragwürdig weil dann macht man vielleicht auch was kaputt dann dann machen wir noch

01:48:59.860 --> 01:49:06.820
mal ein reverse proxy davor auf die schnelle dass wir eben keine blöden

01:49:06.820 --> 01:49:13.700
port weiterleitung mehr brauchen das werde jetzt werde ich mir auch mal copy pasten wie gesagt

01:49:13.700 --> 01:49:18.300
eigentlich hatte ich überhaupt nicht vor das zu machen was ich jetzt mache aber ok und auch

01:49:18.300 --> 01:49:29.820
ein ingress davor ich werde jetzt eine domain liegen die mir gehört kappa lull.com aber ihr

01:49:29.820 --> 01:49:37.740
müsst euch keine hoffnung machen da läuft nichts drauf aber wir können das wir können das lokal

01:49:37.740 --> 01:49:49.940
verwenden um paar kubernetes sachen auszuprobieren ich habe ich habe übrigens auch noch nichts für

01:49:49.940 --> 01:49:59.420
zertifikate angelegt deswegen wird das jetzt wahrscheinlich gar nicht funktionieren mal aus

01:49:59.420 --> 01:50:09.060
probieren mal gucken mal gucken so zumindest machen wir das doch jetzt mal ich pushe das mit

01:50:09.060 --> 01:50:19.220
meinem tollen commit das wird am ende das wird am ende die hässlichste git konfig aller zeiten

01:50:19.940 --> 01:50:40.660
also ich habe ich habe eben die datei geabdeckt ok guck mal mal rein wie lang es dauert

01:50:40.660 --> 01:50:53.900
wobei nee es ist ich kann es beschleunigen ich klicke jetzt einfach drauf sondern sollte

01:50:53.900 --> 01:51:01.180
jetzt der sollte jetzt gleich checken normalerweise sollte er es hoffe ich warum warum auch immer

01:51:01.180 --> 01:51:12.540
dass nicht checkt ich sollte mitbekommen haben das ist jetzt ich mache eigentlich nur die

01:51:12.540 --> 01:51:23.860
argo cd konfig über ein repo in argo cd ja kann man auch machen pro crepe progression was was

01:51:23.860 --> 01:51:37.740
hat er was hat er für schmerzen war warum

01:51:45.260 --> 01:51:52.740
habe ich an der falschen stelle angelegt oh ich depp es komplett an der falschen stelle

01:51:54.340 --> 01:52:06.900
der hat es alles richtig gemacht aber da kommt es gar nicht hin es kommt da rein lull ok pushen

01:52:06.900 --> 01:52:13.740
wir das ganze noch mal aktualisieren wir unsere repos zack wir werden feststellen hier ist es

01:52:13.740 --> 01:52:29.420
wieder weg und hier ist es hoffentlich und hier ist es jetzt da gleich so sink also ich

01:52:29.420 --> 01:52:34.020
würde auch argo cd nicht nicht unbedingt automatisch darüber updaten so ingress

01:52:34.020 --> 01:52:43.740
total hängen geblieben wo ist er denn da ist er doch also ich hätte ich suchen müssen ok

01:52:43.740 --> 01:52:49.700
passt jetzt schauen wir mal ob das funktioniert ping argo cd punkt kappa lull punkt komm ok

01:52:49.700 --> 01:52:55.140
ip löst schon mal auf körl es kann durchaus sein dass es nicht funktioniert

01:52:55.260 --> 01:53:00.100
klar dass es irgendwie nicht nicht nicht tut

01:53:00.100 --> 01:53:06.180
warum eigentlich nicht

01:53:06.180 --> 01:53:11.620
get ingress

01:53:11.620 --> 01:53:18.540
ingress ne engine x

01:53:25.140 --> 01:53:40.740
das ist schon mal ok was macht eigentlich der der engine x moment ach ich habe mein ingress

01:53:40.740 --> 01:53:50.420
gar nicht aktiviert add-on ja das ist halt da kann es auch funktionieren ingress ist quasi

01:53:50.420 --> 01:53:58.740
ein reverse proxy oder einen proxy am eingang so körn mal gucken ob das jetzt nachträglich

01:53:58.740 --> 01:54:13.140
geht hey rtt ps ja minus k hey es funktioniert guck mal argo cd punkt kappa lull punkt komm

01:54:13.140 --> 01:54:23.420
das immer admin schon haben wir eine gültige gültige domain also gültig an anführungsstrichen

01:54:23.420 --> 01:54:27.380
das ist immer noch ein selbst sein zertifikat weil ich noch kein letztes kript eingeboten

01:54:27.380 --> 01:54:32.140
bringt die musik ist gerade ein bisschen sehr sehr energisch

01:54:46.140 --> 01:54:48.260
hoffe das ist das richtige

01:54:48.260 --> 01:54:57.220
ein secret ok das ist das richtige

01:55:18.260 --> 01:55:27.860
ich habe übrigens mal nicht dass ich auch passwörter liege leute ich bin mir nicht

01:55:27.860 --> 01:55:28.860
ganz sicher

01:55:28.860 --> 01:55:47.700
ich liege keine passwörter alles gut man weiß ja nie

01:55:47.700 --> 01:55:53.580
ok gut so und schon haben wir eine domain mit einem zertifikat was man jetzt auch theoretisch

01:55:53.580 --> 01:55:57.500
über letztes kript machen könnte aber das mache ich heute nicht weil da habe ich nix

01:55:57.500 --> 01:56:02.500
nix an keys da da müsste ich erst mal wieder was generieren was funktioniert so also wir

01:56:02.500 --> 01:56:07.700
haben jetzt ein kubernetes cluster und ein git repo und was ich in dieses git repo rein

01:56:07.700 --> 01:56:12.300
packen das machen wir heute nicht weil ich dieses git repo rein packen wird automatisch

01:56:12.300 --> 01:56:17.100
deployed so nachdem ich jetzt ganz viel gemacht habe was ich eigentlich gar nicht machen

01:56:17.100 --> 01:56:26.580
wollte was vielleicht aber fürs setup hier auch gar nicht so verkehrt ist jetzt deployen

01:56:26.580 --> 01:56:31.260
wir mal eine app weil das ist ja letztendlich das was man machen möchte man will ja auf

01:56:31.260 --> 01:56:34.780
seinem kubernetes cluster was laufen lassen man möchte ja nicht sich selbst verwalten

01:56:34.780 --> 01:56:39.860
und sich dabei erst freuen dass sich schön selbst verwaltet sondern möchte ja auch

01:56:39.860 --> 01:56:46.060
irgendwas darauf deployen was dann läuft also irgendwas was hello world für unseren fall

01:56:46.060 --> 01:56:50.500
oder sowas jetzt zurück gibt ja gut laut lautechno tim schon der hat ja auch seine

01:56:50.500 --> 01:56:55.420
drei kubernetes cluster daheim auf den faktisch so gut wie nix läuft wenn man da spaß dran

01:56:55.420 --> 01:57:03.340
hat zum lernen ok why not kann man auch lokal in der vm basteln aber jeder wie er will ich

01:57:03.340 --> 01:57:06.820
finde es teilweise ein bisschen übertrieben wenn man infrastruktur hat nur um sich selbst

01:57:06.820 --> 01:57:14.580
zu verwalten aber aber ok jeder jeder wie er mag jetzt haben wir hier unsere unsere

01:57:14.580 --> 01:57:17.900
config für unseren kubernetes cluster und jetzt bauen wir mal eine app

01:57:17.900 --> 01:57:26.100
fife hat ab cute ab die cute ab bauen wir jetzt so da gehen wir nämlich in ein anderes

01:57:26.100 --> 01:57:35.380
fenster und machen dort drinnen mal ein dotnet projekt und zwar eine web anwendung die hello

01:57:35.380 --> 01:57:41.780
world zurück gibt und sonst nix quasi das was wir das letzte mal auch schon gemacht haben nur

01:57:41.780 --> 01:57:50.700
mit ein paar kleinen anpassungen drin welchen clipboard manager verwendest du ich benutze

01:57:50.700 --> 01:57:57.980
rofi zum suchen und clipboard manager ist cream clip glaube ich dort net in linux klar dort net

01:57:57.980 --> 01:58:04.700
ist super mittlerweile unter linux ist eines der besten plattformen die es gibt nicht nur

01:58:04.700 --> 01:58:15.380
für linux für alles nix kopium das ist so es ist nicht weil ich das so will sondern es ist so

01:58:15.380 --> 01:58:25.940
neu webapp wir beschleunigen das ganze wir machen ja heute kein dotnet progas progas stream deswegen

01:58:25.940 --> 01:58:35.820
machen wir das jetzt mal ganz zackig wo läuft das renovate ich benutze die github app du kannst

01:58:35.820 --> 01:58:42.180
es allerdings auch selber hosten oder das kommando zeilen tool verwenden oder in docker container

01:58:42.180 --> 01:58:46.940
verwenden oder dann kombiniertes klasse laufen lassen oder dass bei ihnen gehostet verwenden

01:58:46.940 --> 01:59:00.020
gibt irgendwie alle möglichen varianten für jeden was dabei ok also die app kopiere ich uns

01:59:00.020 --> 01:59:05.420
jetzt rüber vom letzten mal wie gesagt wir müssen heute wir müssen heute kein großartiges dotnet

01:59:05.420 --> 01:59:13.220
progas progas zeug machen die app wird äußerst simpel die macht nämlich nix weiter außer kopier

01:59:13.220 --> 01:59:35.580
das jetzt rüber was ok trust wir trusten alles alles getrusted hier programm cs folgendes

01:59:35.580 --> 01:59:41.260
so jetzt ich kann die clipboard manager wieder anmachen dass ich was kopieren kann

01:59:41.260 --> 01:59:49.220
so also unsere app macht nix weiter außer health checks zu haben unter slash health und über

01:59:49.220 --> 02:00:01.140
der environment variablen name einzulesen um dann cute chatter rauszuhauen über index web request

02:00:01.140 --> 02:00:08.700
sonst nix das war es mehr mehr werden wir daran mehr werden wir daran auch nicht bauen jetzt also

02:00:08.700 --> 02:00:12.420
im prinzipie nicht weiter nicht mal groß aufmachen müssen wie gesagt ist ja wird er kein wird er

02:00:12.420 --> 02:00:17.900
kein dotnet dotnet bastel stream heute was wir jetzt noch machen wir legen den dockerfile an

02:00:17.900 --> 02:00:24.580
weil wir möchten ja das ganze in github pushen und mit github actions wir machen auch ein bisschen

02:00:24.580 --> 02:00:32.780
github actions klein und über github actions den container bauen und in die github container

02:00:32.780 --> 02:00:49.300
registry pushen ja so sieht es aus so dazu brauchen wir ein dockerfile um den um den

02:00:49.300 --> 02:00:54.380
container zu bauen und nachdem wir jetzt nicht erst mal wieder fünf stunden nachgucken müssen

02:00:54.380 --> 02:01:02.060
oder nachgucken wollen wie die richtige syntax ist kopiere ich mir den dockerfile es ist das

02:01:02.060 --> 02:01:09.460
standard dotnet oder ein bisschen von mir leicht angepasstes standard dotnet dockerfile also

02:01:09.460 --> 02:01:13.860
sprich wir nehmen das normale den normalen base container von microsoft den die gebaut haben

02:01:13.860 --> 02:01:19.820
für ihre aktuelle dotnet version bauen das projekt im release modus kopieren es rüber

02:01:19.820 --> 02:01:24.700
und am ende wird es gestartet fertig aus das ist alles also wenn ich jetzt docker bild mache dann

02:01:24.700 --> 02:01:31.460
funktioniert das docker bild mache dann funktioniert das einfach wobei wenn ich docker bild machen wir

02:01:31.460 --> 02:01:35.540
wir bauen das ganze jetzt über github action aber ich wollte euch bloß zeigen dass das dass

02:01:35.540 --> 02:01:40.620
das funktioniert so mehr brauchen wir an der stelle eigentlich nicht wir können jetzt in

02:01:40.620 --> 02:01:47.580
github gehen also ne pushen pushen sollten wir es vielleicht noch status ah sekunde wir brauchen

02:01:47.580 --> 02:01:56.220
ein github ignore file für dotnet ansonsten wird ich push ja keine binaries hier hoch wim.github ignore

02:01:56.220 --> 02:02:03.540
zack rein damit github status das sieht schon besser aus github ignore dockerfile programm

02:02:03.540 --> 02:02:15.180
properties ok alles was wir haben wollen commit also git add einmal initial git commit minus

02:02:15.180 --> 02:02:23.860
a minus m cute chat ajaja git push origin master triggert weil master verwendet wird

02:02:23.860 --> 02:02:35.980
bitte nicht auf twitter posten so f5 da sind wir hier ist unsere app am start so und jetzt also

02:02:35.980 --> 02:02:42.540
mein plan ist folgender ich will die app über github actions bauen in die github container

02:02:42.540 --> 02:02:50.100
registry pushen und dann für unseren kubernetes cluster eine neue app anlegen also besser gesagt

02:02:50.260 --> 02:02:58.900
ein neues deploy also neue app und ein neues deployment anlegen wo die app dann deployed

02:02:58.900 --> 02:03:00.620
wird auf unseren kubernetes cluster

02:03:00.620 --> 02:03:13.860
gucken wir mal hin gucken wir mal ob wir das hinkriegen einziges wo ich mir ein bisschen

02:03:14.620 --> 02:03:24.060
probleme vorstelle ist access auf die container registry dafür brauche ich einen extra key

02:03:24.060 --> 02:03:32.700
es wird doch zeit dass wir das nächste mal uns in den secret management lösungen überlegen

02:03:32.700 --> 02:03:40.380
und uns angucken weil die gefahr dass ich bei irgendwas liege steigt ja image einfach

02:03:40.900 --> 02:03:44.540
machen das ist eine gute idee das machen wir jetzt auch einfach ich mache das einfach

02:03:44.540 --> 02:03:49.900
öffentlich die app weil hier ist ja nix hier ist ja nix irgendwie großartig secret secret

02:03:49.900 --> 02:03:57.220
drinne ich kann das einfach öffentlich machen das ist richtig ganz einfach easy da muss ich

02:03:57.220 --> 02:04:00.940
die projekt settings ich weiß nicht ob man da was sieht was ihr nicht sehen darf sehen dürft

02:04:01.540 --> 02:04:05.580
wo macht man das überhaupt

02:04:19.100 --> 02:04:26.260
wo macht man das ich glaube ich habe noch nie ein privates repo public gemacht das ist

02:04:26.260 --> 02:04:36.900
separat vom git repo es ist egal machen wir machen das wo ist denn das

02:04:45.060 --> 02:04:52.020
jetzt bin ich ok ich mache mich mal wieder an bin ich verwirrt wie macht man ein privates repo

02:04:56.260 --> 02:05:09.780
ah change visibility change to public ok

02:05:09.780 --> 02:05:13.380
yes

02:05:13.380 --> 02:05:23.020
anyone can fork your repository is ok yes yes yes yes ok make public

02:05:23.020 --> 02:05:35.460
wunderbar alles klar so jetzt unser repo public jetzt haben wir da auch kein problem

02:05:35.620 --> 02:05:43.660
also wir müssen jetzt für github actions dass wir den container bauen können müssen wir

02:05:43.660 --> 02:05:51.500
eine datei anlegen in einem ordner github workflows das ist so ich glaube sogar dass

02:05:51.500 --> 02:06:03.820
sie da mittlerweile eine hilfe dafür haben wenn man nämlich auf actions geht pull request wir

02:06:03.820 --> 02:06:11.100
konfigurieren kein renovate jetzt wenn man auf actions geht und dann kann man hat das nicht

02:06:11.100 --> 02:06:17.100
so was wie empty auch egal dann legen wir jetzt einfach configure an egal wir kopieren ich

02:06:17.100 --> 02:06:30.340
kopiere eh meine eigene meine eigene meine eigene github action rein gucken dass da keine

02:06:30.340 --> 02:06:35.260
secrets drin sind man sollte keine secrets in github action schreiben aber vielleicht man weiß

02:06:35.260 --> 02:06:41.460
ja nicht also was die action macht ist folgendes wenn text gepusht werden also sprich wenn eine

02:06:41.460 --> 02:06:50.820
neue version gepusht wird dann macht ihn docker login docker login ist ein bisschen bisschen

02:06:50.820 --> 02:06:56.820
bescheuerte bezeichnung für identifizieren gegenüber einer container registry oder benutzt

02:06:56.820 --> 02:07:04.260
nicht etwa doch er kommt docker hub sondern er benutzt die github github container registry

02:07:04.260 --> 02:07:14.860
und dann baut er den container und dann pusht er den container nicht zur test app sondern zu

02:07:14.860 --> 02:07:19.420
cute app das könnte man übrigens auch noch schöner machen dass man das gar nicht reinschreiben muss

02:07:19.420 --> 02:07:22.460
gibt es ein paar ansätze wie man wie man so eine action bauen kann

02:07:22.460 --> 02:07:36.380
so und jetzt speicher ich das ganze und wenn ich glück habe funktioniert alles

02:07:36.380 --> 02:07:48.500
ja docker image punkt jammel vollkommen ok so geben wir mal unser repo rein holen noch mal

02:07:48.500 --> 02:08:00.260
ok er erkannt und jetzt machen wir github tag 1 0 punkt oder v 0.0.1

02:08:00.260 --> 02:08:12.140
das gleiche noch mal github push minus minus tags und wenn ich das gemacht habe jetzt sollte

02:08:12.140 --> 02:08:21.220
er eigentlich eine github action laufen macht er auch es läuft eine github action die unser

02:08:21.220 --> 02:08:32.060
container image baut und unsere in die public github container registry pusht was nicht

02:08:32.060 --> 02:08:52.420
funktioniert hat weil weil invalid tag repository must be lowercase ok das wusste ich nicht wie

02:08:52.420 --> 02:09:00.140
heißt wie heißt mein repository dann publish published your package einfach alles klein

02:09:00.220 --> 02:09:06.020
geschrieben dann cute app wahrscheinlich alles klein geschrieben das wusste ich gar nicht

02:09:06.020 --> 02:09:11.260
dass das so nicht funktioniert ok dann schreiben wir hier einfach rein cute app ich hoffe das

02:09:11.260 --> 02:09:18.340
funktioniert dann immer noch warum habe ich jetzt warum habe ich jetzt auf lief gedrückt richtig

02:09:18.420 --> 02:09:38.420
brain dead ok rerun den ein gibt ja nur ein ach nee das funktioniert ja nicht weil zu dem

02:09:38.420 --> 02:09:52.980
zeitpunkt das noch verkehrt war muss ich muss ich noch mal neu tag pull tag version 2 ganz

02:09:52.980 --> 02:10:02.140
ganz essentiell ja ich funktioniert hat er wieder hat er wieder das gleiche was be lowercase push

02:10:02.140 --> 02:10:05.780
minus minus tags so aber jetzt jetzt sollte es funktionieren

02:10:05.780 --> 02:10:16.180
so gucken wir mal ob der das container image jetzt baut bild

02:10:16.180 --> 02:10:35.180
github please die anzeige ist ein bisschen pepega an der stelle aber so ist es halt

02:10:35.180 --> 02:10:42.340
jetzt können wir nur präge machen chat einmal präge weil wir müssen runde wir müssen runde

02:10:42.340 --> 02:10:53.060
präge machen dass das funktioniert sonst klappt das nicht wenn es sich pusht nickt es an euch

02:10:53.060 --> 02:11:05.020
verbinden ok public repo nicht gleich public container registry moment public container

02:11:05.980 --> 02:11:10.860
warum habe ich keine rechte da rein zu pushten

02:11:25.100 --> 02:11:27.700
warum wo ist das problem jetzt

02:11:27.700 --> 02:11:36.580
warum habe ich keine rechte in meine eigene container registry zu pushen

02:11:36.580 --> 02:11:42.580
ich weiß woran das liegt das ist immer so das ist immer so das ist dann das ist richtig

02:11:42.580 --> 02:11:47.580
hängen geblieben gemacht da muss man immer hier irgendwo was einstellen jaja ich erinnere mich

02:11:47.660 --> 02:12:01.100
genau workflow permissions ich glaube ja das muss man glaube ich machen das ist richtig

02:12:01.100 --> 02:12:06.660
hängen geblieben fragt mich fragt mich nicht was warum na gut ist vielleicht ganz ok dass

02:12:06.660 --> 02:12:18.460
es standardmäßig nicht geht kann man nicht einfach sagen rerun den hier na gut es ist ja

02:12:18.460 --> 02:12:26.260
nur das hier und der glück haben geht jetzt irgendwann mal unser container image drei

02:12:26.380 --> 02:12:47.060
stunden später eventuell es liegt auch an euch ihr habt kein präge gespams ohne präge

02:12:47.060 --> 02:12:58.300
kein container push ganz einfach jetzt ok jetzt für jetzt wird es funktionieren easy

02:12:58.300 --> 02:13:12.020
pushing easy hat funktioniert sisse kaum ist der präge im chat am start schon funktioniert so wir

02:13:12.020 --> 02:13:17.180
haben ein container image generiert und zwar nein max klickt doch nicht immer so ein scheiß an

02:13:17.180 --> 02:13:22.740
cute ab wir haben ein container image übrigens kann sich jeder bei euch jetzt das container

02:13:22.740 --> 02:13:26.100
image pullen ihr habt nichts davon weil dem container image eigentlich nichts spannendes

02:13:26.100 --> 02:13:34.580
drin ist aber ihr könntet ihr könntet ein container image erstellen davon ableiten und

02:13:34.580 --> 02:13:42.020
eine eigene hello world ab bauen macht macht macht keinen sinn sich das zu pullen aber gut

02:13:42.020 --> 02:13:52.780
jetzt habe ich meine app erstellt hat meine app gebaut über github actions und jetzt will ich

02:13:52.780 --> 02:13:58.900
meine app ja laufen lassen über beziehungsweise in meinem kubernetes cluster oder in meinem

02:13:59.900 --> 02:14:05.860
das heißt wir machen da bin ich mir jetzt gar nicht sicher aus dem kopf wie man es

02:14:05.860 --> 02:14:12.340
gescheit macht ja so zumindest wir legen in apps schon mal eine neue app an und zwar new file

02:14:12.340 --> 02:14:21.260
cute app punkt jammel und füllen das hier mal aus also cool geht ab cute cute app

02:14:21.260 --> 02:14:33.340
ne moment was mache ich denn blödsinn blödsinn schwachsinn blödsinn ist alles richtig wie es da

02:14:33.340 --> 02:14:40.100
drin steht da fack ist alles richtig wie es da drin steht das repo ist ja immer noch das gleiche so

02:14:40.100 --> 02:14:47.140
meta data agocd ist schon mal falsch cute app ist das richtige namespace default machen wir die

02:14:47.140 --> 02:14:57.100
mal rein ist egal ein moment der falsche namespace hier default namespace path cute app dann legen

02:14:57.100 --> 02:15:03.580
wir unten ein ordner an für die cute app und da kommen jetzt unsere manifests rein wie das ganze

02:15:03.580 --> 02:15:10.380
deployed werden soll glücklicherweise habe ich mein deployment noch vom letzten mal am start

02:15:10.380 --> 02:15:24.220
repos minicube code leider nicht super geheim nur cute punkt jammel öffnen und da kopieren

02:15:24.220 --> 02:15:36.980
wir unser deployment jetzt einfach mal rüber new file mehr brauchen wir da nicht zack so passt

02:15:36.980 --> 02:15:43.940
das noch was ich das letzte mal hier gebaut habe deployment replicas 6 ja unbedingt wichtig die cute

02:15:43.940 --> 02:15:50.180
app muss zwingend ganz wichtig mindestens sechs container laufen haben sonst ist er nicht hoch

02:15:50.180 --> 02:15:58.700
verfügbar genug matching labels cute labels ich hoffe mal das stimmt alles ja localhost nein das

02:15:58.700 --> 02:16:07.860
image ist jetzt anders das image ist jetzt das von meiner container registry resource limit

02:16:07.860 --> 02:16:14.340
container port 80 health port 80 alles gut passt service load balancer können wir uns eigentlich

02:16:14.340 --> 02:16:18.660
schenken brauchen wir an der stelle nicht weil wir machen ihnen ingress davor also den proxy

02:16:18.660 --> 02:16:33.220
und nee der host wird nicht kackel.kekwe.services sondern cuteapp.kappalull.com und ich hoffe dass

02:16:33.220 --> 02:16:44.420
mein ingress auch port 80 macht und nicht nur 443 so ich habe bestimmt irgendwas meine jammel

02:16:44.420 --> 02:16:48.900
engineer skills sind nicht on point ich habe bestimmt hier irgendwie namespace falsch oder

02:16:48.900 --> 02:16:55.060
irgendwas habe ich hier bestimmt nicht richtig nicht richtig gemacht gut es steht gar kein

02:16:55.060 --> 02:17:01.540
namespace drin das heißt namespace sollte die fault sein hoffe ich mal schauen wir mal

02:17:01.540 --> 02:17:07.980
gucken wir mal was funktioniert zumindest kann ich euch jetzt noch mal den vorteil von argocd zeigen

02:17:07.980 --> 02:17:12.980
ich mache nichts an meinem kubernetes cluster leute das ist jetzt ja das coole daran ich mache

02:17:12.980 --> 02:17:19.860
nichts an meinem kubernetes cluster ich gehe einfach nur in mein in mein repo rein commit die

02:17:19.860 --> 02:17:32.980
config ah ihr habt neues kackel so commit die config für meine neue app warte bis argocd

02:17:32.980 --> 02:17:39.900
refreshed hat oder lass ihn refreshen autosync und zack ist die cuteapp am start ist das nicht

02:17:39.900 --> 02:17:43.780
nice aber die cuteapp ist noch nicht deployed weil ich nicht automatisch die deployment für

02:17:43.780 --> 02:17:49.580
die cuteapp eingestellt habe cuteapp is missing autosync okay er würde anlegen einen service

02:17:49.580 --> 02:17:57.780
ein deployment also die für die pots und ein ingress eingang also sinken wir das ganze mal

02:17:57.780 --> 02:18:06.220
und ich hoffe ich habe jetzt alles richtig gemacht wahrscheinlich nicht sechs pots starten aber

02:18:06.820 --> 02:18:29.660
wahrscheinlich geht das pull nicht oder sowas error crash ja gut irgendwas habe ich verkackt

02:18:29.860 --> 02:18:36.540
vom prinzip hat schon mal funktioniert er hat sechs pots angelegt die nicht funktioniert

02:18:36.540 --> 02:18:42.140
warum warum crashen die dann gucken wir doch mal warum die crashen wir mal get lock

02:18:42.140 --> 02:18:48.420
pot cuteapp warum crashst du was

02:18:56.420 --> 02:18:58.860
mein app hat einen bug hat einen bug

02:18:58.860 --> 02:19:07.660
doch kein bild habe ich irgendwas verkackt wir testen mal lokal ob die app läuft

02:19:07.660 --> 02:19:16.620
docker run wait a minute

02:19:16.620 --> 02:19:25.820
ich weiß woran es liegt

02:19:25.820 --> 02:19:36.420
oh man mein startfile heißt nicht cuteapp heißt das ding ja nicht testapp

02:19:36.420 --> 02:19:48.900
falscher aber man die fehlermeldung von von totnet ist ja mal wieder excellent oder

02:19:48.900 --> 02:19:54.060
niemand niemand checkt was uns doch net damit sagen will

02:19:54.060 --> 02:20:01.900
ran gucken wir mal ob es prinzipiell funktioniert

02:20:01.900 --> 02:20:17.740
ja funktioniert ok wir probieren es mal aus lokal host pot mal karl lokal host slash health

02:20:17.740 --> 02:20:27.140
ach so ich habe keine container keine ports weiter klar ist egal ist egal ich kann das update

02:20:27.140 --> 02:20:32.580
zeigen mache ich auch aber wir passen noch was anderes an und zwar wir gehen in unsere app

02:20:32.580 --> 02:20:45.420
konfiguration und sagen jetzt agocd wie heißt das automated irgendwas automated sync policy

02:20:45.420 --> 02:20:57.260
dass ihr seht dass es sich komplett automatisch fix automated sync policy speck automated

02:20:57.260 --> 02:21:08.740
wir wollen haben allow empty ist ok das darf es ruhig sein was haben wir noch sehr viel

02:21:09.740 --> 02:21:16.780
eigentlich brauchen wir da nichts von automated ist gut gut so jetzt haben wir unsere

02:21:16.780 --> 02:21:26.780
ich überlege grad wie ist denn der effekt jetzt am besten ich push das hier zuerst weil weil weil

02:21:26.780 --> 02:21:32.180
ich zeige euch auch warum passt mal auf das ist jetzt richtig es ist richtig cool was wir gebaut

02:21:32.180 --> 02:21:37.940
haben und euch wird auch gleich auffallen warum so erstmal ich lasse ihn noch mal kurz aktualisieren

02:21:37.940 --> 02:21:45.700
hier jetzt jetzt jetzt sieht man nämlich wie gut das wie gut das in kombination passt ja ja

02:21:45.700 --> 02:21:53.900
refresh refresh alles klar refresh refresh hat er hat das jetzt gecheckt hat das jetzt gecheckt

02:21:53.900 --> 02:22:04.020
das auto auto refresh alles nee warum nicht warum hat er nicht gecheckt das autorefresh alles

02:22:04.020 --> 02:22:12.860
ich habe sync policy auf automated gestellt warum hat er das nicht kapiert

02:22:19.580 --> 02:22:25.020
wo ist das problem wahrscheinlich weil er immer noch processing ist kann das sein

02:22:35.020 --> 02:22:42.660
warum ist warum warum ist sync nicht nicht drin ok ich delete das jetzt einfach mal

02:22:42.660 --> 02:23:08.100
du hast die endung am docker fall gepusht ja wenn man zu viel zeug offen hat ok ja das

02:23:08.100 --> 02:23:15.620
hätte ich mir auch sparen können aber gut wenn man auch so schöne comment messages macht dann

02:23:15.620 --> 02:23:21.540
blickt man ja auch richtig gut durch ok jetzt jetzt hat er es gecheckt ok refresh

02:23:21.540 --> 02:23:29.340
und jetzt hat er automatisch gesüngt guckt jetzt hat er automatisch die pot sind immer

02:23:29.340 --> 02:23:35.620
noch kaputt und jetzt und jetzt seht ihr gleich was sehr cool ist was super agile 5 hat bis sehr

02:23:35.620 --> 02:23:53.180
def win ob es ist also nur nur die ganz frei fertigen können das so es ist jetzt sind status

02:23:53.180 --> 02:23:58.460
ist kaputt die pots sind immer noch kaputt alles gut ja weil wie gesagt die ich habe

02:23:58.820 --> 02:24:07.580
nicht noch nicht die neueste version deployed ab details kurz gucken autosync ist an gut und

02:24:07.580 --> 02:24:13.260
jetzt habe ich den back gefixt ihr habt ja gesehen ich hatte einen back im docker fall also sprich

02:24:13.260 --> 02:24:22.060
die app wurde falsch falsch gebaut so was wir jetzt machen und wo der effekt eigentlich richtig

02:24:22.060 --> 02:24:32.900
richtig nice ist ich setze zu neuen tag nämlich tag 0.3 dann pushe ich das ganze und alleine wird

02:24:32.900 --> 02:24:39.460
übrigens noch nix passieren aber jetzt könnt ihr den sehr schönen effekt sehen ja habe ich ich

02:24:39.460 --> 02:24:45.140
habe statisch reingeschrieben aber jetzt kommt jetzt kommt alles zusammen was ich euch was ich

02:24:45.140 --> 02:24:49.860
euch zeigen wollte ich habe eine neue container also wir warten jetzt erst mal bis es gebaut ist

02:24:49.860 --> 02:24:56.580
ich glaube ich muss die config noch anpassen aber ich zeige trotzdem so wir warten mal bis

02:24:56.580 --> 02:25:01.220
unsere bis unsere action durch ist keckel eindeutig beste beste bezeichnung dafür

02:25:01.900 --> 02:25:11.640
keck keck keck keck keck keck keck keck

02:25:15.580 --> 02:25:25.460
du du du du du du du du du du du du du du douthil

02:25:25.460 --> 02:25:36.660
wir müssen noch eine sache anpassen mache ich jetzt auf screen dass der dass der effekt

02:25:36.660 --> 02:25:42.940
nicer ist bei scheiß drauf ich mache das nicht auf screen kannst du ihr könnt ruhig sehen

02:25:42.940 --> 02:25:51.860
pass jetzt noch mal kurz meine renovate jason an weil ich da was vergessen hab drin sollte

02:25:51.860 --> 02:26:05.180
das eigentlich so aussehen als match aber das überhaupt von netas jammel soll er auf

02:26:05.180 --> 02:26:19.060
jeden fall untersuchen so und jetzt kommt der prog moment hat meine app gepusht app

02:26:19.060 --> 02:26:25.740
wurde gebaut und jetzt läuft irgendwann mein bot im hintergrund gucken ob er gucken ob er

02:26:25.740 --> 02:26:32.980
gelaufen ist und dann wird euch was auffallen was mein bot festgestellt hat und zwar hat mein bot

02:26:32.980 --> 02:26:43.900
festgestellt irgendwann wenn er gelaufen ist wie gesagt haustet kostenloser service da kann

02:26:43.900 --> 02:26:49.700
nur mal durchaus ein paar sekunden dauern oder habe ich eben nicht geklickt

02:26:49.700 --> 02:27:02.300
habe ich leute jetzt ok ist gelaufen und guckt mal da da ist ein pull request und was ist in

02:27:02.300 --> 02:27:10.820
diesem pull request drinne guck mal da es gibt ein update für cute app version 003 keine change log

02:27:10.820 --> 02:27:23.100
informationen und siehe da er möchte meine app update von 2 auf version 3 und dann sage ich jetzt

02:27:23.100 --> 02:27:30.620
ok gut will ich machen also ihr müsst jetzt mal an der stelle muss ich muss ich jetzt muss jetzt also

02:27:30.620 --> 02:27:36.900
ihr müsst jetzt an der stelle realisieren dass das hier sehr vereinfacht ist und ich alles in

02:27:36.900 --> 02:27:43.420
einer person mache normalerweise hätte ja nicht ich die anwendung gebaut sondern irgendein

02:27:43.420 --> 02:27:52.020
programmierer oder irgendein frag mich nicht 5 hat sprint super krass mega koordinator ist

02:27:52.020 --> 02:27:56.820
der meinung jetzt gibt es eine neue version und pusht das dann also habe ich ja nichts mit zu tun

02:27:56.820 --> 02:28:07.180
also ich habe jetzt alles zwar selbst gemacht habe ich ja nichts mit zu tun und ich bekomme

02:28:07.180 --> 02:28:11.140
jetzt eine nachricht in meinem kubernetes konfigurier pro guck mal es gibt eine neue

02:28:11.140 --> 02:28:18.860
version von einem unserer selbst entwickelten programme please lasst doch mal updaten da sage

02:28:18.860 --> 02:28:23.580
ich einfach jawohl ich möchte den pull request und sobald das drinne ist passt mal auf was jetzt

02:28:23.580 --> 02:28:33.180
passiert ich hoffe das funktioniert jetzt weil es könnte durchaus sein dass es nicht geht

02:28:33.180 --> 02:28:37.220
weil es noch progressing ist wenn ich muss ich einmal von hand anstoßen

02:28:37.220 --> 02:28:55.420
so anscheinend aus irgendwelchen gründen funkt jetzt nicht zink

02:29:07.220 --> 02:29:18.740
es hat schon leute es ging einfach zu schnell ich hätte überhaupt nichts machen es ging

02:29:18.740 --> 02:29:25.700
einfach zu schnell es war so schnell dass ich gar nicht mitbekommen habe es ging einfach guck mal

02:29:25.700 --> 02:29:43.740
meine pots sind da es hat funktioniert was auf und meine pots laufen cute app am start und wenn

02:29:43.740 --> 02:30:01.500
der ingress funktioniert dann kann ich jetzt sogar sagen cuteapp.kappa0.com und jetzt ist das mit dem

02:30:01.500 --> 02:30:08.100
deployen neuer apps wirklich easy geworden app eintracht anlegen gibbi

02:30:08.100 --> 02:30:15.660
das hatten wir heute schon offen k9s

02:30:15.660 --> 02:30:30.780
um das jetzt noch mal zu recapitulieren wir haben unseren container gefixt haben

02:30:30.780 --> 02:30:41.060
neuen tag gepusht also die app war kaputt so wir haben die app lokal gefixt haben das gepusht

02:30:41.060 --> 02:30:47.900
dann lief eine github action die bei jedem tag push läuft also wir haben das neu getagged die

02:30:47.900 --> 02:30:53.900
die neue software version die den bug behoben hat die github action hat erkannt aha es gibt

02:30:53.900 --> 02:30:58.580
neuen tag lasst mal ein image bauen hat ein image gebaut hier mit dieser action

02:30:58.580 --> 02:31:04.220
blablabla image gebaut das image seht ihr auch hier

02:31:04.220 --> 02:31:17.780
daraufhin hat mein bot der meine repos überwacht festgestellt also mein kubernetes config repo

02:31:17.780 --> 02:31:23.780
festgestellt es gibt eine neue version von unserer app das hat er festgestellt nachdem

02:31:23.780 --> 02:31:29.820
das hier gelaufen ist nachdem das image gebaut wurde dann habe ich das gemercht und quasi

02:31:29.820 --> 02:31:36.820
zehn sekunden später ohne mein zutun wie gesagt ich hätte nicht klicken müssen das war es war

02:31:36.820 --> 02:31:47.740
schon fertig und falsches falsches fenster ohne mein zutun ist jetzt auf einmal die app

02:31:47.740 --> 02:31:55.860
hat sich automatisch synchronisiert neu deployed bug ist behoben pots laufen wieder das heißt wenn

02:31:55.860 --> 02:32:02.460
ich jetzt bug hab muss ich gar nichts machen ich fix das ich pusht das und entweder ist es so

02:32:02.540 --> 02:32:08.860
eingestellt dass ich das hier automatisch merche oder möglichst schnell das das ganze

02:32:08.860 --> 02:32:13.260
merkt und sobald ich gemercht hat mit meinem config repo ist es da man könnte sich jetzt zum

02:32:13.260 --> 02:32:23.820
beispiel auch dafür entscheiden dass man das hier die config für die app gar nicht in dem

02:32:23.820 --> 02:32:31.900
repo hat sondern auch im app repo so für das ja das ist ein bisschen handhabungsfrage manche

02:32:31.900 --> 02:32:39.260
sagen sogar man sollte das noch weiter aufsplitten quasi so einen cluster config repo ein config

02:32:39.260 --> 02:32:45.980
repo pro app und ein app repo für die software an sich philosophie frage und wahrscheinlich

02:32:45.980 --> 02:32:49.660
auch eine frage dessen wie viele leute arbeiten dran wie groß und umfangreich ist das ganze

02:32:53.820 --> 02:32:58.540
und das ist das ist halt wirklich wirklich nice ja ich zeige euch ich zeige euch das ganze jetzt

02:32:58.540 --> 02:33:02.380
noch mal fusion ich gucke mir gleich an was du geschrieben hast ich zeige euch das ganze noch

02:33:02.380 --> 02:33:08.700
mal noch noch mal weil es wirklich ein cooler workflow ist so wir sollen ein neues feature in

02:33:08.700 --> 02:33:17.780
unsere app einbauen und zwar unsere app soll jetzt anstatt cute chatter nur noch cute chat

02:33:17.780 --> 02:33:23.900
erscheinen messer besser bester feature request aller zeiten so machen wir neues

02:33:23.900 --> 02:33:33.300
machen wir neues kommet nennen das sogar mal hier best feature ever pushen das ganze dann

02:33:33.300 --> 02:33:39.580
setzen wir neuen tag wie gesagt das kann man alles wenn man möchte automatisieren aber an

02:33:39.580 --> 02:33:47.980
der stelle ich finde es nicht schlecht wenn man so so eine losschick action noch von hand macht

02:33:47.980 --> 02:33:55.100
hatte ich so machen wir neuen tag wir können auch sagen gibt push origin minus minus tags also ich

02:33:55.100 --> 02:33:59.260
habe neues feature eingebaut ich habe das ganze ich habe das ganze gepusht ich setze jetzt ein

02:33:59.260 --> 02:34:05.420
neues tag drauf weil ich sage jawoll dass es neue version die ich releasen will und dann schicke ich

02:34:05.420 --> 02:34:16.820
das ganze ab und in der zwischenzeit gucke ich jetzt mal gucke ich jetzt mal im chat rein was

02:34:16.820 --> 02:34:36.500
was es für questions gegeben hat so also wir haben momentan ein hartes problem dass wir

02:34:36.500 --> 02:34:42.020
fehler bei notes haben und wir nicht wissen woran das liegt viele haben den status not ready ok

02:34:42.020 --> 02:34:46.260
die logs frustrieren uns weil wir nix finden einer von unseren hat mittlerweile überschritten

02:34:46.740 --> 02:34:52.380
hey ich weiß das ist das was euch nicht unmittelbar was bringt aber denkt mal

02:34:52.380 --> 02:35:01.140
über englern haustät beziehungsweise managet kubernetes nach einfach nur für den fall der

02:35:01.140 --> 02:35:07.580
fälle oder habt ihr schon kann natürlich auch sein also managet heißt ja je nach anbieter

02:35:07.580 --> 02:35:16.660
unterschiedlich unterschiedlich stark managt eigentlich nix zu sagen keine ahnung

02:35:16.660 --> 02:35:26.380
hast du deine load balancer drin ein so bei mir jetzt oder oder meister fusion ich habe

02:35:26.380 --> 02:35:33.660
einen inkraten engine x ingress am anfang am eingang dass das funktioniert wie hast du

02:35:34.260 --> 02:35:46.220
installiert nee ich habe agos ich verwalte agocd über agocd rancher ich sehe auch aktuell kein

02:35:46.220 --> 02:35:52.180
einsatzgrund zu wirklich bei mir auf der arbeit verwenden wir managet kubernetes ich weiß man

02:35:52.180 --> 02:35:55.940
kann den renter glaube ich auch irgendwelche remote cluster einbinden aber dann weiß ich

02:35:55.940 --> 02:36:01.580
wie sie nicht das ist hauptsächlich kubernetes bei meiner neuen arbeit sein hauptsächlich google

02:36:01.580 --> 02:36:07.500
renter hätte ich jetzt eher sowas gesehen im rahmen von ich will wirklich was selbst betreiben

02:36:07.500 --> 02:36:16.820
ansonsten verspüre ich da nicht den zug dazu mir rancher anzugucken ich weiß es gibt rancher

02:36:16.820 --> 02:36:32.380
desktop noch so als docker ersatz so unser bot hat hoffentlich jetzt schon was erkannt

02:36:32.380 --> 02:36:41.380
nicht warum nicht warum hat er bot nicht erkannt dass es eine neue image version gibt

02:36:41.380 --> 02:36:50.540
wahrscheinlich weil er bot noch gar nicht gelaufen ist ok nice müssen wir vielleicht

02:36:50.540 --> 02:37:02.420
mal einstellen vor zwei minuten ist er gelaufen was ist da los bot warum hast du die neue

02:37:02.420 --> 02:37:11.420
image version nicht erkannt anzeige ist raus was was was geht da aber vor zwei minuten war

02:37:11.420 --> 02:37:19.100
vielleicht das package noch nicht fertig gebildet könnte das sein wäre dies wäre dies möglich

02:37:19.100 --> 02:37:36.540
auf so hä jetzt wollte ich zeigen wie cool das funktioniert habe ich bin ich jetzt total

02:37:36.540 --> 02:37:59.660
hängen geblieben habe ich was kaputt gemacht habe ich irgendwas verkackt oder warum erkennt

02:37:59.660 --> 02:38:15.020
er warum erkennt er die neue die neue app version nicht mehr 004 er erkennt doch dass das da ist

02:38:15.020 --> 02:38:24.580
ja bot bot irgendwie am verkacken gerade keine ahnung eben hat genau das gleiche noch funktioniert

02:38:24.580 --> 02:38:33.860
das verstehe ich nicht warum hat mein bot nicht gecheckt dass ich eine neue dependency

02:38:33.860 --> 02:38:39.540
abgedatet habe so dann mache ich das jetzt einfach eine hand scheiß drauf

02:38:39.540 --> 02:38:53.100
moment sollt ich sollte mal kurz holen

02:38:53.100 --> 02:39:02.700
trage ich halt mal von hand ein sammer sehr merkwürdig habe ich hatte hat er irgendwie

02:39:02.700 --> 02:39:15.060
mit ein docker pull ne ist alles da ok kein plan warum der das jetzt nicht gecheckt hat das

02:39:15.060 --> 02:39:19.100
natürlich doof wenn das manchmal nicht geht vielleicht ist es auch gerade überlastet oder

02:39:19.300 --> 02:39:27.620
er müsste eigentlich kapieren dass das eine neue version da ist hat er vielleicht probleme weil

02:39:27.620 --> 02:39:33.220
ich schon ein ticket habe was so heißt ok gucken wir mal rein gucken wir mal gucken wir mal rein

02:39:33.220 --> 02:39:40.940
warum das warum er der meinung ist dass das nicht zum glück zum glück extra hier alle tokens aus

02:39:40.940 --> 02:40:05.100
ok top es sieht man sieht man glücklicherweise nicht da gar aus

02:40:05.700 --> 02:40:14.180
ach leute ich weiß ok jetzt habe ich echt keinen plan woran es liegt warum er das nicht erkannt

02:40:14.180 --> 02:40:26.820
hat also normalerweise müsste das erkennen wir haben eine neue version am start keine ahnung ich

02:40:26.820 --> 02:40:39.420
vielleicht könnte das ein bug in dem könnte es ein bug sein benennen wir mal den pull request um

02:40:39.420 --> 02:40:45.580
dass er nicht mehr erkennt dass er dass er das schon mal gescannt hat oder beanstandet hat

02:40:45.580 --> 02:40:57.740
er sehr merkwürdig few seconds ago

02:40:57.740 --> 02:41:10.220
ok jetzt habe ich keinen plan vielleicht vielleicht ist er bot gerade irgendwie

02:41:10.820 --> 02:41:15.980
vor zwei minuten hat es noch funktioniert mit dem anderen pull request keine ahnung warum das

02:41:15.980 --> 02:41:23.500
jetzt nicht geht also normalerweise sollte jetzt erkennt es gibt version version 4 aber na gut so

02:41:23.500 --> 02:41:26.740
dann pushen wir das ganze mal von hand um das einmal abzuschließen für heute

02:41:26.740 --> 02:41:41.860
ne ne ne best best feature ever gepusht so agocd zack sollte jetzt wenn er deployed hat

02:41:41.860 --> 02:41:50.220
komm mal hier zack zack zack wenn er deployed hat sollte dann irgendwann hier gucken wir uns das

02:41:50.220 --> 02:41:57.900
ganze mal an wenn das nicht funktioniert habe ich was anderes verkackt da sollte dann irgendwann

02:41:57.900 --> 02:42:04.900
gleich cute cute chat anstatt cute chatter stehen an das autodeploy

02:42:04.900 --> 02:42:22.060
meine pots werden gerade neu gestartet seht ihr manche sind manche fertig rolling update leute

02:42:22.060 --> 02:42:29.980
hier rolling update jetzt sieht man es gerade live manchmal lande ich noch auf alt manchmal

02:42:29.980 --> 02:42:36.540
noch auf neu hat funktioniert guckt zack neue app neue app version deployed ohne ausfall dazwischen

02:42:36.540 --> 02:42:46.660
easy das cool oder man hätte man hätte eben natürlich mal gucken können wie die pots wie

02:42:46.660 --> 02:42:57.420
sich die pots neu starten das wäre da ist gewesen zu sehen was ich mache ich habe eine

02:42:57.420 --> 02:43:04.220
neue app version deployed die jetzt cute chat anstatt cute chatter anzeigt um zu sehen dass

02:43:04.220 --> 02:43:10.820
es ohne ausfall geht und dass sich komplett automatisch aktualisiert aber präserie für

02:43:10.820 --> 02:43:17.420
dich ich zeige es dir noch mal guck mal das mit dem bot lassen wir jetzt mal weg guck mal

02:43:17.420 --> 02:43:22.660
ich habe eine app gebaut also ich habe lokalen kumpane des klaster laufen ich habe eine app

02:43:22.660 --> 02:43:34.540
gebaut die sinnloses zeug ausgibt cute chat 123 wir möchten unbedingt dass der status hier cute

02:43:34.540 --> 02:43:43.060
123 chat ist so best feature ever committen wir jetzt pushen das setzten wir einen tag drauf

02:43:43.060 --> 02:43:56.140
und zwar tag 0.5 dann wird der tag gepusht dann läuft eine github action los wenn der tag gepusht

02:43:56.140 --> 02:44:09.180
wurde und erzeugt ein neues docker image pusht dieses docker image in die github container

02:44:09.180 --> 02:44:13.580
registry normalerweise habe ich den bot laufen der jetzt erkennt dass ich eine

02:44:13.580 --> 02:44:20.780
neue version habe aber das beschleunigen wir jetzt mal den bot image pusht das in

02:44:20.780 --> 02:44:27.460
die container registry irgendwann nach drei stunden wenn das in der neuen container registry

02:44:27.460 --> 02:44:33.660
angekommen ist kann ich meine kumpane des config aktualisieren und zwar haben wir jetzt version

02:44:33.660 --> 02:44:48.980
5 dann pushe ich meine kumpane des config und dann gucken wir mal uns die pots an und du wirst

02:44:48.980 --> 02:45:06.860
sehen in ein paar sekunden fängt der ganze cluster automatisch an die pots neu zu starten

02:45:06.860 --> 02:45:20.300
und ich habe keinen ausfall des services

02:45:20.300 --> 02:45:30.500
der macht jetzt rolling update da bin ich schon auf neuen pot gelandet ist das eine

02:45:30.500 --> 02:45:38.380
art deployment pipeline automatisierung ja schau es dir in k9s an ok weil ihr seid

02:45:38.380 --> 02:45:46.980
hier sieht man es genau hier sieht man es guck wie die ganzen pots neu gestartet jetzt

02:45:46.980 --> 02:45:52.940
sind alle durch jetzt wurden alle neu gestartet siehst du hier age von den pots und ich habe

02:45:52.940 --> 02:45:58.540
die neue app version da und das ist schon sehr nice oder muss man mal ehrlich sagen neue app

02:45:58.540 --> 02:46:05.580
version gepusht kumpane des manifest angepasst automatischer rollout ohne unterbrechung

02:46:05.580 --> 02:46:15.060
was ist das das hat schon was also im vergleich zu klassischem wir setzen uns um ein Uhr nachts

02:46:15.060 --> 02:46:24.220
hin upgraden irgendwas und konfigurieren noch dinger um und vielleicht erzeugen wir noch

02:46:24.220 --> 02:46:29.220
neue vms und sowas ist das hier schon deutlich cooler gut ich gebe zu das ist ein sehr simples

02:46:29.220 --> 02:46:35.900
beispiel mit einer komplett stateless app die nirgends wohin zugreift und keine datenbank hat

02:46:35.900 --> 02:46:41.460
und sowas natürlich ist das in der freie wildbahn dann auch ein bisschen komplizierter und

02:46:41.460 --> 02:46:48.380
anspruchsvoller aber so vom ansatz her ist das mega nice du pusht deine app du guckst noch

02:46:48.380 --> 02:47:00.380
einmal drauf indem du deine neue app version in ein kumpane des manifest einträgst und dann wird

02:47:00.380 --> 02:47:05.060
das ganze gepusht und gibbi der klasse rollt automatisch aus ohne dass es unterbrechung gibt

02:47:05.060 --> 02:47:09.020
milchmann dankeschön für den sub

02:47:26.820 --> 02:47:31.020
milchmann dankeschön für den sub radian tracer danke für den sub don't cry so

02:47:32.020 --> 02:47:43.860
wenn sub supreme ist supreme atino skill killer gamepad danke für die ganzen subs ich habe

02:47:43.860 --> 02:47:46.660
ich jetzt nur noch mal erwähnt weil ich mir nicht sicher bin ich habe bestimmt wieder

02:47:46.660 --> 02:47:52.580
irgendwer vergessen das soll ja nicht sein jetzt noch datenbank einbauen ja das ist natürlich

02:47:52.580 --> 02:47:57.900
dann ein bisschen schwieriger jetzt noch automatische tests ja da gibt es verschiedene

02:47:57.900 --> 02:48:06.980
möglichkeiten wie man das mit automatischen tests machen kann man könnte es über pull requests

02:48:06.980 --> 02:48:23.380
regeln also quasi ob loss cute app man würde es ja über pull request normalerweise lösen also

02:48:23.580 --> 02:48:28.740
aktuell habe ich die sachen immer nach master gepusht dann würde ein pull request erstellen

02:48:28.740 --> 02:48:37.620
und da könnte ich ja dann auch irgendwelche actions hinten dran hängen die meine tests

02:48:37.620 --> 02:48:43.260
suite laufen lassen noch zusätzlich irgendwelche sachen checken und vielleicht die genehmigung von

02:48:43.260 --> 02:48:46.780
irgend wem einholen und sowas in der richtung also normalerweise wird es ja nicht direkt den

02:48:47.660 --> 02:48:54.740
über den pull request da könnte ich an der stelle die ganzen sachen schon abfackeln

02:48:54.740 --> 02:49:04.420
wie macht er das rolling update du hast von auto update gesprochen das macht agro selber

02:49:04.420 --> 02:49:10.700
gar nicht das macht kuba nades das ist ja quasi so eines der großen vorteile weshalb man kuba

02:49:11.260 --> 02:49:17.420
verwendet weil es sowas relativ gut out of the box kann und zwar macht man das hier drüber

02:49:17.420 --> 02:49:26.540
und stellt ihr ein wie viele pots du von diesem typ laufen lassen will also sagen wir mal wie

02:49:26.540 --> 02:49:30.420
viele container du laufen lassen willst also sie haben ich sechs stück eingestellt wir haben sechs

02:49:30.420 --> 02:49:35.940
pots sechs mal die anwendung also wenn ich jetzt wenn ich jetzt her gehe und sag ich will ich will

02:49:35.940 --> 02:49:41.340
zwölf haben können wir jetzt ja mal just for fun können wir das ja mal machen ja mach ich will

02:49:41.340 --> 02:49:47.540
zwölf pots alles was ich da jetzt für jetzt machen muss ist das repo noch mal pushen mit

02:49:47.540 --> 02:49:56.340
der endung und ihr werdet sehen gleich gleich so in paar paar sekunden also in zehn 15 sekunden

02:49:56.340 --> 02:50:07.180
eskaliert automatisch hoch auf zwölf pots und das ganze hier ihr seht ohne ausfall macht er das

02:50:07.180 --> 02:50:19.060
so und wie das funktioniert das sieht auch ja du hast eine ab deployed ja genau das habe ich auch

02:50:19.060 --> 02:50:25.100
gemacht ich habe die pläne aber ohne die ganzen pentschamp den man da sonst so dabei hat ich

02:50:25.100 --> 02:50:30.660
habe einfach nur gepusht die app wird ausgerollt der neuste version stack wird ausgerollt ohne

02:50:30.660 --> 02:50:38.740
jegliche service unterbrechung und ohne dass ich großartig was machen muss ist einfach da und das

02:50:38.740 --> 02:50:43.940
ja ich habe die pläne ist eigentlich das kuhlach das so easy ist ich muss bei komplizierteren

02:50:43.940 --> 02:50:48.780
sachen aufpassen guck und schon einmal zwölf pots und es ist nichts passiert wir können auch

02:50:48.780 --> 02:50:54.620
runter skalieren wir können auch wieder auf sechs pots runter skalieren oder auf drei

02:50:54.620 --> 02:50:59.980
können sagen okay normalerweise wird man das nicht von hand machen aber ich zeigte es jetzt

02:50:59.980 --> 02:51:07.140
mal lasst ihr auf der arbeit datenbank im cluster laufen ich bin mir nicht sicher ob wir nicht

02:51:07.140 --> 02:51:12.660
vielleicht doch irgendwo datenbank im cluster haben durchaus durchaus möglich also im kubernetes

02:51:12.660 --> 02:51:18.580
cluster red ich jetzt datenbank cluster selbst ja haben wir aber im kubernetes bin ich mir nicht

02:51:18.580 --> 02:51:25.300
sicher ob wir da nicht doch irgendwo was haben zumindest habe ich es bis jetzt noch nicht gesehen

02:51:25.300 --> 02:51:36.220
ist auch ein bisschen kompliziertes thema also also in dem fall würde ich tatsächlich sagen wenn

02:51:36.220 --> 02:51:43.660
man eh schon all in cloud geht kann man auch gucken hat runter skaliert auf drei dann würde

02:51:43.660 --> 02:51:49.780
ich irgendeine cloud datenbank verwenden und jetzt erklärt man wie das mit state voll anwendung

02:51:49.780 --> 02:51:59.620
funktioniert je nachdem würde einen state speicher relativ easy weil du das in irgendeiner beim

02:51:59.620 --> 02:52:05.100
cloud anbieter gehorsten datenbank macht es wird ein bisschen komplizierter und das sollte man

02:52:05.100 --> 02:52:09.220
vielleicht an der stelle erwähnt es wird ein bisschen komplizierter wenn du beispielsweise

02:52:09.220 --> 02:52:16.100
das in der mannage post crest und müsste es jetzt eine datenbank migration machen bevor die

02:52:16.100 --> 02:52:25.660
neue anwendung läuft da musst du auf jeden fall sicherstellen dass die alten app versionen also

02:52:25.660 --> 02:52:33.500
dass das neue schema für die datenbank kompatibel bleibt mit dem datenbank schema ansonsten musste

02:52:34.100 --> 02:52:39.860
machen sonst kompliziert normalerweise fügste aber sachen also wenn du nur sachen hinzufügst

02:52:39.860 --> 02:52:44.740
es ist ja kein problem wenn du das datenbank schema irgendwie kompatibel machst musste musste

02:52:44.740 --> 02:52:50.540
dir was überlegen cooler ist es natürlich du benutzt irgendeine von deinem cloud anbieter

02:52:50.540 --> 02:52:56.380
angebotene no sql datenbank ohne irgendwelche migrations und sonst was dann ist es easy du

02:52:56.380 --> 02:53:05.420
kannst storage kannst du erst drei verwenden kannst du auf sich erstellen das instant der

02:53:05.420 --> 02:53:12.620
neues data ist also die alten part so lange also die alten pot so lange oft sind ne also

02:53:12.620 --> 02:53:19.260
ich kann es das machen aber der sinn im zweck ist ja eigentlich dass die anwendung nicht weg ist

02:53:19.260 --> 02:53:27.140
so wie es jetzt aktuell eingestellt ist also wenn du irgendwie irgendwelche synchronen datenbank

02:53:27.140 --> 02:53:33.500
migration brauchst die in kompatibel zur alten version sind ja dann dann musste wahrscheinlich

02:53:33.500 --> 02:53:39.220
kurz runterfahren habe ich so auch noch nicht gemacht aber da musste wahrscheinlich kurz kurz

02:53:39.220 --> 02:53:44.900
abschalten weil ansonsten werden die leute ja fehler kriegen die auf den alten der alten

02:53:44.900 --> 02:53:54.220
app version sind jetzt bestimmt irgendwelche coolen lösungen für man kann und das hat auch

02:53:54.220 --> 02:53:59.220
letztens einer im stream geschrieben man kann ja irgendwie wenn man richtig krasse dba hat die

02:53:59.220 --> 02:54:04.580
können irgendwie auf das neue schema irgendwie so ein overlay pappen dass die alte apps da drauf

02:54:04.580 --> 02:54:12.740
gemapt wird frag mich nicht keine ahnung habe ich keinen plan von wie sagt agon an dem kubernetes

02:54:12.740 --> 02:54:24.260
dass ein neues docker image da ist ich das trägst du ein das trägt sich du trägst hier

02:54:24.260 --> 02:54:30.340
die tech version ein dass du das nicht selbst machen muss gibt es gibt es bots die das für

02:54:30.340 --> 02:54:43.900
dich machen zum beispiel also auf auf github den habe ich vorher schon geschlossen auf github

02:54:43.900 --> 02:54:48.020
habe ich hier beispielsweise in bot laufen der festgestellt hat was ich dass ich von version 2

02:54:48.020 --> 02:54:52.980
auf version 3 updaten kann das wird so in deinem das wird so ein jammel eintragen du würdest

02:54:52.980 --> 02:54:58.780
das hier reinschreiben und das pusht du dann im git deine cluster konfig und ago erkennt es gibt

02:54:58.780 --> 02:55:03.500
eine neue klasse cluster konfig und applied die dann und da ist halt die der change drin

02:55:08.940 --> 02:55:16.300
warum benutzt du nicht die pender bot kann er das nicht ich glaube das hier kann er aber

02:55:16.300 --> 02:55:20.660
er kann manche andere sachen nicht also was die pender bot meines wissens nach nicht kann ist

02:55:20.660 --> 02:55:28.900
zum beispiel diese version hier erkennen renovate ist ein ist ist ist mehr richtung also hat mehr

02:55:28.900 --> 02:55:34.820
support für so für so kubernetes manifest feinheiten drinne ich bin mir übrigens gar

02:55:34.820 --> 02:55:42.900
nicht sicher ob die pender bot überhaupt kubernetes manifest gescheit kann weiß ich nicht habe ich

02:55:42.900 --> 02:55:46.900
noch nicht ausprobiert so aber um auf die ursprungsfrage mal zurück zu bekommen von

02:55:47.460 --> 02:55:52.140
war das glaube ich wie das mit dem rollout funktioniert das definierst du hier in deiner

02:55:52.140 --> 02:56:00.340
app jammel und sagst wie viele container du laufen lassen haben möchtest von dieser app oder beziehungsweise

02:56:00.340 --> 02:56:05.020
viele pots sind ja eigentlich und hier kannst du ihm sagen wie er das update durchführen soll

02:56:05.020 --> 02:56:11.460
rolling ab ich glaube rolling update könnte sogar die fall sein also recreate

02:56:11.460 --> 02:56:18.420
ach guck mal hier da hat sich die frage schon beantwortet eben die im chat gestellt wurde

02:56:18.420 --> 02:56:22.180
wer hat das eben gefragt ob man die alten pots auch alle abschießen kann ja das geht natürlich

02:56:22.180 --> 02:56:28.420
auch du kannst auch sagen recreate dann kannst du sicherstellen dass alle alten versionen aus sind

02:56:28.420 --> 02:56:35.420
und die neue gestattet kannst du machen dann hast du halt kurzen service kurze service downtime was

02:56:35.460 --> 02:56:39.900
warst du bei einer incompatible datenbank migration wahrscheinlich nicht groß vermeiden

02:56:39.900 --> 02:56:46.620
kannst aber damit hätte sich das auch erledigt du würdest als rollout strategie oder als update

02:56:46.620 --> 02:56:51.300
strategie würdest du einfach recreate hinstellen einstellen dann würde er nicht die sachen

02:56:51.300 --> 02:57:01.420
nacheinander starten sondern alles auf einmal ja das habe ich mir letztens letztens schon

02:57:01.420 --> 02:57:07.660
angeguckt in dem video ich habe es noch nicht so genau gecheckt was das jetzt genau sein soll

02:57:07.660 --> 02:57:18.660
so und hier kannst du einstellen wie er das update machen soll also du stellst

02:57:18.660 --> 02:57:22.580
erstmal den typ auf rolling update und dann kannst du einstellen wie er dieses rolling

02:57:22.580 --> 02:57:28.340
update machen soll so und dann gibt es es gibt glaube ich nur diese zwei optionen max

02:57:28.340 --> 02:57:33.060
unavailable und max search wenn ich das jetzt richtig aus dem kopf hinkriege bedeutet das

02:57:33.060 --> 02:57:41.100
folgendes max unavailable bedeutet zum upgraden darf er von sechs also das hier oben ist dein

02:57:41.100 --> 02:57:48.500
zielwert so viel möchtest du laufen haben so sechs pots also diese anwendung sechs mal diese anwendung

02:57:48.500 --> 02:57:55.140
über deinen kubernetes cluster verteilt möchtest du laufen haben ok max unavailable bedeutet er

02:57:55.140 --> 02:58:04.420
darf einen von diesen sechs ausmachen um einen neuen pot zu erstellen und max search bedeutet

02:58:04.420 --> 02:58:12.140
er darf einen mehr haben so wie wir es jetzt hier eingestellt haben heißt er darf runtergehen auf

02:58:12.140 --> 02:58:18.620
fünf zum ausschalten und gleichzeitig quasi irgendwie ein zusätzlich weil ich könnte ich

02:58:18.620 --> 02:58:23.900
könnte jetzt ja auch so was machen ich muss euch ehrlich sagen so genau sicher bin ich mir jetzt

02:58:23.900 --> 02:58:29.180
bei den bei den settings an der stelle nicht ich könnte auch so was machen dann müsse dann

02:58:29.180 --> 02:58:35.500
würde er alle da lassen und erst eine neun erstellen und dann den alten abschalten sodass

02:58:35.500 --> 02:58:43.140
du immer sechs stück am laufen hast so geht es halt ein bisschen schneller so geht es halt ein

02:58:43.140 --> 02:58:50.340
bisschen schneller ja und hier so stellst du das ein wie er das wie er das update machen soll so

02:58:50.380 --> 02:58:56.860
ich habe jetzt ich habe jetzt gesagt er soll wieder hoch skalieren auf sechs pots ich

02:58:56.860 --> 02:59:03.860
pushe das ganze und demnächst so nach spätestens 15 sekunden sollte das ganze dann machen und was

02:59:03.860 --> 02:59:10.540
jetzt auch sehr nice daran ist es ist alles getrackt in unserem git repo also ich kann jetzt jeden

02:59:10.540 --> 02:59:16.820
einzelnen change nachgucken und dadurch dass ich argocd so eingestellt habe dass der automatisch

02:59:16.820 --> 02:59:23.900
alle changes immer direkt singt aus dem git repo wenn jetzt jemand von hand hingeht und an

02:59:23.900 --> 02:59:30.980
der anwendung irgendwas rumbaut argocd skaliert natürlich auch dann singt er das halt einfach

02:59:30.980 --> 02:59:41.260
das nächste mal drüber das heißt du musst deine changes auch über pull requests oder oder halt

02:59:42.260 --> 02:59:49.940
machen also du wirst quasi ein bisschen dazu gezwungen alles nachvollziehbar zu machen was

02:59:49.940 --> 02:59:55.300
ich eigentlich ganz cool finde jede jede endung an unserem kompanie des cluster ist jetzt nach

02:59:55.300 --> 03:00:07.180
vollziehbar du siehst jetzt ok so ist so ist die entwicklung von mein das ist ziemlich bescheuert

03:00:07.180 --> 03:00:13.900
ok aber so ist die entwicklung von der anzahl meiner meiner pots für für cute app der wubblers hat

03:00:13.900 --> 03:00:18.780
irgendwie hier gesagt er will wieder sechs stück haben da vorne gesagt er wird von 12 auf drei

03:00:18.780 --> 03:00:24.820
runter da vorne gesagt von 12 auf sechs da vorne das image angepasst der typ hat keine ahnung was

03:00:24.820 --> 03:00:37.180
er macht aber man kann es schön nachvollziehen und du hast ja eben gesehen dass alles funktioniert

03:00:37.180 --> 03:00:42.900
ohne dass das service ausfällt das ist das ist schon wirklich nice kann man nicht kann man nicht

03:00:42.900 --> 03:00:48.500
anders sagen wir können jetzt ja vielleicht um die frage aus dem chat noch mal zu beantworten wir

03:00:48.500 --> 03:00:52.860
machen jetzt einfach mal recreate an der stelle rein und gucken uns das an wie das aussieht

03:00:52.860 --> 03:00:59.980
gehen wir hoch auf 12 so ich würde jetzt erwarten dass der alle sechs pots beendet

03:00:59.980 --> 03:01:08.180
und dann 12 neue erstellt gucken wir mal das habe ich noch nicht ausprobiert usch

03:01:08.180 --> 03:01:17.740
gucken wir mal rein also wie gesagt ich habe ein intervall eingestellt von 15 sekunden wo

03:01:17.780 --> 03:01:21.540
danach guckt ob es neue changes gibt das heißt wir müssen maximal 15 sekunden warten

03:01:21.540 --> 03:01:30.820
oder sollte jetzt eigentlich alle sachen abschießen hoffe ich mal

03:01:30.820 --> 03:01:36.580
time ausstarten

03:01:36.580 --> 03:01:46.500
warum macht er das jetzt nicht habe ich vielleicht habe ich irgendwo ein

03:01:46.500 --> 03:01:53.660
sündungsfehler eingebaut aus versehen können wir nachgucken ob ich den sündungsfehler eingebaut

03:01:53.660 --> 03:02:10.180
habe können wir nachgucken und zwar können wir in unserem argo cd wo ist es am start argo cd

03:02:10.180 --> 03:02:21.260
ok es geht nicht weil one or more objects failed sehr schön nice one or more objects

03:02:21.260 --> 03:02:30.940
failed to apply reason invalids back rolling upgrade ist verbitten wenn der type recreate

03:02:30.940 --> 03:02:39.660
ist ok das ergibt auch irgendwo sinn also ich kann nicht sagen ich kann nicht sagen options

03:02:39.660 --> 03:02:46.260
für rolling upgrade wenn der typ nicht rolling upgrade ist ergibt sinn löschen wir das ganze mal

03:02:46.260 --> 03:02:57.620
pushen es nochmal und hoffen dass jetzt das upgrade funktioniert sollte sollte gleich gleich

03:02:57.620 --> 03:03:01.780
anlaufen wenn nicht können wir noch mal nachgucken was er jetzt für schmerzen hat

03:03:16.260 --> 03:03:26.660
da würde sich jetzt beispielsweise anbieten noch innen also innen innen get hook oder

03:03:26.660 --> 03:03:31.220
irgendwas zu haben was was so einen check macht ist halt blöd weil man direkt nach

03:03:31.220 --> 03:03:35.220
master committed immer ok ich habe ich habe noch in den sündungsfehler drin warum auch immer

03:03:35.220 --> 03:03:44.380
rolling update ist in wie verarschen rolling update ist nicht invalid

03:03:44.380 --> 03:03:57.420
ach der hängt noch ok ich muss das alte erst mal abbrechen ok verstehe jetzt hat es funktioniert

03:03:57.420 --> 03:04:02.020
gut ok man muss aktiv das alte erst mal abbrechen das ist dass man sich die

03:04:02.020 --> 03:04:06.940
fehlermeldung angucken kann wahrscheinlich gut so eskaliert hoch er hat alle alten beendet

03:04:06.940 --> 03:04:09.300
und die neuen erstellt ok

03:04:20.460 --> 03:04:28.860
ja so sieht aus leute weil ich glaube es ist spät oder er hat die alten nicht beendet er

03:04:28.860 --> 03:04:35.500
ist schlau er hat die alten nicht beendet weil er erkannte dass es die gleiche version ist

03:04:35.500 --> 03:04:43.820
ergibt doch auch sinn ergibt doch auch sinn er hat die alten weiter laufen lassen und sechs

03:04:43.820 --> 03:04:49.860
neue erstellt ich bin mir relativ sicher wenn ich eine neue app version eintragen würde dann

03:04:49.860 --> 03:05:00.340
würde er das so machen ich glaube der ist einfach zu feifett rollback rollback ist easy kommt wir

03:05:00.340 --> 03:05:05.100
machen man rollback auf version 4 ja wer ist hier und wer ist hier und 5 ist verbugt

03:05:10.220 --> 03:05:11.660
mal gucken was jetzt passiert

03:05:11.660 --> 03:05:31.380
jetzt mach mal hinne ich muss gleich pennen aha alle aus guck der ist feifett alle aus

03:05:31.380 --> 03:05:39.260
und dann und dann kommen die neuen pots jetzt wäre der service down das ist halt der unterschied

03:05:39.260 --> 03:05:43.660
zwischen recreate und rolling update bei rolling update hat er das problem nicht

03:05:43.660 --> 03:05:54.140
jetzt ist es recreate ist logischerweise kein zero downtime aber es geht trotzdem schnell

03:05:54.140 --> 03:05:58.460
aber das war eben die frage im chat wie das wie das aussieht

03:06:09.260 --> 03:06:23.020
da ist oder es gibt gehalskürzung wenn ihr einer gehalt gekürzt kriegt dann ist es ich

03:06:23.020 --> 03:06:30.020
glaube der präse rief sogar irgendjemanden wissen wollte was passiert oder was kann man machen dass

03:06:30.020 --> 03:06:40.860
alles aus ist beim upgrade schlechtes app design dann tragen wir jetzt wieder rolling upgrade ein

03:06:40.860 --> 03:06:53.260
und gehen wir da runter auf 6 und das ist das letzte was wir heute machen das warst du nicht

03:06:53.860 --> 03:07:00.380
ich habe sie nicht mal genau im kopf wer es geschrieben hat

03:07:08.380 --> 03:07:14.540
immutable bite was macht kupa netas genau guck hier jetzt hör mir jetzt lässt er die jetzt

03:07:14.540 --> 03:07:19.820
machte die im pferd die runter die anderen jetzt ist auch zero downtime und jetzt noch

03:07:19.820 --> 03:07:24.380
mal zero downtime deployment als letzte abends handlung so ich habe schon rückgängig gemacht

03:07:24.380 --> 03:07:32.580
ok jetzt wird geupgraded wieder auf die neueste version zero downtime upgrade man sieht man

03:07:32.580 --> 03:07:38.780
landet mal auf neuen containern mal auf alten containern wats cs dankeschön für den zap

03:07:39.780 --> 03:07:42.020
gleich haben wir unser update durch

03:07:46.020 --> 03:07:53.900
zack upgrade durch easy kein downtime also was kupa netas genau macht also wenn ich das jetzt

03:07:53.900 --> 03:07:59.060
in paar setzen ohne die garten ohne das riesige ökosystem und alles was man damit machen kann

03:07:59.060 --> 03:08:03.660
dass auch das was es kompliziert macht wenn ich es wenn ich mal ein paar setzen zusammenfassen

03:08:03.660 --> 03:08:16.180
müsste man könnte quasi sagen dass kupa netas ein geklastertes docker ist eine container

03:08:16.180 --> 03:08:23.140
orchestrierungs lösung die für dich geklastert container verwaltet also es ist quasi ein

03:08:23.140 --> 03:08:39.660
cluster docker wenn man simpel zusammenfassen will wo du dann zum beispiel sowas machen kannst

03:08:39.660 --> 03:08:46.660
wie was ich hier gerade gezeigt habe versions updates automatisch der reihe nach ausführen

03:08:46.660 --> 03:08:55.300
auf containern ohne dass das service weggeht ohne dass das service nicht zur verfügung steht

03:08:55.300 --> 03:09:08.100
damit kann man quasi viele docker leichter verwalten naja es ist man kann es so nicht

03:09:08.100 --> 03:09:12.140
direkt vergleichen also es ist nicht so dass du dann fünf mal docker laufen hast also kupa

03:09:12.140 --> 03:09:20.140
netas selbst benutzt glaube ich intern gar nichts gar nichts mehr von docker also die

03:09:20.140 --> 03:09:23.940
hatten mal eine zeit lang docker als container runtime ich glaube das ist mittlerweile komplett

03:09:23.940 --> 03:09:31.740
raus das gibt es gar nicht mehr du kannst mit kupa netas quasi genauso wie mit docker container

03:09:31.740 --> 03:09:37.780
starten und stoppen aber du kannst das besser koordinieren also du hast da nicht nur ein

03:09:38.380 --> 03:09:41.940
docker eine docker instanz mit ein paar container macht die lokal laufen ganz

03:09:41.940 --> 03:09:47.500
besser koordinieren du kannst zum beispiel kannst du beispiel das ganze so orchestrieren

03:09:47.500 --> 03:09:53.580
dass du verschiedene notes hast in deutschland verteilt und du sagst dann ok ich möchte

03:09:53.580 --> 03:09:58.900
das sicherstellen dass meine anwendung zwölf mal vorhanden ist und dann wird die dann über

03:09:58.900 --> 03:10:05.620
alle deine drei kupa netas cluster notes in deutschland verteilt und dann kannst du

03:10:05.620 --> 03:10:15.900
quasi zentral upgrades ausrollen lassen du kannst ganz zentral konfig managen und auch

03:10:15.900 --> 03:10:24.300
benutzerberechtigung vergeben für admins und tools und alles mögliche es ist quasi

03:10:24.300 --> 03:10:29.740
ein gecluster das hoch verfügbares docker das trifft es eigentlich ganz gut

03:10:29.740 --> 03:10:40.580
bot dankeschön für den sub pogo so nächstes mal geht es weiter dann müssen wir wirklich mal

03:10:40.580 --> 03:10:48.100
das bisschen erweitern noch um eine runde monitoring wir machen noch in github einen

03:10:48.100 --> 03:10:57.180
check ob unsere manifest fehlerhaft sind hast du schon mal was mit docker swarm gemacht nein

03:10:57.260 --> 03:11:03.060
habe ich nicht und ich bin auch vorbeigekommen ich hätte um ein haar mein arbeitgeber gewechselt

03:11:03.060 --> 03:11:09.700
ende ende december zu einem laden hin die docker swarm verwenden der hätt ich tatsächlich

03:11:09.700 --> 03:11:22.140
mich mit docker swarm auseinandersetzen müssen als nix immer auch her und nicht super geheim

03:11:22.580 --> 03:11:27.980
max next to do öffnen kannst du machen habe ich denn da drin

03:11:32.940 --> 03:11:39.740
siehung search manager wir müssen uns auch sehr viel zeug angucken also was kupa netas content

03:11:39.740 --> 03:11:42.940
angeht der wird uns in nächster zeit für den stream nicht ausgehen aber wir machen auch noch

03:11:42.940 --> 03:11:51.140
andere streams können ich immer nur immer nicht kuban kuban nidesen ketsen können wir nicht wir

03:11:51.140 --> 03:12:03.700
können nicht immer nur ketsen ja es ist der gel aber es benutzen immer noch ein paar wobei

03:12:03.700 --> 03:12:09.940
ich weiß gar nicht ob es das ist im eigentlichen sinne weil ein oder anderen patches gibt es

03:12:09.940 --> 03:12:14.260
wahrscheinlich immer noch für das ist ja das einzige was die die firma hinter docker da zu

03:12:14.260 --> 03:12:19.700
bieten hat in der richtung doch er hat es bisschen verkackt muss man sagen also die firma hinter

03:12:19.700 --> 03:12:27.660
docker die waren die ersten die in richtig cooles kontenerisierungs frontend gebaut haben und das

03:12:27.660 --> 03:12:33.980
kann man ja nicht oft genug sagen docker und diese ganzen auch kuban nides diese ganzen

03:12:33.980 --> 03:12:41.300
kontenerisierungsdinger das sind alles frontends für die gleiche linux kernel also für die gleiche

03:12:41.300 --> 03:12:48.180
kontenerisierungsgeschichte im linux kernel es ist egal ob du docker potman oder kuban nides

03:12:48.180 --> 03:12:54.420
nimmst oder der haube ist das das gleiche also so wie es dann wirklich ausgeführt wird das ganze

03:12:54.420 --> 03:12:59.820
ökosystem drum herum wie baust du so einen image ja wo lädst du die images hin wie kannst du das

03:12:59.820 --> 03:13:06.500
orchestrieren das ist was anderes aber so im kern das wie das ausgeführt wird das ist linux

03:13:06.500 --> 03:13:11.580
container im kernel bei allem das gleiche sondern was docker gemacht hat ist die haben einen

03:13:11.580 --> 03:13:15.980
kommando zeilen tun beziehungsweise ein frontend entwickelt das erste wirklich gute gescheite weit

03:13:15.980 --> 03:13:21.300
verbreitende frontend für die körner für die für die container funktionalität im linux kernel

03:13:21.300 --> 03:13:28.300
das ist das was docker gemacht hat und docker ist ja quasi jahrelang synonym mit linux

03:13:28.300 --> 03:13:36.060
container benutzt worden heute immer noch aber heute muss man sagen bisschen bisschen weniger

03:13:36.060 --> 03:13:43.540
zu dieses container gleich docker auch durch auch durch kuban nides und die haben es ein

03:13:43.540 --> 03:13:47.940
bisschen verkackt die konnten dann nie so richtig kapital rausschlagen die hatten das verbreiteste

03:13:47.940 --> 03:13:55.100
kontenerisierungstool die haben docker hab am start gehabt was die stelle war jeder benutzt hat

03:13:55.100 --> 03:14:00.340
für seine images und selbst docker hab haben sie immer weiter gekürzt so dass niemand mehr

03:14:00.340 --> 03:14:06.100
docker hab so richtig verwenden will letztens haben sie eine mail rum geschickt dass leute

03:14:06.100 --> 03:14:08.540
die nicht bezahlen bald gelöscht werden und so was

03:14:08.540 --> 03:14:33.180
ja deswegen am besten gleich am besten gleich kuban nides ja weiß ich hab ich gelesen den

03:14:33.180 --> 03:14:40.860
vergleich finde ich immer noch sehr weit hergeholt trotz kap aber ich habe das auch ich habe das

03:14:40.860 --> 03:14:44.820
auch schon ein paar mal gelesen letzter zeit gab es sogar auf youtube ein paar videos zu

03:14:51.820 --> 03:14:52.820
ja

03:14:52.820 --> 03:15:02.980
so sieht es aus leute schön dass jeder bei war drei stunden 15 kuban nides stels wie sieht es

03:15:02.980 --> 03:15:08.860
aus wollen wir nach noch ein paar also wir machen demnächst noch ein paar andere streams ich kann

03:15:08.860 --> 03:15:13.780
jetzt nicht jeden stream kuban nides stels machen wollen wir noch mehr kuban nides machen ich vermute

03:15:13.780 --> 03:15:18.700
mal die antwort ist ja weil ich glaube euch gefällt das auch und ich lerne ja auch was bei

03:15:18.700 --> 03:15:27.100
das ist eine gute kombination vor allem gerade gerade wenn ich die sachen erklären muss dann

03:15:27.100 --> 03:15:31.260
muss ich mir da selbst noch ein bisschen gedanken darüber machen das wirklich nicht schlecht was

03:15:31.260 --> 03:15:35.340
braucht man denn letztendlich alles an tools für kuban nides helmen ehrlich gesagt so zum

03:15:35.340 --> 03:15:39.420
einstieg brauchst du gar nichts du brauchst noch nicht mal helmen zum einstieg ich persönlich

03:15:39.420 --> 03:15:44.660
finde helmen auch ab also das was ich da bisher vorgesehen habe finde ich ziemlich abartig ich

03:15:44.660 --> 03:15:55.460
mags nicht wirklich wenn ich irgendwas templaten will würde ich wahrscheinlich

03:15:55.460 --> 03:16:09.860
eine ordentliche programmiersprache benutzen so was hier also wenn ich wirklich was bisschen

03:16:09.860 --> 03:16:17.740
komplizierter zusammenstellen muss an manifest auch wenn agocd das nicht native kann ja ich

03:16:17.740 --> 03:16:27.900
mein an helm kommt man nicht vorbei letztendlich wenn man third party anwendung installieren will

03:16:27.900 --> 03:16:34.340
jeder jede anwendung hat einen helm chart zum installieren also insofern du brauchst ja du

03:16:34.340 --> 03:16:38.380
brauchst das schon aber am anfang nicht wirklich wenn du mal einen kleinen lokalen cluster hinstellen

03:16:38.380 --> 03:16:47.900
willst und darauf ein eigenes image deployen willst brauchst du kein helm für da reicht

03:16:47.900 --> 03:16:53.140
eigentlich eigentlich schon ein jammelfile für kubectl apply und gut ist

03:16:53.140 --> 03:17:06.220
am besten am besten kennst du dich mit beidem ein bisschen aus aber mir hat das nicht wirklich

03:17:06.460 --> 03:17:12.220
wirklich zugesagt bisher manchmal kommt man nicht dran vorbei manchmal muss man muss man

03:17:12.220 --> 03:17:17.580
sachen customisieren von leuten die helm charts schon für anwendungen die helm chart schon

03:17:17.580 --> 03:17:23.500
erstellt haben oder vielleicht brauchst du mal wirklich simple templates oder so ist es

03:17:23.500 --> 03:17:27.540
sinnvoll aber ich fand es sehr eklig alles was ich da bisher von gesehen habe

03:17:37.020 --> 03:17:46.820
ich finde gar nicht so sehr dass customise versus helm diese diskussion großartig sinn macht mit

03:17:46.820 --> 03:17:54.540
helm kannst du templaten mit customise nicht customise kannst du ein paar schreibarbeiten

03:17:54.540 --> 03:18:01.660
erleichtern ja du kannst namespaces standardmäßig setzen und wenn du keine ahnung mehrere environments

03:18:01.660 --> 03:18:08.420
haben willst ein paar sachen überschreiben aber das ergänzt sich doch eigentlich ganz gut

03:18:08.420 --> 03:18:16.420
so quasi diese diskussion das customise was letztendlich hat beides eine daseinsberechtigung

03:18:16.420 --> 03:18:26.540
man braucht auch beides wie gesagt ich bin kein großer helm zumindest charts selber selber

03:18:26.540 --> 03:18:30.900
stellen hat es sich bei mir bisher noch nicht so die lust so eingestellt

03:18:30.900 --> 03:18:42.620
ne morgen nicht morgen muss ich immer mal kreisel kreit machen und wir können auch nicht jeden

03:18:42.620 --> 03:18:45.820
tag kubane das mal also leute wir sehen uns bis denn ich gehe jetzt oft bis denn zu

