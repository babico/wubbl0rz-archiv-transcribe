MonkaW!
Ja, das ist aber auch so ein Ding, das muss ich mir auch vorher ein bisschen angucken.
Weil ich glaube,
keiner will mir zugucken, wie ich mir eine halbe Stunde irgendeine GitHub-Seite durchlese, wie man da was baut.
Ja, da haben wir unter der Woche ja genug Zeit.
Lass uns grad mal.
Ey, wenn schon müssen wir auf From Scratch anfangen.
Ist das nix.
Ja, ich glaube, das ist auch so ein Ding, das muss ich mir auch vorher ein bisschen angucken.
Auf From Scratch anfangen.
Ist das nix.
Cool.
Wir gucken mal gerade Trends.
Trend.
Trending, nicht Trends.
Trending.
Weekly Trends auf GitHub.
Und es wird wahrscheinlich das übliche sein.
Bisschen Krypto-Kram und der Rest AI.
Mal gucken, ob es mittlerweile auch mal andere Projekte gibt.
AI.
AI.
AI.
AI.
Ich weiß nicht, was das ist, aber bestimmt auch AI.
Was ist Rarbk?
Stimmt, AI.
China-Chinesen-Zeug.
China-Chinesen-Zeug.
AI.
China-Chinesen-Zeug.
AI.
AI.
Oh, guck mal.
Eine Open Source Jira.
Jira.
Hier ist die coolen Leute.
Eine Open Source Jira.
Alternative.
Plane.so.
Zeig mal, wie sieht denn das aus?
Ich meine, ganz ehrlich.
Eigentlich.
Für kleine Teams.
Du brauchst es eigentlich nicht, weil.
Wenn man sowas wie.
GitLab, GitHub.
Github.
Self-hosting.
Irgendwie sowas benutzt.
Die haben ja alle Issue-Tracker.
Klar, das sind Issue-Tracker, die.
Für das jeweilige.
Source-Repo gedacht sind.
Aber man muss es ja nicht übertreiben.
Also, wenn man jetzt nicht.
Irgendwie.
30 Teams hat.
Und zig verschiedene Dinger macht.
Dann braucht man vielleicht gar kein eigenes Ticket-System.
Okay, das ist.
Ein Project-Management-Tool from the future.
Nicht einfach nur ein Projekt-Management-Tool from the future.
Und warum ist das from the future?
Man weiß es nicht.
Das hört sich einfach nur gut an.
Aber ich glaube.
Ich guck mir das mal an.
Offline an.
Irgendeine Self-Hosted-Jira-Alternative.
Wenn man es wirklich braucht.
Ist nicht verkehrt.
Nachdem man Jira nicht mal gescheit selbst hosten kann.
Also zumindest.
Die ja nur noch ihren Cloud-Krempel verkaufen wollen.
Ich bin mir gar nicht sicher, ob man Jira nicht.
Ob man überhaupt noch Updates bekommt.
Weiß das jemand von euch?
Von der Self-Hosted-Jira-Variante.
Gibt es überhaupt noch Updates?
Also, ihre ganze Entwicklung fließt ja eindeutig.
In ihr fertig Cloud-gehostetes rein.
So, dann haben wir.
JavaScript.
Terraform.
Hey, das ist der.
Wo wir manchmal YouTube-Videos gucken.
Terraform.
AI.
AI.
AI.
China-Chinesen-Kram.
China-Chinesen-Kram.
Eine Postgres-Extension.
Für.
Real-Time-Data.
Okay, das ist so ein typisches Ding.
Wenn man es braucht.
Weiß man, dass man es braucht.
Sonst braucht man es wahrscheinlich nicht.
Aha.
AI.
PS3-Emulator.
AI.
YouTube-Frontend.
Das einzige Projekt, was ich kenne, was in Crystal programmiert ist.
AI.
Na gut, jetzt nicht sonderlich spannend.
So, jetzt nochmal kurz abchecken, was es in meiner Lieblingssprache Neues gibt.
AI.
UI-Framework.
Was ich mir auch so seit längerer Zeit.
Und ich glaube, das sollten wir echt mal als nächstes machen.
So eine kleine Test-UI-Anwendung.
Unter Linux bauen.
Man könnte von ausgehen, wenn ein UI-Framework unter Linux gescheit funktioniert,
dann wird es unter Windows und Mac auch gescheit funktionieren.
Ich mag halt diese ganze XML-Geschichte nicht.
Aber es sollte allemal besser sein als MAUI.
Allein schon aus dem Grund, weil MAUI offiziell gar kein Linux ist.
Und ich glaube, es gibt auch keine richtigen.
Hätten wir das da Plugins?
Keine Erweiterung für MAUI, dass Linux richtig funktioniert.
Schreibt man Windows-Apps in C++?
Unter anderem.
Du kannst Windows-Apps in jeder x-beliebigen Programmiersprache bauen, die du willst.
Kommt ein bisschen drauf an.
Das Hauptproblem mit Windows-Anwendungen ist,
wenn das grafische Anwendungen sein sollen.
Was ja eben viele Windows-Anwendungen sind.
Dass es gut aussieht.
Das ist egal, welche Programmiersprache du nimmst.
Das ist das Problem unter Windows.
Also der Grund, warum viele Windows-Anwendungen so kacke aussehen.
Ist ganz einfach.
Weil es Microsoft verkackt hat.
Tatsächlich im Gegensatz zu Apple.
Die kriegen ja ihren Desktop-UI-Part wirklich ganz gut hin die letzten Jahre über.
Also wir reden jetzt hier nicht von irgendwelchen Cross-Platform-Frameworks,
sondern von der jeweiligen Platform-Native-Technologie.
Und da hat es Microsoft einfach die letzten 15 Jahre über verkackt,
gescheite Sachen rauszubringen.
Und jetzt kriegen sie es nicht mehr hin.
Also Windows hatte lange Zeit,
sagen wir mal sowas wie, was du in .NET mit Windows Forms benutzen kannst.
Die hatten halt ihre Windows-API.
Das konntest du aus jeder x-beliebigen Programmiersprache benutzen.
Dafür gab es auch Wrapper und Bindings für nahezu jede Programmiersprache.
Eherlich auch für Python.
Du musst nicht das Eingebaute nehmen.
Das Problem bei Windows Forms ist,
eigentlich gibt es nicht so wirklich das Problem mit Windows Forms.
Windows Forms wirkt halt ein bisschen altbacken.
Windows Forms.
Ja, das ist halt so.
Das ist klassisch.
So sieht halt eine Windows Forms-Anwendung aus.
Genau so.
Windows Forms sieht halt ein bisschen altbacken aus.
Aber Windows Forms selbst
hat tatsächlich ein paar Vorteile gegenüber allen anderen UI-Frameworks,
also die Microsoft sich so ausgedacht hat.
Und zwar, wenn du eigene Inhalte rendern willst,
also sagen wir mal,
du baust ein Spiel
und nimmst nicht irgendeine fertige Komplett-Engine,
sondern machst halt,
nimmst sowas wie Mono-Game oder wie der Krempel heißt.
Oder mal angenommen,
du willst einen Videoplayer programmieren zum Beispiel
mit Hardware-Beschleunigter oder mit GPU-gerendertem Output.
Da ist Windows Forms nicht schlecht,
weil es ist, glaube ich, in keiner anderen Windows-UI-Technologie
so einfach, eigene Inhalte ins Fenster zu rendern,
wie mit Windows Forms.
Die eigentlichen Control-Elemente,
also so,
Knöpfe, Buttons, Leisten und sowas,
das sieht alles relativ altbacken aus in Windows Forms.
Und das sieht nicht nur altbacken aus,
das ist auch altbacken.
Also man kann relativ einfach testen,
auf welcher Technologie etwas passiert in Windows,
wenn man Emojis einfügt.
Alles, was Emojis rendern kann,
ist höchstwahrscheinlich,
ich meine, es gibt Tricks,
dass man den Krempel auch zum Laufen bekommt in WPF
und sicherlich gibt es Tricks,
dass man das auch in Windows Forms zum Laufen bekommt,
allerdings nicht mit dem Native-Font-Rendering
und den Native-Steuerelementen.
Also,
alles, was Emojis kann,
ist höchstwahrscheinlich
irgendein WinUI-UWP-Mischmaschding
und kein klassisches Windows Forms.
Also,
ich weiß nicht, wie es bei dem Control Panel aussieht.
Ja, okay.
Das Control Panel ist wahrscheinlich WPF
oder noch klassisches Win32.
Guck, seht ihr?
Das kann nur die schwarz-weiß-Emojis.
Also man kann das ganz gut testen,
auf welcher UI-Technologie basiert.
So, aber mal zurück zu Windows Forms.
Wenn man eigenen Inhalte rendern will,
ist Windows Forms gut.
Optisch gibt es ein paar Tricks,
dass es modern aussieht,
aber wirklich modern in der Handhabung ist es nicht.
Für einige Sachen ist es aber tatsächlich selbst
heute sinnvoll, Windows Forms zu benutzen.
Nämlich, wie gesagt,
wenn du hauptsächlich eigenen Inhalt
in das Fenster rendern willst,
dann ist Windows Forms gut.
Also, wenn du dich nicht
auf Fensterhandling selbst kümmern willst.
Also Windows Forms für moderne Anwendungen
sich modern anfühlen,
modern aussehen, eher nicht.
Danach kam Microsoft auf die Idee mit WPF.
WPF war für seine Zeit eine ziemlich gute Idee.
Und zwar hatte WPF so ein paar Dinge,
die Windows Forms nicht hat.
WPF hat sich zum Beispiel
gescheit in dieses Windows Fenster-Composite-Zeug integriert
und wurde 60 mal die Sekunde refreshed.
Also kein Tiering von Anwendungen.
Du hattest theoretisch hardwarebeschleunigte Ausgabe,
wenn das auch mal WPF ein bisschen komplizierter war.
Und du hattest zum ersten Mal die Möglichkeit,
deine UI nicht programmiertechnisch aufzubauen,
sondern zu beschreiben in so einer Markup-Language.
Bisschen ähnlich wie HTML.
Das ist so ein XML-Dialekt bei WPF.
Das Problem an WPF heutzutage ist,
du kannst WPF eigentlich immer noch benutzen.
Allerdings hat WPF erstaunlich wenig Liebe von Microsoft bekommen
seit dem Release.
Das ist ja auch schon von 2005 oder 2006 oder sowas in der Richtung.
Aber Microsoft hat nie wirklich so viel gemacht an WPF
und hat es irgendwie auch ein bisschen verschimmeln lassen.
Was sich jetzt darauf ausgewirkt hat,
dass viele moderne Sachen eben in WPF auch nicht funktionieren,
wenn es auch grundsätzlich ein bisschen einfacher ist,
darin optisch ansprechende Anwendungen zu machen,
ist es auch gleichzeitig viel komplizierter als Windows Forms.
Das wurde dann jahrelang mit sich rumgeschleppt
und dann hatte Microsoft ein Problem.
Sie hatten nämlich komplett entgegengesetzte Ansichten dazu,
wie Desktop-Anwendungen gebaut werden sollten.
Nämlich mit Windows 8.
Also WPF und so war alles superfein mit XP und Vista und so.
Das war Microsoft richtig gut dabei.
Und damals war das auch die beste Art und Weise,
bis auf das Font-Rendering.
Das sah schon immer kacke aus in WPF,
weil es mittlerweile, glaube ich, ganz gut ausschaut.
Und dann hatte Microsoft ein Problem und Windows 8 kam raus.
Und mit Windows 8 hatten sie die glorreiche Idee,
wir bauen Windows zu irgendeinem Tablet-Betriebssystem um.
Das heißt, sie haben eigentlich alle klassischen UI-Technologien
komplett schleifen lassen.
Obwohl es eigentlich an der Zeit gewesen wäre,
mal was Gescheites rauszubringen,
was Windows ein modernes, einfach zu programmierendes,
optisch ansprechendes UI-Framework spendiert.
Dann kamen sie erst mal an mit Windows 8 und haben gesagt,
hey, Desktop-Anwendungen sollen ja eh aussterben
und wir machen jetzt so Sachen mit JavaScript
und irgendwelchen komischen Widgets und solchen Geschichten.
Also da haben die ganz komische Dinger getrieben und gepusht,
versuchen zu pushen.
Windows 8 war, glaube ich, auch die Geburtsstunde von UWP,
wo sie gesagt haben, Windows-Anwendungen sollen jetzt
in der Sandbox laufen und dürfen eigentlich nichts mehr machen.
Also hat sie dann Windows-Anwendungen.
Die konnten keine Screenshots mehr capturen
und sowas ganz ganz wirres Zeug.
Das Problem dabei war, Microsoft hat da jahrelang
darauf bestanden, dass das der Weg ist, Windows-Anwendungen zu machen.
Niemand wollte es benutzen.
Aber Microsoft hat es jahrelang versucht zu pushen,
aber niemand wollte es.
Obwohl der eigentliche UI-Part von UWP
tatsächlich sich über die Jahre hinweg weiterentwickelt hat
und eigentlich zum besten,
wenn man rein für die Optik und von der Handhabung geht her,
zum besten Windows-UI wurde.
Also zum Beispiel,
mein Taschenrechner ist immer ein schlechtes Beispiel,
der Taschenrechner ist so ein Ding.
Der ist unglaublich hässlich gemacht,
aber man sieht schon ein paar Sachen, die eigentlich ganz gut sind.
Also erstens, das Ding ist halt komplett GPU-gerendert,
das ganze Ding.
Es startet unglaublich schnell.
Das Ding ist halt 80 KB oder so.
Du kannst es ordentlich skalieren.
Du hast ein bisschen sowas hier wie bei Web-Anwendungen,
dass du ordentlich,
wie nennt man das schon, responsive machen kannst.
Was vielleicht auch auffällt ist,
wenn man es hier drüber bewegt,
ich glaube, ich habe Transparenz,
eh doch, man sieht es ein bisschen, guck mal.
Der Hintergrund ändert sich.
Je nachdem, jetzt ist der Hintergrund eher blau,
jetzt ist der Hintergrund ein bisschen grün.
Das heißt, die haben sogar Transparenz-Effekte eingeführt,
die nicht einfach nur Transparenz sind,
sondern das Mischen mit der eigentlichen Farbe des Buttons,
sodass der Kontrast immer gut ist,
aber der Hintergrund ein bisschen durchschalten soll.
Also haben die sich wirklich was bei gedacht.
Das Problem war nur,
dass UWP halt nicht nur UI-Framework ist,
sondern eigentlich der Weg für neue Windows-Anwendungen sein sollte
und niemand wollte es benutzen,
weil es durch die Sandbox so eingeschränkt war.
Das funktioniert nicht mit dem über die App schieben.
Ich glaube, sie nimmt immer den Hintergrund.
Woher bin ich mir gar nicht sicher.
Nimmt das immer den Hintergrund? Ich glaube schon.
Ja, es nimmt immer den Hintergrund.
Oder?
Nee.
Es nimmt den Hintergrund von der App, von einer anderen App.
Oder?
Das muss man ausprobieren.
Es kommt bestimmt auf die App an, die man nimmt.
Machen wir mal den Keks auf.
Ah ja, ja.
Nee, nee, es ist der Hintergrund.
Es ist weiterhin der Desktop-Hintergrund.
Ja, das ist alles so ein bisschen halbherzig.
Das ist halt auch so ein Ding.
Zumindest UWP sollte die neue Windows,
nicht nur die neue Windows-UI-Framework sein,
sondern UWP sollte halt ein neuer Weg sein,
wie man Windows-Anwendungen programmiert.
Niemand wollte es haben.
Und jetzt hast du halt das Problem gehabt,
und das hattest du wahrscheinlich 8 Jahre plus dieses Problem,
deswegen ist Windows auch so hinten dran, was UI-Sachen angeht,
dass die Leute weiterhin mit Windows Forms und UWP
und WPF ihre Anwendungen entwickelt haben,
mit Technologien, die zum damaligen Zeitpunkt schon 5-15 Jahre alt waren.
Und Microsoft wollte UWP pushen, und UWP wollte keiner.
Das heißt, du hattest die alten Technologien,
die eigentlich benutzt werden mussten für Anwendungen,
die halt auch dann schon langsam richtig outdated waren,
und Microsoft hat nur was Neues angeboten, was keiner wollte.
Und das war halt ziemlich problematisch.
Und deswegen wurden wir, und da bin ich ziemlich sicher,
dass das ein großer Faktor mit dabei gespielt hat,
deswegen werden wir heute so oft mit Anwendungen,
mit Browser-Anwendungen beglückt,
die zwar so aussehen wie Desktop-Anwendungen,
aber eigentlich Browser sind.
Weil das mehrere Vorteile hat.
Erstens, du kannst alles in Web-Technologien machen,
was viele Leute halt dazu gebracht hat,
auch mal Desktop-Anwendungen erstellen zu können.
Ja, sowas wie Elektron, genau so, genau, das meine ich.
Dass die Dinger automatisch auf so gut wie allen Betriebssystemen
und Mobilgeräten laufen.
Aber, und das war bestimmt eines der großen Vorteile,
man konnte sie auch gut unter Windows laufen lassen,
ohne dass man sich zwischen entscheiden musste,
nehme ich was total Outdatedes,
von Microsoft Supportedes für Windows,
oder nehme ich was Neues,
was mich so einschränkt, dass ich nicht alles machen kann,
nämlich UWP.
Und deswegen haben ganz viele angefangen,
Elektron-Anwendungen zu bauen,
die halt für einfachste Dinger 400 MB RAM brauchen,
weil halt erstmal Node.js, Browser und alles mögliche
hiermit gestartet werden muss.
Ich bin mir relativ sicher,
dass dieses Vakuum an Windows-UI-Frameworks
mit, also entscheidend mit beigetragen hat dazu,
dass Elektron sich so verbreitet hat.
So, irgendwann ist das Microsoft auch gedämmert.
Ich würde mal sagen,
so im Dreh vielleicht von Windows 10,
weil mit Anfang Windows 10 haben die immer noch versucht,
UWP zu pushen.
Aber sagen wir mal so,
ungefähr mit Windows 10 ist es,
oder ein bisschen später,
sagen wir mal so, Windows 10 und ein paar Patches,
ist es dann irgendwann gedämmert,
dass UWP halt wirklich keine Sau haben will
und sich das auch nie durchsetzen wird.
Lag wahrscheinlich auch ein bisschen am Wechsel
von Microsoft Chef und allem.
Und dann sind sie auf die Idee gekommen,
okay, lasst uns doch versuchen,
UWP in die Tonne zu hauen
und den UI-Part von UWP,
also quasi der UI-Part ist halt unter anderem das,
worauf Calculator hier basiert
oder viele Windows-Internet-Tools mittlerweile auch basieren,
lasst uns doch den UI-Part nehmen
und, ah, ich habe mich gerade gefragt, was es macht,
lasst uns doch den UI-Part nehmen
und das UWP daraus entfernen.
Und das hat Microsoft dann gemacht
und da kam dann WinUI dabei raus.
Und WinUI ist seit ein paar Jahren der Versuch von Microsoft,
endlich mal wieder ein gescheites UI-Framework
für komplette Anwendungen für Windows herzustellen.
Das Problem war nur,
dass WinUI in den ersten zwei Versionen
noch sehr UWP-fokussiert war
und es dementsprechend,
sie haben es nicht geschafft, das richtig von UWP zu lösen
und dementsprechend wollte das am Anfang auch keiner haben.
Dann haben sie ewig gebraucht.
Ich glaube, es kam erst vor zwei Jahren oder so
oder vor einem Jahr kam erst WinUI 3 raus.
Und mit WinUI 3 ist es zum ersten Mal seit zehn Jahren vielleicht
oder länger, sagen wir mal seit zehn Jahren,
es ist zum ersten Mal seit zehn Jahren möglich,
wieder komplette, vollständige Windows-Anwendungen zu erstellen.
Ohne Sandbox und ohne Geschiss
und ohne Codesigning-Tools,
ohne Zertifikat und alle möglichen Gedöns.
Also ich glaube, man kann mittlerweile,
ich bin mir da gar nicht so sicher,
weil das haben sie auch wieder verschoben,
man kann mittlerweile ganz normale,
unpackaged Win32 oder sollte man besser sagen Win64,
Anwendungen erstellen mit UI unter Windows,
ohne Sandbox, ohne Zertifikate, ohne Geschiss.
Also das, was die meisten Leute eben für Windows machen wollen.
So, also nachdem es über zehn Jahre
kein gescheites UI-Framework für Windows gab,
daher kommt das.
Deswegen hat sich unter anderem,
da bin ich mir zumindest relativ sicher,
Elektron soweit durchgesetzt
und deswegen ist UI-Entwicklung unter Windows
so unglaublich Pains Champ.
Du kannst natürlich Cross-Plattform-Frameworks benutzen,
sowas wie Elektron, du kannst vielleicht Qt benutzen.
Aber es wäre halt cool,
wenn man eine Windows-Anwendung für Windows machen will,
wenn man dann kein Cross-Plattform-Framework benutzen muss,
sondern irgendwas benutzen könnte,
was eben richtig gut funktioniert.
Also nicht nur Windows-Only,
aber halt gescheit und dafür halt komplett alles,
was Windows so kann.
Das gab es ja lange Zeit nicht
und deswegen ist Windows-UI-Anwendung
programmierend einfach so Shit.
Und ist es immer noch.
Weil Microsoft es über zehn Jahre nicht hinbekommen hat
und versucht hat, eine Technologie zu pushen,
die keiner haben wollte.
Ja, aber der beste,
jetzt kommen wir mal zur eigentlichen Frage,
der beste Weg Windows-Anwendungen zu erstellen ist,
dadurch durch dieses ganze jahrzehntelange Geschäft,
überleg dir halt, was du machen willst.
Einfach Windows Forms.
Ansonsten, wenn du es einfacher willst,
nimm trotzdem Windows Forms
und gleiß da halt vielleicht ein bisschen was drüber,
dass es moderner aussieht.
Oder schau dir WinUI 3 an.
Dann hast du das Neueste von Microsoft,
was der Weg,
der gedachte Weg ist,
von Microsoft Windows-Anwendungen zu entwickeln.
Und in welcher Sprache du das dann schreibst,
ist eigentlich egal.
Ich persönlich würde dir wahrscheinlich empfehlen,
das auf .NET-Basis in C-Sharp zu machen,
weil es eine deutlich angenehmere und schönere
und einfach angenehmere,
bessere Sprache ist als C++.
Und das .NET-Framework
auch die deutlich bessere Standard-Library ist,
als die Standard-Lib in C++.
Und es auch einfach viel weniger
Gehirnzerbrechen und angenehmer ist
und insgesamt einfach besser ist als C++.
Ja.
Und du bekommst mit Visual Studio
auch eine gescheite Windows-kostenlose IDE,
die auch nur unter Windows funktioniert,
ohne dass du dir Rider kaufen musst.
Also ich würde sagen,
mach das auf .NET-Basis
und guck dir mal WinUI 3 an
und dann kannst du eine
halbwegs moderne Anwendung erstellen.
So.
Ja, wie gesagt,
es macht ja in manchen Fällen auch Sinn.
Zum Beispiel bei sowas, ja.
Moin.
Ans Trinken erinnern.
Pog. Moment.
C++ ist nur für High-IQ-Leute.
Okay, das lasse ich mir insofern sogar gefallen.
Aber du musst trotzdem
ein bisschen so selbstquälermäßig
veranlagt sein,
dass du C++ benutzt,
wenn es andere Möglichkeiten gibt.
Wenn es keine anderen Möglichkeiten gibt
als C++,
ja gut, da bleibt ja nichts anderes übrig.
Also wenn man beispielsweise
in ESP32 programmieren will
und Arduino,
also mit dem Arduino-Kern dafür,
dann bleibt ja nichts anderes übrig
als C++.
Ja, WPF ist auch unglaublich
interessant.
Also das liegt aber auch mit daran,
weil Microsoft halt ewig
nichts richtig dran gemacht hat.
Also man müsste es gar nicht
so ultra kompliziert machen.
Das war halt eines der,
man muss sagen WPF war damals
wirklich weit vorne von den Funktionen,
ja.
Die haben beispielsweise
als einer der ersten das übernommen,
dass du dein UI in einer Markup-Language
machen kannst.
Du kannst deine einzelnen Komponenten
in einer Markup-Language machen.
Du hast so zwei verschiedene Sachen
bei WPF.
Du hast Styles und du hast
Layouts?
Templates, genau Templates,
das meine ich, ja.
Ja, das ist schon ziemlich kompliziert
und also man hat ja auch
Jahre, Jahrzehnte quasi
jetzt daraus lernen können.
Es gibt ja schon fast 20 Jahre
oder so, ich glaube WPF kam 2006
oder so raus, 15 Jahre
und vieles davon braucht man
selber machen können.
Also WPF ist unglaublich kompliziert
und die waren halt damals
eine der ersten, die vieles
neu gemacht haben und auch
mit ihrem Two-Way-Data-Binding
und sowas, was es so in der Form
bei den meisten Frameworks
gar nicht gegeben hat.
Aber man hat jetzt einiges gelernt
mittlerweile daraus.
Was man ja auch daran sieht ist,
guckt mal Leute, wir haben gestern
Spelt Kit programmiert
und ein bisschen Browser UI
also von den Sprachen,
die man benutzt schon,
aber von der Design-Idee
ist das gar nicht mal so viel
anders als WPF,
aber von der Handhabung her
viel angenehmer.
Ist für heute was geplant?
Ja, das gleiche.
Oh, ich habe den falschen Titel
genommen für den Stream,
fällt mir gerade auf.
Ich habe White Paper Happy
als Stream genommen.
Das ist ja falsch,
alle noch sleepge.
Aufwachen-Stream
ist ja eigentlich das Richtige.
Excellent, jetzt sind wir
Aufwachen-Stream.
Ja, das ist auch so ein Ding
bei Microsoft.
Ich glaube, das ist bei Microsoft
immer noch so ein bisschen
problematisch.
Die haben halt ganz viele
unterschiedliche interne Teams,
die voneinander nicht viel wissen
wollen, zumindest hört man das
immer wieder.
Die versuchen,
die Sachen anzupreisen,
allerdings nicht so richtig
zu verwenden.
Ich meine, ihr könnt die
UWP-Anwendungen, die großen
UWP-Anwendungen von Microsoft,
in den, fragt mich nicht,
fast 10 Jahren, wo sie versucht
haben, diese Technologie zu
pushen, ihr könnt die an einer
Hand abzählen oder wahrscheinlich
sogar an zwei Fingern oder so,
da gibt es keine.
Ich weiß nicht, was es für große
Anwendungen gibt, aber
Wizzle Studio ist keine.
Ich glaube, mittlerweile ist
Wizzle Studio, glaube ich,
teilweise WinUI.
Da bin ich mir aber auch nicht
sicher. Es gibt, also Microsoft
benutzt selbst ihren Kram nicht.
So, und mal als Beispiel,
als Beispiel, was Microsoft,
nee, nee, im Store kannst du
mittlerweile sogar Windows Forms
Sachen veröffentlichen, das haben
sie ja mittlerweile geöffnet,
deswegen kannst du auch VLC
und UWP, ja, das stimmt.
Der Store selbst, das kann sein.
Die Settings, ja, das kann auch
sein. So, was wollte ich jetzt
sagen? Also, so ein Beispiel
für, guckt mal, der Installer
für Wizzle Studio, Wizzle Studio
Code und solche Geschichten.
Okay, nennen wir mal Wizzle Studio.
Der Installer für Wizzle Studio
war jahrelang, und glaube ich,
ist es immer noch, eine
Browser-Anwendung. Irgendwelche
Dinger von Microsoft sucht man
nach Vergebens, wo man sich
denkt, das ist viel zu restriktiv
ist, selbst für eure eigenen
Anwendungen, da könnte man auf
die Idee kommen, dass vielleicht
auch niemand anderes Anwendungen
dafür bauen will. Und die haben
dann einen Web-Installer für
Wizzle Studio gebaut und sowas,
wo man sich dann denkt, okay,
jetzt hat es schon einen Grund,
dass die Leute keinen Bock hatten,
UWP-Anwendungen zu bauen, weil
du dank der Sendbox nichts machen
kannst, gescheit. Und das hätte
Microsoft eigentlich viel früher
gemacht. So die großen Dinger,
die bekannt geworden sind, so
React zum Beispiel, die sind
ja alle nicht nur bekannt
geworden, weil sie eben ein
Problem gut lösen. Ja, genau.
Ja, und WinUI 3 hatte,
take Viagra, die hat,
WinUI 3 hatte ja auch
auf lange Zeit das Problem,
dass sie dieses Packaging von
UWP mit übernommen haben,
dass selbst wenn du quasi eine
unsendbox der Application
bauen wolltest, du trotzdem ein
Code Signing Zertifikat gebraucht
hast. Ich glaube, das ist jetzt
seit 1, 1,5, 2 Jahren höchstens
nicht mehr der Fall, dass du
unpackaged Apps bauen kannst
für, mit WinUI 3. Glaube ich.
Ich habe mir das schon eine ganze
Weile nicht mehr angeguckt. Ja,
Microsoft benutzt den eigenen
Scheiß nicht. Ja, was ich sagen
wollte ist, guckt euch mal React
an. React ist nicht nur so
erfolgreich geworden, weil sie
den Text gut benutzbar gelöst
haben. Nein, React ist auch
mit bekannt geworden, weil das
einen riesen Anwendungsfall hatte,
wo die Leute gesehen haben, ey,
wenn das bei Facebook funktioniert,
dann wird das auch im großen
Stil funktionieren. Also sprich,
es ist immer sinnvoll, wenn du
halt nicht nur die Technologie
hast, sondern auch gleichzeitig
so ein Aushängeschild dafür hast,
dass du sagen kannst, ey, guck
mal, das geht. Ich bin auch
überzeugt davon, dass sich Git als
Versionsverwaltungssystem unter
anderem nicht nur, weil es gut
ist, so schnell durchgesetzt hat,
sondern weil man gesehen hat, ey,
wenn das für den Linux-Kernel
funktioniert, dann wird das für
alles andere auch irgendwie
funktionieren. Und Git hat ganz
viel Zeug drinnen, was eben
spezifisch für die Linux-Kernel
Entwicklung ist, aber schon sehr
daran angelehnt ist. Zum Beispiel
hast du in Git die Möglichkeit,
Patches auszutauschen und die
dann per E-Mail zu schicken und
sowas. Das macht keiner, der
noch halbwegs bei Verstand ist,
außer dass es der Linux-Kernel zum
damaligen Zeitpunkt gemacht hat.
Die waren ja damals nicht auf
GitHub oder sowas. Die hatten eine
Mailing-Liste, haben in ihrem
Git Sachen committed und haben
dann ein Patch generiert und den
Patch haben sie eine E-Mail
drangehängt und dann in die
Mailing-Liste gepostet. Und der
Patch wurde dann aus der
E-Mail-Liste gespeichert. Und
das sind so ganz komische Dinge,
die niemand in Git eigentlich
verwendet, die aber da drinnen
sind, weil das halt damals für
die Kernel-Entwicklung sinnvoll
gewesen ist. Aber man hat gesehen,
ey guck mal, du kannst damit
alles verwalten. Weil wenn du
den Linux-Kernel damit verwalten
kannst, das gut funktioniert,
dann kannst du schlägergreifend
alles andere damit auch verwalten.
Also sprich, ich denke, es ist
wirklich sinnvoll, wenn nicht nur
die Technologie belegt wird dadurch,
dass die was taugt, indem es eben
gescheite Anwendungen gibt. Und
deswegen denke ich, hat sich Git
relativ schnell durchgesetzt, weil
du gesagt hast, es geht mit dem
Linux-Kernel, da geht es für alles.
Hat sich React so gut durchgesetzt,
weil es eben ein sehr spezifisches
Problem gut gelöst hat und quasi
so komplette Ära von neuen
Anwendungen mit eingeläutet hat.
Und dass man gesehen hat, ey guck
mal, das ist von Facebook, die
benutzen das auch, das funktioniert
auch, was man sieht, ach guck mal,
die benutzen den Kernel ja selbst.
Ich meine, was gibt es für ein
besseres Aushängeschild für ein
Windows-UI-Framework, wenn du sagen
kannst, Office benutzt das,
Visual Studio benutzt das, dann
weißt du, ey, das sind große,
komplexe Anwendungen, die Millionen
Leute benutzen, das scheint was zu
taugen, wenn du das damit machen
kannst. Da muss ich mir keine
Gedanken machen, dass du benutzen,
das wird prinzipiell funktionieren.
Und das hat halt Microsoft lange
nicht gemacht und dementsprechend
waren die Leute nicht nur skeptisch,
weil die Technologie scheiße war,
wie bei UWP, sondern sie waren auch
bestätigt dadurch, dass Microsoft
den eigenen Krempel nicht benutzt
hat und dementsprechend haben sie
gesagt, ja gut, also guck mal, ich
finde das scheiße, Microsoft selbst
scheint es ja auch scheiße zu finden,
deswegen benutzen sie es nicht und
es hat keine richtige Adoption
erfahren und viel zu lange. Ja,
das ist WinUI, was du hier
verlinkt hast, genau. Mittlerweile
ist es tatsächlich sehr sinnig, ja,
gebe ich dir recht, gerade wenn du
die Anwendung wie Discord anguckst,
wenn ihr euch mal überlegt, ähm,
was wollte ich jetzt gerade sagen?
Ich hab gerade auf den zweiten
Monitor geguckt, genau. Ja,
mittlerweile ist es tatsächlich auch
erforderlich, denn, wenn man sich mal
Anwendungen wie Discord anguckt,
Discord ist ja im Prinzip eine
Web-Anwendung in ein eigenes Fenster
gepackt und als Desktop-Anwendung
getarnt. Es sieht jetzt mal auf den
ersten Blick gar nicht so
unterschiedlich aus zur Discord-Web-
Version. Also Discord-Web und Discord-
Desktop ist mehr oder weniger die
gleiche Anwendung, allerdings nicht
komplett. Die Desktop-Anwendung von
Discord hat ein paar zusätzliche
Tricks, ja. Zum Beispiel haben die
eigene Node-Module, die sie laden,
native Node-Module, die sie laden
dafür und so was. Die haben ja schon
ein bisschen getrickst. Aber der
riesen Vorteil, den man hat, wenn man
den Browser als Grundlage für seine
Anwendung nimmt, gerade wenn man so
was wie Discord machen will, ist, du
kannst dich auf alles verlassen, was in
dem Browser drin ist, dass es auf allen
Plattformen funktioniert. Und gerade
für Discord ist das wichtig, weil
überlegt mal, Discord ist eine, nenn
es mal, Audio-Video-Multimedia-
Anwendung. Du kannst chatten, das ist
noch nicht so das Ding, du kannst
Voice-Callen, du kannst Desktop-
Sharen, du kannst wahrscheinlich sogar
Video-Callen mittlerweile, ja,
bestimmt macht bloß keiner. Also du
kannst Videos übertragen, Audio
übertragen, so. Und jetzt überlegt euch
mal, Discord läuft auf Android,
wahrscheinlich gab es mal eine
Windows-Phone-Anwendung von Discord,
benutzt eh keiner mehr. Es gibt
Android, es gibt iOS-Discord, es gibt
Windows-Linux-Mac-Discord.
Wahrscheinlich funktioniert der Mist
sogar auf Android-TV und sonstigen
Geschichten. Und jetzt überlegt euch
mal, die hätten für alle diese
Plattformen ihre Multimedia-Sachen
selbst programmieren müssen. Oder es
sei es nur, sich irgendein
Zwischen-Framework suchen, was das
kann und das dann ansprechen. Die
wären heute noch nicht bei der ersten
Version zum Releasen von ihrer
Anwendung. Die müssten allen Ernstes,
die müssten Audio-Video unter
Windows-Mac-Linux-Keckel, ja, und
Linux ist ja das Schrecklichste, was
ich mir vorstellen könnte, Audio-
Video zu machen. Da musst du dich
mit auseinandersetzen so nach dem
Motto, hat der Wayland, hat der X,
hat der Puls-Audio, hat der was,
also ganz ehrlich, das würde ich im
Leben nicht machen, da ist es
wahrscheinlich unter Windows noch
deutlich einfacher. Dann musst du
das gucken, okay, wie mache ich das
unter Android, wie mache ich das
unter iOS. Die würden durchdrehen,
die hätten noch nicht mal die erste
Version von ihrer App raus, hätten
sie diesen ganzen Kram selbst machen
müssen und hätten sich nicht auf das
alles konzentrieren müssen, was du
nicht alles hast. Das wäre ein
kompletter Abfuck gewesen. Ich glaube
Alsa ist noch eine Stufe unten
drunter. Ich glaube, das ist irgendwas
F, ich frage mich. Linux, sowas ist
da echt undurchsichtig. Also es macht
schon Sinn. Ja, das stimmt, WinUI
hat kein Linux-Support, was aber auch
der Name schon irgendwie so erahnen
lässt. Welche VM benutzt du nochmal?
Virtualisierungstechnologie meinst du?
Das ist, ich benutze VMware Workstation.
Ich habe das mal gekauft bei so einem
billigen Key-Seller für irgendwie 7,20
Euro oder so den Key. VMware Workstation
Professional, das machen wir jetzt
nicht. Es gibt ein Projekt auf GitHub,
das nennt sich so, glaube ich. Nee, ich
habe vergessen, wie es heißt. Nee,
wie heißt denn das? Flat? B-Flat. B-Flat,
genau. Die versuchen quasi einen
alternativen C-Sharp-Compiler irgendwie
zu bauen, dass du native Anwendungen
bauen kannst mit C-Sharp, die besonders
klein sind. Und die sind Go-inspired.
Habe ich noch nie ausprobiert. Also ich
weiß nicht, was da und wie gut das
alles funktioniert. Moin, kennst du
Github und hast du eine Meinung dazu?
Ja, ich habe das selbst bei mir laufen
gemacht. Also für einfache Sachen, wenn
du einfach bei dir ein lokales, gut, ich
meine, für ein lokales Git-Repo brauchst
du nicht unbedingt ein Webfrontend, aber
ist doch ganz praktisch. Wenn du einfach
so lokale Repos brauchst, um schnell mal
was zu pushen, dann ist das eine super
Geschichte. Ich benutze das zum Beispiel
so, wenn ich was für den Stream vorbereite,
dann mache ich das ja oftmals nicht
sonderlich hübsch und ich habe auch nie
vor, das irgendwie zu veröffentlichen.
Zum Beispiel für den Stream gestern. Ich
habe es mir im Vorfeld schon angeguckt,
weil ich nicht komplett planlos bin.
Habe das wild zusammengewurscht und
habe es dann gepusht in mein lokales
Repo hier, was auch auf GTA-Basis läuft
und habe das dann nebenbei auf dem
zweiten Bildschirm offen, da ich so ein
paar Sachen mir abgucken kann. Ja, benutze
ich lang. Mittlerweile kannst du damit
ja auch ein bisschen advancere Sachen
machen. Ich habe gelesen, die haben seit
der letzten oder seit den letzten
Versionen, noch nicht so lang her, haben
die sogar die Möglichkeit, Github Runner,
also zumindest die Github, die Github
Actions-Syntax, Runner, die die Github
Actions-Syntax unterstützen, auch
einzubinden. Was ich ganz cool finde,
weil so ein bisschen CI hat dem Ganzen
tatsächlich noch gefehlt. Ich denke, das
ist jetzt ein ziemlich gutes Komplett-
Paket, was sich auch easy hosten lässt.
Wie wäre es mal ein Software-Projekt
für ein Stream, in dem du nach deinem
Anspruch, das kann ich nicht, weil ich
bin kein hauptberuflicher Software-
Entwickler. Ich habe da keinen Anspruch
in dem Sinn. Also ich kann euch, achso,
ach das hier, ja gut. Das stimmt
tatsächlich, das könnte man, das könnte
man machen. Ich habe mich ja jahrelang
um unsere Software-Verwaltung und Pull-
Requests und Server-Automatisierung und
unsere Software-Repos gekümmert,
im alten Job und habe auch Leute
genervt, wenn man beispielsweise ihre
Changelog-Sachen nicht verstanden hat
und sowas. Die Sache ist bloß die, ihr
kennt mich, nur weil ich das haben
möchte, heißt das noch lange nicht,
dass ich das selbst gerne mache. Ich
meine, ich habe es natürlich, wenn ich
denn, okay, ich muss sagen, ich war da
teilweise ein bisschen, ein bisschen
Drecksack so beim alten Job, ja. Also
es durfte ja außer mir und meinem
Kollege durfte ja keiner beispielsweise
direkt pushen nach Master, so. Und ich
habe zu allen immer gesagt, also nicht zu
allen, wenn es wirklich kleine Sachen
waren, wie irgendwelche Schreibfehler oder
sowas, da habe ich auch manchmal gesagt,
ey, weißt du was, komm mal kurz rüber,
sag mir, wie es richtig ist, wir
committen das und pushen das direkt, du
brauchst keinen extra Branchen, Pull-
Requests und so, man kann es auf die
Schnelle machen. So nach dem Motto, wenn
einer, keine Ahnung, wenn einer Amster
geschrieben hat anstatt Master und sowas,
und dann haben wir das gemacht. Aber
normalerweise habe ich halt immer, habe
ich dann immer gesagt, hier, guck mal,
Branchen nicht richtig benannt, weiß ich
nicht von wem das kommt, der Commit-Message
ist nicht richtig. Wenn ich manchmal
mich vertippt habe oder, oder wenn ich
vielleicht zu früh was committet habe
und aus Versehen, ich habe immer direkt
den Master, ich habe die Dinger immer
direkt den Master gepusht. Aber das
liegt ja auch daran, weil wir haben es
ja hier gelernt im Stream, Leute, wir
programmieren ja ohne Fehler, das heißt
wir müssen direkt den Master pushen.
Also insofern war das eigentlich
vollkommen gerechtfertigt. Hast du
mitbekommen, dass Reddit seine Preise, ja
das habe ich mitbekommen, schon lange
mitbekommen und mich damals schon gefragt,
also Twitter, Twitter hat das ja auch
gemacht, aber Reddit habe ich auch
mitbekommen, die haben mich damals schon
gefragt, wie das Apps wie Apollo und so
machen wollen und jetzt kam halt raus,
die wird es dann einfach nicht mehr
geben. Was ich scheiße finde, richtig
scheiße finde, das kann man auch nicht
anders nennen, was ich mega beschissen
habe, die ist besser geworden die
letzten Jahre, aber ich finde die
Handhabung immer noch, Apollo ist auch
nicht der Weisheitsletzter Schluss
irgendwie, ja, also die, besser
integriert ist die offizielle Reddit
App schon, aber allein schon, allein
schon, dass es keinen gescheiten Vor-
und Zurück-Button gibt und so, das ist
so ganz weird, die offizielle Reddit App,
die ist besser als noch vor ein paar
Jahren, vor ein paar Jahren war die
komplett unusable, keine Ahnung, was
das bedeutet, ich meine, ich benutze
auch mittlerweile tatsächlich hauptsächlich
die offizielle Reddit App und reg mich
jedes Mal auf, wenn irgendwas mal wieder
nicht so ist, wie ich mir das gerne
gewünscht hätte, aber ich kann jeden
verstehen, der Apollo verwendet und wenn
du jetzt noch nicht mal mehr auf die
API-Gescheit zugreifen kannst, dann ist
halt RIP alle Third-Party-Apps, ja, das
finde ich kacke, es wollen ja ab
morgen einige Subreddits streiken, habe
ich gelesen auf Reddit, so nach dem
Motto, ich werde damit geschlossen für
irgendwie ein paar Tage, Wochen oder
was auch immer, ich denke nicht, dass
das irgendwie Erfolg hat. Diese Versuche
gab es ja schon an anderen Stellen,
beispielsweise gab es ja, es gab ja
auch, ich glaube die letzte Variante,
was war das Letzte, wo die Leute so
Blackout-Sachen probiert haben? War das
nicht zu Hogwarts Legacy? So nach dem
Motto, wir blockieren, wir streamen
Tag nicht oder sowas, ach keine Ahnung, das hat meistens nichts gebracht, weil man muss
ehrlich sagen, der Aufschrei ist groß und der Aufschrei ist berechtigt, aber wahrscheinlich
tangiert es 95% der Reddit-User nicht und die werden sich einfach nur wundern, also
am Endeffekt schaden sich die Subreddits wahrscheinlich sogar selbst, weil die Leute eventuell wo
anders hin gehen und dann da hängen bleiben, das ist in Reddit nicht so schlimm, du kannst
dir mehrere Sachen abonnieren und die angucken, also da gibt es bald ein neues, also ich glaube
nicht, dass das irgendeinen Effekt erzielt, ich fände es gut, weil ich es bescheuert
finde, dass Third-Party-Apps ausgesperrt werden und die Reddit-App halt in vielen Belangen
immer noch sackt, aber ich glaube nicht, dass es irgendwas ändern wird, naja, gut, Chat
hier, so, hab ich eigentlich meine Trending-Repos schon durchgeguckt, ne, mal ganz schnell,
AI, AI, AI, AI, AI, AI, AI, AI, das ist das schlimmste AI-Programm, Leute, kennt das
jemand? Nein, das hat mit AI überhaupt nichts zu tun, das ist eher was für Weeb-Musik,
was ist Gort-Potato? Hat keine Beschreibung, hat das nicht letzte Woche schon gesehen?
Hat keine Beschreibung, ah, Security-Gramm, ja Leute, osu! ist kein AI-Programm, das ist
irgendein Rhythmus-Game, wo die meisten irgendwelche Anime-Musik drin spielen und da, ja, das
ist quasi Aim-Training für Anime-Musik-Fans, osu! So, was empfiehlt uns YouTube denn heute?
Ich hab schon ein paar Sachen aufgemacht, falls uns YouTube nichts Gescheites empfiehlt, nope,
Debian-12-Tutorial für Einsteiger, ne, das gucken wir jetzt nicht, keine 22 Minuten,
wir sind ja hier keine Einsteiger, wir sind ja alle way too high IQ für Einsteiger. Was
soll an einem Debian einsteigermäßig anders sein als jedem x-beliebigen anderen Linux?
Okay, ja, die Installation und sowas, aber danach macht's auch keinen großen Unterschied.
Ach, mit vierfacher Beschleunigung angucken, kann YouTube überhaupt vierfach beschleunigt?
Die Debian-12-ISOs, Debian-12 kam doch gestern raus, dachte ich. Okay, ich krieg wieder irgendwelche
Grills empfohlen. Microsoft is decrypting your files in the cloud, ja, und wohlgemerkt nicht
nur Microsoft. Achso, ne, ne, doch, in dem Fall wahrscheinlich nur Microsoft. Hier geht's
wahrscheinlich um die Geschichte, dass Microsoft ZIP-Passwörter extrahiert. Also Microsoft ist da
wirklich clever. Also wenn ihr, also sagen wir mal, wenn ihr ein ZIP verschickt, ein verschlüsseltes
ZIP über Microsoft Services, dann machen die folgendes, die extrahieren aus den Chatnachrichten
und aus den E-Mails das Passwort, falls das da drin steht, und da bin ich mir jetzt aber nicht
sicher, ob das stimmt, ich glaube, die probieren sogar eine Liste aus Default-Kennwörtern durch,
um das zu entschlüsseln. Und das natürlich alles unter der Flagge von Sicherheit, weil Virenscanner
und, tja, was wird denn da sonst noch immer gerne als Beispiel genannt? Ja gut, der Klassiker,
der Klassiker schlechthin, wenn es um Security-Themen geht, ist natürlich Kinderpornos
finden und Terroristen finden und Morde aufklären und sowas in der Richtung. Das wird ja immer in
den Ring geworfen. Jedes Mal, ist euch das eigentlich mal aufgefallen? Jedes Mal, wenn es
um irgendwelche mehr oder wenig stark ausgeprägten Einsteigungen in der Privatsphäre geht, kommt als
erstes Terroristen, Kinderpornos, Morde. Das kannst du theoretisch, sobald so ein Thema aufkommt,
kannst du eigentlich schon so eine Stopp-Uhr stellen oder irgendwie so einen Countdown machen,
wann der Erste mit einem dieser drei Sachen um die Ecke kommt, ja. So, nix Spannendes dabei. Also
die Seite ist an sich schon sehr sus, ja. Da weißt du halt nie, ob der Key am Ende funktioniert
oder nicht. Ich meine, ich habe meinen Key damals auch billig bei so einer Keyshop-Seite gekauft.
Chat, wir posten aber, ich sage euch gleich, wir posten hier im Chat keine Links zu irgendwelchen
Serial-Keys, weil das ist wahrscheinlich nicht erlaubt. Aber ich bin mir, ich bin zuversichtlich,
dass ihr in der Lage seid, euch selbst zu helfen und im Zweifelsfall die Software einfach auch
kauft, wenn euch nix einfällt. Oder wenn ihr sie wirklich viel benutzt. Oh, Chainlore, warum?
Mordgis, oh man. Ich sag's noch, ja. Alter, er kann's einfach nicht lassen. Ich weiß,
ich weiß nicht. Ich weiß, es muss schon einen Grund haben, warum er irgendwie schon den siebten
Discord-Account braucht, weil er überall immer gebannt ist. Das war jetzt aber echt mit Ansage,
das hätte man sich sparen können. So, in fünf Minuten ist er eh wieder am Start. Die Zukunft
ist hier. Okay, also lass mal kurz schauen, was haben wir denn hier Schönes? Warum du in Deckung
doch noch, was? Warum du in Deckung doch noch down gehst? Ah, ja, das wollte ich gucken,
weil ich vermute, dass hier ein bisschen was zu Kleinzeit-Hit-Detection und sowas versucht wird,
für Noobs zu verpacken. Da will ich ein bisschen meckern, falls die Erklärungen nicht korrekt sind.
So, was haben wir als nächstes noch? Advanced Windows Features you should know. Okay,
das sind immer Gbade-Videos. Das sind immer Gbade-Videos. Aber komm, neun Minuten,
das können wir uns schnell gehen.
Ja, wisst ihr, was auch richtig, richtig advanced ist in Windows? Also,
falls ihr euch mal gefragt habt, wie man Custom-Icons vergeben kann für Ordner und sowas,
das geht seit Windows 95 oder wahrscheinlich seit Windows 3.11 oder so. Und das Problem ist,
dass sich der Dialog seit Windows 95 nicht geändert hat. Guckt euch das mal an. Das wissen
wenige. Und das ist super advanced. Passt mal auf, krasse Windows-Hacks zeige ich euch jetzt. Ja,
guckt mal. Wir gehen jetzt hier drauf, Rechtsklick. Natürlich, selbstverständlich,
Show More Options, Properties, Customize, Change Icon. Und jetzt kommt hier halt straight aus Windows
95 der Dialog und die Icons, ne? Und die wurden auch, ohne Scheiß, die wurden 20 Jahre auch nicht,
oder ja, länger. Die wurden auch 30 Jahre nicht mehr updatet, hier die Icons. Ja, vielleicht ein
paar, aber da sind immer noch die richtigen Oldschool-Icons drin. Wo ich mich ernsthaft
frage, warum ist das eigentlich so eine lächerlich kleine und zum größten Teil absolut müllige
Sammlung aus Icons? Ich meine, warum, um alles in der Welt, sollte ich mein Icon so machen? Ja,
hier, Pretty Advanced Windows. Moment, geht das eigentlich auch hier mit Properties? Ja,
nee. Pretty Advanced Feature, würde ich sagen. Guck mal, und es gibt hier einen Ordner,
es gibt hier einen Ordner, es gibt hier einen Ordner und hier einen Ordner-Symbol. Da
blickt doch keiner mal durch. Noch mehr Ordner, noch ein Ordner, noch ein Ordner, noch ein Ordner,
noch ein Ordner, zwei Ordner. Ja, man weiß es nicht. Ja, Windows-Logik, ne? So, okay,
jetzt lassen wir uns das mal, jetzt gucken wir uns das mal an, die Advanced Features.
Bin ich, jetzt bin ich mal gespannt, wie advanced das wird. Let's go.
Sieht auch nicht umsonst aus wie Windows XP, kommt auch straight aus Windows XP.
Ja, okay, das muss man sich nicht angucken. Mich interessiert eigentlich nur,
was für Tools sind. Okay, next. Diskpart. Leute, ich hab, Pfeiffer da, wir müssen das Video gar
nicht gucken. Der hat seine Vorschau-Dinge ordentlich benannt. Okay, Diskpart. Also,
wer ernsthaft Diskpart benutzt, hat die Kontrolle über sein Leben verloren. Bevor ich Diskpart
benutze, seriously, dann würde ich eher Linux booten und dann Gparted oder irgendwas benutzen,
bevor ich dieses Ding da benutze. Fdisk. Bevor ich das da benutze. Hostfiles. Ja,
Hostfiles halt. Task-Scheduler. Keckel. Okay, Advanced Feature. Service-Menü. Moment,
was für ein Ding?
Ach nee, der meint diese Service-Management-Konsole oder sowas. Ja, das ist jetzt auch nichts Neues.
Sieht auch aus wie aus Windows XP, weil es direkt aus Windows XP ist, aber das ist... Also,
das weiß ja sogar ich und ich bin kein Windows-Admin und ich werde auch nie Windows-Admin. Ich will auch
nie Windows-Admin werden. Bei mir auf der Arbeit haben sie letztens schon erzählt,
wir sollen uns jetzt um Microsoft SQL-Sachen unter Windows vielleicht kümmern. Naja,
kümmert euch mal, aber ich kümmer mich da nicht drum. Okay, ich meine, natürlich würde ich einem
helfen, wenn irgendwas wäre und ich wüsste dazu was, aber ich weiß dazu nix und ehrlich gesagt,
das ist auch ein Thema, wo ich mich ungern mit beschäftigen will. Okay, Event-Viewer. Ja,
eines der hässlichsten Anwendungen ever, Leute. Den kann ich jetzt nicht aufmachen,
dann leake ich bestimmt irgendwas. Event-Viewer, das ist also sowohl vom Layout her als auch von
der Optik her eines der hässlichsten Anwendungen, die ich je gesehen habe. Memory-Diagnostics-Tool.
Ja, das brauche ich nicht. Da würde ich einfach meinen... Ach, guck mal,
die haben quasi Mem-Test auch jetzt eingebaut. Da würde ich einfach Mem-Test booten. Okay,
Resource-Monitor. Okay, wenn man es braucht. Reliability-Monitor. Who the fuck braucht denn
das? Okay, nice. Video durch. GG Eats. Nice. Siehste? So geht das. Einfach in der Schnelle
durchgeguckt. Warum du... Okay, dann gucken wir, was haben wir denn sonst noch zu bieten. Blizzard
fällt... Nee, Overwatch 2 fällt auseinander. Oh ja, das stimmt. Also generell fällt... Also
Overwatch 2 war schon nicht unerfolgreich. Konnte einem Riesenhype nicht anknüpfen und ich weiß
nicht, was Blizzard da wieder gemacht hat. Ich meine, Papa Jeff ist weg. PVE wurde eingestampft.
Was haben wir hier zu bieten? High School Student makes React a million times faster. Okay,
wir können uns eine Runde of Fireship angucken. Kam erst vor 11 Minuten. Geht nur 2 Minuten 46.
You're watching the Code Report. Willst du Diablo 4 anfassen? Ich bin immer noch unschlüssig.
Das stimmt.
Das stimmt wohl. Das habe ich auch gestern gesagt, als wir ein bisschen Svelte gebastelt
haben. React ist nach wie vor das mit Abstand verbreitetste Framework überhaupt. Also für
Frontend-Kleinzeitige Anwendungen und auch für Fullstack-Sachen mit Next.js und sowas. Das ist
sehr verbreitet. Ja, Svelte hat gar keine... Genau. Gar keine Virtual Dom. Ja,
gar keine Virtual Dom mehr. Okay, nur mal so, dass ich das jetzt verstehe. Hat der jetzt
React geforkt, um es schneller zu machen? Oder ist das ein Plugin für React? Das ist ein Fork,
oder? So was.
Ja, das ist ein Fork.
Okay, ich hab's jetzt noch.
Okay, und jetzt müssen wir mal schauen, ob wir das jetzt auch noch mal ausprobieren können.
Okay.
Okay, wir machen das jetzt mal aus.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Plattform. Und WebAssembly ist halt eines dieser Targets. WebAssembly ist quasi so eine Art Runtime,
so eine Art, ja, so eine Art JDK im Browser. Ne, nicht wirklich. Das trifft es vielleicht
nicht so genau. JVM im Browser. Das ist eine Runtime, die du als Compiler Target benutzen
kannst. Du kannst ein C++ Programm kompilieren in WebAssembly und da kommt dann irgendwelches
Byte, Binary-Geschwurbel raus, was die WebAssembly Runtime im Browser versteht und dass du es
ausführen kannst. Du kannst beispielsweise ein Hello World Programm in C++ programmieren
und dann nimmst du einen C++ zu WebAssembly-Compiler. Da gibt es zum Beispiel das Ding. Das ist
ein C++ zu WebAssembly-Compiler und dann nimmst du dein Hello World C++, schmeißt es da rein
und rauskommt Binary-Code, was die WebAssembly Runtime im Browser ausführen kann. Man muss
dazu sagen, WebAssembly ist sehr stark reglementiert, was es darf und was es nicht darf. Es läuft
nach wie vor in der Sandbox. Du kannst nicht einfach auf die Platte zugreifen oder sowas.
Ist ja klar, es ist immer noch ein Browser und es ist immer noch fremder Code, der zum
größten Teil ausgeführt wird. Allerdings kann WebAssembly auch nicht mit der Webseite
interagieren, in dessen Kontext das vielleicht läuft, sondern WebAssembly ist mehr so eine
Art Background-Thread, könnte man sagen. So ein eigener Prozess, eine eigene Runtime,
die im Browser läuft und wenn du irgendwas an In- und Output brauchst, dann muss das
über Javascript passieren. Ne, das ist wieder was anderes. Also zum Beispiel, wenn du einen
FFmpeg-Videoplayer machen willst. FFmpeg selbst ist eine C-Library und im Angenommen, du willst
einen Videoplayer machen, ich nehme das als Beispiel absichtlich, weil das haben wir im
Streamer gemacht. Also im Angenommen, du willst einen Videoplayer machen, der Formate abspielen
kann, die der Browser standardmäßig nicht unterstützt. Das heißt, du musst das Video
runterladen, du musst in FFmpeg die Videoframes einlesen, du musst in FFmpeg die Videoframes
decoden als RGB und dann diesen RGB-Frame in die Webseite in irgendein Canvas-Element
rendern oder mit WebGL in irgendein 2D-Kontext rendern. Genau das gleiche haben wir gemacht
und das lief folgendermaßen. Javascript ging her, hat angefangen das Video runterzuladen.
Alle Megabyte, also das Megabyte, was runtergeladen wurde in Javascript, wurde über einen Funktionsaufruf
zu WebAssembly quasi rübergeschickt als ByteArray in die WebAssembly-Runtime. Also du musstest
vorher erstmal das Ganze initialisieren und sowas, dass dann FFmpeg läuft und alles mögliche.
Du hattest dann halt dort was gestartet, was darauf wartet, dass es Input bekommt.
Also dein FFmpeg, was du quasi kompiliert hast zu WebAssembly, das hast du gestartet,
das wartete dann auf Input, das wurde dann von Javascript ausgefüttert mit RawVideoBytes,
die Javascript im Hintergrund runtergeladen hat. Dann ging das Ganze in FFmpeg rein,
FFmpeg hat die Sachen decoded, beispielsweise MPEG2 oder sowas, das kann ja im Browser nicht
abspielen. MPEG2, Sachen hast du runtergeladen über Javascript, reingepackt in WebAssembly,
FFmpeg hat das decoded und sobald FFmpeg ein Frame decoded hatte, gab es ein Callback zurück
in Javascript. Es wurden die Bytes, die decodeten Bytes als RGB glaube ich oder
als RGB-Frame, wurden übergeben an Javascript, Javascript hat das Ganze genommen und dann in
einem WebGL-Kontext gerendert für einen Videoplayer. Und so haben wir im Stream,
ich kann euch das auch mal zeigen, Archive, WebAssembly, ok man braucht komplette Wörter
anscheinend. Ja, guck mal, ist 12 Monate her. So, und da haben wir einen Videoplayer gebaut,
guckt euch das mal an. Ja, wir haben einen Videoplayer gebaut, ihr seht es hier irgendwo,
guck, das ist ein Videoplayer. Ich habe ein Video runtergeladen in einem Dateiformat,
das der Browser normalerweise nicht abspielen kann. Javascript lädt im Hintergrund das Video
runter, guck, das wird TS-Video, also MPEG2-Video, das kann das Ganze nicht. Und wir haben das,
guck hier, das wird hier runtergeladen. Javascript lädt das Video runter, schickt es an WebAssembly,
in WebAssembly ist hier C++ irgendwo, wo haben wir es hier oben? Ja, hier, da, in der, in der
Teil, C++ zu WebAssembly, Translated, decoded das Video und schickt es dann an einen WebGL-Kontext
zum Rendern für das Video. Das war extremer 5Head-Shit, wir haben glaube ich 10 Stunden
oder so daran rumgebaut insgesamt, bis das funktioniert hat. Aber ihr seht, wir haben
hier einen Videoplayer, der wirklich auch sehr performant lief, für das, dass es einfach
im Browser ist. Wir haben dort glaube ich 4K-Videos, 4K 60fps-Videos haben wir gerendert
und die liefen mit ungefähr Hälfte der Geschwindigkeit. Also man konnte damals auf dem alten Rechner
bei mir, also das ist auch sehr performant, muss man sagen, man konnte damals bei mir
auf dem alten Rechner ein 1080p-Video 60fps ruckelfrei abspielen im Browser, hat natürlich
ordentlich CPU gefressen, in einem Videoformat, das der Browser normalerweise nicht unterstützt.
Also WebAssembly, FFmpeg hat das Ganze decoded und dann wurde es per WebGL gerendert. Das
ist, wie gesagt, das ist echt nicht ohne gewesen. Man sieht auch, dass es teilweise ein paar
kleine Slowdowns drin hat und sowas, ja. Das ist echt nicht ohne gewesen, aber es hat gut
funktioniert, verhältnismäßig gut. Und dafür ist das einfach geil. Wenn ihr dir
überlegst, wie willst du ordentliches Videodecoding machen im Browser? Gar nicht. Es gibt kein
Javascript-Gegenstück zu FFmpeg. Hat noch keiner gebaut. Wird wahrscheinlich auch keiner
bauen. Also was ist das naheliegendste? Du nimmst FFmpeg selbst und übersetzt das in
irgendein Format, was dein Browser versteht. Und das bietet sich WebAssembly halt an, weil
WebAssembly explizit dafür gedacht ist, quasi als Compiler-Target zu fungieren. Also du
kannst deine C++-Programme, Rust-Programme übersetzen in WebAssembly und dann den Browser
laufen lassen. Aber wie gesagt, es ist sehr stark reglementiert. Du kannst damit nicht
so ohne weiteres direkt aus WebAssembly mit Webseiten interagieren. Ja und WebGL ist wieder
was anderes. WebGL ist zum Rendern für, ja sagen wir mal, wenn du was GPU-beschleunigt
rendern willst. Das war richtig high-IQ-Shit. Ich glaube, das war eines der kompliziertesten
Sachen, die wir je im Stream gemacht haben, den WebAssembly-Videoplayer. Wo sind wir jetzt
eigentlich stehen geblieben? Ah ne, das Video war fertig, gell? Wir sind gar nicht stehen
geblieben. So, next. Jetzt habe ich gleich, jetzt habe ich gleich erstmal gleich instant
40 Leute verschreckt. Wir hatten knapp über 200, jetzt haben wir 100, jetzt haben wir
187. Okay, was haben wir denn sonst wie noch? Wollen wir uns das mal angucken. Warum du
in der, okay, ich mecker jetzt mal ein bisschen über das Video. Ihr wisst, ich bin manchmal
viel zu kleinlich, was solche Technik-Videos angeht und ich gehe davon aus, hier ist einiges
vereinfacht, weil das eben ein Video ist, was sich an, ja, alle richtet und nicht Leute,
die ein bisschen Netzwerkahnung haben oder ein bisschen Ahnung von Netzwerkprotokollen
und sowas. Wir gucken uns das mal an. Ich mecke aber sowas immer gerne, also mal gucken.
Das kann an vielen Sachen liegen. In modernen Games oftmals hauptsächlich Kleinzeit-Hit-Detection.
Natürlich kann das auch an ganz anderen Sachen noch liegen, aber bei modernen Games wahrscheinlich
eher Kleinzeit-Hit-Detection.
Nicht zwangsläufig. Okay, wenn ich in dem Tempo weitermache, dann kommen wir durch das Video nie durch.
Lag bedeutet eigentlich in der Regel eher entweder Server-Side-Lag und damit ist eigentlich in der
Regel gemeint, wenn man von Lag spricht, der Server ist schlicht und ergreifend überlastet und kann
nicht alles verarbeiten und muss Sachen droppen oder kann es nur langsamer verarbeiten und
irgendwelche Queues laufen voll oder aber Paketverlust. Also Sachen werden nicht abgearbeitet.
Das ist eigentlich in der Regel Lag oder halt nur verzögert. Du wirst um die Ecke getroffen,
ist nicht zwangsläufig Lag, sondern eher Kleinzeit-Hit-Detection mit sehr großzügig
eingebauten Zeitfenstern, wie das noch bearbeitet wird.
Früher hattest du das Problem nicht. Da war alles Server-seitig. Das Problem war nur,
dass du halt das oftmals schlecht spielen konntest, weil du halt nicht dorthin geschossen hast,
wo du hingeschossen hast, weil es auf dem Server woanders war, beziehungsweise auch du dann mit
einem Ping von 150 halt echt gelitten hast gegen einen mit einem Ping von 20, wo ich ja persönlich
der Meinung bin, das sollte auch so sein. Die Leute sollten schlicht und ergreifend einfach
auf dem Server bei ihnen in der Nähe spielen. Kann ja nicht sein, dass du gegen Leute spielen musst
mit einem Dran oder Ping teilweise. Das haben sie in Overwatch ganz gut gelöst. In Overwatch haben
sie es glaube ich bei 100 Millisekunden gecappt. Also der Server erlaubt nur noch Sachen, die 100
Millisekunden zurückliegen als Hits, obwohl das bei ihm ein kleinzeitiger Hit gewesen ist. Ich muss
noch ehrlich sagen, im Nachhinein betrachtet, ich habe ja wirklich ganz ganz lange Overwatch
gegrindet, muss sagen, netzwerktechnisch finde ich Overwatch eines der besten Games, Multiplayer
Games, die es je gegeben hat. Also mir fällt kein Game ein in der Geschwindigkeit und in der
Genauigkeit und wie selten dort Bullshit passiert. Klar, du hast in Overwatch auch die üblichen
Verdächtigen. Du schießt mit McCree direkt durch den Kopf von irgendeinem Typ durch, aber das
passiert verhältnismäßig selten. Also ich muss sagen, Overwatch netzwerktechnisch ist eines der
besten, technisch saubersten Sachen, die ich je gesehen habe, Multiplayer Gaming mäßig.
Es schließt man oft Türen hinter sich und wird trotzdem noch verzögert getroffen. Unglaublich
mühsam und unverständlich, wie das... Auch nicht CSGO. Also ohne Scheiß, Overwatch ist mit das
Beste, was ich... Gut, ich muss sagen, ich habe CSGO, also auch CS... CS... CSGO 2 habe ich noch nie
angeguckt. Vielleicht, den haben die ja mittlerweile aufgeholt. Aber es hat sich noch kein Game so
gut netzwerktechnisch für mich angefühlt und so sauber angefühlt wie Overwatch.
...passieren kann als Spieler. Aber habt ihr schon mal versucht, abgesehen von blindem Hate gegen die
Server, zu verstehen, was da wirklich passiert? Ja, habe ich. Weil in Wirklichkeit wissen wir doch
eigentlich fast alle nicht, was wir da genau haten. Naja gut, 100%ig kannst du es ja nicht wissen, weil
du nicht weißt, wie das Spiel das handelt. Gut, es sei denn, du machst extrem krass detaillierte Analyse.
Aber ja, ich habe mir da schon öfters Gedanken drüber gemacht, warum das so passiert. Ich habe
da sogar schon für über zehn Jahre Videos zugemacht, dass die meisten Leute, die was von
Lag schreien, eigentlich gar nicht Lag meinen. Du sitzt ja auch direkt in Frankfurt an der Quelle.
Das stimmt wohl. In Battlefield 3 zu den Servern hatte ich teilweise einen Fünferping, wenn die
Server in Frankfurt oder Köln standen. Fünferping ist auch schon nice, oder?
Gibt es hier vielleicht sogar bald bessere Lösungen?
Das Problem, hinter Deckung getroffen zu werden, passiert aus dem...
Also ein bisschen höhere Bitrate für ihr Video hätten sie vielleicht nehmen können.
...im selben Grund, wie man teilweise auch ein paar Schritte wegen Lag zurückteleportiert wird,
oder wenn die eigenen Schüsse nicht registriert werden, obwohl man ganz klar drauf ist. Ja,
das kann passieren, dass man wirklich drauf war und trotzdem nicht trifft. Ich habe es ja schon
immer gewusst, dass mich mein Gefühl nicht trügt. Dass solche Dinge aber passieren,
ist zwar nervig, aber stellt euch mal Folgendes vor. Zehn Leute in einer Lobby schicken ein Paket
mit den Infos drin, wo sie gerade sind und was sie gerade machen, beziehungsweise drücken.
Beim Server kommen alle Pakete an, die Infos werden jetzt alle zusammengefasst und dann
zurückgeschickt an jeden Spieler. Hier kommt aber jetzt ein wichtiger Faktor dazu,
der alles etwas komplizierter macht. Der Ping. Der Ping ist die Zeit, die dieses Paket hinzu und
zurück vom Server... Okay, wenigstens das ist schon mal richtig. Eigentlich ist die Erklärung
bis jetzt echt nicht übel. ...braucht, wenn das Paket... Ich mecker gerne bei sowas, wisst ihr.
...hin und zehn Millisekunden zurück braucht, dann ist der Ping 20. Wenn ihr ein Paket über
Willhaben PayLivery verschickt und es braucht einen Tag zum Empfänger und das Geld dann wieder
einen Tag zu euch, habt ihr einen Lag oder Ping von zwei Tagen. Aber die Pakete der Spieler...
Leute, ich habe mich gerade... Ich weiß nicht, ob es euch auch so geht. Ich habe mich bei diesem Bild gerade ein wenig verguckt. Ich dachte,
das hier ist der Kopf, das hier ist der Rücken und da dachte ich mir so, okay, was ist... Okay, das ist
der Bau. Da dachte ich mir so, was ist das? Erkennt ihr das vielleicht, was ich gesehen habe?
Yep. Moment. Aber ja, das ist ein Gesicht in der Richtung. Dann ergibt das viel eher Sinn.
Zwei Tagen. Aber die Pakete der Spieler brauchen nicht alle gleich lang zum Server. Wenn Spieler
1 weiter vom Server entfernt ist als Spieler 2, dann kommt das Paket von... Das soll, wisst ihr was?
Dann soll Spieler 1 halt auch einen gescheiten Server in seiner Nähe spielen. Easy. ...früher an. Und er bekommt auch
früher Informationen vom Server zurück. Dazu kommt noch, dass diese Pakete meistens nicht direkt
vom Spieler zum Server kommen. Das wäre zu schön. Für die Route von Spieler zum Server ist dann dein
Internet Provider zuständig. Nö. Die Lieferfirma... Ist er nicht. Der ist vielleicht zum Teil dafür zuständig,
aber nicht für die ganze Route zum Server. Wahrscheinlich noch nicht mal für einen Drittel
der Route zum Server. Was dein Internet Provider machen kann ist, dafür zu sorgen, und das ist das,
wo die Telekom Richtung YouTube letzten Jahres über Probleme hat, was dein Internet Provider
machen kann ist, dass er, sagen wir es mal umgangssprachlich, genug Bandbreite hat zu den
Netzwerken, über die deine Pakete gehen müssen. Dass da nichts an die Grenze kommt. Da hatte die
Telekom und auch Vodafone gerade am Anfang von Corona, könnt ihr euch noch dran erinnern, wo am
Anfang von Corona die Standard-Wiedergabe-Qualität bei YouTube standardmäßig auf 480p gesetzt wurde,
wo die Provider Probleme hatten, weil auf einmal, huch, die Leute benutzen ja auch ihre Bandbreite
daheim, diese Probleme hatten. Und so nach dem Motto, Mist, jetzt benutzen die Leute Bandbreite
für Videos und die wollen Homeoffice arbeiten. Fuck, Alter, das funktioniert ja nicht. Also die
können quasi gucken, sagen wir es mal ganz billig, dass ihr Uplink ordentlich dimensioniert ist. Das
ist natürlich nicht ganz richtig, weil es ist nicht nur ein Uplink, es sind mehrere und ich
habe so einen Peering schon mal live gesehen. Ich hatte ja die Ehre, ich durfte ja schon mal,
das hat doch YouTube gemacht und nicht der ESP. Das ist richtig, das hat YouTube gemacht
standardmäßig, aber es war aus diesem Grund, weil es Bandbreitenprobleme, es fuck gegeben hat und
auch viele Leute nicht mehr richtig im Homeoffice arbeiten konnten. Das war wahrscheinlich was,
was Hand in Hand ging. Ja, das hat YouTube gemacht, aber das war nicht einfach nur, weil YouTube sich
gedacht hat, heute wäre es mal ein schöner Tag, die Qualität auf 480p zu setzen. Das hatte externe
Umstände, warum YouTube es ausgerechnet dann gemacht hat. Und die hatten ja auch Bandbreitenprobleme
und was wollte ich jetzt sagen? Ja, ich hatte ja das Glück, ein paar mal in Statics zu dürfen in
Frankfurt, als ich noch beim Provider gearbeitet habe und ich habe so Peering-Links tatsächlich
schon, Peering-Ports tatsächlich schon gesehen. Das ist oftmals total unspektakulär. Wir hatten
zum Beispiel ein Kabel damals, weiß ich noch, haben wir neu gepatcht zu Freenet. Da ist man
hingegangen an seinen Rack im D6, hat ein Kabel genommen und an den Switch gesteckt und in den
passenden anderen Port reingesteckt. So, und der kam dann auf, was weiß ich, drei Racks weiter raus
bei irgendwas, was Freenet gemietet hat. Das war, glaube ich, noch bevor es alles United Internet war
und ging bei Freenet dann in den ihren Switch rein. So, so sah so ein Peering-Link aus. Das war äußerst
unspektakulär. So, und da können natürlich, das ist das, was die Internet-Provider machen können,
die können natürlich gucken, dass sie ordentlich vernetzt sind mit anderen Providern. Aber über die
Route entscheiden die nur zum Teil. Weil, wenn das das Netz des Internet-Providers verlässt, hat
der Internet-Provider da erstmal keinen großen Einfluss drauf, wohin das Ganze geht. Der kann
nur sagen, hier, da, Exit-Router, was weiß ich, nächstes, nächstes Target ist autonomes Dings-Netz
573 und da geht's jetzt hin. So, zack, bumm, dann ist das da und dann entscheidet der Nächste, wie er es
weiter routet. Okay, wir brauchen aber viel zu lang für. Also, wie gesagt, das stimmt nicht. Der
Provider ist nicht für die Route zum Ziel verantwortlich. Zum Teil, aber bei weitem nicht
für die ganze Route. Das ist ja auch der Grund, warum so Sachen wie Gaming-VPNs teilweise was
bringen können, wenn der Provider euch über Sibirien routet. Also, es gibt ja Gaming-VPN-Anbieter, die
haben halt ein paar Server weltweit verteilt und das muss nämlich immer gut sein. Also, zum Beispiel,
wenn ich von hier zu einem Server in Köln oder von hier zu einem Server in Frankfurt gehe, dann werde
ich höchstwahrscheinlich hier in meinem Provider-Netz und in meinem Provider-Netz in Frankfurt auch
wieder rauskommen. Aber wenn das ein bisschen weiter weg ist, wenn ich jetzt beispielsweise
irgendwelche koreanischen MMOs in Korea spiele oder auf dem asiatischen Server, dann ist mein
Provider nicht dafür zuständig, das Paket von mir dorthin zu bringen. Zumindest nicht die ganze
Strecke. Und da können Gaming-VPN-Anbieter was bringen, weil, mal angenommen, ich werde wirklich
mega beschissen geroutet. Ja, keine Ahnung. Ich werde von hier nach New York und von New York
dann wieder zurück nach Russland und von Russland über China dann nach Südkorea. Also, was auch
immer. Dann ist das natürlich eine ziemlich beschissene Route und dann habe ich einen Ping
von 450 oder sowas. Oder von 500 oder sowas. Und das ist halt kacke. Und wenn ich einen Gaming-VPN-Anbieter
benutze, dann kann das anders sein. Dann gehe ich hier zum nächstgeliegenen VPN-Endpunkt, der
vielleicht in Frankfurt steht und dann handelt das Routing der Gaming-VPN-Anbieter über seine
Server, die er quasi weltweit stehen hat. Das funktioniert. Das können die machen. Das ist
dann vielleicht eine etwas optimiertere Route zu dem asiatischen MMO-Server. Aber so macht das ja
mein Provider nicht. Mein Provider schickt das aus seinem Netz raus und danach ist es ihm egal.
Egal wie gut das Routing aber auch ist, wer weiter weg sitzt vom Server, wird auch immer mehr Lag
beziehungsweise einen höheren Ping haben. Das ist leider ein Problem, das auch die beste Technologie
nicht lösen kann, denn wir sind nun mal abhängig von maximalen Geschwindigkeiten der Physik. Eine
Sache darf man aber dabei auch nie vergessen. Ob nämlich der Datenpaket-Lieferdienst überhaupt
alle Pakete liefert. Manchmal gehen auf den Weg nämlich Pakete verloren. Kennen wir von der Post.
Beim Gaming beziehungsweise beim Server nennt sich das ganze einfach Packet-Loss und die meisten
Games haben mittlerweile sogar ein eigenes Symbol, wenn das passiert. Dass solche Pakete am Weg
verschwinden, liegt übrigens so gut wie nie am Spiel beziehungsweise an deren...
Das finde ich gut. Das finde ich wirklich gut, dass er das mal sagt. Die meisten Leute haben
übelste Panik, dass bei ihnen daheim irgendwas schief läuft, wenn Pakete verloren gehen. Und
ich habe auch schon jahrelang in Videos immer wieder gesagt, Leute, macht euch ja nicht so
viel Gedanken. Höchstwahrscheinlich liegt das Problem nicht in euren eigenen vier Wänden. Und
wisst ihr, was ich auch immer witzig finde? Wenn die Leute einen Traceroute machen und sagen,
oh, Packet-Loss, Traceroute, ich sehe es genau. Pass mal auf hier. Wir machen jetzt mal was. Das
ist immer extrem, extrem Cack-Wait-Moment. Ich leake keine IP bei Traceroute, weil man ja nicht
meine Absender-IP sieht. Und selbst wenn, scheiß drauf. Ich zeige euch das jetzt mal. Ein Fehler,
den viele Leute machen, wenn es um Traceroute, wenn es um Packet-Loss geht. So, pass mal auf.
Wir gehen jetzt Traceroute... Hab ich das nicht mal installiert? Traceroute zu... Sag mir mal
irgendeine China-Seite. Was ist eine schöne China-Chinesen-Seite, Leute? Aber AliExpress ist
doch bestimmt nicht nur in China. Die haben doch bestimmt mehrere Server weltweit. AliExpress.com.
So. Okay, hier haben wir das Erste schon. Hier haben wir das Erste schon. So. Das hier ist mein
Router. So viel ist das einfach. Das hier ist bei mir im Netz. Also, das ist mein Router. Und das
hier ist wahrscheinlich mein Vodafone-DSL-Modem-Router-Kombi-Gerät. Gehe ich mal von
aus. So. Also, so viel ist es easy. Das ist noch alles bei mir lokal. Wir können es ja mal kurz
fertig laufen lassen. So, das ist alles noch bei mir lokal. Easy. Der nächste Hop bei Unity-Media
kommen die Leute jetzt auf die Idee und sagen, aha, hier, hier, Packet-Loss, Packet-Loss. Das ist
kein Packet-Loss, Leute. Ich meine, es kann ja schlicht und ergreifend auch kein Packet-Loss so
wirklich sein, wenn der nächste Hop dann auf einmal funktioniert. Klar könnte man sagen,
hier gab es einmal Packet-Loss, beim nächsten Paket ging es dann wieder. Das ist aber Schwachsinn.
Das ist nicht das. Guck mal, das Paket kommt ja angeblich auch nie an. Aber witzigerweise,
wenn, ups, was habe ich jetzt gemacht? Aber wenn ich, alter, ich habe zu viel Copy-Pasted. Aber
wenn ich AliExpress pinge, dann funktioniert das Ganze. Wenn auch mit einem ziemlich, okay,
das ist erstaunlich schnell. Also, man sieht schon irgendwie, das kann nicht so wirklich
Packet-Loss sein an der Stelle. Und viele Leute gucken sich das dann an und denken sich,
oh nein, mong ks, ich habe ja ganz schlechtes Internet, so viel Packet-Loss und so viel Geld
verloren und eieiei, ganz schlimm. Das ist aber überhaupt nicht der Fall. Was man hier wirklich
sieht, ist, welcher Zwischenschritt ICMP-Error-Packages verschickt, wenn das defaultmäßig,
ich gehe mal davon aus, dass es standardmäßig noch auf ICMP, dass es standardmäßig noch die
ICMP-Variante benutzt, für sowas Route festzustellen. Ne, was du hier siehst ist,
welche ICMP, also welche Knoten ICMP-Packages oder Sachen antworten, Fehler zurückschicken. Weil
das funktioniert folgendermaßen, so eine Trace-Route. Es wird ein Paket-Loss geschickt,
gibt es dann eine andere. Ja, du kannst auch irgendwelches, irgendwelches TCP-basiertes
machen, auch mit Time-to-Live und sowas, das geht irgendwie. Aber im Prinzip funktioniert es
relativ easy. Es wird ein Paket-Loss geschickt mit einer Time-to-Live von 1. So. Time-to-Live
von 1 bedeutet, also es wird immer ein Paket-Loss geschickt hier zu diesem Ziel. Time-to-Live von 1.
Time-to-Live ist ein Feld, ist ein Header-Feld. Fragt mich jetzt bitte nicht genau, ich glaube
im IP-Header, glaube ich, TTL, bin ich mir aus dem Kopf nicht so. Wahrscheinlich, IP-Header gibt
den größten Sinn. Du hast im Header ein Time-to-Live-Feld. Und was passiert ist, jedes Mal,
wenn dieses Paket von einem Router weitergeschickt wird, wird die Time-to-Live 1 abgezogen. Und wenn
die Time-to-Live bei 0 angekommen ist, schickt der Router, also das Paket wird dann verworfen,
Time-to-Live 0. Warum, Chat, wer ist high IQ, wer weiß, warum man eine Time-to-Live-Setting
überhaupt hat? Woran könnte das liegen? Für alle, die es nicht wissen, können sich das
Emote angucken. Also eines der Gründe, warum es sinnvoll ist, eine Time-to-Live in einem Paket
haben. Schleifen, richtig, genau. Dass, falls aus irgendwelchen Gründen im Kreis geroutet wird,
dass die Pakete irgendwann weggeschmissen werden, falls es wirklich mal Koggerskreise gibt. So,
die Time-to-Live wird runtergezählt und der Router, der die Time-to-Live auf 0 runterzählt,
der verwirft das Paket, aber schickt eine Error-Message zurück an den Absender,
irgendeine ICMP-Error-Message. Irgendeine ICMP-Error-Message. Ich weiß, ich habe keine
Ahnung, ehrlich gesagt, welche genau. Aber du bekommst, Destination Unreachable oder so,
nee, ach, keine Ahnung. Du bekommst zumindest ein Fehlerpaket zurückgeschickt,
dass dein Paket verworfen wurde. So, und das ist dann der Fall hier, wo man sieht, aha,
hier wurde mein Paket verworfen und da gibt es natürlich ein paar Informationen zwischendurch,
weil normalerweise bekomme ich ja gar nicht mit, wie die Zwischenhops heißen. Also ich route ja
nicht explizit von da nach da, von da nach da, von da nach da. Ich sage ja nur, ich will hierhin,
an die IP-Adresse von AliExpress. Damit ich jetzt die Zwischenschritte rausbekomme,
muss ich mir die IP angucken, welcher Router hat mir die Error-Message geschickt. Also der
Router zählt die TimeToLive auf 0 runter und schickt dir eine Error-Message zurück und in
der Error-Message steht dann die Absender-IP des Routers drin, der die Error-Message generiert
hat. Also das hier ist ein Paket TimeToLive 1. Mein Router verwirft das Ganze, schickt mir eine
Error-Message zurück und ich sehe, das ist der Router. TimeToLive von 2, TimeToLive von 3,
TimeToLive von 4, TimeToLive von... und so weiter. So. Und ich schicke mir das alles zurück. So.
Und was das hier jetzt bedeutet, wenn hier nichts zurückkommt, heißt nicht, dass es diesen
Zwischenhop nicht gibt, sondern das bedeutet einfach nur, dass dieser Zwischenhop, das dürfte
wahrscheinlich der Unity-Media so... der Eingangsrouter von Unity-Media, also der erste
Unity-Media-Hop an der Stelle, der antwortet schlicht und ergreifend mit keinem Fehler,
wenn er das Paket verwirft. Der verwirft das Paket, schickt mir aber keine Fehler-Meldung
zurück. Das ist kein Packet-Loss. Das ist einfach nur so konfiguriert, dass dieser Eintrag
hier, also dass dieser Router an der Stelle keine Fehler-Meldung zurückliefert, wenn
er ein Paket verwirft. Das ist nicht gleich Packet-Loss. Das ist eine Konfigurationssache
des jeweiligen Routers. Und wie man hier sieht, alle anderen danach machen das auch so. Und
nachdem man keine Antwort jemals wieder bekommt, weiß man auch nicht, wie viele dazwischen
liegen, weil ja AliExpress, der letzte Router, das anscheinend auch nicht macht. Also, easy.
Okay, wir können das theoretisch, glaube ich, sogar noch hochstellen, dass wir dann
vielleicht doch irgendwann mal eine Antwort kriegen. Aber das ist der Sinn, wie... das
ist der Hintergrund und der Sinn von sowas wie Traceroute. Das dient nicht dazu, Packet-Loss
irgendwie aufzudecken. Das dient dazu, dass man so grob eine Ahnung hat, wo seine Pakete
rumgeroutet werden. Das kann natürlich sinnvoll sein, um rauszubekommen, ob man zum Koreanischen
MMO-Server eine schlechte Route nimmt. Ja, wie gesagt, erst nach New York, dann rüber
nach Russland, dann runter nach China und dann nach Korea. Das könnte man daran, wenn
du auf der Strecke Router hast, die Antworten mit Error-Messages, könnte man das halbwegs
nachvollziehen. Aber das bedeutet nicht Packet-Loss. So, das muss man an der Stelle nochmal sagen.
Das behaupten sie nicht in dem Video. Also, ich erzähle das jetzt hier nicht, weil sie
das in dem Video gesagt hätten, sondern nur, weil viele Leute denken, dass das damit was
zu tun hat. Hat aber nichts damit zu tun. Ja. Und es gibt noch einen zweiten Grund für
Packet-Loss. Der wird auch oftmals missverstanden, wobei der bei Spielen jetzt weniger, weniger
auftritt. Man kann auch schlicht und ergreifend mehr Daten verschicken, als auf dem Weg irgendwo
durchpassen. Das ist dann kein Packet-Loss in Form von Kabel ist kaputt oder sowas in
der Richtung. Oder irgendwas anderes ist furchtbar kaputt. Nein. Irgendwo auf dem Weg ist schlicht
und ergreifend die Bandbreite zu gering, dass Pakete getroppt werden müssen. Das kann man
ganz einfach lokal demonstrieren. Das mache ich jetzt nicht im Stream, ich erzähle euch
das bloß, weil ich keinen Server, mit dem ich das hier ausprobieren könnte. Das kann
man ganz einfach lokal demonstrieren. Man macht beispielsweise mal ein iPerf oder sowas
auf, bei sich auf dem Raspberry Pi oder sonst wo und schickt dann mal UDP-Messages. Also
man sagt iPerf, keine Ahnung, man hat einen 1 Gigabit-Netzwerkport und man sagt iPerf,
generiere mal 2 Gigabit die Sekunde an Traffic und versucht es rüber zu schicken. Dann werdet
ihr sehen, ihr habt ungefähr 50% Packet-Loss. Wahrscheinlich sind es realistisch betrachtet
eher sogar 60%. Warum habt ihr 60% Packet-Loss? Naja, weil ihr schlicht und ergreifend viel
mehr schickt als durchpasst. Was soll man sonst haben als Packet-Lost? Wo sollen die
hin, die Dinger, ja? Okay, auf geht's. Weiter.
Ein Game-Server am Weg verschwinden liegt übrigens so gut wie nie am Spiel, beziehungsweise
an deren Game-Server, sondern in 99% der Fälle am Weg davor.
Ja, aber nicht bei euch in der Wohnung, meistens zumindest. Das ist jetzt ein bisschen blöd
dargestellt, weil das irgendwie so ein Kabel ist, was die Leute bei sich daheim haben.
Es liegt in der Regel nicht bei euch am Kabel oder bei euch daheim. Natürlich, es kann
immer sein, es kann sein, dass eure Fritzbox bald den Abgang macht, aber das äußert sich
meistens anders. Es kann sein, dass ihr irgendwelche ultra alten, kaputten Kabel habt. Das lässt
sich aber meistens relativ schnell ausschließen oder miesen WLAN-Empfang und wer über WLAN
spielt, hat eh die Kontrolle über sein Leben verloren. Aber das Problem lässt sich ja
meistens relativ einfach ausschließen, ja? Man stöpselt sich möglichst direkt mit einem
Kabel, was halt funktioniert, an seine Fritzbox an und guckt, ob das immer noch so ist. Und
wenn das dann weg ist, okay, mag es an irgendeiner Verkabelung liegen oder am WLAN oder sonst
was, aber in der Regel liegt es nicht bei euch in den eigenen vier Wänden. Irgendwo
auf dem Weg dazwischen. Ich meine, je nachdem, wie weit das Server weg ist, kann da schon
ein bisschen was passieren. Und außerdem, wenn ihr so krasse Netzwerkprobleme habt,
dass das schon bei Spielen auffällt. Ich meine, Spiele haben wirklich keine allzu hohen
Bandbreitenanforderungen. Dann kopiert mal was übers Netzwerk auf irgendein NAS oder
so. Dann habt ihr, wenn ihr so ein beschissenes Kabel habt, dann habt ihr wahrscheinlich von
eurem Gigabit im Endeffekt beim Transfer von einer Datei noch, keine Ahnung, 150 MBit übrig
oder sowas. Also das fällt dann schon auf. Aber ansonsten wird es höchstwahrscheinlich
nicht bei euch in den eigenen vier Wänden liegen. So, okay, weiter.
Euer LAN-Kabel kann einen Schnitt haben. Das macht auch meistens nix. Also ganz ehrlich,
das juckt, also das da, also das da juckt ein Netzwerkkabel in der Regel mal gar nix.
Natürlich sollte man Netzwerkkabel nicht krass abknicken und mehrfach hin und her links
knick rechts, links knick rechts. Nee, das ist klar. Da drin sind auch nur Kupferdrähtchen.
Die können auch kaputt gehen. Aber das macht dem Netzwerkkabel eigentlich nicht wirklich
viel aus. Okay, bei Glasfaserkabeln sollte man das natürlich nicht machen. Dann kriegt
es relativ schnell kaputt.
Ankabel kann einen Schnitt haben. Wenn ihr wie Plebs im WLAN zockt, dann ist das immer
ein Doppel. Ja, das ist eine bescheuerte Idee, WLAN. Oder euer Internetprovider wählt so
eine schlechte Route, dass es daran liegt. Aber der Internetprovider wählt die Route
gar nicht. Der Internetprovider ist nur dafür zuständig, bis es bei ihm aus dem Netzwerk
rausgeht. Natürlich kann ein Internetprovider das steuern, wo es das weiter schickt. Aber
wenn danach Mist passiert, kann der Provider nicht viel machen dagegen.
Ihr könnt es ganz woanders rausschicken und hoffen, dass es dann einen anderen Weg
nimmt. Ja, ein bisschen Einfluss hat der Internetprovider schon drauf. Aber es ist nicht so, dass euer
Internetprovider zuständig wäre für die komplette Route von euch zum Ziel.
Je länger die Lieferkette, desto mehr geht am Weg verloren. Wenn euer Internetprovider
komplett lost ist, was durchaus mal vorkommen kann, dann gibt es...
Oder wenn es Vodafone ist zum Beispiel, die oftmals in ihrem eigenen Netz genug Probleme
haben.
... ist auch noch eine Lösung, eure Packet-Lost-Probleme easy in den Griff zu bekommen. Passend zum
Thema haben wir uns nämlich für dieses Video den Partner NordVPN geholt, weil man damit
sein Routing teilweise selbst besser lösen kann als der...
Das ist nicht gelogen, das stimmt. Die Chancen, dass es was bringt in dem Fall, würde ich
sagen, ist recht gering. Aber ich meine, das ist nicht falsch, ja?
... der eigene Internetprovider. Der Ping ist dann natürlich auch andere Vorteile, wie
dass ihr Online-Inhalte ansehen könnt, die eigentlich in eurem Land nicht verfügbar
sind, was definitiv...
Ja, was für mich der einzige wirklich sinnige Grund für einen VPN übrigens ist.
... ein Major Win ist bei zum Beispiel Netflix. Außerdem habt ihr generell einen verbesserten
Schutz eurer Daten, auch wenn ihr nicht mal mit einem VPN-Server verbunden seid.
Was? Was haben wir? Warum?
Auch wenn ihr nicht mal mit einem VPN-Server verbunden seid.
Warum?
Habt ihr generell einen verbesserten Schutz eurer Daten, auch wenn ihr nicht mal mit einem
VPN-Server verbunden seid.
Inwiefern? Ich meine, es ist ja nicht nur, dass meine Daten besser geschützt werden
mit einem VPN. Also insofern... Also das ist ja auch so ein Trugschluss, dass die Daten
besser geschützt werden mit einem VPN. Also der einzige Weg, der vielleicht besser geschützt
ist, ist die Strecke, die eure Daten nehmen vom Eingang des VPNs bis zum Ausgang des VPNs.
Dafür handelt ihr euch die Probleme ein mit, dass euer VPN-Anbieter vielleicht komische
Dinger macht. Das heißt, ihr müsst eurem VPN-Anbieter trauen. Wer weiß, was die machen.
Also das Problem machst du sonst nicht.
Und das nächste ist, dass jetzt die Daten nennenswert irgendwie auf dem Weg datenschutzrechtlich
bedenklich irgendwie verarbeitet oder gespeichert werden.
Ich meine, es sei denn, es ist irgendwie der Geheimdienst am Start oder so.
Der kann sich aber auch einfach vorm da irgendwie anderweitig...
Wenn ihr wirklich Angst vorm Geheimdienst habt, dann...
Dann habt ihr wahrscheinlich auch andere Probleme, weil ihr komische Dinger macht.
Aber sagen wir mal, ihr habt Angst vorm Geheimdienst.
Dann könnt ihr die Sachen natürlich über den VPN schicken.
Aber spätestens beim Ausgang des VPNs können die Dinger wieder abgegriffen werden.
Also da hast du eh keine Chancen.
Das heißt, die Chance, dass eure Daten irgendwie aufgezeichnet und verarbeitet werden
und für irgendwelche, was weiß ich, sagen wir mal, Analysen und Werbeanrufe benutzt werden,
ist relativ gering, dass das auf dem Weg, auf dem reinen Netzwerkrouting-Weg unterwegs passiert.
Wo das eher passiert ist, den Service, den ihr eigentlich benutzen wollt,
und der kann ja eure Daten nach wie vor lesen, ob VPN oder nicht.
Ich mein, ihr geht rein in euer VPN und irgendwann muss das auch mal wieder raus.
Und in dem Moment, wo das VPN verlässt, weil ich mein, das VPN, das ist ja auch mal irgendwann...
Also euer VPN terminiert ja nicht direkt auf dem Webserver von Google,
sondern irgendwo bei irgendeinem Exit-Ding, Router-Exit von diesem VPN-Provider.
Spätestens da ist vorbei mit VPN.
Und der Anbieter bekommt eure Daten so, wie wenn ihr normal drauf zugreifen würdet.
Und wenn der jetzt der Meinung ist, die Daten speichern zu müssen und verkaufen zu müssen,
dann kann das trotzdem passieren.
Und das ist auch viel eher das, wo irgendwelche Daten geleakt werden.
Nämlich von den Anbietern, nicht irgendwie unterwegs oder so.
Also sprich, der einzige Fall, wo das tatsächlich sinnvoll sein könnte,
wäre sowas wie, man sitzt im Krankenhaus oder in einem Café und die haben ein offenes WLAN.
Also offenbar nicht ein unverschlüsseltes WLAN.
Oder noch ein WEP-verschlüsseltes WLAN oder sowas.
Also wenn man sich da netzwerktechnisch nicht ganz...
Dann mag das vielleicht Sinn machen.
Wobei man da halt auch sagen muss, wenn man Seiten besucht, die über harte TPS gehen,
also die TLS-verschlüsselt sind, was die meisten Seiten sind, dann ist das auch kein Problem.
Aber dann kann man sich tatsächlich überlegen,
dann muss es aber auch nicht wirklich NordVPN sein für diesen Zweck,
sondern man kann auch ein VPN aufbauen, beispielsweise zu einer eigenen Kiste
oder zu seiner Fritzbox daheim mit irgendeiner App und das geht auch.
Dann brauchst du NordVPN.
Für die eigentlichen Gefahren, dass Anbieter eure Daten leaken,
da kann NordVPN überhaupt nichts dagegen machen.
Weil ihr müsst ja den Service benutzen, den ihr benutzen wollt.
Also mal angenommen, ihr benutzt irgendeinen Service, um eure Termine zu managen.
Irgendeinen Online-Kalender.
Dann müssen eure Daten ja zu diesem Anbieter.
Und wenn dieser Anbieter mal irgendwie zufälligerweise seine Datenbank im Darknet findet,
dann sind eure ganzen Daten geleakt.
Unabhängig davon, ob ihr diese Daten zum Anbieter über NordVPN geschickt habt
oder ob das ganz normal über das Internet geroutet zum Anbieter.
Das ist nicht wurscht.
NordVPN kann auch wenn das immer so, oder generell nicht nur NordVPN,
VPNs an sich können, auch wenn das immer so als super krasse Security-Sache verkauft wird,
erstaunlich wenig mehr Sicherheit bieten.
Also es wird als viel mehr verkauft, als es letztendlich ist.
Also der Hauptanwendungsfall, den ich in einem VPN sehe,
ist tatsächlich, man möchte auf irgendwelche geoblockten Sachen oder region-lockten Sachen zugreifen.
Also ich möchte jetzt beispielsweise auf irgendwelchen koreanischen Servern spielen,
die nur Leute aus Asien drauflassen,
oder ich will Netflix gucken in einem anderen Land,
ich will Filme gucken, die in Deutschland noch nicht released sind
und das über irgendeinen Video-Watch-Service in Indien, was auch immer.
Irgendwas, ja?
Dafür ist VPN sinnvoll.
VPN kann auch sinnvoll sein, wenn man halblegale Sachen macht,
weil BitTorrent an sich und P2P-Sharing ist ja an sich nicht illegal.
Wir laden selbstverständlich alle nur, ich muss ehrlich sagen, ich habe es ewig nicht mehr benutzt.
Ich habe noch nicht mal meinen BitTorrent-Client installiert.
Aber wenn überhaupt, laden wir uns natürlich alle nur Linux-ISOs runter.
Usenet und so, auch nur alles Linux-ISOs.
Für sowas kann das sinnvoll sein, ein VPN zu benutzen.
Man handelt sich mit einem VPN aber immer jemand ein, und das muss einem klar sein,
man handelt sich immer jemand ein, der dazwischen sitzt.
Der potenziell selber alles, was ihr übertragt, sofern es nicht nochmal verschlüsselt ist,
beispielsweise, weil ihr über TLS geht, über HTTPS geht,
kann euer VPN-Anbieter alles mitlesen, was ihr verschickt.
Ob er das macht, ob er daraus irgendwie Kapital schlägt,
ob er euch, was auch immer.
Das können wir nicht wissen, das ist offen.
Das ist quasi man-in-the-middle-as-a-service, wenn man das so will.
Ja, genau.
Natürlich ist es dann auch wiederum nicht ganz so einfach.
Ich meine, je nachdem, was das für eine VPN-Technologie verwendet,
und wie die Zertifikatsgenerierung alles läuft,
eventuell ist es auch nicht möglich, für den VPN-Anbieter das Ganze mitzulesen.
Ihr wisst ja halt nicht genau, was unter der Haube passiert.
Das heißt, es kommt immer wieder zum gleichen Punkt,
ihr müsst diesem VPN-Anbieter komplett trauen, mit allem, was ihr da drüber übertragt.
Und da weiß ich halt nicht, ob man jetzt im NordVPN da wirklich mehr trauen kann,
als irgendwelchen etablierten Service-Providern und Carrier-Netzwerken
und was es nicht alles gibt, da was komisches zu machen.
Da muss man sich überlegen.
Also es hat seine Daseinsberechtigung VPN,
aber diese Sache mit, es macht alles so viel wahnsinnig sicherer,
ist viel Einbildung dabei.
Also es macht wenig sicherer.
Es macht erstaunlich wenig für die Sicherheit, das zu benutzen,
im Vergleich zu dem, wie es immer angepriesen wird.
So, weiter.
Geht auf nordvpn.com slash hit oder shit und nehmt euch zwei Jahre NordVPN
und ihr bekommt vier Monate extra.
Das Ganze könnt ihr dann auf bis zu sechs verschiedenen Geräten benutzen.
Ist auch alles absolut risikofrei, falls es euch nämlich nicht gefällt,
bekommt ihr bis zu 30 Tage euer Geld.
Da bin ich immer gespannt, wie sehr das sich da wirklich dran gehalten wird,
weil sagen, dass man das macht, ist das eine.
Und das dann wirklich einlösen, keine Ahnung.
Ja klar, Chad, natürlich.
Wie gesagt, für solche Sachen, wir haben ja gerade angesprochen,
warum man vielleicht seine IP verschleiern will.
Da macht das durchaus Sinn.
Anonymer ist man dadurch auch nicht.
Also anonymer in der Form, dass man das euch nicht zuordnen kann.
Weil ich meine, ihr habt ja immer, ihr habt ja zwar eine andere IP,
aber ihr habt immer noch die gleiche IP, immer längere Zeit die gleiche Exit-IP.
Und die Anbieter selbst erkennen euch ja nicht anhand der IP primär,
sondern entweder ihr loggt euch ein, dann ist vollkommen egal,
von welcher IP ihr euch einloggt, die wissen, dass ihr das seid.
Oder aber im Zeitalter von Browser, Fingerprinting und allen möglichen Geschichten
findet man auch recht gut raus, wenn einen User besuchen von unterschiedlichen IPs,
ob es die gleichen User sind.
Und da gibt es echt die abgedrehtesten Sachen.
Eines der coolsten Sachen, die ich mal gelesen habe in den letzten Jahren,
wie man User identifizieren kann oder zumindest sehr stark eingrenzen kann
nachdem Browser ja mittlerweile Schutzmechanismen eingebaut haben,
dass man nicht mehr so einfach Schriftarten auslesen kann und sowas, die installiert sind,
war folgendes, das kann ich euch jetzt mal kurz zwei Minuten erzählen.
Also wenn ein Anbieter feststellen will, welche User die Seite regelmäßig besuchen
und das ohne Account und ohne sich auf die IP zu verlassen
und ohne auf den User Agent, da gibt es verschiedene Varianten.
Und eine Sache, die ich letztens gelesen habe, die war wirklich sehr high IQ und zwar korrekt.
Was die machen ist, die rendern auf ihrer Webseite offscreen oder ganz klein
oder nahezu unsichtbar, legen die ein Canvas Element an.
Canvas Element ist auf HTML Seiten sowas, wo Webseiten eigene Sachen drin malen können.
Also sprich, das benutzt man zum Beispiel.
Das hier ist zum Beispiel ein Canvas Element.
Das ganze Ding hier ist ein Canvas.
Also das hier höchstwahrscheinlich auch drumherum.
Und was man dann machen kann ist, die rendern Emojis in dieses Canvas.
Und mal gucken, wer von euch im Chat heute Massive Highest IQ ist.
Was ist das Erste, was euch schon mal ein Emoji verrät über den Anwender?
Ohne, dass du ins Detail gehen musst.
Was verrät euch erstmal ein Emoji relativ sicher über den Anwender?
Was er für ein Betriebssystem benutzt?
Ja. Ja. Oder sagen wir mal, vielleicht auch ein bisschen was über den Browser.
Aber es verrät euch in der Regel erstmal sowas wie, was der höchstwahrscheinlich für eine Plattform benutzt.
Weil Emojis sehen überall unterschiedlich aus.
Also man kann an Emojis relativ einfach erkennen, ob jemand Windows 10, Windows 11,
gut Firefox hat was eigenes, Android oder iOS benutzt.
Die sehen alle ein bisschen anders aus.
Wenn jemand den Twitter Emoji-Font verwendet, ist höchstwahrscheinlich, dass der Linux benutzt.
Also man erkennt anhand der Optik, wie ein Emoji aussieht, schon relativ easy,
was derjenige für den OS benutzt.
Eventuell, wenn es die Firefox Emojis sind, auch was er für einen Browser benutzt.
Das ist ja schon mal nicht schlecht.
So. Und jetzt geht das Ganze noch, man kann auch vielleicht ganz outdated Sachen erkennen,
ob die Emojis nur schwarz-weiß gemalt werden oder sowas.
So. Aber, weil es mich interessiert und ich denke nicht verkehrt ist,
über sowas ein bisschen Bescheid zu wissen.
Deswegen erzähle ich es euch jetzt ja, Chatge.
Ich meine, wir müssen doch hier immerhin zumindest ein bisschen
Highest-IQ-Chat auf Twitch gerecht werden.
Und ihr wisst ja, dass jeder Prime-Sub den GesamteIQ des Chats steigert.
Das heißt, wenn ihr noch einen Prime-Sub übrig habt, ich freue mich natürlich über jeden Sub.
Aber ich freue mich auch, dass ihr da seid.
Also auch, wenn ihr keinen Prime-Sub habt, ist schön, dass ihr da seid.
Aber ich muss ab und zu mal ein bisschen Sellout machen, so läuft das Twitch-Game einfach.
Und selbst, und jetzt mal ernsthaft, selbst wenn ihr einen Prime-Sub habt und denkt,
ey, keine Ahnung, dem Max will ich den Prime-Sub nicht geben,
dann gebt den Prime-Subs zumindest irgendjemand anderem auf Twitch.
Weil es ist Blödsinn, nicht Prime zu haben und den Prime-Sub nicht rauszuhauen.
Das ist quasi geschenkte 4€ für Beso aus dem Monat.
Nein, gut, eigentlich kriegt der... also 2€.
Gestern wieder für... Dankeschön für den Sub.
Was wollte ich erzählen? Genau, Browser Fingerprinting.
So, als erstes mit Emojis und das Ganze wird noch viel abgedrehter.
Yuzo, Poggersubscription.
Da kann ich nur sagen...
Sunny auch wieder am Start.
Und hast du die Ausbildungsstelle gekriegt?
So manche Sachen merke ich mir irgendwie im Hinterkopf.
So, aber nochmal zurück zu Browser Fingerprinting.
Also jetzt haben wir schon mal relativ easy rausgekriegt mit Emojis,
was für eine Plattform der jeweilige Anwender benutzt.
Und jetzt wird es abgedreht.
Und man kann jetzt mit...
mehr oder weniger detaillierten...
mit mehr oder weniger detaillierten Analysen
kann man jetzt auch rausfinden, ungefähr
was für eine Hardware
der jeweilige Client benutzt.
Und da gibt es Tabellen und da gibt es Tests,
die haben mit dem Rendern von Emojis
oder generell mit dem Rendern
in einem Canvas-Element im Browser
haben die gemessen,
dass du relativ gut beispielsweise sagen kannst,
an der Geschwindigkeit, wie gerendert wird
und ähm...
an irgendwelchen Timings, wie gerendert wird
und alles mögliche
kannst du relativ gut bestimmen,
was für eine Grafikkarte
der jeweilige User benutzt.
Und noch viel mehr.
Also du kannst...
Es gibt wirklich sehr viele Tricks,
dass du im Browser feststellen kannst.
Zum Beispiel, welchen Browser benutzt
der Anwender? Welches Betriebssystem
benutzt der Anwender? Welche Hardware
hat der Anwender eingebaut?
Und das alles zusammengefasst.
Ja, sagen wir mal, du bekommst so
sieben, acht verschiedene Merkmale raus.
Und die in Kombination
sind dann, wenn nicht
hundertprozentig eindeutig,
aber relativ eindeutig.
Überlegt euch mal, ihr habt
oder vielleicht acht, neun verschiedene Merkmale,
die auch unterschiedlich sein können.
Nicht nur binary.
Und da gibt es
sehr viele Kombinationsmöglichkeiten.
Und wenn ihr dann jemanden findet,
der zufälligerweise von einer anderen IP kommt,
aber exakt die gleichen Merkmale aufweist,
da könnt ihr euch
relativ sicher sein,
dass das wahrscheinlich der gleiche User ist.
Also es geht, man kriegt das raus.
Und das ist
auch eher das, worauf sich Seiten verlassen,
die wirklich User
tracken wollen.
Und die verlassen sich nicht auf die Absender-IP.
Oder nicht nur auf die Absender-IP.
Twitter-Emojis, doch unter Linux sind
Twitter-Emojis sehr beliebt. Guck hier, ich habe auch
Twitter-Emojis unter
Linux.
Tweemoji ist eigentlich,
wir müssen gerade mal kurz was gucken,
der Tweemoji-Fork
ist der,
wie hieß denn der Tweemoji-Fork?
Ich habe es vergessen.
Es gibt
nämlich den neuen Tweemoji-Fork.
Hat irgendjemand eine Ahnung?
Ja, das hier, da ist er doch.
Tweemoji-Fork.
Okay, Unicode 15 ist da immer noch nicht drin.
Es gibt nämlich den Tweemoji-Fork,
der auch die neuesten
Unicode-Emojis unterstützen wird.
Warum ist das notwendig?
Weil Twitter
alle, die an diesem Emoji-Font gearbeitet
haben, entlassen hat.
Dementsprechend gibt es keine Updates mehr
für Tweemoji.
Und wir haben kein Unicode 15.
Aber, ich meine, die haben
immer noch kein Goose-Emoji.
Ich weiß nicht, wie es da aussieht,
aber es sieht so aus, als hätten
die immer noch einige Emojis nicht drin.
Ist halt blöd, ne?
Wenn Twitter
die alle rausschmeißt.
Guck mal, zuletzt im Januar aktualisiert.
Tja, da wird es keine Updates
mehr so geben, ohne weiteres.
AdSupport, Unicode 19.
Gibt nicht mehr.
Also, das ist halt auch so ein Ding.
Ja, und damit kann man theoretisch
auch Sachen rausbekommen über
den User, wo wir gerade dabei sind.
Du hast einen Denkfehler.
Emojis werden auf dem Client gerendert. Ja, das ist ja gerade
das Ding. Das ist ja auch der
Grund, warum das funktioniert.
Ja, das ist richtig.
Aber das ist kein Denkfehler, das ist Voraussetzung
dafür, dass das überhaupt funktioniert, was ich gerade beschrieben hab.
Der Client
muss das rendern. Du willst ja auch was über den Client
rauskriegen und nicht über deinen Server.
Monopol, Dankeschön für den Sub.
ISD, Pogger Subscription, jetzt geht's ja nicht los hier.
Du hast die Ausbildungsstelle
gekriegt. Exzellent, exzellent.
Das ist, ja,
eigentlich auch.
Jetzt gibt's sogar
mehr Geld, ja dann. Das ist ja
die beste Kombination.
Es gibt noch ein paar andere Möglichkeiten, aber Canvas ist glaube ich
das beliebteste. Ja gut,
JavaScript komplett blocken ist halt
nicht praktikabel, weil kaum eine Webseite noch
funktioniert ohne JavaScript.
Patio Heli wieder am Start.
29 Monate, Dankeschön für den Sub.
Exzellent, Subscription.
Magst ans Trinken erinnern?
Yo.
So, jetzt, ich weiß, ich hab mich
jetzt sehr lange sidetracked lassen von diesem Video
hier, aber ich hoffe es hat euch
trotzdem interessiert. Ich denk zwar für die einen oder anderen
was Spannendes dabei.
Exzellent, weiter geht's.
Oh, oh, oh, jetzt hier.
Zendrix, 5 Subscription.
Eine gute Möglichkeit, eine gute
Sammlung. Ja, es gibt einige
Seiten, die sowas haben, aber die kann ich jetzt hier nicht im Stream
aufmachen, weil die dann auch solche Sachen
leaken wie
IP und alle möglichen Dinger, die ich
vielleicht jetzt nicht so unbedingt public
ja.
Ja, danke für die Subs. Wir hatten das
Glück gehabt und wer hat gedodged?
Lootbeutel. Ja, der hat
schon mal, der sackt alles ein, oder?
Der Cartman, Nuxxer,
Bex, ach
guck mal, hat er Glück gehabt, der ist erst seit ein paar Tagen
hier im Stream und gleich schon, gleich schon
den Sub gecatcht.
Phaseron, der ist öfters da, den kenne ich
vom Namen her.
Der stellt's hier öfters rum.
Und die Gartenkralle ist auch am Start.
Danke für den Sub.
Exzellent, exzellent.
Okay, gucken wir das Video mal weiter.
Next.
Jetzt aber mit Lag zu tun.
Wenn am Weg zu euch zurück Pakete fehlen,
beziehungsweise Informationen fehlen, weil
sie nie beim Server ankamen, dann kann
euer Spiel das bis zu einem gewissen Grad
ausgleichen. Und zwar mit dem sogenannten
Buffer. Bevor nämlich die
erhaltenen Infos vom Server in ein
tatsächliches Bild umgewandelt werden,
wartet man erstmal bis ein paar Pakete
da sind. Naja, die Informationen vom...
Wie gesagt, ich hab schon angehört, ich werde meckern.
Die Informationen vom Server werden natürlich nie
direkt in ein Bild
umgewandelt.
Plötzlich. Ist ja nicht so, als würde der Server euer Game
rendern. Aber wir wissen, was gemeint ist.
Klarerweise erhöht das den Lag, weil
ihr Informationen nicht gleich gezeigt bekommt,
die eigentlich schon verfügbar sind.
Der Sinn des Ganzen ist aber, dass euer Game checken kann,
ob zwischen den Paketen irgendwo etwas
fehlt. Und wenn das der Fall ist, dann
wird es automatisch gefüllt, sodass euer Game
nicht einfach wild ruckelt, sondern smooth
weiterläuft. Obwohl irgendwo ein
Paket oder eine Info fehlt.
Manche Games lassen das Spiel einfach verkleinern,
was natürlich auch automatisch
euren Lag verkleinert.
In Counter-Strike zum Beispiel nennt sich das ganze
Simulation Rate oder Interp.
Damit könnt ihr die Größe eures Buffers
einstellen und euren Lag zwar verkleinern,
aber mit dem Risiko, dass euer Game
irgendwie...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
immer noch, Master Server muss letztendlich entscheiden was Sache ist, aber auch mit Client-Side-Hit-Detection immer mehr, immer präsenter.
Was dann schon das Spiel auch für Leute mit bisschen höherer Latenz besser spielbar gemacht hat,
aber es noch mehr dazu geführt hat, zumindest wenn das übertrieben wurde, wie da noch Sachen akzeptiert wurden,
für teilweise, ich bin schon um zwei Ecken und auf einmal werde ich zurückgeportet und gekillt.
Es gab ja zwischenzeitlich, wenn es übertrieben wurde, sogar mal Spiele, da hattest du einen Vorteil, wenn du mit 400er Ping spielst und sowas,
das sollte dann nun wirklich nett sein.
Wenn ich also auf wen schieße, dann soll direkt zu sehen sein, was passiert.
Also es gab damals zu Xbox-Zeiten tatsächlich reale physische Lag-Switches.
Dass das überhaupt funktioniert, ist halt schon bescheuert.
Das funktioniert prinzipiell nur mit ein paar UDP-Packages, aber selbst das könnte man easy verhindern.
Du könntest zum Beispiel irgendwelche Server-Messages einbauen, auf die dein Client replyen muss.
Und wenn er so und so viele Replies verpasst, dann wird er nicht mal beachtet.
Also man kann da durchaus Sicherheitsmechanismen, aber das hatte Call of Duty halt damals,
gerade als es noch diese Xbox-hosted-Variante hatte, konntest du es halt komplett vergessen.
Das waren Zeiten, da waren physische Lag-Switches tatsächlich ein Ding.
Das nennt sich Client-Side Authoritative.
Client-Side sagt es uns schon.
Hier ist relevant, was der Spieler selbst sieht.
Und zwar bevor der Server überhaupt Infos hat.
Das führt zu ganz komischen Situationen, wie zum Beispiel, dass man weit hinter der Deckung noch stirbt.
Das passiert nämlich, wenn dich wer abschießt, der selbst einen höheren Ping hat als du.
Ein Spieler mit einem höheren Ping spielt eigentlich mit alten Informationen.
Das heißt, du bist auf seinem Bildschirm noch deutlich weiter hinten zu sehen.
Je größer der Ping, desto weiter hinten sieht er dich noch.
Wenn ein Spiel Client-Side Authoritative erlaubt...
Trotzdem solltest du immer, wenn ihr Head-on-Head ballert, gewinnen.
Wenn es gescheit gemacht ist.
Ein Spieler mit hohem Ping dich trifft auf seinem Bildschirm.
Dann wird der Hit registriert.
Egal, wo du tatsächlich bist.
Damit das nicht zu heftig wird, haben einige Spiele hier ein Limit.
Ich glaube, Overwatch hat es, glaube ich, ab 100 oder 150 Millisekunden.
Das Video ist wirklich nicht schlecht gemacht.
Muss ich jetzt mal sagen. Wie gesagt, ich habe es schon angekündigt.
Ich werde ein bisschen meckern.
Das Video ist nicht schlecht gemacht.
Kann es nichts sagen.
Also, die haben sich wirklich Mühe gegeben, das so zu verpacken.
Ohne jetzt so übertriebenen Blödsinn zu erzählen, um es gar so krass zu vereinfachen.
Ist vollkommen in Ordnung.
Also, kann man sagen, es ist...
WoBlows approved.
Ich weiß, Ragman.
Deswegen habe ich ja gesagt, ich werde jetzt ein bisschen meckern.
Aber insgesamt ist das echt nicht schlecht gemacht.
Wirklich gut.
Bock.
Dann seht ihr den High-Ping-Spieler lange, bevor er euch sieht.
Ihr könnt den ersten Schuss abgeben, bevor ihr überhaupt am Bildschirm des Gegners erscheint.
In Valorant ist es zum Beispiel tatsächlich so, dass der Spieler mit dem besseren Ping den Kill macht.
Wenn beide gleichzeitig schießen.
Ja, finde ich aber auch irgendwo sinnig.
Klar, kannst du sehen, in Overwatch haben sie es auch ein bisschen gebuffert, alles.
Aber ich finde, es sollte irgendwie so sein.
Weil ganz im Ernst, die Leute sollen halt auch auf dem Server spielen, wo sie gescheite Connection zu haben.
Auch wenn wir hier im Bereich von 50 Millisekunden reden.
Also sage ich nichts dagegen.
Aber wenn er es teilweise auf 300 Millisekunden raucht, das kann es nicht sein.
Das fühlt sich scheiße an.
Schießen.
Der eigentlich korrekte Input des High-Ping-Spielers wird einfach durch den Ton...
Ich kann gerne mal ein Video machen, das noch tiefer geht.
Nee, kann ich nicht.
Weil, erstens, müsste ich mich dann selbst viel zu sehr in der Tiefe damit zu beschäftigen,
dann hätte ich auch keinen Mist erzählen.
Und zweitens, sind solche Videos enorm aufwendig.
Und da bin ich zu faul für, weil solche Videos auch kaum geguckt werden, witzigerweise.
Das ist halt so ein bisschen das Dilemma, was man auch mit Technik-Videos auf YouTube hat.
Wenn man wirklich gute, tiefgreifende Erklärvideos macht,
die werden oftmals im Verhältnis von Aufwand zu Leuten, die das gucken, viel weniger geschaut.
Natürlich könnte man jetzt sagen, ich mache das trotzdem, aber ich glaube, da bin ich zu faul für.
...gecancelt.
Manche Spiele machen das aber auch anders.
Neues Video, ich habe es schon hochgeladen.
Als nächstes habe ich einen Zusammenschnitt anfertigen lassen über den Half-Life-Speedrun, den wir geguckt haben.
Den werde ich als nächstes hochladen, geht 38 Minuten.
Und danach muss ich tatsächlich mal was über Battlefield 6 Season...
Battlefield 2042 Season...
Nein! Battlefield 2042 Season 5 und das Season 6 Ankündigung erzählen.
Meine Güte.
Input-Lag?
Ach nee.
Ich dachte, jetzt wird das sowas wie Tickrate oder sowas haben.
Ich dachte, jetzt kommt noch Input-Lag oder sowas mit dabei.
Weil dann wäre es echt abgedreht geworden, wenn jetzt noch sowas kommt wie Refresh-Rate vom Bildschirm.
Rendering, Maus-Input und so weiter.
Dann kannst du ja eine komplette Wissenschaft draus machen.
Ich muss mal kurz meine Lieberanlage einschalten.
60 Pakete pro Sekunde.
Und damit 16,66 Millisekunden zwischen jedem Paket als zusätzlicher Lag.
Das heißt, ihr bekommt nur alle 16,6 Millisekunden ein Paket geschickt.
Und die Zeit bis zum nächsten Paket ist zusätzlicher Lag.
Denn da passiert nichts Neues.
Wird die Tickrate weniger...
Ich bin wieder da.
Ah, wir sind immer noch bei Tickrate.
Aber da geht es eigentlich um wenige Millisekunden.
Viele meinen zum Beispiel, dass ein Upgrade von 64 Tick auf 128 Tick alles besser machen würde.
Und die haben zwar schon Recht.
Allerdings halt nur ein wenig Recht.
Naja, das kommt drauf an.
Es hat manchmal auch Auswirkungen darauf, wie das Spiel selbst Sachen interpretiert.
Also ich weiß nicht, ob es in CS immer noch so ist.
Aber ich weiß, dass es definitiv in CS mal so war.
Dass bestimmte Movement Tricks gar nicht möglich waren mit der normalen.
Ich hab mal ein Video geguckt von irgendeinem Pro, der das gezeigt hat.
Der hat gezeigt, dass manche Movement Tricks, irgendwelche Sprünge von irgendeinem Autodach auf irgendeine Mauer und sowas.
Dass die mit der normalen Matchmaking Tickrate gar nicht möglich sind oder nur sehr unreliable möglich sind.
Aber mit 128 Tickrate tatsächlich relativ konsistent ausgeführt werden können.
Also macht schon einen Unterschied.
Also es kommt ein bisschen darauf an, wie das Spiel sich im Endeffekt verhält.
Natürlich, auf den ersten Blick macht es jetzt nicht so einen krassen Unterschied.
Und ich würde auch sagen, je nach Game ist es auch nicht wirklich.
Also zum Beispiel, ob jetzt ein Battlefield mit 64 Tick oder mit 128 Tickrate läuft.
Naja, das ist wahrscheinlich nicht so der große Unterschied.
Battlefield ist ja auch was, wo es weniger jetzt dieses One-on-One auf den Kopf geklickt gibt.
Das ist wahrscheinlich nicht so das Ding.
Und man hat es bei Venice gesehen, dass es gab 128 Tickrate Surfer.
Die hatten aber Ultra-CPU Anforderungen wohl.
Es ist immer sinnvoll, so viel FPS zu haben wie möglich.
Also erstmal zumindest bis zu deiner Monitor-Refresh-Rate.
Aber selbst da drauf macht es noch Sinn.
Also eigentlich ist mehr FPS immer besser.
Und ansonsten FPS und Tickrate.
Gut, nachdem dein Monitor nicht gesunkt ist mit der Server-Tickrate.
Umso mehr FPS, umso besser.
Warum High-Refresh-Max-FPS?
Naja, das ist ein ähnlicher Grund.
Das ist ein ähnlicher Grund, wie das es bei 60-Hertz-Monitoren auch sinnvoll macht.
Die es sinnvoll ist, durchaus die Spiele in höherer Frame-Rate zu rendern.
Also erstens ist das ja nicht gesunkt aneinander.
Nur weil ein Server mit 60 Mal die Sekunde refresht.
Und euer Game 60 Mal die Sekunde das Bild neu aufbaut.
Ist das ja nicht gesunkt.
Wie soll das auch gehen?
Zwischen 32 und 64 Spieler.
Und umso schneller euer lokaler FPS und Refresh-Rate vom Monitor ist.
Je früher seht ihr natürlich auch ein Update.
Weil es kann ja trotzdem sein, dass gerade bei euch der Refresh durch ist.
Und jetzt neue Informationen vom Server kommen.
Und dann müsst ihr auf den nächsten Refresh warten.
Unabhängig davon.
Wie gesagt, das ist ja nicht direkt gesunkt.
Und so ist es auch, wenn ihr euer Game schneller rendert, als euer Monitor anzeigen kann.
Wenn euer Game schneller rendert, als der Monitor anzeigen kann.
Dann ist euer Game-State quasi schon aktueller am Zeitpunkt dran.
Am echten Zeitpunkt dran.
Wenn der nächste Monitor-Refresh kommt.
Also das macht schon Sinn.
Das in der Regel mit Low-Graphics und so viel FPS wie möglich.
Das macht eigentlich fast immer Sinn.
Also gerade in Spielen, die Multiplayer sind, die ein bisschen Competitive sind.
Da würde ich auch sagen wie Battlefield.
Darunter zählen.
Mehr FPS ist in der Regel immer besser.
Pauschal kann man das eigentlich so sagen.
Kommt aufs Game an.
Dass wir also manchmal hinter der Deckung gekillt werden.
Oder unsere Shots, wo wir eigentlich drauf waren, nicht zählen.
Ist einfach notwendig.
Damit überhaupt online sinnvoll miteinander gespielt werden kann.
Die Verzögerungen sind teilweise Natur gegeben.
Wegen der Geschwindigkeit, in der Daten nun mal maximal von A nach B kommen.
Und teilweise künstlich.
Damit auch die Spieler Spaß haben können.
Die nicht zufällig direkt neben dem Game-Server sitzen.
Aber wir haben eine interessante Idee bekommen.
Durch eine neue Technologie, die momentan nur in Fighting Games verwendet wird.
Dort wird die Zukunft vorhergesagt, um Lag zu eliminieren.
Ja, wirklich.
Moment, ich dachte, das geht nur bei Google Stadia.
Negativ Latency.
Wie, das können andere jetzt auf einmal auch?
Das glaube ich nicht.
Aber solche Prediction Sachen.
Ich würde mal behaupten, dass Fighting Games.
Gut, in Fighting Games bietet es sich wahrscheinlich an.
Es ist ganz klar One-on-One.
Und das Moveset ist irgendwie begrenzt.
Und das, was passieren kann, ist begrenzt.
Also dieses Zukunft-Predikten, dass es in Fighting Games angewandt wird.
Wundert mich jetzt nicht.
Aber ich würde mal behaupten, das ist nicht das einzige.
Wo man zumindest so Sachen in der Richtung schon probiert.
Oder probiert hat.
Stellt euch mal vor, es gibt ein Delay auf eine Animation eines Schlags.
Wenn euer Gegner dann wirklich die ganze Animation erst verspätet sieht.
Wird das Ganze unmöglich zu spielen.
Aber was, wenn man einfach den Delay vorne von der Animation abschneidet.
Und sie mittendrin beginnen lässt.
Klingt komisch, sieht man aber im Fullspeed überhaupt nicht.
Dieses System nimmt außerdem vor den Inputs den nächsten wahrscheinlichen Schritt an.
Und zeigt ihm den Gegner.
Momentan nimmt das System einfach an, dass das, was man gerade macht.
Auch das nächste ist, was man macht.
Das heißt, wenn ich gerade stehe.
Nimmt das Game an, dass ich auch im nächsten Frame noch stehe.
Klingt sehr simpel.
Ist aber bei Fighting Games ein Game Changer.
Was wir jetzt in den Raum stellen.
Ist, dass mit der aktuellen Entwicklung von AI.
Das auch bei allen anderen Games möglich sein könnte.
Könnte eine AI sinnvoll?
Also den Zusammenhang würde ich jetzt erstmal nicht sehen, so richtig.
Und mit guter Trefferquote die nächsten Schritte der Spieler vorhersagen.
Könnten wir dann, auch wenn es im Hintergrund Lag gibt.
In optisch fürs menschliche...
Also, ich sehe den Zusammenhang zwischen AI da und...
Weniger AI, was wir uns jetzt in Form von Chat-GPT vorstellen.
Was ja immer um Sachen geht, die schon passiert sind.
So dieses Zukunftsvoraussagen.
Klar, ich meine, guckt euch mal an.
Wie Schachcomputer und Schachprogramme seit Jahrzehnten funktionieren.
Da wird versucht, die Zukunft vorauszusagen.
Also umso mehr die, ich glaube Zugtiefe nennt sich das dort.
Umso besser ist so ein Schachprogramm.
Ja, das ist theoretisch sicherlich auch in vielen anderen Games möglich.
Aber das muss ja immer noch on the fly für den aktuellen State.
Irgendwie berechnet werden.
Du wirst nie eine komplette Partie Battlefield komplett lösen können.
Also komplett lösen würde ja bedeuten.
Du hast den State, den eine Partie Battlefield haben kann.
32 vs. 32 Caspian Border.
Wenn du das komplett lösen würdest, bedeutet das.
Sobald das Spiel anfängt, bis zum Ende des Spiels.
Du hast alle nur erdenklichen Kombinationen im Vorfeld ausgerechnet.
Und das geht offensichtlich nicht bei einer Partie Battlefield.
Jede kleinste Pixelbewegung von jedem der Spieler.
Jede Aktion.
Das zieht eine Trillionenfache andere Möglichkeiten nach sich.
Das kannst du nicht im Vorfeld komplett durchrechnen.
Es gibt Spiele, das geht das.
Ich glaube Mühle ist komplett gelöst.
Also 4 gewinnt ist auf jeden Fall komplett gelöst.
Das weiß ich.
Ich glaube Mühle auch.
Also sprich es ist jede nur erdenklich mögliche Spielstate bekannt.
Und analysiert und man weiß immer wie man 100% perfekt spielt.
Das heißt daraus kannst du dann auch zum Beispiel ableiten wie weißer Spieler gewinnt immer.
Aber ich meine zwischen 4 gewinnt und einer Runde 32 vs. 32 Battlefield Caspian Border.
Gibt es halt ein bisschen mehr States oder Möglichkeiten was passieren kann.
Also dass man eine komplette Runde Battlefield im Vorfeld schon komplett prediktet hat.
Ist eigentlich nahezu unmöglich.
Bei Fighting Games sieht das allerdings schon ein bisschen anders aus.
Fighting Games sind natürlich deutlich weniger.
Also selbst Fighting Games kannst du nicht komplett predikten.
Aber es sollte glaube ich offensichtlich sein, dass die möglichen Züge nennen wir es mal.
In einem Fighting Game deutlich geringer sind die Anzahlen als beispielsweise 32 vs. 32 Battlefield.
Wie schaut es mit MMOs aus?
Ups.
MMOs ist ein schlechtes Beispiel dafür.
Weil MMOs in der Regel tatsächlich synchron sind.
Vielleicht mittlerweile nicht mehr so krass wie früher.
Aber MMOs sind ziemlich synchronisiert.
Also sprich du hast Server Tics und anhand dieser Server Tics passieren Dinge.
Ja natürlich Clients interpolieren das noch ein bisschen.
Dass es flüssiger aussieht alles.
Aber in MMOs ist es auch so, dass wenn ich sage hey ich baue jetzt hier irgendwie ein bisschen Eisenerz ab.
Dann passiert das einfach nicht.
Wenn der Server mit dem nächsten Tic nicht sagt du baust jetzt Eisenerz ab.
Und das ist ja auch der Grund warum MMOs jahrelang so träge waren.
Erinnert sich noch einer an die früheren MMOs?
Von Tab Target Dingen und einzelne Ziele auswählen und dann Input drücken und der Spell wird gecastet und so.
MMOs waren und sind auch immer noch bis auf ein paar Ausnahmen sehr gemächlich.
Und das liegt daran weil MMOs mehr oder weniger synchronisiert laufen für alle Spieler.
Es gibt mittlerweile schon ein paar Games die das trickreicher machen.
Oder in den letzten Jahren auch über mehr oder weniger so interaktive Kampfsysteme haben in MMOs.
Aber insgesamt kann man sagen sind MMOs immer noch deutlich gemächlicher und träger als beispielsweise jetzt in Battlefield.
Und das liegt mit daran weil MMOs ziemlich synchronisiert laufen.
Aber das ist halt auch eines der Eigenschaften von MMOs.
Okay was haben wir denn hier sonst noch interessantes?
Overwatch 2 fällt auseinander.
Was haben wir sonst noch hier?
Tolle Konzentration mitten in der Nacht.
Apple Vision Pro angeschaut.
Bei diesem Ding bin ich ja auch skeptisch.
Ich meine es ist halt eine 3D Brille.
Auch wenn Apple das irgendwie super krass nicht...
Die nennen es... Okay.
Apple nennt das Ding ja nicht Virtual Reality Brille sondern...
Oh wie... Spatial Reality?
Apple hat da wieder so ein ganz geiles Wort dafür empfunden.
Aber im Endeffekt ist es halt eine VR Brille.
Und ich weiß nicht ob das so ein Ding ist was sich so toll durchsetzt.
Ja es ist von Apple und viele Leute kaufen Dinger weil sie von Apple sind.
Aber es ist abfuck teuer.
Ich weiß nicht. Ich bin skeptisch ob das so ein großer Erfolg wird das Ding.
Volle Konzentration.
Okay komm.
Ich flame noch ein bisschen über Overwatch mal schnell.
Das ist auch so. Das ist auch ein Thema.
Also ich flame ganz gerne über C++ und ich flame auch ganz gerne über Overwatch.
Es ist wieder Zeit über meine Lieblings Videospiel Firma zu reden.
Nachdem Overwatch seit Jahren in einer ziemlichen Abwärtsspirale war.
Hat man sich gedacht man reißt das Ruder rum mit einem zweiten Teil.
Ein komplett neues Spiel. Viele Neuerungen und unfassbare...
Komplett neues Spiel. Ja.
Das war wohl nix.
PvE wird es nicht geben.
Und der Multiplayer ist halt erstmal der Overwatch 1 Multiplayer zu 90%.
Wo man halt jetzt endlich mal wieder ein paar Erweiterungen bringt.
Was man ja jahrelang hat schleifen lassen für Overwatch 1.
Und ja man hat die Grafik ein bisschen verbessert.
Und der Rest ist ja halt mehr Microsoft.
Microtransaction heavy.
Spielspaß. Nur dass es kein komplett neues Spiel ist.
Es auch keine vielen Neuerungen gibt.
Und den Spielspaß können wir vielleicht irgendwie einklammern.
Es ist viel um dieses Sequel passiert.
Und wir schauen uns mal an wieso die reinste Existenz davon ein ziemliches Mess ist.
Ein ziemliches Mess ist das auch ein geiler Satz.
Bevor wir anfangen erstmal eine schnelle Briefhistory zu Overwatch 1.
Als das Spiel 2016 rausgekommen ist waren alle gehypt und glücklich.
Wie ich wusste dass er das sagt. Ich auch.
Ein competitive FPS Multiplayer Game.
Und ich hab das glaube ich so krass gegrindet wie kaum ein anderes Game die letzten Jahre über.
Ich hab das bestimmt zwei Jahre am Stück einfach nur 24...
Nein 24 sieben nicht. Ich musste immer noch arbeiten gehen.
Aber jede freie Minute gespielt.
Mit Heroes und Abilities gab es in der Form vor allem...
Ich mein ich war Level keine Ahnung 400 oder so in der Beta allein schon.
So gut noch nie.
Und eine riesige Community hat sich angefangen um dieses Spiel zu bilden.
Große Persönlichkeiten schossen um dieses Spiel herum aus dem Boden.
Und nicht lange nach Release hat sich die Overwatch League gebildet.
Ein großer...
Overwatch League ist auch so ein Ding.
Ich fand es nie gut.
Von Anfang an nicht.
Das System.
Ich weiß jetzt nicht ob ich da ausholen soll.
Aber zwei Sachen.
Erstens.
Dass es quasi egal ist ob du gut oder schlecht warst.
Weil es keinen Aufstieg und Abstieg gibt.
Und das geht mit dem nächsten zweiten Punkt einher.
Es gibt keine Tier 2 Szene.
Dadurch dass es nur Overwatch League und nur den Fokus auf Overwatch League gibt.
Ich weiß dass es eine Tier 2, Tier 3 Szene gibt.
Aber niemand interessiert sich dafür.
Wer hat schon mal Contenders von euch geguckt?
Und selbst wenn du Contenders gewinnst.
Heißt es ja nichts.
Das heißt nicht dass du dann aufsteigst mit deinem Team in die Overwatch League.
Du kannst Werbung für dich machen.
Dass dein Team auseinander gerissen wird.
Weil manche Spieler halt von Overwatch League Teams gekauft werden.
Das ist alles.
Also ich fand das Overwatch League System nicht gut.
Von Anfang an nicht.
Und der Fokus darauf.
Dass du im Prinzip kein Tier 2, Tier 3 hast.
Und auch keine Competition so richtig sinnig in dem Game hast.
Außer eben Overwatch League.
Die haben sehr viel.
Also gerade was eSport vergeht.
Die haben unglaublich viel verschenkt.
Dadurch dass Overwatch League so gepusht wurde.
Gab es dann irgendwann quasi auch.
Weiß nicht ob es wirklich ein Verbot war.
Aber es wurde anderen Anbietern sehr schwer gemacht.
Overwatch Turniere zu bringen.
Und irgendwann hat auch die ESL sogar die Weeklys eingestellt und sowas.
Hey wir waren immerhin mal deutscher Weekly Gewinner damals.
Wir waren im Vergleich zu internationalen Teams nie wirklich gut.
Muss man auch Fairness halber sagen.
Aber ich würde sagen wir haben damals Overwatch schon ganz brauchbar gespielt.
Aber es gab halt irgendwann.
Es gab auch keine richtige Competition mehr.
Es gab Overwatch League.
Und spätestens seit Overwatch League gab es sonst nichts anderes mehr.
Und Tier 2 juckt keine Sau.
Tier 3 gibt es nicht.
Und die haben auch viel verschenkt in Overwatch selbst.
Warum und das frage ich mich bis heute.
Warum hat man nicht versucht.
Ich meine Overwatch wollte von Anfang an ja irgendwie schon ein bisschen ein eSport Game sein.
Warum hat man nicht um diesen Ranking Modus was aufgebaut.
Warum gab es nicht automatisch erstellte Weekly Turniere die promotet wurden intern.
Für die jeweilige Liga in der du gespielt hast.
Oder warum gab es nicht irgendwelche sagen wir automatischen Top 100 Aufstiegsspiel irgendwas.
Du hättest so viel automatisch generierten Content in den Overwatch Ranking Modus einbauen können.
Der halt ein gewisses Competition Level schafft eben auf allen Bereichen.
Weil so war es einfach nur toxic as fuck.
Jeder dachte er ist nur in der jeweiligen League weil seine Teammates scheiße sind.
Hat die ganze Zeit rum geflamed.
Hat GG nach zwei Sekunden wenn der erste Push nicht funktioniert hat.
Es war einfach nur von Arsch wie sie das gemacht haben.
Es war auch viel zu roh es gab drum herum auch nichts.
Das einzige was es gab Top 500 Badges.
Ja geil.
Da kann ich mir jetzt was davon kaufen.
Da ich Season 1 Top 500 Badge hab.
Oder was heißt davon kaufen ist das falsche Wort.
Das war das einzige.
Die hätten Competition auf jedem Level schaffen müssen.
Und auch automatisch generierte Turnierbäume.
Du hättest so viel machen können.
Mit Competitive Overwatch.
Auf allen Ebenen.
Aber sowas wie FACEIT oder sowas.
Das ist natürlich undenkbar mit sowas wie ner Overwatch League.
Wenn das irgendjemand anderes Competition E-Sport Sachen machen darf aus Blizzard selbst.
Es ist scheiße gemanagt worden.
Das fuckt mich heute auch immer noch richtig ab.
Das hatte so viel Potential.
Und irgendwann haben sie einfach gar nichts mehr gemacht.
Irgendwann haben sie einfach gar nichts mehr gemacht.
Gab es dann einfach nichts neues mehr.
Ab und zu gab es noch einen Comic. Ja super.
So und eines der größten Probleme.
Für Leute die jetzt nicht.
Da irgendwie den harten Overwatch Rank Grind gemacht haben.
Wie wir damals.
Sondern die einfach nur Overwatch Just for Fun gespielt haben.
Oder bisschen Ranked ab und zu.
Und dann irgendwie was weiß ich.
Mal irgendwie Diamond gepeaked sind oder sowas.
So.
Was für die beschissen war.
Und das muss man sagen.
Das ist heute zum Teil immer noch so.
Overwatch League war nicht.
Nicht.
Wie sagt man das.
Unwatchable.
Das war nicht richtig schaubar.
Einfach.
Du hast nicht verstanden was passiert.
Zumal die auch.
Jahrelang.
Total bescheuerte Metas hatten.
Erinnert sich noch jemand an GOATS.
Oder erinnert sich noch jemand an die Beta.
Double Winston, Double Reaper.
Und so ein Geschiss.
Die hatten teilweise monatelang.
Wenn nicht sogar.
Seasons lang.
Metas die du nicht gucken konntest.
Habt ihr mal einen GOATS Match gesehen.
In der Overwatch League.
Das war nicht schaubar.
Du hast nicht verstanden was passiert.
Du hast zwei Teams aufeinander rennen sehen.
Mit Tanks.
Die sich im Prinzip.
Die Köpfe eingeschlagen haben.
Irgendwo die Shields all waren.
Bis irgendwie einer mal.
Ein gutes Gravity Field.
Ich hab vergessen wie die Serie heißt.
Gesetzt haben.
Das war nicht.
Das konntest du nicht gucken.
Es ist nicht so.
Dass die Struktur hinter der Overwatch League.
Unabhängig davon.
Dass mir das System nicht gefallen hat.
Dass das so wahnsinnig schlecht war.
Die Events schlecht organisiert waren.
Das Spiel.
War scheiße zu gucken.
Und wer guckt sich ein E-Sport an.
Wo das vielleicht gut organisiert ist.
Aber der Kern des ganzen.
Nämlich die Matches.
Scheiße zu gucken sind.
Niemand guckt sich das an.
Die ersten paar Overwatch Leagues.
Waren noch recht gut besucht.
Auch als das noch neu war.
Und das noch einen richtigen Hype hatte.
Und man auch noch ein bisschen dieses.
Korea vs NA vs EU Player.
Und so hatte.
Aber danach.
Das ging rapide runter.
Das war fast so wie die Zahlen.
Von New World auf Steam.
Die Overwatch League.
Hat sich vielleicht am Anfang.
Ist vielleicht sogar besser gestartet.
Als man das erwartet hat.
Aber das ging rapide runter.
Irgendwann sind die dann auch gewechselt.
Von Twitch auf YouTube.
Und ab dem Zeitpunkt.
Habe ich keine Ahnung mehr.
Legit Leute.
Ich habe früher ab und zu noch geguckt.
Aber seit es von Twitch auf YouTube gegangen ist.
Die Overwatch League.
Nichts.
Ich habe nichts mehr davon verfolgt.
Nichts mehr davon mitbekommen.
Nichts mehr geschaut.
Das war für mich einfach nur dead.
So.
So viel zum Thema Overwatch eSport.
Ihr merkt das ist ein Thema.
Was mich immer noch ein bisschen aufregt.
Wie verkackt sie das haben.
Ich will jetzt nicht weiter gehen.
Warum ich denke das es so ist.
Moin Michael.
Pogu.
Raum für Competitive Teams.
Es lief alles also ziemlich gut.
Bis alles auf einmal nicht mehr ziemlich gut lief.
Hast du Valorant gespielt?
Nein.
Es kam immer mehr Charakter dazu.
Die das Game komplett auf den Kopf gestellt haben.
Wie Brig die komplett broken war.
Eine Sache für die das Overwatch Team bekannt war.
Das ist auch so ein Ding.
Die neuen Helden die rausgekommen sind.
Das muss man.
Ich muss erstmal was Positives sagen dazu.
Moin Hyper Noob.
Ich muss erstmal was Positives dazu sagen.
Die Helden die released wurden.
Und die Sachen die released wurden.
Die waren zumindest meistens gut gemacht.
Ich finde nach wie vor.
Das viele Maps in Overwatch.
Komplett Banane Pepega.
Wie auch immer man das nennen mag.
Sind.
Aus Gründen von Leuten erstellt.
Die noch nie.
FPS kann man nicht wirklich sagen.
Die noch nie FPS Maps erstellt haben.
Die ersten Valorant Maps die ich gesehen habe.
Ich habe Valorant nie gespielt.
Die ersten Valorant Maps.
Die waren genau das Gegenteil zu den ersten Overwatch Maps.
Die ersten Overwatch Maps.
Die sahen gut aus.
Guckt euch sowas wie Kings Row an.
Finde ich heute immer noch eines der besten Maps.
Die sahen gut aus.
Waren aber vom Gameplay her.
Die ersten Valorant Maps.
Kann ich nur sagen.
Aus Zuschauer Perspektive.
Die ersten Valorant Maps.
Waren handwerklich schlecht gemacht.
Von der Optik her.
Aber spielerisch ganz brauchbar.
Das war das komplette Gegenteil.
Und Overwatch Maps.
Sind langweilig.
Das ist auch so ein Punkt.
Den habe ich damals nicht verstanden.
Wie die an diesem Map Konzept.
Festhalten konnten.
Die sind langweilig.
Overwatch Maps bestehen in der Regel.
Aus einem Weg.
Mit.
Wenn es hoch kommt.
Einer oder zwei ab und zu Flanking Routen.
Wo sich eine davon gar nicht lohnt.
Es gibt eigentlich in Overwatch.
Immer einen Weg den man läuft.
Und Overwatch Maps.
Gerade die Payload Maps.
Waren.
Und nicht nur die Payload.
Alle Maps.
Waren auf Chokepoints ausgelegt.
Temple of Anubis.
Du hast den Chokepoint nicht gehalten.
Erster Punkt war weg.
Kings Row.
War weg.
Overwatch Maps waren langweilig.
Die waren basiert auf einem klaren Weg.
Voll mit Chokepoints.
Ich fand das Map Design.
Noch nie gut in Overwatch.
Bei den neueren Maps.
Hat sich ein bisschen gebessert.
Dann kamen noch.
Das war nicht nur.
Bei vielen unbeliebt.
Das war ein Kack Spiel.
Wie kommt man auf die Idee.
Temple of Anubis.
Einen Defender Spawn.
Direkt.
Hinter den letzten Capture Point.
Zu setzen.
Da kommen diese komischen.
Overtime Regeln dabei.
Das war alles nur.
Mäßig.
Getragen wurde Overwatch.
Im Endeffekt.
Durch die unterschiedlichen Helden.
Und die Dynamik.
Problematisch war.
Das du.
Oftmals das gleiche.
Auf beiden Seiten gespielt hast.
Auf jeder Map.
Bei jedem Match.
Obwohl es viele Helden gab.
Was dazu geführt hat.
Das es langweilig war.
In Kombination.
Du konntest es nicht gucken.
Du konntest es nicht angucken.
Du hast nicht verstanden was passiert.
Das hast du bei den Castern gemerkt.
Die random Bullshit gelabert haben.
Ich hätte es nicht besser gekonnt.
Keine Frage.
Ich hätte auch nicht verstanden was passiert.
Außer ich hätte mitgespielt.
Und die Spectator.
Die waren alle komplett lost.
Ohne Mist.
Habt ihr euch mal zu Golds Zeiten.
Overwatch Matches angeguckt.
Im Prinzip war das reines.
Was macht er denn jetzt.
Er hat überlebt.
Jetzt kommt wieder was.
Jetzt ist einer gestorben.
Die sind komplett ausgeflippt.
Weil die nichts zu dem Game sagen konnten.
Du konntest zu dem Game nichts sagen.
Vergleich das mal mit einem CSGO Cast.
Die können dir sinnvoll was zu dem Game sagen.
Erstens sind die.
Ist CS vielleicht auch ein bisschen einfacher zu observen.
Du hast gute Observer.
Die verstehen wann wie wo was passiert.
Dass die kaum Engagements verpassen.
Und Trades verpassen.
Die können dir das auch sagen.
In CS.
Die können dir auch sagen.
Nach dem Motto.
Die Position misst er normalerweise nie.
Seine Sniper Shots.
Das hat er jetzt so gespielt.
Weil der dritte Pixel von rechts.
Von der Smoke Granate.
Nicht richtig den Balkon gecovert hat.
Das können die dir in CS erzählen.
Das konnte niemand in dieser Tiefe.
Zu Overwatch erzählen.
Das war halt einfach nicht schön zu gucken.
Das ging dann bergab.
Das ist was was mich heute noch aufregt.
Weil ich das Spiel.
Gern gespielt habe.
Und das Spiel so unglaublich.
Großes Potential hat.
Was man ihr ausgeschöpft hat.
Egal weiter gehts.
War es auf jeden Fall nicht.
Ihr Spiel gut zu Balancen.
Ja gut.
Overwatch Balance ist typische Blizzard Balance.
Typische Blizzard Balance.
Typische Blizzard Balance.
Geht so.
Also das hier ist OP.
Und das hier ist Sucked.
Sucked.
Blizzard Balance war so.
Das ging nicht gescheit.
Entweder war was OP.
Oder es war scheiße.
Ich will nicht sagen immer.
Aber in diese Falle.
Sind sie halt oft getappt.
Ich würde sagen ein Spiel.
Was man wirklich als gutes Beispiel.
Könnt ihr mir widersprechen.
Wenn ihr da richtig voll dabei seid.
Aber rein wieder aus Beobachter Perspektive.
Und als jemand.
Der ab und zu ein paar Dota Streams guckt.
Ich finde ein Spiel.
Wo man wirklich sagen kann.
Das es Balancing Technisch.
Halbwegs auf die Reihe kriegt.
Ist Dota 2.
Ich gucke immer mal on off ein bisschen Dota.
Ihr wisst.
Ich spiele eigentlich so gut wie keine MOBAs.
Ich spiele Dota auch nicht selbst.
Da fragen sich offizielle Tourniere.
Die es dazu gibt.
Was man bei Dota sagen muss.
Die haben es geschafft.
Es gibt META Picks.
Aber sie sind bei Dota doch relativ vielfältig.
Also wenn man sich mal anguckt.
Die Hero Picks über ....
Die letzten Turnieremonate.
Dann wird man feststellen.
Die spielen nicht nur zehn Helden.
Nee die spielen mehr.
Die spielen halt, keine Ahnung, vielleicht, lass es mal 25 Helden sein, klar, mein Dota hat massig Helden, viele von denen werden professionell auch nicht gepickt, aber es ist, ey, es ist nochmal ein Vielfaches besser, vielfältiger als das, was die Overwatch hingepapriziert haben.
Aber wenn 80 der 120 Heroes OP sind, ist das doch, spricht das doch schon mal für das Game, oder?
Aber selbst im E-Sport-Bereich, ich weiß nicht, wie die Pickrates, aber ich glaube, so um die 30 Heroes oder so wurden gepickt dann, ich hab letztens mal so eine Tabelle gesehen, und das ist ja schon wirklich sehr vielfältig im Vergleich zu dem, was man in Overwatch gesehen hat.
In Overwatch hast du die gleichen 6 Helden, wirst die gleichen 6 Helden jede Runde, jedes Match gehabt.
Kam viel zu oft vor, dass es bestimmte Metas gab, und wenn man irgendwas außerhalb dieser Meta gespielt hat, wurde man komplett gefickt.
Die GOATS-Meta war lange ein Bestandteil vom Daily-Business in Overwatch. Man hat statt DPS, Healer und Tanks einfach nur noch Healer und Tanks gespielt, weil wer braucht schon DPS?
Ach ja, ich hab eine Sache noch vergessen zu sagen, ich muss jetzt tatsächlich ein bisschen über Overwatch meckern, weil ich sagen wollte, ich wollte ja noch was Positives sagen.
Ich fand, neben dem, was ich eben gesagt habe, die Helden, die sie eingeführt haben, alle immer gut, rein von der Idee hinter den Helden.
Das Problem mit den neuen Helden war, die sie eingeführt haben, dass das meistens, nicht immer, aber das waren so Helden, die waren mega stark mit einfachen Abilities.
Also hast du zum Beispiel sowas wie Brigitte. Du stellst dich vor den Gegner, drückst den Knopf, der ist gestunt.
Dazu musstest du nichts machen. Bei McCree mit dem Flashbang musst du ja zumindest noch am Schild vorbei werfen.
Du bist hin, du hast dein Schild gehabt, du hast den Gegner gestunt. Du musstest einen Knopf drücken, den Gegner zu stunten.
Das war Counter zu nahezu allem, was es in dem Game gab. Und es war easy as fuck zu spielen.
Du musstest das auch spielen, obwohl es eigentlich gar keinen Bock gemacht hat.
Ich bin ja immer noch der Meinung, hier bestes Overwatch-Grill und so, aber die Mechanik, das war voll für'n Arsch.
Und es gab einige solche Helden. Maids to the Face, genau. Es gab einige solche Helden.
Es gab so Sachen wie Doomfest, das ist ein bisschen rausgefallen. Das war halt auch lächerlich zwischenzeitlich, ja.
So mit Aufladen und quer durch die Map dashen und alles so wegklatschen, aber das war, um Doomfest gut zu spielen, war schon nicht einfach.
Konnte ich nie. Aber so Sachen wie Braid, das muss einfach nicht sein.
Und das Problem bei Overwatch war halt, das war dann erstmal ein Dreivierteljahr im Game, bis Blizzard auf die Idee gekommen ist, man könnte ja mal was dran ändern.
Man hatte quasi unendlich Leben und die Tanks und Healer haben schon irgendwie genug Damage gemacht,
weshalb alle die PS-Heroes über ein Jahr lang quasi komplett ausgestorben sind im Spiel.
Wenn irgendwas im Spiel falsch lief, hat das Overwatch-Team erstens viel zu lange gebraucht, um das Problem zu fixen.
Ja, auf jeden Fall. Die haben ewig gebraucht mit Patches teilweise.
Und zweitens, bei dem Versuch es zu fixen, gleichzeitig zehn andere Probleme erzeugt.
Die Antwort auf die Goats-Meta war beispielsweise rollenbezogene Ranking-Queues einzufügen.
Was ist das? Ich bin gar nicht mehr so sicher jetzt. Das kam so in dem Dreh irgendwann, ja.
Vorher war es unmöglich, die PS zu spielen und jetzt umso mehr, da man fucking Viertelstunde plus auf ein Game warten musste.
Von solchen Sachen gab es ab dem Punkt am laufenden Bande welche in Overwatch,
weshalb immer mehr große Persönlichkeiten zu anderen Games wechselten, genauso wie die Spieler es taten.
Es hat irgendwann einfach wirklich gar keinen Spaß mehr gemacht, dieses Spiel zu spielen.
Der einzige Teil an Overwatch, der nicht...
Overwatch hat keinen Spaß mehr gemacht, Overwatch hat nur noch aufgeregt.
Und das war der Zeitpunkt, wo ich keinen Bock mehr hatte.
Das ist bei mir oft so. Egal ob ich Games spiele oder ob ich Serien gucke oder sonst was,
manchmal kommt der Moment, wo ich Sachen einfach nicht mehr nachvollziehen kann, einfach nicht mehr mitmachen will.
Beispielsweise gibt es auch Serien, wenn ich die gucke und dann irgendwie Staffel 3 ist und ich bedenke,
Alter, warum verhalten die sich jetzt alle so komplett entgegengesetzt zu dem, wie es in Staffel 1 und 2 war?
Alter, warum ergibt das jetzt alles gar keinen Sinn mehr?
Dann nervt es mich nur noch. Dann macht es mir keinen Spaß, mal zu gucken.
Dann nervt es mich nur noch und dann höre ich auf, die Serie zu gucken.
Ich muss nicht zwangsläufig alles bis zum Schluss gucken.
Und bei Games ist es auch so. Wenn mich ein Game nur noch nervt oder nur noch aufregt,
dann kann ich es mir einfach nicht mehr geben, ja?
Und das ging nicht nur mir so.
Es gab viele Overwatch-Bros, die ihr Geld damit verdient haben.
Die immer wieder auch in ihren Spielen, in ihren Sachen geflamed haben.
So nach dem Motto, Alter, wenn ich...
Die haben in ihren Streams dann teilweise CS gespielt und haben halt gesagt,
Oh, fuck, Alter, ich hab gleich Overwatch-Training.
Seriously, ernsthaft, kein Spaß, ja?
Überleg dir mal, du hast ein Overwatch-Bro, der spielt was anderes on-stream.
Scheiß, Alter, gleich ist wieder Overwatch-Training.
Oder, Alter, ich spiele diesen Kack doch eh nur, weil ich Geld dafür kriege.
Das ist vorgekommen. Die hatten auch keinen Bock drauf.
Die haben das nur gespielt, weil es Geld bringt.
Ist ja nicht verwerflich, aber bezeichnend für das Spiel.
Nicht totes ist die Porno-Industrie, aber Rettung wahren.
Der einzige Teil an Overwatch, der nicht tot ist, ist die Porno-Industrie.
Wundert mich nicht.
Da geht er mal.
Und mich würde nicht wundern, wenn es in Valorant genauso aussieht.
Ich will jetzt nicht googeln, weil das ist auf jeden Fall Monkathoss.
Aber ich wette mit euch, bei Valorant ist es genauso.
Das ist klar.
Aber Rettung wahren Sicht.
Overwatch 2 wurde auf der BlizzCon 2019 angekündigt.
Ja.
Episch großer Trailer.
Und dann war es erst mal irgendwie drei Jahre Funkstille drum.
Und jetzt gibt es nicht mal mehr PVE, was eigentlich der Seller werden sollte für Overwatch.
Es wurde darüber geredet, wie viel Liebe in das Game geflossen ist.
Ja, und dann ist Jeff weg und sie haben das Game wahrscheinlich noch mal umgeklampelt.
Und der große Knaller, verschiedene PVE-Game-Modi.
Ja.
Das war quasi das ausschlaggebende Argument, wieso das Sequel überhaupt erscheint.
Es soll nun eine große Kampagne mit richtiger Story und richtigen Missionen geben.
Jeder Hero soll ein Skill-Tree bekommen.
Ich fand die Idee mit dem Skill-Tree nice.
Das war wahrscheinlich nur für PVE gedacht.
Aber die Idee dahinter, dass man Helden nicht nur picken kann, sondern ein bisschen customizen kann, fand ich sehr gut.
Weil ich hatte mich in Overwatch schon damit abgefunden, dass mehr oder weniger die gleichen Helden immer gespielt werden.
Gegen mehr oder weniger immer die gleichen Helden.
Aber vielleicht hätte man mit Skill-Trees schon noch ein bisschen Varianz da reinbringen können.
Das fand ich eine gute Idee.
Ja, auch wenn es erst mal nur für PVE gedacht war.
Aber vom Grundansatz her fand ich es eine gute Sache.
Es ist halt leider auch komplett weg jetzt.
Ich muss ehrlich sagen, ich fand das damals auch schon nicht sonderlich innovativ und toll aus.
Ich weiß, viele haben das gefeiert.
Ehrlich gesagt, ich fand das damals schon ein bisschen uninspiriert aus.
So nach dem Motto, das spielst du einmal und dann nie wieder.
Wirklich sehr vielversprechend.
Fand ich nicht.
Aber es war eine gute Sache.
Einen PVE-Modus fand ich eine gute Sache, weil ich immer noch der Meinung bin, dass die Welt von Overwatch durchaus eine gute Singleplayer-Kampagne hergeben würde.
Und das ja auch was ist, was Blizzard eigentlich kann.
Das ist ja das, worauf ich ein bisschen gehofft habe.
So ein competitive PVE-Horde-Modus, schön und gut.
Aber eine Singleplayer-Kampagne wäre wirklich richtig geil gewesen für Overwatch.
Also Blizzard, was eine gute Singleplayer-Kampagne machen kann.
Die Welt hätte es hergegeben und die unterschiedlichen Helden und so hätten sicherlich auch eine interessante Story hergegeben.
Hat sich aber Blizzard gedacht, nope, damit lässt sich kein Geld verdienen.
Außerdem reden wir hier von Blizzard.
Auch wenn in den letzten Jahren, ich sag mal, ein paar unvorteilhafte Dinge passiert sind, kann man ihnen nicht absprechen, wie gut viele Videospiele von ihnen sind.
Vor allem aus dem PVE-Segment.
Die können das einfach.
Die Jahre nach der Ankündigung sind also vorbeigezogen und man hat sich langsam gefragt, wo das Spiel nun bleibt.
Viel Gutes hat Blizzard ja auch in den letzten Jahren nicht hinbekommen.
Die haben jetzt mal wieder mit Diablo 4 endlich was, was anscheinend nicht nur auf den ersten Blick was taugt, sondern wohl auch ein bisschen Substanz hat.
Mal gucken, wie es in ein paar Monaten aussieht.
Das Einzige, was sich in den Jahren nach der Ankündigung so getan hat, ist, dass Overwatch 1 komplett krepiert ist.
Immer weniger Spieler haben es gespielt.
Es gab nichts dafür.
Es gab ja auch kein Content.
Als Echo rausgekommen ist, kam förmlich gar kein Update mehr für das Spiel raus.
Man hat gemerkt, dass das Spiel für Blizzard selbst ein sinkendes Schiff ist und man dachte, dass halt jede Manpower nun zu Overwatch 2 geschickt wird, um dort halt den ganzen neuen Content zu entwickeln.
Dem es nicht geht.
2022 war es endlich soweit und die Beta zu Overwatch 2 ging an den Start.
Twitch-Zuschauerzahlen explodierten, da man als User einen Beta-Key bekommen hat, wenn man für mehrere Stunden einen Streamer geschaut hat, der die Beta spielt.
Nach 5 Stunden XQC konnte ich selbst auch endlich in die Overwatch 2-Beta reingehen und ich sage es euch ganz ehrlich, es hat wirklich Spaß gemacht.
Es hat sich so angefühlt, als wäre wieder 2016.
Ich und die Boys einfach ein paar Runden Overwatch grinden.
Ich selbst habe das Spiel seit Jahren halt auch nicht mehr gespielt, da der erste Teil ab einem gewissen Punkt, wie gesagt, wirklich gar keinen Spaß mehr gemacht hat.
Ich hatte keinen Spaß an der Beta, weil es jetzt irgendwie ein krasses Sequel war, sondern einfach, weil es Overwatch war.
Und mal wieder in Neu.
Am 4. Oktober 2022 kam Overwatch 2 endlich für jeden raus und die Leute waren...
Chat, woher kennt man diesen Sound hier?
Ich weiß, dass es nur noch 15 Sound, aber woher kennt man den?
Friend-Request in irgendeinem Game?
Menü!
Ja!
Das kann sein.
Das klingt gut.
Menü aufmachen, ja, ja, ja.
Das kann durchaus sein, ja.
2022 kam Overwatch 2 endlich für jeden raus und die Leute waren gehypt.
Beziehungsweise, naja, nicht wirklich gehypt, weil der große Point von Overwatch 2, die PvE-Modi, nicht existent waren.
Man hat also jetzt schon sein Spiel so halb rausgebracht, weil Overwatch 1 halt wirklich...
Könnte man nicht sagen, dass die Hälfte von Overwatch 2 eigentlich Overwatch 1 ist?
...krankverrecktes und naja, Geld ist immer noch Geld.
Aber was sind jetzt wirklich die Unterschiede zwischen den beiden Spielen?
Es gibt drei neue Heroes, sechs neue Maps und einen komplett neuen Modus namens Push.
Ja, die Grafik sieht ein bisschen besser aus.
Aber das ist nichts, wofür man vier Jahre gebraucht hat, oder?
Nee. Ja.
Mit ein paar Reworks von Heroes einhergingen.
Ein paar davon sehr subtil, wie ein bisschen mehr Damage, ein paar...
Ja, die mussten die Heroes ja reworken, weil es jetzt ein Spieler weniger auf jeder Seite ist.
Das ging ja gar nicht anders.
Musstest die ja reworken.
Aber auch sehr groß mit Heroes wie Orisa, die sich so ziemlich gar nicht mehr wie davor gespielt haben.
Der größte Change ist aber der Fakt, dass nun 5 gegen 5 statt 6 gegen 6 gespielt wird.
Ja, genau. Deswegen musstest du das anpassen.
Man spielt jetzt nur noch mit einem Tank.
Ich persönlich habe auf jeden Fall gar nichts gegen diese Entscheidung, dass sich jedes Teammitglied nun etwas wichtiger anfühlt.
Man hat das Game jetzt ein bisschen mehr selbst in der Hand und hat das Gefühl, mehr beeinflussen zu können.
Das war's aber so ziemlich. Ein paar nette Änderungen, die drei Jahre Wartezeit auf jeden Fall rechtfertigen.
Haltet euch fest, aber ich habe von der größten Neuerung noch gar nicht geredet.
Nämlich der Shop.
Es gibt nun einen Battle Pass, mit dem man zahlreiche Sachen freischalten kann wie neue Heroes.
Ganz recht.
Da das Spiel nun Free2Play ist, hat man nicht mehr alle Charaktere von Anfang an,
sondern muss diese erst freischalten oder, naja, ein paar Euronen investieren.
Außerdem kannst du Skins kaufen.
Skins gibt es allgemein so ziemlich jedem Free2Play Online-Game zu kaufen,
aber an Fortnite bezahle ich 10 Euro dafür, dass ich Vegeta spielen kann und mich in einen fucking Super Saiyajin Blue verwandele,
während ich in Overwatch 2 20 Euro dafür bleibe, dass meine Winston rot ist.
Und auch wenn es durchaus ein paar neue Sachen in Overwatch 2 gibt.
Ja, Skinpreise in Blizzard Games. In Diablo 4 kostet ja auch irgendwie ein Set 28 Euro und sowas.
2 gibt wurden auch viele Sachen willkürlich aus dem ersten Teil entfernt.
Das Level-System wurde komplett entfernt.
Ich meine, es gibt ja jetzt den Battle Pass, den man leveln kann.
Aber auch blöd, man sieht nicht, wie lange die Leute das schon grinden.
Man kann nicht mehr sehen, ob Leute Premades sind.
Man kann nicht mehr on fire sein.
Ach, das geht nicht?
Es gibt keine Zusammenfassung mehr am Ende von Matches, geschweige denn die Karten und Auszeichnungen.
Man kann seine Waffen nicht ingame auschecken, obwohl genau das in den Trailern gezeigt wurde.
Die haben das in den Trailern drin, aber nicht im eigentlichen Spiel.
Echt jetzt?
Es gibt jetzt zwar 6 neue Maps, aber dafür wurden 5 alte...
Ja, 2CP wurde entfernt. 2CP ist auch Ultra-Schrott, Alter.
Ich hätte es cooler gefunden, sie hätten vielleicht die 2CP Maps irgendwie zusammengefasst zu einer Push-Map oder irgendwas anderes.
Ganz rauswerfen ist doof. Sie gehören für mich irgendwie immer noch in Overwatch dazu, aber 2CP war so ein Schrott-Modus, Alter.
...entfernt. Man könnte meinen, dass der Re-Release unter Overwatch...
2CP ist wieder drin? What?
Oh, nee. Schrott, Alter.
Overwatch 2, nur Blizzards Entschuldigung dafür, ist das Spiel Free-to-Play rauszubringen, um so noch mehr Geld aus dem Ganzen abmelken zu können.
Außerdem halte ich es für einen Industriestandard, solche Sachen wie neuen Content oder Balancing in ein Game reinzupatchen,
statt direkt ein komplett neues Spiel rauszuhauen.
Die Sachen, die hier dazu gekommen sind, rechtfertigen auf gar keinen Fall ein neues Game.
Das Einzige, was mich jetzt noch optimistisch stimmt, ist der angekündigte PvE-Story-Modus.
Man merkt, dass wirklich viel Liebe darin geflossen ist und das wäre immerhin eine Begründung für ein komplett neues Spiel.
Bruh.
Der große Point an Overwatch 2, der Grund, wieso dieses Spiel überhaupt existiert, wurde einfach so aus dem Nichts gecancelt.
Die Begründung war, dass immer mehr Ressourcen weg vom Online-Game gezogen wurden und man den Fokus verloren habe.
Man könne sich nicht um den PvE-Modus kümmern, ohne den PvE-Modus.
Also, diese Pressemeldungen oder diese Statements sind immer so pp-ge, Alter.
Wisst ihr, was für mich eines der krassesten pp-ge-Statements in letzter Zeit war, die rausgekommen sind?
Hat jemand von euch das Gollum-Game mitbekommen?
Nur mal so am Rande gefragt.
Also es gab mal wieder ein Game im Herr-der-Ringe-Universum und man hat Gollum gespielt.
Ich habe es mir nicht gekauft, ich werde es mir auch nicht kaufen.
Zumindest, das Game sah von Anfang an übelst für den Arsch aus.
Das Game ist rausgekommen, war halt uninspiriert und für den Arsch.
Da wurde quasi schon direkt, paar Tage nach Release, wurde ein Entschuldigungsstatement rausgehauen.
Und dass man jetzt hart daran arbeiten wird, so alle Expectations zu erfüllen und sonst was in der Richtung.
Und es war sofort klar, als man diese Meldung gelesen hat,
dieses Statement, das wurde schon geschrieben, während der Entwicklung.
Die wussten, dass das Scheiße ankommt.
Die wussten, dass es ein Kack-Game ist.
Die haben quasi das Statement, das Statement wurde quasi parallel zum Game schon geschrieben.
Anders kann es nicht sein, das ist echter Wahnsinn.
So ein pp-ge-Kram.
Die haben mittlerweile, das ist wirklich AAA-Development heutzutage.
Man schreibt die Entschuldigung an die Community und man gelobt Besserung, schon bevor das Game überhaupt fertig ist.
Das ist schon fertig geschrieben, liegt in der Schublade.
Das liegt in der Schublade ungefähr so, wie...
Ich habe mal eine Doku gesehen zur Mondlandung.
Leute...
Flache Erde und so, wir lassen es jetzt mal komplett raus.
Aber ich habe mal eine Doku gesehen zur Mondlandung.
Von der ich persönlich auch denke, dass sie stattgefunden hat.
Zumindest, jetzt mal Spaß beiseite.
Und dort wurde erzählt, dass selbst Experten gesagt haben, wenn sie optimistisch sind,
sie rechnen mit einer 50-50 Chance, dass das klappt.
Und nicht nur eine 50-50 Chance, dass das klappt, sondern eine 50-50 Chance,
dass die Astronauten wieder lebend heimkommen.
Und es wurde damals schon für mehrere Fälle,
wurden Reden und Presseerklärungen vorgeschrieben,
für den Fall der Fälle, dass das passiert.
So, Rakete explodiert beim Start, sie kommen nicht mehr zurück,
es crasht auf den Mond, sie stranden auf den Mond.
Da wurden im Vorfeld schon Pressemeldungen und Reden geschrieben.
Die lagen dort in der Schublade.
Für den Fall der Fälle.
Und so ungefähr stelle ich mir das aktuell bei AAA-Entwicklung vor.
Man schreibt die Entschuldigung schon mal im Voraus,
dass man sich ordentlich Gedanken zumachen kann
und sobald es dann eintritt, kann man die rausholen und direkt auf Twitter posten.
So wirkt das für mich mittlerweile.
Das ist halt leider mittlerweile so AAA-Game-Development.
PvP-Modus zu vernachlässigen.
Wo ich mich frage, wozu zum Fick wurde Overwatch 2 überhaupt schon veröffentlicht,
statt zu warten und sich in Ruhe um den PvE-Mode zu kümmern.
Oh.
Zu all dem Ganzen muss man aber sagen,
dass das Team von Overwatch 1 oder selbst das Team von Overwatch 2 am Anfang
gar nichts mehr mit dem heutigen Overwatch 2-Team zu tun hat.
Super viele Leute haben im Laufe der letzten Monate und Jahre das Team verlassen.
Und ich kann mir vorstellen, warum.
So wie das alles hier verlaufen ist,
hat sich das bestimmt niemand aus dem Team gewünscht.
Man kann sehen, wie passioniert und talentiert viele in der Crew sind.
Die Trailer sehen teilweise so cool aus.
Man weiß, dass die Leute etwas Großes aus dem Spiel machen wollten.
Und das stelle ich mir extrem demotivierend vor.
Du steckst da wirklich 3 Jahre vollster Energie rein
und dann wird sowas draus gemacht.
Man weiß leider aber auch, dass die Bosse von oben vor allem eins wollten,
nämlich Geld und zwar so schnell wie möglich.
Natürlich.
Hier sehen wir ein Produkt, das eigentlich so gut hätte werden können,
komplett unfertig und unter seinem Potenzial rausgeballert wurde.
Es ist einfach nur schade und ein perfektes Sinnbild
für den aktuellen Stand der Gaming-Industrie.
Da hat er recht.
Ja.
Ja.
Ja, da würde ich ihm recht geben.
Es ist 12 Uhr, Leute.
Ich hab Hunger.
Ratet mal, was es heute gibt.
Ihr kommt nicht drauf.
Lachs mit Nudeln, korrekt.
Hahaha.
Hahaha.
Hahaha.
Hahaha.
Hahaha.
Ihr habt's zuschaut.
Ihr seht schon, ihr habt das Pattern, Pattern erkannt.
Auch ohne Regex.
Ich erinnere dich nicht dran, aber du hast dich gerade selbst daran erinnert.
Alles klar, Leute.
So.
Gibt's irgendjemanden, den wir hosten können?
Mal auf die Schnelle geguckt.
Wem followe ich denn, der gerade on ist?
Leicht deutschsprachig und nicht so groß.
Mal gucken.
Sehe ich jetzt niemanden.
Gut, dann gehe ich jetzt off.
Ich hab Hunger, Leute.
Bis denn.
Macht's gut.
See you.
