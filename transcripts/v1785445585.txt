Das war's für heute, wir sehen uns beim nächsten Mal wieder, bleibt sauber, haut rein und bis zum nächsten Mal, tschüss!
So, da bin ich, News abchecken und labern, das stimmt so gar nicht, aber ich glaube es
nicht.
Da gibt's ja öfters Updates.
Hab ich euch erzählt, ich hab gestern auf der Arbeit den ersten Arch-Linux-User getroffen.
Wurde auch Zeit.
Lustigerweise ein Externer, der ordentlich Linux benutzen kann und nicht dieses komplett
übertrieben lockdownte Windows-Notebook benutzen muss.
So, ich mach mal kurz ein Update, dann können wir, jepp, dick, Salah, hier, Update mal schnell
machen.
Hallo?
Please, Update?
Nice.
Excellent Update.
Brauche kurz file-fat-chat, ich muss in den Keller und ein Molex zu SATA-Power finden.
Ah, okay.
So, was ist, naja, ich würd sagen, relativ in der Mitte, es ist jetzt nicht uralt, aber
das hat man schon eine Weile nicht mehr gebraucht, also ich würd schon noch sagen, in der vorderen
Hälfte, aber da eher zum Hinten, hinten hin.
Update, oh, es gibt, es gibt, yay, Zwölf jetzt, alles klar, muss man mal gleich gucken.
Shit of Shit-Hub, Version Zwölf, was ist denn da, gibt's da irgendwas Spannendes, haben
die sowas wie ein Change-Log?
Nee, das ist nicht, das ist nicht, nicht agile genug, ein Change-Log zu haben.
Die haben natürlich kein Change-Log.
Oh, ich hab nix gesagt, doch, die haben...
Die haben ein Change-Log.
Die haben sogar ein relativ gutes Change-Log, Chat, das Change-Log gefällt mir, wir sollten,
wir sollten auch so ein nices Change-Log erstellen.
Aber da müsste man sich Mühe geben, das ist natürlich schon ein bisschen schwierig.
Okay, Sekunde, ich muss mal kurz, das war eigentlich nur als Intro-Musik gedacht, ich mach mal,
Ich mach mal eine Runde Wuppwuppwupp an.
Wuppwuppwuppwupp.
Zu leise.
Wuppwuppwuppwupp.
Wuppwuppwuppwupp.
Wuppwuppwupp!
Ja, das ist eine gute Lautstärke.
Mein Chainsaw Pass Best Feature Ever, ja ist es ja auch, ich sehe, dass die Version 12
nichts großartig Spannendes dabei hat, ich denke, da können wir einfach updaten und gut
ist.
Ja, ja, mach mal updaten, gil.
Also wie gesagt, News Up checken machen wir heute nicht, wir checken vielleicht News Up
und labern auch auf jeden Fall, wir machen aber auch eventuell, vielleicht kann man das
ja nochmal reinschreiben, Mod Giz, vielleicht kann man ja reinschreiben, dass wir heute
auch ein bisschen PRs und Issues vom VMChamp noch uns angucken.
Ich müsste eigentlich auch mal an meinem Fiat Tool weiter programmieren, weil da habe
ich jetzt schon ein paar Issues offen auf GitHub und ein paar sind auch ganz ganz sinnvolle
Sachen.
Also zum Beispiel kann die neue App für den Fiat jetzt wohl anzeigen, welche Fenster,
ob man vergessen hat, Fenster aufzumachen und sowas.
Das heißt, da gibt es irgendeinen Sensor, müssen wir mal gucken, wie der heißt und
ja, dann müssen wir mal schauen, ob man das vielleicht eingebaut kriegt.
Musst ihr Version 12 auch anschauen?
Ach, das war gar nicht das Richtige, was ich habe.
Okay, guck mal, ja gut, ist auch 12.3, ihr habt ja auch recht.
12, okay, ah, auf, alter!
Das ist mal ein Release, hä?
Da geht es mal richtig zur Sache.
Oh ja, das brauche ich unbedingt, ich brauche RecX, um meine Pakete zu finden, ja gut, warum
nicht?
Das schadet ja nichts.
Womit machst du die Dot-Files?
Kommt, ach so, ah, du meinst, du meinst, du meinst den Dot-File-Manager?
Heutzutage ist Zoom-Link und kopiert man ja nicht mehr von Hand, coole Leute verwenden
ja einen Dot-File-Manager, hier, Schätzmoi, wobei das Französisch ist und wahrscheinlich
Schätzmoi oder irgendwie so heißt oder wie auch immer man das schreibt, Schätzmoi, wie
spricht man das aus?
Haben die da vielleicht eine Erklärung für Leute wie mich?
Ne, gibt's nicht.
Was, Schemois, Schätzmoi, ne Leute, ich glaube, ich glaube euch nichts.
Ich hoffe, ist mein Progurs nicht gut genug.
Boah, die haben aber jede Menge Sachen hier mit am Start, richtig, richtig, richtig nice.
Oh, cool, so, hat alles updatet, mal gucken, ob noch alles funktioniert, nachdem wir updatet
haben, ja, okay, scheint noch zu gehen.
Ich glaube, da war ein Kernel-Update dabei, ja, da war ein Kernel-Update dabei, das heißt,
Kernel-Update bedeutet erstmal eine Runde Reboot.
Ah, es war einfach nur langsam.
Ja, da weiß ich nicht, ob das so eine gute Idee ist, das hat bestimmt irgendwelche Seiteneffekte,
die man nicht haben will.
Ich meine, ich weiß es nicht, der ist nicht direkt in meinem Team, der macht Windows-Geschichten.
Ich vermute mal, dass er relativ jung ist, weil er hat geschrieben, er hat erst vor kurzem
seine Ausbildung fertig gemacht, also, ja, wahrscheinlich, wahrscheinlich, jemand der
noch, einer von ein bisschen jüngeren.
Als ob hier Windows-User anwesend sind, ja, kaum, kaum sich zu erklären, gell, aber gibt's,
gibt's tatsächlich.
Gut, ich meine, nur weil einer mit Windows sein Geld verdient, heißt das nicht automatisch,
dass er großer Windows-Fan sein muss, wobei ich schon gemerkt habe, Windows-Admins stehen
irgendwie schon auch ein bisschen auf Windows, weil, sonst hältst du das ja auch im Kopf
nicht aus.
Da wirst, da wirst du ja verrückt, wenn du Windows-Admin bist und eigentlich von Windows
nichts hältst.
Ich meine, könntet ihr euch, jetzt mal eine Frage an euch, Chat, könntet ihr euch vorstellen,
hauptberuflicher Windows-Admin zu sein?
Oder Geld, ja.
Gibt es das Cake-Windows-Build irgendwie zum Downloaden, ich glaube nicht, ne, das hat
damals, ich glaube, auch der SeriousMax gebaut, weiß nicht, irgendjemand hat's gebaut, hauptberuflich
ne, ne.
Also Windows, Windows-Admin könnte ich mir auch nicht vorstellen.
Also da müssten die mir wirklich nochmal eine ganze Ecke mehr bezahlen, dass ich freiwillig
Windows-Admin werden würde.
Dürfen leider kein Linux-Office, wir auch nicht, wir auch nicht, ich, ich werde die
aber die nächsten Wochen, Monate, auch mein Chef, ich werde die alle ein bisschen nerven,
weil aktuell ist das so krass Lockdown alles und du musst so mega Oldschool-Software wie
MobileXterm verwenden, da kriege ich Anfälle bei.
Also sobald ich wirklich anfangen muss, was richtig zu machen, nachdem ich genug durchblicke,
dann werde ich feststellen, dass ich nix richtig machen kann.
Ich kann doch nicht den ganzen Tag MobileXterm verwenden, die haben doch nicht mal WSL, da
kriegst du, da kriegst du komplette Zustände.
Ich, ich, ich werde da so lange rumnerven, bis da irgendwas, was gangbares gibt.
Welches Text-to-Speech verwendest du für dein Soundboard?
Eine Linux-VM können wir wahrscheinlich auch kriegen, aber ich weiß nicht, ob man dort
irgendwas Nennenswertes mit machen kann dann.
Nee, nee, nee, nee, Leute, Leute, es ist noch viel schlimmer, es ist noch viel schlimmer,
als ich euch das letzte Mal erzählt hab.
Ich hab euch auch im letzten Steam erzählt, ich hau mir einfach Westterm drauf auf meinen
Windows, auf der Arbeit.
Die haben eine Software im Hintergrund laufen, die jegliche Software, die nicht bekannt ist,
die Ausführung verhindert.
Stellt euch das mal vor.
Du kannst überhaupt nicht arbeiten mit dem Notebook, das ist unmöglich.
Weiß nicht, wie das Ding heißt, keine Ahnung.
Das ist, das ist, das ist unmöglich, damit zu arbeiten, das geht nicht.
Haha, ich hab, das geht nicht.
Mobile X-Term, Alter!
Ich weiß nicht, ich weiß nicht, machen aber viele.
Ähm, Mobile X-Term, ich mein, Mobile X-Term ist keine jetzt irgendwie super, super schlechte
Software oder so, aber es ist schon ziemliches, ziemlicher, aber ziemliches Oldschool-Feeling.
Mobile X-Term zu verwenden.
Also Mobile X-Term war eine ganze Zeit lang relativ gut, weil es ein gebundeltes Sequin
ist, also Sequin, Sequin, wie auch immer man das ausspricht, quasi WSL, bevor es WSL gab.
Nur, dass das ziemlich viele Probleme immer noch hat, zum Beispiel, wenn du Git-Repos
auf Windows auscheckst und sowas, gibt's Probleme, ist auch keine gescheite Shell dabei.
Ja, also, das ist wirklich so ein bisschen wie 2003 Linux administrieren, so, wenn man
Mobile X-Term, wenn ich dann auch schon sehe, dass man SSH-Sachen über irgendwelche UIs
zusammenklicken soll und sowas, da krieg ich totale Anfälle.
Also ich brauch irgendeine VM, wo ich Rootrechte drauf hab, die muss ja auch nicht überall
hinkommen, das ist ja auch nicht das Problem, aber ich brauch irgendeine gescheite Shell,
wo ich drauf arbeiten kann und wo ich dann vielleicht auch mal schnell lokal mal ausführen
kann, mal Terraform laufen lassen, gucken, ob das alles passt.
Ja, ich hab mir schon überlegt, ob ich mich über Visual Studio tunneln soll, was ja theoretisch
möglich ist, aber ich glaube, das finden die dann nicht so geil.
Hab ich auf der letzten Arbeit gemacht, jetzt kann ich's ja erzählen, jetzt kann ich's
erzählen, bei meinem letzten Job hatten sie ja auch teilweise so Anwandlungen, so nach
dem Motto, man darf sich nirgendwo mehr hinkonnekten, aber wir vertrauen Microsoft.
Wisst ihr, was ich da gemacht hab?
Da hab ich mir Visual Studio Code installiert und hab mich über Microsoft Codeshare, hat
das jemand schon von euch mal verwendet, Codeshare?
Das ist so eine, da kannst du andere Leute in deinen Editor einladen, die dann da drin
tippen können.
So, und darüber kannst du auch Ports weiterleiten.
Da hab ich über Microsoft Codeshare, weil das freigeschaltet war nach Azure zu den Microsoft
IPs, über Codeshare hab ich dann Ports weitergeleitet, dass ich dann ordentlich mich connecten konnte
und vor einer ordentlichen Shell arbeiten und sowas.
Ja, das kannst du ja mal komplett knicken.
Eigenes Blog, kann ich wenig zu sagen, hab ich mir noch nie Gedanken drüber gemacht
und wär ich auch persönlich viel zu faul, eigenes Blog in der heutigen Zeit, ich glaube,
wenn du guten Content machst, ist es auf YouTube aktuell viel einfacher, Leute damit zu erreichen.
Wobei ist halt die Frage, ob dir die Audio-Video-Geschichte liegt, so reines IT-Blog, mir fallen da im
deutschsprachigen Raum nicht viele ein, die irgendwie erfolgreich werden oder langfristig
am Start sind.
Feefe gibt's, wobei ich Feefe, ich weiß gar nicht, gibt's den Typ überhaupt noch, hab
ich ewig nicht mal gelesen, interessiert mich auch nicht mal, was da so schreibt, also keine
Ahnung, ich hab da vor Jahren schon aufgehört zu lesen.
Gibt nicht wirklich viel, gibt nicht wirklich viel deutschsprachige IT-Blogs, die mir zu
einfällt.
Ja, ist das ja auch alles fast nur noch zum Flamen, wobei, der hat früher schon gerne
geflamed.
Ja, vielleicht nicht mehr, wie gesagt, ich hab bestimmt die letzten 10 Jahre oder so,
8, 9, 10 Jahre nicht mehr gelesen.
TS-Fuchs, danke für den Sub.
Und ich hab noch was übersehen, Don Quijon, danke schön, POG-Subscription.
Ja, wahrscheinlich zurecht, oder?
Über Azure kann man flamen, Leute, ich kann euch aber sagen, man kann über alles flamen,
es gibt, es ist alles, irgendwo kann man überall dran meckern.
Ja, du kannst, ich könnte auch den ganzen Tag über irgendwelche blödsinnigen Entscheidungen
von Linux-Distributionen flamen oder dass 2023 auch mit Sicherheit das Jahr des Linux-Desktops
wird.
Sind wir uns einig, oder Leute?
Glaubt ihr auch dran?
Ja, also, sind wir uns einig, oder?
2023 wird das Jahr des Linux-Desktops.
Also, cringe, wenn ihr nicht dran glaubt.
Leute, ähm, die Idee, glaub mal, just for fun, ich muss das ja immer ein bisschen anonymisieren,
aber ich hab gelesen, dass dort, wo ich jetzt arbeite, dass sie tatsächlich überlegt haben,
ob sie nicht einen Master-Slave-Kubernetes-Cluster bauen, also einen oldschool-umschaltbaren Cold-Standby-hochverfügbaren
Kubernetes-Cluster, also quasi, so wie man 2005 Hochverfügbarkeit gemacht hat, gepaart
mit Cloud-Technik, wo ich mir dann denke, Leute, irgendwie ergibt das keinen Sinn.
Wenn ihr den Kram in der Cloud hostet, dann macht halt euren Cluster groß genug über
mehrere, meinetwegen auch mehrere, ähm, Geostandorte, was auch immer, und dann ist gut, aber dann
nochmal einen Cluster irgendwo rumstehen zu haben, der nur da ist, auf den man umschalten
kann, falls der andere kaputt geht, das ist nicht so Sinn und Zweck der Sache, wie man
den in der Cloud normalerweise aufbaut.
Aber ich glaube, das machen sie jetzt noch nicht.
Aber da hab ich gedacht, hä?
Was ist das für eine Logik, ey?
Aber dann merkt man's, das ist ja auch eine große Versicherung, und die sind teilweise
schon sehr elefantenmäßig unterwegs, so wie ich das besser mitgekriegt hab, aber hey,
das muss auch nicht wirklich schlecht sein, das hört sich jetzt erst mal so schlecht
an, das muss nicht schlecht sein, das hat den Vorteil, wenn man nicht einfach nur lahm
ist, um lahm zu sein, sondern wenn man lahm ist, um die Sachen auch dementsprechend gut
zu planen und gut zu durchdenken und immer bei jedem Schritt zu wissen, was jetzt Auflagen
sind und was jetzt sagt, da kann das durchaus seinen Vorteil haben, wobei man halt auch
irgendwie aufpassen muss, dass es nicht zu langsam wird.
Nächste Woche Dienstag wollen sie Sprint-Meeting machen bis 17 Uhr, ich weiß nicht, wie das
funktionieren soll, ich soll den ganzen Tag, nächsten Dienstag, den ganzen Tag wird da
nur gemietet, schaff ich nix, ach, das wird was, ich sag's euch Leute, aber bis jetzt
find ich's gar nicht übel.
Ich fänd's auf jeden Fall angenehmer, als beim letzten Arbeitgeber, zumindest hat das
das Potenzial, angenehmer zu sein, aktuell versteh ich ja noch nicht wirklich viel, weil
alle mit Abkürzungen um sich schmeißen, aber es hat zumindest nicht so diese Untergangsstimmung,
wie's bei dem anderen Laden hat.
Wie viele Leute kümmern sich bei euch um das reine Kubernetes-Cluster?
Äh, das kann man so pauschal nicht sagen, es gibt ja mehrere Cluster und es gibt auch
mehrere Leute, die für unterschiedliche Sachen zuständig sind.
Also aktuell sind wir zwei Leute für acht Cluster.
Ich weiß nicht, wie, also, also, ähm, infrastrukturtechnisch, ich weiß nicht, wie sie sich das genau auf
Dauer vorstellen, keine Ahnung, wie wartungsintensiv das wird, kommt ja ein bisschen drauf an,
was die, was die vorhaben, nee, keine Ahnung, ja, das muss ich, muss ich mal gucken.
Muss mal grad was gucken, ob ich die letzten Steuern als Finanz, ja, hab ich, also 806
Euro wieder, keckel.
Dachte, ich hab nämlich grad hier die, den Brief gesehen, auf dem Schreibtisch, hab mir
gedacht, Mist, hast du das schon bezahlt oder nicht, muss grad noch in die App gucken,
aber ich hab bezahlt.
Wie oft in der Woche musst du ins Büro einmal, nee, ja, also einmal bis alle 14 Tage, diesmal
mach ich's noch jede Woche, also ich war ja diese Woche da und nächste Woche Dienstag
geh ich auch nochmal hin, aber dann erst übernächste Woche wieder.
Ja, bei euch sind's Argo-Apps, also dort, wo ich jetzt bin, die sagen zwar, sie machen,
sie machen cooles GitOps, aber eine, ein, bis zum Ende sieht das für mich zum aktuellen
Zeitpunkt so aus, ein super komplizierten Build-Prozess und ein super komplizierter Provisioning-Prozess
und die Sachen werden auch nicht über irgendwie einen Argo-CD oder einen Flux oder sowas in
Kopenhätis jammels abgelegt und dann applied, sodass es nachvollziehbar ist oder aus einem
Extra-Repo, sondern es ist eine Mischung aus Terraform-Kopenhätis-Provider, was ich
so auch noch nirgendwo gesehen hab, das fand ich bisher immer super eklig, Kopenhätis-Definition
in Terraform zu machen, anstatt es einfach in Native-Kopenhätis jammeln und das andere
muss zwingend irgendwie in Helm-Charts verpackt werden, dass es funktioniert, dass es ganz
weird-champ bisschen, so wie ich's bis jetzt mitgekriegt hab, aber ich mein, deswegen hab
ich jetzt ja die Chance, wenn ich bin ja neu, kann ich auch mal ab und zu blödes Zeug
fragen, da ein bisschen was dann zu verbessern, falls das gewollt ist, das weiß ich nicht,
das weiß ich echt keine Ahnung, ich kann dir sagen, was in meinem Team, wieviel das
sind, ich glaube es sind 6 Stück, ich bin mir nicht ganz sicher, wieviel es insgesamt
sind, ich mein, die haben ja tausende Mitarbeiter, keine Ahnung, wieviel groß das wirklich ist,
hi, moin, keine Ahnung, wieviel das wirklich sind, wahrscheinlich haben die auch einige,
ich mein, mir ist zwar immer noch schleierhaft, wer wirklich Windows-Admin werden will, aber
okay, also ich hab mir überlegt, wir machen folgendes, wir labern ein bisschen und gucken
uns vielleicht ein paar aktuelle News an und sowas, willst du mal ein Windows-Admin interviewen
ganz ohne Safeware, weil der Typ ist in grenzenloser Masse und schießt offensichtlich, wieso bist
du Windows-Admin oder meinst, kennst du jemanden, der Windows-Admin ist, ja, ich kenne auch
welche, ich kenne auch welche, ich kann es aber nicht nachvollziehen, wie man das freiwillig
machen kann, aber hey, ich soll, ich will das ja gar nicht schlecht reden, wenn einer da
Bock drauf hat, soll er es machen, ich kann durchaus verstehen, dass es auch nicht jedem
liegt, was ich mache, ich mein, guck mal, es gibt Leute, die kriegen Anfälle, wenn
sie einfach nur noch sowas vor sich haben, wobei ich froh wäre, wenn ich kein Windows-Notebook
vor mir hätte, sondern sowas hier, der kann aber auch Linux, ja, dann ist er schon mal
nicht der typische Windows-Admin, der typische Windows-Admin kriegt, kriegt schon mal Putty
nicht geöffnet, um sich zu verbinden und die denken auch immer noch, Putty ist die
Höhe, der Gipfel der Entwicklung, ja, aber das hab ich schon, Gammel0, dankeschön für
den Sub, also es gibt ja wirklich Leute, die denken, Putty ist so, ist wirklich der
absolute Gipfel, die Höhe, der Entwicklung, um sich per SSH verbinden zu können und eigentlich
kein Wunder, dass sie das kacke finden, wobei man halt auch ehrlich sagen muss, so richtig
geile Sachen unter Windows gibt es nicht, mittlerweile, das Windows Terminal ist nice,
das kann man verwenden oder eben West Term oder irgendwas anderes, was halt auch für
Windows gibt, nee, brauchen wir nicht, übrigens, die haben noch nicht mal bei mir auf meinem
Windows-Notebook das neue Windows-Terminal installiert, seriously, das modernste, was
da drauf ist, ist Mobile X Term, ich muss mich da erstmal dran gewöhnen, ganz grausam,
ganz grausam, nicht mal das Windows-Terminal ist drauf, das wird was, Mensch, ich werde
auf jeden Fall rumnerven müssen, dass man vielleicht so ein paar Sachen noch hinzufügt,
was man installieren kann, weil aktuell ist echt, ich weiß nicht, wie ich da was machen
soll, die Leute, ihr müsst euch mal vorstellen, die Leute sind dort schon so genervt, was
heißt genervt, so gegängelt mit, kann man nicht, dass man nichts benutzen kann, dass
sie zum Editieren von Terraform-Dateien lieber, lieber direkt den GitHub-internen Editor
verwenden, anstatt Visual Studio Code zu starten, weil Visual Studio so laggy ist durch die
ganzen acht Antiviren-Programmen, die da drauf sind, also die benutzen den GitHub-Editor
lieber als Visual Studio Code, weil Visual Studio Code zur Unbenutzbarkeit verantivirust
ist auf dem, auf dem Notebook, also das ist wirklich, das ist wirklich painstjamp, da
zuzugucken, ja, weil, weil das natürlich viel securer ist als Linux, ist doch klar, ich
kopiere alle möglichen Is, ja, self, dankeschön für den Sub, funktioniert das gescheit, Wim
im Visual Studio, Terminal, ja, aber von, von dort kannst du wahrscheinlich nirgendswo
groß drauf zugreifen, oder, und im Browser wird es auch nicht schneller sein als Native
App, Terminal, ja, das kann man so nicht sagen, es gibt auch immer noch Terminals, die Probleme
haben mit 32-Bit-Farb-Support, oder 24-Bit ist es ja, kannst du mal erklären, was die
ganzen Terminal-Emulatoren machen, was ist denn ihre Aufgabe, im ersten Mal sehe ich
die alle ähnlich aus und die Shell ist wiederum ja wieder etwas anders, das ist richtig, ja,
was macht ein Terminal-Emulator, ein Terminal-Emulator ist dafür da, dein Terminal zu rendern, die
Shell ist ja letztendlich das, Terminal-Emulator muss dein Input annehmen, irgendwie Tastatur
drücke, weiterleiten an die Shell, der muss dein Terminal rendern, der muss gucken, dass
sowas wie Schriftarten und Zeilenabstände und sowas funktioniert, der muss verschiedenste,
da gibt es 30 Milliarden verschiedene Standards und Sätze an Escape-Sequenzen kennen, wo man
Sachen damit beeinflussen kann, der kann vielleicht so Sachen wie Tabs, der kann beispielsweise
auch Terminals splitten und solche Geschichten und bestimmt noch mehr, wo mir jetzt so spontan
nicht einfällt, ja, das würde bei uns auch gehen, das würde bei uns auch gehen, über
Citrix im Browser Putty öffnen, da dreh ich ja absolut am Rad, wichtig, genau, Geräusche,
wenn man Tab, Tab drückt, Punkte verballern, ja oder nein, mach wie du willst, ja, also
das hier ist ein Terminal-Emulator, der sorgt dafür, dass man was sieht, der sorgt dafür,
dass man Tabs machen kann, dass man Terminals splitten kann, dass der Inhalt geupdated wird,
gerendert wird, dass das mit der Schriftart funktioniert, also alles, was Input, Output
ist, drumherum, um deine Shell, brauchst du einen Terminal-Emulator dafür, deswegen ist
ja auch das Standard, deswegen ist ja auch das Standard-Windows-Terminal, das ist nicht
mehr das Standard-Terminal, das ist schon die neue Terminal-App, so kacke, ja, transparenter
Hintergrund ist extrem wichtig, wie man hier sieht, ihr seht es vielleicht ein wenig durchschimmern
im Hintergrund, aber man sieht hier einen transparenten White-Pepo-Happy, also quasi
Peak-Terminal-Design, also ich hoffe, ihr seht ihn auch, da ist er, guck hier, da,
ja, das wäre schön, das ist bei uns leider nicht so, ja, ja, korrekt, korrekt, das wäre
wunderbar. Benutzt du OMY-ZSH oder ähnliches? Ne, tatsächlich mache ich gar nicht, also
OMY-ZSH fand ich schon immer zu, wie soll ich sagen, zu übertrieben für die Sachen,
die man braucht, ja, also bei OMY-ZSH ist es so, du brauchst, keine Ahnung, durchsuchbare
History und du aktivierst das Plugin dafür und hast noch 30 neue Shortcuts und 300 Zeilen
ZSH-Config und sowas in der Richtung. Ist natürlich ganz praktisch, wenn man sich nicht
selbst damit beschäftigen will, also wie ich das aktuell habe, ist relativ einfach, ich habe
eine Config-Datei und fertig und du siehst, das ist nicht sonderlich lang, was ich an Config
habe und das reicht, ich meine, wir können uns, wenn ihr wollt, wenn ihr wollt, können wir uns
sogar ganz mal kurz angucken, weil sonderlich, sonderlich gut kommentiert und beschriftet
ist das ja nicht. Wer meine Dot-Files sich angucken will, kann das hier auf GitHub machen,
da sind alle drin, von der WimRC bis zur Westterm, Lua, Config, alles drin, was man so braucht.
Also, wobei ich ehrlich sagen muss, so ganz genau erklären, aus dem Kopf weiß ich es
gar nicht mehr. Also das ist auf jeden Fall für Bash-Kompatibilität, was Autocomplete
angeht, dass du manche, ich glaube CubeCTL zum Beispiel, CubeCTL ist, glaube ich, nur
kompatibel mit Bash-Autocomplete, wenn ich das richtig in Erinnerung habe, dass solche
Sachen gehen, dass dafür braucht man die Bash-Completion. Bin mir nicht ganz sicher,
ob es CubeCTL war oder was anderes. Das ist der Style, wie die Completions aussehen.
Select-Word-Style, das ist beim Löschen, guck mal, ich zeig euch mal was. Also, wenn
ich hier eingehe, bla bla bla bla bla bla bla bla bla bla bla bla, und wenn ich jetzt
drücke STRG-W, dann ist glaube ich das, an welchen Zeichen er stoppt, dass er beispielsweise
ein Minus als Wort-Trenner sieht und sowas. Weil, ich hab das schon bei ganz vielen Leuten
gesehen, dass die hier sowas machen, so und dann feststellen, ich hab mich vertippt und
dann entweder so oder so und sowas in der Richtung. Dabei ist es ganz einfach, man drückt
ALT-Pfeiltasten, wobei ich keine Ahnung hab, ob das die Defaults sind, das ist die, die
ich halt benutze, kann durchaus sein, dass die Defaults sind. Ich hab ALT-Pfeiltasten,
damit kann ich immer an den jeweiligen Wortanfang springen oder ich kann CTRL-W drücken, das
ist Backwards-Wörterlöschen. Dafür ist das, wenn ich das richtig im Knopf habe. Dann
hab ich Auto-CD. Auto-CD ist das, wenn ich jetzt, also wenn ich so mache, ist klar, dass
es funktioniert, aber ich kann auch nur Repos machen und dann wechselt er auch rein, ohne
dass ich CD davor schreiben muss. Das ist dafür, dass wenn man ein Leerzeichen, wenn
man ein Space am Anfang macht, dann landet das nicht in der History. Guck. Nicht in der
History drin. Okay, ich hab zu oft LS gemacht. Keckel. Guck, steht nichts drin in der History.
Kein Keckel. Dass wenn man Leerzeichen vor die Kommandos macht, dass dann der Befehl
nicht in die History kommt. Das ist zum Beispiel ganz praktisch, wenn man sowas machen will
hier. Blub, my password. Und ich will nicht, dass es immer in der History steht. Interactive
Comments. Comments ist, glaube ich, dass ich sowas machen kann. Dass ich die aktuelle Zeile
auskommentieren kann. Ich glaube, sonst geht das nicht. Was wiederum ganz praktisch ist.
Stellt euch mal vor, ich hab jetzt hier ein elendlanges Kommando geschrieben und hab festgestellt,
ah Mist, ich muss ja noch was machen, bevor ich das ausführe. Da könnte ich es natürlich
kopieren, in die Zwischenablage machen oder ich kommentiere das einfach aus, mach das,
was ich machen will, geh zurück und füge es dann wieder ein. Ink Append History ist,
glaube ich, dass er das während der laufenden Session schon aktualisiert. Share History
ist tatsächlich ganz nützlich. Das heißt, wenn ich jetzt in dieser Shell Session was
schreibe, dann kann ich hier auf einem anderen Shell direkt drauf zugreifen. Autopush CD
ist für hier CD Repos. So und jetzt kann ich eins drücken und zwei und drei und vier
und sonst was. Glaube ich zumindest, dass das die Funktion ist. Da kann ich, hab ich
quasi so ein Stack, so ein Stack mit, auf den Zahlen, wenn ich die eingreifen, so ein
History aus Repos, äh nicht aus Repos, aus Verzeichnissen, wo ich hinspringen kann. Ich
hab legit keine Ahnung, wofür die zwei Optionen sind. Das hier ist Trick 17. Habt ihr schon
mal aus Versehen Ctrl S in der Shell gedrückt? Wisst ihr, was dann passiert, wenn ihr Ctrl
S drückt? Da passiert nicht das. Das kann ich euch schon mal verraten. Das passiert
nicht. Was passiert, wer ist High IQ? Wer weiß das? Was passiert normalerweise, wenn
man Ctrl S drückt im Terminal in der Shell? Okay, habt keine Ahnung. Dann freest die Shell.
Die Freeze, das nennt sich nicht, das nennt sich nicht Freeze, das nennt sich irgendwie,
irgendwie so ein uralt Feature hier. Pause Flow Control ist das. Ja, das ist irgendwie
so ein Feature aus, fragt mich nicht, Schreibmaschinenzeiten oder so. Niemand, niemand braucht Ctrl S.
Deswegen hab ich Ctrl S ausgeschaltet. Ctrl S, ich glaube das ist das, um Ctrl S auszuschalten.
Ach ne, das hier ist der Alias für das Springen über Verzeichnisse, wo ich jetzt aktuell
halt in keinem Verzeichnis war, aber jetzt seht ihr es, kann ich jetzt hier im Verzeichnis
her springen. Das ist, wo meine History liegt. Das ist, wie groß die History sein darf.
Wobei ich glaube, mittlerweile kann man dort auch irgendeinen Befehl eintragen für Unlimited
History. Geht glaube ich auch, man muss das nicht auf paar Milliarden setzen. Das hier
sind paar Keymappings, weil die oftmals rumbacken. Das ist, dass man Alt, Alt Punkt machen kann,
dass man mit Home Taste am Anfang der Zeite Ende an Ende auf der Zeile, dass der Entfernen
Knopf richtig funktioniert, dass man Alt, das ist auch ganz praktisch, dass man Alt Raute
drücken kann, zum Auskommentieren und Enter drücken, History Search und Wort vor und
zurück springen. Dann habe ich ein Alias für Speicherauslastung, der broken ist, weil
ich SMEM nicht installiert habe, glaube ich. Oh, das ist, das brauche ich gar nicht mehr,
das kann ich wegschmeißen, das benutze ich eigentlich eh nie. Dann habe ich ein paar
Aliase für meine unterschiedlichen Konfigs, also ez ist zsh-konfig, ei ist i3, das habe
ich irgendwie doppelt definiert, warum auch immer. Eigentlich ziemlich sinnlos, dass das
doppelt definiert ist. Edit Western Terminal WimRC und Starship, falls ich da mal was anpassen
will, kann ich es so ändern. Dann habe ich ein Curl, ganz wichtig, ein Curl fürs Wetter,
essenziell mit Image Support im Terminal. Neun Grad in Frankfurt und die Aussichten,
morgen wird auch relativ gutes Wetter. History, wenn ich History eingebe, das geht bestimmt
noch anders, bekomme ich die komplette History und nicht nur die nächsten zehn. Ich glaube
bei Nintendo in der IT zu arbeiten muss furchtbar sein. Ja, das kann gut sein, ich kenne einen,
der bei Nintendo gearbeitet hat, wobei, also jetzt, Ex-Kollege hat bei Nintendo gearbeitet,
ist aber, als die noch in Groß-Ostheim waren, Klein-Ostheim, Groß-Ostheim, wo war Nintendo?
Groß-Ostheim, oder? Ja, genau, in Groß-Ostheim. Er hat bei Nintendo in Groß-Ostheim gearbeitet
damals und der hat so ein paar Storys erzählt, dass die beispielsweise japanische Manager,
damals aus Japan, gut, wo soll das sonst, japanische Manager herkommen, dass japanische
Manager aus Japan nach Deutschland geholt wurden, um dort die japanische Arbeitskultur
unter die Leute zu bringen und das hat nicht wirklich gut funktioniert, hat er mir erberichtet.
Hat nicht wirklich gut funktioniert und dann hat irgendjemand bei Nintendo auch vorgeschlagen,
lasst uns doch einen Betriebsrat gründen und daraufhin muss der japanische Manager gesagt
haben, also wie gesagt, Hörungssagen von einem, der früher bei Nintendo in Groß-Ostheim gearbeitet hat,
hat gemeint, ja, wir könnten auch einen Betriebsrat gründen und dann hat der japanische Manager
wohl einfach gesagt, nee, das machen wir nicht, so als könnte er was dazu sagen, der hat einfach gesagt,
nein, das machen wir nicht und dann haben die dem gesagt, das kannst du eigentlich, also du darfst
das eigentlich gar nicht ablehnen, weil das überhaupt nicht dein Ding ist, das abzulehnen,
also doch, das machen wir nicht, Betriebsrat gab es nicht.
Wie geht es auf der neuen Arbeit? Tatsächlich ganz gut, ich habe noch überhaupt keinen Plan,
weil so viele Abkürzungen und neues Zeug, aber eigentlich ganz nice bis jetzt.
Also ich bin froh, dass ich gewechselt bin, jetzt schon.
So, dann machen wir schnell noch mal kurz die Shell-History fertig.
So, weil ich immer Etcher tippe für USB-Images, habe ich ein Alias gemacht, dass Etcher jetzt
zu USB-Imager geht, weil ich es absolut nicht einsehe, ein Elektronenprogramm zu installieren,
bloß um ein DD zu machen auf einem USB-Stick und weil ich auch zu faul bin, DD im Terminal zu tippen
und man da aufpassen muss.
Der Kollege im Chat, der dich geliebt hat, keine Ahnung, weiß ich doch nicht, wahrscheinlich nicht,
aber vielleicht, ich meine, er hat geschrieben, er guckt schon relativ lang, also warum nicht,
warum nicht, kann doch sein, weiß nicht.
So, dann habe ich LS tatsächlich gealiast, das kann ich übrigens löschen, dann habe ich LS gealiast,
weil ich Color LS haben will und standardmäßig irgendwie aus irgendwelchen Gründen nicht Color LS war.
Dann habe ich Watch alias, dass man sowas hier machen kann im 0,2 Sekunden, also im 200 Millisekunden-Takt.
Also wenn ich irgendwas updaten will, kann man jetzt schlecht, mir fällt jetzt nichts ein, wie ich das zeige,
Date, mit Date kann ich es gut zeigen, Date, da müssen wir Millisekunden haben, keine Ahnung.
Ja, das updatet, das updatet alle 200 Millisekunden den Befehl.
Dann habe ich was für Deep, für Deepel, zum, kann ich sagen, Deepel,
ähm, keckel, Omega 0 und dann kann es mir übersetzen, was, ok, kann es nicht.
But why?
Ok, Deepel ist kaputt, dann schmeiße ich das wieder raus, kann ich das, dann kann ich das auch im Browser machen.
Wobei, ich lasse es mal drin, das ist eigentlich eine ganz, ganz coole Funktion,
dass ich das direkt translaten kann auf der, auf der Shell.
Dann habe ich ein alias noch für AM.
Ja, jede, jede Firma kürzt gerne ab, wie verrückt, das ist normal.
Dort, wo ich herkomme, war das auch so.
Dann habe ich AM alias und ich glaube, das habe ich euch schon mal erklärt, aber,
hi IQ, wisst ihr, warum ich AM alias habe?
Wobei es ja kein Alias ist, es ist ja eine Funktion Rapper unter AM.
Wisst ihr, warum ich das gealias habe?
Und warum ich es genau so gemacht habe und nicht,
und nicht, wie das teilweise auf Stack Overflow vorgeschlagen wird.
Ich bin mir nicht sicher, ob es die eleganteste Art und Weise ist, das zu machen.
Also, ich zeige, ich zeige euch jetzt mal was.
Es gibt ja ein Problem unter Linux, das kennen ja wahrscheinlich alle,
die Linux schon ein bisschen, schon bis, was?
Temp, Temp.
Das kennen ja wahrscheinlich alle, die Linux schon, Kekül, beste, so Kekül,
ist ein sehr guter, sehr guter Ordner.
Das kennen ja wahrscheinlich alle, die Linux schon mal ein bisschen verwenden.
Wenn ich, wenn wir jetzt mal hier touch, 0 zu 100.
So, jetzt haben wir 100 Files.
Wenn ich, wenn ich jetzt die eine Datei löschen will, so 99, dann ist es kein Ding.
Dann funktioniert das.
Wenn ich Sternchen mache, das ist schon ein bisschen gefährlicher.
Und jetzt fragt er mich, ey, guck mal da, willst du wirklich alle 100 Dateien löschen?
Und wenn ich jetzt sage, minus EF, dann fragt er mich trotzdem, willst du alle Dateien löschen?
Normalerweise ist ja minus EF recursive force, also sprich, damit kann man auch mkdir 0,
gehen wir mal nach 0 rein, so, nicht nach lel, nach 0, touch, machen wir nochmal 100 Dateien hin.
So, und wenn ich jetzt sage, EM minus EF auf diesen Ordner hier, dann wäre ja normalerweise alles weg.
Was doof ist.
Und ich habe das Alias, dass ich diese Abfrage hier kriege.
Und zwar habe ich das alles mit minus Groß I.
Was macht minus Groß I?
Minus Groß I ist interactive, allerdings ein ganz bestimmtes interactive,
nämlich, er promptet nur, wenn es mehr als drei Dateien sind, die du entfernen willst,
oder wenn du recursive ein Verzeichnis löschen willst.
Das heißt, es ist nicht so nervig wie minus I, ist aber trotzdem sicher, um große Verzeichnisse aus Versehen zu löschen.
Und ich habe das in dieser Reihenfolge gealiast, weil normalerweise würde,
ich zeige euch das mal, hier kommt die Abfrage, wir machen jetzt mal bind EM, das ist dann ohne den Alias.
So, wenn ich jetzt machen würde, EM minus EF 0, bam, weg, ohne Frage.
Und wenn ich jetzt sagen würde, beispielsweise minus I hier vorne, dann kommt trotzdem keine Abfrage.
Wenn ich allerdings sage, minus I hier hinten, dann kommt eine Abfrage.
Also, es gilt immer, der Parameter, wenn es um Force versus Interactive geht, der zuletzt genannt wurde.
Also wird Force hinten genannt, als letztes genannt, dann gilt Force,
wird Interactive als letztes geschrieben, dann gilt Interactive.
Das heißt, indem ich das so aliast habe, Dollar, Add Zeichen sind quasi alle Parameter, die ich eingebe.
Also, wenn ich hier EM minus EF 0 eingebe, dann kommt hier diese Parameterliste.
Und dadurch, dass ich hier immer zwangsweise minus I hinten habe, dann kann ich nie aus Versehen Verzeichnisse löschen.
Jetzt gibt es natürlich noch eine Frage.
Mal genommen, ich habe einen Git-Repo.
Mal genommen, ich habe hier einen Git-Repo geklont und ich will das jetzt löschen.
Da werdet ihr jetzt feststellen, naja, ist doch vielleicht ein bisschen nervig.
Da waren jetzt nicht viele Files drin, aber ihr könnt es euch vorstellen.
Git-Repos können schon ganz schön groß werden.
Und was bringt denn ein kleines I, dass er immer nachfragt?
Dass er immer nachfragt. Großes I fragt nur bei mehr als drei Dateien nach, kleines I fragt immer nach.
Oder bei Recursive.
So, und natürlich ist es blöd, wenn ich jetzt viel...
EM minus EF KQÖ.
So, dann ist es weg.
Aber wenn man solche Sachen hat, wo extra gefragt wird, wie zum Beispiel hier bei Git-Directories,
dann gibt es noch das Zweite, was man machen kann, wenn man sich wirklich sicher ist, dass man es löschen will.
Das finde ich ist wirklich eine gute Kombination.
Also wenn ich mir wirklich sicher bin, dass ich hier das Verzeichnis löschen will,
dass ich es wirklich weg haben will.
Ja, da sagt hier, willst du Recursive? Oh ne, ich muss jetzt 100 Dateien bestätigen.
Dann ist es ganz einfach, dann muss ich Yes pipen nach EM.
Und das hier, Leute, ohne Scheiß, das kannst du nicht mehr aus Versehen machen.
Das geht einfach nicht. Also da musst du wirklich sicher sein, was du machst.
Und dann ist es weg.
Dann seht ihr, es ist weg.
Ich finde, das ist wirklich bisher der beste Kompromiss, den ich über die letzten paar Jahre so ausgetüftelt habe,
für mich aus Einfachheit zu benutzen und sicher genug.
Man kann natürlich solche Programme verwenden, die EM aliasen auf ein anderes Kommando, was es dann in den Mülleimer schiebt.
Aber das mag ich nicht so.
Ich finde, das wirklich ist die beste Kombination.
Ich bin es ja für mich gewohnt, was EM angeht.
So, das hier war für irgendwelche, das war hier für GitHub CodePilot, glaube ich, war das.
Wenn ich es noch richtig auf die Reihe bringe.
Hier, Ask, Generate Password JavaScript.
Ja, genau.
Weil das ein ziemlich schlechtes Passwort ist.
Aber okay.
Please don't run a command that you don't understand.
Ja, dann würde in IT ja gar nichts passieren.
Das war ein Shell-Wrapper für GitHub CodePilot, aber den verwende ich so gut wie gar nicht.
So, dann haben wir ein Alias für kubectl, einfach nur K.
Was tatsächlich ganz praktisch ist, weil man schreibt so oft kubectl, wenn man das benutzt.
Dann habe ich noch ein Shell-Wrapper für chat-gpt, wobei ich den eigentlich auch so gut finde, ich verwende.
Dann einmal ein Alias für surf.
Das ist ganz praktisch, wenn ich den Inhalt vom Verzeichnis, ja, Touch1,
wenn ich jetzt diesen Ordner mal auf die Schnelle in einem Web-Server,
Localhost Port 8000, wo ist es jetzt?
Localhost Port 8000.
Dann seht ihr, das ist ein Web-Server auf dem Verzeichnis.
Das ist für die Schnelle teilweise ganz praktisch.
So, dann habe ich ImageCat.
Das ist etwas, was ich selbst gebastelt habe in der Kombination mit der Image-Funktionalität von Westherm.
Was macht NoGlob?
Dass du Sternchen und sowas da hinten angeben kannst.
Also, guck mal, wenn ich jetzt sowas hier schreiben würde, chat-gpt keckelt Sternchen,
dann würde er Sternchen expanden zu allen Dateien, die im Verzeichnis liegen.
Und wenn ich sage NoGlob, dann übergibt er Sternchen als Sternchen, ohne es vorher zu ersetzen.
Ich glaube, ich habe es richtig im Hinterkopf.
Ich muss schon mal ein bisschen was löschen, Alter.
Zumindest mit ImageCat kann ich den kompletten Ordner ausgeben.
An Bildern, die da liegen.
Ich hoffe, ich habe da jetzt kein Moncatos-Zeug liegen.
Wäre schlecht, wenn da Moncatos liegt.
Ha, Glück gehabt, GachiBass.
Da kann ich im Terminal Bilder mit ausgeben.
So, ich glaube, wir haben es jetzt, was die Shell-Config angeht.
Das ist was für einen Shell-Snippet-Manager, den habe ich nie großartig benutzt.
Dachte ich, das ist eine coole Sache, aber da weh.
Do you know da weh?
Ich habe das nie verwendet, ich glaube, das ist toll.
Ich habe ein paar Passvariable extended für ein NPM, JetBrains-Tools,
ZSH-Auto-Suggestions-Plugin habe ich drinnen.
Das ist das hier, guck, das ist beispielsweise, sobald man anfängt,
das Kommando zu schreiben, dass es hier vorschlägt,
willst du das nicht auto-completen?
Das ist das, das habe ich aber überschrieben, dass es nicht so aggressiv auto-completet.
Dann haben wir hier noch ein paar Passvariable.
Das ist das, das habe ich aber überschrieben, dass es nicht so aggressiv auto-completet.
Dann haben wir ZSH-Syntax-Highlighting, was tatsächlich ganz praktisch ist.
Der macht richtig echtes Syntax-Highlighting von Script-Commands auf der Kommandozeile.
Das ist das hier, das ist sehr praktisch, das finde ich enorm nice.
Normalerweise würde das nämlich ziemlich raw aussehen.
Wenn ihr das beispielsweise das ganze mal in der Bash macht, dann werdet ihr feststellen,
in der Bash kann man das gar nicht so gut erkennen, was wie wo ist.
Das ist halt viel schöner, weil eben Keywords highlighted sind und sowas.
Da kann man einfach besser lesen, ganz easy.
So, dann haben wir noch ein paar Dinger, die ich nicht mehr benutze.
Cube-CTL-Completion für die Shell.
Ganz wichtig, 4M-Champ-Completion, Leute.
Ohne 4M-Champ-Completion geht hier nichts.
Terraform-Completion, Editor is Vim.
Was das macht, ich habe keine Ahnung aus dem Kopf.
Jemand von euch?
Plan?
Prompt-EOL-Marks.
Keine Ahnung mehr.
Ich weiß es nicht mehr, warum ich das eingefügt habe.
Es hat bestimmt seinen Sinn.
Ah, doch, ich weiß es wieder.
Aha, ich weiß es wieder, guck mal.
Wenn ich das setze...
Machen wir mal was auffälliges.
Das hat nichts mit dem Editor zu tun.
Machen wir mal was auffälliges.
Machen wir da mal hier...
Keine Ahnung.
Hier in ein Hütchen oder so rein.
Zirkumflex.
Das ist, wenn ich sowas hier mache.
ECHO-N-Keckel.
Moment, ECHO-N-Keckel.
Seht ihr?
ECHO-N-Keckel.
Moment, ECHO-N-Keckel.
Seht ihr?
Das ist zum Kennzeichnen,
wenn man zweizeilige Prompts hat.
Das ist zum Kennzeichnen,
wo der Output des Kommandos aufhört.
Falls man das haben möchte.
Also hier ist der Output zu Ende.
Auch ohne Newline.
Das benutze ich aber nicht,
deswegen habe ich es ausgeschaltet.
So, dann gibt es noch
für das Google Cloud SDK,
wo das liegt.
Und am Ende wird Starship
in it gemacht.
Starship ist halt das,
was dieses Prompt so hübsch macht.
Was wirklich auch sehr nice ist.
Denn wenn ich jetzt zum Beispiel
mal in ein .NET Projekt gehe,
da seht ihr,
ich bin aktuell im Masterbranch.
Hier sind noch uncommittete Dateien drin.
Es ist noch...
Es ist ein Projekt für .NET 8.
Ich selbst habe systemweit
allerdings nur .NET 7 installiert.
Finde ich sehr praktisch.
Also Starship ist ein sehr nicer Prompt.
Wir machen übrigens mal ein Update
für .NET 8.
Das ist ja immer noch Preview.
Ich glaube mittlerweile ist Preview 2 raus.
Ne, ist already installed.
Okay, da habe ich nichts gesagt.
Yep, so sieht es aus.
Der Bullet Train ist default, oder?
Du meinst das hier?
Ne, das ist nicht default.
Das habe ich so zusammengebaut.
Default ist
Starship
Default ist
das hier, glaube ich.
Oder sogar nur
oder sogar nur
One Line Prompt.
Nicht Two Line Prompt.
Also es kann sogar sein,
dass das mittlerweile Standard ist.
Ich weiß es gar nicht.
Mein Prompt gibt es nicht.
Ist kein Standard Prompt.
Den habe ich zusammengebaut
aus dem
M365
Princess Pestle
Powerline Prompt.
Und den habe ich zweizeitig gemacht.
Plus die Farben angepasst.
Und noch ein paar Features
für .NET hinzugefügt.
Also wer den Prompt
sich mal angucken will.
Wie gesagt, .Files gibt es da.
Guckt ihr da.
.Files
Starship Tommel.
Das ist die Config für den Prompt.
Das ist wie gesagt
eine Mischung aus diesem
M365 Princess Prompt
plus noch ein paar andere Sachen.
Ich sehe gerade, dass mein
Browser Probleme mit der Anzeige
von verschiedensten
Unicode
Zeichen hat.
Gut, das sind eh so
seltene Dinger.
Ja.
Bisschen Customized.
Keine
SSH Keys mit committed.
SSH Keys
werden nicht mit committed.
Ja, so sieht es aus, Leute.
Wir werden jetzt erstmal
alle
Tabs
schließen.
Ich habe eigentlich alles aktuelle drauf
mittlerweile.
Alter Arch, by the way.
Du hast wirklich laufende Gesprächsupdates.
Schau wieder.
Leute, wir haben legit vor einer halben Stunde
geupdatet.
Rolling Release.
Das rollt halt gerade.
Das macht
Pipo fett.
Rollt es rein.
Eure Visual Studio Code Version.
No Pass.
Stack Overflow
Driven ist eh
beste.
Gut. Ich überlege gerade,
machen wir heute noch ein bisschen
Chainlore ist klar.
Der Chainlore, glaube ich,
wisst ihr, was meine Vermutung ist?
Der Chainlore guckt immer auf Reddit,
auf Unix Porn oder auf
irgendwelchen anderen Subreddits
und sucht sich die abgedrehtesten Kombinationen
raus, um dann hier in den Chat
zu gehen und zu schreiben,
was er da gefunden hat und so zu tun,
als würde er es selbst benutzen.
Der benutzt das im Leben gar nicht selbst.
Geh mir zu, du benutzt bestimmt nicht
Arctics Linux plus Herbstluft WM.
Moe Buntu.
Wir sollten auch mal wieder
unser Cutie Linux installieren.
Traffic oder Nginx?
Was hältst du von
Kadi für super simple Sachen
und Nginx für alles
größere?
Falls du von Kubernetes sprichst,
würde ich trotzdem Nginx sagen.
Ich persönlich
finde
Nginx
persönlich finde
Traffic im Nachhinein
gar nicht so nice mehr.
Gerade Traffic-Config
von Hand ist komplett abartig.
Im Kubernetes Cluster geht das,
wobei ich
der Ansicht bin, das kann ich jetzt aber nicht
mit Benchmarks oder so untermauern,
wobei ich der Meinung bin
und ich habe da schon einige Artikel
drüber gelesen, dass die Performance
von Nginx deutlich besser ist
und dass man auch alles mögliche
in Nginx konfigurieren kann. Das Coole
an Traffic, das muss man sagen, dass
eingebautes Let's Encrypt ist.
Wobei man das auch
im Kubernetes Cluster mit Third Manager
machen kann und dann wahrscheinlich
noch ein bisschen mehr
Möglichkeiten hat. Also ich persönlich
wäre für Nginx
oder wenn du
wirklich ganz scharf
drauf bist,
Http-Proxy-Sachen
zu machen, die auch super performant
sein sollen, dann ist
HA-Proxy vielleicht auch nicht verkehrt.
Aber Nginx
ist, ich würde sagen,
Nginx ist eigentlich im Kubernetes-Umfeld
so mehr oder weniger der Default,
weil es gibt ja sogar von der
offiziellen Kubernetes-Organisation
im, wenn du auf GitHub mal guckst,
gibt es ja ein offizielles Nginx.
Übrigens, Achtung,
Kubernetes stellt,
es gibt Ingress Nginx
und es gibt Nginx Ingress
und wer
jetzt denkt,
dass das hier
und das hier
das gleiche ist,
der wurde ziemlich hart
Du hast es geschafft
Du hast es geschafft
Du hast es geschafft
Da sind nämlich zwei
komplett unterschiedliche Paar Schuhe.
Es gibt den offiziellen
Ingress Nginx-Controller
für Kubernetes,
das ist quasi von Kubernetes
der offizielle Ingress-Controller,
nennen wir es mal so,
und es gibt Nginx
Ingress-Controller,
das ist der offizielle
Ingress-Controller von den
Nginx-Herstellern
Bauern, Erstellern, Herstellern
Erstellern, ja.
Also beides
ist offiziell,
das ist der offizielle Nginx-Ingress-Controller
von den Nginx-Herstellern,
und das ist der offizielle
Kubernetes-Ingress-Controller
auf Nginx-Basis.
Das hier ist das deutlich
größere und beliebtere Projekt.
Man sieht es hier,
14.000 Sterne, das andere hat glaube ich
nur 8.000 Sterne.
Ja, völlig anderer Name.
Ich meine, wie kann man
Ingress Nginx und Nginx
Ingress auch schon verwechseln?
Ist eigentlich nicht möglich, oder?
Ist eigentlich
keine Verwechslungsgefahr,
die da besteht.
Und das war übrigens noch nicht alles,
ich bilde mir sogar ein,
das ist noch
der dritte Nginx-Ingress
gibt.
Der ist aber bei weitem nicht so
beliebt, wie die anderen zwei.
Genau, es gibt noch den
Bitnami
Nginx
Ach kein, da blickst du nicht mehr durch.
Wann wird der PoE gestellt?
Ich habe ewig kein PoE mehr gespielt.
Ich hätte mal
wieder Bock drauf, aber
PoE ist so ein Ding,
das musst du ja erstmal
einen Monat am Stück spielen, dass es Bock macht.
Also, du musst anfangen und dann musst du mal
einen Monat durchcryten und dann kannst du wieder aufhören.
Kann man Nginx auch anstelle von Tomcat
nutzen für Spring Boot?
Nee.
Ich habe zwar keine Ahnung von Java,
ich habe zwar keine Ahnung von Java, aber ich sage jetzt
einfach mal nein, weil
Tomcat
Was ist es mittlerweile? Tomcat 8?
Keine Ahnung. Ich weiß gar nicht, was die aktuelle Tomcat-Version ist.
Tomcat
ist ein Java-basierter
Application-Server
und Nginx ist
ein
vollkommen
eigenständiger Web-Server,
ich glaube in C++ programmiert.
Der Sinn, warum Spring Boot
Tomcat
Embedded
ist ja, oder Embedded hat,
ich weiß nicht, ob das immer noch so ist,
weil es eben ein
Server für Java ist,
für Java,
auf Java-Basis,
bzw. auf JVM-Basis,
für Sachen auf JVM-Basis
und Nginx kannst du
nicht dafür verwenden.
Was du natürlich machen kannst ist,
und was sicherlich auch oft gemacht wird,
deine Spring Boot-Anwendung
starten und davor
ein Nginx hängen.
Ich würde sogar so weit gehen,
dass das im Kubernetes-Umfeld,
bzw. im Cloud-Umfeld der Standard ist.
Das ist zwar nicht unbedingt zwangsläufig
Nginx, was davor hängt, aber oft,
muss man sagen, aber oft, aber nicht
unbedingt, und
ansonsten aber auch relativ oft.
Also dass man direkt die User
auf die Web-Anwendung
drauf lässt,
da ist meistens noch irgendwas davor.
Allein schon, weil du HTTPS machen
willst darüber und TLS-Zertifikate
brauchst. Das willst du ja
nicht in deine Anwendung einbauen.
Ich hab keine Ahnung.
Nee, anscheinend nicht.
Es ist Java.
Benutzt ihr eigentlich Windows 10 oder 11 auf der Arbeit?
Windows 10 ist das noch.
Soweit ich das richtig gesehen habe
und ich kann es ja ganz gut einschätzen, weil ich hier
Windows 11 habe und hier auf dem
anderen Bildschirm, auf der anderen Kiste Windows 10
ist das noch Windows 10.
Gut.
So Leute, wollen wir uns noch ein bisschen
den vmchamp angucken? Was sagt ihr?
Ihr könnt
euch im Chat aussuchen.
Wollen wir noch ein bisschen Technik-Stelz
machen, ein bisschen Brogger-Stelz?
Oder wollen wir noch ein bisschen weiter schwätzen?
Wir schwätzen eh weiter.
Und wenn ihr was Interessantes im Chat
habt, gehe ich ja da auch drauf ein. Ihr kennt mich.
Aber wir müssen irgendwas machen.
Wir müssen jetzt irgendwas machen.
Ich weiß nicht, wie aufnahmefähig ich noch
bin, ob ich heute was Sinnvolles noch machen kann.
Aber wir können
es ja mal ausprobieren.
Es gibt nämlich ein etwas
größeres Problem, was der
vmchamp hat. Nämlich wenn
noch kein Default-Netzwerk gestartet ist,
das hätte ich jetzt übrigens schön nachstellen können,
wenn noch kein Default-Netzwerk
gestartet ist, dann macht er Probleme.
Und ich wollte einbauen,
dass der User eine Abfrage
kriegt, möchten sie jetzt das Default-Netzwerk
starten. Ritter Ross, danke schön für den Sub.
Was macht der
vmchamp? Ja, das kann ich kurz mal zeigen.
Ich zeige ja gerne immer so ein bisschen, was ich
programmiert habe. Also schön, dass ihr fragt.
Ihr dürft ruhig öfters fragen.
Hand to Pocket Base.
Ja, kenne ich. Habe ich aber noch nie was
mitgemacht.
XD
XD
Weiß nicht genau, warum XD.
Aber XD.
Stellt man nicht den vm als erstes
Autostart für das Default-Network ein?
Ja.
Aber es gibt trotzdem Leute, die das nicht
haben.
Zum Beispiel,
das erste Comment,
was ich bekommen habe auf meinem Repo.
Das Default-Netzwerk geht nicht.
Deswegen werde ich das jetzt einfach abfragen
und dann fragen, wollen sie das Default-
Netzwerk. Ja, du bist nicht der einzige.
Wollen sie das Default-Netzwerk starten?
Ich glaube, das werden wir machen.
Also, ich zeige euch mal kurz, was
der vmchamp macht.
Und zwar,
den vmchamp gibt es übrigens
hier auf GitHub.
Das stand damals noch nicht
im Manual. Ich habe es jetzt ins Manual
reingeschrieben mittlerweile.
Ich habe es mittlerweile in die Readme reingeschrieben.
Übrigens, dass die Readme so hübsch
aussieht, bis hier,
ist auch unserem
HighIQ Modgel
im Chat gerade zu verdanken.
Weil ich das Template für diese Readme
von seinem Projekt kopiert
habe.
Ihr werdet vielleicht
feststellen, wenn ihr
die Readme vom
Serious Bugs vergleicht,
mit meiner Readme,
ich bin mir nicht sicher, ob ihr die
Ähnlichkeit erkennt.
Also,
hat schon gewisse Ähnlichkeiten.
Du brauchst noch
ein besseres Logo.
Es gibt ja noch
von MeinCodes
ein Logo Pull Request.
Wobei ich auch
nicht so richtig glücklich mit dem Logo war.
Ich finde es von der Idee her ganz nice, aber
es sieht mir
ein bisschen zu sehr aus wie Instagram.
Ja, das ist wirklich ein bisschen
wie Instagram.
Übrigens machen wir
noch einmal Werbung für das Projekt von
unserem FiveHandModgel, der übrigens
mittlerweile schon in seinem Region 500
GitHub-Stars hat.
Max, wahrscheinlich hast du oft genug
auf Selfhosted gespammt auf
Reddit, dass die Leute jetzt
am Start sind.
Also, falls ihr
eure lokalen Devices
mit einem netten, hübschen
Webinterface
POE, äh nicht POE,
wie heißt's?
Magic Package
schicken. WakeOnLan.
WakeOnLan.
Wenn ihr WakeOnLan für eure lokalen
Kisten braucht und das über ein nettes
Webinterface steuern wollt, dann
könnt ihr Upsnap ausprobieren.
Und wenn ihr unseren
Mod,
HiIQ Mod, erfreuen wollt,
dann könnt ihr ihm ja auch mal ein paar Sterne
auf GitHub geben, sofern euch
das Projekt gefällt.
So. Also.
Auf geht's. Ich wollte euch kurz zeigen,
was der 4MChamp macht. Das machen wir jetzt mal
ganz schnell. Ich zeige ja immer ganz gerne, was das
ist, was ich programmiert hab. Und zwar,
ich hab manchmal das
Problem gehabt, dass
ein Docker-Container nicht ausreicht.
Chat,
HiIQ-Frage
an euch.
Der Erste, der mir eine überzeugende
Antwort liefert,
die noch nicht in der Readme
steht,
der kriegt ein Sub gegiftet.
Und wenn
einer gewinnt,
oder schon ein Sub hat, dann
könnt ihr euch aussuchen, wer ihn kriegt.
Ich hab manchmal das Problem gehabt,
dass Container
nicht ausreichend waren.
Für Sachen, die ich testen wollte.
Und jetzt ist die Frage an euch,
welche Beispiele
fallen euch ein?
Also welche, ja,
valid Beispiele fallen euch ein?
Wann reicht ein Container nicht
aus, um Sachen zu testen?
Um Sachen auszuprobieren,
oder damit was zu basteln,
oder was auch immer.
Kernel-Module oder SystemD-Unit-File?
Das steht beide schon in der Readme.
Crap-Configs?
Das finde ich schon mal
ganz gut, wenn das Umgebung zählt, nicht?
Crap-Config?
Das ist gut,
aber das Topf, das überzeugt
mich schon mal.
Mail-Cow?
Ja gut, das könnte
man auch mit irgendeinem Docker-Compose-File
machen.
Filter für Netzwerk-Dinge?
Das finde ich auch
ganz nice, ja.
Excellent, excellent.
Dev-Test-Broadend-Simulieren?
Ja gut, das würde
ich jetzt nicht unbedingt für eine kurzlebige
lokale Test-VM
sehen.
Das Ding selber ist
Docker, deshalb kann das nicht im Container
laufen. Doch, das geht.
Kerneltreiber habe ich schon. Also ich habe
aktuell selbst zwei Beispiele in meiner Readme
stehen, warum man das braucht.
Nämlich, dass man
Kernel-Module verwenden will, oder
SystemD-Unit-Files testen will.
Aber, ich muss sagen, Topf
und
wenn halt ein Container nicht ausreicht.
Das ist die Optimale.
Da hättest du bestimmt eine Eins in der Schule drauf
gekriegt. Auf die Frage,
wann ist ein Container nicht ausreichend,
ist die Antwort. Ja, wenn ein Container halt nicht ausreicht.
Das ist bestimmt 100, 100 Punkte.
Direkt. Easy win.
Also ich würde sagen, Topf und
PluMedia. Die Sachen
finde ich wirklich nice. Das gefällt
mir. Das schreibe ich mir mal auf.
Das mache ich auch in die Readme noch
rein.
Das ist ein gutes Beispiel dafür.
Da gibt es jetzt erstmal einen Sub
für
Gift-Sub, für den Topf.
Da kriegst du einen Sub.
Agree and
pay.
Hang tight. Your purchase is processing.
Boss Champ.
Nice. Okay.
Direkt mal an Besos 3,99
überwiesen. Und PluMedia
kriegt auch noch einen.
Päge.
Nicht Präge,
Pägetime.
Nice.
Ja, Chainlore, so
ungefähr sieht es aus.
Okay.
Aber das
finde ich gut. Wisst ihr was?
Wenn wir schon dabei sind,
schreiben wir das mal in die Readme.
Wo habe ich denn hier die Blödsinn drin stehen?
Sometimes
Stocker contains
for all use cases, for example
to load or unload
Ja, das muss ich ein bisschen umschreiben.
Das ist dann so viel
Bla bla bla bla.
Test,
grab, config,
or
doing low-level
networking
stuff.
Networking.
Sowas
in der Richtung.
Alles klar.
Massive
englisch stells. Gut.
Ja, also, was man mit
dieser Software machen kann, ist folgendes.
Ich meine, ich könnte jetzt
auf meine
Readme verweisen.
Wo war der Feature-Branch?
Den haben wir wieder ge...
Na gut, Dev ist nicht wirklich Feature-Branch, aber
was?
MonkaS.
Docker contains are not always suitable
for
certain tasks like
loading and testing applications.
Ja, das ist eigentlich gar nicht
so verkehrt, aber das geht
jetzt auch erstmal so, wie ich es geschrieben habe.
Also, das sagt die Readme und
das macht es auch. Ich zeige euch das mal kurz.
Ich zeige euch das mal kurz.
Also, mal angenommen,
ihr wollt jetzt ein Unit-File schnell testen
oder
ne Crop-Config, oder
ihr wollt
ein Kernel-Modul laden, was auch immer.
Mal angenommen, ihr braucht eine VM.
Normalerweise würde das folgendermaßen
funktionieren, um eine VM zu erstellen.
Debian
Download.
Downloading ISO.
Blablabla. ISO downloaden.
Create new
virtual machine. Weiter, weiter,
weiter. ISO einlegen.
VM starten. Debian-Installer
durchklicken. Klick, klick, klick, klick.
Und dann ist gut.
So.
Ne, für UI ist das auch nicht gedacht,
was ich hier gebaut habe. Wobei es theoretisch
dann über Webmanager gehen würde, oder
man könnte, aber das ist nicht gedacht.
So, und das dauert vorneweg
10 Minuten.
Firecracker ist auch
eine scheiße Geschichte.
Sind aber wahrscheinlich nicht
so benutzbar,
wie ich mir das vorstelle. Ich kenne das.
Ich kenne das Projekt.
Das ist das,
wo du mit Ignite was starten musst.
Ja, und sowas. Ne, das kenne ich.
So, und
jetzt kann man,
jetzt kann man einfach sagen,
vmchamp run.
Übrigens, ihr seht, shell auto
complete. Run,
ähm,
meine Test-VM.
Und wenn ihr nichts macht,
einfach nur
das so eingebt,
dann legt er lokal eine VM an,
mit Debian 11,
256 MB RAM,
4 GB Disk Space
und fährt das Ganze hoch.
Und wenn er hochgefahren ist,
connectet er sich per SSH drauf.
Und dann ist er fertig.
Dann könnt ihr basteln,
könnt ihr was machen, könnt ihr alles mögliche ausprobieren
in der VM.
Das booten dauert natürlich kurz,
ich meine, es ist immer noch eine VM,
und das DHCP fürs Netzwerk dauert auch noch kurz,
aber wir sind weit davon entfernt,
dass es 10 Minuten braucht.
Environment Variable Support,
ne, wozu braucht man hier Environment Variable?
So, guck, und jetzt bist du auf deiner
neuen Test-VM drauf.
Du kannst in der VM jetzt rumwursten,
machen oder sowas,
und kannst die CRUB-Config
zum Beispiel kaputt machen.
Achso, dann müssten wir
Config File Support machen.
Wenn du die Defaults
ändern willst.
So, jetzt hast du hier deine Test-VM,
rumgebastelt, alles mögliche,
und stellst fest,
ah, ich brauche noch eine zweite Test-VM,
weil ich noch was anderes testen will,
dann sagst du Run meine Test-VM 2.
Default RAM Size pro Disk
wäre auch nice, ja, kann sein.
Ich brauche noch eine zweite Test-VM,
dann kannst du so machen, hier oben
bist du fertig mit der Test-VM, dann gehst du raus,
sagst VM Champ AM,
und jetzt Achtung, Achtung, Achtung,
Autocomplete, Autocomplete,
meine Test-VM
wieder löschen,
Test-VM weg, Keckel
löschen wir auch, gibt es nicht mehr,
da gab es noch Überreste
von,
und
jetzt fällt dir ein, ah ok,
ich brauche tatsächlich noch mal
noch eine weitere
VM, allerdings braucht die jetzt mehr RAM,
dann kannst du sagen, hier, minus minus
US, dann hast du aktuell
diese Betriebssysteme hier zur Auswahl,
also quasi Arch,
Arch Linux, ganz wichtig, das brauchen wir jetzt,
Arch by the way,
und weil Arch
du irgendwas testen willst,
was ein bisschen mehr Rechenleistung
braucht, kannst du zwei CPUs reinmachen
und 8G
8G Memory,
so, oh,
aha, das geht nicht, man muss 8GB
eingeben, ok, das wusste ich nicht, na gut,
8GB geht nicht,
8GB funktioniert,
guck, jetzt lädt er sich das aktuelle
Arch Cloud Image runter
und startet die VM damit,
so, hier unten bin ich jetzt fertig testen,
bin runter gegangen,
mach was anderes und stell fest, ah Mist,
ich wollte,
ich wollte eigentlich mich noch mal
drauf connecten, dann sagst du
VMChamp SSH, meine Test-VM
und dann bist du schon wieder
drauf,
geht Gibi bald?
Ne, wir müssen nicht,
wahrscheinlich geht
das, ja, wahrscheinlich geht das,
übrigens um es euch zu zeigen,
wenn ihr in VirtManager guckt, werdet ihr
feststellen, hier laufen jetzt auch wirklich
die VMs, manche
VMs dauern ein bisschen länger zum booten,
dann kann es sein, dass es einen Timeout gibt,
ja, geht Gibi bald?
Probier mal das doch mal aus,
Gibi bald?
Ne,
das funktioniert nicht,
Anzeige ist raus,
oder ist es Gibi bald?
Ich kann mir das immer nicht merken,
guck mal, jetzt sagt er No Networks Found,
das legt aber höchstwahrscheinlich daran,
weil die VM einfach zu lang gebraucht hat,
guck mal,
jetzt ist Arch
erst jetzt gebootet,
also VmChamp SSH,
SSH
auf Arch,
Arch Deluxe ist
broken,
wenn man genau wissen will, was
mit seinen VMs ist, kann man sagen,
VmChamp List
und stell fest,
eigentlich hat das
VMs, könnte das
sein, dass Arch Deluxe standardmäßig
kein SSH Server laufen hat,
könnte das sein,
da ist es doch, hat einfach nur ein bisschen gebraucht,
hat einfach nur ein bisschen gebraucht,
bis die VM da ist,
weil
normalerweise, ich zeige euch noch mal was,
machen wir mal Watch,
weil normalerweise
ist es so, dass
wenn die
ja genau, hier brauchen wir
jetzt unbedingt einen Zeilenumbruch, ganz
furchtbar wichtig, weil ich habe
eingebaut,
wenn man die VM nicht erreichen
kann, dass man dann
sagt,
Leute, wie fährt man ein
Interface runter, ohne ifdown
und ohne ifconfig,
hat jemand einen Plan, wie das geht, IP
I
F, ich weiß nicht, wie
das, ich habe keine Ahnung, wie das geht,
ich meine,
ich könnte einfach sagen,
IP link
down, eth 0
ne
IP
link set down
ah ok,
jetzt ist es weg, und ihr seht, hier oben, guckt mal,
aufs Kommando
ist die
Verfügbarkeit rot geworden,
in der Liste, also
man kann sogar ein bisschen überprüfen,
ob die Dinger
leben oder nicht,
eigentlich ganz nice, oder?
So, und jetzt noch
was schickes,
ich bin blöd, ich habe immer noch nicht
meine Config gesynct,
dass ich im Terminal einzelne
Panels zumachen kann,
so, und jetzt seid ihr fertig
mit testen, guckt hier, vmchamp
lists,
ihr habt noch
zwei vms laufen, jetzt könnt ihr einfach sagen,
vmchamp clean, und jetzt seid
ihr fertig mit testen, er löscht alle Images,
die er runtergeladen hat, und alle vms sind
wieder weg, rückstandslos,
und ich habe schon eine ganze
Weile nach so einer Software gesucht, wo man einfach
auf die schnelle, easy,
zackig, lokal vms unter Linux
erstellen kann, und ich habe nichts gefunden,
wie gesagt, Firecracker vms sind für sowas
nur am Rande geeignet,
die kannst du, glaube ich, halt mal richtig
persistent rebooten und sowas,
ja,
so
sieht es aktuell aus,
das macht der vmchamp, und auf die
Frage hin,
was kann der vmchamp noch mehr als
VSH, er hat ein hübscheres, netteres
Interface, aber er ist nicht
dafür gedacht, VSH abzulösen,
weil VSH kannst du natürlich noch
viel mehr machen,
wenn du weißt, wie du es bedienen kannst.
Gibt es dafür Buildinstructions?
Ja, es ist total einfach zu bilden,
ich zeig's dir,
mit dem Pullrequest, der offen ist,
ist es sogar noch einfacher zu bilden,
ähm,
also wenn du Art-Schildungs hast, kannst du
einfach vmchamp-bin oder vmchamp-git
benutzen und gut ist.
Du kannst auch auf GitHub gehen
und dir das letzte Binary Release
runterladen, was
unter so gut wie jedem
Linux der letzten 10 Jahre lauffähig ist,
äh, wenn du
selbst bauen willst, äh, ich glaube,
wir haben aktuell ein Bug im
Buildscripts,
äh, Moment,
achso, ich bin im falschen Ordner,
glaub, wir haben ein
Fedora,
ja, das Binary geht unter Fedora, das ist kein Problem,
probier's aus, was das Binary tut,
das Binary läuft
unter allem rückwärts
kompatibel bis CentOS 7,
das läuft,
das läuft also quasi auf nahezu allem,
das Binary kannst du benutzen.
Wenn du selbst kompilieren willst,
kannst du entweder,
wobei, ne,
das ist ja nicht selbst kompilieren, also wenn du
selbst kompilieren willst, kannst du das Buildscripts verwenden,
Bild.sh, musst du dann so
aufrufen, sagen wir mal hier zum Beispiel,
äh, Temp, nach Temp
soll das Ganze, das Problem ist nur,
ich glaube, das Buildscripts hat ein Bug,
ich, ich probier's mal kurz aus hier,
Docker, Build, ich glaub, ich, wie gesagt,
ich glaube, ich glaube, das Build ist kaputt,
ach, der macht standardmäßig ein Build X,
ja, das funktioniert,
das funktioniert,
also wenn du Build X hast, das ist kein Ding,
also, Moment, ich, ich,
ich installiere mal Build X,
ich weiß grad nicht, wie man das umstellt,
äh,
Alter, ich kann immer schreiben, Build,
ah ne, Docker, Docker Build X,
so, und,
wenn jetzt das Docker Build,
ich glaube, es gibt ein Bug,
im Buildscript für Docker Container,
grade, weil,
ich, schauen wir mal,
vielleicht ist das was, was wir als erstes fixen,
das ist einfach, das ist einfach
zu beheben,
ja, das ist so, äh, Zero,
was hat er, ah, Diversion,
Diversion fehlt,
Diversion fehlt, also ich kann, ich,
ich fix jetzt einfach mal kurz das Dockerfile,
man muss, man muss sagen, ähm,
from Build S Release,
ich glaube, das ist der Fix für das,
für das Dockerfile, so,
ist jetzt auch egal, ich mach, ich mach
jetzt einfach mal, ich glaube, jetzt geht's, so,
dann musst du Build ausführen,
äh, das Binary soll nach Temp,
musst du dir irgendeine Versionsnummer ausdenken,
und dann baut er in einem Docker
Container, das
Binary und kopiert es hier nach TMP.
Irgendwann,
wenn er fertig bilden ist, das dauert,
das dauert kurz,
der muss jetzt im Hintergrund CentOS 7,
das Dockerimage von CentOS 7 runterladen,
.NET unter CentOS 7 runterladen,
das, das Programm kompilieren
und den Output rauskopieren.
Ja, fertig, guck,
das war's, das musst du, das musst du machen hier,
äh, Build SH,
Versionsnummer und dann den
Ordner, wo er's hinkopieren soll,
und dann hast du hier unter TMP das
Binary liegen, ja, hier, da ist es, guck,
also da kannst du's selbst bauen.
Warum ich das Ganze, kann ich vielleicht auch nochmal
zeigen für alle, die's interessieren,
für alle, die's interessiert,
das Dockerfile ist,
das ist relativ easy zu
erkennen, was da passiert,
das wird gebaut,
das Binary wird gebaut unter CentOS 7.
Warum wird das unter CentOS 7
gebaut?
Weil CentOS 7 alt
ist, und da kann man sich jetzt natürlich
fragen, was macht's denn für
Sinn, ein Programm zu bauen unter
einem ururalten Betriebssystem?
Ja, das macht Sinn unter
zwei Gesichtspunkten, also erstmal muss man sich natürlich ein bisschen
um Security Gedanken machen,
wenn das irgendwas ist, was
30.000 Systemlibraries
da reinlinkt, und dann
mit uralten Versionen ist vielleicht nicht so
schlau, aber .NET hat eigentlich keine
Abhängigkeiten drumherum.
So, und
der Grund, warum das unter CentOS 7
gebaut wird, das Binary, ist schlicht und ergreifend
der, CentOS 7
ist so alt,
das heißt, alle anderen
Systeme sind neuer,
und dementsprechend läuft das Binary,
weil wenn man
diese, das ist
ein neues .NET 8 Feature,
beziehungsweise ein verbessertes .NET 8 Feature,
dass man Binaries
kompilieren kann, ohne dass man das .NET
Framework und sowas noch braucht,
die einzige Abhängigkeit, die die
Binaries haben, ist gegen die
glibc-Version von dem
System, auf dem das
Binary gebaut wurde. Es ist nicht
so wie bei Go, dass die Binaries
automatisch rückwirkend
kompatibel sind, bis zu Linux-Körneln
2, 6, 38
oder sowas.
Ne, hier ist das abhängig
zur glibc-Version auf dem System,
wo es gebaut wurde. Und dementsprechend
baue ich es unter CentOS 7, weil
CentOS 7 hat glibc
1, 7
und das ist so alt,
also
das ist zwölf Jahre
alt oder so. Also sprich, auf allen
Systemen, die neuer als zwölf Jahre sind,
funktioniert das. Deswegen baue ich das im Container.
So sieht's
aus. Genau.
Ja, also das Dockerfile, wie gesagt,
das Dockerfile im Master ist gerade kaputt.
Da muss noch From Build as Release unten reinschreiben,
dass das mit dem normalen
Dockerbuild funktioniert.
Ja, also
so schaut's aus. Was haben wir denn hier noch gemacht?
Warum sind hier noch uncommitted Files?
Also, Netzwerkissue,
Forced Download, Checksum, das habe ich doch
hier reinkopiert. Das habe ich doch in unsere
Notizen
reinkopiert.
Was auch immer.
Da kann ich einfach wieder rauslöschen und gut ist.
Starten wir mal
Rider.
Nicht Ruby.
So, also Netzwerkissue.
Clean
Download Option.
Hä?
Was auch immer ich da...
Ah, das ist schon...
Okay, das ist für eine weitere Sache.
Verstehe. Gibt's auch
ein Verbose Mode?
Du meinst für das Imagebild?
Äh...
Ne. Das Problem ist...
Das musst du dann
selbst machen. Das ist, weil ich das hier
inline... Das hier verschluckt alles.
Hier. Dockerbuild
Quiet. Und das gibt dann nur
den Hash aus, um es damit zu starten.
Du kannst das... Du kannst aber
Docker... Du kannst im Verzeichnis einfach...
Ach, für mein Tool?
Nö.
Für was soll das
Verbose... Also wo
will man das mehr Verbose haben?
Es steht ja eigentlich alles
mehr oder weniger da.
Nun gut.
So.
Jetzt muss ich mal kurz überlegen.
Ich committe mal kurz die Fixed...
Das Fixed
Dockerfile. Übrigens, man muss
auch nicht immer alles...
Ich mein, den meisten ist das klar, aber ich
sag das nochmal. Man muss auch
übrigens nicht immer alles committen.
In einem Docker... In einem Git
Repo.
Git Verzeichnis hier.
Man kann auch explizit sagen, Git add Dockerfile
und dann Git
commit minus M
oder eben einen Editor aufmachen.
Fix Docker
Dicker. Yep, Dick.
Docker Build. So.
Wenn man das so richtig schreiben kann. Und dann kann man
Git push
GitHub master.
Oh.
Warum? Ah, ich weiß warum.
Git pull, weil
ich die readme...
Meine Güte. Ja, ist ja...
Ist ja gut.
GitHub.
Mach nicht Auge hier.
So, jetzt haben wir
das. Git stash
pop. Da sind wir
wieder. Bam. Git status.
Git log.
Alles klar. Fixed Dickerfile.
Push.
Git push GitHub
master. Boom.
What?
Achso, weil ich
unstaged... Moment, hä?
Was? Moment, hab ich irgendwas übersehen?
Ja.
Moment. Git stash.
Ist das bescheuert?
Pull?
Achso, weil...
Oh man. Ich hab den
branch... Ich hab alles richtig. Ich hab den branch nicht angegeben.
Okay.
Pop.
Ja. Push.
Jetzt aber. Boom.
So, jetzt hast du auch das gefixte
Dockerfile auf GitHub.
Ich versuche gerade mein Auto per API...
Was? Moment.
Ich versuche gerade mein Auto per API
dann laden zu lassen, wenn die
Photovoltaikanlage überstand hat.
Auto bekomme ich angestellt bei der PV-Anlage.
Ich bin nicht so doof. Im Example Code
die Login-Daten einzugeben.
Also wenn du uns
einen Link zu deinem
Repo oder was auch immer schickst, können wir
vielleicht mal einen Blick reinwerfen.
Wobei es schwierig ist,
da was zuzusagen. Ich meine, ich kenne die API nicht.
Wir kennen die Anlage nicht.
Die Examples nicht. Also...
Ja. Ist jetzt schwierig
was zuzusagen.
Aber du kriegst das schon hin. Also
meiner Erfahrung nach, wenn es
gar nicht klappt, beziehungsweise
man schon 3-4 Stunden failt
und es nicht funktioniert, dann ist es
manchmal tatsächlich ganz sinnvoll
irgendwann ein paar Runden
zu spielen und am anderen
sich ein bisschen auszuruhen, ein paar Runden zu spielen,
irgendwas anzugucken und oftmals fällt
einem die Lösung entweder von alleine ein
oder man wacht morgens auf
und
man hat eine gute Idee und man
löst es in 5 Minuten.
Ja. Das habe ich jetzt schon öfters
gemerkt. Das ist der Git-Code.
Pass auf, jetzt kriegen wir gebaited.
Ich mache das jetzt ungesehen auf.
Ich hoffe, da ist kein
Jepp, Jepp, äh...
Ihr wisst schon drinne.
Ich glaube das ist aber...
Leute, ihr müsst jetzt nicht versuchen mir sinnlose Links zu schicken.
Ich habe geguckt vorher in meiner
Vorschau, dass das auch wirklich ein GitHub-Link ist.
Ich sag's nur mal,
wer hier versucht mich irgendwie mit
dummen Links zu gebaten,
der wird permabannt, weil da habe ich echt
keinen Bock drauf, dass ich mir
bei jedem Scheiß, der im Chat gepostet wird, Gedanken machen muss.
Also,
ja und wo...
Okay, du machst
asynchronous
Python
HTTP-Request. Das finde ich
auch ein bisschen eklig gemacht.
Tja, also Chat,
wenn jemand Bock hat sich das anzugucken, ich bin da glaube ich
zu low IQ für, weil
ich gar nicht verstehe, um welche Stelle
es eigentlich geht, wo es nicht funktioniert.
...
...
Okay, nice Max, Bock.
...
Was ist denn
PySma?
Ach so heißt dein Projekt,
verstehe.
...
Ja,
Python kriege ich aus dem Kopf nicht richtig hin.
Haben wir hier auch schon mal im Stream benutzt,
ich glaube für irgendwelche Home Assistant-Geschichten war das
damals.
...
FaceLeak von Max, pass auf, jetzt wird
gerickrolled.
Das war klar. Ich dachte, ich wusste
schon, bevor ich es angeklickt habe.
...
Das ist das Exempel.
...
...
Sieht doch eigentlich ganz okay aus.
...
...
Und wo geht man jetzt hier? Ach hier.
Passwort-Group-User.
Sieht doch eigentlich so.
Und wenn du da hier per,
wo kommt ein Passwort her? Main-Loop-Passwort
kommt aus?
Main-Loop-Passwort.
Passwort per Terminal wird das übergeben,
oder?
Add-Argument-Passwort.
Ja, du musst das ausführen auf der
Kommandozeile und als erste Option
"-user",
wahrscheinlich, nee oder?
Ja doch, "-user",
gleich Name
und "-password",
gleich Passwort machen,
vermute ich mal.
Also du musst das auf der Kommandozeile irgendwie aufrufen.
...
...
Keine Ahnung, SMA oder wie das heißt,
"-user", gleich
"-password",
gleich 123.
Irgendwie so, würde ich sagen, muss man das aufrufen.
Und wenn das dann nicht geht,
dann ist das Exempelschrott.
Achso, und man muss die
IP wahrscheinlich noch ergänzen.
Ja, mehr kann ich da jetzt
nicht zu sagen, weil ich
habe ja nichts, wo ich es ausprobieren kann.
...
So, wir machen jetzt noch
ein paar kleine Sachen, weil
ja, ja, ich weiß, dass es not fully
supported ist.
...
Kommandozeile ist schon mal
mehr als ich wusste. Du kannst das auch
hardcoden. Du kannst das
auch hardcoden, wobei
dann funktioniert halt das Exempel,
dann musst du halt den Source Code vom Exempel
anpassen. Also du musst auf jeden Fall
den Source Code vom Exempel
anpassen, weil die URL, wo kommt denn die
URL her?
Ach, URL musst du auch angeben.
Okay, also wahrscheinlich,
also so wie ich das sehe, musst du das so aufrufen.
Exempel.py, sag mal,
sag mal, ob es funktioniert.
So wie ich das sehe, musst du das so aufrufen.
...
Exempel.py,
User gleich, blub,
minus, minus Passwort, gleich
1, 2, 3, minus, minus URL.
...
Ich kann ja nicht mehr tippen.
Minus URL, http,
keckel.de, lulw,
wie auch immer das ist, ja.
So müsstest du das wahrscheinlich
aufrufen.
Ja, und dann, dann würde ich
mal vermuten, dass das funktioniert.
...
...
...
Probier mal, probier mal aus
und sag mal Bescheid, ob es funktioniert.
Also, ich meine, mehr kann ich jetzt
hier aus dem Source Code nicht erkennen, aber
Chat, ihr würdet auch sagen, oder? Ich meine,
vielleicht seid ihr ein bisschen mehr vertraut als ich mit dem
Standard, Python Standard Lib
Argument Parser.
...
So verstehe ich das,
oder?
...
...
Was ist denn Joices in dem Fall?
Joices, User?
...
...
...
Ach, User muss nicht,
User gleich User,
das ist natürlich auch geil.
So, jetzt gucken wir uns,
jetzt gucken wir uns das Ganze noch, übrigens, ich sehe gerade,
wir haben hier noch JetBrains Mono
und nicht Hack, sehe ich das richtig, ja?
CringeFont,
wer verwendet denn sowas?
...
Okay, wo kümmern wir uns denn jetzt drum?
Mal was Kleines, was Kleines, okay.
Also, es gibt ein Problem,
ich zeig euch mal das Problem,
was es gibt, was der
vmChamp für ein Problem hat,
wenn das Netzwerkinterface down ist.
Passt mal auf, das Netzwerkinterface ist
zum Beispiel down, wenn man eine vm
suspended
und dann wieder startet.
...
Zeige ich euch jetzt mal,
was dann passiert.
Dann kriegt man nämlich
die gleiche Fehlermeldung,
die der Typ
aus dem our
comment auch
hatte. Guck, er hat
geschrieben hier, Lib
will fail to communicate with
Bridge, ach ne, Moment, da gab es das
Interface noch gar nicht, das ist noch was anderes.
...
Okay, das ist noch ganz was anderes,
was der hatte. Zumindest gibt es
ein Problem, wenn das Netzwerkinterface
down ist, dann könnt
ihr so viel vms starten
wie ihr wollt,
es wird nicht funktionieren,
weil das Ding kein
Netzwerkverbindung bekommt.
Das heißt, man müsste
eigentlich checken,
ob die Netzwerkbridge
oben ist,
gestartet
ist, wie auch immer,
...
und dann zumindest mal
eine Warnung anzeigen,
Achtung, default network
not started, oder sowas, weil
aktuell ist es halt ein bisschen nichtsagend,
du startest eine vm und es
funktioniert nicht,
und man fragt sich halt, warum?
...
Warum geht es nicht? Man weiß es nicht,
dabei kann der vm-champ gar nichts dafür,
aber die lib-virt-konfig
sackt halt ein bisschen.
...
Ich meine, man muss sagen,
ich habe schon eine ordentliche
Fehlermeldung eingebaut,
no network found, check,
default network ist ab, aber
vielleicht könnte man da noch eine bessere
Fehlermeldung machen,
und um
die eigentliche Sache
nachzustellen, löschen wir
doch mal das default interface,
und dann probieren wir es mal aus.
Wir löschen das default
network interface,
...
default,
yes, bam, weg ist es.
Network interface gelöscht, und was
passiert jetzt?
...
...
Mal gucken, was er jetzt macht.
...
...
Ah, okay.
Das ist der Fehler, den
er auch bekommen hat.
Failed to communicate with bridge helper,
...
Okay, das ist der Fehler.
Okay, da müssen wir jetzt was dagegen machen.
Verstehe, verstehe.
...
...
...
...
Es gibt,
...
Wie sagen die Amis
immer? Es gibt keine Probleme, sondern
nur Herausforderungen.
Ist das nicht irgend so ein komischer
Wunschspruch?
Oh, ich wurde geradet!
188 Leute! Dankeschön,
Herr Krieger.
Ich mache für euch auch, das finden
immer alle Leute, die sonst
nicht so viel unterwegs sind, immer ganz
toll, deswegen zeige ich euch jetzt mal ein paar
ASCII-Fische.
Massive raid, ja.
Huge, huge raid.
188
Leute, poggers raid.
...
Und wenn euch,
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
....
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
....
...
...
...
...
...
...
...
...
...
...
...
...
