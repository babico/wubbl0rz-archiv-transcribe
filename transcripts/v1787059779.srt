1
00:01:30,000 --> 00:01:48,120
So, da bin ich, heute etwas fitter als gestern, ja, zweiter, zweiter Versuch, ne aber heute

2
00:01:48,120 --> 00:01:52,840
klappt das, heute klappt das, ja heute, warte was das funktioniert, ich weiß nicht ob man

3
00:01:52,840 --> 00:01:58,240
es hört, aber ich bin heute eine ganze Ecke fitter noch als gestern und das, wobei das

4
00:01:58,240 --> 00:02:04,840
kann theoretisch relativ, das kann theoretisch relativ schnell umschlagen, weil ich hab grad

5
00:02:04,840 --> 00:02:09,560
massiv Peppofett gemacht und ihr wisst wie das ist, wenn man zu viel gefressen hat dann

6
00:02:09,560 --> 00:02:19,160
wird man auch relativ schnell müde, äh ja, was, ok keine Ahnung was Windows da wieder

7
00:02:19,160 --> 00:02:32,000
einfach komische Features eingebaut hat, aber ja, passt schon, ich bin voll gefressen

8
00:02:32,000 --> 00:02:37,280
as fuck, ich weiß nicht ob die Wortkombination Sinn ergibt, voll gefressen as fuck, aber

9
00:02:37,280 --> 00:02:43,400
ich glaub man versteht was ich, was ich aussagen möchte, ja, dageschrieben für 20 minuten,

10
00:02:44,400 --> 00:02:52,520
Hypersubscription, falls ihr es seht, hier sind die offenen Issues von gestern, ja, noch

11
00:02:52,520 --> 00:02:56,280
aus dem Repo, ich mach mal kurz die VM auf und dann muss ich nochmal updaten, also ihr

12
00:02:56,280 --> 00:03:03,000
werdet feststellen, wenn ich jetzt diesen Browser in der VM refreshe, dann werdet ihr

13
00:03:03,000 --> 00:03:12,320
gleich sehen, postchamp, wenn es denn gestartet ist, startet das verdammte Spiel, so, wenn

14
00:03:12,320 --> 00:03:19,800
es gestartet ist, werdet ihr feststellen, es gibt 3 Issues und wenn ich jetzt F5 drücke,

15
00:03:19,800 --> 00:03:25,560
BÄM, ein Issue weg, ich hab heute morgen schon was gemacht, kann ich euch auch gleich

16
00:03:25,560 --> 00:03:31,960
zeigen, ich überleg gerade, wir müssen jetzt mal schnell noch was anderes gucken, weil

17
00:03:31,960 --> 00:03:41,360
das würde ich jetzt normalerweise auch auf Offstream gucken, während er Wayland, Leute,

18
00:03:41,360 --> 00:03:46,240
warum genau hab ich Wayland installiert auf dieser VM, das funktioniert überhaupt nicht

19
00:03:46,240 --> 00:04:04,800
richtig, wo ist der Sinn, was, was, warum, Wayland, ja, required by, was, Etcher, warum

20
00:04:04,800 --> 00:04:19,080
brauche Etcher, Wayland, was, warum brauche das alles, Wayland, die sollten keine Abhängigkeit

21
00:04:19,080 --> 00:04:24,960
zu irgendeinem X-Windows-System haben, höchstens zu irgendeiner GUI-Library, ok, was auch

22
00:04:24,960 --> 00:04:33,120
immer, dann halt, dann halt update, ja, meinetwegen, sollen wir recht sagen, ja, West, ich verstehe

23
00:04:33,440 --> 00:04:37,760
es auch nicht so genau, ich meine, nur weil das Wayland unterstützt, heißt es ja nicht,

24
00:04:37,760 --> 00:04:45,680
dass es Wayland als Abhängigkeit braucht, gut, vielleicht ist das irgendwelche C++-Header-Geschichten,

25
00:04:45,680 --> 00:04:50,040
das es sonst nicht kompiliert, was auch immer, wobei das ja eigentlich für mich egal sein

26
00:04:50,040 --> 00:04:53,760
sollte, weil ich installiere das fertige Binary, was auch immer, man weiß es nicht, ist auch

27
00:04:53,760 --> 00:04:59,760
egal, so, jetzt haben wir geupdatet, eine Sache wollte ich tatsächlich mal gucken und zwar,

28
00:04:59,760 --> 00:05:08,960
was macht ein Trimoji-Github, was macht dann, also Trimoji ist ein Image-Font, ja, also zum

29
00:05:08,960 --> 00:05:14,560
Beispiel, wenn ich Emojis hinzufüge hier, dass die Rakete so aussieht, wie sie aussieht,

30
00:05:14,560 --> 00:05:23,200
braucht man einen Emoji-Font dafür und das ist der von Twitter, den ich hier nehme, also ich würde

31
00:05:23,200 --> 00:05:33,200
vielleicht auffallen, die Rakete auf Twitter sieht genauso aus, wenn ihr den Webclient beziehungsweise

32
00:05:33,200 --> 00:05:38,400
irgendwas ohne native Emoji-Support verwendet, also irgendwo, wo Twitter nicht die native Platform

33
00:05:38,400 --> 00:05:43,240
Emojis verwendet, also wenn ihr zum Beispiel unter Android und IOS mit der Twitter-App seid, dann ist

34
00:05:43,240 --> 00:05:48,480
egal, dann sehen die Emojis aus wie auf der Plattform, aber normalerweise benutzt Twitter

35
00:05:48,480 --> 00:05:55,120
Trimoji und Trimoji ist ziemlich am Arsch, weil, also das finde ich der beste Emoji-Font,

36
00:05:55,120 --> 00:06:00,880
weil, ja, ich finde die Emojis sehen einfach schlicht ergreifend am hübschesten aus, ja.

37
00:06:00,880 --> 00:06:09,040
So, und es ist aber ganz schön am Arsch, weil, als Elon Musk den Laden übernommen hat, ein paar Tage

38
00:06:09,040 --> 00:06:15,160
später, hat er wohl das gesamte Team rausgeschmissen, was an Trimoji arbeitet und das Problem ist jetzt,

39
00:06:15,360 --> 00:06:23,880
dass mittlerweile, es gibt ja immer wieder neue Unicode-Standards und zum Beispiel gibt es jetzt

40
00:06:23,880 --> 00:06:37,720
ein Goose Emoji und ihr seht, ich kann kein Goose Emoji darstellen. Warum kann ich das nicht? Na ja,

41
00:06:37,720 --> 00:06:44,200
weil Twitter Trimoji nicht mal aktualisiert und mein Emoji-Font keine Gans darstellen. Ja,

42
00:06:44,200 --> 00:06:49,480
es ist nicht nur eine Gans, es ist noch ein bisschen mehr. Also alles, alles was mit Unicode

43
00:06:49,480 --> 00:06:57,160
Version 15 reingekommen ist, kann er nicht darstellen. Also der kann kein Shaking-Face darstellen,

44
00:06:57,160 --> 00:07:06,600
zum Beispiel. Was auch immer. Der kann kein Elch darstellen, der kann kein, was ist denn

45
00:07:07,600 --> 00:07:17,400
ein Maultier, glaube ich. Keine Gans, keine Flügel, keine Qualle, kein, ich weiß nicht,

46
00:07:17,400 --> 00:07:22,480
was das ist auf Deutsch. Ein Esel. Ach ja, stimmt, ein Esel. Stimmt, bei Schreck. Bei Schreck,

47
00:07:22,480 --> 00:07:32,280
das war ja ein Esel. Irgendwo ist das, glaube ich, auf Deutsch. So, und das kann das alles nicht.

48
00:07:32,280 --> 00:07:37,600
Was ich ein bisschen blöd finde, weil gerade, das ist alles, kann man sich jetzt rüberschreiten,

49
00:07:37,600 --> 00:07:44,040
braucht man das. Was ich sehr nice finde, ist, dass Emoji 15, also Unicode 15 jetzt auch ein

50
00:07:44,040 --> 00:07:51,800
ganz offizielles, man hält es gar nicht für möglich, aber es gab kein Wi-Fi-Icon bisher im

51
00:07:51,800 --> 00:08:01,840
Emoji, im Emoji-Standard. So, und jetzt gibt es, und jetzt gibt es, gibt es einen. Allerdings,

52
00:08:01,840 --> 00:08:13,600
ihr seht, Quimoji nicht. Welchen Font hast du für asiatische Zeichen? Gute Frage. Ich,

53
00:08:13,680 --> 00:08:28,920
habe ich ihn installiert. HN heißen die Dinger. Hier, nee, ich dachte, die habe ich, vielleicht,

54
00:08:28,920 --> 00:08:38,960
vielleicht auch gar keinen. Kann es sein, dass ich gar keinen installiert habe? Gar keinen?

55
00:08:38,960 --> 00:08:50,920
Das ist, das ist möglich, das FC-Cache-List. Nee, ach, kein, weiß ich nicht. Gute Frage,

56
00:08:50,920 --> 00:08:56,240
vielleicht habe ich auch gar keinen installiert, gar keinen Font für asiatische Zeichen. Wobei,

57
00:08:56,240 --> 00:08:59,520
können wir doch, können wir doch ausprobieren. Sag mir mal eine China-Chinesen-Seite hier,

58
00:08:59,520 --> 00:09:08,240
AliExpress. Und dann stellen wir jetzt AliExpress nicht auf de um, sondern AliExpress auf nicht

59
00:09:08,240 --> 00:09:14,240
versandt nach, ich will die Sprache ändern. Noch viel einfacher, wir gucken einfach GitHub

60
00:09:14,240 --> 00:09:20,240
Trends. Auf GitHub Trends trenden regelmäßige China-Chinesen-Repos. Hier, China-Chinesen-Repos.

61
00:09:20,240 --> 00:09:27,960
Ich habe gar keinen China-Chinesen-Font, so wie es aussieht aktuell, weil ansonsten könnte

62
00:09:27,960 --> 00:09:41,960
der das darstellen. Ähm, die, ich glaube, ich glaube, die, warte mal, Archwiki, es gibt,

63
00:09:41,960 --> 00:09:52,960
es gibt ein ganz schönes, es gibt, glaube ich, ein ganz schönes Font-Package. Ich glaube,

64
00:09:52,960 --> 00:10:17,480
von Adobe ist das, ähm, ja, für asiatische Schriftarten, Shionese, hier, Chinese-Font,

65
00:10:18,480 --> 00:10:25,880
ja, genau, hier. Hier, Adobe, genau, das meine ich. Adobe-Han, nicht HN, Adobe-Han kann man

66
00:10:25,880 --> 00:10:35,480
installieren. Adobe-Han, kann man mal. Han. Guck, da ist jetzt, jetzt kann man ganzen,

67
00:10:35,480 --> 00:10:45,800
ganzen, äh, asiatischen Fonts installieren. Koreanisch, Chinesisch, Taiwanesisch, Hong

68
00:10:45,800 --> 00:10:56,960
Kong, China. Warum gibt's denn da eigentlich so viele? Ich installiere jetzt einfach mal

69
00:10:56,960 --> 00:11:05,520
alle. So. Jetzt haben wir, jetzt haben wir China-Chinesen-Fonts am Start. 638 MB China-Chinesen-Fonts.

70
00:11:05,520 --> 00:11:10,920
Installieren wir das Ganze mal. Und jetzt werdet ihr gleich sehen, wenn ich jetzt die Seite wieder

71
00:11:10,920 --> 00:11:18,400
aufmache, ich glaube, ich muss den Browser neu starten, sonst funktioniert's nicht. So,

72
00:11:18,400 --> 00:11:23,280
jetzt haben wir alles hier. Japanische, Chinesische, Taiwanesisch, alle möglichen, was es gibt. So,

73
00:11:23,360 --> 00:11:26,400
und wenn man jetzt die Seite wieder aufmacht, ich glaube, ich muss den Browser neu starten.

74
00:11:26,400 --> 00:11:34,200
Ja, ich muss den Browser neu starten, Firefox. Dann werdet ihr sehen, ich habe jetzt gleich

75
00:11:34,200 --> 00:11:48,520
asiatische Schriftzeichen. Bam. Wisst ihr? Und jetzt haben wir hier asiatisches Font-Rendering.

76
00:11:48,520 --> 00:11:58,240
Also richtig der Ayaya-Modus aktiviert. Wobei das ja eigentlich nur japanische Zeichen sein

77
00:11:58,240 --> 00:12:08,360
dürften. Ja, jetzt können wir China-Chinesen-Fonts lesen. Wo sind wir denn stehen geblieben? Ja,

78
00:12:08,360 --> 00:12:13,040
ach genau, ich wollte gucken, was eigentlich Emoji 15 macht. Guck mal, es gibt sogar schon

79
00:12:13,040 --> 00:12:18,160
Emoji 15.1 und Emoji 16. Da gucken wir mal kurz, was dabei gekommen ist, was da noch dazu

80
00:12:18,160 --> 00:12:25,560
gekommen ist. Was war denn das Ursprüngliche, was ich sagen wollte? Genau, Twitter ist ziemlich

81
00:12:25,560 --> 00:12:30,640
abgefuckt, was das angeht, oder ziemlich am Arsch, weil ihr eigener Emoji-Font unterstützt

82
00:12:30,640 --> 00:12:37,000
halt nur Unicode 15 und die ganzen neuen Zeichen gehen nicht. Apple, Google, Facebook und so was,

83
00:12:37,000 --> 00:12:41,600
die haben das schon. Discord verwendet auch den gleichen Font, das heißt, Discord hat auch aktuell

84
00:12:41,600 --> 00:12:46,000
das Problem, neuere Emojis nicht anzeigen zu können, was natürlich für Discord richtig doof

85
00:12:46,000 --> 00:12:50,160
ist, weil da ist der Emoji-Spam ja wirklich real, da ist ja kaum noch eine Message ohne

86
00:12:50,160 --> 00:12:56,320
irgendwelche Emojis, Emoji-Animationen und so was drin. Wobei, die Discord-eigenen Emoji-Animationen

87
00:12:56,320 --> 00:13:01,960
hat natürlich damit nichts zu tun. So, dann wieder ein IT-Stellenanzeigen-Video geplant. Ja,

88
00:13:01,960 --> 00:13:07,720
schon lange. Vorher mache ich noch einmal, wie meine erste Woche auf der Arbeit gewesen ist,

89
00:13:07,720 --> 00:13:12,960
und ich muss euch endlich noch, wobei vielleicht mache ich das danach, noch mal meine Bewerbung

90
00:13:12,960 --> 00:13:17,840
und alles zeigen. Aber ich habe mich noch nicht auf die Reihe gekriegt. Zumindest Twitter ist

91
00:13:17,840 --> 00:13:21,840
ziemlich am Arsch, weil sie die Leute rausgeschmissen haben, das heißt, Tweemoji wird wahrscheinlich

92
00:13:21,840 --> 00:13:27,960
offiziell nie Unicode 15-Support bekommen und ob es Twitter bekommt, keine Ahnung. Es gibt jetzt

93
00:13:27,960 --> 00:13:43,080
allerdings einen Fork, es gibt jetzt allerdings einen Fork von Tweemoji und zwar, wo konnte man

94
00:13:43,080 --> 00:13:54,200
sich mal die Forks anzeigen lassen, hier. Es gibt einen Fork von Tweemoji, die gerade dabei sind,

95
00:13:54,200 --> 00:14:04,120
Unicode 15 einzubauen. Die sind allerdings ein bisschen hinten dran, weil sie schreiben,

96
00:14:04,120 --> 00:14:09,640
sie wollten sometime in March ready sein. Also wir wissen jetzt alle, March ist vorbei,

97
00:14:09,640 --> 00:14:17,800
es ist der 7. April und der Status der Emojis ist, naja, wenn man mal aufrundet, ein Drittel

98
00:14:17,800 --> 00:14:22,680
der Emojis ist erst fertig designt. Ich habe eigentlich gehofft, sie schaffen es in nächster

99
00:14:22,680 --> 00:14:36,440
Zeit. Gibt es das Qualen Emoji? Auf der anderen Seite ist es ja nicht wild, man muss sich mal

100
00:14:36,440 --> 00:14:42,720
überlegen, die machen jetzt das, wovor sie vorher bei Twitter angestellt waren, um sonst nebenbei

101
00:14:42,720 --> 00:14:50,240
ohne dafür bezahlt zu werden. Jetzt könnte natürlich Discord mal hergehen, weil Discord

102
00:14:50,240 --> 00:14:54,840
diesen Fond auch benutzt und einfach die Leute dafür bezahlen, dass sie den Emoji-Fond weiter

103
00:14:54,840 --> 00:15:01,080
designt, aber bisher, so wie es aussieht, hat Discord noch keinen Bock. Wir können mal gucken,

104
00:15:01,080 --> 00:15:10,320
wir können mal gucken, da steht noch, dass über Twitter arbeitet. Also anscheinend wurden die Leute

105
00:15:10,320 --> 00:15:17,840
nicht von Discord abgepickt, wie auch immer war das dann. Discord nutzt den Fork schon,

106
00:15:18,000 --> 00:15:22,640
es ist schön, wenn Discord das umsonst bekommt alles. Discord könnte die ja einfach auch supporten

107
00:15:22,640 --> 00:15:28,560
und bezahlen dafür, das weiterzuentwickeln. Es ist ja wahrscheinlich auch kein Vollzeitjob,

108
00:15:28,560 --> 00:15:37,000
den Emoji-Fond einmal im Jahr um 15 Emojis zu erweitern. Also die könnten das ja durchaus

109
00:15:37,000 --> 00:15:47,440
Sponsoren, das sollte ja für Discord jetzt nicht den Ruin bedeuten. Wofür bezahlen? Never

110
00:15:48,160 --> 00:15:56,680
donated free Wi-Fi, free entertainment, neighbors Wi-Fi, stolen laptop, was auch immer. Ich kann

111
00:15:56,680 --> 00:16:00,760
das gerade nicht auswendig. Aber Discord denkt sich auch, warum sollen wir die bezahlen,

112
00:16:00,760 --> 00:16:04,360
wenn wir das auch umsonst kriegen können. Naja, der Vorteil wäre, wenn sie die bezahlen würden,

113
00:16:04,360 --> 00:16:11,840
wer betreibt Discord eigentlich? Ich glaube, die Discord betreibt Discord. Also die heißen so.

114
00:16:11,840 --> 00:16:22,320
Discord wurde noch nicht von Microsoft, Apple, Google, Facebook, Amazon und sonst wem gekauft.

115
00:16:22,320 --> 00:16:38,720
Hey, ich glaube, Discord Inc. ist das, vermute ich mal. Discord Inc.? Ja.

116
00:16:38,720 --> 00:16:54,880
Was? Hammer und Schüssel? What? Das glaube ich jetzt nicht so wirklich. Discord Inc. sage ich

117
00:16:54,880 --> 00:17:11,320
doch. Ah, da sind die. Ja. Die Firma, die die Rechte am Quell kundet, ja, Discord Inc.

118
00:17:11,320 --> 00:17:16,360
Discord gehört Discord. Discord wurde, man mag es kaum glauben, dass es in der aktuellen Zeit

119
00:17:16,360 --> 00:17:23,520
noch geht, Discord wurde von Discord entwickelt und von Discord betrieben und wird auch noch von

120
00:17:23,520 --> 00:17:31,040
Discord entwickelt und von Discord betrieben. Discord gehört zu Kuss, das wusste ich nicht.

121
00:17:31,040 --> 00:17:38,760
Das ist mir neu, aber das wundert mich auch nicht, wenn das stimmen sollte. Tencent ist ja auch

122
00:17:38,760 --> 00:17:45,960
überall mit am Start, zum Beispiel auch bei Blizzard. Erinnert sich noch einer an die Arschkrieg

123
00:17:45,960 --> 00:17:51,520
Aktion von Blizzard, wo irgend so ein Typ im Turnier gesagt hat, irgendein Turniergewinner

124
00:17:51,520 --> 00:17:58,680
gesagt hat, Freiheit für Hong Kong oder irgendwie sowas in der Richtung und Discord dann, nicht

125
00:17:58,680 --> 00:18:04,360
Discord, was erzähle ich ja nicht, Discord, Blizzard, Blizzard, Blizzard. Blizzard die

126
00:18:04,360 --> 00:18:09,720
Preisgelder von dem Typ einbehalten hat, ihn gebannt hat von Turnieren und, und jetzt kommt

127
00:18:09,720 --> 00:18:18,720
der Hammer, die Caster, die das Turnier gecastet haben und zufällig im Bild waren, als er das

128
00:18:18,720 --> 00:18:27,440
gesagt hat, wurden auch entlassen. Da hat Blizzard die China-Chinesen-Arschkrieg Aktion gemacht,

129
00:18:27,440 --> 00:18:34,920
aber selbstverständlich zwei Wochen später für Menschenrechte, Öffentlichkeitsmarketing wirksam

130
00:18:34,920 --> 00:18:40,720
ins Horn geblasen, was sie doch für gute Menschen sind. Was für gute Menschen sind, hat man dann

131
00:18:40,720 --> 00:18:45,720
aber ein paar Monate später wieder gesehen, als der ganze Belästigungsskandal bei Blizzard

132
00:18:45,720 --> 00:18:52,800
rausgekommen ist. Also unterm Strich kann man eigentlich sagen, man ist blöd, wenn man das dumme

133
00:18:52,800 --> 00:18:59,160
Geschwätz glaubt. Es gibt ja Leute, die feiern sowas immer ab. Ich sehe ja prinzipiell alles,

134
00:18:59,160 --> 00:19:04,200
was so Unternehmen zu Marketingzwecken machen, kritisch, beziehungsweise was heißt kritisch.

135
00:19:04,200 --> 00:19:11,840
Ich sehe das, was sie machen so, dass ich standardmäßig davon ausgehe, dass sie es

136
00:19:11,840 --> 00:19:16,040
machen zu Marketingzwecken, um gut dazustehen, nicht um irgendwie die Welt besser zu machen.

137
00:19:16,040 --> 00:19:20,680
Genauso, wenn irgendwelche Unternehmen wieder erzählen, wie wahnsinnig grün, umweltschonend

138
00:19:20,680 --> 00:19:30,800
sie sind, Menschenrechte, LGBTQ und was es noch alles für Regenbogenfahne und was es nicht alles

139
00:19:30,800 --> 00:19:34,800
für Trends gegeben hat die letzten Jahre über. Sobald Unternehmen da mitmachen, muss man sich

140
00:19:34,800 --> 00:19:41,160
immer überlegen, okay, das hat nichts mit der eigentlichen Aktion zu tun, sondern nur um gut

141
00:19:41,160 --> 00:19:49,760
dazustehen. Natürlich kann man jetzt sagen, okay, wenn man den jeweiligen Hintergrund,

142
00:19:49,760 --> 00:19:52,680
wenn man den persönlich unterstützt, kann man sich trotzdem freuen, kann man sagen,

143
00:19:52,680 --> 00:19:59,040
scheiß doch drauf, dass es Marketingaktion ist, wenn es für eine gute Sache ist. Auf der anderen

144
00:19:59,040 --> 00:20:04,080
Seite geht es denen halt nicht um die gute Sache, egal was sie machen, sondern letztendlich immer

145
00:20:04,080 --> 00:20:11,320
um die eigene Kohle. Und dementsprechend kann man, ja, man kann es mögen oder auch nicht,

146
00:20:11,320 --> 00:20:15,320
aber es muss einem halt klar sein, dass sie das alle nicht aus persönlicher Überzeugung machen

147
00:20:15,320 --> 00:20:19,680
und weil sie es toll finden, sondern weil es Geld gibt. Das ist ja auch nichts Verwerfliches

148
00:20:19,680 --> 00:20:23,640
dran für ein Unternehmen, das so zu machen, aber man sollte sie nicht dafür abfeiern,

149
00:20:23,640 --> 00:20:30,880
dass sie quasi so selbstlos und so menschenfreundlich und so was sind. Nein,

150
00:20:30,880 --> 00:20:35,640
die geben sich nur so. Im nächsten Augenblick und in anderen Teilen der Welt ist es wieder

151
00:20:35,640 --> 00:20:51,800
komplett anders. Also insofern. Ja, wisst ihr was ich witzig finde an dieser Aussage? Da gibt es ja

152
00:20:51,800 --> 00:20:57,720
auch Leute, die sehen das anders und zwar, ich habe, ich sagte es ja schon lange, dass ich das

153
00:20:57,720 --> 00:21:02,680
skeptisch sehe, wenn Unternehmen sich da so marketingwirksam für irgendwelche aktuellen

154
00:21:02,680 --> 00:21:07,720
Trends einsetzen, obwohl es ja oftmals widersprüchlich ist. Ja, in unserem Teil der Welt machen sie das,

155
00:21:07,720 --> 00:21:11,680
im anderen Teil der Welt, sagen wir, in China machen sie das, sind eigentlich zwei komplett

156
00:21:11,680 --> 00:21:15,800
kontriere Sachen. Ich habe das ja immer schon ein bisschen kritisiert, wo ich mir gesagt habe,

157
00:21:15,800 --> 00:21:19,240
okay, denen geht es nicht wirklich um die Sache, sondern nur um gut dazustehen. Da hat mal jemand

158
00:21:19,240 --> 00:21:24,360
zu mir gesagt hier im Stream, Max hat genau das gleiche gesagt, was du gesagt hast, hat gesagt,

159
00:21:24,360 --> 00:21:33,400
Max ist doch egal, weil es ist trotzdem eine gute Sache, dann ist doch egal, ob die das nur machen

160
00:21:33,400 --> 00:21:37,200
für Geld verdienen oder nicht. Da habe ich mir gedacht, ist eigentlich was dran. Ich würde dir

161
00:21:37,200 --> 00:21:44,480
da prinzipiell auch recht geben. Allerdings, wie war das mit Gronkh und dem Wizard Game,

162
00:21:44,480 --> 00:21:52,040
der Spenden sammeln wollte? Der wurde des Todes geflamt, obwohl man ja auch hätte sagen können,

163
00:21:52,080 --> 00:21:57,000
ja gut, dann macht das doch für die gute Sache. Anscheinend ist es da wieder was ganz anderes

164
00:21:57,000 --> 00:22:03,160
gewesen. Also insofern scheint das auch alles so ein bisschen mit zweierlei Maß gemessen zu

165
00:22:03,160 --> 00:22:08,840
werden, wann es für die gute Sache okay ist und wann nicht. Und anscheinend war das nicht okay,

166
00:22:08,840 --> 00:22:16,400
aber wenn Blizzard sich besonders menschenfreundlich gibt, dann ist das gut. Wie dem auch sei,

167
00:22:16,400 --> 00:22:23,440
ich glaube prinzipiell keinem Twitter Marketing spricht von irgendwelchen Unternehmen, wenn sie

168
00:22:23,440 --> 00:22:29,040
sich mal wieder als super toll humanen Menschenfreunde und wir mögen doch alles und wir unterstützen die

169
00:22:29,040 --> 00:22:35,360
Umwelt und wir sind so grün und climate und sonst was, alles Blödsinn und sie würden das von heute

170
00:22:35,360 --> 00:22:40,200
auf morgen anders machen, wenn sie es für sie auszahlen würde. Ist okay, können sie machen,

171
00:22:40,200 --> 00:22:44,480
aber man sollte es halt nicht glauben und es deswegen unterstützen. Man kann es kaufen,

172
00:22:44,520 --> 00:22:48,440
wenn man das Produkt mag, aber nicht, weil man das Unternehmen so cool findet und die ja genau das

173
00:22:48,440 --> 00:22:55,120
machen, was man, das kann morgen schon wieder anders aussehen. Ja vor allem die Frage bei

174
00:22:55,120 --> 00:23:01,760
Influencern ist ja, wer definiert, das ist das, was mich bei diesen ganzen Diskussionen die letzten

175
00:23:01,760 --> 00:23:08,800
Jahre auch unglaublich immer nervt, wer definiert eigentlich, was richtig ist. Weil wenn man sich

176
00:23:08,800 --> 00:23:17,140
das mal anguckt, so die richtige Meinung, das variiert ja, also das ist ja nicht nur

177
00:23:17,140 --> 00:23:23,440
Blickwinkel abhängig, das ist nicht nur ganz stark Blickwinkel abhängig, aber auch schon

178
00:23:23,440 --> 00:23:30,760
in Bekanntenkreisen unterscheidet sich das ja mal ganz stark oftmals, was jetzt richtig in

179
00:23:30,760 --> 00:23:36,200
Anführungsstrichen ist und wenn du mal in andere Teile der Welt guckst, die haben komplett andere

180
00:23:36,200 --> 00:23:41,400
Vorstellungen davon, was richtig und was falsch ist, wie wir teilweise und deswegen glaube ich auch

181
00:23:41,400 --> 00:23:49,400
nicht, dass wir gut damit fahren, quasi immer so super belehrend das alles zu machen, selbst wenn

182
00:23:49,400 --> 00:23:54,240
man aus unseren Gesichtspunkten Recht hat, das kommt aber glaube ich in vielen Teilen der Welt

183
00:23:54,240 --> 00:23:58,640
nicht gut an. Wenn man da hingeht und sagt so nach dem Motto, ihr müsst das so machen wie wir,

184
00:23:58,640 --> 00:24:03,760
weil wir haben die Beißer mit Löffeln gefressen, wenn ihr das nicht so macht, dann seid ihr kacke.

185
00:24:03,840 --> 00:24:09,000
Das kommt glaube ich einfach schlicht und ergreifend nicht gut an. Selbst wenn wir Recht haben,

186
00:24:09,000 --> 00:24:15,280
aus unserem Kulturkreis gesehen jetzt, ja klar natürlich, ich würde auch viele Sachen unterschreiben,

187
00:24:15,280 --> 00:24:21,240
dass wir sie richtig machen, im Gegensatz zu den Chinesen oder Ländern im Nahen Osten oder sonst

188
00:24:21,240 --> 00:24:27,400
was will ich auch sagen, klar machen wir das richtig, aber das sehen die halt anders und so sollte einem

189
00:24:27,400 --> 00:24:32,360
zumindest klar sein, dass viele Sachen auf der Welt unterschiedlich gesehen werden, selbst wenn

190
00:24:32,360 --> 00:24:38,640
man persönlich der Meinung ist, ja man weiß ganz genau, dass wir richtig liegen. Machen wir aus

191
00:24:38,640 --> 00:24:45,800
unserer Sicht ja, aber das sieht bei denen auch so aus. Na gut, wie dem auch sei, wir gucken uns

192
00:24:45,800 --> 00:24:52,640
jetzt mal ein bisschen, sie schabt wieder an heute. Es gibt anscheinend auch noch keine

193
00:24:52,640 --> 00:25:05,960
neue Fimoji-Version insofern. Ah ja, übrigens eine Sache zum Thema Influencer. Mir ist aufgefallen,

194
00:25:05,960 --> 00:25:10,960
ich höre beim Essen immer ein bisschen Radio. Es sind ein paar verschiedene Sender. Wie gesagt,

195
00:25:10,960 --> 00:25:16,240
da ist ein bisschen Hintergrundgeräusch läuft und das, was mich am meisten am Radio hören nervt,

196
00:25:16,240 --> 00:25:21,480
ist das Gelaber zwischen der Musik und dass es bei jedem Sender quasi nur einmal oder alle zwei

197
00:25:21,560 --> 00:25:26,280
Monaten die Playlist gewechselt wird und ansonsten immer die gleichen 30 Lieder kommen. Aber was mir

198
00:25:26,280 --> 00:25:32,280
da aufgefallen ist, so in der Mainstream, nennen wir es mal Berichterstattung über Online-Aktivitäten

199
00:25:32,280 --> 00:25:38,960
von Leuten, da verwenden die so Sachen wie Influencer oder was sie auch ganz gerne verwenden ist

200
00:25:38,960 --> 00:25:44,440
Blogger und Podcast und sowas, wo ich mir so immer denke, man das ist so unspezifisch, macht es doch

201
00:25:44,440 --> 00:25:51,000
nicht so kompliziert, sagt einfach wie es ist, sagt einfach Content Creator, weil nicht jeder

202
00:25:51,000 --> 00:25:58,960
der YouTube Videos macht, ist automatisch Influencer und nicht jeder, der Audioaufnahmen macht,

203
00:25:58,960 --> 00:26:06,760
ist Audio-Blogger oder so komisches Zeug. Ich höre tatsächlich manchmal auch Radio. Ich finde

204
00:26:06,760 --> 00:26:11,320
ganz ehrlich, die Bezeichnung Content Creator ist eigentlich das Beste, was man sagen kann und wenn

205
00:26:11,320 --> 00:26:17,480
man es spezifizieren will, kann man es ja danach sagen. Der ist Content Creator und was weiß ich

206
00:26:17,480 --> 00:26:22,800
und hauptsächlich bekannt für Fitness-Videos auf Instagram oder sowas, dann weiß man ziemlich

207
00:26:22,800 --> 00:26:29,080
genau was Sache ist und nicht jeder Content Creator ist automatisch auch immer Influencer.

208
00:26:29,080 --> 00:26:34,440
Wenn ich Werbung mache für irgendwas, nicht für Coin Master, ich habe schon wieder vergessen,

209
00:26:34,440 --> 00:26:40,520
wie dieses Ding heißt, wofür ich mal Werbung gemacht habe, dieses komische 3 gewinnt Mobile

210
00:26:40,520 --> 00:26:47,240
Game. Ja, in der Rolle, würde ich sagen, war man dann Influencer. Aber Leute, die ganz normale

211
00:26:47,240 --> 00:26:53,200
YouTube Videos machen, ohne da jetzt Sachen anzupreisen, zu bewerben oder den Leuten verkaufen

212
00:26:53,200 --> 00:26:57,440
zu wollen, dann sind sie jetzt in der Stelle, würde ich auch nicht sagen, primär als Influencer

213
00:26:57,440 --> 00:27:03,480
unterwegs. Natürlich, Channel-Betreiber, die eine gewisse Reichweite haben, die beeinflussen

214
00:27:03,480 --> 00:27:08,720
immer in irgendeiner Art und Weise Leute damit, was sie sagen. Aber es ist halt die Frage, setzen

215
00:27:08,720 --> 00:27:12,680
die sich jetzt hin und machen ein Werbevideo explizit, um den Leuten was zu zeigen? Also

216
00:27:12,680 --> 00:27:17,320
sind sie quasi hauptberuflich als Influencer unterwegs oder sind sie als ganz normaler,

217
00:27:17,320 --> 00:27:21,120
das was sie schon immer waren, YouTube Content Creator unterwegs und machen halt da ihr Ding?

218
00:27:21,120 --> 00:27:29,760
Ich finde, das muss man auch irgendwie unterscheiden. Übrigens muss ich auch noch sagen, Influencer,

219
00:27:29,760 --> 00:27:36,320
kannst du ja direkt übersetzen irgendwie so mit Beeinflusser oder sowas in der Richtung. Wobei,

220
00:27:36,360 --> 00:27:42,600
ich finde Beeinflusser klingt auf Deutsch total bescheuert und was ich jetzt sage, keine Ahnung,

221
00:27:42,600 --> 00:27:49,320
ob das mit im deutschen Marketing jargon üblich ist, aber ich bin der Meinung, die beste Übersetzung

222
00:27:49,320 --> 00:27:55,840
für Influencer ist Meinungsmacher. Auch wenn das ein oldschool Wort ist, aber Beeinflusser ist

223
00:27:55,840 --> 00:28:01,240
einfach ein kackdeutsches Wort, was man so normalerweise nie sagen würde. Und bei Meinungsmacher

224
00:28:01,240 --> 00:28:09,360
weiß glaube ich am ehesten noch auch die Oma, was damit gemeint ist. Auch wenn es das vielleicht

225
00:28:09,360 --> 00:28:15,400
vom Sinn nicht hundertprozentig übertrifft, aber ich glaube im Deutsch ist das beste Wort,

226
00:28:15,400 --> 00:28:17,040
was wir eigentlich für Influencer haben.

227
00:28:31,240 --> 00:28:39,320
Das kannst du mit allem assoziieren. Das ist halt der, der den Leuten versuchen will,

228
00:28:39,320 --> 00:28:46,040
irgendwas einzureden im Endeffekt. Und sei es auch nur, wenn Bibi ankommt,

229
00:28:46,040 --> 00:28:49,240
ich habe zufällig heute mal im Einkaufen diese tolle Uhr gefunden.

230
00:28:49,240 --> 00:29:00,320
Ich glaube, wir haben da kein besseres Wort auf Deutsch, was auch wirklich jeder versteht. Klar,

231
00:29:00,400 --> 00:29:06,120
Meinungsmacher klingt ein bisschen negativ, behaftet, aber ganz im Ernst, wenn ich mir die

232
00:29:06,120 --> 00:29:12,520
meisten Influencer so angucke, wenn sie influenzen, würde ich das jetzt auch nicht unbedingt immer mit

233
00:29:12,520 --> 00:29:17,760
was rein Positives assoziieren. Also insofern finde ich passt das eigentlich noch am besten.

234
00:29:17,760 --> 00:29:30,480
So, haben wir jetzt alles geupdatet. Ich reboote mal die VM, das kann immer nichts schaden.

235
00:29:30,480 --> 00:29:41,040
So, also was wir heute machen ist folgendes. Wir gucken uns mal den Pullrequest von unserem

236
00:29:41,040 --> 00:29:47,920
High IQ Modge an. Weiß gar nicht, ob er da ist. Er ist da. Wir gucken uns heute den Pullrequest

237
00:29:47,920 --> 00:29:56,600
vom Serious Max an. Das heißt, dann wird auch das Buildscript Emojified. Wir wissen ja alles,

238
00:29:56,600 --> 00:30:01,320
dass prinzipiell in jeder zweiten Terminal-Ausgabe mindestens mal ein Emoji vorkommen muss,

239
00:30:01,320 --> 00:30:07,200
sonst ist man nicht hip. Also so Sachen wie früher, dass man da zwei Seiten Terminal-Output

240
00:30:07,200 --> 00:30:12,960
machen kann, einfach nur Text und dann auch noch schwarz-weiß Text, nicht farbig. Lukas,

241
00:30:12,960 --> 00:30:20,280
danke schön für den Sub. Das geht heute selbstverständlich nicht. Heute muss die

242
00:30:20,280 --> 00:30:26,120
muss das farbig sein und es muss alles mit Emojis voll sein. Und ich sage das jetzt gar nicht,

243
00:30:26,120 --> 00:30:31,120
weil ich das schlecht finde, sondern ich finde das gut. Ich finde Terminal-Ausgaben von Programmen

244
00:30:31,120 --> 00:30:34,840
heutzutage sieht deutlich ansprechender aus als noch früher. Warum man das früher nicht

245
00:30:34,840 --> 00:30:39,360
gemacht hat, ist eigentlich ganz klar. Terminals hatten keinen Emoji-Support. Und

246
00:30:39,360 --> 00:30:45,080
ich kann mich noch dran erinnern, unter Linux gibt es das noch gar nicht so lange. Wann habe

247
00:30:45,080 --> 00:30:51,680
ich den ersten Archlinux-Einrichten-Stream gemacht? Da war das relativ brandneue Emoji-Support

248
00:30:51,680 --> 00:31:03,760
im Terminal. Archive Boblords. Arch. Kann man die Ergebnisse sortieren nach Datum? Ne,

249
00:31:03,760 --> 00:31:20,520
ja. Sind die schon nach Datum sortiert? Okay, dann weiß ich. Also ich glaube, ich sage jetzt,

250
00:31:20,520 --> 00:31:26,280
ich sage jetzt mal so vor vier, fünf Jahren oder so. Ich weiß nicht, wann habe ich angefangen zu

251
00:31:26,280 --> 00:31:36,000
streamen? 2017? Kann das sein? 2018? Ich weiß nicht, sieht man das irgendwo? Okay, weiß nicht,

252
00:31:36,000 --> 00:31:39,840
kein Schimmer. Doch, ich habe eine Idee. Ich weiß, ich weiß, wie wir gucken können. Ich weiß,

253
00:31:39,840 --> 00:31:46,000
wie wir gucken können. Boblords? Wir gucken einfach, was der älteste Clip ist, den es gibt. Wobei

254
00:31:46,000 --> 00:31:52,920
ich glaube, diese Clip-Funktion gab es ja noch gar nicht von Anfang an. Clip. Top. Ach so,

255
00:31:52,920 --> 00:32:02,200
man kann die Dinger nicht nach Datum sortieren. Meine Güte, warum ist das alles so blöd gemacht?

256
00:32:02,200 --> 00:32:17,560
Sonst unter Wots Jahresansicht. Okay. 2017. Arch. Ach so, Archive. Hier haben wir noch

257
00:32:17,560 --> 00:32:32,880
nichts gemacht. Hier habe ich ein bisschen... Hallo? War das noch Manjaro? Manjaro E3 perfekt

258
00:32:32,880 --> 00:32:41,760
einrichten. Da war das relativ neu, dass man Emojis im Terminal haben konnte. Also sprich,

259
00:32:41,760 --> 00:32:46,240
das gab es. Das gibt es noch gar nicht so lange unter Linux, dass das funktioniert. Da muss man

260
00:32:46,240 --> 00:32:53,240
sagen, da war Mac... Ich glaube, Mac OS war da tatsächlich die schnellste Plattform mit Emoji

261
00:32:53,240 --> 00:32:59,680
Support überall und vor allem im Terminal. Und Windows hat auch ewig gebraucht. Ich glaube sogar,

262
00:32:59,680 --> 00:33:05,720
dass es von der ersten Implementierung unter Linux schneller war mit Emoji Support im Terminal.

263
00:33:05,720 --> 00:33:10,120
Allerdings Windows hat es dann schneller final rausgebracht, bis es ordentlich funktioniert hat.

264
00:33:10,120 --> 00:33:20,160
Ja, gut. Wie dem auch sei. Deswegen ging das früher die ganze Zeit noch nicht.

265
00:33:20,160 --> 00:33:30,640
Homebrew hat auch schon ewig das Bier im Output. Emojis? Ja, ich denke schon. Wie gesagt,

266
00:33:30,640 --> 00:33:34,480
ich bin kein hauptberuflicher Mac User. Weiß das nicht. Übrigens,

267
00:33:34,480 --> 00:33:38,720
kann EMAX eigentlich mittlerweile Emojis? Geht immer noch nicht, oder?

268
00:33:55,880 --> 00:33:56,600
Oder doch?

269
00:33:56,600 --> 00:34:05,360
Nutzt EMAX noch jemand? Weiß nicht. Ich habe vor ein paar Jahren aufgehört.

270
00:34:05,360 --> 00:34:17,360
Ich habe mal eine relativ kurze Zeit EMAX wirklich als Haupt Editor benutzt. Aber ich

271
00:34:17,360 --> 00:34:21,560
bin nie komplett mit warm geworden und ich habe dann auch vor ein paar Jahren aufgehört,

272
00:34:21,560 --> 00:34:28,640
komplett für nichts mehr EMAX zu benutzen. Lucas Sanglische für den Sub habe ich schon

273
00:34:28,640 --> 00:34:38,560
gesagt, aber trotzdem Pogu, euch zu sagen. Ich weiß gar nicht, ob Stormwind selber überhaupt

274
00:34:38,560 --> 00:34:42,320
noch EMAX verwendet. Ja, es gibt natürlich noch Leute, die EMAX verwenden. Das sieht man

275
00:34:42,320 --> 00:34:46,760
hier auch auf GitHub. Da gibt es immer noch EMAX-Projekte und Sachen, wo es Comets gibt.

276
00:34:47,160 --> 00:34:55,200
Wo findet man den Full-Res Peepo Happy-Hintergrund gar nicht? Den habe ich AI upscaled. Und ich

277
00:34:55,200 --> 00:35:01,760
wollte ja eigentlich mir Custom-Hintergründe anfertigen lassen, dass das nach morgens,

278
00:35:01,760 --> 00:35:06,080
mittags, abends aussieht. Aber irgendwie hat sich da der Designer nicht mehr gerührt bis jetzt.

279
00:35:06,080 --> 00:35:22,600
Na gut. So, der VM-Champ ist am Start. Alles klar, also wo sind wir stehen geblieben? Ich

280
00:35:22,600 --> 00:35:29,760
überlege gerade, was war das letzte, was wir gemacht haben? Ich pulle mal, ich pulle mal das

281
00:35:29,760 --> 00:35:38,160
repo. Git pull. Sind wir denn überhaupt? Ja, wir sind in Master. Git pull. Git up. Ich rebase.

282
00:35:38,160 --> 00:35:43,360
Oh, wir haben hier uncommittedes Zeug drin. Was haben wir denn hier gemacht?

283
00:35:43,360 --> 00:36:04,160
Das brauchen wir nicht. Git remote update. Jaja, das ist okay, wenn das nicht funktioniert. Git

284
00:36:04,160 --> 00:36:15,200
reset minus minus hard auf. Git hub master. Oh, fliegt der ganze Scheiß weg. Sehr gut. Also,

285
00:36:15,200 --> 00:36:22,760
ich habe ein paar Sachen angepasst. Moin Jonas. Also, ich habe ein paar Sachen angepasst. Es gab

286
00:36:22,760 --> 00:36:29,200
hier gestern noch ein Issue von unserem FyFat-Modge hier, dass Network-Bridge 0 manchmal nicht gefunden

287
00:36:29,200 --> 00:36:33,960
wird. Übrigens, bevor ich jetzt wieder anfange, direkt direkt einzusteigen und die Leute sich

288
00:36:33,960 --> 00:36:38,520
wieder fragen, die das letzte Mal nicht dabei waren, was ist da eigentlich los? Soll ich euch

289
00:36:38,520 --> 00:36:51,040
auch mal kurz erklären, was wir eigentlich machen? Ist glaube ich sinniger, ja. Also,

290
00:36:51,040 --> 00:36:57,000
ich habe vor einer Weile ein kleines Tool gebastelt. Und zwar, ich meine, es hat zwar viele

291
00:36:57,000 --> 00:37:02,680
Source Code Dateien, aber es ist nichts wirklich super Komplexes. Also, ich habe ein kleines Tool

292
00:37:02,680 --> 00:37:10,600
gebaut und zwar für VMs, für lokale VMs. Normalerweise ist es so, wenn ich jetzt was

293
00:37:10,600 --> 00:37:15,640
testen will bei mir, also ich betreibe ja übrigens hier mal Linux auch unter Windows in der VM. Wenn

294
00:37:15,640 --> 00:37:20,840
ich jetzt was testen will, lokal bei mir hier auf der Kiste, dann kann ich das entweder im

295
00:37:20,840 --> 00:37:27,160
Docker-Container machen. Kann ich zum Beispiel sagen, Docker run, ja hier, nennen wir mal Ubuntu.

296
00:37:27,160 --> 00:37:31,480
Docker run, da war noch irgendein Ubuntu vielleicht drin in der History. Ich habe

297
00:37:31,480 --> 00:37:35,520
keinen Bock, das zu schreiben. C'mon, da war bestimmt noch ein Ubuntu. Da, hier.

298
00:37:35,520 --> 00:37:45,520
So, also, wenn ich irgendwas testen will, ohne dass ich meine lokale Kiste versaue damit,

299
00:37:45,520 --> 00:37:51,640
kann ich in Docker-Container starten und da drinne Dinger machen. So, manche Dinger gehen

300
00:37:51,640 --> 00:37:55,680
aber nicht gescheit, im Container zu machen. Was zum Beispiel nicht geht, ist Modprop,

301
00:37:55,680 --> 00:38:00,360
ist noch nicht mal installiert. Ich weiß gar nicht, was muss man installieren, um Modprop

302
00:38:00,360 --> 00:38:15,160
installiert zu bekommen. Update. Install, Modprop, was muss ich installieren? Was? Up,

303
00:38:16,160 --> 00:38:39,040
K-Mod, alles klar, obviously, K-Mod. Mod, Modprop, PC, Speaker, not found. Es ist, ja. Ihr werdet

304
00:38:39,040 --> 00:38:44,320
jetzt schon feststellen, okay, irgendwie, es funktioniert. Man kann keine Kernel-Module

305
00:38:44,320 --> 00:38:52,360
laden und entladen, gescheit, hier im Container. Das funktioniert nicht und ihr könnt auch

306
00:38:52,360 --> 00:38:56,360
beispielsweise nichts an der CRUB-Config ändern im Container. Ihr könnt zum Beispiel auch

307
00:38:56,360 --> 00:39:02,600
keine Unit-Files im Container anpassen und das Ding dann rebooten und hoffen, dass es

308
00:39:02,600 --> 00:39:05,880
funktioniert. Es gibt ein paar Sachen, die funktionieren im Container nicht gescheit.

309
00:39:05,880 --> 00:39:12,000
Dafür sind VMs nach wie vor das Mittel der Wahl oder auch, wenn man Low-Level-Netzwerkzeug

310
00:39:12,000 --> 00:39:15,640
testen will oder so, klappt das in Containern einfach nicht richtig. Container sind eine

311
00:39:15,640 --> 00:39:20,480
super Geschichte, um Anwendungen auszuprobieren oder um reproduzierbar und das ist ja eigentlich

312
00:39:20,480 --> 00:39:26,040
auch das, wo Container herkommen, um reproduzierbare Builds zu haben von Software zum Beispiel. Dafür

313
00:39:26,040 --> 00:39:31,200
sind Container super, aber man kann nicht alles, was man unter Linux machen will, mal testen nebenbei

314
00:39:31,200 --> 00:39:34,280
in einem Docker, mal schnell in einem Docker-Container, das klappt nicht. Für manche Sachen

315
00:39:34,440 --> 00:39:41,800
braucht man nach wie vor VMs. Und wenn man VMs installieren will, unter Linux ist das ein

316
00:39:41,800 --> 00:39:48,240
recht langwieriger Prozess. Man muss sich als erstes mal das ISO runterladen. Also man geht da

317
00:39:48,240 --> 00:39:57,120
zum Beispiel, Debian, Download, lädt sich das aktuelle Debian ISO runter, so hier bla bla bla,

318
00:39:57,120 --> 00:40:05,000
Stable, AMD 64, ISO, wo ist es überhaupt? Da, hier, net install. Erledigt man das ISO runter,

319
00:40:05,000 --> 00:40:11,160
dann macht man Wirt Manager auf, dann erstellt man eine neue VM, dann wählt man das Installationsmedium

320
00:40:11,160 --> 00:40:17,720
aus. So, dann musst du auswählen, was du installieren willst und so weiter und so weiter. Ich muss das

321
00:40:17,720 --> 00:40:22,480
jetzt nicht alles durchklicken. Ihr habt es wahrscheinlich auch schon mal gemacht, eine VM angelegt.

322
00:40:22,600 --> 00:40:28,000
Das gleiche in VMer Workstation, da müsste ich hier neue VMer stellen, next, next, installieren.

323
00:40:28,000 --> 00:40:32,160
Dann würde ich das anmachen, dann müsste ich den Installer durchlaufen lassen und das dauert

324
00:40:32,160 --> 00:40:39,400
halt 5-15 Minuten, bis man überhaupt ein Testsystem mit einer VM am Start hat. Und da habe ich mir

325
00:40:39,400 --> 00:40:44,320
gedacht, das muss doch irgendwie schneller gehen oder ich hätte mir gewünscht, dass es ein Tool

326
00:40:44,320 --> 00:40:48,400
gibt, was das schneller macht. Es gibt ein paar Tools, aber die haben mir alle unterm Strich nicht

327
00:40:48,400 --> 00:40:56,400
gefallen. Das heißt, ich habe selbst was gebaut und zwar kann man jetzt das hier ausführen und

328
00:40:56,400 --> 00:41:07,200
sehr zackig neue VMs starten. Man sagt einfach VMChamp Run, Test VM 69. Okay, das funktioniert

329
00:41:07,200 --> 00:41:11,360
nicht. Das ist genau das, was ich hier übrigens fixen wollte. Ich zeige es euch mal mit der

330
00:41:11,360 --> 00:41:24,760
neuesten Version, weil da ist das nämlich schon behoben. Dotnet, Run, Test VM 5. Jetzt sagt er,

331
00:41:24,760 --> 00:41:30,240
okay es gibt keine Default Bridge, want to create now, yes, sudo Passwort und zack, auf geht's.

332
00:41:30,240 --> 00:41:34,840
So, jetzt kann er lokale VMs erstellen. Ich kann es euch übrigens auch zeigen. Ihr braucht

333
00:41:34,840 --> 00:41:38,560
den Wirkmanager nicht, ich zeige euch nur, dass es geht. Dadurch, da hat er jetzt eine lokale

334
00:41:38,560 --> 00:41:43,120
Test-VM erstellt. Man braucht hier diese grafische Ausgabe gar nicht. Wartet, bis das Netzwerk da

335
00:41:43,120 --> 00:41:48,960
ist und verbindet sich dann per SSH. Das heißt, vor einer 5-15 Minuten Installation, um mal schnell

336
00:41:48,960 --> 00:41:56,960
was zu testen, muss man jetzt 20-30 Sekunden warten, bis die VM gebootet ist und verbindet

337
00:41:56,960 --> 00:42:01,200
sich dann auch direkt per SSH und alles ist gut. So, jetzt habe ich eine vollständige VM,

338
00:42:01,200 --> 00:42:07,320
unter der ich alles Mögliche ausprobieren kann, was ich will. Auch Kernel-Module laden und alles

339
00:42:07,320 --> 00:42:12,120
Mögliche und auch rebooten und ich habe ein Init-System und alles drin, was man so braucht.

340
00:42:12,120 --> 00:42:19,800
Also ich kann den Kram auch rebooten und dann ist es gut. Also sprich für schnelle lokale Test-VMs

341
00:42:19,800 --> 00:42:27,120
ist das, was ich hier gebaut habe. Das Ganze gibt es übrigens hier auf GitHub. Wobblons-VM-Champ

342
00:42:27,120 --> 00:42:31,840
hat auch mittlerweile schon 42 Sterne, also hat sich anscheinend gelohnt, dass ich ein paar mal im

343
00:42:31,920 --> 00:42:39,200
Stream daran rumgebaut habe. Im Prinzip kann ich jetzt das vorlesen, was in der GitHub-Read-Me

344
00:42:39,200 --> 00:42:46,480
steht. Man kann relativ schnell und zackig lokale VMs erstellen, die zum Testen sind und quasi

345
00:42:46,480 --> 00:42:52,840
Wegwerf-VMs erstellen, wo sich dann automatisch per SSH verbunden wird. Wenn man vergessen hat,

346
00:42:52,840 --> 00:42:58,160
wie das Ganze heißt, kann man sich auch auflisten lassen, welche VMs es gibt und man kann sich auch

347
00:42:58,160 --> 00:43:05,240
per SSH connecten auf die jeweilige VM, wenn die dann läuft. So und am Ende, wenn man fertig ist,

348
00:43:05,240 --> 00:43:11,600
sagt man clean und löscht da alles inklusive Images und die Festplatte ist wieder frei von

349
00:43:11,600 --> 00:43:17,960
allen möglichen Rückständen von Test-VMs. Ist das ein Virtual Desktop, worüber du das Linux

350
00:43:17,960 --> 00:43:25,480
laufen lässt auf Windows? Ein Virtual Desktop? Ja ist es, guck hier. Desktop 2, da läuft das

351
00:43:25,480 --> 00:43:32,920
drin. Ich habe Desktop 1, läuft mein Windows, bzw. läuft überall Windows, aber Desktop 1 ist

352
00:43:32,920 --> 00:43:37,480
hier der Browser und so im Fullscreen. Desktop 2 ist Vmware Workstation, nur dass ich Vmware

353
00:43:37,480 --> 00:43:41,320
Workstation im Fullscreen laufen habe und dementsprechend kann ich da ohne Probleme

354
00:43:41,320 --> 00:43:45,440
zwischen Windows und Linux switchen. Macht übrigens überhaupt keinen Unterschied,

355
00:43:45,440 --> 00:43:53,320
performanstechnisch, was die CPU an geht oder kaum einen Unterschied zwischen Host und hier

356
00:43:53,320 --> 00:43:58,040
Gastbetriebssystem. Ihr seht ja, also mein Linux in der VM funktioniert super und schnell und so,

357
00:43:58,040 --> 00:44:02,680
das ist überhaupt kein Problem. Das einzige, was man hier drinnen nicht machen kann,

358
00:44:02,680 --> 00:44:07,640
ist zum Beispiel, oder was man kann man machen, ist aber keine so gute Idee. Was man in einer

359
00:44:07,640 --> 00:44:14,040
virtualisierten Linux Kiste nicht so gut machen kann, ist zum Beispiel Videos abspielen. Also

360
00:44:14,040 --> 00:44:18,520
ich gehe jetzt mal hier, mache jetzt mal das Video an, hier auf 1044p. Sieht ja nicht so wild aus,

361
00:44:18,520 --> 00:44:24,400
aber ihr seht hier oben schon, die CPU-Auslastung, die CPU-Auslastung ist halt ziemlich hoch.

362
00:44:24,400 --> 00:44:31,240
Ist aber auch klar, dass die CPU-Auslastung relativ hoch ist, weil hier drinnen gibt es

363
00:44:31,240 --> 00:44:36,480
keinen GPU-Decoder. Ach ja, und es ist 60Hz, das ist maximal 60Hz, ja das kommt noch dabei.

364
00:44:36,480 --> 00:44:44,240
Aber es gibt halt keinen GPU-Decoder, also sprich, es muss alles von der CPU hier gemacht werden in

365
00:44:44,240 --> 00:44:50,240
der VM. Dementsprechend ist es halt auch ziemlich CPU-intensiv, Videos und sowas abzuspielen. Das

366
00:44:50,240 --> 00:44:57,000
wäre cool, falls sie das irgendwie noch mal hinbekommen bei VMWare, dass man in einer VM den

367
00:44:57,000 --> 00:45:04,440
GPU, also den Decoder von der Grafikkarte, den GPU-Decoder benutzen kann. Glaube ich zwar

368
00:45:04,440 --> 00:45:10,200
ehrlich gesagt nicht dran, dass sie das noch auf die Reihe kriegen. Ich glaube auch nicht,

369
00:45:10,240 --> 00:45:16,080
dass es bei VMWare irgendwie eine Priorität hat, das sowas einzubauen, aber es wäre schon sehr nice.

370
00:45:16,080 --> 00:45:26,760
Würde das theoretisch gehen, dass man in der VM und lokal auf dem PC gleichzeitig ein Game

371
00:45:26,760 --> 00:45:30,680
laufen lassen kann? Naja, das kommt ein bisschen darauf an, wie anspruchsvoll das Game ist. Also ja,

372
00:45:30,680 --> 00:45:35,320
du kannst Games in der VM laufen lassen, wenn sie mit ein bisschen älteren OpenGL-Versionen

373
00:45:35,880 --> 00:45:49,800
so funktionieren. Nehmen wir mal den Klassiker schlechthin. Ungame. Unterlinux. Aufinstallier.

374
00:45:49,800 --> 00:46:04,760
Mach hinne. Also du kannst hier drinne Games laufen lassen. So komische Dinge wie z.B. Super

375
00:46:04,760 --> 00:46:25,280
Tox Cards oder sowas. Naja, das funktioniert in der VM. Schön ist halt was anderes. So,

376
00:46:25,280 --> 00:46:33,840
also das funktioniert nur, aber nur begrenzt. Gut. Es funktioniert natürlich, also wenn die

377
00:46:33,840 --> 00:46:39,400
jeweilige Software das unterstützt, funktionieren auch grafisch ein bisschen aufwendigere Sachen

378
00:46:39,400 --> 00:46:47,720
in der VM. Ja, z.B. Uni-Engine. Wie heißt das Ding? Kann man jetzt aber nicht merken.

379
00:46:47,720 --> 00:47:05,000
Uni-Gene Heaven habe ich sogar installiert. Also sprich, man kann ja auch solche Sachen

380
00:47:05,000 --> 00:47:16,880
drauf laufen lassen. Fullscreen Resolution System Anti-Alasing Ultra Custom. Wie macht man FPS-Anzeige?

381
00:47:16,880 --> 00:47:33,960
Geht das hier standardmäßig? Ja, also es geht, es geht, Poggers Tessellation muss,

382
00:47:33,960 --> 00:47:42,520
muss, volle Pulle muss hier Tessellated werden. Also man kann da auch schon ein

383
00:47:42,520 --> 00:47:45,800
bisschen antrucksvollere Sachen drauf laufen lassen, wenn das ältere Grafik-Schnittstellen

384
00:47:45,800 --> 00:47:51,520
unterstützt in der VM. Das geht. Also wenn du ältere Sachen laufen lassen willst in der VM,

385
00:47:51,520 --> 00:47:56,280
geht das. Wobei man sagen muss, eine VM ist wirklich nicht so gut als Grundlage zum Spielen.

386
00:47:56,280 --> 00:48:03,080
Also zumindest eine voll virtualisierte VM nicht. So, Quit. Weg damit.

387
00:48:11,080 --> 00:48:15,640
Ich glaube aber Hyper-V kann das auch nicht unter Windows host, sondern nur unter Windows

388
00:48:15,640 --> 00:48:20,680
Server host, was man wahrscheinlich auch nicht benutzen will. Welche Programmiersprache benutzt

389
00:48:20,680 --> 00:48:26,200
du am häufigsten? Also am liebsten benutze ich C-Sharp, weil das, also .NET, C-Sharp,

390
00:48:26,200 --> 00:48:29,400
weil das mein Lieblings-Framework, mein Lieblings- und die Lieblings-Programmiersprache ist.

391
00:48:29,400 --> 00:48:34,600
Insgesamt würde ich sagen, ist das eine Mischung aus Bash, relativ viel Bash. Ich meine, ich bin

392
00:48:34,600 --> 00:48:41,240
immer noch hauptberuflicher Linux-Frickler. Also Bash ist relativ häufig taktäglich im Einsatz.

393
00:48:41,240 --> 00:48:47,040
Also Bash ist relativ häufig taktäglich im Einsatz. Bash. Und wenn es was bisschen Ernsteres ist,

394
00:48:47,040 --> 00:48:53,400
C-Sharp. Wenn es Frontend-Sachen sind, JavaScript. Und ab und zu das eine oder andere Python-Script

395
00:48:53,400 --> 00:48:58,200
auch in letzter Zeit. Ja, ich glaube, das trifft es eigentlich. C++ ist es auf keinen Fall.

396
00:48:58,200 --> 00:49:05,520
Nee, das ist was anderes, was du meinst. Du meinst, ich habe vergessen, wie es heißt,

397
00:49:05,520 --> 00:49:10,120
du meinst dieses eine Grafikkarte zu mehreren virtuellen Grafikkarten machen, was, äh,

398
00:49:11,080 --> 00:49:15,720
beispielsweise in Quadro-Grafikkarten und sowas drin ist oder in extra Grafikkarten für

399
00:49:15,720 --> 00:49:21,360
Virtualisierung. Das gibt es. Das ist irgendein, ich habe vergessen, wie es heißt, das ist

400
00:49:21,360 --> 00:49:26,320
irgendeine spezielle Technologie, die der Hypervisor unterstützen muss und die Grafikkarte

401
00:49:26,320 --> 00:49:30,160
unterstützen muss. Und dann sieht es allerdings für den Gast so aus, als hätte der eine eigene

402
00:49:30,160 --> 00:49:37,040
Grafikkarte drin und das Ganze ohne so klassischen PCI-Path-Through. Das ist aber nichts, was man

403
00:49:37,040 --> 00:49:41,960
normalerweise auf dem Desktop verwendet, um zu spielen damit. Das ist eher was für virtuelle

404
00:49:41,960 --> 00:49:52,560
Arbeitsplätze für 3D-Model-Leute oder für CAD-Autodesigner oder sowas, die virtuelle

405
00:49:52,560 --> 00:49:56,720
Arbeitsplätze benutzen sollen. Ehrlich gesagt, ich habe das auch noch nie live im Einsatz gesehen.

406
00:49:56,720 --> 00:50:01,960
Ich weiß nur, dass es das gibt. S-A-I-O-V. Heißt das da auch so? Also ich weiß, dass es bei

407
00:50:01,960 --> 00:50:05,000
Netzwerkkarten so heißt, aber es kann durchaus sein, dass es bei Grafikkarten auch so heißt.

408
00:50:07,920 --> 00:50:11,960
Man kann auch eine zusätzliche Grafikkarte einbauen und die zu 100% dafür eingeben,

409
00:50:11,960 --> 00:50:15,480
dann funktioniert das schon. Ne, das funktioniert nicht. Das funktioniert nur in spezieller

410
00:50:15,480 --> 00:50:20,320
Kombination mit dem passenden Hostsystem und dem passenden Hypervisor. Unter Linux mit KVM kannst

411
00:50:20,320 --> 00:50:25,080
du es machen, unter Windows mit VMA Workstation kannst du es zum Beispiel nicht machen. Und man

412
00:50:25,080 --> 00:50:30,840
darf bei dieser Lösung auch nicht vergessen, dass man dann ganz andere Probleme hat. Weil

413
00:50:30,840 --> 00:50:37,320
dann ist es nicht so, dass die VMA einfach eine Grafikkarte hat und man hier das Fenster sieht,

414
00:50:37,320 --> 00:50:42,560
sondern der Output kommt bei einem zweiten Monitor raus von der zweiten Grafikkarte. Oder man greift

415
00:50:42,560 --> 00:50:48,080
es ab und kopiert es sich rüber. Also es ist schon ein bisschen komplizierter. Dann ist auch die Frage,

416
00:50:48,080 --> 00:50:53,240
wie bekommt man Maus und Tastatur in die VMA, wenn man das macht. Also das geht. Das ist aber von

417
00:50:53,240 --> 00:50:58,000
der Handhabung her dann nicht mehr so einfach, wie wenn man eine VMA laufen hat, so wie ich hier.

418
00:50:58,160 --> 00:51:05,320
Also bald man anfängt mit GPU-Paths zu, wird es auch inputtechnisch komplizierter. Das ist Rofi

419
00:51:05,320 --> 00:51:13,560
der Applauncher, korrekt. Das ist Rofi mit ein paar Sachen, die ich mir selbst zusammengestrickt habe.

420
00:51:13,560 --> 00:51:16,080
Genau.

421
00:51:22,080 --> 00:51:23,280
Login-Class kenne ich, ja.

422
00:51:27,760 --> 00:51:30,480
Ja, das funktioniert aber nur, wenn man die Logs als Host benutzt.

423
00:51:30,480 --> 00:51:41,720
Angeblich geht das nicht mehr. Angeblich geht nicht mehr PCI-Path-Through mit Hyper-V

424
00:51:41,720 --> 00:51:51,400
unter Nicht-Server-Betriebssystemen. Ja, das ist nice. Weitere Grund dafür,

425
00:51:51,400 --> 00:51:55,200
warum WSL das Ja des Linux-Desktops einläuten wird.

426
00:52:01,480 --> 00:52:06,000
Ja, das ändert aber nichts daran, dass du beispielsweise extra Maus und Tastatur

427
00:52:06,000 --> 00:52:11,800
input brauchst für die VMA. Das macht es nicht einfacher. Nvidia-Crit heißt da Krempel. Genau,

428
00:52:11,800 --> 00:52:18,680
das habe ich gemeint. Das habe ich gemeint. Ja, also für mich persönlich ist die einfachste

429
00:52:18,680 --> 00:52:26,040
Variante, weil ich ja nicht Windows aus, oder sagen wir so, ich benutze ja nicht Linux aus

430
00:52:26,040 --> 00:52:29,480
Glaubensgründen, oder ich verzichte ja nicht auf Windows aus Glaubensgründen,

431
00:52:29,480 --> 00:52:34,640
wie das manche machen. Es hat ja jemand letzten sogar in einem Ami-Unternehmen gesagt, dass sie

432
00:52:34,640 --> 00:52:42,520
ein Linux-Laptop benötigt, weil aus Glaubensgründen kann sie kein Windows benutzen oder so was,

433
00:52:42,520 --> 00:52:47,080
und die haben mir dann auch tatsächlich ein Linux-Notebook gegeben nach längerer Diskussion mit

434
00:52:47,080 --> 00:52:53,640
der IT. Aber ich benutze das, was sich am besten eignet für das, was ich machen will. Und bei mir

435
00:52:53,640 --> 00:53:00,760
ist es so, Windows für Videos erstellen, Thumbnails erstellen, Sachen spielen und halt auch zum

436
00:53:00,760 --> 00:53:05,760
Streamen. Und Linux für alles andere. Das ist die beste Kombination. Das heißt, ich habe gar

437
00:53:05,760 --> 00:53:10,720
kein Bedürfnis hier irgendwie großartig GPU-Pass-Through zu machen, weil alles,

438
00:53:10,720 --> 00:53:15,880
was ich unter Linux mache, funktioniert fortügig, auch ohne GPU-Pass-Through. Vielleicht das einzige

439
00:53:15,880 --> 00:53:19,720
halt Video-Decoding, aber ich gucke die Videos halt meistens schlicht und ergreifend unter Windows an.

440
00:53:19,720 --> 00:53:30,400
Und den Rest mache ich unter Windows. Das ist für mich persönlich von Handhabung und Anwendungsszenarien

441
00:53:30,400 --> 00:53:36,400
das Beste. Ich bezweifle gar nicht, dass man irgendwie was ähnlich Gutes sich hin basteln kann,

442
00:53:36,400 --> 00:53:40,360
weil es sicherlich immer kleinere Probleme bleiben werden, aber das ist für mich wirklich

443
00:53:40,360 --> 00:53:43,240
das perfekte Setup. Ich sehe überhaupt nicht einen, da irgendwas dran zu ändern.

444
00:53:43,240 --> 00:53:51,640
Kannst du mal was mit Jenkins machen? Ich habe ewig kein Jenkins mehr benutzt. Ich habe damals

445
00:53:51,640 --> 00:53:58,320
einen Jenkins aufgebaut vor Urzeiten bei uns, als es noch vor kurzer Zeit Hudson hieß. Jenkins ist

446
00:53:58,320 --> 00:54:05,400
ja auch nicht der Originalprojektname. Aber seitdem habe ich lange, ich habe wirklich lange nichts

447
00:54:05,400 --> 00:54:11,400
mehr Neues mit Jenkins gemacht. Bin wahrscheinlich nicht die beste Informationsquelle für Jenkins.

448
00:54:11,400 --> 00:54:17,720
Ich meine, wir könnten uns das Ganze tatsächlich

449
00:54:17,720 --> 00:54:32,280
uns mal angucken als jemand, der wirklich keine große Ahnung mehr von Jenkins hat.

450
00:54:32,280 --> 00:54:37,840
Ich muss mir da vieles neu angucken, was wahrscheinlich nicht verkehrt ist,

451
00:54:37,840 --> 00:54:45,880
weil Jenkins eben so viel Neues wahrscheinlich mittlerweile bekommen hat. Allerdings im Kern

452
00:54:45,880 --> 00:54:51,600
hat Jenkins immer noch die gleichen Probleme und eines der Probleme, an die ich mich erinnern kann,

453
00:54:51,600 --> 00:55:01,760
von früher war, wenn das wirklich groß wird die Installation, also wenn die von vielen benutzt wird,

454
00:55:01,760 --> 00:55:07,080
die Jenkins Installation, Jenkins skaliert nicht sonderlich gut. Was du bei Jenkins machen kannst,

455
00:55:07,200 --> 00:55:13,640
du kannst viele Runner registrieren, dass die Jobs halt eben so in die Breite skalieren auf

456
00:55:13,640 --> 00:55:20,000
mehrere Hosts. Was du allerdings bei Jenkins nicht machen kannst, ist den Jenkins selber skalieren.

457
00:55:20,000 --> 00:55:25,280
Also du hast immer noch ein zentrales Webinterface, einen zentralen Backend Service, der läuft und

458
00:55:25,280 --> 00:55:28,720
sowas. Zumindest ist das mein letzter Stand. Kann sein, dass es mittlerweile geht. Deswegen

459
00:55:28,720 --> 00:55:35,720
war Jenkins früher zumindest sehr schwierig, wenn man richtig große Installationen hatte,

460
00:55:35,720 --> 00:55:41,680
die von von sehr vielen Benutzern gleichzeitig benutzt werden. Hast du das bei dir auch,

461
00:55:41,680 --> 00:55:50,920
dass Chromium bei Twitch Probleme macht? Ne. Benutz eigentlich immer Chromium zum Streams gucken.

462
00:55:50,920 --> 00:55:53,680
Nö, mach keine Probleme, funktioniert wunderbar, außer dass die Auflösung

463
00:55:53,680 --> 00:56:02,560
gerade ziemlich beschissen eingestellt ist, aber nö. Funktioniert. Nur, dass es jetzt

464
00:56:02,560 --> 00:56:11,560
ein bisschen weird Champ ist. Das schaut aus, Leute.

465
00:56:32,560 --> 00:56:51,400
Infinite Mirror hier. Ne, also ich hab keine Probleme. Ach, ich bin gerade in Chromium,

466
00:56:51,400 --> 00:56:56,280
du hast recht, du hast recht. Wubblords Twitch, du hast recht, ich bin gerade in Chromium. Aber

467
00:56:56,280 --> 00:57:00,800
in Chromium hab ich auch keine Probleme, weil ich guck immer ganz normal. Ich guck immer in

468
00:57:00,800 --> 00:57:08,600
Chromium. Du musst gucken, welches Chromium Package du installierst. Ob mit Codex,

469
00:57:08,600 --> 00:57:14,000
ohne Codex. Also es funktioniert ohne Probleme. Wie war die erste Woche auf der Arbeit? Ich

470
00:57:14,000 --> 00:57:18,800
würde sagen recht nice. Es gibt allerdings einen Punkt, der mir schwer auf den Keks geht und das

471
00:57:18,800 --> 00:57:24,560
ist wie Windows zentriert bzw. Microsoft zentriert, dass alles ist und dass ich kaum Rechte auf meinem

472
00:57:24,560 --> 00:57:30,920
Notebook hab. Also ich gehe aber stark davon aus, ich werde da auch in nächster Zeit an allen

473
00:57:30,920 --> 00:57:36,240
Stellen drüber meckern und wenn ich eine extra Linux VM mit Adminrechten kriege, dann sollte sich

474
00:57:36,240 --> 00:57:48,680
das Ganze eh schon auch ein bisschen lindern, der Pain. Aber aktuell kann man eigentlich nicht

475
00:57:48,680 --> 00:57:57,560
arbeiten. Mit Windows Notebook und so stark reglementiert restriktiven Settings kann ich

476
00:57:57,560 --> 00:58:08,800
eigentlich nichts machen. Habt ihr einen Tischkicker und einen Obstkorb? Seriously,

477
00:58:08,800 --> 00:58:15,080
ich hab keine Ahnung. Irgendwo. Der Laden ist mega groß. Ich hab mich fast verlaufen am ersten

478
00:58:15,080 --> 00:58:21,360
Tag. Und ich würde mich immer noch verlaufen, wenn ich was suchen muss. Das ist mega groß.

479
00:58:21,360 --> 00:58:26,720
So, Chet, ich würde sagen wir fangen jetzt so langsam aber sicher mal an mit Basteln,

480
00:58:26,720 --> 00:58:32,440
mit Bastelkram. Gut, also ich habe euch jetzt, ich habe euch ja gezeigt wofür das Tool da ist,

481
00:58:32,440 --> 00:58:41,160
nämlich um schnell lokale VMs zu starten. Also ich zeige es nochmal. VMChamp, Run, Kekkel. Er

482
00:58:41,200 --> 00:58:46,360
lädt sich dann das aktuelle Debian ISO runter, wenn man keine Optionen angibt. Startet eine lokale

483
00:58:46,360 --> 00:58:51,320
VM, wie man übrigens auch hier sehen kann. Wie gesagt, Wirt Manager ist nicht erforderlich.

484
00:58:51,320 --> 00:58:59,680
Ich nehme das hier plus zum zeigen. Und jetzt bootet er die VM und startet das Netzwerk in der VM,

485
00:58:59,680 --> 00:59:07,960
setzt ein paar SSH Keys. Und wenn die VM gebootet ist, wie man hier sieht, gleich ist er gebootet

486
00:59:07,960 --> 00:59:17,480
und gleich ist er auch am Start. Dann verbindet er sich per SSH auf die VM und man kann in der

487
00:59:17,480 --> 00:59:24,160
VM alles mögliche machen. Und wenn man fertig ist, kann man die VM löschen oder komplett alles

488
00:59:24,160 --> 00:59:28,160
löschen, inklusive Images und dann ist wieder alles weg. Guck hier, VM clean. Also das ist ein

489
00:59:28,160 --> 00:59:33,800
kleines Tool, was ich vor ein paar Wochen gebaut habe, um lokal schnell Test VMs anlegen zu können,

490
00:59:34,000 --> 00:59:49,880
ohne dass man sich durch Installer durchklicken muss und so was. So sieht es aus. Genau. Und das

491
00:59:49,880 --> 01:00:03,040
ist halt für den Fall der Fälle, wenn Docker Container nicht ausreichen. Ich habe eine kleine

492
01:00:03,040 --> 01:00:07,880
Neuerung eingebaut im Vergleich zum letzten Mal und wir bauen heute auch noch eine neue Version.

493
01:00:07,880 --> 01:00:12,800
Wir machen heute Version 0.04. Wir machen heute Version 5, aber da will ich noch was kleines

494
01:00:12,800 --> 01:00:18,160
anderes dabeihauen. Und zwar, ich habe eine Neuerung eingebaut. Ich glaube, man sieht es

495
01:00:18,160 --> 01:00:25,440
ja auch beim letzten Commit. Das letzte Commit ist Fixed Issue Nummer 3, nämlich, dass die

496
01:00:25,440 --> 01:00:32,120
Default Bridge manchmal nicht existiert. Es ist nämlich so, wenn man KVM aus einem Package

497
01:00:32,120 --> 01:00:39,240
Manager unter Linux installiert, dann ist normalerweise ein Standard Netzwerk Interface

498
01:00:39,240 --> 01:00:43,640
dabei. Das hier, das ist die Default Netzwerk Interface. Das braucht man, damit die VMs überhaupt

499
01:00:43,640 --> 01:00:49,240
ins Netzwerk kommen. Das muss man normalerweise nicht von Hand machen, nicht selber anlegen. Das

500
01:00:49,240 --> 01:00:57,280
ist, wenn ich QEMO libvirt installiert habe, dann ist das standardmäßig dabei. Das muss ich

501
01:00:57,320 --> 01:01:03,400
normalerweise nicht machen. Allerdings hat jemand festgestellt, dass das anscheinend manchmal nicht

502
01:01:03,400 --> 01:01:09,600
standardmäßig dabei ist. Ich vermute ja, dass das entweder mal irgendwann gelöscht wurde von

503
01:01:09,600 --> 01:01:13,680
Hand oder es irgendwelche anderen Probleme gab, weil normalerweise ist das standardmäßig dabei.

504
01:01:13,680 --> 01:01:22,400
Und ich habe jetzt einen Check eingebaut, ob das Standard Netzwerk Interface da ist und erreichbar

505
01:01:22,400 --> 01:01:29,360
ist. Und das habe ich folgendermaßen gemacht. Also, dass dieses Commit Fixed hier das ist das

506
01:01:29,360 --> 01:01:39,160
Problem. Und zwar, das ist das Einzige, was seit dem letzten Stream dabei gekommen ist. Und zwar hier.

507
01:01:39,160 --> 01:01:42,920
Also, was der macht, ist folgendes, wobei, ich bin ja blöd, ich kann euch jetzt eigentlich auch

508
01:01:42,920 --> 01:01:49,080
hier, warum zeige ich euch das? Warum zeige ich euch das hier im Commit? Ich kann es euch auch

509
01:01:49,520 --> 01:01:53,680
einfach hier drinnen zeigen. Also, das Einzige, was dabei gekommen ist, ist das hier. Check

510
01:01:53,680 --> 01:02:01,760
Default Network. Der guckt, ob es ein Interface gibt mit dem Namen viabr0. Wie man hier auch sieht,

511
01:02:01,760 --> 01:02:14,560
ifconfig oder ipadd. Chat, seid ihr lager ifconfig oder lager ipadd? Und umfrage, umfrage. Umfrage

512
01:02:14,560 --> 01:02:25,520
mache ich mal kurz. IP oder ifconfig? Und jetzt kommt mir nicht mit ipconfig slash all oder so

513
01:02:25,520 --> 01:02:35,040
komischen Windows-Shit an. Ich persönlich, ich persönlich benutze instinktiv ifconfig,

514
01:02:35,040 --> 01:02:39,120
versuche mich aber seit Jahren schon an IP zu gewöhnen, kriege es aber nicht auf die Reihe.

515
01:02:45,040 --> 01:02:50,040
Ist übrigens auch so was, wo ich nicht genau verstehe, warum man das Default Tool unbedingt

516
01:02:50,040 --> 01:03:14,320
ändern musste. Wegen SystemD? Nee, ich glaube nicht, dass es das mit SystemD

517
01:03:14,400 --> 01:03:24,480
zu tun hat. Okay, es ist ziemlich 50-50. Wie ip und ifconfig. Es ist genau 50-50. Das ist euer

518
01:03:24,480 --> 01:03:29,360
Hobby, oder? Zu versuchen, dass wenn die Dinge möglichst, wenn die Dinge schon nah an beieinander

519
01:03:29,360 --> 01:03:35,160
sind, dass die Leute dann auch, die keine Ahnung haben, um was es geht, voten, dass es auf 50-50

520
01:03:35,160 --> 01:03:39,840
kommt. Stimmt's? Diese Umfragen sind immer komplett rigged von Anfang an.

521
01:03:44,320 --> 01:03:58,280
Na ja, zumindest ihr seht es hier, es ist so eine Standardnetzwerk-Bridge oben. Und jetzt

522
01:03:58,280 --> 01:04:07,120
kommt es anscheinend manchmal vor, wie man hier in diesem Issue sieht, dass aus welchen Hintergründen

523
01:04:07,120 --> 01:04:13,080
auch immer dieses Standardnetzwerk nicht da ist, dass eben diese Standard-Bridge fehlt.

524
01:04:13,080 --> 01:04:17,520
Magst ans Trinken erinnern? Dankeschön, aber ich habe gerade was getrunken. Es ist aber gut,

525
01:04:17,520 --> 01:04:22,760
dass ihr das benutzt, weil ich vergesse das immer ganz gerne. So, und jetzt habe ich was

526
01:04:22,760 --> 01:04:31,400
Neues eingebaut, nämlich der checkt, ob es ein Interface gibt, wir-bro, und die gibt es in dem

527
01:04:31,400 --> 01:04:39,080
Fall. Dann checkt er noch, ob diese Default-Bridge, wenn er sie denn gefunden hat, ob der eine IP

528
01:04:39,080 --> 01:04:47,720
hat. Das ist Link Magic. Ich weiß nicht, ob wir Leute hier zuschauen, die selten oder gar

529
01:04:47,720 --> 01:04:53,120
nicht C Sharp verwenden. Das ist hier tatsächlich eine coole Sache, was es schon Ewigkeiten in C

530
01:04:53,120 --> 01:05:00,080
Sharp gibt. Was ich mir wünschen würde, dass es mehr Sprachen auch hätten. Es gibt in vielen

531
01:05:00,160 --> 01:05:05,400
Programmiersprachen mittlerweile so die Basics, also sowas wie eine Map-Funktion, sowas wie eine

532
01:05:05,400 --> 01:05:09,920
Filter-Funktion. Es gibt sogar ein JavaScript mittlerweile. Aber diese ganze Link-Thematik von

533
01:05:09,920 --> 01:05:17,000
C Sharp finde ich ganz nice. Und zwar kann man hier gucken, Network-Interface, get all network

534
01:05:17,000 --> 01:05:24,080
Interfaces, und dann kann man filtern, quasi nach einem Netzwerk-Interface, was wir-bro,

535
01:05:24,080 --> 01:05:35,800
wir-Bridge0 heißt. Wenn es das gibt, dann landet das in der Variable. Wenn es das nicht gibt,

536
01:05:35,800 --> 01:05:45,360
dann steht da halt 0 drin. Als nächstes wird geguckt, wenn denn eine Default-Bridge gefunden

537
01:05:45,360 --> 01:05:52,560
wurde, dann probieren wir die IP-Adressen davon zu kriegen und holen uns die einzelnen IP-Adressen

538
01:05:52,560 --> 01:05:59,080
raus und dann gucken wir, ob am Ende irgendwie eine IP-Adresse gefunden wurde. Any. Wobei ich

539
01:05:59,080 --> 01:06:07,280
das wahrscheinlich mir sogar sparen könnte. Ich glaube, ohne das Select würde das genauso

540
01:06:07,280 --> 01:06:13,680
funktionieren, weil mich interessiert ja nur die Anzahl und nicht die IP-Adresse selber. Also

541
01:06:13,680 --> 01:06:16,800
wahrscheinlich würde, wahrscheinlich würde das genauso tun. Aber ich lasse das mal,

542
01:06:16,800 --> 01:06:20,440
ich bin mir nicht sicher, warum ich das gemacht habe. Vielleicht hatte das ja durchaus seinen

543
01:06:20,440 --> 01:06:29,360
Sinn. So, dann guckt er, meine Nase ist jetzt auf einmal übelst zu. Vielleicht war der Tee zu

544
01:06:29,360 --> 01:06:35,120
warm. Ich weiß nicht. So, dann guckt er, ob es eine Default-Bridge mit IP gibt. Wenn ja,

545
01:06:35,120 --> 01:06:41,200
dann ist vollkommen egal. Dann hört er auf, weil wenn es eine Default-Bridge gibt mit gültiger

546
01:06:41,200 --> 01:06:48,680
IP-Adresse, dann können wir aufhören, weil dann geht ja alles. Jetzt kommt die Preisfrage. Wer

547
01:06:48,680 --> 01:06:57,920
von euch im Chat hat schon gezuckt und hat gesagt, Max, warum vergleichst du ein Buhlwert mit True?

548
01:06:57,920 --> 01:07:07,040
Wer weiß es? Es ist nicht, weil ich so blöd bin, einfach nur so zu schreiben. Wer weiß es? Wer ist

549
01:07:07,040 --> 01:07:16,320
High IQ genug, dass er das weiß? No-Label, richtig. Korrekt. Das ist ein Trick, wobei ich weiß gar nicht,

550
01:07:16,320 --> 01:07:25,920
ob das ein Trick in C-Sharp ist oder ob das gewolltes Style-Guide-Konform ist bei Microsoft.

551
01:07:25,920 --> 01:07:35,720
Keine Ahnung. Also, es ist so, an der Stelle, ihr seht, das ist ein Buhl-Fragezeichen. So,

552
01:07:35,720 --> 01:07:42,200
warum ist das ein Buhl-Fragezeichen? Wenn ich mal die Idee erkanne. Ist das ein Buhl-Fragezeichen?

553
01:07:42,960 --> 01:07:49,520
Also, es gibt, ich zeige euch das mal, ein ganz kurzer Exkurs. Also, man kann so was hier machen,

554
01:07:49,520 --> 01:07:56,080
Buhl-Cackle-Gleich-False. Das ist eine Variable vom Typ Buhl mit diesem Value. Ich kann aber auch

555
01:07:56,080 --> 01:08:02,520
sagen, Buhl-Fragezeichen, wobei, machen wir es anders. Was ich nicht machen kann an der Stelle ist,

556
01:08:02,520 --> 01:08:06,760
also ich kann sagen, Cackle-Gleich-True. Das funktioniert. Was ich nicht sagen kann,

557
01:08:06,960 --> 01:08:14,200
Cackle-Gleich-Null. Das geht nicht, weil in C-Sharp solche Basics-Sachen wie Int und Buhl und so

558
01:08:14,200 --> 01:08:25,160
was Value-Types sind. Die können nicht Null sein. Wenn ich möchte, dass es True-False oder auch

559
01:08:25,160 --> 01:08:33,240
Null sein kann, dann muss ich sagen, haha, du bist ein Nullable-Value-Type. Das ist dann so was hier.

560
01:08:33,240 --> 01:08:42,480
Das für sich genommen ist gar nicht so toll. Der Unterschied zwischen Buhl und Nullable-Buhl ist

561
01:08:42,480 --> 01:08:47,820
allerdings, wenn ich jetzt hier drauf zugreife, was es hier gibt, eigentlich nichts. Nur die

562
01:08:47,820 --> 01:08:55,640
Standardmethoden, die definiert sind für alles. To String, Try Format, also nichts wildes. Wenn

563
01:08:55,640 --> 01:08:59,680
ich jetzt allerdings hier ein Fragezeichen davor mache, dann sehe ich, okay, da kommen jetzt andere

564
01:08:59,680 --> 01:09:06,200
Sachen. Ich kann jetzt checken, hat das einen Value und danach kann ich auch den Value daraus

565
01:09:06,200 --> 01:09:12,960
abgreifen. Wenn man so will, ein Object-Wrapper um einen Value-Type. So kann man sich das ungefähr

566
01:09:12,960 --> 01:09:23,600
vorstellen. Das ist relativ praktisch in solchen Abfragen hier, weil Default-Bridge kann ja Null

567
01:09:23,600 --> 01:09:29,560
sein. Ich sage hier Default, also Get-All-Network-Interfaces und ich suche das erste

568
01:09:29,560 --> 01:09:38,560
Interface, was Vibr0 heißt. Und wenn ich das nicht finde, dann ist ja das, was hier rauskommt,

569
01:09:38,560 --> 01:09:43,200
Null. Und das sieht man ja auch hier. Der Typ ist Network-Interface-Fragezeichen. Also das ist

570
01:09:43,200 --> 01:09:53,200
ein Network-Interface oder Null. So, und jetzt ist halt die Sache, Default-Bridge kann ein Network-

571
01:09:53,200 --> 01:10:04,120
Interface sein oder es ist Null. Wäre Null nicht auch False? Nein, wir sind nicht in Javascript.

572
01:10:04,120 --> 01:10:12,400
Im Javascript-Land ist das so. C-Sharp ist das zumindest implizit nicht so. Kann es Null und

573
01:10:12,400 --> 01:10:19,040
Bulls gar nicht direkt vergleichen? So, und damit ich die Abfrage hier relativ kurz und knackig

574
01:10:19,040 --> 01:10:22,920
halten kann, gibt es in den Sharp-Seiten ein paar Versionen schon diesen Fragezeichen-Operator.

575
01:10:22,920 --> 01:10:27,440
Der Fragezeichen-Operator, ich weiß gar nicht, wie das Ding offiziell heißt. Ich glaube,

576
01:10:27,440 --> 01:10:34,840
Null-Coalescing-Operator oder wie auch immer nennt sich das offiziell. Das ist quasi ein If,

577
01:10:34,840 --> 01:10:41,120
was er unter der Haube macht. Also wenn er das hier kompiliert, checkt er vorher, ob das hier

578
01:10:41,120 --> 01:10:46,280
Null ist. Aber es ist doof, wenn ich dieses If hier, If-Default-Bridge-Null, wenn ich das

579
01:10:46,280 --> 01:10:53,040
von Hand machen muss. Das heißt, ich sag jetzt hier, okay, ich möchte gerne auf dieser Default-Bridge

580
01:10:53,040 --> 01:10:58,240
Get-IP-Properties aufrufen. Lack das Stream, das kann ich dir sagen, ob der laggt, wer weiß,

581
01:10:58,240 --> 01:11:06,480
obwohl davon wieder Shit ist. Drop-Frames, nein, nicht ein Frame getropped, dann laggt er bloß

582
01:11:06,480 --> 01:11:12,240
bei dir. Ich möchte Get-IP-Properties aufrufen auf diese Default-Network-Bridge. Allerdings,

583
01:11:12,240 --> 01:11:17,760
die Default-Network-Bridge kann ja Null sein, weil er das nicht gefunden hat. Deswegen guckt er an

584
01:11:17,760 --> 01:11:22,360
dieser Stelle, wenn es nicht Null ist, nur dann ruft er das auf. Dann macht er den ganzen anderen

585
01:11:22,360 --> 01:11:28,480
Krempel. Das bedeutet jetzt allerdings, hier kommt zwar ein Bool raus, allerdings, wenn das hier Null

586
01:11:28,480 --> 01:11:35,360
ist, dann kann ja kein Bool rauskommen, weil ich das Eigentliche, was dazu führt, nicht ausführen

587
01:11:35,360 --> 01:11:43,120
kann. Das heißt, es ist quasi ein Value-Type, also ein Bool, der allerdings auch Null sein kann.

588
01:11:43,120 --> 01:11:55,760
So, und wenn man jetzt checken will, ob ein Nullable-Bool denn einen gewissen Wert enthält,

589
01:11:55,760 --> 01:12:02,000
dann kann man das so machen. Was die Sharp macht, ich kann euch mal die lange Variante davon zeigen,

590
01:12:02,000 --> 01:12:20,200
der sagt, Default-Bridge-Has-IP-Has-Value und Default-Bridge-IP-Value. Also, das hier ist

591
01:12:20,200 --> 01:12:28,720
die Kurzvariante davon. Dass ich nicht jedes Mal checken muss, ist es nicht Null, bzw. ich könnte

592
01:12:28,720 --> 01:12:37,280
auch so machen. Ich glaube, das geht auch. Also, dass ich das nicht jedes Mal machen muss,

593
01:12:37,280 --> 01:12:44,560
ist das die Kurzvariante davon. Das ist nämlich nur True, wenn dort ein Bool drin ist, der nicht

594
01:12:44,560 --> 01:12:50,280
Null ist und der gleichermaßen True ist. Das ist quasi ein kleiner Trick in C Sharp,

595
01:12:50,280 --> 01:12:54,400
oder es kann sogar sein, dass es im offiziellen Style Guide drin steht, wie man sowas überprüfen

596
01:12:54,400 --> 01:12:59,320
kann. Gleich, gleich True geht auch, korrekt. Das funktioniert eigentlich immer, egal mit welchem

597
01:12:59,320 --> 01:13:05,840
von beiden. Also, so würde auch funktionieren. Was sogar die schönere Schreibweise ist,

598
01:13:05,840 --> 01:13:13,080
weil hier will ich ja gar kein Pattern-Matching oder sowas machen. Ja, dann guckt er, wenn die

599
01:13:13,080 --> 01:13:17,680
Default-Bridge Null ist, dann gibt er eine Fehlermeldung aus, fragt, ob man die jetzt

600
01:13:17,680 --> 01:13:23,440
anlegen soll, dann legt er die Default-Bridge an. Aktuell cheate ich noch ein bisschen. Ich

601
01:13:23,440 --> 01:13:31,920
führe unter der Haube ein Shellscript aus, was die Bridge anlegt und wenn die Bridge da ist,

602
01:13:31,920 --> 01:13:40,280
allerdings die Default-Bridge keine IP hat, dann legt er das an mit der IP und startet das.

603
01:13:40,280 --> 01:13:46,760
Muss man jetzt nicht so sehr im Detail wissen. Wichtig ist, wenn ich jetzt versuche zu starten

604
01:13:46,760 --> 01:13:50,600
und aus irgendwelchen Gründen, das ist nämlich das, was hier in Issue 3 beschrieben war,

605
01:13:50,600 --> 01:13:56,200
wenn ich die Default-Bridge aus irgendwelchen Gründen gelöscht habe oder wenn die inaktiv ist

606
01:13:56,200 --> 01:14:06,880
und ich versuche das auszuführen, dann sagt er, hey guck mal Alter, wir Bridge Null not found.

607
01:14:06,880 --> 01:14:13,600
Willst du jetzt eine anlegen, dann sage ich yes, dann sagt er hier, guck mal da, das würde ich

608
01:14:13,600 --> 01:14:17,480
anlegen, dann muss man Sudo, muss man Rute-Rechte haben, dass das geht, sagt yes, ok, alles klar.

609
01:14:17,600 --> 01:14:22,280
Wenn man jetzt hier wieder reinguckt, werden die feststellen, die Bridge ist wieder da und

610
01:14:22,280 --> 01:14:30,640
auch wieder gestartet. Das ist im Prinzip nur um diesen Problemfall zu fixen, falls das mal

611
01:14:30,640 --> 01:14:36,200
nicht da ist. Genau, das ist das Einzige, was ich seit dem letzten Stream gemacht habe. Ich habe

612
01:14:36,200 --> 01:14:43,400
das hier hinzugefügt. Achso und ich habe noch ein bisschen schöner gemacht, wie man sich zu

613
01:14:43,400 --> 01:14:48,240
Lib Wirt verbinden kann, aber das ist jetzt eigentlich nicht der Rede wert. Das heißt,

614
01:14:48,240 --> 01:14:51,680
ich muss hier nicht jedes Mal die Session angeben, sondern kann einfach sagen Create for Session,

615
01:14:51,680 --> 01:15:03,560
sonst hat sich da nichts geändert. So sieht es aus und heute gucken wir uns mal den Pull-in-Request

616
01:15:03,560 --> 01:15:13,680
an von unserem Five-Hat-Mod, nämlich Improvements for Build and More Distros. Also was heißt von

617
01:15:13,680 --> 01:15:17,880
unserem Five-Hat-Mod, das unterstellt jetzt den anderen Mods, dass sie nicht Five-Hat sind,

618
01:15:17,880 --> 01:15:26,000
aber wir haben selbstverständlich nur Five-Hat-Mods oder Cute-Mods, wobei der Original Cute-Mod ja

619
01:15:26,000 --> 01:15:35,000
schon lange nicht mal da war. Und nicht nur die Mods sind Hi-IQ, der Chat selbstverständlich auch,

620
01:15:35,000 --> 01:15:40,160
weil ihr wisst ja, ich kann es ja nicht oft genug sagen, aber wie gerade übrigens die Nass läuft,

621
01:15:40,160 --> 01:15:48,560
ich weiß nicht, woher. Man kann sich oft genug sagen, dass jeder Prime-Sub zu mehr Five-Hat führt

622
01:15:48,560 --> 01:15:55,440
und nachdem mittlerweile schon so viele Leute Prime-Sub haben, ist der IQ einfach durch die

623
01:15:55,480 --> 01:16:00,840
Decke. Allerdings verfällt das auch mit der Zeit, man muss regelmäßig resubben, damit das anhält.

624
01:16:00,840 --> 01:16:06,200
Und jetzt mal ganz ohne Spaß, falls ihr Prime-Subs übrig habt, guckt, dass ihr die irgendwo auf Twitch

625
01:16:06,200 --> 01:16:10,560
raushaut. Wie gesagt, muss auch nicht bei mir sein, sucht euch im Zweifelsfall auch irgendeinen

626
01:16:10,560 --> 01:16:15,600
5-Mann-Streamer oder so, die freuen sich da auch immer unglaublich drüber. Aber überweist Bezos

627
01:16:15,600 --> 01:16:23,160
kein Geld. Gebt das Ding irgendwo aus. Radiosignal, danke schön für den Sub.

628
01:16:23,160 --> 01:16:34,760
Was ist mit normalen Subs? Normale Subs verfallen ja nicht. Normale Subs ist ja nicht so, als musst du

629
01:16:34,760 --> 01:16:40,080
einmal im Monat subscriben und du verschenkst Geld. Über normale Subs freue ich mich natürlich auch,

630
01:16:40,080 --> 01:16:45,040
die verfallen aber nicht. Die kann man komplett aus freien Stücken und wann man will abschließen.

631
01:16:45,040 --> 01:16:52,600
Also falls es dir jetzt danach ist und du willst, habe ich da natürlich auch nichts dagegen. Keine

632
01:16:52,600 --> 01:16:57,880
Bezos für Bezos. So, also, wir gucken uns jetzt mal diesen Pull-Request hier an und zwar, was hat

633
01:16:57,880 --> 01:17:04,120
er denn hier drin gemacht? Zeigt mal hier. Ich habe da vorhin schon mal kurz drüber geguckt und zwar

634
01:17:04,120 --> 01:17:12,720
er hat, ähm, what? Das habe ich vorhin gar nicht gesehen. Ah, nee, okay. Check some files eingeführt,

635
01:17:12,720 --> 01:17:17,680
das ist was, das habe ich vorgeschlagen glaube ich oder wurde vorgeschlagen im letzten Stream,

636
01:17:17,680 --> 01:17:26,960
wo wir wieder sehen, high IQ Stream am Start, dass wir die Images doch mit Check some vergleichen

637
01:17:26,960 --> 01:17:31,080
könnten, um zu wissen, wann die Images geupdatet wurden. Das ist eigentlich eine sehr schlaue Idee.

638
01:17:31,080 --> 01:17:41,080
Ich glaube, das übernehme ich einfach auch so. Er hat Check some files eingeführt. Er hat

639
01:17:41,080 --> 01:17:50,320
Verschreiber von mir korrigiert, nämlich Ubuntu 22.04 ist nicht Focal, sondern Jammy. Jammy Jellyfish

640
01:17:50,320 --> 01:17:59,600
heißt das aktuelle Ubuntu, wobei das aktuelle gar nicht mehr. Ubuntu 23.04 ist es denn rausgekommen

641
01:17:59,600 --> 01:18:11,780
schon. Luna Lobster. Ja, anscheinend. Willke, danke für den Sub und Oliver,

642
01:18:11,780 --> 01:18:20,300
Ponger Subscription hier, danke Leute. Oh, Leute, mein Sound ist kaputt.

643
01:18:20,300 --> 01:18:34,500
Hä? Jetzt geht's wieder? Alles gut.

644
01:18:41,780 --> 01:18:53,140
Komischer Bug. Nein, es kann per Definition keine Bugs haben, weil wir programmieren ja

645
01:18:53,140 --> 01:19:02,340
eigentlich prinzipiell immer nur fehlerfreie Software. Sollen wir einen Schwamm montieren?

646
01:19:02,340 --> 01:19:16,220
Er tut eigentlich noch. Nur, dass ich eben gerade das Mikrofon gegriffen habe. So. Wie

647
01:19:16,220 --> 01:19:21,900
heißt der Übersetzer für die Cute Voice? Das ist ein japanischer oder koreanischer Text-to-Speech-Engine,

648
01:19:21,900 --> 01:19:47,420
die das hier macht. Wie die heißt, das ist eine gute Frage. Boah, ich hab keine Ahnung mehr. Ich

649
01:19:47,420 --> 01:19:54,980
hab auch in den Source Code von Memeboard schon Jahre nicht mehr reingeguckt. Wo hab ich das denn

650
01:19:54,980 --> 01:20:06,300
hier? Web Application 11, WPF App 2, bester Name überhaupt. Steam Deck? Ich hab absichtlich keinen

651
01:20:06,300 --> 01:20:10,540
Steam Deck, weil ich will das alles selbst sehen, deswegen hab ich mir selbst so was gebaut. Das

652
01:20:10,540 --> 01:20:14,980
gibt ja eine Web-Interface dazu auf dem zweiten Monitor. Also auf dem zweiten Monitor hab ich das

653
01:20:14,980 --> 01:20:22,660
hier. Da kann ich die Dinge anklicken und dann erscheinen die halt. Manche laggen auch ein

654
01:20:22,660 --> 01:20:38,700
bisschen, bis sie erscheinen. Ja, ich hab da aber ewig nicht reingeguckt. Wie heißt dieses Text?

655
01:20:38,700 --> 01:21:08,660
Massive lag? Lagged überhaupt nix. So. Wo könnte ich das haben? Text-to-Speech. Wo

656
01:21:08,820 --> 01:21:15,340
könnte ich das haben? Keine Ahnung. Aber ich wünsche Studio Code hier installiert. Da muss

657
01:21:15,340 --> 01:21:24,540
ich mit Notepad aufmachen. Okay, da ist schon mal nix drin. Text-to-Speech, hier ist wahrscheinlich

658
01:21:24,540 --> 01:21:38,500
auch nix drin. Services? Text-to-Speech-Service. Das klingt gut. Okay, wer findet es? Wer findet

659
01:21:38,540 --> 01:21:49,740
es ohne Syntax-Highlighting und alles? Ihr. GetBytes, okay. Ist das ein Api-Key? Weiß nicht,

660
01:21:49,740 --> 01:22:04,580
wahrscheinlich. Ihr. Voicetext.japan. V1. TTS. Credentials liegt. Ja, es gibt Schlimmeres.

661
01:22:04,660 --> 01:22:11,660
Das hier verwende ich wohl. Ich hoffe, man kann die Seite noch öffnen, ohne dass jetzt

662
01:22:11,660 --> 01:22:22,220
da irgendwelche Handhals kommen oder sowas. Das gibt's gar nicht mehr. Aber das geht auch

663
01:22:22,220 --> 01:22:33,020
nur per Post-Request. Leute, ich bin mir nicht sicher, ob ich die Seite öffnen möchte. Ich

664
01:22:33,020 --> 01:22:47,420
lasse es mal lieber. Es wird nicht nur Qualitätscode geschrieben, es wird auch nur fehlerfreier

665
01:22:47,420 --> 01:23:04,700
Code geschrieben. Wie man hier sieht, das war gar kein Verschreiber hier oder so. Okay,

666
01:23:04,700 --> 01:23:12,180
muss mal kurz das Kabel hier ein bisschen. Oh, oh, oh, oh, es hat sich fast runtergeschmissen.

667
01:23:12,180 --> 01:23:23,180
Sack. So, okay, exellent. Also, was ist noch drinne in dem Pull-Request? Er hat ein paar

668
01:23:23,180 --> 01:23:44,220
Sachen von mir korrigiert, wo ich mich verschrieben habe. Check-Summe hinzugefügt. Neue Betriebssysteme

669
01:23:44,220 --> 01:23:51,820
hinzugefügt, was immer nice ist. Du hast jetzt gecheckt, dass du max... Nein, bin ich nicht.

670
01:23:51,820 --> 01:24:05,660
Ich bin Wubblors. Wie kommst du darauf? Okay, das Logo habe ich von Max geklaut. Es gibt noch

671
01:24:05,660 --> 01:24:11,380
mehr Leute, die mein Logo geklaut haben, habe ich letztens auf Twitter erfahren. Ich bin

672
01:24:11,380 --> 01:24:25,340
obviously nicht Max FPS. Wir haben nur das gleiche Logo. So, er hat ein paar neue Betriebssysteme,

673
01:24:25,340 --> 01:24:32,340
aber schön, dass du deinen Weg hergefunden hast. Ich habe letztens auf Twitter, hat mich

674
01:24:32,340 --> 01:24:37,900
jemand angeschrieben. Das fand ich witzig. Es hat mich letztens jemand auf Twitter angeschrieben,

675
01:24:37,900 --> 01:24:43,980
Max, dieser Streamer hat dein Logo geklaut. Ich dachte erst, er schickt mir jetzt einen Link von

676
01:24:43,980 --> 01:24:52,500
Wubblors. War es dann aber gar nicht. Er hat mir einen Link geschickt von jemand anderem auf Twitter.

677
01:24:52,500 --> 01:24:57,860
Ich zeige euch ihn jetzt nicht, weil, ein bisschen nicht flamen, so schlimm ist das nicht. Er hat

678
01:24:57,860 --> 01:25:02,780
mir einen Link geschickt von jemand anderem. Der hat wirklich auch mal Kicks geklaut. Sein ganzer

679
01:25:02,780 --> 01:25:15,340
Kanal ist auch so kicksmäßig gestylt und das Logo ist halt original mein Logo. Er hat einfach

680
01:25:15,340 --> 01:25:20,340
meinen Kicks geklaut. Wahrscheinlich hat er den bei Google in der Suche gefunden und hat gedacht,

681
01:25:20,340 --> 01:25:29,500
den nehme ich jetzt oder sowas. Keine Ahnung. Was ich viel blöder fand, vielleicht hat auch sein

682
01:25:29,500 --> 01:25:35,500
Artist den Kicks geklaut. Ja, das kann sein. Dann ist die Anzeige raus an den Artist. An das

683
01:25:35,500 --> 01:25:44,420
Trinkendenken, du hast recht. Das ist gut, dass ich das eingeführt habe, sonst vergesse ich das.

684
01:25:44,420 --> 01:25:52,060
Und was ich dann ein bisschen blöd fand, ist, Leute, die ihm im Chat darauf hingewiesen haben,

685
01:25:52,060 --> 01:25:57,340
dass es ja eigentlich ein Logo von mir ist, wurden gebannt. Das fand ich dann schon ein

686
01:25:57,340 --> 01:26:06,260
bisschen cringe. Ich fände es gar nicht mal so schlimm, wenn er sagen würde,

687
01:26:06,260 --> 01:26:12,780
hey mein Artist hat mir halt misst erzählt oder so. Aber dann auch die Leute zu bannen,

688
01:26:12,780 --> 01:26:14,980
die ihn darauf hinweisen, ich schon ziemlich fail.

689
01:26:27,340 --> 01:26:41,900
Ja, lasst uns mal weiter den Pullgequest angucken. Da hat Rocky Linux 8 und 9 hinzugefügt. Hast du

690
01:26:41,900 --> 01:26:46,980
das Logo irgendwie schützen lassen? Du meinst, das irgendwie patenttechnisch eintragen oder so?

691
01:26:46,980 --> 01:26:54,380
Nö. Aber ich meine, es wurde in meinem Auftrag angefertigt. Also die Rechte an dem Logo habe

692
01:26:54,380 --> 01:27:09,860
ich, die kann jetzt nicht einfach einer kopieren. So, Rocky 8, Rocky 9 hinzugefügt,

693
01:27:09,860 --> 01:27:15,460
Checksum angepasst, bisschen angepasst. Ja, dann müssen wir gucken, was wir machen,

694
01:27:15,460 --> 01:27:24,180
wenn es hier keine Checksum für gibt. Ja, das habe ich schon dazu geschrieben. Und zwar Max,

695
01:27:24,180 --> 01:27:30,900
das geht so nicht. Weißt du auch warum? Weil das muss tatsächlich so bleiben, wie es hier steht,

696
01:27:30,900 --> 01:27:40,580
weil lib wird bzw. das KVM und drumherum kommen durcheinander, wenn es QCode2-Images sind,

697
01:27:40,580 --> 01:27:46,980
die nicht QCode2 als Endung haben. Und die Ubuntu-Images, die haben .img als Endung. Und

698
01:27:46,980 --> 01:27:51,100
da denkt er, das sind Raw-Images, obwohl es QCode2-Images sind. Deswegen wird hier

699
01:27:51,100 --> 01:28:00,660
hardcoded QCode2 dran gehängt. Das muss so bleiben, sonst funktioniert es nicht. Guck,

700
01:28:00,660 --> 01:28:08,780
die Ubuntu-Images sind .img, obwohl es unter der Haube QCode2-Images sind. Nur dass sie der

701
01:28:08,780 --> 01:28:13,820
Meinung waren, sie speichern das nicht unter QCode2. Warum? Ich habe keine Ahnung, weil Canonical

702
01:28:14,820 --> 01:28:25,740
kein Schimmer, aber das muss so bleiben. So, das kann man so machen. Die ReadMe wurde angepasst,

703
01:28:25,740 --> 01:28:31,460
das ist auch okay. Du meinst, dass es beim Testen geklappt hat? Also ich hatte Probleme damit.

704
01:28:31,460 --> 01:28:39,940
Wir sollten das Risiko nicht eingehen. Man kann das auch im XML fixen. Ich habe es hardcoded

705
01:28:39,940 --> 01:28:47,300
im XML drin stehen, aber ich bin mir relativ sicher, ich habe es erst eingebaut, als ich Probleme

706
01:28:47,300 --> 01:28:52,660
hatte. Davor gab es das auch noch gar nicht. Ich habe das eingebaut, nachdem ich Probleme hatte,

707
01:28:52,660 --> 01:28:55,980
dass er das Ding nicht als richtiges Image erkannt hat. Es schadet ja auch nichts.

708
01:28:55,980 --> 01:29:03,100
Es schadet ja auch nichts, wir lassen es mal lieber drin. So, und dann hat er das

709
01:29:03,100 --> 01:29:10,140
Buildscript noch hübsch gemacht mit Farben und Zeug. Ich würde sagen, das merken wir jetzt.

710
01:29:10,140 --> 01:29:17,060
Und dann müssen wir glaube ich ein paar kleine Sachen noch anpassen, wie zum Beispiel das mit

711
01:29:17,060 --> 01:29:24,220
dem QCode2 und ich glaube, das Buildscript wird nicht mehr funktionieren. Ich vermute,

712
01:29:24,220 --> 01:29:36,460
das Buildscript wird nicht mehr richtig klappen. So, also dann merken wir mal den Pullrequest,

713
01:29:36,460 --> 01:29:41,100
allerdings wir merken ihn nicht so direkt, weil ich möchte ja noch ein paar Sachen anpassen.

714
01:29:41,100 --> 01:29:49,140
Ich merke ihn lokal. So, und jetzt obacht, wie man in GitHub lokal Pullrequest merkt. Die meisten

715
01:29:49,140 --> 01:29:56,020
Leute wissen nur, dass man in einem Pullrequest hier unten auf Mergen klicken kann und dann wird

716
01:29:56,020 --> 01:30:02,300
er gemerged. Ja, das funktioniert, aber das geht auch anders. Und zwar es gibt die manuelle Variante,

717
01:30:02,300 --> 01:30:10,220
die komplett manuelle Variante und es gibt die GitHub-Commando-Zeilen-Tool-Variante. Die

718
01:30:10,220 --> 01:30:16,140
GitHub-Commando-Zeilen-Tool-Variante kann ich nicht machen, weil ich habe die GitHub-Cli gar

719
01:30:16,140 --> 01:30:19,540
nicht installiert. Das heißt, wir müssen die komplett manuelle Variante machen. So,

720
01:30:19,540 --> 01:30:30,100
und das geht auch wiederum auf zwei Varianten. Entweder man nimmt sich das hier vom Fork,

721
01:30:30,100 --> 01:30:36,340
kopiert man sich das repo und sagt, wobei das nicht die schönste ist. Ich zeige es euch aber

722
01:30:36,340 --> 01:30:40,540
trotzdem mal, dass es theoretisch funktionieren würde. Ja, man müsste dann sagen Git, das ist

723
01:30:40,540 --> 01:30:45,540
aber übelst umständlich. Git, Remote, Add, Feature und das hinzufügen und dann könnte

724
01:30:45,540 --> 01:30:53,100
man mit dem Remote-Repo vom Serious Max arbeiten, was aber ein bisschen umständlich ist. Was man

725
01:30:53,100 --> 01:31:08,500
auch machen kann, was aber ein bisschen kryptisch aussieht, man kann sagen Git, Fetch,

726
01:31:08,500 --> 01:31:14,500
dann muss man das Remote angeben. Bei mir ist das Remote GitHub, bei euch heißt das Remote

727
01:31:14,500 --> 01:31:22,300
wahrscheinlich Origin, weil Origin das Remote ist, von dem das repo geklont wurde. Allerdings,

728
01:31:22,300 --> 01:31:27,700
ich habe mehrere Sachen drin, einmal was Lokales und GitHub, wobei das brauche ich eigentlich gar

729
01:31:27,700 --> 01:31:37,180
nicht mehr. Aber wenn ich GitHub-Repos habe, ich lasse die gerne mit dem Namen GitHub als

730
01:31:37,220 --> 01:31:41,220
Remotes drin stehen und nicht als Origin, weil Origin ist immer das, was man relativ schnell

731
01:31:41,220 --> 01:31:46,820
gepusht hat per Default und man möchte manchmal manche Sachen gar nicht so unüberlegt nach

732
01:31:46,820 --> 01:31:51,980
GitHub pushen, weil es hier eben öffentlich ist. Also ich habe GitHub Remote immer ganz gerne auch

733
01:31:51,980 --> 01:31:59,060
mit dem Namen GitHub. Also was man jetzt sagen kann ist Git, Fetch, GitHub heißt es bei mir und dann

734
01:31:59,060 --> 01:32:07,620
kann man bei GitHub angeben, welchen Pull-Request-Stand man lokal Fetchen möchte,

735
01:32:07,620 --> 01:32:11,700
um darauf zuzugreifen. Das funktioniert dann folgendermaßen. Pull, ich weiß nicht,

736
01:32:11,700 --> 01:32:19,020
ob das nicht noch irgendwie einfacher geht. Dann die Pull-Request-Nummer, in dem Fall 5,

737
01:32:19,020 --> 01:32:32,660
5 und dann slash head. Und dann zieht er sich das und sagt, ok, hier alles klar,

738
01:32:32,660 --> 01:32:36,220
habe ich gemacht. Achso, ich kann jetzt auch noch irgendwie benennen. Benennen hier,

739
01:32:36,220 --> 01:32:45,740
keine Ahnung, Max-Feature oder so. Und jetzt gibt es hier Max-Feature, das kann ich jetzt entweder

740
01:32:45,740 --> 01:32:51,140
mir das alles lokal nochmal angucken, was er hier gemacht hat oder ich könnte auch sagen Git

741
01:32:51,140 --> 01:32:58,020
Checkout da drauf und mir das angucken, was er da gebaut hat. Das geht, jetzt habe ich das

742
01:32:58,020 --> 01:33:03,300
alles lokal. Jetzt gehen wir in meinen Master und ich sage Git. Übrigens, anstatt das hier zu

743
01:33:03,300 --> 01:33:07,860
Fetchen, ich hätte es wahrscheinlich auch direkt merchen können. Das habe ich so noch gar nicht

744
01:33:07,860 --> 01:33:14,540
ausprobiert. Aber jetzt, so kann ich auf jeden Fall sagen Git Merge Max-Feature. Merge Branch

745
01:33:14,540 --> 01:33:21,900
Max-Feature, alles gut. Dann heißt es halt ein bisschen anders da wie Remote, das ist halt auch

746
01:33:21,900 --> 01:33:26,860
irgendwie doof. Aber das machen wir jetzt einfach mal. Was ich nämlich machen will ist, ich will das

747
01:33:26,860 --> 01:33:35,220
zwar merchen von ihm, aber ich hätte es vielleicht so nennen sollen, dann wüsste man auch Bescheid.

748
01:33:35,220 --> 01:33:39,220
Zumindest kann ich jetzt die Sachen noch editieren, bevor ich das ganze Remote zu

749
01:33:39,220 --> 01:33:49,780
Git pushe. Das erste, was ich editieren will, ist folgendes. Nämlich im Downloader will ich das

750
01:33:49,780 --> 01:33:56,700
wieder rückgängig machen mit dem Image Name. Also plus QCOW 2 dran. Das ist das, was ich

751
01:33:56,700 --> 01:34:11,660
ja auch im Code Review geschrieben habe. Dass das so bleiben muss hier. Da muss auf jeden Fall

752
01:34:11,660 --> 01:34:18,460
Punkt QCOW 2 rein. Ist das schon mal gefixt? Und jetzt müssen wir uns noch mal das Bild angucken,

753
01:34:18,460 --> 01:34:23,580
weil ich vermute, dass das neue Buildscript, was er gebaut hat, nicht mehr funktionieren wird mit

754
01:34:23,580 --> 01:34:28,820
dem neuen Dockerfile. Das müssen wir uns jetzt mal angucken. Zumindest, er hat das sehr schön

755
01:34:28,820 --> 01:34:37,580
gemacht, das neue Buildscript. Das ist jetzt nämlich bunt. Weiß ich, ob ich BuildX installiert

756
01:34:37,580 --> 01:34:42,940
habe? Nee, nicht. Da sieht es noch schicker aus. Jetzt kann man das nämlich aufrufen. Build SH,

757
01:34:43,260 --> 01:34:50,940
Version 5. Und jetzt guckt mal, hat er das nicht nice gemacht. Jetzt hat man sogar farbigen Output.

758
01:34:50,940 --> 01:35:07,420
Ich breche das mal ab. Eine Sache ändern wir noch in dem Buildscript und zwar ein richtiger

759
01:35:07,740 --> 01:35:15,940
Macher. Das ist das wahre High-Performer-Mindset. Wir machen noch mal eine Sache beim Build-Stab.

760
01:35:15,940 --> 01:35:24,900
Und zwar hier. Wir machen das Quiet weg, damit man was sieht. Das hat mir nämlich beim alten

761
01:35:24,900 --> 01:35:29,180
Buildscript schon nicht gefallen, dass man, wenn er abgekackt ist, nicht gesehen hat,

762
01:35:29,180 --> 01:35:40,820
an welcher Stelle abkackt. Und jetzt bauen wir das Ganze noch mal. Ja, jetzt erkennt man

763
01:35:40,820 --> 01:35:45,860
schon ein bisschen mehr, was passiert. Also, Build Docker Image. Guck mal, hat er das nicht

764
01:35:45,860 --> 01:35:52,180
sogar schön Emojified, den Output? Da ist auch die Zoomer-Generation noch am Start,

765
01:35:52,180 --> 01:36:14,300
bis das fertig gebildet ist. Er kompiliert den ganzen Krempel. App Builds. Error! Error

766
01:36:14,300 --> 01:36:19,900
response from Demon. Could not find the file for MChamp in Container. Ah ja, gut, mein Docker

767
01:36:19,900 --> 01:36:27,580
File ist kaputt. Das funktioniert nicht mehr. Da fällt mir noch was ein. Docker PSA. Da hat

768
01:36:27,580 --> 01:36:38,780
jetzt einen übrig gebliebenen Container, oder? Hier, Container Name for MChamp is already in use.

769
01:36:38,780 --> 01:36:51,220
Da müssen wir noch was einbauen, dass er am Anfang. Alter, wie viel Container-Schrott habe

770
01:36:51,220 --> 01:36:58,580
ich denn hier bitteschön übrig? 10 Gigabyte. Da müssen wir noch was einbauen, und zwar wir

771
01:36:58,580 --> 01:37:07,460
nehmen das, wo das Container Image wieder entfernt wird. Und übrigens ist es gut,

772
01:37:07,540 --> 01:37:12,140
dass Docker mittlerweile Build X als Standard verwendet, weil damit ist das viel einfacher

773
01:37:12,140 --> 01:37:18,060
als hier. Und wir machen ganz am Anfang, kopieren wir das einfach und sagen jetzt

774
01:37:18,060 --> 01:37:29,460
Docker Remove Old Container. Das heißt, falls der da ist, wird er gelöscht. Ah, Bild. Ah ja gut,

775
01:37:29,460 --> 01:37:34,500
jetzt müssen wir es nochmal durchlaufen lassen. Okay, das sollte auf jeden Fall, wenn der Container

776
01:37:34,500 --> 01:37:40,620
da ist, es wieder löschen, aber der Output stimmt nicht. Das heißt, ich muss anpassen,

777
01:37:40,620 --> 01:37:52,820
woher das Image kopiert wird. Ja, das ist easy. Da muss ich gleich nochmal ins, ich gehe hier unten,

778
01:37:52,820 --> 01:37:58,700
ich mache das hier unten einfach. Docker File. Wir kopieren das einfach an die Stelle, wo du das

779
01:37:58,700 --> 01:38:03,900
erwartest und gut ist. Das brauche ich, nur ganz kurz erwähnt, das brauche ich für mein

780
01:38:03,900 --> 01:38:17,820
GitHub Actions Build. Jetzt funktioniert das nicht. So. Ich glaube, so müsste es jetzt passen.

781
01:38:17,820 --> 01:38:23,540
Gut, jetzt schauen wir mal, ob das Bild oben durchläuft. Wobei, nee, das Bild kann ich

782
01:38:23,540 --> 01:38:29,260
durchlaufen, weil, recht ist ab, das kann ich durchlaufen, weil ich das Docker-File zu

783
01:38:29,260 --> 01:38:36,500
spät aktualisiert habe. Machen wir das nochmal. So, durchlaufen lassen. Müssen wir sonst noch

784
01:38:36,500 --> 01:38:44,060
irgendwas anpassen in diesem Pull-Request? Wie sah denn die ReadMe aus? Wie sieht denn die ReadMe

785
01:38:44,060 --> 01:38:51,100
jetzt aus danach? Hier, das ist alles, was du eingefügt hast. Du hast an oberen Stellen nichts

786
01:38:51,100 --> 01:38:58,060
geändert, weil sonst hätte es wahrscheinlich auch einen Konflikt gegeben. Nee, das ist noch

787
01:38:58,060 --> 01:39:03,180
das alte, was ich geschrieben habe, nur das untere. Okay, Bildexample hat er hinzugefügt.

788
01:39:03,180 --> 01:39:22,100
Okay, das müsste funktionieren. Es ist auch gar eine gute Idee, das nicht nach TMP zu schreiben,

789
01:39:22,100 --> 01:39:31,020
wie ich das am Anfang gemacht habe. Okay, das passt. Jetzt gucken wir nochmal, ob das Bild

790
01:39:31,020 --> 01:39:43,140
jetzt auch durchläuft. Und ich muss mein Git ignore checken, ob ich Bild excluded habe. Ja,

791
01:39:43,140 --> 01:39:46,900
ich habe Bild excluded. Sonst würde ich jetzt Binaries ins Git commiten, da bin ich nicht so

792
01:39:46,900 --> 01:39:53,220
scharf drauf, ehrlich gesagt. Okay, es hat funktioniert. Bild lief durch. Create-Container-Done,

793
01:39:53,220 --> 01:39:59,300
Docker-Copy-Binary-Done, Docker-Remove-Container-Done. Schön buntig alles, so wie das sein muss.

794
01:39:59,300 --> 01:40:15,220
Output-Dear. Ja, sehr nice. Das gefällt mir. Schönes Bildscript. Und unter slash-build

795
01:40:15,220 --> 01:40:20,740
vm-champ liegt jetzt das Binary. Ja, nice, nice, das ist schick. Ich würde sagen,

796
01:40:20,740 --> 01:40:28,540
so können wir das Ganze lassen. Wir probieren nochmal kurz aus, ob das auch mit BuildX funktioniert,

797
01:40:28,580 --> 01:40:34,540
falls ich BuildX installiert habe. Sollte eigentlich auch, weil BuildX ist mittlerweile default in

798
01:40:34,540 --> 01:40:41,260
Docker. Das sollte die gleichen Parameter fressen wie das original Docker-Build,

799
01:40:41,260 --> 01:40:46,420
aber man weiß es nicht. Also, nur mal der Unterschied. Früher hat man Docker-Container

800
01:40:46,420 --> 01:40:51,580
so gebaut. Docker-Build und dann halt das aktuelle Docker-File. Danach gab es BuildKit.

801
01:40:51,580 --> 01:41:01,300
BuildKit gibt es schon ein paar Jahre und das war unter BuildX. Das war quasi eine neue

802
01:41:01,300 --> 01:41:06,860
Build-Engine für Docker. Das musste man dann so aufrufen. Also, das hier war das Original so

803
01:41:06,860 --> 01:41:14,500
und BuildX ist das neue. Seit einem der letzten Docker-Versionen, seit dieser Docker-Version

804
01:41:14,500 --> 01:41:20,300
tatsächlich sogar, das ist relativ frisch, ist das alte Docker-Build deprecated, was er hier

805
01:41:20,300 --> 01:41:30,020
übrigens auch sagt, irgendwo. Er sagt, deprecated. Legacy-Builder is deprecated, will be removed

806
01:41:30,020 --> 01:41:36,940
in a future release. Also, normales Docker-Build ohne BuildX ist eventuell nicht mehr so lange

807
01:41:36,940 --> 01:41:42,300
vorhanden, wobei meine persönliche Vermutung ja ist, dass sie den Legacy-Builder niemals

808
01:41:42,300 --> 01:41:49,380
aus Docker entfernen, weil wahrscheinlich Leute das einfach hardcoded irgendwie drin haben und

809
01:41:49,380 --> 01:41:54,180
sich auf irgendwelche Eigenheiten davon verlassen, die BuildX vielleicht nicht hat und was auch immer.

810
01:41:54,180 --> 01:41:59,460
Ich glaube persönlich, dass es nie entfernt wird der Legacy-Builder aus Docker, aber es

811
01:41:59,460 --> 01:42:07,740
halt eben keine weitere Entwicklung geht. An das Trinken erinnern. Exzellent. Portman oder Schütze

812
01:42:07,740 --> 01:42:12,580
nicht alle BuildX-Features? Ich habe keine Ahnung, weiß ich aus dem Kopf nicht. Portman benutze ich

813
01:42:12,580 --> 01:42:20,460
manchmal ganz gerne, wenn du kein Route-Access hast oder sowas. Oder wenn du, wo Portman auch

814
01:42:20,460 --> 01:42:25,260
ganz praktisch ist, wenn du in lokale Registries pushen willst, die kein gültiges TLS-Zertifikat

815
01:42:25,260 --> 01:42:31,260
haben, dann muss man Docker immer recht aufwendig umkonfigurieren. Und bei Portman ist es einfach

816
01:42:31,260 --> 01:42:40,340
eine Option, dass man das pushen kann. So, habe ich jetzt BuildX installiert, ich will gucken,

817
01:42:40,340 --> 01:42:49,420
ob es mit BuildX auch funktioniert. Slash-Build Version 5, sieht schon mal gut aus. Ihr werdet

818
01:42:49,420 --> 01:42:52,880
vielleicht festgestellt haben, das Bild sieht ein bisschen anders aus, das ist jetzt mit BuildX.

819
01:42:52,880 --> 01:43:00,900
BuildX ist das deutlich bessere Docker-File-Erstellungssystem, da laufen mehrere

820
01:43:00,900 --> 01:43:08,020
Sachen parallel, es geht schneller und du kannst vor allem auch Container-Images endlich,

821
01:43:08,020 --> 01:43:15,500
ohne sie zu starten, auf die Dateien in den Docker-Images zugreifen. Früher war es so,

822
01:43:15,500 --> 01:43:20,180
du musstest immer ein Docker-Image bilden, dann starten und erst wenn du es gestartet hast,

823
01:43:20,180 --> 01:43:24,420
konntest du dann aus diesem gestarteten Container bzw. aus dem erstellten Container auf Dateien im

824
01:43:24,420 --> 01:43:28,780
Image zugreifen. Das war ein bisschen umständlich, weil manchmal möchte man ja einfach nur was in

825
01:43:28,780 --> 01:43:32,860
einem Docker-Container bauen und das Binary rauskopieren. Warum soll ich den Container

826
01:43:32,860 --> 01:43:37,300
dafür starten müssen? Und das geht bei BuildX jetzt auch. Ich kann was erstellen, was bauen

827
01:43:37,300 --> 01:43:41,740
im Container und es mir danach aus dem Image kopieren, ohne dass ich dafür einen Container

828
01:43:41,740 --> 01:43:48,900
mit dem Image starten muss. Das ist in der Tat sehr praktisch. Jetzt sollte das Kompilieren

829
01:43:48,900 --> 01:43:57,100
irgendwann noch mal durch sein in 30 Minuten. Immer recht lahmarschig. Fertig,

830
01:43:57,100 --> 01:44:04,420
binaries available unter build-vm-champ-minusversion. Wie geht das denn? Du meinst,

831
01:44:04,420 --> 01:44:16,340
was? Du meinst, Sachen aus dem Container-Image rauskopieren? Oder? Also das geht, also früher

832
01:44:16,340 --> 01:44:22,540
musstest du das so machen, so wie wir das hier im Buildscript machen. Du musstest ein Image,

833
01:44:22,660 --> 01:44:28,900
du musstest ein Image bauen, dann musstest du eine VM damit erzeugen und danach konntest du mit

834
01:44:28,900 --> 01:44:34,980
Docker, das ist der alte Weg, danach konntest du mit Docker CP aus dem vom Image erstellten

835
01:44:34,980 --> 01:44:41,420
Container was rauskopieren. Mit BuildX ist das total einfach. Mit BuildX brauchst du sowas hier

836
01:44:41,420 --> 01:44:47,660
in deinem Docker-File und dann kannst du, ich zeig's dir mal in den GitHub Actions, da machen wir das

837
01:44:47,660 --> 01:44:58,300
nämlich. Und dann kannst du sagen, da, dann sagst du Docker BuildX, Build, wobei man das BuildX an

838
01:44:58,300 --> 01:45:05,420
der Stelle gar nicht mehr braucht, weil Build mittlerweile Default zu BuildX. Dann sagst du

839
01:45:05,420 --> 01:45:12,300
hier, Minusminus Target Output, Minusminus Output Type gleich Local Destination, wo der Ordner hin

840
01:45:12,300 --> 01:45:19,020
soll. Target ist das, was du hier in deinem Docker-File als Name angegeben hast. Scratch ist

841
01:45:19,020 --> 01:45:25,180
so eine No-op-Image, was quasi nur temporär existiert, was nicht wirklich gebaut wird.

842
01:45:25,180 --> 01:45:33,420
Du nennst das hier Output und hier gibst du an Target Output und dann, wo du eine Datei eben aus

843
01:45:33,420 --> 01:45:38,220
diesem Build-Step hinschreiben willst. Also im Docker-File wird hier dieser Output,

844
01:45:38,700 --> 01:45:44,580
dieser temporäres Image erzeugt. Es werden aus dem vorherigen Build-Step das Binary reinkopiert

845
01:45:44,580 --> 01:45:49,500
und hiermit kopierst du jetzt aus dem Image raus und das geht ohne, dass du den Container starten

846
01:45:49,500 --> 01:45:55,220
musst. Sehr praktische Sache, wenn man einfach nur reproduzierbar was bauen will im Container und

847
01:45:55,220 --> 01:46:04,700
es danach rauskopieren. Passte eigentlich, ich würde sagen, dann ist das soweit durch. Git,

848
01:46:04,700 --> 01:46:10,340
Status, Docker-File, Download, Read Me. Gucken wir noch mal kurz das Diff an, ob ich da irgendwas

849
01:46:10,340 --> 01:46:26,260
übersehen habe. Das sieht gut aus. Das sieht auch gut aus. Das sieht auch sinnig aus. Nö,

850
01:46:26,260 --> 01:46:30,660
ich glaube, das passt. Ich glaube, jetzt können wir das pullen, äh, können wir das pushen.

851
01:46:35,580 --> 01:46:38,700
Git, Lock. Wir können die Änderung jetzt dem Max einfach unterschieben.

852
01:46:38,700 --> 01:46:58,180
Und so tun, als hätte er die gemacht. Git, Status. Git, Push. Ach so. Oh fuck. Nee,

853
01:46:58,180 --> 01:47:04,380
das war eine blöde Idee, Max. Ich bin mir nicht sicher, ob er jetzt noch erkennt. Na doch,

854
01:47:05,020 --> 01:47:21,500
er sollte es noch erkennen. Also eins davon müsste dein Comet sein. 1C3, ja gut. Er sollte es beim

855
01:47:21,500 --> 01:47:29,340
Pushen noch erkennen, dass es dein Feature Branch ist. Gut. Git, Push. Git, Master.

856
01:47:29,340 --> 01:47:36,940
Wenn ich jetzt alles richtig gemacht habe und das am Ende kein Problem war,

857
01:47:36,940 --> 01:47:48,500
dann ja. Pull Request ist closed. Ja, Pull Request wurde geschlossen von hier in diesem

858
01:47:48,500 --> 01:47:53,780
Merch. Das heißt, haben wir das auch erledigt. Jetzt haben wir ein schönes,

859
01:47:54,180 --> 01:48:06,260
sehr hübsches Buildscript. Aber was war denn sonst noch drin, was ich vielleicht noch mal

860
01:48:06,260 --> 01:48:12,100
testen muss? Rocky Linux können wir testen, ob das jetzt funktioniert. Wobei, er hat ja noch

861
01:48:12,100 --> 01:48:17,620
geschrieben, was er gemacht hat. Er hat Ubuntu 22 gefixt, Fedora 36 Link gefixt, ein schöneres

862
01:48:17,620 --> 01:48:25,140
Buildscript gemacht, Rocky 8 und 9 und Ubuntu Beta hinzugefügt. Wobei das mittlerweile gar

863
01:48:25,140 --> 01:48:28,340
keine Beta mehr ist wahrscheinlich. Das ist wahrscheinlich mittlerweile sogar raus.

864
01:48:28,340 --> 01:48:37,300
Ja, das muss dabei bleiben und er wollt Duplicate Slashes. Rocky braucht mehr RAM,

865
01:48:37,300 --> 01:48:46,260
sonst bootet das nicht. Okay, machen wir. Ubuntu 23 04. Nee, hast Du gar nicht hinzugefügt.

866
01:48:46,260 --> 01:49:00,220
Fake News. Kennst Du eine gute Lösung, mit der man schnell Twitch-Words

867
01:49:00,220 --> 01:49:15,980
downloaden kann? Ja. Das da. Beste. Ich kann Dir das mal zeigen. Das ist das beste Tool ever

868
01:49:15,980 --> 01:49:23,020
dafür. Ich lade auch nur meine alten Words runter hier. Twitch Wobblos. So funktioniert das. Du

869
01:49:23,020 --> 01:49:29,740
suchst Dir das Wort aus, was Du runterladen willst. Echtes Senior Moves. Ja, so machen das die Seniors.

870
01:49:29,740 --> 01:49:36,220
Die Seniors vertrauen einfach den anderen, dass sie ordentliches Zeug programmieren.

871
01:49:36,220 --> 01:49:46,980
Also mal angenommen, ich will das hier runterladen. Dann sage ich minus F, dann kann ich mir die Formate

872
01:49:46,980 --> 01:49:52,460
angucken, in denen ich es runterladen will. Und dann sagen wir, du willst das Wort runterladen in

873
01:49:52,460 --> 01:49:57,820
700 aus irgendwelchen Gründen. Frag mich nicht warum. Oder du willst aus irgendwelchen Gründen

874
01:49:57,820 --> 01:50:08,620
das Wort in 160p runterladen. Dann gibst Du an, minus F, 160p, Link vom Wort und zack, ist das Wort

875
01:50:08,620 --> 01:50:19,180
am Start. Ja, genau wie bei YouTube. Die Sites unterstützen übrigens extrem viele Sites. Supported

876
01:50:19,180 --> 01:50:25,700
Sites, wenn Du hier drüber scrollst, die werden auch wie ein oder anderen fragwürdigen Sites

877
01:50:25,700 --> 01:50:30,300
auffallen in dieser Liste. Höchstwahrscheinlich. Also da ist alles möglich drinne. Von Pornhub bis

878
01:50:30,300 --> 01:50:42,100
YouTube und Twitch ist da alles möglich zu downloaden. A Boobasites, ja. So und irgendwann

879
01:50:42,100 --> 01:50:46,020
ist es dann fertig runtergeladen. Das dauert ein bisschen. Ich mein Twitch Streams sind teilweise

880
01:50:46,020 --> 01:50:54,020
drei Stunden lang und die Bandbreite ist nicht permanent super hoch. Es geht schon schneller

881
01:50:54,020 --> 01:50:58,500
als drei Stunden Laufzeit. Und irgendwann ist das Video dann fertig runtergeladen und kannst es

882
01:50:58,500 --> 01:51:23,140
aufmachen. Unterstützt bei Twitch leider keinen parallelen Download. Ja, ich gehe mal davon aus,

883
01:51:23,260 --> 01:51:26,820
dass Twitch da auch gar nicht so scharf darauf ist, wenn die Leute ihre Wots irgendwie runterladen.

884
01:51:26,820 --> 01:51:53,020
Aber man sieht, es funktioniert. Was ist die Frage für einen Freund? Wie

885
01:51:53,300 --> 01:52:06,020
ist der Video Kunst? So jetzt ist er demnächst irgendwann fertig. Ich wollte es dir jetzt

886
01:52:06,020 --> 01:52:11,300
eigentlich schnell zeigen, weil ich mir so dachte. Dann sieht man auch, dass es funktioniert.

887
01:52:11,300 --> 01:52:27,820
Allerdings der Download von Twitch ist wirklich nicht sonderlich schnell. Gibt es dieses Tool auch

888
01:52:27,820 --> 01:52:38,900
für Windows? Ja. Das Tool gibt es für Windows, für Mac, für Linux, für nahezu alles. Guck,

889
01:52:38,900 --> 01:52:49,260
gibt es sogar schon fertige Windows Tipps und Sachen. Wenn man eine Application baut,

890
01:52:49,260 --> 01:52:59,660
die sowohl CLI als auch GUI unterstützt, warum würdest du das machen, lieber Headless als Flagg

891
01:52:59,660 --> 01:53:06,260
für keinen? Das kommt ein bisschen darauf an, worauf der Fokus liegt, ehrlich gesagt.

892
01:53:06,260 --> 01:53:16,740
Also ist es hauptsächlich eine UI-Anwendung, die auch von den krassen Hackermans als CLI benutzt

893
01:53:16,740 --> 01:53:21,380
werden darf oder ist es hauptsächlich das CLI, die auch ein eingebautes UI hat? Weißt du was

894
01:53:21,380 --> 01:53:29,540
noch cooler wäre? Weißt du was noch sixheadiger wäre? Minus Minus Surf und dann ist es einfach

895
01:53:29,540 --> 01:53:38,220
eine Web-Anwendung. Du machst Minus Minus Surf und dann gehst du auf Local Host Port 8000 und dann

896
01:53:38,220 --> 01:53:43,540
hast du das UI in einem Browser. Da musst du dir noch nicht mal Gedanken darüber machen,

897
01:53:43,540 --> 01:53:51,580
was für UI-Frameworks du verwendest. Du startest einfach einen lokalen Web-Server,

898
01:53:51,580 --> 01:54:00,060
über die du dir das auslieferst. Die Web-Anwendung. Da musst du keine WPF-Geschichte und sowas machen.

899
01:54:00,060 --> 01:54:10,100
Nein, wenn es ein Standalone Binary sein soll, ist es schwierig mit dem Trennen. Ja, okay,

900
01:54:10,140 --> 01:54:17,260
verstehe ich. Dann sollte es standardmäßig UI sein. Wenn es hauptsächlich UI ist,

901
01:54:17,260 --> 01:54:21,980
dann sollte es auch als UI aufgehen und du kannst dann Minus Minus Headless machen oder was auch

902
01:54:21,980 --> 01:54:31,860
immer. Theoretisch könntest du auch die gleiche Anwendung als zwei Versionen rausbringen.

903
01:54:31,860 --> 01:54:39,820
Es kann exakt die gleiche Anwendung sein, aber anhand des Namens könnte man das unterscheiden.

904
01:54:39,820 --> 01:54:44,140
Oder wie auch immer. Wahrscheinlich würde ich lieber Minus Minus Headless machen,

905
01:54:44,140 --> 01:54:54,660
wenn der Hauptfokus eben UI-Anwendung ist. Ja, wahrscheinlich schon. Ich habe es jetzt

906
01:54:54,660 --> 01:54:57,620
schon drei Minuten laufen lassen. Ich lasse es jetzt noch fertig laufen, den Download,

907
01:54:57,620 --> 01:55:00,980
damit ihr auch seht, dass das funktioniert, wenn man sich das runterläuft.

908
01:55:10,580 --> 01:55:14,780
Gleich ist der Download durch und dann seht ihr, dass es geht. Ich werde das Ding mit VLC oder

909
01:55:14,780 --> 01:55:22,580
FFPlay starten. Wundert euch nicht, den Wort habe ich absichtlich runtergeladen in 160p. Das ist

910
01:55:22,580 --> 01:55:30,580
kleiner. Das ist ungefähr die Auflösung von alten Nokia-Handys, in der ich das runtergeladen habe.

911
01:55:30,580 --> 01:55:38,620
Also nicht wundern, dass es gleich ziemlich beschissen aussieht, was ich abspielen werde.

912
01:55:38,620 --> 01:55:47,300
Also FFPlay. Vier Tage Woche Beste. Guck, da ist er. Runtergeladenes Wort.

913
01:55:47,300 --> 01:55:52,020
Also scharf ungefähr auf so großen Displays.

914
01:55:52,020 --> 01:56:00,740
Native Nokia Display. Nokia Display as a Service.

915
01:56:00,740 --> 01:56:11,340
Aber man erkennt alles, oder? Man erkennt das. Man erkennt das. Man erkennt Chico sehr pixelig und

916
01:56:11,340 --> 01:56:16,820
mein Browser Fenster. Ansonsten erkennt man aber nicht wirklich was. Gut, aber ihr habt gesehen,

917
01:56:16,980 --> 01:56:25,420
so funktioniert das mit Runterladen von VODs. Zensur nicht notwendig, das ist richtig.

918
01:56:25,420 --> 01:56:34,900
Was ist deine Einschätzung? Statischen Code-Analysen in das CI gibt es zu viele Scans.

919
01:56:34,900 --> 01:56:43,580
Wie meinst du, gibt es zu viele Scans? Meinst du, man kann es auch übertreiben oder

920
01:56:43,580 --> 01:56:48,180
damit das verursacht zu viel Last oder was meinst du, gibt es zu viele Scans?

921
01:56:48,180 --> 01:56:55,060
Statische Code-Analysen in das CI. Warum nicht? Also ganz ehrlich, ich finde das nicht verkehrt.

922
01:56:55,060 --> 01:57:08,100
Neben so Sachen wie Syntax-Checks, vielleicht auch irgendwelche funktionalen Tests oder Style-Guide

923
01:57:08,700 --> 01:57:20,380
Style-Guide-Sache. Warum nicht? Warum nicht? Ja. Wenn du richtig cool bist, hast du natürlich im

924
01:57:20,380 --> 01:57:26,740
Hintergrund auch noch irgendeinen Test-Container, der gestartet wird und dann erstmal, also nicht

925
01:57:26,740 --> 01:57:36,060
nur nicht, dass ich jetzt durcheinander bringe. Nicht nur so diese Standard-Unit-Tests, die du

926
01:57:36,060 --> 01:57:43,860
ausführst, sondern auch noch Integration-Tests nennt sich dann, glaube ich. Wenn du die Anwendung

927
01:57:43,860 --> 01:57:50,900
quasi ausführst und guckst, ob sie sich richtig verhält. Erzähl ich Mist, Leute? Ich bin mir

928
01:57:50,900 --> 01:57:58,260
nicht ganz sicher, wie man das nennt. Also es gibt ja die Möglichkeit, den Code zu testen,

929
01:57:58,260 --> 01:58:04,380
indem man seine Funktionen mit Beispielparametern aufruft und gucken, ob die sich wie erwartet

930
01:58:04,380 --> 01:58:09,500
verhalten. Das ist das, was man so standardmäßig unter Unit-Tests laufen lässt. Dann gibt es auch

931
01:58:09,500 --> 01:58:13,460
die Möglichkeit, du nimmst die fertige Anwendung und führst mit der ein paar Sachen aus und guckst,

932
01:58:13,460 --> 01:58:16,980
ob sie sich so verhält, wie du denkst. Ich glaube, das nennt sich Integration-Test,

933
01:58:16,980 --> 01:58:23,140
aber das ist nicht so 100% exakt meine Welt. Da weiß ich nicht so Bescheid, ob ich das alles

934
01:58:23,140 --> 01:58:35,020
korrekt nenne. Achso, ich dachte, da geht es drum, ja. Mehrere Produkte wie zum Beispiel Veracode,

935
01:58:35,020 --> 01:58:40,140
Zona Cube. Zona Cube habe ich mir letztens ein Video zu angeguckt, sah richtig Sixhead aus.

936
01:58:40,140 --> 01:58:46,100
Habe ich aber zu wenig Erfahrung mit. Da kann ich dir gar nicht wirklich jetzt groß was zu sagen.

937
01:58:46,860 --> 01:58:55,940
Ich weiß ja auch nicht alles. Also kann ich dir jetzt keinen Five-Hat-Tipp zugeben.

938
01:58:55,940 --> 01:59:07,820
Ja, das kommt, Combined Entity kommt doch, kommt doch ungefähr hin.

939
01:59:07,820 --> 01:59:18,420
Okay, so, das war jetzt der richtige Senior-Move. Wir haben das Ganze gemercht und gepusht,

940
01:59:18,420 --> 01:59:24,140
ohne das zu testen, aber das ist nicht schlimm, weil wir haben noch kein neues Release gebaut.

941
01:59:24,140 --> 01:59:29,700
Also das war, auch wenn es nicht so aussieht, eigentlich der richtige Five-Hat-Senior-Move.

942
01:59:29,700 --> 01:59:35,660
Erstmal gepusht, dann gucken, ob es funktioniert und dann ein neues Release bauen.

943
01:59:35,660 --> 01:59:43,940
Genau, ich wollte Rocky Linux testen. Schauen wir mal, ob das so prinzipiell alles geht.

944
01:59:43,940 --> 01:59:54,940
Ich habe das Ganze gebaut unter slash build. Ich bin mir nicht sicher, ob, ja, wir hatten das

945
01:59:55,180 --> 02:00:04,180
Okay, hier liegt die neue Version zum testen. slash build slash vmchamp. Okay, run, minus minus os.

946
02:00:04,180 --> 02:00:24,300
Rocky sollte es da jetzt geben. Warum nicht? Warum gibt es das da nicht?

947
02:00:24,300 --> 02:00:33,980
Du hast die alte Autocomplete noch gesourced. Das ist korrekt.

948
02:00:33,980 --> 02:00:43,020
Siehste, ich sag doch, Prime-Subscriptions zahlen sich aus. Der Chat ist mittlerweile so

949
02:00:43,020 --> 02:00:48,620
big brain, dem fällt das alles schon 30 mal schneller ein als mir. Ich habe die alte Autocomplete noch

950
02:00:48,620 --> 02:00:57,100
gesourced. Genau, run, keckel 5, minus minus os. Muss ich das noch mal? Was ist das hier jetzt?

951
02:00:57,100 --> 02:01:15,260
Moment, das geht bestimmt. Das ist bestimmt einfach nur broken. Aus irgendwelchen Gründen.

952
02:01:15,260 --> 02:01:33,460
Wir können es von Hand ausprobieren, ob die Completion geht. Complete, run, minus minus os.

953
02:01:33,460 --> 02:01:46,900
Okay. Ich glaube, mein Autocomplete ist irgendwie ein bisschen im Arsch, kann das sein?

954
02:01:46,900 --> 02:02:02,660
Okay, habe ich irgendwas kaputt gemacht? Ich bin mir jetzt nicht ganz sicher. Moment, source.

955
02:02:02,660 --> 02:02:18,820
Home, max, repos, vmchamp. Ich trage das mal in meine zsh ein und starte mal die Konsole neu.

956
02:02:18,820 --> 02:02:31,060
Ich könnte mir vorstellen, da ist irgendwas im Arsch. Vmchamp, minus run, minus minus os.

957
02:02:31,060 --> 02:02:49,460
Sollte jetzt eigentlich Bild? Da steht Rocky drinnen.

958
02:03:01,060 --> 02:03:05,740
Warum steht da Rocky Linux jetzt nicht dabei?

959
02:03:31,060 --> 02:03:41,980
Jetzt bin ich ein bisschen verwirrt.

960
02:03:41,980 --> 02:04:02,620
Weil aliases ein leerer String ist, der nimmt glaube ich nicht aliases. Okay, cd, repos, vmchamp,

961
02:04:02,700 --> 02:04:15,980
Bild. Wir sourcen das jetzt nochmal. So, champ, run, minus minus os. Da steht auch nicht Ubuntu 23

962
02:04:15,980 --> 02:04:25,820
drinne. Jetzt bin ich verwirrt. Moment, Bild. Das steht doch da alles drinne. Jetzt müssen wir mal

963
02:04:26,540 --> 02:04:38,380
kurz in source code reingucken. Run command. Autocomplete. Hier, distros, distro name to lower.

964
02:04:38,380 --> 02:04:56,380
Hä? Da steht doch Ubuntu 23 04.

965
02:05:08,380 --> 02:05:19,900
Jetzt blick ich nicht mehr durch. Also funktionieren tut es ja offensichtlich,

966
02:05:19,900 --> 02:05:35,660
aber warum taucht das im Autocomplete nicht auf? Da taucht es auf. Irgendetwas ist mit meinem

967
02:05:35,660 --> 02:05:43,940
Autocomplete richtig, richtig broken gerade. Da taucht es auf. Da taucht auch Rocky auf.

968
02:06:05,660 --> 02:06:19,100
Hä? Warum taucht es denn im Autocomplete nicht auf? Okay, das checke ich jetzt. Das

969
02:06:19,100 --> 02:06:25,940
checke ich gerade nicht. Das leuchtet mir nicht ein. Warum das im Autocomplete nicht drinne ist.

970
02:06:25,940 --> 02:06:36,740
Ich weiß auch gar nicht, wie ich das fixen soll, weil

971
02:06:36,740 --> 02:06:51,340
eventuell ist das completion script defekt. Es funktioniert ja. Das ist ja auch ziemlich,

972
02:06:51,980 --> 02:07:03,980
habe ich schon. Okay, wir löschen es einfach nochmal Bild. Wir hauen die Docker Container

973
02:07:03,980 --> 02:07:16,700
nochmal weg. Keine Ahnung, was da los ist. Lass uns nochmal bilden. Ich glaube nicht,

974
02:07:16,700 --> 02:07:36,220
dass es was bringt. Ich habe die richtige Completion. Das ist jetzt komisch. Woran könnte

975
02:07:36,220 --> 02:07:41,940
das? Keine Ahnung, woran das geht. Mein Distros, da ist es drinne. So kompliziert. Ist jetzt nicht,

976
02:07:42,540 --> 02:07:47,340
wäre da großartig was von Hand notwendig. Normalerweise sollte da alles selbst drinne

977
02:07:47,340 --> 02:08:08,180
stehen. Gut, dann lassen wir es jetzt nochmal bauen. Ist ja gleich durch und dann nochmal ausführen.

978
02:08:11,940 --> 02:08:20,940
Hast du es übers Auer installiert? Ja, habe ich. Wobei ich jetzt eigentlich gedacht habe,

979
02:08:20,940 --> 02:08:34,740
dass vielleicht, wenn ich es explizit angebe, wir deinstallieren es mal. Hat sich aus. Hat

980
02:08:35,740 --> 02:09:04,380
sich aus vm jammed. Source. Not found, jaja. Not found? Bild. Hä? Ach so,

981
02:09:04,380 --> 02:09:21,900
pass. Pass muss ich vielleicht setzen. Okay, ich glaube, das ist wirklich gerade pro. Wir machen

982
02:09:21,900 --> 02:09:46,620
es mal so. Cp. Bild. Vm jammed nach. Repos. Scripts. Helper. Okay. Run. Minus,

983
02:09:46,620 --> 02:09:53,500
Minus. Okay, das ist wirklich mit der alten installierten Version aus irgendwelchen

984
02:09:53,500 --> 02:10:00,020
Gründen in die Kläre gekommen. Okay, jetzt, jetzt passt das. So, jetzt können wir auswählen.

985
02:10:00,020 --> 02:10:07,860
Warum ist das eigentlich alles doppelt drinne? Einmal groß und klein. Das ist ziemlich bescheuert.

986
02:10:08,100 --> 02:10:16,980
Warum habe ich das so gemacht? Wahrscheinlich, dass ich so machen kann oder so. Okay,

987
02:10:16,980 --> 02:10:22,820
probieren wir mal das neue aus. Rocky Linux 8, also quasi Red Hat Enterprise Linux 8.

988
02:10:22,820 --> 02:10:31,100
Angeblich bootet das nicht mit Default ran. Gucken wir mal, ob das stimmt. Yes.

989
02:10:31,100 --> 02:10:43,820
Boah, wie fett ist denn das Image, please? Oder sind die Red Hat Server einfach nur lahm as fuck?

990
02:10:43,820 --> 02:10:54,140
Ich habe gerade was getrunken, Poggers. Danke fürs Erinnern, Leute. Ihr seid high IQ,

991
02:10:54,140 --> 02:11:04,740
massive. Schlauer Chat. Wie groß ist denn dieses Image, please? Denn Debian Cloud Image ist,

992
02:11:04,740 --> 02:11:29,820
wenn es hoch kommt, 300 MB. Wie fett ist denn das? What? 1,6 Gigabyte. Das ist doch kein Cloud Image,

993
02:11:29,820 --> 02:11:43,660
das ist voll DVD. Warum ist das so groß? Was machen die Red Hat Leute da wieder? Muss ich

994
02:11:43,660 --> 02:11:57,420
nicht verstehen, oder? Okay, 1,6 Gigabyte, 1,7 Gigabyte. Dann bleiben wir noch bei Debian,

995
02:11:57,420 --> 02:12:02,660
würde ich sagen, oder? Lass mal gucken, ob es funktioniert. Also ergeblich ist Default RAM zu

996
02:12:02,660 --> 02:12:27,380
gering. Oh. Ist das größer als 4 Gigabyte oder was?

997
02:12:27,420 --> 02:12:42,420
Okay, das bootet schon mal gar nicht. Wie groß ist denn bitte schön das Rocky Image?

998
02:12:42,420 --> 02:13:06,100
Wie groß ist das? Alter meine Güte, ist das fett. 1,6 Gigabyte. Wäre das nicht schlau,

999
02:13:06,100 --> 02:13:11,060
die Memory Defaults basierend auf dem Image zu hinterlegen? Ja, wäre es. Bisher war das

1000
02:13:11,060 --> 02:13:16,900
nicht notwendig. Alle Sachen sind minimal gestartet mit 256 MB RAM. Dummes Verb, dankeschön.

1001
02:13:30,900 --> 02:13:39,860
Was macht das eigentlich gerade? Was macht das eigentlich da so? Ich meine,

1002
02:13:39,860 --> 02:13:49,180
außer dass es 100% CPU Last frisst auf einem Kern. Was tut es da gerade im Hintergrund? Gar

1003
02:13:49,180 --> 02:14:03,180
nichts, außer 100% CPU Last zu fressen. Okay, nice. Also, VMChamp, RM. Achso, ich bin ja auch im

1004
02:14:03,180 --> 02:14:22,420
falschen Ordner. Heißt im Ende, warum sagt er Shrinking the Image? Ist das Default? Das

1005
02:14:22,420 --> 02:14:29,020
Default Image ist nicht viel Gigabyte groß oder? Das Default Image ist viel größer. Gucken wir

1006
02:14:29,020 --> 02:14:39,100
mal. QEMO Image. Info glaubt geht das. Disk Size. Ach, Virtual Size 10. Okay,

1007
02:14:39,100 --> 02:14:43,780
na dann ist das doch in Ordnung, was ich mache. Ich setze das auf 4 Gigabyte, das Image und wenn

1008
02:14:43,780 --> 02:14:54,940
es größer ist, dann ist okay, dann macht es einfach nichts. Das ist doch in Ordnung. Okay,

1009
02:14:55,100 --> 02:15:01,300
anscheinend sind die Images zu fett. Dann führen wir das Ganze nochmal aus. Minus Minus Memory,

1010
02:15:01,300 --> 02:15:19,420
1024 MB. Okay, damit sollte es doch jetzt gehen. Und Disk 20 GB. So, das sollte jetzt hoffentlich

1011
02:15:19,420 --> 02:15:45,020
funktionieren. Reicht 1024 MB RAM auch nicht aus? Oder bootet das jetzt irgendwann? Weitere

1012
02:15:45,020 --> 02:15:50,780
Grund, warum für mich Red Hat einfach immer Abfang ist. Ich weiß im Business Umfeld ist es

1013
02:15:50,780 --> 02:15:56,860
saumäßig beliebt. Der alten Arbeit hatten wir ganz viel CentOS Red Hat auf der neuen Arbeit,

1014
02:15:56,860 --> 02:16:05,540
haben wir auch relativ viel CentOS Red Hat. Aber ich weiß nicht, immer wenn ich damit was

1015
02:16:06,100 --> 02:16:16,780
mir auf den Keks. Bootet er jetzt? Probing EDD. Was soll das überhaupt heißen? Probing EDD.

1016
02:16:16,780 --> 02:16:29,580
Warum ist das so beliebt? Weil vieles... Ah, jetzt hat es funktioniert. Ach, die haben standardmäßig

1017
02:16:29,580 --> 02:16:36,940
eingestellt, dass man bei Booten nichts sieht oder was? Das liegt daran, viele Software ist

1018
02:16:36,940 --> 02:16:40,660
zertifiziert für Red Hat, zum Beispiel Oracle Geschiss, wobei Oracle am liebsten natürlich auch

1019
02:16:40,660 --> 02:16:47,940
ihr eigenes Oracle Unbreakable Linux verwendet darunter. Und die verkaufen halt Support-Verträge

1020
02:16:47,940 --> 02:16:54,100
und haben gute Verkäufer. Okay, jetzt hat es funktioniert. Hier haben wir unser Rocky

1021
02:16:54,180 --> 02:16:59,700
Linux am Start. Nein, Moment, Moment, Jam Update. Und es ist auch nicht mehr Jam,

1022
02:16:59,700 --> 02:17:08,740
das ist ja DNF mittlerweile. Wobei, Jam fressen die immer noch, oder? Es ist so Pains Champ einfach

1023
02:17:08,740 --> 02:17:22,820
nur. Wobei, Jam ist ein Rapper für DNF nur noch, gell? Also das würde ich im Leben nicht für eine

1024
02:17:22,820 --> 02:17:29,940
schnelle Test-VOR-M nehmen. Guckt euch das mal an, da drehst du durch bei. Na gut. Wie ist deine

1025
02:17:29,940 --> 02:17:34,900
Meinung zu Projektstrukturen? Wir haben viele Projekte Backend in C-Sharp, Frontend in Jazz.

1026
02:17:34,900 --> 02:17:42,140
Sollte man Frontend und Backend in separate Projekte packen? Oder beides in einem Projekt? Findet ihr,

1027
02:17:42,140 --> 02:17:46,060
ist die IPipeline leichter zu handeln, wenn die getrennt sind, aber unsere Entwicklung... Ich

1028
02:17:46,060 --> 02:17:50,060
persönlich mag es in einem Projekt. Da muss ich in dem Fall euren Entwicklern recht geben, aber ich

1029
02:17:50,060 --> 02:17:55,100
meine, du hast ja driftige Gründe für und je nach Größe kann das ja durchaus Sinn machen.

1030
02:17:55,100 --> 02:18:03,620
Ich für mein Kram, und das ist jetzt halt auch keine Sache, wo irgendwie 80 Leute dran arbeiten,

1031
02:18:03,620 --> 02:18:10,620
finde das praktisch, wenn es in einem Projekt ist. Und Monorepos sind ja so der heiße Shit aktuell,

1032
02:18:10,620 --> 02:18:16,540
wobei ja zu jedem Furz mittlerweile Monorepo gesagt wird. So nach dem Motto, wir haben ein paar

1033
02:18:16,540 --> 02:18:22,860
Kubernetes-Yammels und eine Anwendung der Monorepo. Das würde ich allerdings dann trotzdem nicht machen.

1034
02:18:22,860 --> 02:18:31,260
Also Infrastrukturdefinition würde ich definitiv woanders hin machen. Weil ansonsten hast du das

1035
02:18:31,260 --> 02:18:40,060
Problem, dass deine History komplett versaut wird von Infrastrukturänderung. Also stell dir mal vor,

1036
02:18:40,060 --> 02:18:47,620
du hast ein Repo mit Infrastruktursachen drinne, Frontend, Backend und 90% der Comets sind

1037
02:18:47,620 --> 02:18:52,980
irgendwelche Änderungen an der Infrastrukturkonfiguration. Das ist doch doof, das will man nicht haben. Das heißt,

1038
02:18:52,980 --> 02:19:03,540
ein Infra-Repo würde ich tatsächlich getrennt machen. Also Kekkel-App, Kekkel minus Infra und

1039
02:19:03,540 --> 02:19:07,700
theoretisch könnte man noch ein noch ein drittes Repo machen, wo nur automatisch generiert das

1040
02:19:07,940 --> 02:19:13,740
Infrastruktur, wo nur automatisch generierte Infrastruktursachen reinkommen, die dann automatisch

1041
02:19:13,740 --> 02:19:20,780
von irgendeinem Continuous Deployment Tool auf den Kubernetes-Cluster oder sonst was Applied werden.

1042
02:19:20,780 --> 02:19:31,220
Weil ich finde, Repos, wo automatisch generierter Content rein committet wird,

1043
02:19:31,220 --> 02:19:37,300
immer Paints-Champ, wenn es die gleichen Repos sind, wie wo auch normal manuell dran gearbeitet wird.

1044
02:19:37,300 --> 02:19:44,580
Dann hast du da ein riesen Rauschen an Comets, das keiner braucht. Aber ich persönlich mag

1045
02:19:44,580 --> 02:19:58,140
tatsächlich, wenn Frontend und Backend im gleichen Repo liegen. Ist es okay? Yes, yes. Key imported.

1046
02:19:58,140 --> 02:20:02,860
Warum auch immer ich jetzt doppelt yes sagen musste. So, okay, unsere Tests sind beendet.

1047
02:20:02,860 --> 02:20:09,220
Ctrl C, ich möchte abbrechen. Jam, ich will abbrechen. Abbrechen, abbrechen, please. Okay.

1048
02:20:09,220 --> 02:20:25,100
Vm-Champ. Rm. Bam. Einfach die Vm gekillt. Easy, weg ist es. Ah, ich muss,

1049
02:20:25,100 --> 02:20:27,860
ich muss mein in mein .files-Repo wieder sunken.

1050
02:20:27,860 --> 02:20:35,300
Sehe ich gerade. Ich habe ein paar Sachen noch nicht drinne.

1051
02:20:35,300 --> 02:20:50,540
Moment, ich habe, ich habe hier mehr Repos drinne. Ist auch Blödsinn. Git pull origin master.

1052
02:20:50,540 --> 02:21:05,300
Wait a minute. GitHub. GitHub. Ah, schon besser. Wie verwendet man den Kram jetzt zum Applian der

1053
02:21:05,300 --> 02:21:30,580
config-files. Ich glaube, update oder sowas. Update. Override. Okay. So, und jetzt sollte

1054
02:21:30,580 --> 02:21:41,060
ich eigentlich, wenn ich das richtig gemacht habe. Ah, nice. Jetzt kann ich auch Fenster abschießen

1055
02:21:41,060 --> 02:21:49,540
von meinem Terminal. Wie sollte man es denn sonst machen? Frontend und Backend gehören noch

1056
02:21:49,540 --> 02:21:53,860
zusammen. Naja, du kannst auch ein eigenes Repo machen für, du kannst auch, du kannst auch

1057
02:21:53,860 --> 02:22:00,100
Kackel minus App minus Backend, Kackel minus App minus Frontend machen. Das ist vielleicht

1058
02:22:00,100 --> 02:22:05,900
von der Einheitlichkeit ja sogar ein bisschen schöner, weil wenn du im Endeffekt Repos hast,

1059
02:22:05,900 --> 02:22:16,220
irgendwie Kackel App minus Frontend, Kackel App minus Backend, Kackel App minus, keine Ahnung,

1060
02:22:16,220 --> 02:22:26,220
Native UI oder immer wieder Kram heißt und Infra und am Ende dann auch irgendwie minus Infra,

1061
02:22:26,220 --> 02:22:30,660
wie immer man das nennen soll, ich weiß jetzt nicht. Vielleicht ist das ein bisschen einheitlicher,

1062
02:22:30,660 --> 02:22:37,980
okay. Aber ich persönlich mag, wenn der Sourcecode in einem Repo ist. Wobei ich,

1063
02:22:37,980 --> 02:22:42,980
wobei ich tatsächlich, also ich würde, bei mir würde der Kram dann wahrscheinlich so heißen,

1064
02:22:42,980 --> 02:22:52,060
wobei ich das Infra-Repo auf jeden Fall auslagern würde und ob man hier so eins braucht,

1065
02:22:52,060 --> 02:22:56,500
je nach Tools auch vielleicht. Das würde ich auf jeden Fall einfach machen, aber hier kann

1066
02:22:56,500 --> 02:23:03,860
man natürlich, ja Web, ich würde es übrigens auch gar nicht Frontend nennen, da bin ich jetzt

1067
02:23:03,860 --> 02:23:09,820
persönlich zumindest auch ein bisschen davon abgekommen, die Sachen Frontend und Backend

1068
02:23:09,820 --> 02:23:13,460
zu nennen, sondern ich nenne sie so für was sie da sind. Also zum Beispiel sowas,

1069
02:23:13,460 --> 02:23:19,860
also man könnte es ja durchaus Web nennen, ja Web API und Mobile oder sowas, ja das ist vielleicht,

1070
02:23:19,860 --> 02:23:26,500
kann man sich darüber streiten, wie man das. Submodule, ja, aber Submodule finde ich ein

1071
02:23:26,500 --> 02:23:32,260
bisschen abartig. GitLab Groups sind sinnvoll, GitLab Groups sind einfach nur Repos.

1072
02:23:32,260 --> 02:23:43,460
Ja, aber du kannst den Web Interface kopieren, musst ja trotzdem noch unterschiedliche Repos

1073
02:23:43,460 --> 02:23:49,020
auschecken. Also ich finde das hier eigentlich ganz nice. Das hier würde ich unbedingt als

1074
02:23:49,020 --> 02:23:55,460
eigenes Repo machen. Hier hast du dann so Sachen drin, wie zum Beispiel hier Kubernetes Deployment,

1075
02:23:55,460 --> 02:24:05,180
Yammels, Terraform für Datenbank oder solche Dinge. Die hättest du hier drin, vielleicht auch

1076
02:24:05,180 --> 02:24:08,620
irgendwelche Helmcharts, falls die Leute da draufstehen. Das hättest du hier drin,

1077
02:24:08,620 --> 02:24:18,300
weil das ist auf jeden Fall sinnvoll, das voneinander getrennt zu haben. Weil ansonsten

1078
02:24:18,300 --> 02:24:24,540
hast du hier die Historie mit dem Mist voll und das ändert sich je nachdem auch mal an einem Tag

1079
02:24:24,620 --> 02:24:36,940
15 mal Sachen. Also das finde ich ist eine sinnvolle Aufteilung. Letztendlich kommt auf

1080
02:24:36,940 --> 02:24:45,740
die Firma an, kommt auf das Team an, kommt auf die Vorlieben an. Wär zu sagen, aber ich mag,

1081
02:24:45,740 --> 02:24:51,100
wenn das alles im gleichen Repo ist, außer die Infrastruktursachen. Was ist Red Hat überhaupt?

1082
02:24:51,100 --> 02:25:00,180
So ziemlich der größte Hersteller, was Linux Services angeht. Man kann ja nicht Linux Hersteller

1083
02:25:00,180 --> 02:25:09,260
so richtig sagen. Also mit der größte Linux Distributor vielleicht. Also die bauen somit

1084
02:25:09,260 --> 02:25:15,340
die bekannteste Enterprise Linux Distribution, wo die ganzen Unternehmen draufstehen. Auf dem

1085
02:25:15,340 --> 02:25:21,540
zweiten Platz ist Ubuntu und was auf dem dritten ist, weiß ich gar nicht. Wahrscheinlich so was

1086
02:25:21,540 --> 02:25:31,060
ekliges wie Susie oder sowas. Wahrscheinlich Oracle dürfte am dritten sein. Also im Enterprise

1087
02:25:31,060 --> 02:25:36,580
Umfeld ist auf jeden Fall Red Hat und dann mit ein bisschen Abstand Ubuntu recht beliebt. Und

1088
02:25:36,580 --> 02:25:41,900
für alle, die einfach was angenehmes haben wollen, ohne den ganzen Shit drum herum,

1089
02:25:41,900 --> 02:25:50,900
die nehmen einfach Debian und freuen sich des Lebens. Was macht ein Support?

1090
02:25:50,900 --> 02:26:00,020
Nee, die analysieren nicht unbedingt Fehler bei dir lokal, die du verkonfiguriert hast,

1091
02:26:00,020 --> 02:26:05,500
wobei man die je nach Supportvertrag wahrscheinlich auch danach fragen kann. Aber du kannst zum

1092
02:26:05,500 --> 02:26:11,820
Beispiel auf Knowledge Base Einträge von Red Hat zugreifen. Wenn du jetzt zum Beispiel nicht weißt,

1093
02:26:11,820 --> 02:26:22,060
wie du ein Free Radius unter Red Hat 8 da und dafür konfigurierst, hat vielleicht Red Hat einen

1094
02:26:22,060 --> 02:26:27,820
Paywall Knowledge Base Eintrag dafür, auf den du dann zugreifen kannst. Oder wenn du einen

1095
02:26:27,820 --> 02:26:34,700
Bug entdeckst und den gefixt haben willst, kannst du ein Ticket aufmachen bei Red Hat. Dann fixen

1096
02:26:34,700 --> 02:26:39,380
die den, wenn du Glück hast für dich, wenn die Bock haben. Eher nicht, aber vielleicht haben sie

1097
02:26:39,380 --> 02:26:45,420
Bock. Also der Red Hat Support, was ich bisher gesehen habe, war auch nur minimal mehr useful

1098
02:26:45,420 --> 02:26:54,260
wie alle anderen Supports, die es so gibt. Aber das ist im Enterprise Umfeld gar nicht so wichtig,

1099
02:26:54,260 --> 02:26:59,300
dass ein Support wirklich supporten und hilft. Das Wichtigste, Leute, wisst ihr was das Wichtigste

1100
02:26:59,300 --> 02:27:04,580
ist, warum im Enterprise Umfeld Support so beliebt ist? Das ist, dass man auf jemand anderes zeigen

1101
02:27:04,820 --> 02:27:14,100
kann. Klingt jetzt Kindergarten, aber es ist so. Man hat Support nicht so sehr dafür, dass weniger

1102
02:27:14,100 --> 02:27:20,260
kaputt geht, sondern dass man sagen kann, haha, wir haben schon einen Support Call bei Red Hat,

1103
02:27:20,260 --> 02:27:26,740
bei Oracle, bei Microsoft, bei sonst was aufgemacht und dann kann man dahin zeigen. Dafür hat man

1104
02:27:26,740 --> 02:27:43,500
Support nicht wirklich, weil die großartig was machen. Was ist deine Meinung über die Zukunft

1105
02:27:43,500 --> 02:27:48,420
vom Mainframe? Naja, nachdem ich in der Frankfurter Finanzbranche arbeite, gehe ich davon aus,

1106
02:27:48,420 --> 02:27:54,580
der Mainframe wird nie verschwinden. Das ist so tief verankert und alle größeren Finanzläden,

1107
02:27:54,700 --> 02:28:02,580
also ich kenne keine 500 oder so, aber die, die ich kenne, die haben alle noch Mainframes. Manche

1108
02:28:02,580 --> 02:28:12,740
tatsächlich mittlerweile nicht mehr auf ZOS, sondern auf Linux Basis. Was? Wegen mir? Wegen

1109
02:28:12,740 --> 02:28:18,860
mir? Wie? Warum hast du wegen mir einen Mainframe Kurs gemacht? Was habe ich mit Mainframes zu tun?

1110
02:28:19,860 --> 02:28:28,540
Jetzt recht lukrative Stelle für Werkstätten im Bereich Mainframe-Entwicklung. Ja,

1111
02:28:28,540 --> 02:28:34,940
mach das doch, mach das. Also im Finanzbranchenumfeld sehe ich das in nächster Zeit auch nicht

1112
02:28:34,940 --> 02:28:42,260
verschwinden. Was ist ein Mainframe? Mainframe ist so eine ganz fette große schwarze Kiste von IBM,

1113
02:28:42,260 --> 02:28:49,140
die bei dir im Rechenzentrum steht, die du bezahlt hast, aber die dir nicht gehört und worauf du

1114
02:28:49,140 --> 02:28:55,100
Sachen berechnen lassen darfst, die du nach Zeit bezahlst, obwohl du es gekauft hast und es bei dir

1115
02:28:55,100 --> 02:29:04,220
im Rechenzentrum steht. Warum man es wirklich verwendet? Zu 100%ig habe ich da noch nie eine

1116
02:29:04,220 --> 02:29:09,620
klare Antwort drauf bekommen, warum man es wirklich benutzt. Keine Ahnung, warum die da so scharf

1117
02:29:09,620 --> 02:29:19,540
drauf sind. Cobol? Okay, ja, gut, wird heute bestimmt immer noch einiges mitgemacht.

1118
02:29:19,540 --> 02:29:24,260
Im Mainframe-Umfeld.

1119
02:29:24,260 --> 02:29:32,420
Gottes Abbild hat Prime-Subscribed, danke schön für den Sub.

1120
02:29:32,420 --> 02:29:45,660
Unterstützt Red Hat auch Docker Compose? Jede Distribution unterstützt Docker Compose. Das

1121
02:29:45,660 --> 02:29:56,380
ist nichts, was eine Distribution irgendwie unterstützen müsste. Ach du meinst, dass es im

1122
02:29:56,380 --> 02:30:00,860
Repo drinne ist? Im Repo ist garantiert Docker und Docker Compose drinne, bin ich mir relativ

1123
02:30:01,100 --> 02:30:06,580
sicher. Allerdings weiß ich nicht, ob ich Docker darauf wirklich betreiben würde,

1124
02:30:06,580 --> 02:30:16,820
weil das ist ja kein Desktop-OS, sondern irgendwas mit Support für Server im Enterprise-Umfeld,

1125
02:30:16,820 --> 02:30:23,980
im Business-Umfeld, wo wahrscheinlich auf dem Server weniger Docker-Container laufen. Und wenn

1126
02:30:23,980 --> 02:30:27,740
ja, dann ist es wahrscheinlich auch nicht so sinnvoll, das zu verwenden aus den Paketquellen,

1127
02:30:27,740 --> 02:30:41,660
weil das ziemlich alt ist. Wie war der Anfang im Job? Nicht schlecht. Also die erste Woche

1128
02:30:41,660 --> 02:30:46,420
war wirklich nice. Die einzige Sache, die mich persönlich noch ein bisschen triggert und die

1129
02:30:46,420 --> 02:30:53,180
mir echt ein bisschen auf die Nerven geht, ist, dass es so Microsoft-zentriert ist da alles. Von

1130
02:30:53,180 --> 02:30:58,740
SharePoint bis super krass abgesichertes Windows-Notebook, auf dem du kaum was machen kannst.

1131
02:30:58,740 --> 02:31:06,180
Ich hoffe, das wird besser, wenn ich eine ordentliche Linux-VM habe, wo ich auch hoh

1132
02:31:06,180 --> 02:31:12,540
drauf bin. Sollte das sich auf Dauer so rausstellen, dass man im Prinzip nichts machen kann,

1133
02:31:12,540 --> 02:31:17,460
außer Putty auszuführen, um es jetzt übertrieben zu sagen, dann weiß ich nicht, ob ich da wirklich

1134
02:31:17,460 --> 02:31:26,100
so alt werde. Wenn ich den ganzen Tag nichts anderes benutzen kann als Putty oder MobX-Term,

1135
02:31:26,100 --> 02:31:33,500
da drehe ich durch. Ich habe schon gesehen, dass da Leute lieber über den GitHub-Editor

1136
02:31:33,500 --> 02:31:38,260
Terraform-Files anpassen, anstatt über den ordentlichen Text-Editor, weil der Text-Editor

1137
02:31:38,260 --> 02:31:45,140
dank der ganzen tollen Security-Sachen so laggy ist. Also sollte das sich wirklich bewahrheiten,

1138
02:31:45,140 --> 02:31:51,580
dass das auf Dauer so bleibt und sich auch mit der eigenen VM nicht bessert, dann weiß ich nicht,

1139
02:31:51,580 --> 02:31:58,660
ob mir das Schmerzensgeld unterm Strich ausreicht. Ich bin Senior Linux-Engineer dort und nicht

1140
02:31:58,660 --> 02:32:01,460
Putty-Clicker. Windows-User.

1141
02:32:15,140 --> 02:32:32,220
Als Trinken erinnert es, sehr gute Idee. Würdest du ein AD in Linux mit Xamarin und

1142
02:32:32,220 --> 02:32:39,380
Kerberos aufsetzen? Habe ich noch nie gemacht, aber mein persönliches Bauchgefühl sagt mir,

1143
02:32:39,380 --> 02:32:44,060
nein, würde ich nicht machen. Sondern wenn ich wirklich ein Active Directory betreiben will,

1144
02:32:44,060 --> 02:32:48,940
dann würde ich es mit Windows-Server machen. Weil dann habe ich höchstwahrscheinlich auch

1145
02:32:48,940 --> 02:32:55,020
Windows-Clients und dann werde ich auch einen Windows-Server mir leisten können. Die Sache

1146
02:32:55,020 --> 02:32:57,820
ist nur die, dass ich es auf gar keinen Fall administrieren möchte.

1147
02:32:57,820 --> 02:33:10,980
So, wir müssen jetzt noch eine neue Version bauen, Leute. Also was müssen wir noch testen?

1148
02:33:10,980 --> 02:33:16,540
Also das mit... Also Rocky Linux haben wir ausprobiert, das funktioniert.

1149
02:33:16,540 --> 02:33:23,300
Da waren noch ein paar Sachen drin, die man testen müsste. Das Build-Script funktioniert auch.

1150
02:33:23,300 --> 02:33:32,580
Ubuntu 23.04. Das gehe ich jetzt einfach mal davon aus, dass es funktioniert.

1151
02:33:32,580 --> 02:33:36,140
Wo ist es denn eigentlich?

1152
02:33:36,140 --> 02:33:43,420
Ubuntu 23.04. Luna Lobster.

1153
02:33:46,820 --> 02:33:52,980
Das ist übrigens auch eine echte Alternative, wenn man jetzt keine Abneigung gegen Azure hat

1154
02:33:52,980 --> 02:33:59,980
und wenn man das Firmen-Policy technisch machen darf. Azure Active Directory. Also

1155
02:33:59,980 --> 02:34:04,220
ohne dass ich es selbst hier aufgesetzt hätte. Das Einzige, was ich mal gemacht habe,

1156
02:34:04,300 --> 02:34:13,020
ist ich habe eine Proof of Concept Frontend entwickelt, was klein ist, was auf Azure Active

1157
02:34:13,020 --> 02:34:21,020
Directory zugreift. Das war das Einzige, wo ich wirklich mal ein bisschen im Detail mehr

1158
02:34:21,020 --> 02:34:29,860
damit gemacht habe. Aber sonst, was ich so mitbekommen habe, ist das tatsächlich im Endling

1159
02:34:29,860 --> 02:34:33,060
her ganz nice. Vor allem, weil man sich halt nicht selbst zum Windows-Server kümmern müsste.

1160
02:34:33,060 --> 02:34:37,380
Ja, das ist tatsächlich eine echte Alternative, das über Azure Active Directory zu machen.

1161
02:34:37,380 --> 02:34:42,900
Wenn das halt geht in dem jeweiligen Unternehmen, dann passt das. Mehr müssen wir wahrscheinlich

1162
02:34:42,900 --> 02:34:45,460
nicht ausprobieren. Ich würde sagen, wir können eine neue Version raushauen.

1163
02:34:45,460 --> 02:34:54,220
Testen wir noch mal ganz schnell, ob Ubuntu nur just for one geht.

1164
02:34:54,220 --> 02:35:01,700
Warum geht das Autocomplete nicht? Ah, das Autocomplete. Ah, das ist auch ziemlich

1165
02:35:01,700 --> 02:35:05,740
pains-champed. Das Autocomplete geht nur, wenn man ganz hinten ist. Verstehe, verstehe.

1166
02:35:05,740 --> 02:35:13,660
Autocomplete 23.04. Ja, guck mal. Ubuntu Cloud-Images sind auch relativ fett, die neuen,

1167
02:35:14,500 --> 02:35:31,500
aber immerhin nicht so ein Riesending wie Red Hat. Schauen wir mal. Ah, guck mal, das

1168
02:35:31,500 --> 02:35:47,860
ist nur halb so fett. Halb so fett wie Red Hat. Booting from Hard Disk. Ja, dann. Poreschamp.

1169
02:35:47,860 --> 02:35:58,740
Wie wäre es mit Booten from Hard Disk, anstatt zu sagen Booting from Hard Disk? Ah, da braucht

1170
02:35:59,100 --> 02:36:10,820
nur. Wir sollten den Bootchamp entwickeln, dass das auch noch schneller geht. Ubuntu, gib Gas.

1171
02:36:10,820 --> 02:36:36,660
Ah, da ist immer schon. Can das sein, dass das extrem lahm ist? Warum das so ewig bootet?

1172
02:36:36,660 --> 02:36:45,100
Nein, das liegt an den Distributionen. Oh Leute, das Ding hat zu wenig RAM. Das hängt am Limit.

1173
02:36:45,100 --> 02:36:49,940
Das hat zu wenig RAM. Guck mal, ich kann mich doch nicht mal per SSH einloggen. Das hat zu

1174
02:36:49,940 --> 02:37:06,380
wenig RAM. Oh, Amchamp. Am. Das hat zu wenig RAM. Memory. Das ist natürlich doof, wenn die ganzen

1175
02:37:06,380 --> 02:37:12,100
Dinger zu wenig RAM haben. Was haben wir denn standardmäßig? Standard ist 256 MB RAM. Ja,

1176
02:37:12,100 --> 02:37:24,940
für eine Debian VM reicht das auch ohne Probleme. Es ist schon krass, wie fett, wie fett die

1177
02:37:24,940 --> 02:37:32,020
Standard und die Distributionen sind. 250 MB ist wenig. Ja, aber das sind minimal Server

1178
02:37:32,020 --> 02:37:35,420
Distribution und Installation. Die sollten eigentlich nix standardmäßig großartig laufen

1179
02:37:35,420 --> 02:37:41,420
haben. Die Fault RAM abhängig von der Distro festlegen. Ja, aber das habe ich keinen Bock,

1180
02:37:41,420 --> 02:37:46,900
ehrlich gesagt, das zu pflegen. Ich dachte, die Fault reicht. Einfach ein Minimum in der

1181
02:37:46,900 --> 02:38:06,100
Distro. Ja, ihr habt recht, das machen wir. Distro Min RAM Min Disk. So, da sind wir eingeloggt.

1182
02:38:06,100 --> 02:38:13,020
Nice, hat funktioniert. Okay, ich würde sagen, wir könnten ein neues Release pushen. Ich

1183
02:38:13,060 --> 02:38:20,300
clean das mal, dass meine Festplatte wieder sauber ist. Yes. Okay, ich würde sagen,

1184
02:38:20,300 --> 02:38:40,140
es gibt jetzt VMChamp Version 0.0.5. Ja. Oder machen wir noch was anderes rein. Lass mal gucken,

1185
02:38:40,620 --> 02:38:47,900
was sind noch für Pull requests offen? Create new logo. Das werde ich wahrscheinlich nicht nehmen,

1186
02:38:47,900 --> 02:39:01,820
das Logo. Das ist mir zu Instagram, Instagram Style. Mein Scout, falls du da bist. Ich glaube,

1187
02:39:01,820 --> 02:39:04,820
ich glaube aber nicht, habe ich noch nicht gesehen. Ich mache den Pull Request mal zu.

1188
02:39:10,140 --> 02:39:26,820
PostChamp. So, was haben wir noch für Issues offen? Bug Image Downloads. Ich glaube, das haben wir

1189
02:39:26,820 --> 02:39:37,340
gefixt. Fixed in, ja, fixed, close, bam. Muss ich komplizierter machen als es ist. Okay,

1190
02:39:37,340 --> 02:39:45,020
use custom SSH key instead of copying on. Das ist ein guter Vorschlag, Max. Und zwar aktuell

1191
02:39:45,020 --> 02:39:52,180
funktioniert das folgendermaßen, wenn man eine VM erstellt, wenn man hier sagt, run packw. Wenn

1192
02:39:52,180 --> 02:40:04,780
ich eine VM erstelle, was er jetzt macht ist, der geht in Punkt SSH. Der geht in Punkt SSH und holt

1193
02:40:05,180 --> 02:40:13,340
die Public Keys und kopiert die in die VM. Es funktioniert nicht, wenn der Key nicht Standard

1194
02:40:13,340 --> 02:40:22,180
heißt und es funktioniert auch nicht, wenn dort keine Keys liegen, was er durchaus auch mal sein

1195
02:40:22,180 --> 02:40:34,860
kann. Vielleicht sollten wir tatsächlich einen eigenen SSH Key generieren, nur für den VM Champ.

1196
02:40:34,860 --> 02:40:42,220
Ich glaube, die Idee ist gar nicht so schlecht, oder? Das dürfte relativ einfach zu implementieren sein,

1197
02:40:42,220 --> 02:40:54,540
denn die ISO Imager, denn was der hier an SSH Keys hinterlegt, ist ja hier letztendlich definiert.

1198
02:40:54,540 --> 02:41:03,020
Er sagt, find SSH Keys. SSH Keys nimmt er alles aus dem Home Directory vom User, was mit Punkt

1199
02:41:03,740 --> 02:41:14,620
und dann trägt er die Keys hier ein. Das heißt, wir können ohne Probleme einen eigenen Key generieren

1200
02:41:14,620 --> 02:41:30,020
für den VM Champ und den Key in die Default und bei SSH Commandos eintragen.

1201
02:41:33,580 --> 02:41:38,940
Oder was denkt ihr? Sprich, dass wir den eigenen Key generieren, um den Fall abzudecken,

1202
02:41:38,940 --> 02:41:44,780
dass die Keys nicht standardmäßig heißen und dass vielleicht manchmal auch gar keine Keys da sind.

1203
02:41:44,780 --> 02:41:51,740
Das heißt, wir müssten eigentlich nur hier anpassen, woher er die Keys nimmt und wir müssten das SSH

1204
02:41:51,740 --> 02:42:07,820
Commando anpassen, wie er sich dahin verbindet. Es wäre nice, wenn der Nutzer den Speicherort

1205
02:42:07,820 --> 02:42:12,900
selbst pflegen kann. Man kann ja beides machen. Man kann einmal vonhand einen SSH Key angeben,

1206
02:42:12,900 --> 02:42:19,700
dann machen wir einfach nur Option, Option, Minus, Minus, Key und dann kann man selbst den Key angeben

1207
02:42:19,700 --> 02:42:28,500
oder er generiert einen selbst. Im Prinzip müsste ich dann Minus hier noch, Minus I machen für SSH,

1208
02:42:28,500 --> 02:42:44,260
Minus I und dann wo der Key liegt. Okay, dann schreibe ich das mal rein. Image, Option, SSH,

1209
02:42:44,260 --> 02:42:58,420
das machen wir doch. Also ich würde sagen, standardmäßig speichert ihr die Keys einfach

1210
02:42:58,420 --> 02:43:05,740
hier. Default und dann könnte man theoretisch hier Punkt SSH noch machen als Verzeichnis. Ja,

1211
02:43:05,740 --> 02:43:18,620
das finde ich ganz gut. Das machen wir. App-Config, Data-Dear, SSH-Dear, SSH-Dear kommt da noch dabei.

1212
02:43:18,620 --> 02:43:29,340
SSH-Dear ist App Directory, Session Name und Punkt SSH. Ja, nice. Und da muss ich ganz am Anfang nur

1213
02:43:29,340 --> 02:43:36,220
noch dafür sorgen, dass das auch angelegt ist, sonst gibt es nämlich nachher Probleme. So,

1214
02:43:36,220 --> 02:43:42,500
jetzt haben wir das SSH-Verzeichnis angelegt. Wie generiert man? Gibt es eine ordentliche

1215
02:43:42,500 --> 02:43:47,140
Library zum SSH-Keys generieren in .NET? Ich meine, natürlich. Ich könnte sagen,

1216
02:43:47,140 --> 02:44:09,340
Process, Start, SSH, Keygen. Property im Constructor war falsch. Was? Wo? Was? Wo denn? Wie jetzt?

1217
02:44:17,140 --> 02:44:27,540
Du hast recht. Lul. Verkackt. High IQ Chat, ihr habt wieder aufgepasst. Riesig,

1218
02:44:27,540 --> 02:44:34,060
Biggest Prane aller Zeiten wieder in der Chat. Ich sage doch, die ganze AI-Entwicklung war

1219
02:44:34,060 --> 02:44:38,580
komplett umsonst. Die hätten einfach auf den Wumblos-Chat zugreifen können und schon hätte

1220
02:44:38,580 --> 02:44:51,900
man sich das komplett sparen können. So. Wie würde man das denn jetzt machen?

1221
02:44:51,900 --> 02:45:07,020
Ich teste mal das mal kurz von Hand. CD, Temp, Mcardia, Keck, W. Da will ich reinigen. Kecke.

1222
02:45:07,020 --> 02:45:18,420
SSH. Hier machen wir mal einen Punkt. SSH-Verzeichnis. So. SSH, Keygen. Das da. Ja,

1223
02:45:18,420 --> 02:45:27,260
genau. Perfekt. Genau. Den will ich haben. Your E-Mail. Ja. Qt-Chat, add. Omega,

1224
02:45:27,260 --> 02:45:30,900
Lul. Ist eigentlich egal. Lassen wir. Lassen wir. Das ist ja nur ein Comment. Da muss ja nichts rein.

1225
02:45:30,900 --> 02:45:45,660
Kann man da Output? Keyfiles. Geht das? Geht das so? Dann Punkt SSH. Keck,

1226
02:45:45,780 --> 02:46:01,260
W.Pub. Oder sowas. Ach so. Nee, Moment. Nicht Punkt Pub. Einfach. Blödsinnig.

1227
02:46:07,260 --> 02:46:13,460
Moment. Du meinst WebAssembly, wenn schon. WebAssembly in Docker.

1228
02:46:16,660 --> 02:46:19,540
Okay, so würde das funktionieren.

1229
02:46:25,540 --> 02:46:32,860
Gut. Also. So könnte man das schon mal generieren. Ich will trotzdem mal gucken.

1230
02:46:32,860 --> 02:46:42,060
Gibt es eine C-Sharp? Gucken wir mal. NuGet oder wem? SSH-Key oder Generate SSH-Key.net.

1231
02:46:42,060 --> 02:46:51,180
Gibt es da irgendwas? How to generate SSH-Key in C-Sharp-Application. SSH-Key Generator. Okay,

1232
02:46:51,180 --> 02:46:59,280
nice. Das brauchen wir. Der SSH-Key Generator. Dann müssen wir keine Kommando-Zeilen-Aufrufe

1233
02:46:59,280 --> 02:47:04,220
machen. Okay, wie funktioniert denn das Ding? After searching around for a solution to creating

1234
02:47:04,220 --> 02:47:11,500
SSH. Was soll der VM-Champ eigentlich werden? Was heißt werden? Das ist schon. Wenn du dir

1235
02:47:11,500 --> 02:47:18,100
die GitHub-Seite anguckst, die ist eigentlich besser, als wenn ich das jedes Mal erkläre.

1236
02:47:18,100 --> 02:47:28,380
Ja, das macht das. Wegwerf VMs auf deiner lokalen Kiste erzeugen, wenn du irgendwas schnell testen

1237
02:47:28,380 --> 02:47:36,220
musst. Guck, ganz einfach gezeigt. Du sagst VM-Champ, Run. Zum Beispiel das, was du machen willst.

1238
02:47:36,220 --> 02:47:47,420
Irgendwie System-D-Test-VM oder keine Ahnung. Unit-File-File-Test. Erstellst du eine VM mit

1239
02:47:47,420 --> 02:47:51,900
dem Namen. Dann lädt er sich ein aktuelles Debian-Image runter oder benutzt eins, was da ist,

1240
02:47:51,900 --> 02:47:56,900
startet eine VM im Hintergrund und verbindet dich per SSH drauf. Das ist für alles sinnvoll,

1241
02:47:56,900 --> 02:48:01,860
wo du keine Docker-Container gescheit benutzen kannst. Zum Beispiel um System-D-Unit-Files

1242
02:48:01,860 --> 02:48:18,700
auszuprobieren. Jetzt bootet er im Hintergrund die VM, wartet, bis das Netzwerk da ist und zack,

1243
02:48:18,700 --> 02:48:24,460
bist du auf deiner neu erstellten VM drauf. Das hat jetzt ungefähr 25 Sekunden gedauert und du

1244
02:48:24,460 --> 02:48:30,020
hast eine vollwertige lokale VM, wo du rumbasteln kannst, wie du willst. Wenn du fertig bist,

1245
02:48:30,500 --> 02:48:39,460
sagst du entweder VM-Champ-RM oder du sagst Clean, wenn du alles inklusive Images aufräumen willst.

1246
02:48:39,460 --> 02:48:46,580
Fertig aus. Schnelle Tests VMs lokal anlegen. Es funktioniert schon. Funktioniert auch relativ

1247
02:48:46,580 --> 02:48:51,300
gut. Ich habe es jetzt schon für einige Sachen lokal benutzt. Es ist wirklich praktisch. Das ist

1248
02:48:51,300 --> 02:48:54,580
auch der Grund, warum ich mir sowas gebaut habe, weil ich einfach nichts gefunden habe in der

1249
02:48:54,580 --> 02:49:12,780
Richtung. Also, wie hieß dieses Ding? SSH Key Generator. Passphrase, sowas. Overrated Security

1250
02:49:12,780 --> 02:49:22,900
Shit, keine Passphrase. Vor allem nicht für lokale VMs. NuGet SSH Key Generator. Letzte

1251
02:49:22,900 --> 02:49:37,940
Version von 2019. Nice aktuelles Ding. Ja, super. Ein bisschen was Neues als von 2019 wäre ganz cool.

1252
02:49:37,940 --> 02:49:50,020
Ach, Moment. Auf NuGet hat er wohl neuere Sachen released. Zeig mal, von wann sind die? Schade,

1253
02:49:50,020 --> 02:49:55,460
dass er nicht auf Windows läuft. Der würde theoretisch auf Windows laufen, also in WSL sollte

1254
02:49:55,460 --> 02:50:04,420
er laufen. Das Ding ist nur, du hast wahrscheinlich und in WSL kein LibWirt laufen.

1255
02:50:04,420 --> 02:50:28,900
Hyper V. Es würde funktionieren. Alles, was LibWirt unterstützt. Der Fuget Explorer hört sich

1256
02:50:28,900 --> 02:50:55,540
auch irgendwie ein bisschen unanständig an. Okay, auf geht's. Dann probieren wir probieren

1257
02:50:55,540 --> 02:51:00,820
das mal aus. Wir probieren das mal aus. Wir machen hier ganz oben mal einen Return rein,

1258
02:51:00,820 --> 02:51:10,980
damit ich es einfach starten kann. Hier, neues Terminal auf, CD, Repos, VMChamp. So, probieren

1259
02:51:10,980 --> 02:51:18,620
wir das mal aus. SSH Key Generator Library. Wie benutzt man dieses Ding? Examples, Key GAN,

1260
02:51:19,100 --> 02:51:26,500
SSH Key GAN, Two-Private Key, Two-RFC Public Key. Funktioniert LibWirt nicht auch in Windows

1261
02:51:26,500 --> 02:51:39,940
selber? Keine Ahnung. Weiß ich nicht. Two-RFC Public Key mit Comment. Okay, es scheint einfach

1262
02:51:39,940 --> 02:51:54,940
zu sein. SSH Key GAN Generator. 400096 Venture Adventure. Richtig, ein Key. Key GAN, Two-Private

1263
02:51:54,940 --> 02:52:06,300
Key. Okay, BAM. .NET Run. Was der Unterschied zu Vakrant ist, also es hat ein paar Parallelen,

1264
02:52:06,300 --> 02:52:11,100
aber es ist eigentlich was anderes. Vakrant ist ja so ein bisschen der Vorgänger. Ich weiß nicht,

1265
02:52:11,100 --> 02:52:17,460
ob man das so sagen kann. So ein bisschen der Vorgänger vielleicht von Docker Compose. So im

1266
02:52:17,460 --> 02:52:23,580
Ansatz. Also, also erstens, das Problem an Vakrant ist, es ist uraltes Ruby Zeug, was HashiCop selbst

1267
02:52:23,580 --> 02:52:27,340
schon keinen Bock mehr drauf hat. Dazu kommt, ich muss sagen, ich hab's auch nicht viel benutzt,

1268
02:52:27,340 --> 02:52:32,780
aber ich kann jetzt zumindest nur das sagen, was ich, was ich da, was ich mir so denke,

1269
02:52:32,780 --> 02:52:37,580
beziehungsweise auch im Hinterkopf hab. Also uraltes Ruby Zeug. Es unterstützt standardmäßig

1270
02:52:37,580 --> 02:52:43,340
kein KVM, also das Mittel der Wahl zum Virtualisieren unter Linux, sondern nur Virtual Box. KVM nur

1271
02:52:43,340 --> 02:52:51,660
über irgendeinen Third Party Provider. Und es ist auch gar nicht dafür gedacht, dass du quasi ganz

1272
02:52:51,660 --> 02:52:58,340
3, 4, 5 VMs auf die Schnelle anlegst, sondern du brauchst immer einen Ordner pro VM mit einem

1273
02:52:58,340 --> 02:53:04,740
Vakrant-File, was im Prinzip sowas wie ein Docker Compose-File ist. Bin ich einfach umständlicher,

1274
02:53:04,740 --> 02:53:15,740
wenn ich eine VM brauche. So gibst du einfach an, blablabla, run, debian, zack und 15 Sekunden

1275
02:53:15,740 --> 02:53:19,860
später hast du eine VM. Probierst schnell was aus und in 10 Minuten später schmeißt du wieder weg.

1276
02:53:19,860 --> 02:53:33,100
Funktioniert das Key-Generator hier? Tatsächlich, wir haben einen Key. Kann das auch in irgendwie

1277
02:53:33,100 --> 02:53:41,420
in anderen Algorithmus oder kann das nur standardmäßig RSA? Weil ich persönlich mag ja bei Keygen

1278
02:53:41,420 --> 02:53:47,740
das da gerne, weil das ist so schön kurz der Key, den kann man auch einfacher copy-pasten.

1279
02:53:47,740 --> 02:53:55,220
Weiß gar nicht, was das für ein Verschluss, was das für ein Key-Verfahren ist. Ah, alles klar.

1280
02:53:55,220 --> 02:54:04,060
Chet, jetzt wisst ihr Bescheid. Curve 25519 ist eine elliptische Kurve,

1281
02:54:04,060 --> 02:54:13,740
die für asymmetrische Kryptosysteme benutzt wird. Klar, soweit? Ich glaube,

1282
02:54:13,740 --> 02:54:17,500
bedarf keiner weiteren Erklärung, oder? Ist Obvious, was das Sache ist.

1283
02:54:17,500 --> 02:54:33,140
So, und dann haben wir zur Auswahl ED2215. Neben Curve 25519 gibt es noch weitere Kurven,

1284
02:54:33,140 --> 02:54:37,980
die nach ähnlichen Prinzipien entwickeln und ebenfalls mit ED25519 zusammenarbeiten.

1285
02:54:37,980 --> 02:54:50,900
Darunter etwa ED448 Goldilocks und die von mehreren Personen unabhängig entdeckte Kurve E521.

1286
02:54:50,900 --> 02:55:03,700
Keck bei, alles klar. Cringe, wer es nicht verstanden hat.

1287
02:55:03,700 --> 02:55:29,860
Eine Montgomery-Kurve. Logisch. Im Gegensatz zu den sonst üblichen Weier-Straß-Kurven erlaubt

1288
02:55:29,860 --> 02:55:34,660
diese Form der Verwendung von Algorithmen, die immun gegen Timing-Seitenkanal-Angriffe sind.

1289
02:55:34,660 --> 02:55:43,660
Okay, wir wissen Bescheid. Jetzt ist Obvious, alles klar.

1290
02:55:43,660 --> 02:56:00,460
So, wie machen wir das denn jetzt mit den SSH-Keys? Also wir generieren den SSH-Key.

1291
02:56:00,460 --> 02:56:10,900
Ich mach das mal testweise, ob das funktioniert. Ich generiere mal den SSH-Key.

1292
02:56:10,900 --> 02:56:21,820
Aber wie heißen die Dinger? ED? Gibt's da ein NC-Sharp-Verfahren? Haha, guck mal da,

1293
02:56:21,820 --> 02:56:28,740
der Cryptomaniac vor sieben Jahren, alles klar. Exzellent. Vielleicht sollte ich doch einfach das

1294
02:56:28,740 --> 02:56:47,940
System. Bouncy Castle. Alter, wer denkt sich die Projektnamen aus, Leute? Bouncy Castle.

1295
02:56:47,940 --> 02:56:56,700
Da fuck, wo bin ich hier gelandet wieder?

1296
02:56:56,700 --> 02:57:05,420
Bouncy Castle. Na klar.

1297
02:57:05,420 --> 02:57:23,980
Generate Key. Aha. Generiert von überschreiben mit einer abgeladenen Klasse ein neues,

1298
02:57:23,980 --> 02:57:26,780
kurzlebiges Verfahren von öffentlichen Schlüsseln für die Angabenkurve, wobei die aktuelle...

1299
02:57:26,780 --> 02:57:37,180
Easy. Das ist in .NET schon eingebaut. Ja, das stimmt schon. Das ist da schon eingebaut.

1300
02:57:37,180 --> 02:57:46,180
System Security Cryptography. Probieren wir das doch mal aus. Dann probieren wir das doch mal

1301
02:57:46,180 --> 02:57:54,180
aus. Mal gucken. Da lernt man ja auch mal was. System Cryptography E. Wie heißt das Ding?

1302
02:57:54,180 --> 02:58:11,900
Generate Key. Ne. Wie? Ah ne. ECDSR. Natürlich. Was auch sonst. Create.

1303
02:58:11,900 --> 02:58:28,220
Versteht doch. Versteht auch keiner hier. Wo ist der Schalter für auf Englisch stellen?

1304
02:58:28,220 --> 02:58:35,020
Ich finde das immer nicht. Man kann hier oben... Wo haben sie das wieder versteckt

1305
02:58:36,020 --> 02:58:47,260
hier? Englisch. Australia, meinetwegen. In der Urländer, das kenne ich, aber das muss doch

1306
02:58:47,260 --> 02:58:51,580
echt nicht sein. Warum ist da nicht einfach oben ein Button? Da war früher, glaube ich,

1307
02:58:51,580 --> 02:58:59,260
auch mal ein Button oder es war eine andere Hilfeseite. Create a new instance of the default

1308
02:58:59,860 --> 02:59:12,620
Okay, wir machen einfach nur Create. Keygen. Nee. So funktioniert das schon mal nicht. Ach so.

1309
02:59:13,620 --> 02:59:29,460
Ach so, Keygen gibt es da oben schon. Deswegen ging das nicht. Ich habe schon gedacht,

1310
02:59:29,540 --> 02:59:40,780
was jetzt? Okay. Keygen. Verify data from data. Try get max signature. Generate Key.

1311
02:59:41,300 --> 02:59:52,100
Import. Generate Key ist das, was wir haben wollten, oder? Zeig ich mal. Generate Key.

1312
02:59:58,100 --> 03:00:04,860
Leute, ich habe absolut keine Ahnung, was ich hier eigentlich mache. Okay.

1313
03:00:04,860 --> 03:00:16,100
Echt? Da steht ein Beispiel? Wo? Du weißt das nicht? Vorhandene Beispiel? Oder das Beispiel

1314
03:00:16,100 --> 03:00:28,420
von Create? Ich sehe hier keine Beispiele. JuicyBit, danke schön für den Sub. So,

1315
03:00:28,500 --> 03:00:43,980
mal gucken. Wir schauen einfach mal. Nee. Ah. Void? Okay, ich habe keinen Plan,

1316
03:00:43,980 --> 03:00:53,340
wie das funktioniert. Da war der Namespace vor der Kurve. Alter, die Doku ist wieder absolut top.

1317
03:00:53,340 --> 03:01:03,460
Muss ich vielleicht irgendwie sowas hier? Ich habe wirklich keine Ahnung, wie man das benutzt.

1318
03:01:03,460 --> 03:01:27,500
What? Wir brauchen ein Beispiel. Oder ist das der? Ich habe keine Ahnung.

1319
03:01:33,460 --> 03:01:59,180
Okay. Generate Key. What?

1320
03:02:03,460 --> 03:02:15,740
Okay, ich glaube nicht, dass man damit SSH Key sinnvoll generieren kann, oder? Das ist zu high IQ.

1321
03:02:34,460 --> 03:02:48,820
Das ist mir zu next level. Okay, scheiß drauf. Wir testen das jetzt erst mal mit den anderen

1322
03:02:48,820 --> 03:03:02,020
Keys. Und vielleicht kriege ich ja noch raus, wie man diesen Krempel hier benutzt. Also. ECDSA will

1323
03:03:02,820 --> 03:03:07,020
wahrscheinlich gar nichts benutzen. Man lockt sich einfach gar nicht mehr ein.

1324
03:03:07,020 --> 03:03:15,860
So, also SSH Key. Wir speichern diesen Key jetzt mal irgendwie. File, save. Ich will einfach mal

1325
03:03:15,860 --> 03:03:24,940
ausbilden, ob es funktioniert. File. Nee, nee. Wie heißt das? Write. Write all text. Fahrt. App

1326
03:03:24,940 --> 03:03:40,060
config. SSH Dear. Müssen wir anders machen. Pass. Combine. SSH Dear. Key. Wie heißt das Ding jetzt?

1327
03:03:40,060 --> 03:03:51,340
Und Keygen. To private key. So, schauen wir mal, ob das jetzt funktioniert an der Stelle.

1328
03:03:51,340 --> 03:04:02,060
Zack, zack, zack. Dot net run. Ach so. Ja, doch. Es müsste funktioniert haben. So,

1329
03:04:02,060 --> 03:04:17,100
gucken wir mal. VmChamp. Default. Punkt SSH. Key. Okay, da haben wir den private key. Das ist

1330
03:04:17,100 --> 03:04:23,740
doch schon mal nice. Das funktioniert. To private key. Und jetzt haben wir noch hier irgendwie pub.

1331
03:04:23,740 --> 03:04:39,940
To public key. So, wenn ich das jetzt ausführe, dann habe ich hier zwei Keys drinne. Und dann

1332
03:04:39,940 --> 03:04:44,700
schauen wir mal, ob ich mich damit per SSH auf meine VM verbinden kann gleich. Das ist ja nur

1333
03:04:44,780 --> 03:04:52,580
zum Testen, ob es prinzipiell funktioniert. Okay, wunderbar. Dann gehen wir jetzt mal hier hin,

1334
03:04:52,580 --> 03:05:00,540
wo das ISO Image zusammengebaut wird. Und bei den Keys, da müssen jetzt die public Keys rein.

1335
03:05:00,540 --> 03:05:07,620
Dann ist es relativ einfach. File. Read all text. App config. Oh nee, ich habe keine App

1336
03:05:07,700 --> 03:05:15,380
config hier. Was ist das denn? Warum habe ich, warum gibt es hier keine App config? Und wird das hier

1337
03:05:15,380 --> 03:05:23,420
nicht injectet? Sauerei. Dann hardcode ich das jetzt einfach, weil ich wissen will, ob es funktioniert.

1338
03:05:23,420 --> 03:05:42,340
Okay, zack. Punkt SSH. Keys. Slash. Key. Punkt pub. So. Und jetzt fehlt als letztes nur noch,

1339
03:05:42,340 --> 03:05:48,180
um zu testen, ob das mit den SSH Keys funktioniert. Wobei der bestimmt meckert,

1340
03:05:48,180 --> 03:06:00,820
wenn die Dateien die falschen Rechte haben, oder? Das hat bestimmt die falschen Rechte. Da meckert

1341
03:06:00,820 --> 03:06:08,100
er doch garantiert. Da meckert er 100% drüber. Wenn das, ja, garantiert wird er meckern,

1342
03:06:08,100 --> 03:06:16,420
wenn es die falschen Rechte hat. Create directory. Wie setzt man? Permissions? Nee.

1343
03:06:18,180 --> 03:06:44,020
CH. Wie setzt man directory permissions in .net? Set. C sharp directory permissions. Da gibt es

1344
03:06:44,020 --> 03:07:02,460
bestimmt Set Access Control. Nee, gibt es nicht. Nice. Was? Ey, das ist irgendein Windows-Shit. Das will

1345
03:07:02,460 --> 03:07:10,460
ich wahrscheinlich nicht machen. Du brauchst eine Directory-Info dafür. Das kann sein.

1346
03:07:10,460 --> 03:07:23,020
Gibt es hier was? Permissions? Nee.

1347
03:07:41,460 --> 03:07:49,460
Set Access Control? Was ist das hier? Quest. File Permissions und Linux. Ich meine, ich kann.

1348
03:07:49,460 --> 03:08:19,020
Der ist nope. Seriously. Ja, Flashbang. Alter,

1349
03:08:19,100 --> 03:08:21,940
was ein Gelaber. Gibt es hier vielleicht auch irgendwo was, was man jetzt machen muss?

1350
03:08:21,940 --> 03:08:35,100
Mono POSIX soll man jetzt verwenden, oder wie? Einfach geklost, oder wie?

1351
03:08:35,100 --> 03:08:42,420
Wir haben jetzt eine Version von Mono POSIX, die funktioniert und...

1352
03:08:42,420 --> 03:08:49,660
Warum? Aber warum Mono, Alter? Okay, das kann man tatsächlich verwenden.

1353
03:08:49,660 --> 03:08:54,220
Mono POSIX. Okay, Leute, wisst ihr was? Scheiß drauf. Ich will ja einfach nur ausprobieren,

1354
03:08:54,220 --> 03:09:02,660
ob es funktioniert. Wir machen CH-MOD 600 auf den Ordner. Wir können eigentlich alles 600 machen.

1355
03:09:02,660 --> 03:09:29,540
Was? Am Moment nicht 600. 700. Sonst kann ich ja nicht den Ordner wechseln. Okay. 700.

1356
03:09:29,540 --> 03:09:39,780
Und das hier. Und das hier 600. Ja, merke, falls ihr mal das gleiche Problem habt,

1357
03:09:39,780 --> 03:09:46,420
Ordner unter Linux brauchen Execute-Rechte, sonst könnt ihr nicht auf sie zugreifen oder in sie

1358
03:09:46,420 --> 03:09:56,700
rein wechseln. Okay, das ist ganz gut so. Lassen wir das mal weg. So, und jetzt will ich nur noch

1359
03:09:56,700 --> 03:10:08,060
gucken, ob ich PSSH drauf verbinden kann. Da brauche ich... Okay, das mache ich jetzt so

1360
03:10:08,060 --> 03:10:14,620
wahrscheinlich nicht. Aber nur mal checken, ob das funktioniert. Identity... Ups. Nee, nee.

1361
03:10:14,620 --> 03:10:20,940
Identity Home SSH Key. So, schauen wir mal, ob es funktioniert. Ich habe mal eine Zweifel,

1362
03:10:20,940 --> 03:10:28,300
dass ich das richtig gemacht habe. .NET Run Run Kegway. So, da sollte jetzt, wenn ich es

1363
03:10:28,300 --> 03:10:39,180
richtig gemacht habe, eine VM anlegen und dort meine SSH Keys verwenden. Na, da bin ich mal

1364
03:10:39,180 --> 03:10:42,620
gespannt, ob das klappt. Ich glaube nicht. Chat meinte, dass es funktioniert.

1365
03:10:42,620 --> 03:11:08,180
Ich habe mal eine Zweifel. Aber schauen wir mal. Nein, permission denied. Und warum? Und warum?

1366
03:11:08,180 --> 03:11:31,980
Weil er den falschen Key nimmt. Oder? Nee, das ist der, genau, das ist der Host Key. Warum ging

1367
03:11:31,980 --> 03:11:45,980
das jetzt nicht? SSH. Ich kann es ja mal von Hand ausbringen. User, add. Ja, okay. Minus Identity.

1368
03:11:45,980 --> 03:12:07,020
Omchamp. Default. Default.ssh. Key. Ja. Nice. Das funktioniert so schon mal nicht,

1369
03:12:07,020 --> 03:12:22,780
wie ich mir das gedacht habe. Gibt es das hier überhaupt, was ich da angegeben habe? Public Key,

1370
03:12:22,780 --> 03:12:29,340
ja. Da müsste man in die SSH Logs schauen, da wirst du nicht, also hier wirst du nicht viel

1371
03:12:29,340 --> 03:12:37,740
sehen, außer dass es Trying Private Key, SSH Key, nö. Ich persönlich gehe ja davon aus,

1372
03:12:37,740 --> 03:12:59,180
dass die Cloud Init Datei nicht richtig stimmt. Stimmen die Keys oder wurden zwei unter? Nee,

1373
03:12:59,260 --> 03:13:11,140
die Keys werden neu generiert beim Application Start. Also die müssen. Moment. Wartet mal kurz.

1374
03:13:11,140 --> 03:13:17,700
Ich mach mal kurz dieses Key Generating raus. Vielleicht gar keine, vielleicht doch nicht so

1375
03:13:17,700 --> 03:13:27,740
eine schlaue Idee. Run CACW2. Jetzt sollte er die schon bestehenden Keys nehmen. Wenn nicht,

1376
03:13:27,740 --> 03:13:31,740
lasse ich das mit den Keys erst mal und mache mir da noch mal ein bisschen Gedanken drüber. Wir

1377
03:13:31,740 --> 03:13:40,460
machen auf jeden Fall jetzt ein neues Release vom VmChamp mit den ganzen Fixes drin,

1378
03:13:40,460 --> 03:13:44,180
die wir vorhin schon gemacht haben. Also das mit den Keys lassen wir vielleicht erst mal sein,

1379
03:13:44,180 --> 03:13:47,940
muss ich mir noch mal ein bisschen Gedanken drüber machen, wie wir das am besten machen.

1380
03:13:47,940 --> 03:14:00,580
CACW2 ist auch da und die Verbindung klappt nicht. Nice. Nope. Okay, dann machen wir eine

1381
03:14:00,580 --> 03:14:07,140
Sache jetzt noch mal, nämlich wir lassen uns das hier mal ausgeben. Console Write Line User Data,

1382
03:14:07,140 --> 03:14:36,700
Run CACW3. Ja. Ah. Jammel. Jammel ist glaube ich das Problem. Jammel ist das Problem.

1383
03:14:37,700 --> 03:14:46,140
Ich glaube ich weiß auch, wie ich das das letzte Mal gefixt habe. Ach,

1384
03:14:46,140 --> 03:14:54,980
deswegen habe ich so einen JSON Array hier draus gebaut. Okay, Moment, Moment. Keys gleich.

1385
03:14:54,980 --> 03:15:16,340
Ich bin, ich bin verwirrt. Das ist der Key. Das ist der Key. String Joindings,

1386
03:15:16,540 --> 03:15:30,980
This Find SSH. Was zum Geier mache ich da? Okay, ich vermute mal, dass ich mir das hier

1387
03:15:30,980 --> 03:15:46,660
alles sparen kann. Ich vermute, dass ich mir das hier alles sparen kann. Man muss noch ein

1388
03:15:46,660 --> 03:15:57,020
Quote machen und dann das Pfeil dazwischen. So, das sollte jetzt funktionieren. CACW4. Das

1389
03:15:57,020 --> 03:16:09,820
ist besser. Das ist besser. In JSON gerappt. Ist das nicht auch das falsche Public Key Format

1390
03:16:09,820 --> 03:16:24,380
für SSH? Ja, das ist das falsche Public Key. Oder? Normalerweise ist das doch immer eine Zeile,

1391
03:16:24,380 --> 03:16:29,980
wo dann hinten auch ein Comment und sowas dran steht. Nee, das ist das falsche. Oder? Doch, doch,

1392
03:16:29,980 --> 03:16:39,020
doch, doch. Ich glaube, das ist das falsche. Das sieht normalerweise doch anders aus, oder?

1393
03:16:39,020 --> 03:16:59,420
SSH again. Punkt mal CUT. Punkt SSH. CACW. Das ist der Private Key. So sieht der Public Key

1394
03:16:59,420 --> 03:17:07,540
eigentlich aus. Genau, genau. Das ist das falsche. Das ist das falsche. Falsche Keys.

1395
03:17:15,540 --> 03:17:24,100
Also, 2 Public Key. 2 RFC Public Key brauche ich vielleicht. Vielleicht ist das jetzt besser.

1396
03:17:24,100 --> 03:17:43,300
Run CACW5. Ja, das ist gut. Das ist gut. Das sieht richtig aus. Nee, nee. Auch mit RSA. Das

1397
03:17:43,300 --> 03:17:49,540
muss so aussehen. Das ist gut. Das ist richtig. Das sieht viel, viel besser aus so. Wobei jetzt

1398
03:17:49,540 --> 03:18:00,180
wahrscheinlich meine SSH-Berechtigung nicht mehr stimmt. Doch, da hat sich's gemerkt. Sollte man

1399
03:18:00,180 --> 03:18:08,820
meine VMs wieder löschen. Leute, es funktioniert. Kaum macht man es richtig, dann funktioniert es

1400
03:18:08,820 --> 03:18:15,900
auch. Poggers. Das muss ich mir trotzdem erst noch mal überlegen. Das kann ich so auf jeden Fall

1401
03:18:15,900 --> 03:18:22,580
nicht lassen mit den Keys, weil ich habe die Verzeichnisse nicht überall zur Verfügung.

1402
03:18:22,580 --> 03:18:26,220
Da muss ich mir erst noch mal ein bisschen Gedanken drum machen. Also ich werde das mal

1403
03:18:26,220 --> 03:18:31,060
wieder rausschmeißen. Aber prinzipiell haben wir es jetzt getestet, dass das funktioniert.

1404
03:18:31,060 --> 03:18:49,860
Habe ich da noch irgendwas vergessen? SSH-Dear. SSH-Read-Dear. Alles SSH. SSH. SSH. Get-Reset-Hard-In-Your-Face.

1405
03:18:49,860 --> 03:18:59,700
Weg ist es. Dann machen wir jetzt eine neue Version. Get-Push-Get-Hard-Master. Wobei,

1406
03:18:59,780 --> 03:19:03,100
das haben wir ja schon gemacht. Das sollte nichts mal pushen. Dann taggen wir jetzt mal eine neue

1407
03:19:03,100 --> 03:19:12,980
Version und schauen mal, ob es ein neues Arch-User-Repo-Dings-Bums gibt, wenn ich das

1408
03:19:12,980 --> 03:19:22,340
pushe, ob das alles klappt. Ach so, wir brauchen ein ordentliches Change-Log. Ich habe schon wieder

1409
03:19:22,340 --> 03:19:27,980
vergessen, wie wir das mit dem Change-Log gemacht haben. Wie generiere ich noch mal das Change-Log?

1410
03:19:27,980 --> 03:19:45,380
Irgendwo aus GitHub Actions raus, ne? Ja. Release. Release. Ah, die letzte. Okay,

1411
03:19:45,380 --> 03:19:51,780
die letzte Comment-Message. Jetzt verstehe ich. Muss man das eigentlich initial manuell ins

1412
03:19:51,780 --> 03:19:57,260
Our-Submitten? Müsstest du nicht. Finde ich gar nicht so schlecht. Müsstest du nicht. Du

1413
03:19:57,260 --> 03:20:01,340
könntest das auch direkt über irgendeine Pipeline hier anlegen. Und es gibt fertige

1414
03:20:01,340 --> 03:20:06,900
GitHub Actions für Our-Packages. Das ist der harte Weg von Hand, ein Arch-User-Repo-Package

1415
03:20:06,900 --> 03:20:13,340
zu bauen. Es gibt fertige Actions, die das für dich machen. Ach so, das letzte Comment muss

1416
03:20:13,340 --> 03:20:24,300
muss das Change-Log direkt enthalten. Alter, das wird's. Ich habe kein Comment.

1417
03:20:24,300 --> 03:20:39,180
Geht Status. Ich habe kein Comment, Mensch. Vielleicht sollten wir mal eine Change-Log-Datei

1418
03:20:39,180 --> 03:20:51,660
einfach anlegen, weil... Ja, komm, wir legen eine Change-Log-Datei an. Wir faken einfach,

1419
03:20:51,660 --> 03:20:58,340
als wäre die schon immer da gewesen. Kannst den leeren Force-Commit... Ja, das ist doch... Ne,

1420
03:20:58,340 --> 03:21:07,900
ne, ne. Wir legen, wir legen. Okay, hier gab es überhaupt kein Change-Log bei Version 1. Wir

1421
03:21:07,940 --> 03:21:26,300
fangen jetzt einfach an. Wir fangen mit Version 2 an. Das ist okay. Change-Log V2. Was ist da

1422
03:21:26,300 --> 03:21:35,020
hinzugekommen? Das da. Exzellent. Wir brauchen das im Markdown-Format. Das ist dazugekommen.

1423
03:21:35,140 --> 03:21:44,260
Sehr schön. Wunderbar. Dann haben wir als nächstes Version 3 Fixes. Exzellent. Da weiß man sofort

1424
03:21:44,260 --> 03:21:56,980
Bescheid. Fixes. Obviously. Dann gibt es 004. Bei 004 ist was dabei gekommen? Das da. Okay,

1425
03:21:57,060 --> 03:22:06,180
nice. Vielleicht sollten wir noch das Datum hinten dran schreiben. Wir sind superordentlich

1426
03:22:06,180 --> 03:22:12,620
jetzt. Wir haben noch das Datum hinten dran. Und zwar, wie habe ich das hier beim 4er Champ

1427
03:22:12,620 --> 03:22:21,940
gemacht mit dem Change-Log? Das hatte eigentlich ein ganz gutes Format. So habe ich das gemacht

1428
03:22:22,100 --> 03:22:33,340
mit Minus. Dann mache ich das wieder, mache ich das wieder so. Minus. Minus. Das Datum stimmt

1429
03:22:33,340 --> 03:22:41,180
natürlich nicht. Das müssen wir jetzt mal schnell raussuchen. So, also Version 2 haben wir gemacht.

1430
03:22:41,660 --> 03:22:58,980
Na geil, da steht kein Datum dabei. Dann wurde das committed. Warte, bin ich blind? Wo ist das Datum?

1431
03:22:58,980 --> 03:23:14,220
In jeder Comment-Message steht eine Zeit drinne. Ich dachte, kein Datum aufgeteilt. Ist nicht?

1432
03:23:14,220 --> 03:23:29,780
Na gut, ich meine, ich kann. Würde ich das gerne kopieren. Ich meine, ich kann. Da geht Log.

1433
03:23:29,780 --> 03:23:59,180
Das war am 29.3. So, 29.3. Und 3 und 3 war am

1434
03:23:59,260 --> 03:24:14,140
1.4. Okay. Also 2023. Oh, das ist Ami-Format. 29.3. Kekona-Datumsformat. Das ist das schlimmste,

1435
03:24:14,140 --> 03:24:20,660
das Schlimmste, was sich da ausgedacht hat. Das war am 1. April anscheinend. Okay. So,

1436
03:24:20,660 --> 03:24:26,420
und wann haben wir das? Wann haben wir das zwar noch? Das 4. gemacht? Ich glaube,

1437
03:24:26,420 --> 03:24:33,380
das 4. war auch am 1. April. Hier der Log. Ach so, ich bin da gar nicht im Repo drinne.

1438
03:24:33,380 --> 03:24:47,980
GD, Repos. Ja, ist auch am 1.4. Okay. Ist auch am 1.4. Okay, wunderbar. Jetzt haben wir ein tolles

1439
03:24:47,980 --> 03:24:55,780
Change-Log. Exzellent. So, was haben wir jetzt hier in dem aktuellen Zeug drinne? Wir sind

1440
03:24:55,780 --> 03:25:13,900
einfach mal so frei und rippen das vom Max, was er geschrieben hat. 2013 habe ich 2022 geschrieben.

1441
03:25:13,900 --> 03:25:22,420
Ja, 2023. Nein. Oh, ich habe Ctrl-X für Schließen der Pain. Das ist vielleicht doof,

1442
03:25:22,420 --> 03:25:29,260
weil mit Ctrl-X und Ctrl-A kann man ja auch in Wim Zahlen hoch und runterzählen. Das sollte

1443
03:25:29,260 --> 03:25:45,140
ich vielleicht nochmal überdenken. So, für 0.0.5. Das gibt es am 2023 04.07. So,

1444
03:25:45,140 --> 03:25:52,700
da klauen wir die Sachen, die der Max geschrieben hat. So, und was haben wir sonst noch drinne?

1445
03:25:52,700 --> 03:26:07,740
Ja, im Prinzip das vom Max und das von meinem Interface, was ich hier in den... Also,

1446
03:26:07,740 --> 03:26:27,340
wir haben Issue Nr. 3 gefixt. Das war das mit dem... Ask for a bridge. Create a bridge if it's not

1447
03:26:27,340 --> 03:26:36,780
found or not ready. So. Wunderbar. 5-Fed-Change-Log. Übrigens, Ubuntu 23.04 ist nicht mehr Beta. Ich

1448
03:26:37,540 --> 03:26:46,820
glaube, das ist mittlerweile raus. Seit zwei Tagen oder so. Kann das sein? Oder kommt das

1449
03:26:46,820 --> 03:27:04,180
Ende des Monats erst? Nee, es kommt noch. Es kommt in zwei Wochen. Okay, wunderbar. So,

1450
03:27:04,180 --> 03:27:13,260
jetzt haben wir einen Change-Log. Git status. Ich überlege gerade. Weil ich habe es aktuell so,

1451
03:27:13,260 --> 03:27:21,340
ich habe es in meiner GitHub-Action so, dass der das letzte Commit nimmt als Change-Log. Vielleicht

1452
03:27:21,340 --> 03:27:28,100
nehmen wir nicht SSH Keygeneral. Vielleicht sollten wir das ändern. Wobei ich mir nicht sicher bin,

1453
03:27:28,220 --> 03:27:35,140
ob das mit dieser Release-Action gescheit funktioniert. Also, wir benutzen aktuell als

1454
03:27:35,140 --> 03:27:55,660
Change-Log. Hier. Body für das Iss GitHub Event Head-Commit-Message. Come on. Wenn

1455
03:27:55,660 --> 03:28:04,500
ich hier oben eine Environment-Variable setze, gilt die auch hier unten in der Action? Weil

1456
03:28:04,500 --> 03:28:17,740
dann könnte ich mir was, dann könnte ich sowas hier machen. Bei dem Example hatte der einen

1457
03:28:17,740 --> 03:28:29,620
Change-Log. Weil ansonsten könnte man nämlich sowas machen. Change-Log. Und dann irgendwie

1458
03:28:29,620 --> 03:28:51,060
das obere rauskacken oder so. Wir sind jetzt einfach mal faul. Wir sind jetzt mal faul und

1459
03:28:51,060 --> 03:29:02,460
sagen jetzt einfach Git add Change-Log. Git commit. Und jetzt schnappen wir uns den Kram und

1460
03:29:02,460 --> 03:29:14,900
kopieren den hier rein. In die letzte Commit-Message. Git status. Git push. Und jetzt machen wir einen

1461
03:29:14,900 --> 03:29:22,780
Tag drauf. Und jetzt sollte das alles funktionieren. Was mache ich denn hier? Tag delete. Was? Nein.

1462
03:29:22,780 --> 03:29:30,420
So, das will ich mal an. Git tag Version 5. Und Git push minus minus tags. So, und jetzt

1463
03:29:30,420 --> 03:29:45,020
bin ich mal gespannt, ob das funktioniert. Jetzt erleben wir gerade die alte Version,

1464
03:29:45,020 --> 03:29:59,700
ob das noch... Wir gucken gleich, ob die Action läuft. So, auf geht's. GitHub Actions.

1465
03:30:00,100 --> 03:30:08,980
Ja, es läuft. Das dauert jetzt kurz, bis der Container gebildet ist. Der Cache ist mittlerweile

1466
03:30:08,980 --> 03:30:20,540
schon längst expired. Das dauert jetzt kurz, bis das gebaut ist. Passt eigentlich. Wir löschen

1467
03:30:20,540 --> 03:30:32,860
mal die alten Sachen. Version 4 haben wir. Gut. Dann gucken wir doch mal. Das dauert jetzt. Das

1468
03:30:32,860 --> 03:30:37,940
dauert denke ich 2-3 Minuten, bis das durch ist. Der muss jetzt sich den ganzen Kram runterladen,

1469
03:30:37,940 --> 03:30:45,540
neu das CentOS 7 Image aktualisieren. Dort net runterladen, kompilieren, das Binary raus

1470
03:30:45,540 --> 03:30:53,380
kopieren, hochladen, ein Release bauen und dann muss er am Ende noch das Our-Package aktualisieren.

1471
03:30:53,380 --> 03:31:16,420
Let's go. Eine schnellste ist es nicht. Bei Examples hatte der eine ChangeLog TXT angegeben.

1472
03:31:16,420 --> 03:31:19,820
Das können wir uns gerade mal angucken, weil so spannend ist es jetzt eben nicht,

1473
03:31:19,820 --> 03:31:25,700
bei dem Docker-Build zuzugucken. Wir schauen jetzt mal hier rein. Da wollte ich gar nicht drauf.

1474
03:31:25,700 --> 03:31:39,660
Workflows, Builds, Release. Welche Release-Action benutzen wir hier? Soft-Props. Release. ChangeLog.

1475
03:31:39,660 --> 03:32:01,860
Generate ChangeLog. Aha. Ach so macht er das. Ja, das ist eigentlich relativ clever. Moment,

1476
03:32:02,100 --> 03:32:11,540
da schreibt einfach eine temporäre ChangeLog-Datei und die gibt er dann hier an. Okay,

1477
03:32:11,540 --> 03:32:18,460
das ist relativ schlau. Ich glaube, so werden wir das auch machen. Ja, so machen wir das auch.

1478
03:32:18,460 --> 03:32:26,180
Wie weit ist er mit dem Image? Aha, gleich fertig. So machen wir das auch.

1479
03:32:32,860 --> 03:32:48,660
Ja. Macht er eigentlich seine eigenen Releases damit? Nö. Wer da sagen könnte,

1480
03:32:48,660 --> 03:32:52,340
dass er seine eigenen Releases mit seiner eigenen Release-Action macht, macht er aber nicht.

1481
03:32:52,340 --> 03:33:06,900
Keckel. So. Okay, der Job ist fertig. Jetzt wird das Arch-User-Repo gebaut.

1482
03:33:06,900 --> 03:33:15,700
Arch-User-Repo-Package gebaut. Schauen wir mal, also hier ist es noch alt. Initialize-Containers.

1483
03:33:22,340 --> 03:33:35,860
Download-Artifact. Okay. Permanently Adding. Version V005. Das ist gut.

1484
03:33:35,860 --> 03:33:43,740
Gepusht hat er es. Stopping-Containers. Da ist es, Leute. Es wurde aktualisiert.

1485
03:33:51,740 --> 03:33:59,580
Also das haben wir gescheit gemacht. Das hat jetzt richtig gut funktioniert. So. Jetzt müssen

1486
03:33:59,580 --> 03:34:16,860
wir nur noch warten, bis er hier kapiert hat. Das dauert manchmal ein bisschen,

1487
03:34:16,860 --> 03:34:25,980
bis er mitbekommen hat, dass es neue Package-Versionen gibt. Denkst du gleich

1488
03:34:26,140 --> 03:34:32,460
kommt wieder der Fehler mit der falschen Version. Ich bin mal gespannt. Nothing to do.

1489
03:34:32,460 --> 03:34:43,380
Was ist denn hier eigentlich der Unterschied zwischen diesem ganzen Krämpel? Da ist er.

1490
03:34:43,380 --> 03:34:49,260
Das letzte Mal hatten wir ein Problem, wo ich immer noch nicht genau gecheckt habe, wo.

1491
03:34:49,260 --> 03:34:56,420
In der Tab-Completion ist das Emote da, aber im Chat nicht.

1492
03:34:56,420 --> 03:35:05,140
Das letzte Mal hatte ich das Problem, als ich geupdatet habe,

1493
03:35:05,140 --> 03:35:11,660
der hat, also wir können es jetzt mal ausreden, vm-Champ-Version. Das ging nur mit einem Clean-Build.

1494
03:35:11,660 --> 03:35:18,540
Yes. 003.

1495
03:35:32,540 --> 03:35:40,460
Okay, müssen wir doch noch mal ein Clean-Build machen. Was hat er für Probleme,

1496
03:35:40,940 --> 03:35:59,580
mit dem Package? Das war es schon nicht, es gibt ja sonst keine. Wenn ich jetzt ein Clean-Build mache,

1497
03:35:59,580 --> 03:36:13,220
dann ist alles gut. Das habe ich noch nicht genau kapiert, ehrlich gesagt.

1498
03:36:13,220 --> 03:36:27,900
Version 5. Was ist falsch an meinem Package?

1499
03:36:27,900 --> 03:36:32,020
Dass du immer ein Clean-Build machen musst.

1500
03:36:32,020 --> 03:36:48,940
Das ist jetzt auch die neue Version. Guck, run, minusminusos. Du hast auch die neuen Sachen drinne.

1501
03:36:48,940 --> 03:36:57,220
Und wenn ich das Default-Interface stoppe oder sogar lösche, dann sollte er jetzt

1502
03:36:57,220 --> 03:37:05,460
fangen. Vm-Champ, run, cac-w, Default-Bridge does not exist, want to create now, yes, links eingeben, zack.

1503
03:37:05,460 --> 03:37:12,740
Also ich habe ehrlich gesagt keinen Schimmer, warum man immer ein Clean-Build machen muss,

1504
03:37:12,740 --> 03:37:13,780
dass das funktioniert.

1505
03:37:13,780 --> 03:37:30,100
Da ist irgendwas in meinem Package-Build falsch, oder? Ich habe auch nicht genau

1506
03:37:30,100 --> 03:37:35,380
nachgekriegt, wie ich das nachstellen kann. Mein Package-Build ist mega simpel, also.

1507
03:37:44,780 --> 03:37:52,460
Ist das hier vielleicht irgendwie falsch? Dass er hier falsche Sachen kopiert?

1508
03:37:52,460 --> 03:38:02,980
An das Trinken denken, ja. Jetzt bin ich ja blöd, jetzt habe ich ein Clean-Build gemacht,

1509
03:38:02,980 --> 03:38:06,820
jetzt kann ich nicht mehr im Ordner nachgucken. Okay, funktioniert alles.

1510
03:38:06,820 --> 03:38:16,340
Kannst du nicht im Package-Build einstellen, dass es immer ein Clean-Build macht?

1511
03:38:16,340 --> 03:38:19,140
Ich weiß nicht, ich kenne mich damit nicht wirklich gut aus.

1512
03:38:19,140 --> 03:38:41,460
Musst du im Workflow Minus Minus Clean machen? Ich denke nicht. Du meinst, du meinst hier,

1513
03:38:41,460 --> 03:39:00,540
ja? Du meinst hier? Glaube ich nicht.

1514
03:39:12,460 --> 03:39:18,740
Jetzt kann man das leider nicht richtig nachvollziehen, was ziemlich doof ist.

1515
03:39:18,740 --> 03:39:34,420
Source Info. Kann man das leider nicht mehr richtig nachvollziehen mit dem mit dem Upgrade.

1516
03:39:34,620 --> 03:39:38,900
Müsste ich jetzt Version 6 fake mäßig machen, um das hinzuzugehen?

1517
03:39:38,900 --> 03:40:00,060
Kann es sein? Ich glaube mein Package-Build ist irgendwie nicht so nicht so ganz optimal.

1518
03:40:00,060 --> 03:40:10,700
Müsste ich das vielleicht noch mal in einem Sub-Directory machen oder so was?

1519
03:40:10,700 --> 03:40:19,260
Ich habe schon wieder vergessen, wie der Krempel funktioniert,

1520
03:40:19,260 --> 03:40:22,140
ehrlich gesagt. Ich habe es mir einmal angeguckt und dann war gut.

1521
03:40:30,060 --> 03:40:40,860
Ich meine, wir können es ja mal nachvollziehen. Das ist ja auch okay,

1522
03:40:40,860 --> 03:40:48,460
das ist ein Git, das ist ein Git-Report. Git Reset, Head 1 zurück auf Version 4.

1523
03:40:48,460 --> 03:41:15,180
Git Checkout, Minus Minus Source Info und wie heißt das andere? PKG-Build.

1524
03:41:15,180 --> 03:41:22,620
So, jetzt haben wir die alten wieder und jetzt kann ich aber sagen Make Package,

1525
03:41:22,620 --> 03:41:37,620
einfach Make Package. So, finished. Jetzt haben wir V004 am Start. Make Package,

1526
03:41:37,620 --> 03:41:44,860
Minus Minus Install ist okay. Downgrading, ja das ist okay. VmChamp, Minus Minus Version.

1527
03:41:44,860 --> 03:41:54,460
Es ist immer noch 5. Ich glaube mein Package-Build ist irgendwie nicht so der Weisheitsletzter Schluss.

1528
03:41:54,460 --> 03:42:02,300
Guck mal, da hat es Minus Version 4, aber da hat nichts gemacht. Also mein Package-Build

1529
03:42:03,300 --> 03:42:19,820
sagt. Was liegt denn hier für eine Dateiversion? Er mischen die. Achso, chmod plus x. Das ist

1530
03:42:19,820 --> 03:42:24,860
Version 5. Ich glaube, das ist das Problem. Ich glaube, das ist das Problem. Warum liegt

1531
03:42:25,620 --> 03:42:38,820
da Version 5 drin? Das sollte doch jetzt eigentlich. Wow, wow, wow, ist ja gut. Keine so gute Idee,

1532
03:42:38,820 --> 03:42:50,500
es zu ketten. Warum ist da Version 5 drin, Leute? Das ergibt doch gar keinen Sinn. Ich habe doch

1533
03:42:51,020 --> 03:43:05,380
jetzt Version 4 gebildet. Also ich habe die Vermutung, dass mein Package. Ja, ich habe

1534
03:43:05,380 --> 03:43:08,380
nicht clean gebildet, das ist richtig. Das muss aber doch eigentlich auch ohne clean

1535
03:43:08,380 --> 03:43:20,820
Bild funktionieren. Gibt es da sowas? PKG-Build. Clean. Ah. Ah.

1536
03:43:39,380 --> 03:43:43,460
Archwiki. Was sagt das Archwiki dazu?

1537
03:43:43,460 --> 03:44:04,940
Dependencies, Conflicts, Replaces, Package, Install. Also im Prinzip habe ich ja nicht

1538
03:44:04,940 --> 03:44:15,060
wirklich viel drinstehen. PKG-Build. So, ich habe nur eine Package-Methode. Package. Aus irgendwelchen.

1539
03:44:15,060 --> 03:44:40,020
Creating Packages. Hier, da steht, was es gibt. Okay, es gibt Prepare. To prepare sources for

1540
03:44:40,020 --> 03:44:50,660
building. Muss ich das? Jetzt machen doch andere Packages auch nicht so. Also ich glaube,

1541
03:44:50,660 --> 03:45:00,100
ich glaube, mein Package, mein PKG-Build ist irgendwie kacke. Nur mit dem Unterschied,

1542
03:45:00,100 --> 03:45:03,380
ich habe halt keine Ahnung so genau, was ich da eigentlich mache. Das heißt, ich weiß nicht,

1543
03:45:03,380 --> 03:45:25,260
wie ich es fixen kann. Es gibt, da gibt es da gibt es nichts mit clean Bild. Ich muss

1544
03:45:25,260 --> 03:45:34,020
wahrscheinlich vorher die Sachen löschen. Ich meine, eigentlich hätte ich ja vermutet,

1545
03:45:34,020 --> 03:45:46,260
der lädt die alte Version runter, wenn ich das mache. Macht er aber nicht. Wir resetten

1546
03:45:46,260 --> 03:45:52,940
noch mal eins. Jetzt, wir gehen jetzt mal auf Version 3. Ja ja, Checkout-Build, Checkout,

1547
03:45:52,940 --> 03:46:01,060
Source-Info, Install. So, jetzt will er downcrate. Jetzt will er downcrate auf Version 3. Minus,

1548
03:46:01,060 --> 03:46:10,220
minus Version. So, das ist immer noch Version 5. Und in meinem System ist auch immer noch

1549
03:46:10,220 --> 03:46:25,500
Version 5. Was kann ich in meinem PKG-Build machen? Minus S, minus, minus S. Ja, aber das

1550
03:46:25,500 --> 03:46:30,900
müssen andere Packages doch auch nicht machen beim Installieren. Wenn ich andere Packages update,

1551
03:46:30,900 --> 03:46:39,500
dann lasse ich das hier einfach durchlaufen und es geht. Und warum hat Mainz damit irgendwelche

1552
03:46:39,500 --> 03:46:45,140
Probleme? Muss ich vorher wirklich aufräumen lassen? Also muss ich jetzt quasi immer Package

1553
03:46:45,140 --> 03:46:55,140
Build. Brauche ich jetzt hier wirklich irgendwie noch so eine Pre. Brauche ich hier wirklich

1554
03:46:55,140 --> 03:47:11,420
irgendwie so einen Pre-Package-Build. Prepare-Step. Probieren wir das mal aus. Prepare. So, und

1555
03:47:11,420 --> 03:47:18,380
dann löschen wir einfach mal das alte Binary hier drinnen. Ich könnte mal auch gucken,

1556
03:47:18,380 --> 03:47:34,180
wie der Vorti das gebaut hat. Einfach mal spicken. Package. Na gut, der hat einen Build-Step. Ja,

1557
03:47:34,180 --> 03:47:41,860
gut, bei dem ist es kein Ding. Der erzeugt ja jedes Mal ein neues Binary. Und bei mir lädt

1558
03:47:41,860 --> 03:47:46,620
er das wahrscheinlich gar nicht neu runter. Okay, probieren wir das mal aus. Wir haben hier einen

1559
03:47:46,620 --> 03:47:54,260
Build-Step. Prepare. Kann ich da sowas sagen wie... Ich bin ja nur bei mir lokal. Ich mache mal

1560
03:47:54,260 --> 03:48:03,500
einen Snapshot. Wer weiß was ich da gerade treibe. Kann ich da sowas sagen wie RM? Package Deal?

1561
03:48:03,500 --> 03:48:21,700
Ich kann aber sagen VM-Champ RM. Also quasi das alte was noch da ist. Geht das jetzt?

1562
03:48:33,500 --> 03:49:03,420
Ne. Geht VM-V. Geht Pol. Achso, das will ich ja nicht. Wie war das? Reinstalk?

1563
03:49:03,660 --> 03:49:11,220
Oder? A package has already been built. Ja, ja, das ist ja schön und gut, wenn das already

1564
03:49:11,220 --> 03:49:19,300
been built. Package. Package können wir löschen. Was ist in Source drinnen? In Source ist auch

1565
03:49:19,300 --> 03:49:26,620
noch mal VM-Champ. Und zwar dann in Version 5. Warum ist das überall in Version 5? Stehe ich nicht.

1566
03:49:33,420 --> 03:49:52,340
Er hat es jetzt auch gar nicht ausgeführt, weil es... Achso! Weil es das hier schon gibt.

1567
03:49:52,340 --> 03:50:08,460
Das muss ich wahrscheinlich löschen. Ja. No such file. Cutsource. Okay, das gibt es doch nicht.

1568
03:50:08,460 --> 03:50:26,620
Keine Ahnung, wie man das macht. Oder ist es Package Deal, wo ich das... Also was ich jetzt,

1569
03:50:26,620 --> 03:50:31,260
was ich nicht verstehe ist, was er eigentlich noch machen soll ist, das ist noch Version 5.

1570
03:50:31,260 --> 03:50:40,780
Es soll aber mit dem Build, Source, es soll dort eigentlich Version 4 runterladen. Und irgendwie

1571
03:50:40,780 --> 03:50:47,860
macht er das nicht. Wir können ja make... Müssen wir gar kein install machen. Geht

1572
03:50:47,860 --> 03:50:54,140
eigentlich nicht ganz einfach. So. Und jetzt hier. Source. VM-Champ. Minus,

1573
03:50:54,380 --> 03:51:05,220
Version 5. Warum 5? Ich meine, ich sage ihm doch ganz klar, wo es herkommt. Package Version 3.

1574
03:51:05,220 --> 03:51:16,940
Hier hin. Runterladen. Kann das sein, dass er die Checksumme braucht, dass er das kapiert?

1575
03:51:24,140 --> 03:51:40,340
Was ist denn das hier? Source gleich? Was ist denn der Unterschied zwischen... Ah Moment,

1576
03:51:40,340 --> 03:51:52,140
der hat es einfach nur in zwei... Einfach nur mehrzeilig geschrieben. Also ich habe keinen Plan,

1577
03:51:52,140 --> 03:51:58,260
wie man ihn dazu überreden kann, das neu runterzuladen. Redownload.

1578
03:51:58,260 --> 03:52:26,100
Source. Destination. Ich meine, gibt sie... Okay, wenn sie einen Prepare-Step gibt. Echo.

1579
03:52:26,100 --> 03:52:39,860
Ich habe keine Ahnung, was ich hier eigentlich mache. Minus F. So. Starting Prepare. In welchem

1580
03:52:39,860 --> 03:52:48,860
Ordner sind wir hier überhaupt? An der Stelle. Wir sind in Source. Ja, okay.

1581
03:53:09,860 --> 03:53:20,820
Meiner Versionsnummer liegt das nicht. Versionsnummer ist 003. Okay, warte mal. Mit dem Link. Ich mache

1582
03:53:20,820 --> 03:53:28,780
mal kurz das mit dem Link weg. Ich bin hochgradig verwirrt, wie der Scheiß funktioniert. Von 005

1583
03:53:28,780 --> 03:53:46,620
auf 03. Wieso ist das doch egal? Source. Der redownloadet das nicht. Warum redownloadet er den

1584
03:53:46,620 --> 03:53:55,420
Kram nicht? Der linkt das dahin. Okay, schön und gut. Der lädt den Source aber nicht. Warum dann

1585
03:53:55,420 --> 03:54:05,820
nicht? Wo ist er denn jetzt hier mit PWD unterwegs? In Source. Ja, wunderbar. Also,

1586
03:54:05,820 --> 03:54:15,660
ich habe keine Ahnung, wie der Kram funktioniert. Ich weiß nur, dass das Package von mir das Einzige

1587
03:54:15,660 --> 03:54:24,660
ist, was sich so merkwürdig verhält. Das heißt, es muss irgendwie an meinem Bild liegen. Bild,

1588
03:54:24,660 --> 03:54:33,820
Clean, Source. Hat irgendjemand einen Plan von euch? Hat es schon mal gemacht?

1589
03:54:43,020 --> 03:54:48,300
Das ist hardcoded, die Version da drin. Der liest gar nichts. Da dran liegt das nicht. Ich

1590
03:54:48,300 --> 03:54:52,780
weiß ja, woran es liegt. Das ist das falsche Binary, was hier liegt. Die Frage ist nur,

1591
03:54:52,780 --> 03:54:58,460
was ist das falsche Binary? Die Frage ist, warum ist es das falsche Binary? Warum lädt er es nicht

1592
03:54:58,460 --> 03:55:10,740
neu runter? Ist make pkg-s dann für Steps runterladen? Das kann schon sein, aber das bringt mir

1593
03:55:10,740 --> 03:55:19,660
ja alles nichts, wenn ich es hier so fixen kann. Nee, ist auch immer noch minus 5. Das würde mir

1594
03:55:19,660 --> 03:55:25,180
ja gar nichts bringen. Die Leute installieren das ja über den Package Manager. Nein, Clean

1595
03:55:25,180 --> 03:55:30,700
Bild bringt nichts. Leute, es ist doch offensichtlich, dass das, was ich hier unten mache,

1596
03:55:30,700 --> 03:55:37,060
überhaupt keinen Einfluss darauf hat, was mein Package Manager macht. Selbst wenn ich das hier

1597
03:55:37,060 --> 03:55:41,660
unten mit Clean und allem irgendwie fixen kann. Ich weiß, dass es mit einem Clean Bild logischer

1598
03:55:41,660 --> 03:55:47,260
Weise geht. Ist es doch aber egal dafür, was die Leute mit dem Package Manager machen. Es muss doch

1599
03:55:47,260 --> 03:55:51,340
mit dem Package Manager gehen, dass ich jetzt Enter, Enter, Enter drücke und es ist die

1600
03:55:51,340 --> 03:55:55,740
rette Version. Es kann doch nicht sein, dass ich jedes Mal sagen muss Clean Bild. Das muss

1601
03:55:55,740 --> 03:56:04,940
ich bei keinem anderen Package. Das muss ich nur bei meinem Package. Und das verstehe ich nicht,

1602
03:56:04,940 --> 03:56:17,220
woran es liegt. Guck mal, der lädt das einmalig runter. Ja, es liegen noch

1603
03:56:17,260 --> 03:56:23,020
Reste rum. Das sage ich doch die ganze Zeit, dass da Reste rumliegen. Mensch, Alter, Backseating

1604
03:56:23,020 --> 03:56:27,780
Chat wieder. Natürlich, hier liegen Reste rum. Das ist das falsche. Aber warum ist das das

1605
03:56:27,780 --> 03:56:35,180
falsche? Natürlich liegen da noch Reste rum. Das ist doch das, was mich seit 30 Minuten frage,

1606
03:56:35,180 --> 03:56:40,140
warum da noch Reste rumliegen. Warum man das nicht überschreibt. Das ist doch der eigentliche

1607
03:56:40,140 --> 03:56:45,500
Knackpunkt. Wir können das mal umbenennen. Können wir das mal umbenennen. Gucken wir mal,

1608
03:56:45,500 --> 03:56:50,900
was jetzt runterladen würde. Hier ist eine sehr basic. Ja, das probiere ich gleich mal

1609
03:56:50,900 --> 03:56:56,860
auch so. Jetzt, wenn das nicht da ist, lädt das runter und jetzt ist es höchstwahrscheinlich

1610
03:56:56,860 --> 03:57:02,500
auch. Aber was interessiert ihn denn überhaupt, dass da ein altes Package von der alten Version

1611
03:57:02,500 --> 03:57:31,700
liegt? Hä? Moment. Warum steht da? Ach so, weil ich... Ah, jetzt blick ich einmal.

1612
03:57:31,900 --> 03:57:40,340
Reset. So, jetzt sind wir auf Version 4. So, ich checke jetzt das aus und PKG-Bild aus

1613
03:57:40,340 --> 03:57:50,620
von Version 4. Source, PKG-Bild. So, beides Version 4, Version 4. So, das hier ist Version

1614
03:57:50,620 --> 03:57:59,460
5. Okay, Make Package minus F. Er lädt es nicht neu runter. So, das ist schon mal Fail.

1615
03:57:59,460 --> 03:58:09,900
Wenn ich das verschiebe, dann lädt das neu runter und jetzt ist es bestimmt auch Version

1616
03:58:09,900 --> 03:58:15,220
4. Jetzt ist es Version 4. So, die große Preisfrage. Jetzt kann man das zumindest schon mal nachstellen.

1617
03:58:15,220 --> 03:58:20,580
Die große Preisfrage, die ich mir jetzt stelle, ist, warum lädt er das nicht einfach immer

1618
03:58:20,580 --> 03:58:29,440
neu runter? Das ist ja das eigentliche Problem. Vielleicht ist es echt die Checksum, ja. Vielleicht

1619
03:58:29,440 --> 03:58:47,240
ist es wirklich die Checksum, dass man das angeben muss. Aber das doch mal. Package-Bild,

1620
03:58:47,240 --> 03:58:54,840
passen wir das doch mal an. Package-Bild Checksums. So, das ist für Version 4. Das hier ist Version

1621
03:58:54,840 --> 03:59:03,960
5. Wir tun jetzt mal so, als wäre vorher Version 5 am Start. Version 5. Und was mache

1622
03:59:03,960 --> 03:59:18,760
ich jetzt in meinem Package-Bild noch mal? Source Info. Source Info. Version 5. Version

1623
03:59:18,760 --> 03:59:26,640
4. Checksum hat er jetzt eingetragen. So, Make Package-F. Dann sagt er mir nur, one

1624
03:59:26,640 --> 03:59:33,480
or more files need not pass validity check. Das ist ja richtig. Aber warum lädt er die

1625
03:59:33,480 --> 03:59:45,760
nicht neu runter? Weil würde er die neu runterladen, was übrigens auch hier steht, würde er die

1626
03:59:45,760 --> 03:59:56,420
neu runterladen, dann würde das auch funktionieren. Ja, der sagt, dass er sie bereits gefunden

1627
03:59:56,420 --> 04:00:01,080
hat, weil hier ein Package ist. Deswegen sage ich ja minus F. Also das ist das eigentliche

1628
04:00:01,080 --> 04:00:17,360
Problem. Warum lädt er das nicht neu runter? Refresh. Und vor allem, warum klappt das in

1629
04:00:17,360 --> 04:00:35,720
diesem Git-Package hier? Warum klappt das in dem Git-Package?

1630
04:00:35,720 --> 04:01:03,640
Was macht er denn hier? CD? Source Dear?

1631
04:01:03,640 --> 04:01:17,080
Kann es sein, dass man ein Package pro Release machen sollte irgendwie? Nee, das kann ja auch

1632
04:01:17,080 --> 04:01:25,480
nicht sein. Warum klappt das bei seinem Git-Package? Das ist doch genau das gleiche. Das ist immer die

1633
04:01:26,480 --> 04:01:46,000
dann guckt er hier Git. Das ist mir zu high IQ, wie das funktioniert. Und ich bin mir

1634
04:01:46,000 --> 04:01:56,840
auch nicht wirklich sicher, wie ich das in einem Package-Build fixen könnte. Ich bräuchte hier

1635
04:01:56,840 --> 04:02:11,640
irgendwas davor, um irgendwie aufzuräumen. Aber das hier lässt er doch laufen, bevor überhaupt

1636
04:02:11,640 --> 04:02:17,240
irgendwas von den Dingern da unten. Ja, selbst das funktioniert ja nicht. Selbst das funktioniert

1637
04:02:17,240 --> 04:02:22,600
nicht, weil er den Download irgendwie macht, bevor irgendwelche Custom Functions laufen.

1638
04:02:22,600 --> 04:02:35,080
Was gibt Prepare? Das Function-Command, das ich schon probiert habe. Wobei ich da, glaube ich,

1639
04:02:35,080 --> 04:02:47,520
sogar im komplett falschen Verzeichnis bin. Okay, Leute, das ist eine gute Idee. Das würde

1640
04:02:47,520 --> 04:02:54,720
wahrscheinlich funktionieren. Wahrscheinlich könnte ich das Binary so nennen. Okay, das ist

1641
04:02:54,720 --> 04:03:02,920
natürlich auch eine Variante. Man könnte das Binary so nennen. Wobei sich dann in dem Build-Ordner

1642
04:03:02,960 --> 04:03:13,080
Megabyteweise Shit ansammelt. Was auch nicht so Sinn und Zweck der Sache ist. Machen wir mal

1643
04:03:13,080 --> 04:03:29,800
Prepare. Prepare. Und dann haben wir noch PwD, wo wir da jetzt gewesen sind. Retrieving Sources

1644
04:03:29,800 --> 04:03:35,640
found for MChamp. Du kannst den überhaupt nicht ge-founded haben, weil das die falsche

1645
04:03:35,640 --> 04:03:42,200
Version ist. Und die Check-Summen stimmen auch nicht. Die clearen das selbst nach einer Zeit.

1646
04:03:42,200 --> 04:03:48,160
Ja, das Problem ist, ihr müsst das gleich clearen, weil das Package die alte Version.

1647
04:03:48,160 --> 04:03:55,760
Nee, Source-Info-Update ist richtig. Die Source-Info stimmt. Source-Info ist alles gut, ist alles

1648
04:03:55,760 --> 04:04:02,000
richtig. Ich glaube, ich habe einfach das System noch nicht so hundertprozentig gecheckt. Doch,

1649
04:04:02,000 --> 04:04:11,520
Source-Info ist richtig. Da steht Source 4 drinne. Ist richtig. Source 4 ist richtig.

1650
04:04:11,520 --> 04:04:19,640
Was hier liegt, ist Version 5. Und die hat weder die richtige Check-Summe,

1651
04:04:19,640 --> 04:04:36,400
noch denkt er, dass das runterläuft. Ja, vor dem Doppelpunkt. Ja genau, das ist halt die Frage,

1652
04:04:36,400 --> 04:04:41,200
warum er es nicht überschreibt. Was gehen würde, wäre wahrscheinlich wirklich das,

1653
04:04:41,200 --> 04:04:45,800
was eben vorgeschlagen wurde, dass man hier noch die Version reinschreibt.

1654
04:04:45,800 --> 04:04:57,000
Als man das so macht, also mit Prepare geht es auch schon mal nicht, weil das alles vorher läuft.

1655
04:04:57,000 --> 04:05:10,280
Nee, das habe ich ja nicht gemacht. Okay, also wahrscheinlich muss man das wirklich,

1656
04:05:10,280 --> 04:05:14,200
wahrscheinlich bleibt mir nichts anderes übrig, wie das wirklich so zu nennen,

1657
04:05:14,200 --> 04:05:25,480
dass die Version da reinkommt. Hi IQ Shit, wie macht das Microsoft? Der Typ,

1658
04:05:25,480 --> 04:05:33,760
der das Microsoft-Dings gepackaged hat. 23, Source x86 Code. Okay, die machen das auch so.

1659
04:05:34,120 --> 04:05:44,480
Ja, anscheinend muss man wirklich die Version da reinschreiben, sonst bug das rum. Na gut.

1660
04:05:44,480 --> 04:05:55,760
Du erstellst ein Temp hier, das geht nicht, weil dieses Source, das lädt er automatisch

1661
04:05:55,760 --> 04:06:02,400
runter, bevor irgendwelche Scripts von mir laufen. Aber wir können doch mal das hier mit Skip.

1662
04:06:02,400 --> 04:06:16,800
Skip machen, weil ich gar keinen Bock habe. Okay, das muss wirklich dann anscheinend so heißen.

1663
04:06:16,800 --> 04:06:21,040
Dann funktioniert der Kempel hier unten aber wieder nicht, aber wir führen es trotzdem jetzt

1664
04:06:21,040 --> 04:06:28,560
erstmal aus und gucken, ob es dann klappt. Bist du schon ein trusted user? Keine Ahnung.

1665
04:06:28,560 --> 04:06:48,480
Warte mal, lass mal überlegen. Source Info. Source Info. Okay, und jetzt Make Package minus F.

1666
04:06:48,480 --> 04:07:01,320
Jetzt lädt das auch runter. Okay, das ist anscheinend wirklich das Problem. Wobei es

1667
04:07:01,320 --> 04:07:11,280
an sich jetzt nicht funktioniert, das zu bauen. Source. Ja, ist ja gut, weil dann heißt der Kempel

1668
04:07:11,280 --> 04:07:17,760
so, das soll ja gar nicht so heißen. Das heißt, wir müssen das Package-Build nochmal anpassen,

1669
04:07:17,760 --> 04:07:36,000
so install und zwar was, was soll ich installen, was will ich installen? Das da. Ja Moment,

1670
04:07:36,000 --> 04:07:43,360
das soll aber vmchamp am Ende heißen und nicht vmchamplinux irgendwie was. Muss ich das jetzt

1671
04:07:43,360 --> 04:08:06,160
noch, muss ich das dann noch umbenennen? Also quasi sowas zu vmchamp. Okay, das ist noch das

1672
04:08:06,160 --> 04:08:26,760
alte, das wollen wir nicht. Source. Wenn man es dann richtig macht. Source. Ja. Ja, das sieht

1673
04:08:26,760 --> 04:08:41,080
eigentlich ganz gut aus. Okay, das ist wahrscheinlich das Problems-Lösung hier. Also man muss die

1674
04:08:41,080 --> 04:08:44,960
Versionsnummer hier vorne drin angeben und hier unten muss man es dann einmal moveen und dann

1675
04:08:44,960 --> 04:08:55,080
funktioniert der Rest. Okay, nice, easy. Also brauche ich das da und ich brauche das da. Gut,

1676
04:08:55,080 --> 04:09:07,320
dann updaten wir nochmal kurz das Package. Wie mache ich das jetzt am besten? Ich habe hier

1677
04:09:07,320 --> 04:09:11,400
gar nicht den Key, um mich ins Arch-User-Repo verbinden zu können. Das kann ich jetzt hier

1678
04:09:11,400 --> 04:09:21,440
gar nicht machen. Das kommt ja nicht aus meinem GitHub-Build, sondern mein GitHub-Build passt

1679
04:09:21,440 --> 04:09:38,760
ja nur die Versionsnummer da drin an. Oder habe ich den Key hier vielleicht hingelegt?

1680
04:09:38,760 --> 04:09:51,320
Okay, aber das ist wahrscheinlich wirklich das Problem. Das müsste ich jetzt machen.

1681
04:09:51,320 --> 04:09:59,160
Das mache ich off-stream. Ich habe den Key nicht hier. Aber das ist tatsächlich das muss

1682
04:09:59,160 --> 04:10:05,560
ich mir mal rüber kopieren. Das ist tatsächlich das Problem. Also ich muss die Source anpassen

1683
04:10:05,560 --> 04:10:11,000
mit Versionsnummer und das Ganze dann moveen und dann wird es wahrscheinlich auch funktionieren.

1684
04:10:11,000 --> 04:10:23,240
Wobei doch, ich habe den Key hier. Ich habe den Key in GitHub gespeichert. Da müsste ich jetzt

1685
04:10:23,240 --> 04:10:35,160
das Lokal runter kopieren. Okay, können wir mal ausprobieren. Vielleicht bin ich hier sogar

1686
04:10:35,160 --> 04:10:48,080
eingeloggt? Power? Login? Naja, da nicht. Bin ich hier vielleicht eingeloggt? Power?

1687
04:10:48,080 --> 04:11:09,640
Login? Wo bloß? Ich mache jetzt keine Check-Summen. Aber ich glaube, wir haben das Problem gelöst,

1688
04:11:09,640 --> 04:11:17,960
woran es liegt. So, 4 Stunden 11 Leute, reicht für heute. Genug gebastelt. Boah,

1689
04:11:18,000 --> 04:11:24,120
das hat mich jetzt nochmal abgefuckt mit dem Cash. Das werde ich jetzt gleich offline in der VM fixen.

1690
04:11:24,120 --> 04:11:40,320
Agiler Stream. Meine Güte, es reicht echt für heute. Macht's gut Leute, ich haue jetzt ab.

1691
04:11:40,320 --> 04:11:42,960
Bis denn, see you.

