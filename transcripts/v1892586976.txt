Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Por
Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc, Porc
Sachen
Besser Titel
Besser Streamtitel
Agila ja ja
Agila Senior PyFed Frontend JavaScript Architekt macht Experten High Performer Sachen
oder so
An's trinken, du kannst mich nicht an's trinken erinnern, also du kannst, aber das bringt ja nix, weil ich hab grad nix zu trinken, da
Du du du du du
Keck Alu
Kein Prime Sub mehr frei oder wahrscheinlich kein Prime Account, soll's ja auch noch geben, Leute, die kein Prime Account haben
Ja, der Papagei muss auch mal wieder sein, wo hab ich den denn?
Ich hab den da, hab ich den, hab ich den auch irgendwo in nicht
Und
glaub nicht
Einfach Prime, echt, geht das auch? Den gleichen Trick verwende ich ja für YouTube mit dem indischen YouTube Account
Wusste gar nicht, dass es den gleichen Trick auch in Polen gibt
Was kostet denn da Prime
Die Musik ist, das ist Spielemusik, das ist von
Das ist aus dem Ost von VVVVV, bester, bester Spielename überhaupt, das sind die, das sind diese, diese
Das sind die sechs Figuren hier, ja, das ist V, das ist V, das ist V, das ist V, das ist auch V
Die haben auch irgendwelche Namen, ich frag mich nicht mehr wie die, schon ewig, der Spiel ist von 2008 oder so
Aber die hat, das hat nice, nice Musik
Wobei das halt 10 Minuten der Gleiche, nicht 10 Minuten, 10 Stunden der Gleiche Songs sind, das muss jetzt nicht sein
sein ich werde euch gleich erlösen und gleich was ordentliches anmachen oder irgendwas was
ich besser was man besser im Hintergrund laufen lassen kann.
Erster Eindruck von Baldur's Gate 3 ok habe ich ja im letzten Stream schon gesagt also
es ist ein richtig gutes ich würde noch nicht mal sagen oldschool RPG das wird immer so
das wird immer so verkauft so nach dem Motto als ähm ja wie wird das genannt hier ja doch
so Oldschool RPG so Boomer RPG mäßig ist es gar nicht das ist das ist relativ modern
das ist quasi Divinity Origins in 2.8 oder so zumindest insgesamt muss ich sagen es ist
ein richtig gutes Game wenn man auf solche Sorten Spiele steht ich muss sagen es hätte
aber auch nicht unbedingt Baldur's Gate heißen müssen ich gette warum sie es so genannt
haben aber es hätte nicht unbedingt Baldur's Gate sein müssen weil es hat mit den alten
Baldur's Gate Spielen sowohl stilistisch als auch Storytelling wobei das will ich
gar nicht mal so sagen ohne zu spoilern ein bisschen Bezug gibt es schon ähm also sowohl
stilistisch als auch vom Gameplay her hat das relativ wenig mit den alten Baldur's
Gate zu tun und das liegt nicht daran dass Baldur's Gate 3 auf Dungeons & Dragons 5
oder 5th Edition basiert und nicht auf der 2. sondern dass das alles halt dass es nicht
Realtime mit Pause ist dass es nur ne 4er Party statt ne 6er Party ist und sowas also
es spielt sich schon an es ist aber ein wirklich gutes Game mit extrem viel zu entdecken und
extrem viel Content wo ich noch ein bisschen gespannt bin wo ich noch ein bisschen gespannt
bin deine Mutter spielt das Game hat guten Spielegeschmack also wo ich ja noch ein bisschen
gespannt bin wie die letzten wie so der letzte und vorletzte Akt ist in Baldur's Gate 3 weil
eine Sache die Divinity Originals in 2 hatte zumindest meinem persönlichen Eindruck nach
war die erste Hälfte des Spiels besser als die zweite Hälfte des Spiels aber selbst mit nur
der ersten Hälfte hat man immer noch unglaublich viel Content aber ich bin mal gespannt wie sich
das entwickelt so viel habe ich jetzt ja auch noch nicht gespielt ist es nicht so dass ich
schon fast durch bin oder sowas du kannst du kannst den ersten Akt fast 100 Stunden spielen wenn du
willst ich muss mal kurz ein bisschen anderes wie anderes Wupp Wupp hier Nintendo Songs was
haben wir denn hier lass mal Wupp Wupp Wupp Wupp Wupp Wupp geht im Prinzip Wupp Wupp Wupp geht
immer das ist so so so so passende Hintergrund nichts sagen Hintergrund Musik das kann man
immer anmachen so gucken ob die Lautstärke richtig eigentlich ist mach mal Wupp Wupp Wupp Wupp Wupp
Wupp Wupp Wupp viel zu laut Wupp Wupp Wupp so ist gut man muss das immer ein bisschen bisschen
runterdrehen weil Wupp Wupp Wupp immer ziemlich ziemlich komprimiert ist vom Sound her hört sich
immer viel viel lauter an als es ist ja so ich mach mal meine VM an let's go High Performer
Crimeset Mindset Chief Architects Solution Win bis Sec DevOps Officer am Start heute für alle
die gestern nicht dabei waren zeige ich euch was wir machen auf jeden Fall müssen wir jetzt erstmal
Daily Scrub machen Daily Stand Up Leute gleich geht's los Status Update was die VM macht da
ist sie hier ist die VM die VM muss jetzt erstmal Arch by the Way updatet werden wow was ist das
hier Perl und was moment was wird geupdatet Lib Turbo ach ne JPG Turbo ja das ist glaube ich die
Standard Dings hier JPEG Implementierung Lib Elder Perl meine Güte Alter warum habe ich noch so viel
Perl für was habe ich Perl warum habe ich Perl drin okay das Problem war er Perl lass mal gucken
was passiert wenn ich das versuche ah das geht nicht weil ah verstehe ASCII Aquarium braucht das
ja gut dann kann ich es natürlich nicht deinstallieren das ist klar aber aber Shit brauchst
auch und hyphen hyphen hyphen ist ein Bindestrich oder ja okay Bindestrich naja dann dann halt mal
Perl geupgradet JetBrains Toolbox oh guck mal JetBrains Toolbox 2.0 ist da haben die irgendwelche
Release Loads JetBrains Toolbox 2.0 was haben die für geile Sachen ist das jetzt ist das jetzt
besser irgendwie das kommen wir uns gleich an wieder mit buntem Icon ja ich hoffe mal sehen
wir gleich ich muss eh gleich ich muss eh gleich rebooten da müssen wir alles nochmal stellen jawoll
updaten geht es egal aber ASCII Aquarium ist richtig genau man muss da schon Prioritäten
setzen kann ich einfach Perl runterschmeißen und dann gibt es kein ASCII Aquarium mehr willst du
mich veräppeln ich habe das doch gerade geupdated kann das kann das sein dass ich das
gar nicht benutze Moment das muss ich jetzt mal checken ich habe die nur installiert aber ich
benutze die gar nicht okay Toolbox 2.0 introduces significant changes to how your tools are managed
and so because of this the new version migrates your tools on launch this can take several minutes
depending on how many tools you have this action cannot be undone okay ich mach mal ich mach mal
alles zu leute das hier zu das hier zu das ist das Terminal das muss ich dazu ich muss eh rebooten
so update let's go let's go Toolbox white people happy Chief Dev Ops Sec Biz Manager Ops of Business
Grunt ne ne ne ne da fehlt Architekt und Expert drinne noch pass auf jetzt ist es kaputt und hat
alles an installed welcome Toolbox 2.0 my great tools wie das war es schon mein griff
was ist das aber wenn ich klicke geht es alles okay the rider kann man was what's new what's
new shit lab integration AI assistant habe ich habe ich auf den AI Assistant Zugriff wenn ich
den Old Desktop Package habe egal wie update muss eh sein updating so und dann werden wir
rebooten sobald das hier fertig ist und dann fangen wir an heute gibt es richtigen Pfeiffer
Java JavaScript Shit plus ein bisschen C Sharp Backend und zwar ich werde das heute mal ein
bisschen ordentlich machen wir haben wir haben die letzten Tage ziemlich viel zusammen gewurschtelt
wir werden das mal ein bisschen in Komponenten auslagern und den Assistent fertig machen den
wir gestern angefangen haben Speedfighter Dankeschön für den Sub das ist der IQ Punkte
für den gesamten Chat wieder verteilt hier so ist das nice muss ja sein der Chat war ein bisschen
3 hat die letzten letzten Tage vielleicht war es auch der Trainer der alle runtergezogen hat
man weiß nicht so genau aber wird Zeit für Prime Subs dass der IQ hier ein bisschen steigt wieder
Applying Patches okay alle was passiert da im Hintergrund gerade okay fertig alles installiert
okay alles reboot reboot nexus an nexus an Dankeschön für den Sub aber Captain Poggers dafür
bist du glaube ich ja was gibt es nicht oder bist du der Lisp Fan gewesen ich kann da nicht
durcheinander bringen wir hatten doch hier irgendeiner Lisp Fan am Start wir haben sogar
Leute die mögen ABAP können euch das vorstellen haben sich gestern ein paar Leute geoutet sie
mögen ABAP bald isos danke für den Sub IQ Stealth du arbeitest in einer 4m ist das nicht 8? Nö warum?
macht das irgendwie den Eindruck als wäre das langsam ja ich habe rebooted so
okay der jetzt was hatten wir hier auf? Hier hatten wir Visual Studio Code auf hier hatten wir Chrome in einem Tab
nebendran ich bräuchte mal so einen Desktop Session Manager der immer wieder nach dem
Neustart alles aufmacht so wie man es eingestellt hat so dann müssen wir hier rein nach repos via
gemweb npm run dev okay starten da ist es dann müssen wir hier einen Terminal aufmachen Rider
starten und unsere Back End App ist einfach verschwunden die steht immer hier drinnen hat
die Migration nicht so ganz funktioniert ja aber hauptsache ich kann Rider Projects Kackel öffnen
das ist das allerwichtigste dass das das brauche ich jetzt nein kanns nicht alter öffne halt einfach
got it okay what's new in Rider lasst uns mal kurz checken Customize Project Headers
okay ich habe neues haben die nicht aber die haben etwas präsenteres logo jetzt und ein
bisschen farblich gestyltes gestaltet gestaltet bar hier oben okay wie geht das Custom Change
Project Color? Nein gut nicht dass ich das jetzt bräuchte ich habe eh nur ein Projekt drin. AI Assistant kann ich
jetzt hier einblenden guck mal hier wo ist er denn der AI Assistant? Der müsste angeblich hier irgendwo
sein Sternchen seht ihr das irgendwo dieses Sternchen Symbol wobei ganz ehrlich ich will
ich will den JetBrains AI da muss man sich bestimmt extra doch einen fünften Account machen oder so
C-Sharp Support für neues Zeug. Alter was haben die meine Güte was haben die für Release Notes?
What the fuck? Wir haben eine Software gekauft auf der Arbeit von einem Hersteller der hat es
bis letzte Version nicht geschafft Release Notes raus zu bringen und jetzt schreibt er
immer eine Zeile mit irgendwie drei Changes auf einmal obwohl sie viel mehr gemacht haben was
ist das ist ja hier als der krassesten Change Notes Dinger hier. Alter die wollen es aber
echt wissen. Gut wir wollen es aber mich interessiert es nicht. Backend und jetzt Run. Gut so dann kann
ich euch zeigen wo wir stehen geblieben sind also folgende Anwendung gibt es ich erzähle noch mal
oder oder wissen oder sind alle sind alle im Bilde um was es geht oder soll ich es nochmal
erklären ich glaube ich erkläre es nochmal oder? Dachte ich mir kann ja nicht jeder immer dabei
gewesen sein also wir bauen einen ein Webinterface ein ziemlich simples Webinterface. Chat ist weg
nee der Chat ist überhaupt nicht weg. Da unten ist er doch noch. Der Chat ist vielleicht ein
bisschen. Ne der passt doch eigentlich ganz gut. So kann man das machen weil hier ist immer die
letzte Message. Ach jetzt passt schon so ist okay. Also folgendes wir bauen ein Webinterface für
mein Home Assistant Plugin. Hat das Webinterface eine andere Funktion als die Home Assistant
Integration? Nein nein das wird ein Webinterface dafür. Oh nein der Scamtrain ist abgefahren jetzt
kann Besos nicht ins Weltall fliegen. Das ist ein Webinterface dafür das hat zwei Vorteile. Erstens
dass man das Standalone besser verwenden kann weil du halt das ordentlich konfigurieren kannst und
zweitens kommt die Home Assistant Konfiguration Seite nicht mit den Options klar. Zum Beispiel
kann ich dort nicht mehrere Accounts für unterschiedliche Hersteller anlegen. Das unterstützt
das einfach nicht. Oder ich müsste anfangen mit Account underscore 1 und Account underscore 2 aber ich
weiß ja nicht welche und wie viele die Leute haben. Zumal das ja auch gepaart werden muss mit Region
und Hersteller. Das das funktioniert nicht so richtig und außerdem habe ich Bock mal ein bisschen
Frontendstells zu machen wieder. So also was wir jetzt was wir jetzt gemacht haben. Warum hängt das
eigentlich so krass da zusammen? Das muss ich gerade mal gerade mal ganz kurz ein bisschen hübsch
machen. Also warum warum ist hier so viel Abstand dazwischen? Warum ist das so viel Abstand
dazwischen? Sollte da so viel Abstand? Daran liegt es nicht. An was liegt das mit dem Abstand? Senior
High IQ JavaScript Engineer am Start. Warum ist hier so viel Abstand dazwischen? Ah okay schon
besser. Und jetzt machen wir noch sowas wie ja sowas. So ist es jetzt glaube ich besser. Haben
wir hier auch. Haben wir hier auch. Okay gut. Mal kurz das anpassen dass das einheitlich ist. Ah ne
habe ich auch MX4. Okay gut. Also folgendes was man hier machen kann ist. Ich lösche ich lösche
mal ein bisschen was. Kann man löschen. Wobei hinzufügen geht ja noch nicht. Vielleicht sollte
ich nicht so viel löschen. Aber ich lösche mal ein bisschen was dass man was sieht. Also man kann
jetzt über das Webinterface. Alter wie viele Autos habe ich denn hier angelegt? Beziehungsweise wie
viele Accounts habe ich angelegt? Das ist ein Webinterface um die Home Assistant Integration
die ich hier gebaut habe besser zu konfigurieren. Und zwar was man damit machen kann ist. Ich will
es euch gar nicht großartig zeigen. Das reicht ja eigentlich. Das kurze Überblick. Da geht es ja
heute nicht drum. Kann man Informationen von seinem Elektroauto abfragen. Ja da kann man zum
Beispiel so Sachen machen wie aktuelle Batterieladung. Wie viel Reichweite das Auto denkt
das mit der Batterieladung schafft. Kilometerzähler. Bis man in die Batterie. Bis man nicht in die
Werkstatt muss. Batterieladeprozent. Man kann theoretisch auch das Licht darüber einschalten
wenn es das Auto unterstützt. Letztes Fahrtenlock. Man kann den Standort auslesen. Und man kann
Reifendruck und sowas. Also alles was die Hersteller API ungefähr hergibt kann man darüber
auslesen. So und wenn man das besser konfigurieren kann gibt es jetzt ein Webinterface für. Und eine
der Sachen. Also das wird ein super minimalistisches simples Webinterface. Aber das Schöne ist ich bin
ja auch nicht der krasse Javascript Checker. So und es gibt im Prinzip eigentlich nur zwei
Seiten. Okay drei Seiten wird es vielleicht geben. Es gibt eine Übersicht Seite. Da sieht man alle
seine Accounts die aktuell eingerichtet sind und wie viele Autos sich in den Accounts befinden.
Realistisch betrachtet bei den meisten Leuten wird das ein Account sein oder zwei Accounts mit
jeweils einem Auto drin. Also die wenigsten Leute werden wahrscheinlich einen Jeep. Keine Ahnung
drei Jeeps und fünf Fiats haben oder sowas. Geringverdiener aus dem Weg hier. So und dann
gibt es noch ein zweites Menü. Eine zweite Seite. Wenn ihr auf Plus klickt. Das ist übrigens auch
hässlich gemacht wie dieser Plus Button da hängt. Wenn man hier auf Plus klickt. Dann gibt es einen
Dialog wo man seinen Account hinzufügen kann. Da haben wir gestern aufgehört. Das sieht auch ein
bisschen hässlich aus. Da waren wir gerade dabei. Das erste sieht schon ein bisschen besser aus.
Ja kann man kann man hier eintippen bla bla bla bla bla bla. Dann klickt man auf Login und dann
checkt ob das Login geht und dann kann man es hinzufügen. Und dann gibt es noch ein Settings
Dialog. Den haben wir aber noch gar nicht gemacht. Heute bauen wir mal diesen Account
Einrichtungsassistent. Fertig oder weiter. So und natürlich das Allerwichtigste. Es gibt noch
einen Slider. Damit man zwischen Dark und Light Theme umschalten kann. Essenziell wichtig. Ohne
geht es natürlich gar nicht. Seid ihr bei mir oder? Also ohne ist nicht nicht machbar. Da machen wir
jetzt noch ein bisschen Abstand oben. Sonst sieht es nämlich gerade so kacke aus. Das ist der Flash
Bang Button. Genau so und ich habe mir gedacht das ist alles ziemlich Quick und Dirty wie wir
das hier gelöst haben. Ich mache mal den Krempel zu, dass ich wieder ein bisschen Überblick habe.
Wir werden das jetzt tatsächlich mal etwas ordentlich machen und wir bauen jetzt so wie
man Svelte eigentlich benutzen sollte. Ich muss mich da auch mal ein bisschen dran gewöhnen. Ein
paar Komponenten draus für diesen für diesen Versat. Zum Beispiel haben wir hier. Guck mal
ich checke jetzt schon nicht was hier passiert. Also zum Beispiel haben wir hier verschiedene
Inputs mit einem Label. Inputs und wir checken ob das ein Passwort ist. Wenn es ein Passwort ist
gibt es hier so einen Button. Da kannst du anzeigen lassen ob du es quasi hiden willst
oder anzeigen willst. Im Prinzip Standard Kram. Nur das was wir selbst gebaut haben.
Das sollten wir mal in eine eigene Komponente auslagern. Ansonsten wird das hier zunehmend
unübersichtlich. Ich denke das machen wir heute. Das ein bisschen zu verkomponentisieren. Und ich
habe noch zwei weitere Fifeld Ideen was wir machen. Da bin ich mal gespannt ob ich das
hinkriege. Das ist tatsächlich gar nicht so einfach. Und zwar hier im zweiten Step muss man ja
noch den Refreshintervall angeben. Wie oft man abfragen möchte vom Hersteller und einen Pin. Ich
werde dafür zwei eigene Komponenten bauen. Einmal so ein Plus Minus Ding für den Refreshintervall
und einmal so einen Pin Input. So Pin Input sowas wie wie Chakra UI hat. Das werden wir aber selbst
bauen. Guck mal sowas hier Pin Input. Eins zwei drei vier. Sowas werden wir bauen. Ich bin mir
nicht sicher ob ich das auf die Reihe kriege. Oder ob wir da überhaupt Zeit für haben. Sowas werden wir
heute mal bauen. Aber vorher müssen wir das ganze mal auf die Schnelle etwas verkomponentisieren.
Weil ich blicke nicht mehr durch. So und ich würde vorschlagen wir machen folgendes. Wir fangen
ganz simpel an. Wir machen hier raus. Also das hier ist der Button für. Das ist das ist diese
Input diese Input Feld für User. Wir machen daraus einfach mal eine eigene Komponente. Ich
habe jetzt ich habe gelernt dass man das ist dass es dafür was gibt und zwar Extracts Welt
Component. Kann man sagen New Component. Das Ding heißt jetzt Text Input. Dann verschieben wir das
nach Lib. Und er hat alles mögliche mit kopiert was er nicht mit kopieren müsste. Okay so Text
Input. Was haben wir denn hier alles. So müssen wir jetzt hier Text Input. So dann lasst uns mal
kurz überlegen was brauchen wir denn dafür. Aktuell ist es einfach nur eins zu eins kopiert. Aber wir
müssen das jetzt ein bisschen ein bisschen ordentlich machen. Label kann so bleiben. Wobei
eigentlich sieht es ein bisschen bisschen sehr gestaucht aus. Lasst uns mal checken. Wenn ich
dann ein Diff draus mache. Wir schmeißen wir schmeißen den Klempel erst mal weg. Also Export
Let. So machen wir doch mal ein Label was man setzen kann in der Komponente. Also der Unterschied
zwischen dem wie wir es jetzt die ganze Zeit haben und wie wir es jetzt machen ist. Alter
jetzt habe ich es kaputt gemacht. Export. Ich zeige euch das gleich. Value. Brauchen wir noch.
Value. Dann kann man es weglassen. Plus. Machen wir noch Export. Error. Okay. Ich glaube jetzt soll es
wieder rendern. Rendert es jetzt. Okay nice. Also der Unterschied zu dem was wir vorher hatten ist.
Vorher. Guckt mal. Vorher hatten wir sowas hier. So ein riesen langes Ding. Was eigentlich eine
gewisse Logik hatte. In sich geschlossen. Und das ersetzen wir jetzt durch so eine Custom
Komponente. Custom Tag. Was wir ausgelagert haben. Hier rein. Da können wir dem Ding nämlich gleich
mal ein Label setzen. Das Label wird User. So. User. Und das schöne ist man kann das jetzt in
allen Formularen wiederverwenden. Ohne dass man das jedes Mal die halbe Seite copy pasten muss.
So. Text Input Label. Label wird nicht gesetzt. Warum ist das mit einem extra Diff. Das macht
überhaupt keinen Sinn. Diff. So. Hier kommt der Label Text rein. Und dann. Ja. Jetzt steht
nämlich auch User wieder da. Und dann probieren wir mal was. Und zwar wenn man dem Ding ein Padding
von 1 geben. Das sieht doch schon schicker aus. Das gefällt mir besser. So. So. Dann sollten wir
noch den Placeholder exportieren. Dass man den setzen kann. Placeholder ist das was hier innen
drin in so einem Input Feld steht. Weil man noch nichts eingegeben hat. Aber einfach Placeholder.
Ne. Ich weiß wie wir das machen. Six Head Time. Wir machen das so. Wir gucken. Wir machen Placeholder
nicht. Nicht in String. Wir machen Placeholder auf 0. Und dann gucken wir. Ist der Placeholder
gesetzt. Dann nehmen wir ihn. Ansonsten. Wie geht das jetzt. So. Ansonsten setzen wir da das Label
ein. So. Und dann. Und dann machen wir noch 2 Punkte. 3 Punkte dahinter. Sehr schick. So. Typ
Text ist richtig. Placeholder. Ne. Ich glaube. Ich glaube das war es. Ja. Das Input Event müssen
wir noch durchreichen. Ansonsten war es das eigentlich. So. Erste Komponente erstellt.
Siehst du. Es wird schon langsam ordentlicher. So. Was haben wir hier als nächstes. Jetzt kommt
unser Passwort Input. Ja. Übrigens jetzt hier. Nur dass man jetzt mal sieht. Was das für einen
Vorteil hat. Anstatt dass ich jetzt sowas hier copy pasten muss. Wenn ich es wieder verwenden will.
Kann ich jetzt einfach sowas hier machen. Hab 3 mal. Und kann das jetzt auch customisieren. So.
Keine Ahnung. User. E-Mail. Und Cute Chat. So. Da wird das alles direkt customisiert. So. Jetzt
wollen wir ein Passwort Input Punkt Welt machen. Heute ist ja richtig Progress angesagt. So. Label.
Das kopieren wir mal alles da rein. Sagen jetzt. Passwort Input. Richtig. Richtig. Pfeiffertime.
Ja. So. Da fehlt jetzt natürlich die Hälfte. Da kopieren wir uns mal was vom anderen Input.
Nämlich. Label. Value. Error. Placeholder. Klingt schon mal sinnig. Ja. Script. Label.
Also. Placeholder. Okay. Jetzt muss ich. Jetzt muss ich kurz. Kurz überlegen. Jetzt brauchen wir
noch eine Variable. Show Passwort. Die auf false steht. Standardmäßig. Ja. Wenn du was wissen willst.
Sag Bescheid. Aber. Das ist wahrscheinlich so ähnlich wie in der Schule. Wenn der Lehrer zwei
Stunden irgendwelche random Sachen erzählt hat. Und am Ende fragt er. Und habt ihr noch Fragen.
Und man denkt sich so. Ja. Alles. Ich habe nichts verstanden. Und der Lehrer dann sagt. Ja. Musst du
schon konkret fragen. Wir können das nicht alles nochmal machen. Ja. Heute ist Best Practice Stream.
Korrekt. Nicht Best Practice. Bestest Practice. Und Best Practice ist unter anderem auch keine
Kommentare und keine Tests zu programmieren. Weil das ist eh nur bloatend und kostet Zeit.
So. Label. Value. Error. Ich glaube das passt soweit. Wie bauen wir denn jetzt unser Passwortfeld
ordentlich um. Das das als Komponente funktioniert. So. Hier kommt nicht Passwort rein. Sondern hier
kommt Label rein. Und das wird auch ein Diff wie beim anderen. Und als Klasse kriegt das auch
ein Padding von 1. Input Error ist im Prinzip genau das gleiche wie beim anderen. Das können wir auch
kopieren. Type. Show Passwort. Text. Ja. Okay. Das. Das brauchen wir noch. Button. Ja. Das müssen
wir jetzt nur noch importieren. Icon. Eye off. Icon. Ear off. Nein nein. Eye. Eye off. Nicht das
Ohr aus. Warum steht jetzt da oben drüber. Warum steht da nichts oben drüber. Das Label. Ist das
Label nicht gesetzt. Ach ne. Das Label ist nicht gesetzt. Ja. Passwort. Zack. Haben wir das Label
auch gesetzt. Dann kopieren wir uns von unserem Text Input mal diesen Placeholder Krempel. Theoretisch
könnte man wahrscheinlich auch irgendwie das eine auf dem anderen aufsetzen lassen. Aber da bin ich
gerade zu PP dafür. So. Placeholder haben wir auch. Auf was für ein Skill Level würdest du dieses
Projekt schätzen. Keine Ahnung. Also ich würde. Okay. Lass mal überlegen. Also Moment. Das muss
man in zwei Sachen aufsplitten. Die Backend Geschichte mit der Fiat API und dem ganzen
Krempel. Das würde ich sagen ist gar nicht so simpel. Siehst ja auch das ist ein bisschen. Das
ist ein bisschen komplexer hier. Werden auch einige recht bekannte Libraries für verwendet
und da passiert schon ein bisschen was drin. Also ich würde sagen das Backend Projekt ist
aber auch noch überschaubar. Also ich würde. Okay. Okay. Sagen wir es mal. Machen wir das.
Machen wir das mal in fünf Kategorien. Ja. Machen wir irgendwie 1 2 3 4 5. So. 1 ist.
Sag mal so. Starter Projekt. So wenn man ganz. Nenn es mal. Starter Projekt. So. Projekt. So.
2 ist quasi. Ja. Übung. So. Oder wie nennen wir es da mal. 3 ist Mitte. So. 4 ist. Also
hier ist Advanced. Und das hier ist keine Ahnung. Expert oder so was. Nennen wir es mal so.
Was sagen wir. Nennen wir es mal Einsteiger. Okay. Nennen wir es mal Noob Starter. Einsteiger
Mittel Advanced Expert. So. Also ich würde sagen. Das ist nicht Expert. Das ist Five Head. Genau.
So. Also ich würde sagen. Das Backend ist Mittel. Also das das das die Sharp Backend ist Mittel.
Das ist nicht wirklich Advanced. Und auch nicht weit entfernt von Expert zu sein. Und das Frontend
würde ich sagen ist so 2,5 vielleicht. Das Frontend tendiert eher. Tendiert eher. Okay.
Machen wir noch sechstens gleich. Five Head. Das ist quasi außer Kategorie. Also so würde ich das
ungefähr einstellen. Nicht wirklich Einsteiger. Sag mal. Machen wir es anders. Machen wir es doch.
Machen wir es so. Das Backend ist Advanced. Das Frontend. Das Frontend ist eher so Mittel. Okay.
Nicht wirklich kompliziert. Also gut machbar. Auch für jemanden der neu ist und ein bisschen
Zeit rein investiert. So. Chat würdet ihr mir. Würdet ihr mir da ungefähr so zustimmen. Gerade
die die jetzt ein paar Streams dabei sind. Die vielleicht auch schon das Programmieren. Das
Backend Programmieren mitgekriegt haben. Also ich würde sagen. So ungefähr. So. Kommt. Könnte
das sein. Ich meine. Wie gesagt. Ich bin nicht der krasseste Frontend Checker. Frontend auch noch
eins hoch. Ja. Okay. Dann machen wir das Backend aber noch wieder eins runter. Weil ich will.
Er wollte einfach demonstrieren dass da schon ein bisschen Unterschied dazwischen ist. Ja so. Also
es ist. Es ist durchaus machbar. Auch für jemand der neu ist. Wenn er ein bisschen Zeit rein
investiert. Ich habe ja auch keine super mega Ahnung jetzt von Svelte und Frontend Sachen.
Gerade gerade so Komponenten erstellen kann man noch viel viel viel viel besser machen. Oh was
denn hier los. Mein mein Button ist nicht mehr richtig zentriert. Jetzt wieder. Jetzt wieder
richtig. Ich exportiere das Show Passwort nicht. Das ist nur intern. Deswegen ist auch kein Export
davor. So jetzt haben wir eine extra Komponente. Dann war die. Da war die. Da war die erste
Einschätzung vielleicht doch besser. So. Das sieht doch jetzt eigentlich ganz gut aus. Ach so. Das
Input. Das Input binden müssen wir noch machen. A bind value. Oh. Ah ne. Value. Was jetzt? What?
Type attribute cannot be dynamic if input uses two way. Oh. Das ist doof. Muss ich da jetzt ein
If drumherum machen? Muss ich das jetzt irgendwie copypasta machen? Warte mal. Muss ich das jetzt
copypasta machen? Lässt sich das nicht irgendwie anderweitig lösen? So dann sagen wir nämlich hier
If show Passwort. Dann ist das Type Text. Ansonsten ist das Type Passwort. Was denn jetzt? Label not
open. Ja was machst du denn da auch? Okay jetzt funktioniert es wieder. Und das klappt auch. Ja
okay. Meinetwegen. Soll mir recht sein. Ja gut. Meinetwegen. Passt. Alles gut. Dann können wir das
so lassen. Ich würde sagen das reicht. Mehr müssen wir hier an der Stelle eigentlich gar nicht machen.
Ich denke. Ich denke mal es passt alles. Wir können mal ausprobieren ob das Error Handling noch ordentlich
funktioniert. Tun wir mal so als würde das Login nicht klappen. Wir machen übrigens. Ich habe heute
morgen ein Video gesehen. Javascript Enums. Wir haben kein Type Script. Aber es gibt wohl. Es gibt wohl
Trick 17 für Javascript. Das probieren wir gleich mal aus. So mal gucken ob das Error Handling noch
funktioniert. Guckt mal. Habt ihr gesehen wie viel kürzer das ganze ist? Mein gesamter erster Step ist
jetzt keine halbe Seite mehr lang. Sondern nur noch zwei Zeilen. Also viel viel besser. So machen wir hier
Error. Ist Login gleich gleich Error. Okay gucken wir mal ob das noch funktioniert. Oh. Der Login Button
funktioniert schon mal nett. Der Login Button funktioniert nicht. Weil. Ah. Weil ich den Value. Weil ich
keine Values gebindet habe. Okay. Na gut. Bind Value User. Ups. Ne. Moment. Das ist ganz falsch wo ich hier bin.
Bind Value User. Bind Value Password. Heißt das gar nicht Passwort? Habe ich hier gar nicht. Warum denn sowas?
Okay. Mal gucken ob das mit dem Error. Mit der Error Anzeige. Ja. Das ist noch nicht so ganz. So mal gucken ob das
mit der Error Anzeige richtig funktioniert. Der Button ist den Passwort Input. Doch. Der soll da sein. Wie machst
du das Design? Farben, Fonts, Layouts. Das ist Skeleton UI. Für die Farben. Das ist das hier. Guck. Kannst
hier verschiedene. Aber ich muss euch ehrlich sagen. Ich weiß nicht ob ich weiter Skeleton UI verwende. Es trifft
nicht. Also ich finde die Funktion ganz nice. Zumindest einige die dabei sind. Aber ein Toast für einen Error. Das ist
eine gute Idee. Das schreibe ich mal auf. Aber ich muss sagen. Ich feier die Optik nicht so ganz. Also wahrscheinlich
werde ich Skeleton UI rausschmeißen. Nee. Carbon Components habe ich mir auch mal angeguckt. Das ist das Zeug von
IBM. Das habe ich mir auch mal angeguckt. Das hat mir nicht so richtig gefallen. Was ich ja von der Idee hier ganz
cool finde ist. Das ist jetzt aber ganz neu. Das sind ungestylte Svelte Komponenten. Ja. Mal gucken. Ich bleibe
jetzt erst mal dabei. Sonst kriege ich nämlich gar nichts auf die Reihe. Also das Error Anzeigen funktioniert
noch. Nice. So. Bind Error können wir hier unten auch machen. Weil es kann ja auch sein dass das Passwort falsch ist
wenn das Login nicht funktioniert hat. So. Wunderbar. Sehr schön. So. Weiter geht's. Ja. Wir sollten vielleicht
noch einstellen dass sich das Ganze resetet. Function. Habe ich das Input Event durchgereicht hier. In weiser
Voraussicht. Bei dem einen habe ich es gemacht. Beim anderen nicht. On Input. Change. On Input. Wir resetten das Feld mal.
Weil. On Input. So. Weil. Guckt mal. Wenn jetzt ein Error kommt. Und ich ändere hier was. Dann resetet es sich wieder.
Soll es ja auch. Alles andere wäre ja blöd. Guck. Login hat nicht geklappt. Ich ändere es. Ich muss ja wieder versuchen
mich einzuloggen. Ja. So ist es auf jeden Fall besser. Gut. So. Dann würde ich sagen. Passt das soweit. Ich denke das können wir
erst mal so lassen. Dann geht es weiter zum nächsten Step. Hier gibt man sein Passwort ein. Und dann hat das Ganze
funktioniert. Und dann geht es weiter zum nächsten Step. Der sieht noch ziemlich kaputt aus. Den werden wir jetzt auch
mal ordentlich machen. Ich habe mir folgendes überlegt. Leute. Wir machen das. Wir machen das mal. Wir machen das wieder
weg. Also gibt kein Range Slider mehr. Oder anderes. Anderen Blödsinn. Auch kein Pin. Machen das einfach weg. Brauche ich
überhaupt noch eine Form. Oder geht das. Geht das. Ich brauche keine Form mehr. Ja. Geht auch voll klar. Ja. Doch. Ist doch
oder zwei. Zwei oder vier. Vollkommen in Ordnung. So. Und das hier. Das schmeißt. Das schmeißen wir jetzt alles weg.
So. Jetzt ist. Jetzt ist Fife Time angesagt. Leute. Was ich. Was ich gerne machen würde ist folgendes. Nachdem man sein User und
Passwort eingegeben hat. Und dann zum nächsten Step kommt. Ich habe übrigens. Mir ist gerade noch was anderes eingefallen.
Leute. Wir nennen das nicht Login. Sondern wir nennen das einfach Test. Weil das ist ja genau das was passiert. Weil das ist ja
genau das was passiert. Ich teste das Login. Und wenn das funktioniert. Geht es zum nächsten Step. Und im nächsten Step brauche ich
zwei Sachen. Ich mache das hier mal oben. Eins weiter. Das wir immer gleich die Anzeige haben. Zwei Sachen. Macht man nicht aus dem
Login Zeug noch eine separate Komponente. Aus was denn. Du meinst hier unten die Buttons. Ja mal gucken. Man muss es ja nicht
übertreiben. Wir brauchen eh noch ein paar extra Komponenten. Und zwar. Was ich gerne hätte ist. Also ich. Nur mal so exemplarisch.
Ja. Ich hätte gerne hier einmal. Einen. Ja. Refresh. Intervall. Und einmal. Eine eine Pin Eingabe. Weil das sind noch die zwei
Optionen die man braucht für das Auto. Und den Refresh Intervall würde ich gerne selbst was bauen. Und zwar was was ungefähr
aussieht wie. Ja wie man das von anderen Webseiten kennt. Ich weiß nicht. Input Number. Plus Minus. Sowas was man auch im Smartphone
gescheit bedienen kann. Weiß ich ob es ein schönes. Plus Minus Input Counter. Weiß ich ob das sowas in der Richtung. Ja sowas. Sowas in der
Richtung. Halt. Was ein bisschen besser funktioniert. Sowas in der Richtung würde ich gerne bauen. Und was wo man natürlich auch so noch
reintippen kann. Sowas in der Richtung würde ich gerne bauen. Und ich würde gern. Das was ich euch gerade schon gezeigt habe. Pin Input. Sowas hier
bauen. Dass man seine Pin eingeben kann. Mit was wollen wir anfangen. Pin Input oder Refresh Counter Intervall. Könnt ihr euch aussuchen. Pin. Ich glaube Pin ist das
schwierigere von beiden. Pin. Ok. Na gut wenn wir Pin anfangen. Ich glaube Pin ist. Pinput. Das ist ein guter Name. Pinput. Ne ne ne. Pin. Ne. Input. So müsste man das
fast schon schreiben dann. Wir nennen es Pin Input. Da weiß man was man will. So. Da bin ich jetzt allerdings wirklich ein bisschen planlos wie man
das gescheit macht. Pin. Ups. Pin. Input. Also. Sowas habe ich doch wirklich nie gebaut. Als erstes würde ich sagen. Braucht man für einen Pin Input einen Input. Und zwar nicht nur
einen Input. Wir haben. Lasst uns mal kurz. Lasst uns mal kurz ein bisschen spicken. Wie haben die das denn gemacht. Ah die machen vier Inputfelder. Ok. Easy. Das mache ich auch.
Vier Inputfelder. Easy. Easy. Easy. So. Also. Dann machen wir das doch mal. Also machen wir mal Diff. Die Musik ist zu laut oder? Ne passt eigentlich ganz gut. Halt typische Wupp Wupp Wupp Musik.
Ey du. So wir brauchen wieder so eine Art Label. So viel weiß ich schon mal. Da haben wir wieder eins. Und dann das Pin. So Pin. Und darunter brauchen wir jetzt mehrere Inputfelder. Hat das jemand ein Mask? Ich dachte die Oma vom Zuckerberg hat es untersagt. Oder wie war das nochmal?
So. Also wir brauchen einen Input. Input Typ Number gibt es. Ja. Das dumme ist der Standard Input sieht halt mega hässlich aus. Ne. Und ist Smartphone mäßig nicht gut zu bedienen. Wobei eigentlich schon. Aber das mit diesen Dingern da. Das ist. Ne. Ne. Ne. Ne.
Also wir brauchen Input Type Number. Der kriegt als Class Input, dass er ordentlich gestylt aussieht. Der kriegt allerdings Rounded None. Weil wir wollen das. Oder Rounded. Rounded. Rounded. Ah. Irgendwie. Ne. Wir machen None. Weil da müssen links und rechts Knöpfe hin.
So. Erste Problem bei dem Input ist. Wie krieg ich diese hä... Also wir brauchen den Input ja eh vier mal. So. Und. Und das machen wir flex. Ja. Ja. Ok. Leute. Guck mal. Wir haben schon mal vier Boxen für eine Pin Eingabe. Nur dass der Rest noch nicht funktioniert.
Wie kriegt man dieses hässliche Zeug da Buttons weg? Hier. Input Number CSS Hide Arrows. Das klingt doch gut. Can I hide the HTML von 2010? Wird schlecht. Ok. Probieren wir mal an ob das funktioniert. Style. Nice. Weg sind sie.
Da machen wir Appearance raus. Das ist mittlerweile bestimmt Standard. Das ist bestimmt auch Standard. Ok. Nice. So. Wir haben Input Felder. Also nur mal zur Erinnerung. Was da am Ende rauskommen soll. Ist sowas. Oh shit. Das handelt ja auch Back Events richtig. Oh. Das wird kompliziert. Also sowas will ich haben. Für Pin Input.
Also ein bisschen sowas wie Paypal hat. Puh. Ok. Machen wir erstmal Flex Gap 2 oder 1 oder so. Ein bisschen Abstand dazwischen. Oh. Fuck. Alter. Wie machen wir das gescheit?
Das sieht ja erstmal nicht so falsch aus. Aber von der Funktionalität her ist ja da gar nichts gegeben bisher. Ok. Also wir brauchen auf jeden Fall Javascript Zeug. Ok. Wir machen Export. Ne. Export. Alter. Export. Nehmen wir bloß so Autocomplete, damit ich tippen kann. Export. Let.
Und das heißt jetzt irgendwie sowas wie Count oder sowas. Count. Standardmäßig 4. Oh. Jetzt brauchen wir nämlich eine Schleife, die diese Inputs erzeugt, weil ich keinen Bock habe, dass ich 4 mal einen Input editieren muss. Also. Snippet. Each. Achso.
Wie macht man eine Vorschleife in Svelte? Svelte. Count. For. Loop. Ah. Das haben wir schon ein paar mal angucken müssen. Each. 3. Is. Each. Length. Length. 3. Ok. Das ist die ernsthafte Syntax, auf die wäre ich im Leben nicht gekommen.
Ok. Immer noch das gleiche. Funktioniert. Nice. So. Wir können schon mal eins festlegen. Minimum ist 0 und Maximum ist 9, weil wir wollen ja nur ein Zeichen anzeigen. Achso. Ah. Mist. Das ist doch kacke. Der normale Input wird nicht beschränkt. Kann man das einstellen, dass man nicht mehr eintippen kann? Oder muss ich das jetzt mit Javascript machen?
Also hier über das normale hoch und runter geht das maximal 0 und 9. Aber hier kann ich eintippen, was ich will. Und auch wenn ich Fokus raus mache. Ok. Das ist dumm. Kann man das irgendwie regexen oder sowas? Oder validaten? Ich glaube, das muss man mit Javascript machen. Kack Javascript. Javascript.
Ok. Lasst mal. Lasst mal in uns gehen. Leute. Five Header Modus aktivieren. Die Kraft aller Prime Subs muss jetzt gebündelt werden. Das mir einfällt, wie man das machen könnte. Max Length? Gibt es sowas? Oh. Was ist denn das? Eins? Ne. Das seht ihr nicht. Was macht denn das? Nö. Ist dem vollkommen egal.
Ich glaube, dass das nur geht, wenn es Text ist. Ja. Wobei. Leute. Vielleicht machen wir dann auch nicht Input. Aber Max Length 1 will ich gar nicht. Wobei. Doch. Will ich haben. Aber jetzt ist es nicht Number. Jetzt geht der Arrow hoch und runter nicht mehr.
Lasst uns mal kurz abgucken. Geht hier Arrow hoch und runter? Ne. Hier geht auch nicht Arrow hoch und runter. Oh. Mein Chat ist übrigens kaputt. Nicht wundern, wenn ich gerade nicht reingucke. Mir ist gerade der Chat abgekackt. Gebetsbruder. Dankeschön für den Sub. Habe ich übersehen.
Wir brauchen sowas wie On Input. Ich nenne es einfach auch Input, weil dann wird es ein bisschen kürzer und dann kriegen wir das Event. Input. Ist doch nicht kürzer. Dann kann ich es auch so nennen.
Pattern. Kannst du die Zahlen auch mittig zentrieren? Ja. Pattern. Was ist das? Input Pattern. Try it yourself. Aber ich kann trotzdem was eingeben, auch was hier nicht drin ist. HTML. Form with an Input that can only contain 3 letters. Das funktioniert ja nicht.
Ach, das wird nur beim Sub mit? Ja, okay. Dann ist es blödsinnig. Dann brauchen wir das nicht. Und das brauchen wir dann eigentlich auch nicht, wenn wir das auf Text lassen. Okay, ist aber schon mal gut, dass man nicht mehr entern kann.
Okay, Fiver Time, Leute. On Input. Was kriege ich denn hier überhaupt für ein Event rein? Ein Input Event. Ja, wer hätte das gedacht? Leute, hat irgendjemand von euch planen, wie diese JS Docs Annotation geht? Wie ist da die richtige?
Hier, das meine ich. Nix TypeScript. Damit ich ein bisschen Autocomplete habe. Das ist kein String, das ist ein Input Event. Okay, jetzt habe ich nämlich ordentliches Autocomplete dabei.
Nee, da gibt es kein Autocomplete. Guck, wenn ich das wegmache, hast du kein Autocomplete, weil der weiß doch gar nicht, was das ist. Doch, doch, es gibt TypeScript. So, das ist ein Input Event. Input Event Data 1. Und was steht da sonst noch so drin? Genau, fehlen noch Prime Subs für TypeScript.
Nicht genug IQ vorhanden. Target ist schon mal ganz interessant. Und Data, okay. Element ist E.Target. Dann, ähm, Data ist E.Target. Nee, äh, E. Was war das? Data?
Und dann bräuchten wir noch den Value. Gibt es den Value irgendwie vom Element? Hat das einen Value? Ah ja, hier. Eins, guck, zwei, drei. Okay, okay, okay, ja. Ich bin gespannt, ob das funktioniert.
So, also, lass mal überlegen. Also, was ich machen will ist, sobald hier was eingetippt wird, soll es weiterspringen zum nächsten. So, das müssten wir doch raus, das müssten wir doch hinkriegen mit sowas wie Element. Wie macht man eigentlich Inline Annotations?
HTML Element. Oder macht man das oben drüber? Ich will ein bisschen Autocomplete. Und das ohne TypeScript. Ich muss jetzt gucken, ob das kein Buchstabe ist. Ja, das muss ich tatsächlich auch gucken. Du hast vollkommen recht, ja.
Geht das auch so? Nee, das geht nicht. Das geht anscheinend wirklich nur. Aber es geht doch bestimmt One Line, ha? Muss ich das jetzt ernsthaft da oben drüber machen? Dass ich sagen kann, dass da ist ein HTML Element? Nee. Boah, keine Ahnung.
Oh je, jetzt hab ich, ich hab's, ich hab's, ach nee, da unten ist das Problem. Hab ich jetzt, hab ich jetzt? Ach ja. Scheiß drauf. Lass es weg, lass es weg. Also, ähm, ich muss jetzt gucken, sowas wie Element. So, ähm, HTML Element Siblings.
Also ein, das nächste Element auf gleicher logischer Höhe. Hier. Next Sibling. Funzt das so? Okay, funzt. Und jetzt? Fokus. Ha! Easy!
Okay, das ist aber, glaube ich, bei weitem noch nicht alles. Ich glaube, ganz, ganz so einfach ist es nicht. Was ist, wenn du hinten anfängst, dann hast du Pech? Wenn du, wenn du hinten anfängst, GachiBuzzStyle, dann geht's halt, nee, das kann ja schlecht von, von nach vorne gehen dann. Guck mal, wie ist das, wie ist das, wenn man hier hinten anfängt? Dann hat man auch Pech. Ja.
Okay, das, das find ich schon mal cool, das hat was. So, also wir müssen natürlich noch, äh, einmal hier ein Fragezeichen hinmachen, dass es keinen Error mehr wirft. 1, 2, 3, 4. Nice. Das ist gut, das ist gut. So, und jetzt müssen wir den... Ah! Oh! Wenn ich hier was lösche, geht's auch eins weiter.
Okay, ich muss auf jeden Fall gucken. Ich muss auf jeden Fall checken, ob das kein Backspace oder so, ne, wobei ist hier vielleicht einfach kein Data drin, kann das sein? Moment hier, Backspace, dann ist Data null. Okay, dann machen wir das doch ganz einfach.
If, äh, if not Data, dann Return. Bam. So. Nice. Okay, das funktioniert. Ja, und wenn man löscht, muss es eins nach vorne. Jetzt wird's, jetzt wird's kompliziert. Wenn man löscht, muss es eins nach vorne. Es muss aber auch eins nach vorne, wenn man in einem leeren Feld tippt und ich glaube, dann gibt es kein Input-Event.
Guckt mal, wenn ich hier in einem leeren Feld nach links tippe, sollte es auch nach links springen, aber es gibt, ja, das dachte ich mir, es gibt kein Input-Event, weil ja nichts eingegeben wurde.
Das heißt, ich kann das hier drinnen nicht machen, sondern ich muss noch On-Key-Down oder sowas machen. So, was gibt's hier für ein Event? Keyboard-Event, okay, da weiß ich auch, wie das heißt. Keyboard-Event.
So, und da muss ich jetzt gucken. Oh, jetzt wird's, jetzt wird's eklig. So, Backspace muss ich, muss ich checken. Also, if, äh, key, gleich, gleich, Backspace. So, und wenn das Backspace ist, dann muss ich das Umgedrehte hiervon machen.
Moment, das Umgedrehte davon. Ich rate jetzt einfach mal, es heißt Element Prif, Prif, Prif-Sibling-Fokus. Ne, shit, Moment. Ach so, hab ich gar nicht zugewiesen. Ne, äh, wie heißt denn das?
Ja, genau. Ausgeschrieben. Next. Previous. Mein Gott, ey, das, ja, da hätte man drauf kommen können. Easy, guck mal hier. Äh, ah, ja, weil es das immer macht.
Moment, Moment, ich muss noch gucken, ich muss noch gucken, ob das auch wirklich leer ist. Also, machen wir mal sowas hier. Value. Machen wir nochmal sowas hier, wenn es, nur wenn Value leer ist, machen wir das. Nice.
Ha, guck mal da. Easy. Sag ich doch. High-Performer-Mindset-Fivehead. Und im ersten Fall Backspace, dann bleibt er da, ja, ist okay. Ja, die Zahl können wir noch zentrieren, das sollten wir wirklich machen. Ähm, nur wie? Kann man da einfach sagen Text-Center?
Oh ja, easy, nice. Ja, okay, null, null ist null, hier, null funktioniert genauso. Was hier gebaut wird, ein, ein, eine Input, ein Input-Feld gerade. Ich mein, allzu schön sieht es zwar nett aus, aber schon mal ganz okay.
Hast du nicht Mobile-Probleme, weil er nicht nur die Zahlen anzeigt? Ach, du meinst, weil das nicht auf Nummer steht, gibt es auf Mobile Probleme? Ja, das kann sein. Okay, Mobile-Input-Only-Numbers.
Nee, nee, nee, nee, Input-Number will ich nicht. Weil, guck mal, Input-Number, hast du das Problem, du kannst beliebig viele eingeben. Was sagt, wenn es Input-Text ist, dann kannst du es limitieren, dass du nur eins maximal an eine Stelle eingeben kannst. Oder gibt es das noch?
Max Length ignored for Input-Number. Ja, nee, das bringt nichts. Das bringt nichts. Guck, wir haben hier Min, Max, du kannst immer mehr eingeben. Das Einzige, das sinnvoll zu beschränken, ist Text. Aber gibt es vielleicht die Möglichkeit, wie haben die das hier denn gemacht? Lass uns doch mal abgucken. Wir können doch einfach abgucken, easy.
Type. Type Telefonnummer? Okay, das ist jetzt aber richtig, richtig Trick 17. Ah, damit funzt, nice. Alter, das ist ja massive big brain. Telefonnummer. Okay. Ja, dann funzt das doch schon mal richtig gut hier, guckt euch das mal an.
Äh, komm, macht euch mal keine Gedanken. Das ist HTML und Javascript und so, da muss ich mir keine großen Gedanken machen. Funktioniert das mit Sternchen und, oh shit. Fuck! Okay, das muss ich, das muss ich jetzt im Javascript-Input irgendwie abfangen. Input, Type, was? Was, Input-Mode? Moment, was ist Input-Mode? Moment, Type? Hä?
Also, die haben Input-Mode, Numeric, Type Telefon. Nein, Number geht nicht. Ähm, was macht denn, was macht das überhaupt? Is Attribute that hints at the type of data that might be entered by the user. Ah, aber Moment, das weiß, das check ich nicht. Ich kann sagen, Typ. Ach, Moment.
Warte mal, Leute, ich bin, ich bin verwirrt. Moment, Moment. Warum, du kannst mit dem Pattern, ja, aber das wird nur gecheckt bei Submit. Type, Type Tel Input. Aber warum kann ich A, B, C und sowas eingeben bei der Telefonnummer? Type Text Input? Ne, ne, ne. Numeric und Input, ne, ich glaube.
Okay, Leute, wir müssen das, wir müssen das einfach filtern. Ich schreibe da nicht Nummer rein, ich mach das, ich schreibe das so, das ist okay. So, gute, beste, beste Kombi überhaupt. So, ich muss das, ich muss das im Input, ich muss das im Input rausfiltern. So, ganz, ganz einfach. Oder, was heißt ganz einfach? Also, ich, ich muss jetzt am besten direkt rausfiltern.
Hier schon, hier schon am besten direkt rausfiltern.
If, äh, E.key, weil manche Telefonnummer mit Buchstaben abgekürzt werden. Alter, die Amis, man.
Regex, äh, ist das Match? Ja, Match.
Oh Gott, Javascript, so ging das, gell? So, also, ich will jetzt checken, ob es nur Digits sind. Also, ein Digit, sonst nix. Startet und direkt Ende?
Ne, Moment, ganz einfach. Ne, Moment, wenn es, wenn es irgendwas anderes als Digits sind, dann will ich prevent default, dann soll überhaupt nix passieren. So, nice, Funst.
Ach, shit, jetzt geht ja Backspace nicht mehr. Probier mal Pin Input, gibt es sowas? Pin? Ne. Pin? Ne, gibt es beides nicht.
Macht das doch im Input und setzt das Inputfeld wieder leer? Das könnten wir machen, ja.
Ne, Moment, ich will das ja nicht leersetzen, ich will das den bestehenden, ich will, ne, ne, ne, das geht nicht. Ich will, dass das bestehende drin stehen bleibt, wenn ich da jetzt was anderes, wobei ich kann ja eh nicht mehr als eins eintippen.
Okay, ne, ne, Leute, ich seh da auch grad noch ein anderes Problem. Wie ist denn das hier, wie ist denn das hier mit dem Input?
Wenn ich hier jetzt reinklicke, ah, guck mal, man kann das überschreiben. Ich kann aktuell nix überschreiben.
Da müssen wir auch noch dafür sorgen, dass man das, dass man das irgendwie, ich wüsste jetzt aber nicht, wie man das, wie man das gescheit machen soll.
Moment, doch, ich weiß, wie man das machen soll. Wir setzen, Moment, wir setzen das Value auf Data.
So. Ne. Ach, jetzt kann ich nicht mehr eintippen, weil Max Length 1 ist.
Ja, ne, das ist doof, siehste? Dann kann ich das doch so gar nicht benutzen.
Aber so funzt, ah, das ist gut, das ist gut so. Okay, nice. Und alles andere lässt sich halt einfach nicht eintippen.
Ja, ist doch okay. Ah, nice, guck mal hier. Gut, gut. Ja, das, das gefällt mir so.
So, okay, das Backspace, Backspace drücken funktioniert jetzt nicht. Kann ich das nicht einfach da vormachen und dann sagen Return?
Ja, easy. Ja, Leute, also, ich würde sagen, das ist es, oder? Viel mehr brauchen wir noch gar nicht.
Oh, Chat, wie sieht's mit Copy und Paste aus? Jetzt wird's advanced, guck mal. Ich copy-paste jetzt 5, 1, 7, 3. Meint ihr, das geht? Ne.
Natürlich nicht. Enter? Ne, Enter, Enter waren wir nicht. Arrow Keys, Arrow Keys könnten wir noch machen. Wie sieht es aus mit Arrow Keys und Env, das müssen wir noch.
Okay, Copy-Paste geht nicht. Warum geht Copy-Paste nicht? Weil das hier nicht drauf matcht.
So, dann würde ich sagen, wir machen einfach gar nichts. If, Modifier oder sowas, was? Get Modifier State. Da brauch ich die Referenz für. Get Modifier State.
Security Reasons, kein Kopf, sehr gut. Ich sehe, Chat, ihr habt von den Besten gelernt. Get Modifier State. Das ist für alle Mac-User, oder?
Meta-Key not supported. Komm, gab es da nicht sowas wie Alt-Key, genau. Alt-Key oder Control-Key? Dann machen wir einfach auch nichts, fertig.
So, bam, ah. Oh, shit. Jetzt geht Copy-Paste, aber Copy-Paste nicht richtig. Oh, shit. Mein Gott, warum muss das immer so kompliziert sein?
Okay, Copy-Paste support. Wie bekomme ich mit, ob es ein Copy-Paste-Event ist? Log, Copy-Paste, Keyboard-Event, V, jawoll.
Ne, da kriege ich aber nicht mit, ob es ein Copy-Paste-Event ist. Kriege ich das hier drin mit, ob es ein Copy-Paste-Event ist?
Insert from Paste, aber da kriege ich die Daten nicht, oder? Seht ihr irgendwo jetzt 5, 1, 7, 3? Gibt es ein extra Paste-Event oder sowas?
Ah, ja. Na dann, let's go. Paste-Event. On-Paste-Function. On-Paste. Dann loggen wir mal, was hier reinkommt jetzt.
Also ein Clipboard-Event ist das jetzt. So, so. Es ist ein Clipboard-Event. Was hat man denn auf Clipboard-Events so? Sowas wie Data vielleicht? Ah, Clipboard-Data. Okay.
Clipboard-Data. What? Was soll ich denn damit jetzt anfangen? Clipboard-Data. Files, Items? Ihr seht es nicht? Warum seht ihr es nicht? Ach, weil der Chat hier unten drüber ist. Ach so.
Chat, wir machen euch mal woanders hin, oder? Chat, ich mache euch mal hier oben hin. Ich glaube, heute seid ihr hier oben besser aufgehoben. Und Chico muss auch mal heute weg. Hier oben passiert ja eigentlich nichts. Da seht ihr meinen Browser-Header. Der ist uninteressant.
Okay. Clipboard-Data-Javascript. Ich brauche mal ein Guide, wie das funktioniert. Data-Transfer-Object. Cut, Paste. To obtain the data to be pasted from the paste, typically with a Get-Data-Format-Call. Das mag ich an den Mozilla-Docs. Die haben immer schöne Beispiele.
Da steht jetzt aber nichts von Clipboard. Was ist es? Clipboard-Data-Get-Data? Okay. Wie auch immer man da jetzt drauf kommt, aber ich glaube euch das. Tatsächlich ist es. Nice. Wie kommt man denn auf sowas? Das muss man wahrscheinlich einfach wissen, weil Javascript-Zeug einfach pfeift. J-Lo auch am Start.
So. So, jetzt will ich copy-pasten. Kann man so- Nein, wir gucken jetzt nicht ab. Wir gucken nicht ab. Wir machen das jetzt einfach so. Okay, ignorieren wir mal den Fakt, dass Leute auch was pasten können, was nicht Zahlen sind oder was, was länger ist.
Ich hab ne Idee. Leute, ich hab ne Idee. Und zwar, wir machen jetzt folgendes. Wir sagen, Prevent-Default, da passiert schon mal nichts. Ja, Regex können wir da machen. So, jetzt kann ich schon mal nichts pasten. Aber, jetzt machen wir ne Schleife, jetzt machen wir ne Schleife über jeden Charakter in Data.
So. Kunst? Okay. So, und jetzt sagen wir, wir brauchen noch das Element von E-Target. Morgen Arbeit. Ja, leider. Keck-Business. Wobei, ich würde eher sagen, Keck-Browse.
So. Okay. Also, jeder Charakter in dem String. So, und jetzt müssen wir erstmal den Charakter inserten in den ersten. Okay, lasst mal kurz checken. Okay, das funst schon mal. Äh, nee, das ist der letzte. Achso, weil er überschreibt ja immer. Ich muss es ja weitermachen. Okay. Okay, okay.
Das heißt, jetzt muss ich gucken. Next. Okay, das ging doch so. Next. Sibling. Fokus. Fast. Fast, Leute. Fast. Wir haben es fast geschafft. Es hätte fast funktioniert. Woran liegt das jetzt? Woran liegt denn das jetzt, dass der am... Oh, was ist das? Achso, weil das ein Fehler, weil das ein Error wirft.
Achso, ich muss ja checken, ob ich am Ende bin. Also, if. Ja, prevent default geht nicht, weil ich vorher einen Error habe. Ich muss checken, ob es das überhaupt gibt. Wenn es keinen next Sibling gibt, dann break.
Checken wir mal, ob es jetzt funst. Easy. First try. Easy. Leute, ich muss sagen, das war jetzt doch einfacher, als ich mir das vorgestellt habe. Ich meine, irgendwas wird garantiert noch nicht funktionieren. Was ist, wenn ich local host rein copy paste? Ja.
Ja, okay. Ach ja, stimmt. Ich muss doch irgendwie regexen, ob das... Hier, da. Regex. Regex stellt es. Checken wir einfach hier. If data not match, aber diesmal beliebig viele Buchstaben. Und dann prevent default und Schluss ist.
Ja, das geht nicht, aber das geht. Pog. Warum beliebig viele? Ne, weil es ja auch mehr als vier sein können. Guck mal, es können auch sechs sein oder so. Hier, du kannst hier angeben. Pin input count gleich fünf. Und dann hast du fünf inputs. Und guck mal, die funktionieren auch. Ist das nicht hyper agile?
Ich würde sagen, jetzt wird es Zeit für Daily Scrum, Leute. Oder 69 inputs. Okay, das sind vielleicht ein bisschen viele. Leute, das funktioniert erstaunlich gut. Das hätte ich nicht gedacht, dass das so problemlos geht. Das ist ja wirklich easy.
Sollte da nicht max length gleich count sein? Nö, warum? Mal angenommen, es pastet einer sowas hier rein. Dann macht er halt nur die ersten vier und dann ist egal. Ne, das finde ich gut. Das gefällt mir. Das ist Pog. Chat, Pog or not Pog?
Jetzt erstmal Termin mit den Kollegen und allen zeigen. Ja, let's go. Ich zeige euch meinen Pin input Feld. Trinken mache ich. Gut, passt. Können wir so lassen. Nice.
Superproduktive Day heute schon wieder gewesen. Das da unten brauchen wir jetzt ja nicht. Tests? Quatsch. Guck mal, das Schöne ist, das ist obviously komplett bugfrei und erklärt sich selbst. Da braucht man auch keine Tests. Einfach bloated Tests zu schreiben. Erkennt jeder sofort kinderleicht, dass es keinerlei Bugs aufweisen kann.
True. Ja, ist einfach so. Wie holst du den Wert raus? Das ist in der Tat eine gute Frage, wie ich den Wert da raus bekomme. Zur Zeit bekomme ich den Wert gar nicht raus. Gut, ich meine, die einfachste Art und Weise ist, einfach die Inputs durchzugehen. Können wir zu null haben? Wie, zu null haben wir nicht mehr.
Das ist aber nicht das Original zu null. Ich nehme nur das Original zu null. Vielleicht sollten wir noch ein paar Console Logs wieder rausschmeißen. Wir können noch gucken. Ach guck mal, eine Eins reinpasten funktioniert auch. Ich bin begeistert. Es funktioniert. Es funktioniert recht gut.
Wir könnten noch Arrow Keys, weil aktuell kann man noch nicht. Kann man keine Arrow Keys machen und Entfernen drücken. Mal gucken, was ein Event für den Arrow Key ist. Probier mal, ob du E einfügen kannst. Nee, kann ich nicht. Und Plus und Minus auch nicht, was auch gut ist.
Hier, Original zu null. Jawohl. Jetzt habe ich es wieder disabled, weil wenn es nicht Public Listed ist, kann es doch der andere einfach ändern und es wird irgendein random Emote angezeigt oder irgendwelche Dicks oder so. Das muss nicht sein.
Nee, kann er nicht. Ändert sich dann die ID? Okay, bam. Probiert mal aus, zu null. Geht das jetzt? Ja, funktioniert.
Also, wo sind wir stehen geblieben? Arrow Keys. Arrow Right, Arrow Left. Okay. Ist das Inception?
Irgendwelche Inception, oder? Weiß nicht, ob man das hört. Das ist Inception, oder? Ja, da hat irgendeiner gerippt. Irgendeiner aus Inception geklaut. Für sein Wupp Wupp Wupp Mix.
Arrow, Arrow Left. So, wenn es Arrow Left ist, dann will ich den Previous Sibling fokussen. Ja, Funs. Nice, nice, nice.
If Arrow Right, dann den Nächsten. Easy. Hä? Hör gut. Sollten wir jetzt noch Return? Ich bin mir nicht sicher, ob wir noch, wir sollten wahrscheinlich Return. Okay, nice.
Oh, jetzt ist es broken. Warum ist es jetzt broken? Hä? Wait a minute, wenn ich so mache. Leute, wenn ich mit den Arrow Keys navigiere, dann ist es broken. Warum? Blöde Frage, aber kannst du quick erklären, wie du deine Codeänderungen direkt im Browser wiedergibst?
Da muss ich gar nichts für machen. Das handelt, oh, was ist unten drunter? Veed ist unten drunter. Hot Module Replacement. Das Einzige, was ich machen muss, ist npm run dev zu machen.
Und der, also du, ja, wie soll ich das erklären? Du brauchst halt irgendein Veed Projekt. Das mit den Arrow Keys ist broken, Leute. Das funst nicht. Und ich weiß nicht, warum es nicht funst. Sollte ich vielleicht doch nicht Return? Ich habe keine Ahnung, warum es nicht funktioniert.
Ah ja, jetzt funst du, oder wie? Okay, ich habe keinen Plan, warum, aber okay. Ach, wegen Prevent Default. Muss es Prevent Default machen an der Stelle? Wahrscheinlich muss es Prevent Default machen. Okay, kein Schimmer.
So, und jetzt gibt es noch Entfernen. Den sollten wir vielleicht auch noch supporten. Delete Key. Delete. Was machen wir bei Delete? Bei Delete returnen wir einfach, oder? Ach, Moment. Moment, Leute. Shit. Jetzt, wo ich die Arrow Keys über...
Oh, das ist ja... Nee, das funktioniert mit den Arrow Keys nicht. Jetzt weiß ich auch, warum die das mit den Arrow Keys hier nicht gemacht haben. Weil du da nicht mehr innerhalb vom Input navigieren kannst und dementsprechend nicht mehr entscheiden kannst, ob du links oder rechts von der Zahl bist. Kannst du eigentlich mit der Maus dein Windows Tiling ändern? Ja, kann ich.
Also, du meinst, dass die... Du meinst, ob ich irgendwie hier umschieben kann? Ja, das geht auch, aber das benutze ich so gut wie nie. Du kannst hier irgendwie sowas, sowas machen, aber ganz ehrlich? Keine Ahnung, wer das benutzt. Ich benutze das nie. Das Einzige, wofür ich die Maus benutze, ist hier so zum Schieben. Okay, das mit den Arrow Keys wird nicht funzen. Das kann ich mir gleich sparen. Das wird zu kompliziert.
Oder man muss halt hinklicken. Okay, das würde halt funktionieren, ne? Ups. Ey, scheiß auf Arrow Keys. Null. Ich brauch... Wobei, ich brauch die Arrow Keys doch. Die Arrow Keys machen einfach auch nix. Das ist... So langsam wird's hässlich. Ja, nice. Funzt. Okay, gut. Funktioniert. Jetzt kann man hier reinklicken und irgendwas löschen. Ja, auch mit entfernen, so. Wenn man da scharf drauf ist.
So, das reicht. Gut so. Das können wir jetzt aber noch zusammenfassen. Können wir da nicht besser einen Case draus machen? Switch. Switch Case. Irgendwie sowas. E Punkt Key. Wenn Value, dann Arrow Left oder Arrow Right. Kann Java Script sowas? Oder, oder... Delete. Return. So. Gucken, ob das noch funktioniert.
Ne. Ne. Das funktioniert so nicht. Es gibt zwar keine Fehler, aber das ist syntaktisch nicht erlaubt. Switch. Case. JS. Expression. Okay, man darf da wirklich nur einzelne Sachen reinschreiben. Ja, gut. Das Default Break macht's kaputt? Ne. Ne, das funktioniert nicht.
Das geht nicht. Condition. Das geht nicht. Danke für den Sub. McFly und Holy Luck Gamers. Pogu. Using Conditions in... Ne, das geht nicht. Doch. Ah. Man muss... Moment. Ja, dann ist doch, dann ist doch das Switch auch unsinnig. Ich mein, wenn ich das so schreiben muss, wozu brauch ich dann ein Switch? Ne, geht auch nicht. Keine Ahnung. Darkseid. Danke für den Sub.
Das Off-Topic. Was hältst du von Online-Classes a la Udemy? Ah, hab ich auch ein paar Kurse schon gemacht. Letzten Jahre über. Gibt's gute Sachen. Ja. Ah, das ist, das ist ne gute Idee. Das ist, das ist ne gute Idee. Du meinst sowas hier. Ja. Includes ist es, glaub ich. Includes. Ja, das ist ne gute Idee.
Da können wir uns... Komm mal, scheiß drauf. Dann sparen wir uns das... Sparen wir uns das If. Sparen wir uns das K und If draus. So. Oh. Return. Bam. Ja. Funzt. Ok. Gut. Und jetzt können wir theoretisch... Theoretisch können wir jetzt noch... Jetzt haben wir alles... Jetzt haben wir alles in einem. So. Perfekt. Bestes Laserlichtes If aller Zeiten. Ja. Das reicht jetzt. Kein Bock mehr hier weiter dran zu bauen. Funzt. Alles gut.
Anonymousgifter. Der ist Pog, der Anonymousgifter. Xeto kriegt ein Gift vom Anonymousgifter. Dankeschön, Anonymousgifter. Er will nicht, nicht erkannt werden. Top Secret. Ja gut. Dann, dann können wir das doch so lassen, oder? Haben wir jetzt hier ne schicke, haben wir ne schicke Component am Start. Kann man sich nicht beschweren. Find ich, find ich nice. Und das CSS brauchen wir auch nicht mehr. Was? Nice. Gut so. Gut so.
Gut. Dann hätten wir diese Komponente am Start. Guckt mal Leute. Es wird langsam doch übersichtlicher, ne? Wir haben jetzt schon hier. Zack. Na gut. Ich geh jetzt direkt auf Step 2. Deswegen bringt das nix. Löschen wir mal die ganzen Sachen, die schon drinnen stehen. Mary97. Bam. Weg mit dir.
So. Und jetzt brauchen wir noch eine, eine weitere Component. Und zwar brauchen wir jetzt sowas wie einen Counter. Was ist das für ne UI Library? Das ist Skeleton. Wobei, das hier ist selbst gemacht. Also da kann Skeleton nix für. Machen wir doch mal ein, sowas wie ein Counter Input nochmal. Ups. Punkt, Punkt Sveld.
Counter Input. So. Was ich jetzt bauen will ist sowas hier. Weiß gar nicht, ob die hier nen Beispiel haben. Number Input. Ne. Ich, ich, ich will, ich will was anderes haben. Ich will sowas haben mit Plus und Minus.
Das können wir auch noch machen. Ich glaub, das ist deutlich lesbarer dann, wenn ich den, das kommt weg, wenn ich den Login State, guck mal, wenn ich den, wenn ich den Login State, das haben wir schon, dass du das Passwort nicht siehst. Guck, guck, das haben wir schon. Zeig ich dir hier.
Aber auch gebaut hier. Blub, blub, blub, blub, blub. Und dann kannst du jetzt hier auf das Auge klicken, dass es angezeigt wird. So. Direction. Ne, wir wollen Login Status oder sowas haben. Ich kann mir immer ums Verrecken nicht merken, was der Unterschied zwischen State und Status ist. Es gibt da so ein paar Merksätze für, aber ich komm trotzdem immer nicht drauf klar.
Ist da einer von euch High IQ für? Letztendlich ist aber auch egal, wie es heißt. Wir haben, wir haben None, wir haben OK, wir haben Error und wir haben Wait. Nehmen wir das jetzt einfach hier. Irgendwie so.
Und jetzt können wir nämlich hier das Ding setzen auf Login gleich. Der Anonymous Gift, aber das sieht so. Da kann man nämlich das so setzen, was deutlich hübscher ist. Oder hier anstatt auf OK kann man das hier auf OK setzen. Finde ich, finde ich irgendwie besser.
Besser lesbar dann. Und auch hier das das überprüfen und so könnte man, könnte man auch schöner machen. Ja, kann man beispielsweise sagen hier Login Status. Error, Error, Error.
Also sonst noch irgendwo hier. Genau guck, hier könnte man sagen Login gleich Logins Wait. Das oder hier Hack Wait hätte ich es eigentlich nennen sollen. Ja, wäre ich aber auch nicht so richtig schlau draus.
So was hier BBB Bootstrap. Was ist das hier für eine Scam Site? Wo bin ich da gelandet? Machen wir lieber erstmal nur hier im Browser auf auf Linux. Wo kommt man denn hier raus, wenn man auf BBB Bootstrap geht?
Ja, kommen wir accepten. Code Snippets von Frontend Designers. Okay, das scheint doch eine legit Seite zu sein und kein. Und doch kein Fake. BBB Bootstrap. Oh Gott, Twitter fuckt mich dann ab.
Masked Input. So was hier oder was meinst du? Ja, haben wir doch im Prinzip sowas ähnliches. Nur, nur dass es bei uns halt angezeigt wird, dass dann halt nix drin steht. Doch.
Wieso? Wir haben doch hier schon sowas. Doch, doch gut. Finde, finde meins viel, viel stylischer. Wir können vielleicht noch gucken. Nur eine Sache, was man bei dem Pin Input ändern könnte, ist, dass man sagt, das ist rounded.
Sieht vielleicht ein bisschen schöner aus, wenn es leicht abgerundet ist. Okay, Counter Input. Da wollten wir jetzt weitermachen. Oder wollte ich noch was auf Page machen? Ne, wollte ich nicht. Passt alles.
Achso, nen Toast Error wollten wir noch einblenden. Ja. Okay, wie macht man, das ist mal ein kurzes Sidetrack. Wie macht man einen Toast? Simple. Ein Simple Toast. In your App Root. Basic Toast.
Dann toasten wir mal. Probieren wir das mal aus. Layout. Einen Toast. Toast. So. Und dann machen wir das jetzt mal testweise hier auf der Page. Und wie öffnet man das jetzt? Ein Action Toast. Basic Toast. Okay, zeig her. Basic Toast. Toast Settings.
Toast Store. Ich brauch einen Toast Store. Let's go. Toast. Toast Store. PPoFatTime. Achso, muss ich importieren. Toast Store. Da ist er. Da wird getoastet. Kann man nicht auch einstellen, dass der automatisch wieder weg geht?
Also, ich mein, wenn es da drin steht, hier, keine Ahnung. User or Password. Was ist das? Schöne Fehlermeldung für Login failed. So, bam. Ich will, dass der automatisch von alleine wieder zugeht.
Ach, Timing. Adjust Timeout. Okay, der geht nach zwei Sekunden wieder zu. Okay, Timeout. Ah ne, hier. Timeout. Eine Sekunde. Bam. Oder zwei Sekunden. Drei Sekunden. Ja, okay. Nicht schlecht. Hat was.
Das, es sollte jetzt vielleicht noch nach Error aussehen, oder? Hide, dismiss. Ja, geht nach drei Minuten automatisch weg. Okay. Huch. Ich hab's an die falsche Stelle kopiert. Ah. Geht nach drei Sekunden automatisch wieder weg. Ja, ist nice. Wow. Übertreib halt. Ne, ne, es sind drei Sekunden. Ich hab, weiß nicht wie oft Minuten komme. Styling. Error. Ah.
Warning. Error. Success. Ja, dann. Background. Warning. Gar net, gar net mal so übel. Oder? Gar net mal so schlecht. Man könnte, man könnte auch Error nehmen. Warte mal, vier Sekunden haben wir ein bisschen bessere Chancen das zu sehen. Gar nicht schlecht.
So, und jetzt müssen wir jetzt triggern, wenn, hier, wenn Login auf Error wechselt. Äh, wie machen wir das jetzt am besten? Da bräuchten wir so einen automatischen Svelte Reactive Dings. Ja, ne. Äh, if Error gleichtreich. Ne, ne, nicht Error. Ne, was mach ich hier? Ne, Login.
If Login gleich Login State Error. Dann will ich das machen. Okay. Check, dann checken wir das doch mal, ob das jetzt funktioniert. Wir sind im ersten Step und das hier gibt ein Error. Zack, zack, zack, zack, zack, zack. Hups, fast. Bla, bla, bla, bla, bla, bla. Test.
Hey, ich muss sagen, so langsam werden wir hier zum richtigen Frontend Champ. Das gefällt mir richtig gut. Zack, bam und sogar die Inputs werden Highlighted. Und was sagt ihr Leute, das ist doch hier richtig Next Level Frontend Engineering.
Naja gut, das sieht man jetzt hier nicht, aber, ja, schick, schick, schick. Das, das finde ich, finde ich Hog. Ne, ne, ne, ne, hauptberuflich würde ich das garantiert nicht machen wollen. Gut, aber eigentlich waren wir stehen geblieben bei einer Counter Component. Und zwar da.
Waren wir stehen geblieben. Pausierungs Champ. Die dürfte, die dürfte ein bisschen einfacher werden, glaube ich. Counter. So, Script. Diff. So, beste.
Okay, also eine Sache kann ich auf jeden Fall schon mal kopieren. Nämlich das Diff und hier oben das Label. Also Export Label gleich das da. Das Label kommt dann wieder hier hin. Gut, das hier kommt weg.
Aber das kann ich wahrscheinlich übernehmen. Weil, ne, das brauche ich, ich brauche glaube ich gar kein, gar kein Flex Diff. Mal schauen. Aber soweit, soweit müsste das funktionieren.
Müsste natürlich noch ein Label setzen, dass das Ganze klappen kann. Also Label. Refresh. Okay. Ja, dann müssen wir erstmal wieder auf Step 2 schalten. Refresh. Da ist noch nichts da.
So, wie bauen wir jetzt gescheit einen Counter? Also, also ich will was haben. Also guck mal hier. Input, Number, Plus, Minus, Component. Ich will sowas hier haben. Sowas, sowas hier. Aber wir gucken nicht ab. Sowas in der Richtung will ich bauen.
Okay. Also. Ich würde sagen, als erstes, als erstes brauchen wir einen Input. Ja, also ein Input vom Typ Telefon. Ne, diesmal wirklich vom Typ Number. Ich glaube da kommen wir jetzt nicht drum herum.
So, dann machen wir hier sowas wie Export Let Min, Export Let Max. Haben wir hier auch wieder 99 oder so. Haben wir glaube ich beim anderen auch. Wobei, nö haben wir nicht, weil braucht der ja gar nicht.
Braucht der ja gar nicht. So, Minest, Minest Value, Min, Max Value. Ach, da kann man es ja einfach so klammern. Ich finde das haben die ins Weltschick gemacht. Das erspart einem die ein oder andere Tipperei.
So, dann haben wir noch Class, Input. Gut. Und jetzt machen wir mal Rounded weg. Rounded. Und jetzt müssen wir das irgendwie stylen. Habe ich nicht hier noch ein Flex drum? Habe ich jetzt auch mal. Ich brauche bestimmt mehr als ein Element.
Okay. Wie, wie, wie ordnen wir das jetzt. Also wir brauchen ein Plus Button. So viel ist schon mal klar. Hier Icon Plus. So, okay. Naja, fast, fast richtig. Icon Minus. Reicht. Reicht. Perfekte Optik hier Leute.
Hier Style hatten wir noch. Style, wo habe ich denn den Kram kopiert? Mit Firefox stand er doch drinnen. Genau hier. Style. Ja, dann geht hier das Overlay Zeug weg. Okay. So, jetzt muss das natürlich noch ordentlich aligned werden, weil sonst sieht das ziemlich kacke aus.
Also, Items Center. Schon mal besser. Die Dinger werden gerappt in ein Button. Ach, mein Chat war weg. Hat mich schon gewundert, warum da eben nichts gekommen ist. Zwei, drei Minuten. Rechts das Plussinn. Ja, machen wir. Achso, habe ich falsch rum? Ja, tatsächlich. Cool.
Habe heute meine Daten verloren. Windows oder BIOS hat meine NVMe nicht mal als Bootdrive erkannt. Hat versucht Daten auf HDD zu packen, aber NVMe war GPT geschützt. GPT geschützt? Was soll das sein? Du meinst, du hast irgendeinen, irgendeinen auf der SSD Hardware, die vom Hersteller eingebaut Verschlüsselung benutzt oder so. Und was ist GPT geschützt? Schutzpartition. Okay, ich weiß nicht, was das sein soll.
Kann man seine Autos eigentlich Nicknames geben? Ja, kann man. Das musst du aber nicht in meinem Tool machen, sondern das musst du auf der Fiat-Webseite machen. Also, ich weiß nicht, was eine Schutzpartition sein soll. Entweder ist das Ding verschlüsselt oder nicht. Chat, Chat, ergibt die Beschreibung für euch irgendwie Sinn?
Ich weiß, was GPT ist. Aber was hat das eine mit dem anderen zu tun? Was ist eine GPT-Schutzpartition? Hä? Die Partitionstabelle? Wie soll die Partitionstabelle? Das ist irgendein Windows-Shit, oder? Das ist irgendein Windows-Müll. Ich habe keine Ahnung. Das ist irgendein Windows-Krempel. Kein Schimmer.
So, jetzt müssen wir das Ganze in Buttons wrappen. Ja, so. Button. Guck mal, jetzt kann man es so... Ne, man kann es nicht anklicken, weil BTN fehlt. Aha! Guck mal da, jetzt kann man es anklicken. Machen wir daraus mal BTN small. Schon besser.
Und vielleicht machen wir hier mal bei der Size, machen wir das auch ein bisschen kleiner. 16. Ja, ja, ja, das sieht schon ganz gut aus. Wo, wo, wo, Playlist ist vorbei. Was ist das hier? Gibt es denn? Das darf nicht vorbei sein. Icon plus.
Okay, Leute, ich habe schon hässlicheres gesehen. Jetzt werden wir einfach einen Rahmen drumherum machen. Variant filled. Wobei... Ach doch, sieht schon kacke aus. Gibt es sowas wie Outline vielleicht?
Oh ja, das ist gut. So bleibt es jetzt. Das sieht ja sowohl in Dark-Mode als auch in Tageslicht-Mode ganz brauchbar aus. First try. Das ist gar nicht mal schlecht, das finde ich gut.
So, jetzt müssen wir natürlich noch ein bisschen checken, ob das, was da eingegeben wird auch Sinn macht. Da muss man Prioritäten setzen. Und in der heutigen Zeit musst du halt erstmal, vor der Zeit hast du noch auf Facebook gepostet, Twitter gepostet, heute wird halt Instagram gepostet.
Ist das halt, finde ich ehrlich gesagt auch gar nicht so schlimm. Sollen sie halt machen, wenn sie alle auf den krassen Influencer-Lifestyle stehen. Fragt doch mal, ob sie nicht vielleicht sogar ein Onlyfans-Account haben. Wahrscheinlich, wahrscheinlich haben sie sogar einen.
So, wenn wir auf den Knopf drücken. Guck mal, vom Ansatz her, von der Idee her ist das doch eigentlich ganz einfach. On-Klick. Value. Ne, nicht Value. Doch Value. Ich hab Value bloß noch nicht angelegt. Export let Value gleich. Tja, wir fangen an mit Mindest-Value.
Ah, warum steht da nichts drin? Ah, weil ich noch kein Value gebindet hab. Bind Value. Okay, nice, nice, okay, nein, okay. So, also jetzt gucken wir doch, von der Idee her ist das doch total einfach. Wir gucken beim Plus-Klicken, ob Value kleiner ist, als das Maximal-Value und wenn ja, dann wird Value um 1 erhöht. So, easy.
Und bei Minus sagen wir On-Klick und dann da im Prinzip das entgegengesetzte. Wenn Value größer ist, als das Mindest-Value, dann sagen wir Minus, Minus. Das war's, easy. Fertig.
Aber Moment, ich kann bestimmt, ja, okay, ich kann auch viel mehr, viel mehr eingeben. Wobei ja das, wobei das können wir ganz easy fixen. Das kriegen wir ganz easy gefixt, dass es immer nen Valid, die Zahlen noch centern.
Wofür hast du dieses Feld eingebaut? Was ist das hier? Meinst du in die Anwendung oder warum dort ein Input-Feld ist? Eigentlich sollten da noch Minuten dahinter stehen. Fällt mir gerade ein.
Achso, dass du eingeben kannst, wie viele Minuten Refresh-Intervall dabei ist, während, zwischen denen er nicht beim Hersteller nachfragt, ob es was Neues gibt, weil sonst kannst du in irgendein Rate-Limit geraten, wenn du zu oft abfragst.
Also ich empfehle ja Default-Value. Ein Default-Value bräuchten wir übrigens auch noch. 15. Man darf es nicht Default nennen. Zentriert, ja wir können es, wir können es zentriert.
Darf man Add-Default machen? Wie kann man ein Default-Value in Javascript Default JS Variable nennen? Nein, im Moment in Typescript, aber wie nennt man es dann, wenn Default geblockt ist? Keine Ahnung.
Ich setze halt Def, was bleibt mir anders übrig? Init, Init, okay, Init ist auch okay. Ja, ja, okay, Init. Def keckel. Chat, ich sehe ihr Blick durch, so war das. Init, Init ist eine gute Idee, ja.
Wir sollten noch dahinter schreiben, dass es Minuten sind. Leute, ich bin ja unfähig, was so CSS-Platzierung angeht. Ich hätte gerne hier dahinter noch die Units stehen, also sowas wie Export-Unit gleich Unit-Minuten. Kann man es überschreiben?
Oder Minutes, Punkt. So, und jetzt bauen wir irgendwo da drüber nen Diff ein mit Class Absolut. Das geht bestimmt schöner, aber ich bin was so, was so, nicht Reflex, Alter, wie komme ich auf Reflex? Relative. Ich bin der übelste Noob, was so CSS-Platzierung angeht.
So, jetzt kann man sagen hier, Top, ne Moment, das kann ja dynamisch breit sein. Wobei, ist doch egal. Top, dann Write, 0, 8, 12 und da steht jetzt Minuten drin. Ne, nicht Min, da steht Unit drin.
Und Top, 2, ja, sowas in der Richtung hier, so ist das. Ey, ey, warum verschwindest du einfach? Anzeige, ich glaube, da müssen wir, ok, das klickt auf jeden Fall Select None und irgendwie Z-Index oder sowas muss höher sein.
So, jetzt verschwindet das auch nicht mehr. Schreibt doch Minuten in das Label, auch ne gute Idee. Quasi hier, oder in Klammern vielleicht.
Ok, Chat, wo findet ihr die Minutenanzeige besser? Im Label, hier hinten? Weil, so lang, so viele Minuten, es geht ja eh maximal 99, ja. Also, mehr geht eh nicht. Also, man hat eh immer massig Platz. Im Label?
Oh, ok, warum nicht? Da können wir uns diesen Campbell hier auch sparen, wenn wir uns im Label machen. Zahl Center, ja, das Zahl Centern können wir noch machen. Text Center, Volt 5, ok.
Ja, das Mausrad geht nicht da drinnen. Sollte das Mausrad gehen, oder ist das wieder so ne Chrome-Sache? Hier geht das Mausrad, es ist wieder so ne Chrome-Sache, dass das Mausrad nicht geht.
Die Funktionen erklären. Das ist ein Web-Interface für ein Home Assistant Addon, was ich gebaut hab. Da kannst du Informationen aus deinem Elektroauto auslesen. Batterieladung, Reifendruck und sowas.
Ich brauch ein Web-Interface zum Konfigurieren. Nenn's vielleicht Refresh Every, weißt du wie viele es ungefähr benutzen? Ähm, ne, ich mach kein User-Tracking. Also, es hat 63 Sterne auf GitHub, also wird's mal, denke ich, zumindest mal mindestens 63 Leute probiert haben.
Hast du ein Elektroauto? Ja, ich hab nen 400-500E. Wie hab ich das eigentlich hier genannt? Refresh. Refresh-Intervall hab ich's hier genannt. Dann nenn ich's doch vielleicht wieder so. Dann erkennen die Leute was wieder. Refresh-Intervall in Minuten. Ja, jetzt versteht man's, glaub ich.
So, wir müssen noch mal eine Sache noch machen, seh ich gerade. Und zwar, man kann da immer noch Mist eingeben. Und zwar brauchen wir sowas wie On-Focus oder sowas. Gibt's auch On-Focus-Out? Focus-Lost? On-Focus-Lost?
Und da müssen wir checken, hier drinnen noch mal, if. Ob das Value kleiner ist als das Mindest-Value. Dann setzen wir das Value auf den Mindestwert. Else if, wenn das Value größer ist als der Maximalwert, dann setzen wir Value...
Das kann man bestimmt schöner machen in Java. Da braucht man, glaub ich, gar kein if. Weil jetzt ist der Vorteil, wenn ich jetzt hier das, das mache und rausklicke... Ja, siehst du, das funktioniert. Nice. War das doch praktisch.
Wenn ich's ganz lösche, kommt da Min-Value rein. Das ist doch gut. Ich hab dich übersehen. Was denn? Was ist denn? Naja, ich seh nicht immer alles im Chat. Du musst etwa bloß dabei schreiben, wenn ich irgendwas nicht sehe. Ich kann ja nicht immer alles. Was gibt's denn?
Ja, ja, vielleicht nicht verkehrt. Hast du sonst noch irgendwas geschrieben? Dann versteh ich das Problem jetzt grad nicht. Aber Minutes ist wirklich nicht verkehrt wahrscheinlich. Ja, das tatsächlich. Schreibt man in dem Fall Minutes groß oder klein? Klein, oder?
Groß? Wie schreiben die Amis das? Ey, wahrscheinlich klein. Irgendwie klein sieht besser aus. Ne, das sieht ganz gut aus. So, ich würd sagen, reicht, oder? Mehr brauchen wir noch nicht. Passt. Aber wenn ich hier Mist eintrage und dann rausklicke, oder da draufklicke, dann ist's halt wieder weg. Also ich denk, das können wir so lassen.
Mausrad geht in Chrome halt einfach nicht. Was passiert beim Safe-Klicken? Dann legt er den Account, beziehungsweise dann addet er den Account, dass der im Hintergrund überwacht wird. Ja, wir könnten's eigentlich ausprobieren, ob jetzt alles funktioniert. Es ist ja soweit eigentlich alles da. Also, was passiert, wenn man Safe-klickt? Ganz einfach.
Dann setzt er die zurück auf 999. Ne, das glaub ich nicht. Test? Gucken wir mal. Ne, bei Maus down ist es schon weg. Ich hab jetzt noch nicht geklickt. Moment, wenn ich Save drücke? Ah, ich hab hier noch kein On-Klick. On-Klick, add, Account, oder?
Hab ich sowas nicht da oben drinnen? Ne, hä? Hatten wir nicht schon... Moment, Leute. Hatten wir nicht schon Accounts hinzugefügt? Oder hab ich das Backend-seitig noch gar nicht gemacht? Bin ich jetzt einfach nur etwas pipiger im Hirn? Kann es sein, dass das Backend noch gar keine Accounts adden kann?
Okay, dann Function. Add Account. On-Klick. Add Account. So. Kann mein Backend das noch gar nicht? Ne. Ach, alter. Ja, kein Wunder, dass das nicht funktioniert. Ich hab noch gar keine Möglichkeit, irgendwas anzulegen. Ja, da muss man sich nicht wundern, wenn's nicht geht.
Okay, ich muss jetzt mal kurz umdenken. Eine Runde .NET-Stells. Was anlegen ist oftmals ein Push, ne? Also brauchen wir sowas wie App, Push, äh, nicht Push, Post mein ich, nicht Push. Alter, wie komm ich auf Push? Post heißt es doch.
Aber da siehst du mal, wie, wie Fivehead, ah ne. Post. Ich glaub, ich hab Post getippt, aber Push gesagt. Okay, RP-Pattern. Slash RP, Slash Accounts, Slash, ne, einfach nur Slash Accounts. Ne. Ne. Ne, restmäßig wäre das so, ja? So.
Und dann? Boah, jetzt von Javascript umdenken, hier richtig. Leute, nicht nur Senior Fivehead Frontend Javascript Architekt. Fullstack muss da eigentlich ein Titel rein. Äh, äh, ähm. Warte mal, wie machen wir das jetzt? Async? Ne. Oh, ey Leute, ich bin verwirrt. Syntax. So hier, so geht das, gell? So.
Das, also zwischen Javascript und C-Sharp hin und her wechseln, wenn man, wenn man die letzten zwei Stunden nur Javascript gemacht hat, ist wir. Okay, wir brauchen dort jetzt sicherlich wieder den Message Hub, dass ich posten kann, wenn es was Neues gibt. Okay, und wir brauchen sowas wie einen String, nennen wir es mal User. Ja. Wir, wir übertragen mal nur den, what the ffff. Wir übertragen mal nur den User.
Das muss erstmal reichen. So, dann gucken wir mal, if String, ja null or whitespace User. Wenn ja, dann return result, results. Was returnen wir denn da? Konflikt, created, verbinden.
Was, was returnen wir denn da, wenn irgendein Mist, gibt es nicht sowas, sowas wie einfach nur Bad Request, Bad Request ist top. Einfach, einfach, einfach Bad Request. Halt's Maul, Bad Request. Kann ich in deine agile Gruppe, um die Skills zu haben, bin ich auch immer im Daily. Also, wenn du auch immer schön Protokoll beim Daily führst, können wir mal drüber reden, ja.
Weil wir sind agil, aber nicht, aber nicht so agil. Bei uns gibt es noch Protokoll. Let's go. Protokoll, wir haben, Chat, wir haben einen neuen Protokollschreiber gefunden. Hayimk macht das. Aber, aber auch immer schön den Schreibtisch hochfahren, wenn's, wenn's Stand-up ist, ne. Nicht jetzt einfach wegen Homeoffice faken, dass man, dass man standet. Dann kannst du in unsere agile Gruppe joinen.
Protokollführung, sehr schön. Wechsel das nicht wöchentlich bei euch. Nein, wir haben zum Glück kein Protokoll. Also jetzt mal, also, also, bei uns auf der Arbeit haben wir für irgendwelche Daily Sachen kein Protokoll. Das wäre viel zu übertrieben. Da, da dreht man ja durch bei. Du fahrst den Schreibtisch immer hoch, ich nicht. Ich, ich hab Dailys und Stand-ups daheim, ohne zu standen.
So, hier, waraccount gleich, äh, accountfaker hab ich das genannt. Generate einen Account. Wollen wir generaten? Ach, das ist eine List. Gibt's nicht sowas wie generate, generate one oder so? Ne, gibt's nicht. Generate one first.
Account. So, und im Account setze ich jetzt erstmal einfach nur den User auf den Namen. Das muss, das muss reichen. So, fake database, accounts, add.
Die Guid, das ist richtig, Account, keine Brüche, Account, ach nicht Guid, ID hab ich das genannt, okay. Account, so, jetzt sagen wir await, send update.
Wir sagen Bescheid, dass es neue Accounts gibt auf Server-Seite und Result, return bei Result, okay. Alles klar. So, unser Backend sollte ready sein. Schauen wir mal, wie wir das in Frontend gebacken kriegen.
Add Account. So, wie machen wir einen Post-Request jetzt ordentlich? Ja, also, das geht so, async, await, fetch. Es ist schon ein bisschen dumm, dass sie das Fetch genannt haben, oder?
Warum haben die das nicht einfach auch HTTP-Client genannt im Browser? Warum Fetch? Mit Fetch kann man nämlich auch Sachen pushen, was wiederum bescheuert ist, warum es Fetch heißt.
Also, das muss ich sagen, das war eines der wenigen neuen Javascript-Sachen, wo sie nicht so feilfett waren. Ansonsten, wenn ich mal abwägen müsste, wer hat bessere Sachen die letzten 10 Jahre in die Sprache eingebaut? C++ oder Javascript?
Beziehungsweise, wer hat das konsistenter und logischer gemacht? Liegt Javascript ganz weit vorne. So, wir müssen hin nach HTTP, Doppelpunkt, Localhost, Port 5015. Ja, ich muss den Gesamten angeben, weil das auf dem anderen Port läuft.
Accounts. So, und jetzt ging das wie? Method, Post, und dann Body, und dann JSON, Stringify, und jetzt den User. Ich glaube, so ging das, so ging das zu posten.
Ich bin da ein bisschen am planlos sein. Geht das so? Ich hoffe, ich hoffe, dass das funktioniert. Okay, also dann enden wir mal was. So, Fake, warten, 1, 2, 3, 4, bester Pin, Save.
Ach, Shit. Error not found? Ach, ich hab AP vergessen. Bad Request. Nice. Kann man auf einem Account nur ein Auto haben? Nein. Du kannst auf einem Account beliebig viele Autos haben, aber du brauchst einen Account pro Hersteller und pro Region.
Und wenn du, nee, das stimmt nicht. Du brauchst einen Account pro Hersteller. Wenn du vom gleichen Hersteller Autos in mehreren Regionen hast, musst du wahrscheinlich den Account mehrfach adden mit unterschiedlicher Region Selection.
Oder ich baue irgendeine Art Autodetection im Hintergrund ein, dass er sich in allen Regionen einloggt und guckt, wo er Autos findet. Wie kann ich meine CPU testen? Das hat mit deiner CPU nichts zu tun. Packet Loss, Packet Loss, Teleport, das liegt nicht an der CPU. Ganz ehrlich, CPUs sind eigentlich nie das Problem.
Wenn CPUs kaputt sind, das merkst du. Und ansonsten ist die CPU eigentlich so ziemlich das Letzte, was ich vermuten würde. Ich meine, du kannst einen Stress Test machen, ja? Also unter Linux kannst du sowas hier eingeben. Stress. Oder, äh, Stress, wie heißt das andere? Linux Stress Test. Ich hab vergessen, wie es heißt.
S, S, S-Twee kannst du eingeben, guck. Dann kannst du sagen, hier, bam, Stress Test auf allen CPUs, let's go. Und jetzt hab ich den Rechner komplett ausgelastet. Aber CPUs sind es eigentlich nie. Könnte das vielleicht damit zusammenhängen, dass deine SSD kaputt ist? Du hast doch vorhin geschrieben, dass deine SSD heute verreckt ist. Das wäre vielleicht auch daran, genau daran liegen.
Wie passt das zusammen, dass deine, dass du am Flughafen bist, Leuten bei TikTok zuguckst, vorhin deine NVMe SSD verreckt ist und jetzt deine CPU Probleme hat? Ist das nicht ein bisschen viel für einen Tag? Ja, Prime95 kannst du machen unter Windows. Oder wenn du eine Intel CPU hast, kannst du auch das offizielle Intel Stress Test Tool benutzen. Aber Prime95 wäre wirklich nicht schlecht, damit kannst du nämlich auch deine RAM testen lassen.
Mach mal ein Prime95. Mach, mach ein Prime95 Run. Aber auf Mittel, also dass er auch, also auf dieser mittleren Setting, dass er auch RAM testet. Und dann, und dann lass das mal einen halben Tag laufen und guck mal. Also wenn du Probleme hast, dann wahrscheinlich eher der RAM. Ich kann mir nicht vorstellen, dass deine CPU, CPUs sind nie kaputt.
Was aber kaputt ist, ist mein Post Request. Warum ist mein Post Request kaputt? Oh. Ein Unhandled exception has occurred while executing requests. String user was not provided from the query string. Ja, from the query string soll da ja auch nicht provided werden.
Minimal API C Sharp Post Parameter. Wie geht denn das? Parameter binding in minimal API abstractions. Ja, so habe ich das auch gemacht. Und warum geht das bei Microsoft und bei mir geht das nicht?
Microsoft, was ist das? Was ist da los? From root, from query, from services, from header. Was? Das muss man doch sonst nicht machen. Kann es sein, dass ich das als JSON Objekt übergeben muss? Ich habe doch hier einen Uconnect Account. Aber das wird wahrscheinlich nicht funktionieren.
Okay, einfach mal testweise. Public class. Ja. Fällt mir jetzt gerade nichts an. Und der kriegt aktuell einfach nur ein User. Wupp, wupp, wupp, wupp, wupp. Kann man jetzt sowas hier machen?
Ach, ich mache es nicht als fetch. Alter. Ja, ich weiß, woran es liegt. Ich sage nicht Application. Ich sage nicht Application JSON. Nee, ich pushe das gar nicht als. Okay, aber top, top, das kann auch sein.
Probieren wir das mal so aus. Probieren wir das mal doppelt, doppelt aus. Ja. Das heißt, es ist User, User. Das ist natürlich auch toll. Unsupported Media Type. Aber dann muss ich es wahrscheinlich auch so übergeben.
Konnte ich das nicht einfach weglassen sonst? Konnte man mit JSON nicht sowas machen und er erkennt es trotzdem, dass der User nehmen soll und gleichzeitig es auch User nennen soll? Okay, ich brauche jetzt noch Application JSON Content. Ach nee.
Oh, das kann ich mir immer nicht merken. Fetch, Post, JSON. Chat, verwendet ihr Fetch oder verwendet ihr sowas wie Axios oder sowas in der Richtung? Gibt es da Alternativen? Was würdet ihr empfehlen, wenn man viele Web-Requests machen muss im Browser? Fetch. Ich meine, Fetch hat halt den Vorteil, weil es built-in ist. Allein schon deswegen mag ich Fetch.
Ah, jetzt hat es funktioniert. Guck, und jetzt haben wir auch, okay Moment, wir müssen das nochmal neu starten. Wir generaten ein bisschen viele Fake Autos. Ups, da war es doch. Wir generaten zwischen 15 und 69 Fake Accounts. Wir generaten mal bloß zwischen einem und drei Fake Accounts.
Aber eigentlich müssen wir gar keine Fake Accounts mehr generaten. Wir können einfach welche adden von Hand. Open API Tools. Das klingt was, was, das sieht so ein bisschen nach, ach so Java. Okay, ich meine JavaScript. Das sieht so ein bisschen nach Swagger-Kram aus.
Guck mal, so, add, bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla
Und, und ein weiterer Vorteil ist, es sieht doch, ohne Mist Leute, es sieht doch direkt irgendwo noch ganz lesbar aus.
Das einzige, was nicht so hübsch ist, aber da bin ich auch zu faul und ich glaube auch nicht, dass es sich lohnt, das in der Komponente irgendwie auszuklinieren, weil es sehr eng verbunden ist mit der Logik von der Seite,
Das mit dem Button hier unten, den Button könnte man vielleicht noch extrahieren, irgendwie als, keine Ahnung, Load-Button oder sowas, aber jetzt sagt man, insgesamt sieht das doch wirklich ganz gut lesbar aus.
Moment, ich beinde ja die Hälfte ja noch gar nicht mal, aber na gut, zumindest testweise fandst du es doch schon mal, das ist doch wirklich nicht verkehrt, das hat was.
Wieso heißt der Button Test? Naja, Login-Test halt. Wie kann ich am Ende die Anwendung, einen Docker-Container starten, fertig.
Oder halt Home Assistant-Add-On installieren, mit einem Klick.
Test, es soll Login-Test heißen. Ja, du testest, ob das Login funktioniert, wenn ja, dann geht's weiter und...
Okay, wenn man nicht versteht, für was Test steht, wie kann ich das Ding nennen, dass man versteht, was dieser Button macht?
Gestern hab ich's Login genannt, gestern hab ich's Login genannt und ich dachte mir, Login ist auch nicht so richtig klar.
Vielleicht sollte ich's einfach nennen, Test-Login.
Komm, ich nenn's Login, oder? Chat, Test oder Login?
Authenticate. Try to Login. Ja, fast.
Verify. Oh, jetzt kommen hier aber die advanceden Sachen an, Chat.
Also, Try to Login find ich persönlich gar nicht mal übel.
Verify. Nee, Try to Login find ich gut. Da ist unmissverständlich klar, was passiert.
Ja, Try to Login find ich gut.
Okay, was passiert, wenn das Login failt? Haben wir schon ausprobiert?
Das kann ich aktuell nur so simulieren.
Wenn das Login failt, dann gibt's... Ah, Moment, das ist noch verbuggt.
Ja, das wird noch nicht abgefragt hier.
Ja, doch, doch, sehr stylisch, gefällt mir.
Ich mein, vielleicht sollten wir wirklich noch einen Login-Test-Endpoint machen.
Deswegen, alles zu starr, immer Rest, funktioniert halt nicht.
Also, wir könnten tatsächlich einen Login-Test... Im Prinzip brauchen wir sowas hier.
Moment, nee, Chat, wir machen das ganz einfach.
Wir machen den Post.
Wie werden die Accounts gespeichert im Frontend?
Aktuell nur im RAM.
Ich hab hier sowas, ich hab eine Fake-Database, das ist einfach nur ein Dictionary.
Aber wahrscheinlich am Ende SQLite oder eine Textdatei.
Das liegt dann halt im Docker-Container oder im Home-Assistant-Docker-Container.
Ich mein, wir könnten theoretisch, wenn wir jetzt hier sowas wie JSON-Account haben,
könnten wir eigentlich noch ein Bool-Feld machen.
Ist-Test oder sowas.
Und, obwohl ich mir nicht sicher bin, ob das schönes API-Design ist.
Ja, und jetzt könnten wir quasi sagen, ja, blablabla, Generate.
Und anstatt das in die Datenbank zu inserten, könnten wir jetzt sagen,
wenn es ein Test-Login ist, das gefällt mir jetzt schon nicht.
Wenn es ein Test-Login ist, dann machen wir hier oben das da.
Ja, das würde funktionieren.
Können Home-Assistant-Addons überhaupt Persistent Storage?
Ja, das geht.
Kannst du in deine Addon-Options eintragen, dann kriegst du irgendwie, frag mich nicht,
nicht viel, du kriegst irgendwie 50 MB Storage oder sowas.
Aber das geht.
Sonst könntest du ja mit Addons nie Textdateien anlegen und sowas.
Wobei ich weiß gar nicht, ob es beschränkt ist.
Ich glaube, ich bilde mir eines, das wäre auch 50 oder 200 MB oder so beschränkt.
Was du in Addon kriegst.
Das ist einfach, das kann ich dir sagen.
Home-Assistant-Recorder nennt sich das Ganze.
Und hör nicht drauf, dass Leute sagen, du sollst es in MySQL oder so überführen.
SQLite ist vollkommen okay.
Hier kannst du angeben.
Recorder Max, oh mein Auge.
Ja, Purge-Keep-Days, das musst du eingeben.
Das ist defaultmäßig auf 10 Tage.
Stellst du einfach auf einen Monat oder so.
Dann hast du zwar eine bisschen fettere Datenbank, aber kannst du in der History,
in Home-Assistant weiter zurückgehen.
Ja, Return, Results.
Bad Request.
Macht das Sinn ein Jahr zu loggen?
Es kommt ein bisschen drauf an, was du alles loggst.
Du kannst ja auch exkluden, das geht ja auch.
Du kannst ja auch manche Sensoren exkluden, dass du da nicht so viel loggst.
Das kann man relativ genau, also ganz ehrlich.
Du kannst schon ein Jahr Datenbank machen.
Ich bin mir nicht sicher, ob Home-Assistant nicht dadurch irgendwelche Slowdowns hat.
Weil es manchmal versucht, alles einzulesen oder so.
Aber das geht schon.
Das ist ASP.NET Core.
Minimal APIs.
Also ich habe glaube ich meinen Home-Assistant drei Monate gespeichert.
Und meine Datenbank platzt jetzt nicht aus allen Nähten.
Ist jetzt, weiß ich nicht, 80G oder so.
Ja, das finde ich aber, Chillfreak, das hatte ich auch mal.
Das finde ich zu viele Scootern schon.
Also probieren wir das doch mal aus hier.
Wir machen jetzt nochmal einen Fetch.
Bei...
Ich habe doch hier Try Login.
Okay, Try Login, muss auch Async sein.
Also, ich habe jetzt mein Login so eingestellt, dass es immer failt.
Mein Login failt immer.
API.NET Core.
API-Accounts User.
Und jetzt irgendwie ist Test
True.
Das ist wirklich keine allzu schöne API-Geschichte.
Da müsste ich mir was anderes überlegen.
Das hat nicht funktioniert.
Okay, es geht einfach gar nicht.
Ja, das stimmt, das Else brauchen wir nicht.
Okay, was schickt der jetzt für einen Request?
Was, Status Code okay?
Wie jetzt?
Status Code okay.
Jetzt ist es doch Bad Request?
Ich habe jetzt nichts geändert und auf einmal geht es?
Wie jetzt? Warum jetzt?
Warum sollte Rekord das nicht?
Das ergibt keinen Sinn.
Nee, am Rekord liegt es nicht.
Ich glaube mein Frontend hat einfach noch nicht richtig neu geladen oder so.
Der Rekord, den habe ich nur gemacht, dass ich das ordentlich Debug-Ausgabe auf der Konsole habe.
Am Rekord wird es nicht liegen.
Okay, das funktioniert.
Login. Bam. Zack.
Accounts. 400.
Okay, schön.
Das heißt, wir checken jetzt, wenn es einen
Wie macht man das mit Fetch gescheit?
Let Result.
Und jetzt kann man glaube ich checken,
If Result okay.
Ist das auch ein Promise?
Auch etwas, was man erwarten muss?
Nee, oder?
Geht das so? Nee, das ist kein Promise.
So, ich kann gucken, If okay.
Dann sage ich, Login gleich
Login Status okay.
Nee, okay.
Else.
Wobei, das brauchen wir noch gar nicht hier. Einfach so. Zack.
Hier. Senior Architect Code.
Error. So, perfekt.
So, schauen wir mal.
Also es sollte immer einen Error geben aktuell.
Hä? Alter, manchmal verstehe ich Javascript nicht.
B is not a function. Wie jetzt?
Warum nicht?
Okay. Fetch. Await. Okay. Error.
Wie macht man das richtig?
How to handle errors. Ja, erklär mir das mal.
Fetch. Moment.
Ernsthaft? Aber, hä?
Ah, Moment.
Ah, Moment, Moment.
Das ist irgendwas anderes.
Ach, du hast recht. Ja, geht doch.
Wobei, das auch eigentlich nicht richtig ist.
Julian stating, whether the response was successful.
Ja, das ist okay. Kann man verwenden.
Ja, dann ist das doch eigentlich ganz nice.
Ja, cool. Funktioniert.
So, nochmal ausprobieren.
Jetzt sagen wir hier okay an der Stelle.
Das ist wirklich eklige API, die ich da gebaut habe.
Das muss man sich was besseres überlegen.
Äh, was? Ach so, jetzt ist es okay.
Ne, ich muss doch.
Ich muss doch checken.
Weil nur wenn es okay ist,
nur wenn es okay ist, dann will ich
gleich eins noch machen.
Ja, komm.
Dann machen wir das jetzt doch so.
Master Copy Paster.
Machen wir das jetzt doch so.
So, wir bauen jetzt einfach mal random ein.
Random.
Shared. Next.
Zwischen 0 und 2.
Also 50 50. Result okay.
Bad Request.
Jetzt können wir das ausprobieren, ob es funktioniert.
Bad Request.
Funktioniert, okay.
Ja, nice.
Wir sollten vielleicht noch, damit man es besser erkennt.
Await.
Task. Delay.
Irgendwie noch eine Sekunde Delay einbauen.
Dass man auch gescheit sieht, dass da loaded und sowas.
Try to login.
Failed. Okay, ich habe mein Passwort vertippt.
Okay, nice. Hat funktioniert.
Also die API gefällt mir überhaupt nicht.
Ich habe das jetzt nur aus Zeitgründen gemacht.
Weil mir auch nichts besseres eingefallen ist.
Ich missbrauche gerade den gleichen
API Endpoint zum Anlegen des Accounts
beziehungsweise zum Testen des Accounts.
Ich weiß nicht, ob das so schön ist.
Ich probiere es erst mal.
Ich würde sagen, da waren wir doch heute.
Chat, was sagt ihr? Wir waren heute äußerst erfolgreich, oder?
Das sieht jetzt tatsächlich schon nach einem
halbwegs bedienbaren Webinterface aus.
Guck mal, sogar mehrere.
1, 2, 3, 4. Massive Pin. Save. Zack. Wurde geeditet.
Funktioniert. Oder was sagt ihr?
Ich finde, es sieht schon durchaus usable aus jetzt.
Und sogar in Light Mode, der ganz brauchbar aussieht.
Was ist das eigentlich? Ach, Place.
Diese ganzen Sachen mit Await, Async usw.
Nerven sind so unnötig kompliziert.
Naja, die mögen vielleicht ein bisschen kompliziert sein, aber
nur weil sie kompliziert sind, heißt nicht, dass sie unsinnig sind.
Aber auf der anderen Seite
machen sie auch einiges deutlich lesbarer.
Das Problem bei JavaScript ist nur,
und das ist auch der Grund, weshalb ich Probleme mit JavaScript habe.
Und das sage ich als jemand, der tatsächlich...
Ja, in C++ gibt es auch Async-await.
Nur so unnötig kompliziert, dass es echt keine Sau benutzt.
Hast du dir das schon mal angeguckt, wie das in C++ aussieht?
Da lachst du dich schepp.
Alleine schon, wenn ich das sehe.
Da weißt du schon Bescheid.
Alter, C++...
Oh Gott, diese Sprache ist so scheiße.
Ich drehe immer durch, wenn ich das sehe.
Moment, das ist gar nicht das, was ich mit Await meine.
Das ist was anderes.
Das heißt doch irgendwie Co...
Async-await bei C++.
Das ist doch ganz weird.
Co-await heißt das ja in C++.
Warum auch? Warum auch? Bitte schön anders.
Ja.
Await-resume. Awaitable.
Also in C++ ist es schon wieder so gemacht.
Es ist einfach nichts zu verstehen.
Gibt es irgendwo ein Exempel, wo das mal drin hervorkommt?
Co-await-switch. Keine Ahnung.
Ganz ehrlich, in C++ würde ich es gar nicht erst verwenden.
Javascript hat einen großen Vorteil,
was Async-await angeht.
Javascript ist standardmäßig nicht multithreaded.
Dementsprechend ist es relativ einfach,
sich zu überlegen, was Async-await macht.
In C-sharp sieht es ein bisschen anders aus,
weil dort kann das wirklich einfach nur eine asynchrone Operation sein
oder Multithreading unter der Haube.
Das ist tatsächlich nicht so einfach da durchzuplicken.
Aber in Javascript ist es doch relativ einfach.
Das, was es in Javascript kompliziert macht,
ist, dass es alte und neue APIs gibt.
Es gibt neue, in Anführungsstrichen, neuere,
mit Promises, und es gibt alte,
die sonst wie anders nur mit Callbacks funktionieren.
Also, guck mal.
In Javascript ist es prinzipiell eigentlich ganz simpel.
Es gibt neue APIs,
die nur mit Callbacks funktionieren.
Früher musstest du in Javascript sowas hier machen.
Fetch, also mit Fetch lädst du was runter,
musstest du sagen, Fetch Punkt,
denn,
ja klar, blubb, gleich irgendwas.
Ansonsten konntest du auch noch Error catchen und sowas.
Also das hier war die Schreibweise in Javascript früher.
Du hast das hier ausgeführt, und wenn das fertig war,
dann hast du das ausgeführt.
Das Problem war nur in Javascript,
wann du sowas hier hattest.
Das hat nicht mal aufgehört.
Du hattest Callback in Callback in Callback in Callback.
Und das war halt ein bisschen
unübersichtlich und auch nicht
so gut zu verstehen, was da passiert.
Und was sie jetzt gemacht haben ist,
anstatt dass du Then verwendest und dann hier drauf,
dann hier weitermachst, also das was,
so wie ich das hier geschrieben habe,
könntest du dir nehmen,
ich könnte das AwaitMatch machen,
Then dahinter schreiben,
Result, das da reinpasten,
und ich bin mir nicht ganz sicher,
ob es eins zu eins so funktioniert.
Das würde exakt das gleiche machen,
wie das was ich eben habe.
Und wenn das nur einmal nestet ist,
dann ist es auch relativ einfach.
Du hast hier ein Array,
und da würdest du ForEach mitverwenden.
Und da drinne kriegst du dann wieder ein Callback.
Dann ist dann irgendein Objekt drinne,
wo du dann sagst, hier, keine Ahnung, bla, Call,
und dann wird es langsam wirklich eklig.
Also die zwei Sachen, die ich hier gebaut habe,
sind komplett mehr oder weniger synonym.
Du kannst entweder mit Await vorschreiben
oder mit Then.
Das, was ich hier gemacht habe,
ist tatsächlich eigentlich relativ simpel.
Und zwar, sobald die JavaScript Runtime
das Await sieht,
dann macht er nichts anderes,
als einen Return aus der Funktion.
Deswegen eigentlich wäre Return Await
die einleuchtendere Sache.
So, der packt das in irgendeine Queue rein,
der schickt es ab,
der schickt weiter,
und es wird regelmäßig gecheckt,
ist dieser Call fertig.
Wenn dieser Call fertig ist,
dann springt er an dieser Stelle wieder rein
und macht das weiter.
Also unter der Haube wird das umgebaut
zu nem Return und er merkt sich die Stelle,
wo du gewesen bist und macht dann an der Stelle weiter.
Ich bin mir nicht sicher,
ob es da sicher so einen Zwischencompiler gibt,
der dir anzeigt, wie unter der Haube
das dann implementiert wird.
Also für C Sharp gibt es sowas,
in Sharp Lab zum Beispiel,
kannst du dir angucken, was der Compiler aus Async Await macht.
Das ist nichts anderes wie Basic.NET C Sharp Konstrukte,
was die da draus bauen.
Im Prinzip sorgt Await dafür,
dass du Konstrukte, die du vorher
so schreiben kannst, wie du auch
synchrone Aufrufe schreiben würdest.
Das hier wird erst ausgeführt, wenn das hier
entweder fertig ist oder fehlgeschlagen ist.
Ich finde in JavaScript ist Await
eigentlich noch ganz gut verständlich.
In .NET wird es manchmal ein bisschen komplizierter.
Wobei es da im Prinzip auch so ist.
Nur dass du dir bei JavaScript immer sicher sein kannst,
dass es da nur einen Thread
und du nicht drauf achten musst,
dass außer der Reihe noch was drauf zugreift.
Also es gibt richtig gute Videos dazu,
die das erklären auf YouTube. Sowohl zu JavaScript
als auch zu .NET. Ich kann dir jetzt keins empfehlen.
Aber ich habe auch welche geguckt früher.
Da gibt es richtig gute Videos zu.
Und ich kann es jetzt auch nur aus dem Ärmel schüttern.
Wie Assembler mit Sprungadressen?
Naja. Also wenn es einfacher zu verstehen ist,
naja.
Also in C-Sharp ist es tatsächlich ein bisschen komplizierter,
was passiert.
Wenn in C-Sharp ein Await drin ist,
dann passiert an der Stelle auch ein Return.
Das Ganze wird gequeued.
In irgendeinem
Worker Thread oder so.
Und wenn das fertig ist,
wird die gesamte Funktion einfach wieder von vorne aufgerufen.
Genau.
Also in C-Sharp funktioniert das folgendermaßen.
Der Compiler baut dir dann sowas hier drum herum.
Ich mache das jetzt nur mal exemplarisch.
Also wenn er dann ein Await sieht,
dann ersetzt er das Await erstmal durch den Return.
Das hier
queued er dann in irgendeinem Background Thread
und wartet da drauf.
Und dann gibt es sowas hier.
Da gibt es dann sowas wie Step.
Step gleich 0.
Step gleich 1.
Step gleich 2.
Und was passiert, wenn du
die Funktion quasi wieder aufgerufen wirst,
weil der Asynchrone Task gefinished ist,
dann springt er hier rein,
übergibt aber als Parameter quasi noch den Step.
Und der Step ist dann das If 1 nach dem Await.
Task und Threads haben nicht viel...
Ja...
Streng genommen nicht.
Es muss kein Thread sein, ist es aber meistens.
Es gibt... Es gibt...
Warte mal. Sharp Lab?
Guck mal, hier kann man das glaube ich ganz gut zeigen.
Schauen wir das jetzt mal.
Async.
Void M. Await.
Task.
Delay.
Jetzt los.
Ja, so.
Ach, muss ich das noch importieren?
Ja, oder so.
Genau, sowas baut
C Sharp da draus. Guck.
Also, wir machen
mal was anderes.
Ich weiß ehrlich gesagt gar nicht, wie
der Delay unter der Haube funktioniert.
Hier.
Okay, also.
Machen wir mal Console.
Log. Nicht Console. Log.
Rightline. Wir sind nicht in JavaScript.
Rightline.
Boah, ist das eklig hier. Blub.
So, also.
Ohne Await ist es
ziemlich simpel, der Code, was da unter der
Haube rauskommt. Naja.
Wait a minute. Warum?
Ach so, weil es
Async ist, ne?
Also. Ohne Async
Await sieht das relativ straightforward aus.
Also das ist das, was der Compiler draus macht.
So. Das erkennt
man eigentlich relativ gut, dass das, was
ich hier geschrieben habe, mit dem, was der Compiler draus
macht, gar nicht
so viel Unterschied ist.
Wenn wir das in Async da vormachen und hier noch Await
reinsetzen, dann wird das Ganze ein bisschen komplizierter.
Aber was man hier sieht, ist
an der Stelle, was passiert.
Die eigentliche Methode hier
wurde ersetzt durch ein Move Next
und
durch jede Menge Ifs
mit, naja, ich muss
mehrere Awaits einbauen, sonst sieht man es nicht richtig.
So.
Genau. Guckt. Jetzt. Jetzt sieht man es.
Jetzt sieht man es eigentlich ganz gut.
Ist ein bisschen hässlich zu lesen. So. Also.
Meine Main-Methode
wurde ersetzt durch ein Move Next.
Das ist das, was quasi der
dieser
Async-Scheduler-Gedöns
da im Hintergrund dann aufruft. Ich glaube,
irgendwo hier sieht man es auch.
Hier. Guck. Das ist
mein eigentliches
Main und der hat
den Aufruf von Main ersetzt durch diese
State-Machine-Bilder, bla, sonst was.
Zumindest, das wird
aufgerufen
anstelle meiner normalen Main-Methode
wird das aufgerufen. Move Next.
So. Dann geht er hier durch.
Guckt erstmal, bei welchem Step ist er.
Der erste Step ist 0.
Oder wahrscheinlich ist der erste Step 0.
Oder Default. Default. Der erste Step ist 0.
Der Default-Step. Der Default-Step
ist bis
zum ersten Await. Bis hierhin.
Ist der erste Step.
Dann
warte mal.
So. Dann
queeter das quasi
im Hintergrund dieses
Delay. Nennen wir es einfach so, ja.
Das wird dann gequeet und
es wird returned.
Niesen-Leak. Fuck.
Und es wird returned. Das heißt, diese Methode
ist jetzt fertig an der Stelle.
Was jetzt übrig
bleibt ist
dass in irgendeiner
Background-Queue jetzt dieser
Task-Delay hängt. Also
dieser Awaiter, wie das C-Sharp nennt
oder .NET nennt.
Gammelt der rum. Wahrscheinlich
in irgendeinem Thread-Pool.
Eventuell auch irgendwo anders.
Keine Ahnung, wie das dann intern implementiert ist.
Vielleicht
weiß ich was, wie das .NET macht.
Zumindest gibt es irgendwo eine Queue mit
anstehenden Tasks.
Da wird das reingequeet und hier wird returned.
Und dann
ist die Methode fertig.
Was jetzt passiert ist,
irgendwann ist diese asynchrone
Task fertig.
Dann wird das
aus der Background-Queue
rausgeholt und
dann wird wieder diese Methode aufgerufen.
Allerdings jetzt mit State
Case 0. Und ihr seht
Case 0 ist das
nächste Kommando. Das nächste
Kommando ist witzigerweise
wieder ein Async.
Jetzt macht der hier ein bisschen Optimierungsgeschiss.
Mit GoTo.
Aber im Prinzip passiert mehr oder weniger
das gleiche. Der returnt wieder.
Hier sieht man auch. Der returnt wieder.
Wartet bis das fertig ist.
Springt wieder rein und hat den State
jetzt auf die nächste Nummer gesetzt.
Nächste Nummer ist der State.
Dann springt der wieder raus.
Der returnt
immer direkt nach dem Awaiter.
Queuet das Ganze in irgendeine
Background-Queue und wenn das fertig ist
sorgt dieser
Background-Scheduler
wie auch immer genau das funktioniert
dafür, dass die Methode nochmal aufgerufen
wird und dadurch, dass es eben
einen State auf einen Schritt weiter
gesetzt hat, läuft die Methode
nicht hier oben rein, sondern
dort rein, was dann der nächste Step ist.
Also so baut er das im Prinzip im Hintergrund
um. Und ich würde sagen,
das war jetzt ganz grob und auch ohne, dass
ich hundertprozentig weiß,
wie es im Hintergrund funktioniert.
Zumindest war da jetzt
der Async-Await-Step, denke ich,
halbwegs sichtbar. Und ich würde vermuten,
dass Javascript unter der Haube
was recht ähnliches macht.
Ich glaube
sogar, die haben sich das von C-Sharp abgeguckt.
Dieses Feature. Ich glaube,
C-Sharp hat das zuerst
und das Javascript-Gremium hat dann gesagt,
oh, na gut, können wir auch einbauen.
Und dann kam irgendwann
das T++-Gremium und hat
diese Sache hier verbrochen.
Javascript hat sich gedacht, wir können das
ganze ja lesbar machen. Und irgendwann
kam dann das T++-Gremium um die Ecke
und hat sich gedacht, ach nee,
machen wir
das mal lieber irgendwie so, dass es keine Sau versteht.
Ich hoffe, man hat's
halbwegs ein bisschen verstanden, Chatge.
Konnte man mir
halbwegs folgen? So was
musste man früher selber machen.
Ja, früher hat man,
das stimmt wohl, früher hat man halt
so Sachen
nicht so komfortabel machen können.
Du musstest
dir selbst, also man macht mir jetzt teilweise
auch, du musstest dir irgendeine Queue bauen,
da hast du dann irgendwelche,
irgendwelche,
damals waren es noch tatsächlich
richtige Threads gestartet.
Damals gab's ja
oftmals, gab's ja vielleicht auch Task noch nicht.
Da hast du irgendwelche Threads gestartet,
die dann ihre Ergebnisse in irgendeine
Queue gepostet haben. Am Ende musstest
du die Dinger noch beenden und so.
Ja, war deutlich
komplizierter.
Da musstest du Threads zwischendurch joinen,
wenn du warten wolltest und so was und dann hing
dann deine UI, wenn du nicht aufgepasst hast.
Das ist
mit Async Await
deutlich einfacher, ja.
Da hat's Microsoft aber auch
ein bisschen verkackt. Das ist
genau das gleiche wie Timer.
Timer gibt's auch im .NET
Framework 30 Milliarden Stück.
Timer Classes .NET
Und das liegt einfach,
guck mal hier, die haben mindestens
acht verschiedene Timer.
Stopwatch ist nochmal eine Ausnahme.
Stopwatch ist ja zum
Ausführungszeitmessen
und so. Da gibt's nur eine tatsächlich für.
Aber es gibt
Threading Timer,
System Timer, Forms
Timer, WPF
Timer, sonst was, der
neuste Streich von Microsoft
ist, ja. Also die haben sich gedacht,
es reicht noch nicht,
dass wir hier, ja,
dass wir hier mindestens vier
verschiedene Timer haben, die anderen habe ich nicht gesehen.
Der neueste Streich von Microsoft
ist jetzt der Periodic
Timer. Also
der Timer war nicht genug,
der Timer war auch nicht genug,
der Windows Forms, den man hier nicht sieht, Timer
war auch nicht genug, der WPF auch nicht genug
und es gibt bestimmt noch deutlich mehr Timer,
an die ich jetzt gerade nicht denke.
Periodic Timer, den gibt's erst
seit, keine Ahnung, .NET
10 oder so,
Moment, sie schafft,
.NET 5, glaube ich, gibt's den erst.
Periodic Timer,
der funktioniert nochmal anders,
da musst du jetzt hier, aber der
funktioniert ein bisschen moderner, ja.
Da kannst du jetzt hier sagen, Time Span
from
Seconds, so der Timer soll
alle 5 Sekunden laufen,
der hat auch noch einen Vorteil,
Timer, erzähl ich euch gleich,
jetzt sagst du sowas wie,
While Timer
wait for next
tick async, ich find's auch
ein bisschen eklig in der Hand,
aber so würde der neueste Timer
funktionieren.
Der Vorteil von dem Timer ist,
dass wenn ihr zum
Beispiel hier drinnen ein Sleep
habt, Sleep 2,
dass der Timer diese
Varianzen ausgleicht,
also wenn ihr sagt, ihr wollt
wirklich alle 5 Sekunden,
dass der Timer ausgeführt wird,
das heißt, wenn ihr hier ein Sleep 2 drinnen habt,
dann wird der nächste Timer Tick
nicht in 5 Sekunden sein am Ende,
sondern in 3 Sekunden, also
der versucht quasi, dass es nicht so
nicht so eine große
Range gibt zwischen den Timer Ticks.
Ich bin mir gar nicht sicher, ob man das
nicht sogar ausschalten kann.
Ne,
das kann man nicht ausschalten.
Aber ich weiß nicht,
was mit Microsoft los ist, warum die 30.000
verschiedene Timer haben.
Und dass es in Unity einen eigenen
Timer gibt, wundert mich nicht. Ich könnte mir durchaus
vorstellen, dass
Games da noch ein paar andere Anforderungen haben
oder ein paar praktische Features brauchen,
die der Standard Timer nicht so hat.
Und wahrscheinlich,
genau, denke ich auch, ist der in
Unity einfach so gebaut, dass man ihn
als normaler Mensch
verwenden kann.
Wie sieht denn der Unity Timer aus?
Ich habe von Unity keine Ahnung.
Sagt mal, nach was muss ich suchen?
Timetime? Timer?
Ne.
Glastimer, hier.
Das da?
Ja, das ist auch so der neueste Streich von Microsoft
hier gewesen mit dem Periodic Timer.
Das ist ja mal 3 Standard Timer, eigentlich
5 mit WPF und Windows Forms
dabei. Und bei den anderen
Sachen hat es Microsoft halt auch ein bisschen verkackt.
Es ist ja noch nicht mal
nur das.
Dann hast du ja noch Locking-Sachen
von Hand kannst du ja noch machen.
Dann kannst du noch
Atomic benutzen.
Dann kannst du noch
irgendwelche Compiler-Keywords
verwenden, wo manchmal was bringt und manchmal
nicht.
Ja, es ist eklig.
Es ist eklig.
Dann hast du noch diese ganzen
Reset-Event-Dinger.
Auto-Reset-Event,
Reset-Event-Manual,
Reset-Event-Slim.
Also da hat Microsoft echt
über die Jahre sehr abartige
Sachen angesammelt.
Glücklicherweise braucht man
das alles nur sehr selten.
Aber das ist erstmal wir.
Wobei ich es persönlich ganz gut finde,
dass du ein bisschen mehr Möglichkeiten hast.
In Go finde ich es zum Beispiel
viel zu minimalistisch.
In Go hast du nur sowas wie
Await-Groups heißt es, glaube ich.
Und das ist halt ultra-Low-Level.
Aber mit den Go-Docs werde ich auch nie
warm. Also JavaScript
hat sich Async-Await, soweit ich weiß,
von C-Sharp abgeguckt.
Ja.
Chat,
ich muss jetzt ins Bett. Boomer müde,
Boomer schlafen. Schön, dass so viele Leute
dabei gewesen sind. Wenn es euch gefallen hat, könnt ihr mich ja gerne
followen oder könnt ihr mich ja gerne
bescheuerter Satz. Ihr wisst, was ich meine.
Könnt ihr mir ja gerne
followen.
Wenn ihr wollt, dass Bezos ins Weltall fliegen kann
und ihr noch einen Prime-Sub übrig habt,
ist ja Anfang des Monats.
Freue ich mich natürlich auch drüber.
Ihr müsst aber auch nicht mir geben. Guckt halt
nach Möglichkeit, dass ihr ihn nicht verfallen lasst.
Gebt ihn irgendeinem random Dude auf Twitch oder so.
Aber ansonsten ist es
quasi direkt Geld an Amazon überwiesen.
Ja. Aber wenn ihr in Zukunft
wieder mit dabei sein wollt,
dann könnt ihr jetzt den Follow-Button drücken.
Sehr laut muss ab und zu sein.
Und morgen muss ich
wieder arbeiten. Ich gehe jetzt ins Bett. Wir sehen uns.
Macht's gut. Bis denn.
CU. Wollen wir Outromusik?
Chat, Outromusik?
Ausnahmsweise? Hä?
Outromusik?
Äh.
Ending-Theme? Jawohl.
Outromusik.
WizardGamer. Dankeschön
für den Sub. Macht's gut, Leute. Bis
dann. CU.
