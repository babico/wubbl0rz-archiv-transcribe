Exzellent.
Chat geht auch am Start.
Ich gebe zu, Chat, die Uhrzeit Montag 12.54 Uhr ist vielleicht nicht die, wie soll man sagen, massenkompatibelste Streaming-Uhrzeit.
Aber was willst du machen?
Du könntest einfach während der Arbeit gucken und als Fortbildung abrechnen.
Easy.
Eats.
Um nicht zu sagen, ja, es gibt den Quality-is-Destiny-Schein danach.
Warum leckt der Pepo eigentlich so?
Ich wollte demnächst mit Lua schon mal was davon gehört.
Nicht nur gehört, auch schon damit gemacht.
Nie was wirklich riesengroßes mit Lua.
Immer mal wieder ein bisschen was.
Das letzte, was ich in Lua gemacht habe, ist meine Terminal-Config tatsächlich.
Gerade beim Thema sind.
Ich mache einfach mal die VM an, weil die brauchen wir jetzt eh gleich.
Oder meine VM, wie das manche Leute aussprechen.
Ja, ja, geh mal nicht auf den Sack.
Ich mag Lua nicht.
Und das liegt daran, weil Arrays bei 1 anfangen.
Alle Sprachen, wo Arrays bei 1 anfangen, sind äußerst sass.
Wobei, das sagt man, glaube ich, gar nicht mehr, oder?
Das sagen bloß noch so richtige Kack-Boomer wie ich.
Die denken, dass das cool ist, wenn man das sagt.
So, machen wir mal Updates.
Artstealungs-By-the-Way, gibt es immer Updates.
Ja, so klar.
Wir haben gestern, gestern Morgen im Stream, haben wir geupdatet.
Heute, bam, 23 Package-Updates wieder.
Lua fängt bei 1 an, ja, sage ich doch.
Richtige Boomer können Mehrwertsteuer nicht richtig aussprechen.
Okay.
Ist das so? Warum?
Also das letzte, was ich in Lua gemacht habe, ist meine Terminal-Config.
Die hat so komische Funktionen hier, wie beispielsweise.
Für 1 bis 99 Mausklicks, irgendwelche Actions, Binden und sowas.
Das ist aber vollständiges, also vollwertiges Lua-Skript.
Ein vollständiges Lua-Programm.
Meine Terminal-Config.
Ich fand es am Anfang auch echt weird, Champ, dass die eine Programmiersprache quasi benutzen, um das Terminal zu konfigurieren.
Aber jetzt im Nachhinein finde ich es eigentlich mega nice.
Das Docker-Update dürfte wohl das wichtigste diese Woche sein mit CVE-Score 10.
Ernsthaft?
Das habe ich gar nicht mitgekriegt.
Was ist bei, was ist bei Dockge?
Ne, nicht Dockge, Alter.
Das Dockge ist ja, ich wollte Docker gerade Twitch-Style aussprechen.
Da ist mir eingefallen, Dockge gibt es.
Das ist tatsächlich ein Projekt auf GitHub.
Was ist denn, was ist denn bei Docker?
Diese Woche gewesen, habe ich auch gar nicht mitgekriegt.
Kannst du aus den Containern auf den Host zugreifen?
Ach.
Easy.
Ich führe nur vertrauenswürdige Container aus.
Da ist was.
Ist das alles kein Problem?
Leaky Vessels, Container Escape, Will...
Dieses Wort.
Ich kann dieses Wort nicht aussprechen.
Ich habe so oft...
Ich schaffe es nicht.
Ich kriege das nicht hin.
Verruinabilities.
Verruinabilities.
Ja, das ist so ein Scheißwort, Mann.
Hat der Heise irgendwas zu?
Oder...
Ne.
Keck, wait.
Warum hat der Heise nichts zu?
IT-News für Profis.
Lul.
Ne, das war Golem, oder?
IT-News.
Warte mal, wir gucken.
Wir geben ihm mal eine Chance.
IT-News für Profis.
IT-News für Profis.
Golem weiß wieder Bescheid, ja.
Die Schwachstelle dafür bezieht sich auf Buildkit und das CLI to Run C.
Okay, das ist ja quasi die...
Oh, ich bin da beim Container-Ökosystem immer ein bisschen verwirrt, was die unterschiedlichen Dinger sind.
Also Buildkit ist seit neuerem, sagen wir mal so in den letzten 2-3 Jahren...
Was ist denn da los?
Warum ist die Bar kaputt?
So, das neue System, wie man Docker-Images baut, beziehungsweise eigentlich muss es ja heißen, wie man OCI-Images baut.
So, und Run C, bin ich mir gerade nicht sicher, ob das die neue von Docker entkoppelte...
Ne, das ist Container-D.
Ach, keine Ahnung.
Da blickst du doch nicht durch.
In Pocket-Speicher.
Nice, ich bin in Pocket nicht eingeloggt, aber Hauptsache in Pocket-Speicher.
Speicher in den Pocket.
So.
Ähm, also, zeig doch mal kurz her.
RF-Programmer, da gebe ich dir recht, das habe ich auch schon mal richtig vielen Boomern gehört.
Ja, Märchensteuer.
Ja, ja, das...
Ich weiß gar nicht, wo das herkommt.
Das habe ich auch schon ganz oft gehört von den...
Von etwas älteren Leuten, die sagen nicht mehr Märchensteuer.
Okay, also, lasst uns das mal kurz abchecken, was da los ist.
Ein Sicherheitsforscher von SYNC Security Labs.
Schwarz.
Identifiziert.
Dies angreift, um aus einer Container-Umgebung auszubrechen und auf das zugrunde liegende Haussystem zuzugreifen.
Möglicherweise...
Okay.
Entdeckt wurde die unter der Bezeichnung Leaky Vessels zusammengefassten Sicherheitslücken.
Äh, Vessels sind ja, sind so kleine, kleine...
Wie heißt das?
Was ist das?
Eine gute deutsche Übersetzung.
Kleine Schiffe sind das so.
Schiffchen?
Bötchen?
Boote?
Wie...
Wie...
Wie sieht das übersetzt werden?
Vessel.
Gescheit.
Schiff.
Näh.
Wobei, das kann auch ein großes sein.
Irgendwas Sicherheitslückenwohlschulden.
Okay.
Eine der Schwachstellen bezieht sich auf das CLI-Tool.
Äh.
Ja.
Das, das, das.
So, was ist das mit dem Score von 10?
Source.
Okay.
Äh.
Ja.
Score.
Ich kann's ehrlich...
Ich kann mich nicht daran erinnern, wann ich das letzte Mal einen 10er-Score gesehen hab.
Warte mal.
Wann hab ich das letzte Mal einen 10er-Score gesehen?
Mir fällt jetzt wirklich nix ein.
Ist schon eine ganze Weile her.
Also, 10er-Score ist wirklich selten.
Ich glaube, das ist auch das Höchste, was geht.
Normalerweise sind die, sind die kritisch und so, keine Ahnung, 9,3, 9,6, 8,8 oder irgendwie sowas.
Aber 10 ist wirklich selten.
Ja, oder 9, aber 10 ist wirklich selten, ne?
Okay, also, das ist für Bildgäste.
Bildgäste, das ist ein Tool.
Okay, ja.
Bildgäste verwende ich übrigens auch laufend.
Also.
Ich hoffe, ich wurde nicht gehackermant.
Aber ich benutze eigentlich bisher zum Bilden von Containern nur die Debian- und Ubuntu-Base-Images.
Ich hoffe, die sind safe.
Ich hab da aber noch gar nicht gecheckt, um was das geht.
Also, ist cool.
Also, im Prinzip geht es hier um Docker-Files.
Um es mal allgemein umgangssprachlich zu bezeichnen.
Bildgäste.
Bildgäste.
Bildgäste.
Bildgäste.
Bildgäste.
Bildgäste.
Bildgäste.
Bildgäste.
Bildgäste.
Bildgäste.
Ist der neue Weg, wie man aus Docker-Files Container-Images baut, seit den letzten 2-3 Jahren.
Vorher gab es ja in Docker eingebaut, das ganz normale Docker-Bild.
Und wenn du heutzutage Docker-Bild machst, ist das eigentlich in der Regel Bild-Kit.
Ich glaube, man kann noch irgendwie den Fallback auf das alte Docker-Bild machen.
Aber ich glaube, es ist mittlerweile sogar Default und The Way, wie man Images bauen sollte.
Uhu, Boss.
Auch wieder am Start.
Pogge.
Also.
A malicious Build-Kit frontend or Docker-File using run –mount could trick the feature that removes empty files created for the mount points into removing a file outside the container from…
Okay.
Ah, heißt jetzt im Endeffekt, ich klone mir einen GitHub-Repo oder ich mache ein Docker-Build gegen irgendwie ein Image, was ich mir bauen möchte.
Okay.
Und das…
In dem Docker-File ist…
Ist das manipuliert?
Könnte ich quasi Dateien löschen auf meinem Host-System?
Log4Shell hatte auch eine 10er.
Ja, das wusste ich jetzt aus dem Kopf nicht mehr, dass das auch eine 10er hatte.
Aber Log4Shell…
Also, okay.
Weil Log4Shell hat ja auch extrem eingebaut.
Wie war es bei Hardpleat damals?
Was hatte Hardpleat und Shell-Schock und der ganze Krempel?
Also, so 100%ig…
Die meisten Leute führen doch aber nur eigene Build-Files, also eigene Docker-Files aus, oder?
Also.
Sagen wir mal so, ich bilde zumindest zu 95% nur eigene Docker-Files.
Ist das wirklich so ein riesen Angriffsvektor dann?
Da bin ich immer super überfordert, was die Abkürzung heißt, ne?
Okay, das müssen wir uns mal ein bisschen genauer angucken.
Okay.
Recheck Mounts Path with Root after Container Run.
Okay.
A malicious Build-Kit frontend or Docker-File using run –mount could trick the feature that removes the empty file.
Ja.
Check ist auch nicht so genau.
Ja, also…
So ganz…
Ne, ne, ne, ne, run ist nicht zum Ausführen.
Run ist nicht zum… Moment, Moment, da muss ich jetzt was zu sagen.
Ne, ne, ne, ne.
Was du meinst ist…
Ne, warte mal.
Command ist es in Kubernetes.
Wie heißt der Krempel?
Entry Point.
Entry Point meinst du.
Run ist zum Beispiel…
Guck mal hier, wir haben doch hier irgendwo ein Docker-File rumliegen.
Äh, what the fuck?
Okay, der VM-Champ, der braucht unbedingt einen Docker-File.
Warum hat der denn einen Docker-File?
Jeder hat einen Docker-File.
Run.
Guck.
Run ist, wo du zur Container-Image-Build-Time quasi in dem Kontext von diesem Build-Prozess Befehle ausführen kannst, Command-Line-Befehle.
Da kannst du dann…
Da kannst du zum Beispiel…
Also, man sieht es ja nicht…
Also, hier doch, hier oben sieht man es schön, was man mit Run macht.
Mit Run machst du zum Beispiel YAM-Install für Packages, die dann Bestandteil von deinem Image sein sollen.
Was du meinst ist Entry Point, heißt es doch, glaube ich, oder?
CMD, genau.
CMD oder Entry Point, meinst du.
Das ist das, was im Endeffekt ausgeführt wird, wenn das Image dann gestartet wird.
Also, heißt im Endeffekt, wenn man ein manipuliertes Docker-File untergeschoben bekommt, können Dateien gelöscht werden.
Und wenn man ein Buildkit Frontend from an untrusted Source…
Das verstehe ich nicht so genau, was sie damit meinen.
Was meinen die?
Wenn ich zum Beispiel sage, Docker-Build und dann gegen irgendein Remote-Ding gehe oder was auch immer.
Da bin ich jetzt ein bisschen was…
Wie heißt das Ding?
Leaky Vessels.
Die werden wieder den gleichen Mist schreiben, den alle dazu schreiben.
Mit AI-generierten…
Aha.
Ah, guck mal.
Jetzt hat er Zugriff auf ETC Shadow.
Jetzt habe ich es jetzt…
Kann man das stoppen irgendwie?
Ne, kann man nicht.
Okay.
Okay.
Ja, guck, jetzt hat er keinen Zugriff drauf.
Danach macht er ein Docker-Build.
Ja, wir sehen jetzt das Docker-File an der Stelle nicht.
Und danach hast du aus dem Container raus…
Ach so!
Damit kann man dann quasi Container starten, die…
Das ist nichts, was zu Build-Time passiert.
Das ist, nachdem man das gebildet hat, kann man dann mit dem Container auf…
Sachen zugreifen.
Ach so.
Ah, ein interessantes…
Okay, zumindest…
10er-Score ist das Höchste, was geht.
Also, auf jeden Fall Docker-Updaten.
Muss ich morgen auf der Arbeit auch machen, ne?
Muss ich mal aufschreiben.
Ja, auf jeden Fall sinnig.
Okay, alles klar.
Hat sich ein bisschen was getan die letzten Tage.
Das habe ich überhaupt nicht mitbekommen.
Ich war zu sehr im MMO-Kreisel-Crime anscheinend.
Dass ich das mitbekomme.
Interessant.
Okay.
So, Package-Updates müssten durch sein.
Ich glaube, es ist alles geupdatet.
Jawohl.
Toolbox, gucken, ob alles geupdatet ist.
Pac-Man nochmal gucken, ob alles geupgradet ist.
Sollte eigentlich.
Alles upgraded.
Alles upgraded.
Wann gibt es eigentlich bei JetBrains die ersten 2024.1?
Das schon.
Das schon.
J 2024.1.
Gibt es schon?
Ach ne, ERP ist open.
Wann ist da Release-Date?
Okay, die haben erst vor 14 Tagen den ersten Test-Dings davon raus.
Ich habe vergessen, was ERP heißt, aber bei JetBrains sind es quasi die Beta-Version.
Early Access?
Heißt das Early Access?
Early Access Product oder sowas?
Lass mal kurz gucken.
Was heißt JetBrains ERP?
Early Access Program.
Early Access Product.
Early Access Program.
Aha.
Gut, dann werden wir mal rebooten.
Ja, ist auf jeden Fall ein bisschen tiefgreifender, als ich am Anfang gedacht habe.
Die Docker-Sicherheitslücke.
So, jetzt restarte ich erstmal meine VM und dann zeige ich euch, was wir uns heute angucken.
Wir müssen nämlich mal wieder unser Frontend-Game upsteppen, um möglichst einen möglichst Denglish-Satz zu finden.
Wir müssen nämlich mal wieder unser Frontend-Game upsteppen, um möglichst einen möglichst Denglish-Satz zu finden.
Wir müssen nämlich mal wieder unser Frontend-Game upsteppen, um möglichst einen möglichst Denglish-Satz zu finden.
Wir müssen nämlich mal wieder unser Frontend-Game upsteppen, um möglichst einen möglichst Denglish-Satz zu finden.
Wir müssen nämlich mal wieder unser Frontend-Game upsteppen, um möglichst einen möglichst Denglish-Satz zu finden.
Wir müssen nämlich mal wieder unser Frontend-Game upsteppen, um möglichst einen möglichst Denglish-Satz zu finden.
Wir schauen uns heute, wie auch immer man das ausspricht, Schätzen oder so, Schätzen-UI fürs Welt an.
Wir schauen uns heute, wie auch immer man das ausspricht, Schätzen oder so, Schätzen-UI fürs Welt an.
Wir schauen uns heute, wie auch immer man das ausspricht, Schätzen oder so, Schätzen-UI fürs Welt an.
Wir schauen uns heute, wie auch immer man das ausspricht, Schätzen oder so, Schätzen-UI fürs Welt an.
Wir schauen uns heute, wie auch immer man das ausspricht, Schätzen oder so, Schätzen-UI fürs Welt an.
Wir schauen uns heute, wie auch immer man das ausspricht, Schätzen oder so, Schätzen-UI fürs Welt an.
Wir schauen uns heute, wie auch immer man das ausspricht, Schätzen oder so, Schätzen-UI fürs Welt an.
Wir schauen uns heute, wie auch immer man das ausspricht, Schätzen oder so, Schätzen-UI fürs Welt an.
Wir schauen uns heute, wie auch immer man das ausspricht, Schätzen oder so, Schätzen-UI fürs Welt an.
Wir schauen uns heute, wie auch immer man das ausspricht, Schätzen oder so, Schätzen-UI fürs Welt an.
Wir schauen uns heute, wie auch immer man das ausspricht, Schätzen oder so, Schätzen-UI fürs Welt an.
Wir schauen uns heute, wie auch immer man das ausspricht, Schätzen oder so, Schätzen-UI fürs Welt an.
Wir schauen uns heute, wie auch immer man das ausspricht, Schätzen oder so, Schätzen-UI fürs Welt an.
Wir schauen uns heute, wie auch immer man das ausspricht, Schätzen oder so, Schätzen-UI fürs Welt an.
Wir schauen uns heute, wie auch immer man das ausspricht, Schätzen oder so, Schätzen-UI fürs Welt an.
Wir schauen uns heute, wie auch immer man das ausspricht, Schätzen oder so, Schätzen-UI fürs Welt an.
Wir schauen uns heute, wie auch immer man das ausspricht, Schätzen oder so, Schätzen-UI fürs Welt an.
Wir schauen uns heute, wie auch immer man das ausspricht, Schätzen oder so, Schätzen-UI fürs Welt an.
Endbereich vergeht eigentlich kein Tag, wo nicht neue Frameworks kreiert werden oder neue Sub-Frameworks oder neue Zusatzsachen für bestehende Frameworks.
Und das ist jetzt, und das ist jetzt, da fürs Welt der neuesten Scheiß.
Ich kenn das. Du bist voll outdated, overrated, jebaited.
Das hat hier im Stream schon jemand vor 14 Tagen gepostet mit dem Windows 3.11 Administrator.
Noch bevor das in den News die Runden gemacht hat, war das hier schon Thema.
Wir haben uns das angeguckt vor 14 Tagen im Stream schon.
Und mittlerweile haben es ja irgendwie alle mitgekriegt.
Also ich glaube, mittlerweile hat sogar Heise drüber gepostet, ja.
Und dann weißt du, dann ist die Sache eigentlich meistens durch.
Ich lese ja auch ganz gern Heise zwischendurch.
Weil man auch nicht, man kann auch einfach nicht alles mitkriegen.
Aber die sind meistens jetzt nicht unbedingt bei den schnellsten dabei.
Wenn es um irgendwelche Sachen...
...geht, die gerade akut sind, so, oder dass ich, ja, oder ja, gerade so rauskristallisieren.
Also da ist Heise manchmal ein bisschen lahm.
Dafür ist es als Übersicht trotzdem, finde ich, mit Golem zusammen...
...auch wenn man sich da über die Qualität der letzten Jahre schon in manchen Artikeln ein bisschen streiten kann,
da...
Fefe, muss ich ehrlich sagen, mag ich gar nicht.
Ich...
Ich glaube, was ich an Fefe nicht mache, ist, dass der immer so...
...so Belehrungssprüche mit reinpacken muss.
Keine Ahnung, ich kann mir das nicht, nicht geben.
Ich kenne einige Leute, die lesen das super gerne und seit Jahren schon. Ich, ich kann mir Fefe nicht, nicht geben.
So, jetzt haben wir geupgradet.
Aber so zur Übersicht, muss ich sagen, also die Seiten, die ich mir angucke in...
...auf Deutsch, sind tatsächlich regelmäßig mal so, immer mal drüber scrollen, was bei Heise und Golem steht.
Und wenn man wirklich auf dem aktuellen Stand sein will, gibt es eigentlich, so doof es klingt,
nichts besseres als Twitter, was nicht mal Twitter heißt, und Reddit...
...und Hacker News.
Und das nutzt du für eine Shell, oder kann man sich die so anpassen wie du hast?
Ja, kannst du.
Kannst du machen.
Also als Shell ist das ZSH...
...oder Zisch...
...oder Seashell...
...wie auch immer die korrekte Bezeichnung ist, ich sage, ich sage meistens ZSH.
Und wenn du wissen willst, wie ich die konfiguriert habe, dann kannst du auf GitHub gucken, guck mal da.
Da habe ich den ganzen Krempel. Unter anderem habe ich meine Shell-Config hier, irgendwo.
Ne.
Da.
Einmal hier meine Shell-Config...
...die ist aber, glaube ich, gar nicht so hundertprozentig aktuell, aber das ist zum größten Teil ist die aktuell.
Und dann zusätzlich für den Prompt das hier, das ist nämlich Starship.
Der Prompt.
Die zwei Sachen kannst du hier kopieren, da sieht das so aus wie bei mir, wobei das ja eine sehr individuelle Sache ist.
Okay, Massive Fivehead Chatge, habe ich die eine Datei liegen.
Ich traue mich nicht, die aufzumachen, weil ich nicht weiß, was ich da reingeschrieben habe.
Chat, guck dir kurz weg, wenn ich die aufmache.
So, oder Augen zumachen, kurz weggucken, ich will euch, ich habe keinen Bock jetzt in OBS das auszuschalten.
Ihr müsst weggucken, okay?
Ach, ich weiß wieder, was das war.
Das ist die Themenliste für meinen Teambuilding-Workshop gewesen, wo wir überlegt haben, wie man die Punkte so aufschreiben kann, dass auch normale Menschen verstehen, was ich sagen will.
Ich habe gesagt, ich will euch nicht ausschalten, aber ich habe trotzdem ausgeschaltet.
Ich kann was anderes gucken, gerade da reingucken, weil ich wusste, was das ist.
Ja, okay, dann hätten wir das ja auch geklärt.
Ich habe eine Kombination aus, das muss einfach erwähnt werden, weil ArchDinux-User müssen das immer der Welt mitteilen.
ArchDinux, tatsächlich hier in der VM, auch wenn es nicht so direkt auffällt, ist das VM im Fullscreen-Bildschirm, deswegen kann ich auch so schnell zwischen Windows und Linux umschalten.
Und hier hast du den ganzen anderen Krempe.
ArchDinux, Western.
Ähm, ZSH und Starship als Prompt.
Bisschen Customized.
Ich habe zum Beispiel die Farben ein bisschen Customized.
Ich habe den Prompt zweizeilig gemacht, anstatt einzeilig, weil ich einzeilige Prompts nicht mag.
Weiß ich, wie sieht es bei euch aus? Einzeiliger Prompt oder mehrzeiliger Prompt?
Ich habe früher auch darauf geschworen, dass mein Prompt nur einzeilig sein soll, weil es nimmt sonst zu viel Platz weg.
Aber, nachdem es kaum Unterschied macht, ob eine Zeile oder zwei Zeile.
Mittlerweile finde ich zweizeiligen Prompt viel besser.
Weil dann könnte, weil dann kann zum Beispiel hier oben das, lang werden und man ist immer an der gleichen Stelle, wo man schreibt.
Ja?
Deswegen mag ich zweizeilige Prompts.
Da habe ich aus Verständnissteuerung D gedrückt, da.
Also, wie gesagt, ich war früher auch totaler Fan von einzeiligen Prompts, aber mittlerweile wieder zweizeiligen.
Weil ganz ehrlich, du brauchst, du brauchst die, den Platz nicht.
Wenn du was, wenn du was ausführst, was Platz braucht, ja?
Irgendein Programm.
Wenn du ein Programm mit viel Output, dann machen es die Promptzeilen nicht aus, weil dann gibt es halt eh das aus, ohne immer zwei Promptzeilen dazwischen zu machen.
Ja, guck hier da.
Das ist egal.
Dann benutzt du trotzdem das ganze Terminal.
Erst, wenn ich abbreche oder was Neues mache, habe ich wieder zwei Promptzeilen.
Also, im Prinzip verschenkst du halt genau eine Zeile und dafür hast du die Übersicht.
Also, ich finde, finde das nicht schlecht.
Kommt die Größe, kommen auf die Größe des Bildschirms an?
Also, ich habe einen ziemlich kleinen Bildschirm.
Keine hohe Auflösung.
Und ich habe eine relativ große Schriftart.
Also, ich glaube, viel weniger Platz wie ich im Terminal werden die wenigsten haben.
Das ist 1080p von der Auflösung her nur auf einem 25 Zoll oder so Bildschirm.
Irgendwie in dem Dreh.
Und dann habe ich eine relativ große Schriftgröße.
Also, mein Terminal ist schon ziemlich fett.
Und sogar da kannst du zwei Zeilen, kannst du zweizeilig das Ganze benutzen.
So, mein eigenes Video ist wieder am Start.
Nice.
So muss das sein.
Okay.
Wo bin ich denn stehen geblieben, Leute?
Ah ja, genau.
Das, was wir eigentlich machen wollten.
Und zwar, es vergeht ja kein Tag, wo nicht irgendwelche JavaScript-Libraries erscheinen oder sonst was.
Und ich bin ja kleiner Svelte-Fanboy.
Beziehungsweise eigentlich Svelte-Kid.
Chillfreak, ja lass einfach im Hintergrund laufen.
Mehr Views, keck mich.
Ja, ich bin ja Svelte- und Svelte-Kid-Fanboy geworden, muss ich sagen.
Ich bin kein hauptberuflicher Frontend-Entwickler.
Deswegen geht vieles von dem ganzen JavaScript-Ökosystem schon ein bisschen an mir vorbei.
Ich habe bis heute beispielsweise nicht den Unterschied zwischen React und Solid.js gecheckt.
Wobei doch, doch, ich glaube, ihr könnt ja mal sagen, ob das stimmt.
Ich glaube, der Unterschied zwischen React und Solid ist, also das erste Mal, dass das eine das offizielle von Facebook ist.
Und das andere quasi eher ein Klon davon.
Der große Unterschied zwischen React und Solid.js ist, glaube ich, dass Solid.js kein JSX verwendet.
Im Vergleich zu React.
Der Rest ist, glaube ich, ziemlich gleich.
Aber wie gesagt, ich habe keine Ahnung.
Ich habe beide so nicht großartig verwendet.
Also meine Frontend-Sachen habe ich lange Zeit in Vue.js gemacht und jetzt schon ein bisschen länger in Svelte.
Wenn ich mal was machen muss.
Also Svelte in Kombination mit Svelte-Kid.
Und mir gefällt das wirklich gut.
Eine Sache, die ich ein bisschen vermisst habe, ist, wie soll man sagen, was halbwegs konsistent ist für Web-UIs, ohne dass man ein super krasser CSS-Checker sein muss.
Es ist mittlerweile bei mir nicht mal ganz so schlimm mit CSS.
Also ich kriege jetzt, ich kriege in CSS die meisten Sachen mittlerweile halbwegs hin.
Ich habe mittlerweile auch den ganzen Kram halbwegs gecheckt.
Was Flex und wie heißt das andere?
Flex versus Grid und so Dinger.
Ja, also das kann ich mittlerweile ganz gut verwenden.
Aber ich bin weit davon entfernt, der CSS-Zauberer zu sein.
Ich schreibe in zwei Tagen eine Klausur und lasse mich hier lieber ablenken.
Dazu kann ich dir kurz was sagen.
Weißt du, was selbsterfüllende Prophezeiungen sind?
Oder ich nenne das einfach. Nein, nicht direkt.
Mit Bann.
Äh, nicht, wir machen keinen.
Also ich banne niemand und wir machen das heute auch nicht mit Bann.
Weißt du, was damit gemeint ist?
Mal ein Beispiel.
Ich habe früher es gehasst, in der Schule Präsentationen zu halten.
Dementsprechend habe ich mich nie darauf vorbereitet, wenn ich irgendwas zeigen musste.
Und dementsprechend beschissen wurden die ganzen Präsentationen auch.
Und dadurch, dass ich wusste, dass es beschissen wird, habe ich mich noch weniger darauf vorbereitet.
Und die Präsentationen wurden weiterhin beschissen.
Also ich habe quasi selbst dazu beigetragen, weil ich schon vorausgeahnt habe, dass es beschissen wird,
habe ich selbst dafür gesorgt, dass es beschissen wird.
Versteht man, was ich meine?
Deswegen, ein bisschen Vorbereitung ist immer deutlich besser als gar keine Vorbereitung.
Deswegen wäre es sinnvoll, auch wenn man überhaupt keinen Bock hat, sich die Sachen im Vorfeld ein bisschen anzugucken.
Und mittlerweile mache ich Präsentationen.
Mache ich Präsentationen eigentlich ganz gern.
Ich mag das.
Also ich weiß auch nicht, was mit mir los ist.
Normalerweise habe ich keinen Bock, irgendwie groß mit anderen Leuten zu interagieren.
Aber beim Präsentationen halten ist das ein bisschen anders.
Da steht man ja, man interagiert ja nicht so im Austausch mit denen, sondern man zeigt was.
Und das mache ich tatsächlich ganz gerne.
Wahrscheinlich, weil ich es irgendwie, wahrscheinlich weil es mir mittlerweile irgendwie gefällt, so die Aufmerksamkeit von 20 Leuten zu haben.
Ich weiß auch nicht, zumindest seitdem ich mich damit abgefunden habe, dass ich es scheiße finde, hat es, also dass ich wusste, dass ich es scheiße finde, aber es trotzdem ganz sinnvoll ist, sich anzugucken, hat sich es nach und nach verbessert.
Und mittlerweile mache ich es ganz gern.
Und man glaubt gar nicht, man glaubt gar nicht, wie viel es bringt, wenn man, obwohl man keinen Bock hat, sich einfach ein bisschen vorbereitet.
Ja?
Auf ein Thema, wo man keinen Bock hat, jetzt keine Lust hat, zwei Tage, acht Stunden sich da reinzuhängen, das verstehe ich, das ist auch meistens, das habe ich auch nie geschafft.
Aber es ist ein enormer Unterschied, bevor man was machen muss, ob man sich 30 Minuten damit beschäftigt hat oder gar nicht.
30 Minuten kann man zumindest oft, also oftmals, kann man, wenn man sich mit dem Thema 30 Minuten beschäftigt hat, kann man zumindest vordergründig so tun und Leute davon überzeugen, als wüsste man, wovon man spricht.
Wenn man sich null Minuten damit beschäftigt hat, geht das nicht.
Natürlich ist es ein riesen Unterschied, ob man, ob man sich tatsächlich zwei Tage mit was im Detail beschäftigt hat als 30 Minuten.
Aber oftmals geht es gar nicht so sehr darum, zu zeigen, dass man wirklich super krass tiefe Ahnung hat, weil die anderen Leute wissen das auch nicht.
30 Minuten mit was beschäftigt reicht in der Regel erstmal, zumindest um sich ein bisschen, bisschen reinzufinden.
Ja, also, sonst, sonst erfüllst du die, du denkst, es ist scheiße, es ist kacke, das wird nichts.
Und dadurch, dass du dich quasi im Vorfeld schon das antizipierst, dass das so wird, dann wird es auch so.
Ja, okay, P-Thread, das ist ja wirklich, was macht ihr denn, irgendwelches Low-Level-C-Gedöns?
Warum programmiert man im Jahr 2024 noch auf Blatt Papier?
Und by the way, niemand weiß aus dem Kopf die ganzen Overloads und die ganzen Parameter für alle möglichen Funktionen.
Ich muss da auch jedes Mal nachgucken.
Und auf dem Papier programmieren, das ist ja wirklich, das ist ja wie bei mir in der Berufsschule noch.
Bei mir in der Berufsschule, da mussten wir auch teilweise C auf einem Blatt Papier machen, so richtig dumm, Alter.
Richtig hängengeblieben, so richtig realitätsfern.
Warum lässt man das auf dem Papier machen, wo sind wir denn?
Wo sind wir, Leute?
Ich hoffe, ihr seid auch unter Linux unterwegs.
Und nicht aus historischen Gründen unter, fragt mich nicht, ähm, HPOX oder irgendwelche Sachen.
Irgendwelchen uralten Unix-Kram.
Wie ist deine Meinung zu Embedded Software-Entwicklung?
Das ist ungefähr die, das ist, das ist ungefähr so eine vage Frage wie, Max, was denkst du über Papier-Herstellung?
Äh...
Was denk ich über Embedded Software-Entwicklung?
Ich denke, dass das sehr spannend sein kann.
Aber...
Man...
Ja...
Die passende Person dafür.
Die passende Person dafür sein muss.
Die das mag.
Weil Embedded Software-Entwicklung ist in der Regel ultra low-level.
Das, das ist meistens noch deutlich anstrengender als das, was wir mal hier schon im Stream öfters auf dem ESP32 gemacht haben.
Hier auf dem ESP32 ist es zwar auch schon low-level, aber noch ein bisschen, sagen wir mal, noch ein bisschen abstrakt, ja.
Wir können das meiste, können wir die Arduino-Sachen verwenden und die ESP32-Standard-Library ist auch ziemlich gut.
Was sie da mitbringen.
Aber so richtig Embedded-Steuerung-Sachen ist nochmal eine Nummer härter.
Okay, weiter geht's.
Also, wir kommen jetzt mal zu der eigentlichen Geschichte.
Ich labere jetzt schon wieder 40 Minuten rum.
Also, ich benutze ja schon eine Weile, wenn ich mal Frontend-Sachen machen muss.
Svelte und SvelteKit, also eigentlich hauptsächlich SvelteKit.
Also, du kannst SvelteKit nicht ohne Svelte benutzen, aber du kannst Svelte ohne SvelteKit benutzen.
So rum.
SvelteKit ist ein...
Wie heißt das offiziell?
Ein Full-Stack.
Framework.
Letztendlich kannst du damit Backend und Frontend in einem machen.
Ich persönlich verwende es aber nur für den Frontend-Part.
Ich mache meine Backends mit ASP.NET Core und, meistens zumindest,
es sei denn, es ist irgendeine Sache, die auf Microcontroller läuft oder zur Abwechslung irgendwas in Go oder so.
Aber das meiste mache ich tatsächlich in ASP.NET Core.
Und meine ganzen Frontend-Sachen,
klingt jetzt viel mehr als es ist, ja, kommt nicht so oft vor,
mache ich ins SvelteKit.
Und eine Sache, die ich persönlich ein bisschen nervig ans SvelteKit bzw. Svelte bisher fand, ist,
dass die ganzen UI-Libraries, die es gibt und gab,
die haben mich alle nur so semi-überzeugt.
Das letzte, was wir ausprobiert haben, war Skeleton UI.
Das war das letzte, was wir ausprobiert haben.
Das fand ich ganz okay.
Aber hundertprozentig überzeugt hat es mich auch nicht.
Mittlerweile haben die zumindest ein paar Themes, die ganz brauchbar aussehen.
Aber das hat mich so ein bisschen an Material Design,
ohne richtig Material Design zu sein, erinnert, das Ganze.
Also war nicht so richtig mein Fall.
Wobei es schon ganz nice war.
Aber war nicht so das.
Zumindest, jetzt der neue heiße Scheiß fürs Welt,
muss Schätzen UI, der Svelte-Port von Schätzen UI sein.
Wie spricht man das überhaupt aus?
Schätzen UI.
Schätzen UI.
Ursprünglich wurde das Ganze entwickelt für React.
Oder beziehungsweise ist hauptsächlich immer noch für React.
Aber es gibt mittlerweile schon Ports für die meisten anderen Frontend-Frameworks.
Und irgendjemand hat jetzt was erstellt fürs Welt.
Allerdings muss man sagen, das ist gar kein...
Ups, das ist das Falsche, was ich aufgemacht habe.
Das ist gar kein wirklicher Port im eigentlichen Sinne.
Das...
Also ich hab da nämlich letztens ein Video drüber gesehen.
Eigentlich ist es nur als Port entstanden von Schätzen UI.
Weil sie stehen ja auch, this is an unofficial Port.
Es ist eigentlich nur entstanden als Port.
Mittlerweile ist es, glaube ich, komplett eigenständig.
Und basiert auch rein auf Svelte-Geschichten,
ohne irgendwie da auf was zurückzugreifen.
Also es ist gar kein Port im eigentlichen Sinne.
Es ist eher inspired by.
So, und...
Soweit ich das verstanden habe,
der Vorteil davon,
zu beispielsweise sowas wie...
Skeleton UI,
ist folgender.
Mal gucken, ob das stimmt, was ich jetzt erzähle.
Das ist das, wie ich das im Vorfeld so verstanden habe.
Wir werden es ja gleich ausprobieren.
Also, es gibt beispielsweise UI-Frameworks für Web-Anwendungen.
Sowas wie, sagen wir mal, zum Beispiel Skeleton UI.
Das besteht aus fertigen Svelte-Components.
Nicht ausschließlich.
Aber da hast du dann zum Beispiel sowas wie...
Keine Ahnung...
Tabs oder so.
Hier, sowas.
Kannst du dann auf deiner Webseite bauen.
Und das sieht dann Source-mäßig so aus.
Du inkludest quasi so eine Component-Tab-Group,
Component-Tab und dann kannst du das hier so zusammenbauen.
So.
Eines der Sachen, die mir schon aufgefallen ist,
bei solchen so Component-basierten UI-Frameworks ist,
erstens fehlt immer irgendwas.
Zweitens verhält sich immer irgendwas nicht so, wie du es gerne hättest
und du kannst relativ schlecht was dran machen.
Und dementsprechend baut man eigentlich drittens
fast immer nochmal einen eigenen Wrapper um den Wrapper drum herum.
Also im Prinzip, das hier ist eine Svelte-Component,
die im Endeffekt aus Svelte-Code besteht, also HTML und JavaScript.
Und weil sich das dann oftmals nicht so verhält, wie man will,
beziehungsweise man gerne hier unter den Tabs immer den gleichen Abstand hätte
oder dass man beispielsweise noch Icons daneben haben möchte,
was die offizielle Component nicht unterstützt oder was auch immer,
rappt man das dann nochmal in eine eigene Tab-Groups-Component.
So.
Und das ist mir bei vielen UI-Sachen, das ist mir bei Vue damals auch schon aufgefallen,
dass man dazu neigt, das so zu machen.
Und deswegen fand ich das in dem Video,
was ich hier über Schätzen-UI gesehen habe, eigentlich ziemlich nice.
Und zwar, die haben gesagt, ey,
warum überhaupt Component-basierte Sachen, die du includest,
warum nicht einfach in das Projekt den Source-Code includen,
den du sonst rappen würdest und selbst daran dann weitereditieren.
Also soweit ich das verstehe, ist das keine fertige Komponenten-Collection,
die man includet bei sich, sondern,
man includet quasi den Source-Code dieser Komponenten.
Man includet hier nicht beispielsweise Tab-Group,
sondern man würde halt einfach den Svelte-Source-Code includen,
der, ja, aus der sich Tab-Group zusammensetzt.
Und dann kann man daran weitereditieren, so als hätte man das selbst erstellt
und muss es nicht nochmal extra rappen um den Rapper.
Soweit, so gut.
Natürlich hat's auch Nachteile, soweit ich das verstanden habe,
hat es auch Nachteile, weil zum Beispiel,
wenn sich was updatet,
wenn sich was updatet in den Komponenten,
dann kriegst du die Updates nicht einfach mit,
wenn du die Dependency auf die UI-Library updatest,
weil du benutzt ja keine fertige UI-Library,
du benutzt ja quasi nur ein, wenn du es so willst,
ein Code-Generator für, für, für UI-Elemente.
Der Karl ist doch Dankeschön für den Sub.
So, so ist das, soweit habe ich das verstanden im Vorfeld,
also, dass das so ist, wie ich euch versucht habe,
gerade zu erklären, ob das jetzt wirklich so ist,
lass mal, da müssen wir mal gucken.
Ich muss mal kurz schauen, ob ich,
ah, ich habe gestern ein paar Subs übersehen, sad girl.
Wie gesagt, nachdem du das ja selbst alles nochmal 30 Mal rappst,
ist das vielleicht gar nicht so schlimm,
vielleicht ist das echt der bessere Ansatz.
Mal gucken, ob das stimmt.
Also, wir gucken uns natürlich Skeleton-UI an,
wir gucken uns das hier an.
Die haben standardmäßig ein Dark-Mode, ein Light-Mode,
das finde ich schon mal sehr nice,
und die Komponenten kommen relativ dezent gestylt daher,
was ich persönlich auch gut finde.
Es gibt UI-Frameworks, die sind so,
vollgeladen mit,
ja, jedes Element sollte an der Stelle dann einen blauen Schatten haben
und dann sollte es da einen orangenen Schatten haben
und wenn du das dann nicht willst,
kriegst du es gar nicht mehr richtig raus
und es ist dann oftmals nicht konsistent,
weil du dir vorstellst, ja,
grün heißt bestätigen und die sagen,
nee, bestätigen ist blau und so.
Deswegen finde ich eigentlich ganz gut,
dass die Sachen hier nur relativ dezent gestylt daherkommen.
Man kann ein bisschen vorkonfigurieren,
bevor man sich das runterlädt, kann man sagen, man,
man möchte Primary,
im Prinzip kann man die Primary Color auswählen,
aber ich, ich werde bei schwarz und weiß bleiben,
was ich immer ganz gute Base empfinde
und nur Color benutzen an der Stelle, wo es halt Sinn macht,
zum Beispiel bei irgendeinem Delete-Knopf oder bestätigen Knopf
und standardmäßig gibt es das Ganze wohl in Dark und Light,
was das für ein Knopf ist, weiß ich nicht.
Ah, man kommt beim Ersteller auf,
muss ich mich auch noch daran gewöhnen,
dass es jetzt X ist und nicht Twitter.
So, und hier gibt es eine Übersicht,
was die alles für Komponenten schon fertig gebaut haben,
die man includen kann bei sich ins Projekt.
Da ist mehr oder weniger alles dabei, was man braucht.
Die ein oder anderen Sachen fehlen wahrscheinlich,
aber für die meisten Webseiten ist es, denke ich, ganz, ganz okay.
Was ich vielleicht noch sagen
oder vielleicht noch zur Entstehungsgeschichte erklären kann
von, von diesem Projekt ist,
wie gesagt, ich habe,
ich habe ein Video geguckt von dem Autor
und hat mich das inspiriert,
dazu es mal auszuprobieren.
Ursprünglich sind die gestartet als Svelte-Klon
vom offiziellen Schätzen-UI,
wo die Seite übrigens zum Verwechseln ähnlich aussieht,
aber das hier ist jetzt React
und das hier ist Svelte.
Also, man sieht, dass man,
man sieht, dass man nicht so viel Unterschied sieht.
Ja, außer dass das Offizielle, glaube ich,
noch ein bisschen mehr Komponenten hat als,
als das hier, okay?
So, zumindest muss es so sein,
wie ich das,
wie ich das aus den Videos verstanden habe, ist,
das hier ist als,
ursprünglich quasi als Klon entstanden von diesem hier.
Also, der hat quasi das offizielle React,
die, die, die Chat,
Chat-CN-Library genommen von React
und hat die quasi versucht zu klonen,
zu portieren nach Svelte
und damit halt auch die Elemente zu übernehmen.
Ich glaube sogar,
mittlerweile haben sie ein paar abweichende Elemente drin.
Daraufhin ist ihm aufgefallen,
dass das gar keine so schlaue Idee ist,
React-Sachen zu portieren nach Svelte
und daraufhin haben sie angefangen,
das unter der Haube auszutauschen
und daraus sind entstanden
einmal Melt-UI,
das sind quasi die Low-Level-Komponenten,
aus der sich Chat-CN zusammensetzt
und dann noch,
äh,
Bits-UI,
was die Svelte-Komponenten, äh,
Komponenten sind.
Also das,
Melt sind irgendwie die, die, ähm,
die, die, die Logik-Funktionen von nem Switch beispielsweise,
Bits-UI ist dann die Implementierung von nem Switch
und, äh,
Chat-CN-UI ist dann irgendwie die Svelte-Komponenten,
fragt mich nicht, keine Ahnung!
Scheiß drauf!
Ich hab's nicht so genau gecheckt,
was das eigentlich,
was eigentlich der Unterschied dazwischen ist.
Zumindest,
in der Regel verwenden sollte man das,
weil das die, äh,
der Bundle aus dem ganzen Kram ist.
Ob man jetzt weiß, worauf basiert,
ist, ist, denke ich, ziemlich wurscht.
Ich würde interessieren, ob du Chat-GPT bei der Arbeit benutzt.
Ja.
Die haben sich bei uns auf der Arbeit sogar
nen eigenen Chat-GPT-Klon von Microsoft gekauft.
Das nennt sich dann
Azure...
AI Services oder sowas.
Und da sagt Microsoft,
die Sachen, die dort eingegeben werden,
die bleiben vertraulich.
Ich glaub denen ja kein Wort,
aber ey,
wenn das in irgendeinem Business-Vertrag drin steht,
dann ist das so.
Ich glaube, ich weiß jetzt wieder,
was der Unterschied ist zwischen den Projekten.
Also das hier sind die, ähm,
genau, das ist, das sind die,
das ist die Low-Level-Library,
aus der sich die UI-Komponenten zusammensetzen.
Bits sind Svelte-Komponenten,
ungestylt.
Und, ähm, Chat-CN Svelte sind dann quasi
ordentliche Komponenten mit Dark- und Light-Themes
und CSS-Kram schon dabei.
Das heißt, in der Regel,
wenn wir das verwenden,
was man aber auch sehen wird ist,
es hat mich nämlich auch erstmal verwirrt,
dass es beispielsweise hier schon Komponenten gibt,
die es noch hier,
noch hier nicht reingeschafft haben.
Zum Beispiel haben die hier irgendwie einen Pin-Input,
hab ich gesehen.
Den gibt es beispielsweise hier noch nicht.
Was auch immer.
Wir verwenden jetzt das
und gucken uns mal an, wie das funktioniert.
Das heißt als erstes,
ich hab schon wieder alles vergessen, ne.
Ich weiß schon gar nicht,
wie man überhaupt ein Svelte-Projekt erstellt.
Gehen wir mal hier rein.
Repos,
mkdir,
packw,
champ,
lul,
vollkommen egal, wie das Ding heißt.
Ich muss die,
ich muss die Projekte natürlich auch immer so nennen,
dass ich sie mit Sicherheit wiederfinde danach.
So,
npx,
ne,
ähm,
ja, so ungefähr.
So ungefähr.
Also,
ich glaub,
also Melt
ist, glaube ich,
die Low-Level-Library mit den Funktionen.
Bits
ist was aus der Low-Level-Library quasi
UI-Elemente baut
und
Chat-CN ist dann die gestylten
UI-Elemente von Bits.
So rum.
Das ist halt ganz normaler Frontend-Wahnsinn.
Da muss man sich nicht wundern.
Das, das wird da so gemacht.
Ich hab vergessen,
wie man das Svelte-Kit-Projekt anlegt.
Das war NP,
wenn man das jetzt so richtet.
Hahaha.
Ich hab einfach mal die Tastatur Faceroll gerade,
so wie es aussieht.
Ahahaha.
Swimbleble...
Ich kann halt schreiben.
Ihr Creating-Projekt.
Das da.
NPM Create.
NPM Create.
Ah ja.
Okay.
NPM Create Svelte and Latest KGW Champ.
Bester Name fürs Projekt.
fürs Projekt. Need to install the following packages. Create Svelte. Yes. Es ist Frontend
Zeug. Wir müssen jetzt eh das halbe Internet runterladen, damit das funktioniert. Skeleton
Project? What? Nein. Svelte Kit Demo App. Ja, das ist okay. Add Type Checking. No. Brauchen
wir alles nicht. Raw JavaScript. Select Additional Options. ESLint Pretty App Playback. Tests.
Alter. Ha. Lul. Ich glaube es geht los. Als würden wir hier irgendwas testen. NPM Install.
Internet Download läuft. Das brauchen wir nicht. Das brauchen wir gleich. Was macht
es da eigentlich gerade im Hintergrund? Timing. Ah, okay. Es lädt das Internet runter. Alles
klar. Moment.
Vier Packages nur. Was ist denn da los? Ne. Ha. Ich habe schon gedacht. Ich wollte schon
gerade sagen. Ein neues JavaScript Projekt, was nur vier Dependencies hat. Das glaube
ich aber erst, wenn ich es sehe. Also. Ja, so ist es. 53 und das ist noch wenig, Leute.
Wir haben nur 53 Dependencies. Also, komm. Jetzt mal. Da geht schon noch mehr. Ich wette
auch, die erste Sache, die ich installiere, da habe ich dann 450 Abhängigkeiten oder
so. Okay. Dann machen wir mal hier. Starten wir mal Visual Studio Code. Schieben das da
auf den zweiten Monitor. Yes, yes. Wir trusten dem Auto aber richtig hardcore trusten wir
den. Und dann openen wir das Ganze mal in Chrome. Welcome to your new Swellkit App.
Excellent. Das meiste werde ich eh wieder rausschmeißen. Hier, aber das ist so. Sieht
halt die Swellkit Demo App schon seit einer ganzen Weile aus. About. Was ist Swerdle?
Ah. Ein Wörtel-Ding in Swellt. Furchtbar toll. Genau. Das habe ich jetzt gebraucht.
Okay. Swellkit Demo App. So. Und da probieren wir jetzt mal. Wir gucken uns mal kurz die
Dependencies an. Sieht man das Package, Jason? Warum ist da? Chat, ich habe immer noch nicht
den Unterschied verstanden zwischen.
Def Dependencies und Dependencies. Also ich weiß prinzipiell, dass das eine dann für die
Anwendung ist, das andere für während der Entwicklung. Aber warum habe ich beispielsweise
einen Font als Def Dependency? Ist das hier, ist das hier der Font? Aber wenn es, wenn das
der Font ist, warum ist es dann eine Def Dependency und keine richtige Dependency? Ich werde es
nie verstehen, oder? Kriminell, danke schön für den Sub.
Javascript-Sachen, Frontend-Geschichten wahrscheinlich nie checken. Da bin ich eindeutig zu noob dafür.
Aus irgendwelchen Gründen meint, aus irgendwelchen Gründen meint Visual Studio Code, dass es das
ausführen kann. So. Also. Wir machen das Ganze erstmal leer. Node-Modules interessieren uns nicht.
Wir machen das Ding erstmal leer. Roots. Alles weg hier. Lib. Ja, wunderbar. App HTML ist okay, das kann so
bleiben.
Page.js ist das eigentliche, was uns interessiert. Was? Pre-Render gleich true. Ach, das ist.
Ah ja, okay. Das ist das, wenn man das am Endeffekt dann bildet und auf Web-Server schiebt. Okay.
Dann machen wir das doch mal alles weg. Und machen da nur unseren Kram hin. Diff. KW.
Excellent. So, wir haben immer noch einen Header. About. Schmeißen wir weg.
Delete. Delete. Counter. Delete. Header. Delete. Oh, jetzt habe ich es kaputt gemacht.
Layout brauchen wir. Layout. Layout wollen wir ja auch nichts layouten. Style brauchen wir nicht.
Brauchen wir nicht. Das können wir so lassen. Header kommt weg. Style CSS weg. So. Perfekt. Raw Webseite.
Okay.
Dann können wir erst mal anfangen, das auszuprobieren.
Page.
So, was wir jetzt vielleicht machen, dass es ein bisschen mehr in der Mitte ist. Ich habe schon eine Weile frontendmäßig nichts mehr gemacht, deswegen werde ich es jetzt voll verkacken.
Wie ging das jetzt noch mal, dass man das, dass man links und rechts einen ordentlichen Abstand hat?
Margin Y2?
Ne.
Ach, Moment.
Ich habe hier noch gar kein Tailwind dabei. Kann das?
sein ja deswegen kann ich ach so alles klar
die y ist hoch genau mx2 müsste sein aber ich habe noch gar kein teil dabei
deswegen funktioniert das auch nicht ja das könnte es erklärt dann gucken wir
uns doch mal an bevor wir jetzt hier ein neues projekt
wie sagen die dann getting started wie wie funktioniert das hier ins
installation das weltkrieg das frauen das haben wir gemacht
ed tailwind css genau das brauche also ich muss noch mal stoppen das ganze
erzählen css sieht jetzt die plus 7 install dependencies japan war auch
klein normal jawohl setup was das machen wir benutzen dollar wir benutzen dollar
lipp
randa cli npx schätzen in it okay macht das jetzt einfach mal wo wir
präsentieren wir präsentieren das command ist ums weltkrieg projekte
ständen css in einer folge haben wir das command install dependencies
override your existing termin config and app was zum teufel ist das
pcss und entschädigt alter appauss css ist das glaube ich oder meine güte
yes would you like to use type script know which style would you like to use
default oder new york was der unterschied an furtz ja ich will
frankfurt benutzen offenbach will ich haben okay die folge ist ein bisschen
better
und New York ist ein bisschen
kondenster.
So. Ey, wir wollen
Default haben. Default.
Which color would you
like to use as a base color?
Ich weiß nicht mal, was
Slate für eine Color ist.
So was Graues oder so,
hä? Grau.
Okay, Grau? Grau?
Neutral oder Grau?
What the fuck?
Was war... Alter!
Gibt's da vielleicht
ein Beispiel für?
Ne, in Themes sieht man das ja eben nicht.
In Themes kannst du
auswählen, was du für Primary Colors
verwenden möchtest.
Aber nicht, was
die... Ach, kannst du mal...
Aha.
Zink wollen wir haben.
Wir wollen Zink haben.
Zink.
Where is your
global CSS file?
Source up PCSS.
Jawoll. Keine Ahnung.
Where is your
Tailwind-Config located?
Tailwind-Config. Ja, okay.
Root. Jawoll.
Config in import alias for components.
Lib components. Perfekt.
Lib
utils. Auch gut.
Write configuration to components
JSON. Yes.
Ähm...
TS-Config? Ich will kein
TypeScript. Ich hab explizit
gesagt, no! No TypeScript
support.
Hat das jetzt...
Ich glaube, das hat funktioniert.
Das ist einfach nur ein dummes
Output. Ich glaube, es hat
trotzdem funktioniert.
In der TS-Config muss stehen, TS gleich false.
Was? Ähm...
Your Tailwind-Config
has been renamed
to Tailwind-Config.js.
Nö. Wurde es überhaupt nicht.
Cheapated.
Es hat sich überhaupt nichts getan gerade.
Okay, Leute.
Wir machen das nochmal.
Wir machen das nochmal.
rm
minus rw.
Okay, weg.
Wir löschen das. Wir löschen das nochmal.
Wir machen das wirklich nach der offiziellen
Anleitung. Also.
Create App. Nein.
Create App.
Hack W-Champ.
So.
Use the Svelte Kids here to create a new
project. Kann man nicht so was
sagen wie empty app
oder so? Nee, anscheinend nicht.
Svelte Kids Demo App. No, wir wollen
kein TypeScript.
Wir wollen auch kein BriefView.
Für Svelte 5.
Nee, Chat, ihr...
Ach. Ich hab mich
chebaden lassen.
Ich hab gedacht, das wäre noch ein Überbleibsel
von Skeleton UI gewesen.
Die Benahmung im...
Ach, meine Güte.
Das ist ein leeres Projekt.
Ach so. Ja, okay. Jetzt macht es Sinn.
Skeleton Project. Nein.
Kein TypeScript.
Kein Svelte 5 Preview.
Okay, wunderbar.
Haben wir gemacht.
Add Tailwind.
Hack W-Champ.
Machen wir erstmal npm install.
Das darf man ja nie vergessen.
Ja, Skeleton UI baut
aufs Welt auf.
Okay.
npm install. So, jetzt
Tailwind CSS hinzufügen.
Jawohl.
Nochmal installen.
Haben wir gemacht.
Setup Alias. Jaja, das müssen wir
nicht machen. Glaube ich.
Weil
ich will ja das
Default verwenden.
Okay.
Yes.
No.
Default. Zink.
Where is your global CSS
File? Ich habe ehrlich gesagt keine Ahnung, wo mein
global CSS File ist.
Mein global CSS File ist
unter Source.
P
P. Ne, ab PCSS.
Ist doch richtig.
Where is your Tailwind Config
Tailwind Config
Punkt
C-J-S.
Ja. Ja.
Ja.
Alter.
Was will das? Das ist ja
Threehead-Tool. Was will das von mir?
No TS-Config-File
found. Ja, und?
Ich will ja auch kein
TypeScript benutzen.
Außerdem stimmt das nicht. Hier wurde überhaupt nichts renamed.
Und
irgendwas hinzugefügt hat es auch nicht.
Hat es irgendwas in Lib hinzugefügt?
Nö.
Okay. Was? Was? Okay. Okay.
Da müssen wir mal
den auf GitHub gucken.
Das geht ja schon
gut los.
Sind wir schon am Start.
Äh.
Pix Support.
What?
Oh, was muss ich jetzt machen?
Typechecking with TypeScript
or JSDoc is required.
The CLI prefaces this
with the...
Okay.
Ist im Endeffekt, ich darf das Ganze noch mal
machen und muss nicht
TypeScript anschalten, sondern
ich muss
das andere anschalten, oder wie?
Das ist super
intuitiv.
Durchschnittliche Frontend
Framework Experience. Ja, ist echt
so. Skeleton Project.
Okay. Okay.
Yes.
Yes. Using JavaScript
with JSDoc Commons.
Yes. Okay. Gut. Jawohl.
Npm...
Erstmal soll ich Tailwind enden, ja?
Und jetzt...
Und jetzt sage ich
Npm install.
Hätten die das nicht vorher
checken können? Ja, doch, ne?
Wie wäre es mit einem Fehler, so nach dem
Motto tsconfig not found oder sowas?
Dann wüsste man wenigstens Bescheid.
So, und jetzt führen wir das aus.
Yes.
TypeScript
no. Default.
Zink. Da.
Da. Da.
Da.
Da, ja, jawohl.
Das ist gerade angehört wie russischer
Stream.
Right, Config.
Ja.
Aha, jetzt geht's auch. Sehr schön.
Alles klar.
Obviously zu erkennen an der Fehlermeldung,
dass man das machen muss.
Vollkommen logisch.
Okay.
So, was ist jetzt passiert?
Meine Tailwind-Config heißt jetzt
so.
Und steht mehr Zeug drin.
Und ansonsten
habe ich aus irgendwelchen
Gründen
Type-Definitions hier drinnen für
TypeScript.
Warum auch immer.
Obwohl ich gesagt habe, ich will kein TypeScript
verwenden, okay. Wichtigste Sache
jetzt, Leute. Ratet mal,
wie viele Packages
jetzt in meinem
Node.js Package,
in meinem Node-Modules
drin sind. Eben waren es noch 40 oder so.
Mal gucken, wie viel es jetzt sind.
180.
180.
Frontend.
Frontend, alles klar.
Logisch
brauchen wir das alles hier.
Ich habe noch keine Komponenten
installiert, richtig.
Also ich habe eigentlich noch gar nichts laufen,
wenn man es mal so will.
So, Open. Wir machen mal hier den
Browser jetzt auf.
So.
Okay, ja. Hier haben wir unsere
Barebones-App.
So, wenn ich jetzt hier was reinschreibe,
dann funzt das auch.
So, und wir haben Tailwind.
Das heißt, wir können jetzt in unser Layout gehen.
Und wir können das
einfach auch...
Auch können wir machen. Wir können in unser Layout
gehen. Wir können sagen,
auf jeder Slot.
So, gell.
Ne.
So.
Und dann kann man hier
sagen, Class.
Mx2.
Ah, es funzt. Okay. Oder was haben wir?
Margin 2. Ah, nice.
Warum habe ich übrigens keine Auto-Complete
für Tailwind? Was ist hier los?
Es ist
Essential. Das brauche ich.
Ist es even?
Ist Odd auch dabei?
Ne, ich glaube, ganz so schlimm ist das noch nicht.
Ist Excel?
Ne, ist nicht dabei.
Wirst Code
neu starten? Ich bin mir gar nicht sicher,
ob ich das...
Tailwind-Plugin überhaupt habe.
Tailwind IntelliSense.
Doch, habe ich.
Habe ich das Svelte-Plugin?
Wenn ich das richtig schreiben könnte.
Habe ich, ja.
Was auch immer.
Ich vermute mal...
Ich vermute mal,
mein Visual Studio Code hat es noch nicht gecheckt.
Class gleich...
Ich glaube,
ich vermute mal,
mein Visual Studio Code hat es noch nicht gecheckt.
Also damit hatte ich bis jetzt keine Probleme.
Das war eigentlich eines der Sachen,
die immer funktioniert haben.
Ah, jetzt funktioniert es.
MX2.
Sehr schön.
Ah, jetzt können wir so etwas sehen wie
M10.
Okay.
Wunderbar. Das funzt.
Dann werden wir mal eine Component installieren davon.
Das brauchen wir nicht.
Das brauchen wir nicht. Okay, that's it.
You can now start adding components for your browser.
You can now start adding components for your browser.
You can now start adding components for your browser.
You can now start adding components for your project.
Add button.
So, und wenn ich das jetzt richtig verstanden habe,
fügt mir das jetzt keine Button-Komponente hinzu,
fügt mir das jetzt keine Button-Komponente hinzu,
wie man das so kennt aus klassischen Frameworks,
sondern fügt mir quasi den Source-Code hinzu
sondern fügt mir quasi den Source-Code hinzu,
von dieser Button-Component,
sodass ich daran selbst editieren kann,
ohne es nochmal extra rappen zu müssen.
Probieren wir das nochmal aus.
Add button.
Wichtigste Komponente überhaupt.
Das UI-Framework-Zeug
Startet mit einer Button-Component.
Startet mit einer Button-Component.
Component install add source lip component's UI-Button.
Component install add source lip component's UI-Button.
Lip component's UI-Button.
Tatsächlich.
Ja und es ist wie gedacht,
Tatsächlich. Ja und es ist wie gedacht,
es ist wie gedacht,
okay man bekommt
den Button
dort als Source-Code rein
dort als Source-Code rein
Nicht irgendwie nochmal zum extra Rappen.
Okay, die verbieten Bits UI.
Muss ich jetzt nochmal npm install machen?
Oder muss ich Visual Studio Code nochmal neu starten,
dass es checkt, dass das alles da ist?
Oder wie ist das jetzt?
Nee.
Warum checkt Visual Studio Code das jetzt nicht?
Wo ist das Problem?
Ach so.
Das sind gar keine Fehler.
Das sind TypeScript.
Wahrscheinlich, weil ich hier einen TypeScript-File drin habe, oder?
Warum denkt denn,
aus welchem Grund denkt denn man
Visual Studio Code, es soll an der Stelle
TypeScript machen?
Es soll nämlich gar kein TypeScript machen.
Wie kriegt man das aus?
Jetzt ist die Frage, ist das
Visual Studio Code, oder ist das
das Svelte-Plugin,
was das macht?
Weil das sind keine Fehler, das sind TypeScript.
TypeScript.
Gucken wir mal in die Config
von diesem Svelte-Plugin.
Ah, hier
Enable TS-Plugin.
Ist es das, was ich ausschalten sollte, vielleicht?
Nee.
Wie kriege ich denn hier TypeScript-Geschiss aus?
Enable TS-Plugin?
Diagnostic Messages?
Nee.
Okay, wenn ich hier TS-Plugin ausmache, sollte alles weg sein, auch nicht?
Hä?
Okay, ich habe legit keinen Plan.
Ich glaube, das muss man vielleicht nochmal neu starten.
Kann das sein?
Muss man das nochmal neu starten, dass er das checkt?
Just, just JavaScript things?
Ah.
Ah, da ist es wieder.
Fuck, man.
Wir lassen es einfach mal so.
Scheiß drauf, ich weiß jetzt nicht, wie man das deaktiviert.
Wie kann man TypeScript ausschalten?
Dass es nicht mehr denkt, dass es TypeScript ist.
Enable Code Actions for TypeScript.
Enable Diagnostic Messages for TypeScript.
Oder hier.
Moment, warum habe ich überhaupt eine
eine TS-Config-Plugin?
Eine TS-Config-Plugin?
Eine TS-Config-Plugin?
Eine TS-Config-Plugin?
Eine TS-Config-Plugin?
Warum überhaupt?
Ich verwende überhaupt kein TypeScript.
Ich will den ganzen Shit gar nicht haben.
Das ist wieder wirklich richtig krasses
Five-Head-Frontend-Zeug.
Kann ich einfach sagen?
Kann ich sagen False?
Ah!
Okay, wunderbar.
War so immer.
Meine Güte.
Okay, so, jetzt habe ich einen Button.
Das ist ja schon mal gut, wenn ich einen Button habe.
Dann fügen wir den Button doch mal hinzu.
Also, ne, nicht in Layouts, in Page.
So, das, das kommt, das, ja,
Welcome to Kekwe, Beste.
So, und, lull.
Speichern da mal, da fügen wir jetzt mal einen Button ein.
Button.
Lull.
Und jetzt ist es kaputt.
Ah, weil ich noch nicht included habe.
Quickfix.
Äh.
Sollte er das nicht,
sollte er das normalerweise nicht selbst includen,
den Button?
Ich, ich, ich bilde mir ein,
dass, dass er den Kram eigentlich...
Hä?
Okay, jetzt hat er es gecheckt.
Da ist ein Button, guck mal.
Kekwe.
Wahnsinn.
Ein Button.
Und wie schaltet man jetzt zwischen Dark- und Light-Mode um?
Weil, okay, Components.
Components, Button.
Okay, der Standard-Button ist anscheinend halt
mit dem Standard-Hintergrund.
Okay, soweit, soweit, so gut.
Installation.
Usage.
Ja, es ist ein Button.
Der sieht bei mir auch sehr
Button-mäßig aus.
Außer, dass ich eine andere Schrift dann anscheinend habe als die.
Aber haben die eine viel coolere Schrift dann als ich?
So, und...
Ah, Secondary.
Für den, dann sieht der anders aus.
Was brauchen wir jetzt?
Variant.
Variant.
Gleich.
Ne, da, an der Stelle, wo I-Namens mal
irgendwie Sinn machen würden, natürlich nicht, ne?
Okay, jetzt habe ich so einen ganz normalen
Disabled-Button.
Destructive.
Okay.
Ghost.
Link.
Ah, guck mal, die haben sogar eingebaut, dass man...
Ah, okay, das ist für den Button,
das muss man dann selbst machen.
Loader 2.
Obviously, dass das Loader 2 heißt.
Fragt man sich, was mit dem originalen Loader
passiert ist.
Also quasi, was ist mit Loader 1 passiert?
Und was ist...
Was zum Teufel schon wieder Lucid's Welt?
Typische Frontends
stellt es wieder her.
What?
Beautiful Icons jetzt. Alter, wie viele
gibt es davon, von diesen Dingern?
Da gibt es ja 3 Milliarden
von.
Okay, ich speichere mir das mal.
Okay, ich habe es geschafft, einen Button zu machen.
Das ist doch schon mal was.
Okay.
Und wenn ich den Button jetzt selbst anpassen will,
mache ich das direkt im Source-Code.
Anstatt zu hoffen, dass der Button
irgendwelche
fertigen Sachen dafür anbietet.
Ich finde das vom Ansatz her gar nicht mal
so doof, ehrlich gesagt.
Weil die Button-Komponente ist ja
übersichtlich. Was steht eigentlich in Index.js
drin?
Warum ist das in einem eigenen JS-File?
Import Root
from
Button-Cell. Import
TV
from
Tailwind Variants.
Was ist das?
30 Milliarden Dependencies, Alter.
Tailwind Variants.
Leute, ich habe keine Ahnung.
Aber passt schon.
Ach so.
Das hier ist...
Warum...
Ich habe mal eine ganz
bescheuerte Frage, Leute.
Warum ist das ganze
CSS in einem JavaScript-File
definiert?
Ich verstehe den Sinn in dem Fall schon.
Das ist,
dass man sagen kann, hier
Variants, Destructive,
Outline, sonst was.
Und dann nimmt er sich, je nachdem, was man
hier an Variant
ausgewählt hat,
die passenden Styles raus.
Ja, das ergibt schon Sinn.
Aber, so ganz check ich es nicht.
Also wisst ihr, wie ich das gemacht hätte?
So als Frontend-Noob.
Ich hätte da ein If
gemacht. Ich hätte sowas hier gemacht.
Export,
Let Variant, Default.
So.
Dann hätte ich quasi sowas gemacht,
wie, ja, sinngemäß irgendwie
If.
Oh, ich bin so dumm.
Ich kann keine
Syntax mehr fürs Welt.
If, ne, wie war das nochmal?
Klammer auf war das, gell?
Geschweift, Klammer auf.
If. Genau. Ich hätte es so gemacht.
If
Variant
gleich, gleich, keine Ahnung, Destructive
oder so.
Und da dann irgendwie die Styles
gesetzt.
Wahrscheinlich ist das, wahrscheinlich ist das die bessere Variante, wie die das machen.
Ich glaube, sie einfach mal.
Die, die wissen, was sie da, was sie, was sie da treiben.
Okay, ich erkenne aber schon instant ein Vorteil von dieser ganzen Geschichte.
So, überlegt euch jetzt mal.
Ihr würdet eine UI Library verwenden, wie Skeleton UI, wo es im Endeffekt nicht den Source Code für den, für den Button gibt, sondern einfach nur einen fertigen.
Eine fertige Button Component, im Endeffekt, wo ihr dann hier, ne, gut, gibt es, gibt es nicht wirklich, wo ihr dann hier sagen würdet, Button, das ist doofes Beispiel jetzt.
Nehmen wir an, ihr habt irgendwie so eine Progress Bar, so, dann würdet ihr eine fertige Component Progress Bar nehmen und wenn die was nicht kann, was ihr haben wollt, würdet ihr es selbst rappen.
So, was wir jetzt hier haben ist, es gibt Varianten, Default, Destructive, Outline, Secondary.
Wenn ich jetzt eine Variante haben möchte, von dem Button.
Ähm.
Accept, zum Beispiel, ja, und, äh, die Accept Variante.
Gucken wir mal, ob das jetzt schon so funktioniert.
Accept.
Kunst.
Ja, Kunst.
Das heißt, da könnte ich jetzt zum Beispiel sagen, meine Accept Variante ist Text Primary, bla bla bla, aber, warte mal, wo, wo, Destructive.
Hier, Hover, Background, wir, wir nehmen mal.
Ja, geil, hier habe ich natürlich kein BG Destructive, wo ist das denn?
Wo ist BG Destructive?
BG Destructive, bitteschön, definiert.
Wo kommt, woher weiß der, dass es BG Destructive gibt?
Ist das in der Tailwind Config drinne?
Ah, ja.
Hier.
Primary, Secondary, Destructive, Muted, Accent, Popover, Card.
Okay, sagen wir mal, sagen wir mal, ich möchte sowas hier haben.
Okay, Accept.
Nehmen wir mal das hier und sagen BG Accept.
Text Destructive, Foregrounds, das heißt, wir brauchen das ein paar Mal.
Weiß ich, weiß ich, ob es Sinn macht.
Wir, wir wollen es ja nur für den Button.
Komm, machen wir, machen wir einfach mal hier, machen wir einfach mal das wieder rückgängig.
So, sagen wir mal BG.
Ja, aber hier drin haben wir jetzt, hier drin haben wir natürlich jetzt keine Tailwind Auto Complete.
Das ist schon ein bisschen, bisschen, bisschen eklig jetzt, ne.
Also ich will jetzt quasi sowas haben, wie?
Machen wir mal hier beispielsweise hier Class.
Ne, ah ja, das ist das, wo ich meine, man kann HTML nicht gescheit auskommentieren, lul.
Da muss ich mich ein bisschen dran gewöhnen, wie man, wie man das gescheit macht.
Also was ich jetzt, was ich jetzt beispielsweise machen will, ist sowas wie Background, Green, irgendwie sowas.
Das sieht halt scheiße aus.
So, und jetzt gehen wir hier rein und sagen BG, Green 500.
Ja, Hover funktioniert.
Hover funktioniert natürlich noch nicht.
BG 500.
Guck mal.
Und schon haben wir ein neues, neues Button Feature und zwar, dass wir auch einen Accept Button bauen können.
Das finde ich vom Ansatz her gar nicht so verkehrt, ehrlich gesagt.
Dass man direkt an den Komponenten rumbaut.
Ein Nachteil davon ist aber halt, dadurch, dass ich jetzt nicht einfach sage,
Include Button from Schätzen.
Wenn die jetzt irgendwas fixen, ja, mal angenommen, der Hover wäre kaputt oder so und die fixen das, dann würde es bei mir nicht automatisch mit dem Upgrade der Library gefixt werden, weil es ja keine Library in dem Sinn ist, sondern einfach nur Source Code, der reinkopiert wird.
Das hat seine Vor- und Nachteile, ja.
Und in der Tailwind-Config kann man die globalen Styles definieren.
Ja, nicht wirklich globale Styles.
Das sind, das sind Tailwind, wie nennt sich das denn so?
Also Tailwind-Options.
Also wenn du hier was einträgst, zumindest bilde ich mir ein, das so verstanden zu haben, dann generiert Tailwind aufgrund deiner Farben, die du hier einträgst, quasi diese ganzen Prefixes, die es gibt, zusätzlich mit deiner Farbe.
Also zum Beispiel hat Tailwind sowas eingebaut wie Text-Color oder hier Text-Red zum Beispiel.
Und jetzt kannst du sagen Text-Destructive.
Das generiert Tailwind daraus, weil du hier eine neue Option angelegt hast, die sich Destructive nennt.
Das heißt, sprich, alle Sachen, die Tailwind generiert, wo Farben drinne vorkommen, hat zusätzlich jetzt noch eine, ja, was auch immer, Minus-Destructive, Minus-Primary, Minus-Secondary.
Ja, du hast jetzt BG-Destructive oder Text-Destructive oder Border-Destructive.
Also Tailwind generiert quasi.
Alles, was es sonst generiert, plus zusätzlich die Farben und Sachen, die man hier definiert hat drin, die man hier definiert hat.
Das heißt, wir könnten hier durchaus sagen, dass wir hier jetzt nicht neben Destructive noch ein, ja, Accept oder OK oder sowas einbauen.
Lass uns mal kurz gucken, was Muted ist zum Beispiel.
Muted.
Okay.
Nicht das, was wir haben wollen.
Exent.
Auch nicht wirklich, was wir haben wollen.
Popover.
Und Card wollen wir wahrscheinlich auch nicht haben.
Ah, ne.
Okay, also das gibt es schlicht und ergreifend noch gar nicht, was ich hier haben will.
Ich hätte gerne einen Button, der im Hintergrund, der grün ist.
So, und man könnte jetzt tatsächlich hergehen an der Stelle und sagen, okay, vielleicht will ich das ja nicht nur für den Button haben, sondern ich will das vielleicht auch mal für Pop-Up-Boxen oder so benutzen.
Ja, zum Beispiel, überlegt euch mal, man möchte den Status anzeigen.
Von irgendeiner Operation, so nach dem Motto, hat geklappt, gab eine Warnung, gab einen Error und dann brauchst du ja auch wieder die gleichen Farben.
Und da könnten wir hier jetzt definieren.
Zusätzlich noch hier, anstatt Destructive.
Fragen wir so, nennen wir es mal wirklich irgendwie, ja, ich weiß nicht.
Was ist ein schönes Wort dafür?
Accept trifft es ja nicht so wirklich.
Accept ist für den Button.
Ja.
Okay.
Ich weiß nicht.
Man könnte es.
Okay nennen.
Und jetzt ist irgendwelche Magic-Sachen, die ich nicht checke.
What?
Äh.
Das ist mir zu high IQ.
Wo kommt denn das jetzt wieder her?
Zumindest ein Beispiel jetzt, was das gemacht hat, ist, ich kann jetzt, ich kann jetzt an der Stelle zum Beispiel verwenden, äh, Text, okay.
Ja, das hat es jetzt generiert anhand der, aber, wo kommt denn jetzt der ganze Krempel her?
Das sind, das sind, das sind, das sind, das sind, das sind, das sind, das sind, das sind, das sind, das sind, das sind, das sind, das sind, das sind, das sind, das sind, das sind.
Non-CSS-Variablen, okay.
Ah, kommen die vielleicht aus der, wo ist er denn?
Und was ist Ambient und Non-Ambient?
Monka S, Alter.
Warum hat das 30 Milliarden Files, das ganze Zeug wieder?
Wo ist denn mein Post, Post-CSS-Ding ab?
Da stehen die CSS-Variablen drin, was das eigentlich ist.
Boah, das ist ja mega durch die Brust ins Auge, Mann.
Ach, hier werden auch die Dark- und, und Light-Styles der Fähigkeit.
Definiert.
Alter, who's to us?
Okay.
Okay, okay, ich glaube, ich hab's, ich glaube, ich hab's gecheckt.
Machen wir das mal weg.
Das ist ja nur so ein Zusatz, Zusatz-Ding.
Dann bleiben wir jetzt mal hier bei, machen wir das auch mal weg.
Gehen wir mal wieder unsere Button-Component rein, sagen wir hier Destruktiv.
Dann ist er rot, der Button.
So, und wie schalte ich das jetzt um auf Dark-Mode?
Das ist, glaube ich, ein, das ist, glaube ich, was Globales.
Das mache ich, glaube ich, gar nicht pro einzelner Komponente, sondern das mache ich, genau, das mache ich hier ganz, ganz oben, irgendwo hier im Layout oder so.
Schreibt man hier einfach Dark davor?
Ah, ich bin mir unsicher, ob das jetzt funktioniert hat.
Hat das jetzt funktioniert?
Also es hat was gemacht.
Ich vermute schon, Light.
Ich vermute schon, dass es das gecheckt hat jetzt.
Also ich gehe, ich gehe davon aus, dass man einfach dann möglichst hoch in der HTML-Hierarchie quasi Dark hinschreibt.
Was ist denn, wenn ich das direkt an HTML dran schreibe, wird dann der Hintergrund auch Dark?
Aber ich schreibe schon das komplett an HTML dran, so hier im Glas.
Ja, tatsächlich, cool.
Okay, das gefällt mir eigentlich ganz gut.
Haben die einen, einen Switcher eingebaut, so wie hier?
Gibt's das, gibt's das schon fertig?
Warte, warte, warte.
Das bauen wir doch.
Das können wir uns doch jetzt mal selbst bauen.
So einen Dark Light Switcher, falls, falls das noch nicht, falls noch nicht eingebaut ist.
Theme? Gibt's das hier sowas schon?
Switch?
Switch gibt es ja, da können wir das selbst bauen.
Ja, das, das probieren wir doch mal aus. Wir bauen uns so einen Dark, Dark, Dark Light Theme Switcher.
Ach hier, Dark Mode, guck mal.
Die haben ja schon alles hier hingeschrieben.
Wir machen jetzt, wir machen das noch eine Sache, machen wir jetzt hier nochmal.
Wir machen, äh, Margin, Margin, Warte, Bottom, bisschen Abstand dazwischen, dass es hier nicht ganz aneinander klebt.
Guck mal, die haben's hier schon beschrieben.
Dark Mode, we use, we use the classed strategy.
Äh, ja, dann.
How you add Dark Class to the HTML element is up to you.
Mode Watcher.
Nee, wir brauchen, ganz ehrlich, ich brauch keine, was ist das?
Äh, ich brauch kein extra Buzzer.
Äh, ich brauch kein extra Buzzer.
Äh, ich brauch kein extra Badbutton für Dark und Light-Switche.
Ganz ehrlich?
Das muss, das muss doch nicht sein, oder?
Das kann man doch, können wir doch selbst machen.
Das kann man doch, können wir doch selbst machen.
Und hier bauen sie das mit nem Switch nach.
Und hier bauen sie das mit nem Switch nach.
Okay.
Eigentlich ganz cool.
Das können wir jetzt doch wirklich mal ausprobieren, das selbst zu bauen.
Das können wir doch jetzt wirklich mal ausprobieren, das selbst zu bauen.
Da lernen wir mal bisschen auch diese Component Library kennnen und gucken weaknesses
wie man gescheite Icons benutzt und so.
Falls man überhaupt Icons hier haben kann.
Die Icons sind ja da keine dabei.
Ejo.
wir bauen doch einfach mal so was hier da da kommen hier button genau was für eigens
hier lucidus welt wieder also im endeffekt kann jetzt einfach ein button bauen dass das
lasst lasst uns das mal ausbringen also das heißt wir gehen dementsprechend nicht hier
in die seite sondern das machen wir im layout layout baumann den knopf ganz oben hin aus
irgendwelchen gründen wieder nicht funktioniert hat aber als nicht inkludiert ist so als haben
wir den button oder was auch immer wurscht der ist nicht destruktiv der ist erstmal gar
nix aber wenn man da drauf klicken dann wollen wir global das anpassen dass der tag und nicht
tag dran steht aber das doch mal das dürfte tatsächlich relativ easy sein und wir brauchen
ein bisschen old school
manipulation denke ich mal weil unser html element steht hier gab es da ins welt nicht
so was gab es ins welt nicht was um direkt auf ist es nicht window oder so da genau ach nee das
ist nur dass man beispielsweise für das gesamte fenster jetzt keyboard events registrieren kann
und so was das weltdokument doch das ist doch das was ich habe
will oder aber da kann ich da kann ich keine klassen das ist nur um sich um sich um tastatur
events und sowas mitzubekommen glaube bringt uns an der stelle nix also wir können doch jetzt sagen
hier klick aber wir sind nicht klick ging sogar on on klick ich vergesse immer die hälfte
moment
hängen wir das jetzt mal und jetzt musste man doch irgendwie trick 17 machen war das nicht so
schätze ich habe vergessen wie das ging so war das richtig gerne dass er das jedes mal ausgeführt hat
probieren wir noch mal aus blog bloggen wenn man irgendwie was und gucken ob beim klicken was passiert
ja ja ja kunst so und jetzt müssen wir sagen wie bleibt man denn jetzt an dem html element
document get element bei hack name wie gehen das wie kriege ich das html element geht das
so tatsächlich funktioniert die sie ist ist das der w das zu machen wahrscheinlich nicht oder ok
das erste element weiß ich ob das der w ist ich noch nicht der w dem fall aber das ist richtig das
ist richtig und da können wir jetzt doch einfach sagen html classes ich glaube das muss man hier so
so und reactive von alles machen da ist eben gleich tag guck mal ob das jetzt schon funktioniert ja
und wenn man drauf legt ist man das trocken funktioniert noch nicht aber
man drauf klicken wird das ganze ding schon mal da das fonds also könnte man quasi was hier
irgendwie sagen wie led beam gleich wir fangen an mit leid es gibt auch document element hat ok
documents document element ja noch besser noch besser da brauchen wir diesen ganzen krempel nicht
ja ob das auch funktionieren kann ich weiß nicht ob das auch funktionieren kann ich weiß nicht ob das auch funktionieren kann
ja ob das auch funktionieren kann ich weiß nicht ob das auch funktionieren kann ich weiß nicht ob das auch funktionieren kann
ja ob das auch funktionieren kann ich weiß nicht ob das auch funktionieren kann ja nein es ist ja noch ist ja noch viel viel viel
ja nein es ist ja noch ist ja noch viel viel viel viel
ja nein es ist ja noch ist ja noch ist ja noch viel viel viel besser wir machen einfach so dass ihr led
besser wir machen einfach so dass ihr led
besser wir machen einfach so dass ihr led dark theme gleich falls so gucken wir wenn dark
dark theme gleich falls so gucken wir wenn dark
dark theme gleich falls so gucken wir wenn dark team im moment dark team gleich not dark
team im moment dark team gleich not dark
team im moment dark team gleich not dark team hier wollen wir das ja switchen
team hier wollen wir das ja switchen
team hier wollen wir das ja switchen if dark team javascript wie ging das jetzt
if dark team javascript wie ging das jetzt
if dark team javascript wie ging das jetzt noch mal dann dark ansonsten leid bei
noch mal dann dark ansonsten leid bei
noch mal dann dark ansonsten leid bei leid wahrscheinlich nichts macht und
leid wahrscheinlich nichts macht und
leid wahrscheinlich nichts macht und schon und schon toggles zwischen dark
schon und schon toggles zwischen dark
schon und schon toggles zwischen dark und light mode das ist nice hat jetzt mit
und light mode das ist nice hat jetzt mit
und light mode das ist nice hat jetzt mit dem hat null hat null mit der ui library
dem hat null hat null mit der ui library
dem hat null hat null hat null mit der ui library zu tun die wir von benutzen aber
zu tun die wir von benutzen aber
zu tun die wir von benutzen aber man sieht dass die schon mal ordentliche
man sieht dass die schon mal ordentliche
man sieht dass die schon mal ordentliche default styles dabei haben guckt euch
default styles dabei haben guckt euch
default styles dabei haben guckt euch der button der button ändert ja auch
der button der button ändert ja auch
der button der button ändert ja auch den hintergrund aufgrund ob dark mode oder
den hintergrund aufgrund ob dark mode oder
den hintergrund aufgrund ob dark mode oder nicht dort gesetzt ist ja wir können
nicht dort gesetzt ist ja wir können
nicht dort gesetzt ist ja wir können das auch eigentlich anders waren wir
das auch eigentlich anders waren wir
das auch eigentlich anders waren wir können sagen da was ihm wenn sie gleich
können sagen da was ihm wenn sie gleich
können sagen da was ihm wenn sie gleich gleich stark dann leid ansonsten tag
gleich stark dann leid ansonsten tag
gleich stark dann leid ansonsten tag und ihr könnt einfach sieben
und ihr könnt einfach sieben
und ihr könnt einfach sieben wahrscheinlich sinniger an der stelle wir
wahrscheinlich sinniger an der stelle wir
wahrscheinlich sinniger an der stelle wir sollten allein schreiben wir starten
sollten allein schreiben wir starten
sollten allein schreiben wir starten mit dem leid ist wahrscheinlich die
mit dem leid ist wahrscheinlich die
mit dem leid ist wahrscheinlich die keine haupt ist die schöne variante ist
keine haupt ist die schöne variante ist
keine haupt ist die schöne variante ist ich war man könnte es jetzt wie active
ich war man könnte es jetzt wie active
ich war man könnte es jetzt wie active machen wir sind ja ins welt und ins
machen wir sind ja ins welt und ins
machen wir sind ja ins welt und ins welt könnte ich doch
welt könnte ich doch
welt könnte ich doch fuck dazu ist schon zu lange her
fuck dazu ist schon zu lange her
fuck dazu ist schon zu lange her das ist jetzt nicht so dass es sich
das ist jetzt nicht so dass es sich
das ist jetzt nicht so dass es sich automatisch ändert wenn man hat er für
automatisch ändert wenn man hat er für
automatisch ändert wenn man hat er für schmerzen
schmerzen
schmerzen so geht das ding so ging das nicht die
so geht das ding so ging das nicht die
so geht das ding so ging das nicht die ich bin zu pp dafür er ist schon okay
ich bin zu pp dafür er ist schon okay
ich bin zu pp dafür er ist schon okay das kann so bleiben so aber jetzt
das kann so bleiben so aber jetzt
das kann so bleiben so aber jetzt mal zurück zurück zu dieser ui library
mal zurück zurück zu dieser ui library
mal zurück zurück zu dieser ui library ein weiterer vorteil den ich sehe ist
ein weiterer vorteil den ich sehe ist
ein weiterer vorteil den ich sehe ist wobei hat hat der button image support
wobei hat hat der button image support
wobei hat hat der button image support button image
button image
button image egal gibt kein image haben die hier
egal gibt kein image haben die hier
egal gibt kein image haben die hier keine haben gibt es gibt es doch hier
keine haben gibt es gibt es doch hier
keine haben gibt es gibt es doch hier suchen
suchen
suchen ach nicht image icon hätte ich suchen
ach nicht image icon hätte ich suchen
ach nicht image icon hätte ich suchen müssen okay okay
müssen okay okay
müssen okay okay wir benutzen leute wir benutzen mal das
wir benutzen leute wir benutzen mal das
wir benutzen leute wir benutzen mal das beispiel von denen das hier ist zwar
beispiel von denen das hier ist zwar
beispiel von denen das hier ist zwar wahrscheinlich nicht mit installiert
wahrscheinlich nicht mit installiert
wahrscheinlich nicht mit installiert das muss man zusätzlich installieren
das muss man zusätzlich installieren
das muss man zusätzlich installieren aber das kann man kann man gleich mal
aber das kann man kann man gleich mal
aber das kann man kann man gleich mal gleich mal testen wie heißt dieses ding
gleich mal testen wie heißt dieses ding
gleich mal testen wie heißt dieses ding hier lucides welt das letzte mal habe
hier lucides welt das letzte mal habe
hier lucides welt das letzte mal habe ich die die die letzten paar projekte
ich die die die die letzten paar projekte
ich die die die die letzten paar projekte haben wir die tabler icons verwendet
haben wir die tabler icons verwendet
haben wir die tabler icons verwendet warum warum sind die dinge hier besser
warum warum sind die dinge hier besser
warum warum sind die dinge hier besser als tabler icons weiß man nicht
als tabler icons weiß man nicht
als tabler icons weiß man nicht wahrscheinlich weil es geht
wahrscheinlich weil es geht
wahrscheinlich weil es geht provides 100 plus vektor files von
provides 100 plus vektor files von
provides 100 plus vektor files von display icons symbols and digital okay
display icons symbols and digital okay
display icons symbols and digital okay und warum ist das neuer als die tabler
und warum ist das neuer als die tabler
und warum ist das neuer als die tabler icons oder die mdi icons wahrscheinlich
icons oder die mdi icons wahrscheinlich
icons oder die mdi icons wahrscheinlich wahrscheinlich einfach geschmackssache
wahrscheinlich einfach geschmackssache
wahrscheinlich einfach geschmackssache ok versell use das und supporte das jetzt
ok versell use das und supporte das jetzt
ok versell use das und supporte das jetzt weiß ich auch warum das ins welt
weiß ich auch warum das ins welt
weiß ich auch warum das ins welt wobei eigentlich hat es ja mit welt
wobei eigentlich hat es ja mit welt
wobei eigentlich hat es ja mit welt nichts zu tun
nichts zu tun
nichts zu tun also was da ist glaube ich also mit die
also was da ist glaube ich also mit die
also was da ist glaube ich also mit die die die sponsoren quasi von uns welt der
die die sponsoren quasi von uns welt der
die die sponsoren quasi von uns welt der welt erfinder ist bei was soll glaube
welt erfinder ist bei was soll glaube
welt erfinder ist bei was soll glaube ich angestellt
ich angestellt
ich angestellt iconify das haben wir auch schon mal
iconify das haben wir auch schon mal
iconify das haben wir auch schon mal benutzt ja das ist das ist auch das
benutzt ja das ist das ist auch das
benutzt ja das ist auch das ist das ich habe ich habe auch gerne den den
ich habe ich habe auch gerne den den
ich habe ich habe auch gerne den den vorgänger davon benutzt das nannte sich
vorgänger davon benutzt das nannte sich
vorgänger davon benutzt das nannte sich von tello glaube ich da konnte auch
von tello glaube ich da konnte auch
von tello glaube ich da konnte auch schon so metamäßig alle items benutzen
schon so metamäßig alle items benutzen
schon so metamäßig alle items benutzen ok showcase wie
ok showcase wie
ok showcase wie icons hier sieht man die ok aber da
icons hier sieht man die ok aber da
icons hier sieht man die ok aber da icons zum beispiel so viel leid und
icons zum beispiel so viel leid und
icons zum beispiel so viel leid und nun kommen wir machen das mal so wir
nun kommen wir machen das mal so wir
nun kommen wir machen das mal so wir machen das mal wie die das hier im beispiel
machen das mal wie die das hier im beispiel
machen das mal wie die das hier im beispiel haben wir benutzen das einfach jetzt
haben wir benutzen das einfach jetzt
haben wir benutzen das einfach jetzt mal installiert man das pnpm da komm
mal installiert man das pnpm da komm
mal installiert man das pnpm da komm hier wenn schon gleich volle pulle
hier wenn schon gleich volle pulle
hier wenn schon gleich volle pulle ok und jetzt können wir hinzufügen ein
ok und jetzt können wir hinzufügen ein
ok und jetzt können wir hinzufügen ein dann nicht mail mail wollen wir nicht
dann nicht mail mail wollen wir nicht
dann nicht mail mail wollen wir nicht haben wir wollen
haben wir wollen
haben wir wollen kommen wir fügen wir fügen mal mail ein ja
haben wir wollen kommen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir
fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen
wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir fügen wir f
wir machen lasst uns doch mal gucken wie das die die experts hier machen
warum funktioniert das warum zeigten der nicht einfach beide hier an
scale das wird auf null dass das wird die krieg das bekommt die größe null wenn es
dark mode ist sehe ich das richtig das ist ja super durch die brust ins auge man
okay sekunde ich ich kopiere das war über das muss ich merken
das ist halt so typischer fall von das hier kann man ganz gut lesen ja moment
variante outline brauchen wir outline warum ist da so ein komischer
warum ist das so ein komischer platz dahinter was was wegen dem mr okay ja
schon besser also mit dem mit dem
offensiv garments das kann man das halt deutlich besser lesen irgendwie soll
dass man die variante an wie das hier die experten machen
das ist ja nice og es die hand zu schreien oder finely
die auch zwischen unterschieden dass immer noch 2014UNA wii
sagt dass wir schön activates auf insgesamt mehr
jahreskopf世界 parts
zB
gerade aber mein weinort vergleicht man also hier mit transition und bei mir
daneben ohne transition also da finde ich da finde ich mit transition cooler
oder was sagt ihr transition oder no transition transition transition ist das
alles bleibt so das machen wir jetzt ich habe das 4 breite auf 4 aber beides war
so wie bei mir was ich nicht checke ist warum ist das eine absolute und das
andere nicht das ach so ich verstehe das ist das dass das mit den transitions
richtig funktioniert wenn ich das machen aber ich mache ja absolut raus ja dann
ist es nämlich hier kleinskaliert so na das ist natürlich dann kacke da sieht
man mal wie six hat schon ein poplischer sieben switcher im frontend ist
das gefällt mir aber das hat was ich als noob hätte sowas gemacht eventuell
hier na guck mal das hätte ich rausgeschmissen und hätte gesagt wir
machen mal den kramer kurz weg ja und ich hatte gesagt dark hidden zum
beispiel mein scale 100 ach jetzt ist beides da
da funktioniert das nicht so genau
wie ich mir das gedacht habe light gibt es ja nicht ich brauche
element ich bin ich bin zu ich bin zu three hat zu checken wie ich den wie ich
den jetzt heide aber hier scale und jetzt sage ich dark scale 100 im moment
visible sage ich visible visible dark visible und ansonsten ist ja
standardmäßig hätten so rum was ist das gegenteil von visible es ist es ist
nicht wisse weil es ist display block ja an visible genau ja das ist ein block
block ist display blog versus hinten fürs mann so funktioniert das auch aber
Aber, der hat jetzt nicht so eine schöne Transition, wie bei dem anderen, mit dem Scale.
Also, ich muss sagen, so kompliziert und doppelt und wie das aussah, was die Leute hier gebaut haben,
ich finde, denen ihre Lösung ist schicker als meine.
Also, es ist, noob wie ich wäre, hätte ich es eigentlich so gemacht.
Anderweitig hätte ich es so gemacht, aber die schönere Variante ist tatsächlich, muss ich sagen,
das muss man ihnen lassen, das muss man ihnen lassen.
Das ist schicker mit der Transition, das gefällt mir echt gut.
Haben wir uns richtig schön an kleinen Scheiß aufgehalten.
Aber wir haben nur einen Theme-Switcher, immerhin, okay?
So, haben wir denn sowas wie eine Leiste zum Beispiel?
Haben wir nicht, brauchen wir auch nicht, können wir auch selbst bauen.
Lass mal schauen, was haben die denn eigentlich hier alles für Komponenten?
Dabei ein Akkordeon, habe ich noch nie benutzt, wann, wann, wann benutzt man sowas?
So für FAQs oder sowas vielleicht, ja?
Alert, Heads Up, ein Dialog, okay.
Ah, die übliche, die übliche Geschichte, die man bei Frontend-Stells so hat.
Benutzen die schon das neue Model-Anzeigen?
Nein, die machen das noch mit Overlay und Div, okay.
Weil im Browser gibt es ja mittlerweile sowas.
Native, so eine Dialog-Anzeige.
Was ich extremely nice finde, dass es das mittlerweile in Native gibt.
Was hat denn der Dialog noch für Optionen?
Wow, ja, übertreib halt, übertreib halt.
Aspect Ratio?
Hä?
Was macht das jetzt, muss ich dazu das Fenster jetzt, das Fenster verschieben, dass das...
Ah, okay, okay, ja, jetzt, jetzt, jetzt verstehe ich, was das macht.
Avatar?
Halt, ein Bild, Avatar-Style-mäßig anzeigen.
Badge, so ein Chicken-Nugget-Ding.
Button hatten wir schon, Kalender.
Oh, die haben also auch ein bisschen advancedere Komponenten, beziehungsweise den Source-Code für Komponenten.
Kalender?
Ja, Kalender-Komponenten richtig hinzubekommen ist gar nicht so, gar nicht so easy.
Wisst ihr, was ich noch viel schwieriger finde?
Timepicker ordentlich.
Haben sie anscheinend auch nicht hier einen Timepicker.
Timepicker ist echt immer so ein Ding für sich, ne?
Was auch witzig ist, also, was ich ja komplett hasse, ist dieser Material-Design-Timepicker.
Das Ding kann ich überhaupt nicht ab.
Den hier, den Material...
Achso, das ist nicht, es ist, äh, Utifile-Timepicker.
Den kann ich überhaupt nicht ab.
Diesen Material-Design-Timepicker.
Ich finde das so eklig, dieses Teil, Mann.
Und noch schlimmer für 24 Stunden.
Wisst ihr, wie kacke das für 24 Stunden aussieht?
Haben die, ihr?
24 Stunden, Frau Mann.
Das ist so eklig.
Das ist so eklig, dieses Ding.
Ich kann, ich, ich mag's einfach nicht.
Ich weiß, das ist der Android-Style, wobei ich selbst gar nicht sicher bin, ob es Android überhaupt noch benutzt in der Form.
Aber, äh.
Die mag ich nicht mehr.
Die mag ich überhaupt nicht, ne, ne.
Ne, bei denen heißt es nur Date-Picker, nicht Time-Picker.
Kannst du nur Dates, hier kannst du nur Dates picken.
Und keine Times.
So, was haben sie sonst noch so?
Äh, Cards?
Okay, die übliche, übliche Sache, die man so kennt.
Es ist schick.
Es ist schick gemacht mit den Default, mit den Default-Stylings, muss, muss man echt sagen, ja.
Und doch relativ übersichtlich.
Find das, ich find das, find das...
Find das gut.
Optisch, recht hübsch gemacht.
Also, eine Sache, die mir daran gefällt, ist, es ist wirklich sehr dezent gestylt, alles nur.
Und das, das gefällt mir.
Das ist das, was, was, was ich an Skeleton-UI irgendwie nicht richtig mochte.
Die haben zum Beispiel, wenn du hier Documentation gehst und dann auf die Komponenten, guckst dir das an.
Das ist so...
Das ist mir zu viel gestylt, alles.
Und auch wenn du es dann hier umstellst auf, auf...
Das ist mir zu viel des Guten gewesen.
Echt, dieses, dieses...
Zurück halt gestylt, im Prinzip sind es eigentlich nur zwei Farben.
Schwarz und weiß, mit ein bisschen Grauabstufung dazwischen und, und Farbe wirklich nur an der Stelle, wo es Sinn macht.
Und das, das gefällt mir eigentlich ganz gut.
Ja, und das hier sieht auch wirklich übersichtlich aus.
Ja, die benutzen einen Button, die benutzen...
Ah, Switch können wir noch ausprobieren.
Switch-Komponente haben sie bestimmt auch.
Ja.
Okay, so, Karussell.
Habe ich noch nie verwendet.
Das benutzt man...
Das benutzen die, glaube ich, ganz gerne, wenn du so verschiedene...
Also, wo ich das jetzt, wo ich das schon gesehen habe, ist, wenn du so verschiedene Tiers zur Auswahl hast.
So, Free-Tier, Beginner-Tier, Advanced-Tier, Professional-Tier und sowas.
Da haben die sowas ganz gerne.
Natürlich wieder eine Dependency auf...
Auf irgendeine Library.
Sowas kann man nicht ohne Libraries im JavaScript-Umfeld bauen.
Obviously ist das nicht möglich, ohne Zusatz-Library so ein scrollbares Karussell zu bauen.
Checkbox.
Ja.
Ja, eine Checkbox halt.
Man denkt sich so, wie kompliziert kann schon eine Checkbox sein?
Bam.
Zehn Zeilen.
Okay, es ist im Endeffekt aber einfach nur ein Div, um Label und Checkbox zu gruppieren.
Ja, sieht alles noch überschaubar aus.
Was haben wir hier?
Ein was?
Ein Collaps...
Was?
Collapsible?
Was kollaps da?
Ach so.
Aha.
So, Leute, modernes Web-UI ist echt nicht meins.
Ich weiß immer nicht, wann ich die Sachen verwenden soll.
Hast du das Video gesehen, wo der Typ eine Webseite gebaut hat, die Scammer trollen soll?
Nee.
Aber da gibt es ja nicht nur ein Video.
Also, ich...
Ich habe nicht...
Das Video dazu gesehen.
Der beste...
Der beste Scambaiter, wie man das ja nennt, ist Kid Boga.
Dem gönne ich echt jeden einzelnen Zuschauer und ich finde den...
Ich kann's...
Ich gucke es nicht mehr so oft, weil es irgendwie auch immer das Gleiche ist auf lange Sicht, ja.
Aber ich kenne keinen, der das so gut macht wie der.
Und vor allem auch super spontan alles, wie ihm das immer einfällt.
Ich überlege gerade, wann ich das auf meiner Webseite verwenden würde.
Ein Collapsible.
Fällt mir jetzt nicht ein.
Combo-Box.
Okay, das ist eines der Pains-Champigsten-HTML-Elemente überhaupt.
Eingebaut im Filter und alles.
Ah, ah, ah, ah, ah.
Aber, aber schon wieder...
Schon wieder nicht richtig.
Ja.
Geht nicht.
Geht nicht.
Hä.
Funktioniert nicht.
Post... Post-One und End funktioniert nicht.
Was ist schon was?
Das würde ich gleich nachrüsten.
Ich kann es nämlich überhaupt nicht haben, wenn Textboxen kein Post-One und Ende unterstützen.
Da kriege ich Anfälle auf Webseiten bei.
Eine Combo-Box barrierefrei entwickeln macht niemand so richtig...
Ich weiß gar nicht, ob das überhaupt richtig möglich ist, das korrekt zu machen.
Guck mal allein, wie lang diese fucking Combo-Box ist.
Mit Control? Was? Mit was?
Mit Control links-rechts?
Also links-rechts funktioniert?
Ah, Control?
Control?
Du bist High-IQ, aber warum funktioniert das nicht mit Ende, Post und so?
Und das für uns tatsächlich, ja, wie du sagst.
Okay.
Jetzt kann das Framework mal zeigen, was es kann.
Wir installieren jetzt die Combo-Box und ich versuche nachzurüsten, dass Post-Eins und Ende-Taste funktioniert.
Mal gucken.
Weil das ist ja eines der Vorteile von...
Wir bekommen den Source-Code reinkopiert und nicht irgendeine fertige Component, die wir benutzen.
Wait a minute.
Das ist G-Bait.
Es gibt überhaupt gar keine Combo-Box-Component.
Es gibt Pop-Over- und Command-Components, aus der sich dann die Combo-Box-Component zusammensetzt.
Das heißt, eigentlich gibt es gar keine Combo-Box-Component.
Die haben uns G-Baited.
Das heißt, wie ist das aufgebaut?
Also sie benutzen Pop-Over und Command.
Okay, Pop-Over ist sowas hier.
Hier funktioniert Post-Eins und Ende.
Okay, und Command.
Hier nicht.
Okay, es ist auf jeden Fall die Command-Component, die wir brauchen.
Alles klar?
Add Command.
Okay, gib ihm.
Ich versuche jetzt nachzurüsten, dass man Post-Eins und Ende drücken kann.
Weil sowas triggert mich immer auf Webseiten, wenn das nicht geht.
Okay, Components install.
Command and Dialog.
Was soll ich pressen?
Shift-J?
Fuck, das funktioniert.
Okay, ist Wahnsinn.
Okay, also wie bauen wir das jetzt ein?
Page.
Wir haben jetzt eine neue Component, die sich Command nennt.
Und wie ist das jetzt aufgebaut?
Command-Root-Input-List.
Okay, mich interessiert eigentlich nur der Input an der Stelle.
Ja, das funzt wieder nicht, weil ich es nicht importiert habe.
Nice, Import funktioniert nicht.
Hat funktioniert.
Muss ich vielleicht neben Command noch Command und Root und Input und so importen?
Input?
Nee, nein, ich muss.
Alter, natürlich, natürlich.
Obviously muss ich machen Import Sternchen erst Command.
Dann funktioniert es auch.
Logisch.
Ey, ich kann Bild vor und zurück machen.
Ist das irgendein Firefox-Bug?
Oder ist das gefixt und auf der Webseite von denen einfach nicht die neueste Version drauf?
Kann das sein?
Okay, müssen wir mal checken, ob das ein Chrome- und Firefox-Problem ist.
Ne, hier geht es auch nicht.
Anscheinend.
Nee, jetzt.
Hä?
Sag mal, Leute, bin ich blind?
Oder kompletter Brain-Lag?
Ich bilde mir ein, das hat eben funktioniert.
Mit.
Bild vor und zurück.
Anscheinend nicht.
Okay.
Aber hier funktioniert auch Dark Mode und sowas.
Nee, funktioniert nicht.
Und jetzt.
ich war blind hat nicht funktioniert vorwärts ok also wie könnte das funktionieren wir gehen
mal in die komponente rein für command und dort dann in input command primitive input
wird jetzt was bin ich sehend data cmdk input rapper natürlich vom c was ist denn cmdk wo
kommt das schon wieder her warum ist fronten zeug immer 30 milliarden dependencies aller fast an
style komposable command menü
force welt okay ich weiß schon was ich nicht benutzen werde und zwar das command ding man
kann ja anscheinend nichts einstellen gescheit wo kommt das her command primitive ja dass das
das kommt aus cmdk sv da kann ich also an der stelle schon mal nichts dran ändern ich hätte
jetzt eigentlich gehofft er baut das hier zusammen dieses menü dass ich auch ein bisschen was bisschen
was daran ändern kann weil es geht
ja sogar ja wahrscheinlich kann man mechanic dmn
kommen wir können nur ableiten diese gibi heißt das wie wie heißt denn diese diese power key Messe
wie heißen diese tasten auf auf der englischen tastatur home und end Av center wollte noch keiner heinuzä was kann man hier eigentlich alles dringend für parallelen
haben so wie es aussieht also das finde ich doof nachérence 30 l rebellion
orbiter ab frauen aber das geht nicht ich finde das mir noch mal wirklich gut sind
denn הד was kann man hier was kann man endlich aber sant langu darkness cast...?
getörn
also ist das details details details details details details details details details details details details details details details details det servants
Mini----...
details details details details details debts
details details sitä details details subjects
alles übergeben arguments cmd ksv das kann man da alles übergeben label input ja das ist das
moment ist das hier die das ist einfach nur das icon oder das ist nur das eigen hier oben hier
class 30 millionen sachen aller ort search woher weiß ich denn was ich da übergeben kann jetzt was
ist das schon wieder das ist aber echt voll durch die brust ins auge filter nein ich will nicht
filtern ich will custom kasten keyboard events also ich gehe davon aus weil man könnte das schon
nachträgliche einbauen bein value input
all props are forwards to the underlying input element ja das da müsste man sich jetzt auch im
separaten npm package beschäftigen wie man das einmal also das ist dann das ist mir dann da
schon fast ein bisschen zu viel des guten gebastelt dass man das man post 1 und das
es fragt mich aber ab dass das nicht funktioniert wisst ihr was ich wette das liegt daran weil der
typ auf dem mac entwickelt und gar nicht weiß dass es die tasten gibt
was meint ihr könnt das sein weil es im mac user ist da hat das überhaupt nicht auf dem schirm dass
man das gebrauchen könnte gehe ich mal von aus oder keine full-size tastatur also hier will ich
eigentlich nicht hätte rum wurschteln ja input das ist das eigentliche wo ist das hier ist das
input element ja bei des attributes bei value use action
hier on input focus player change jetzt hat er irgendwo sich subscribes anders change event ich
checke jetzt nicht so genau wo er hier seine ach nee das kannst du einfach nur weiterleiten dann
könnte es da was dran aber irgendwo muss er doch wieder macht da aber ich war ein normales input
element ja input element hat die steuerung vor und zurück
an einer stelle muss die verschluckt werden und ich weiß nicht woran es liegt dass das verschluckt
wird woran liegt es dass also der macht ja hier nichts custom mäßiges liegt das an den attributen
irgendwie das vor und zurück taste nicht funktioniert weil der macht keine custom
sachen hier drin dass er irgendwie den input groß abgreift oder so der greift dann am ende greift der
liste aber auch keine keys oder so aus der guckt im endeffekt nur ob sich der input geändert hat
der hier irgendwie buy and value ja irgendwo value value das das lässt du im prinzip und
wenn sich value geändert hat man updatet irgendwie zeug super kompliziert nicht zu
checken für normalen user über mich aber so und wie kommt es jetzt das post 1 und
ende nicht richtig funktioniert html input post home home and keys not working im jahr
2024 müssen wir immer noch googeln warum ein input fällt die kies nicht akzeptieren ich
habe ich jetzt gar keinen großen bock zu gucken was wir jetzt noch mal ausprobieren also es
scheint mir ein ganz normales input element zu sein was aus irgendwelchen gründen das frisst
machte ein normales input element in pots machte ein normales input element das was der max gesagt
hat mit dem vor und zurück ja das macht es auch aber aus irgendwelchen gip ach kann das sein was
das da kann das sein dass das irgendwie durch was äußeres verschluckt wird ich keine ahnung woran
das liegt dass das so das sind so kleinigkeiten nämlich bei jedem bei jedem ui zeug immer super
abpacken
wenn die dann funktionieren so hier inspekt html element was haben wir hier what the okay
auto komplett auf das wird es nicht sein aria auto komplett list spell checking was was was
macht der was macht dieser kram da was macht das hier weg roll combo box wenn jungs weg
okay uns immer noch nicht warum geht vor und zurück in diesem input nicht das ist ein ganz normales
input disabled cursor not all owned was weiß ich was es sein soll aber das ist nur wenn es
disabled ist place holt daran kann es jetzt ja auch nicht liegen auto kommt typ text macht aber
das ist eigentlich die falls dass das so was so was nervt mich irgendwo woran liegt das dass das
nicht funktioniert ok auto komplett wird es auch nicht sein auto korrekt wird es auch nicht sein
spell checker wird es auch nicht sein weil wenn ich jetzt nur mal so zum zum vergleich wenn ich
da selbst sind input darunter macht was
klar
ich bin bin ja komplett falsch wenn ich hier selbst input darunter mache klar ist hier keine breite
24 höhe 4 da geht das mit vor und zurück aber dass man sieht border reds links border oder 1
radius mit border ich habe vergessen wie man die einfach so gar 28 hier geht nämlich vor und zurück was
ist der unterschied dazwischen man warum geht hier vor und zurück nicht und in meinem input
fällen geht vor und zurück so was dass das so was nervt mich unglaublich wenn so wenn so basic sache
nicht funktionieren aber jetzt ein bisschen davon abkommen aber das nervt mich nicht
so woran könnte das liegen also an diesem ganzen das muss dann an irgendwelchen events liegen wo
der typ tranne subscriben da kann ich nichts da kann ich nichts daran ändern ich sehe hier zwar
nichts aber das muss das muss an irgendwas irgendwas hier liegen ja ok das verwende ich
nicht so was fragt mich ab vor allem kann man es auch nicht kann man es auch nicht einbauen weg damit
beim wird nicht verwendet kein kein input command weg ist sich alle format und dialog fliegen raus
zack alles alles wieder weg so was haben wir sonst noch für komponenten wo sind wir stehen geblieben
überhaupt combo box die command sind verstehen geblieben ok command command ist schrott funktioniert
richtig weil post post post post post post post post post post post post post post post post post post post post post post
post post post post post post post post post post post alt kontext menü display the user such
as a right click here ok leftclick macht schon mal nix ok es ist ja kontext menü habe ich ehrlich
gesagt auf website enorm wenig verwendung für ihr auch oder wie sieht es bei euch aus weil ich finde
ich finde meine persönliche meinung ist rechtsklick überschreiben ist so ein wie nennt man das so
antipattern ich finde rechtsklick sollte gefälligst halt immer rechtsklick sein
es gibt ganz wenige ausnahmen wo ich mir rechtsklick über rechtsklick
überschreiben gefallen lasse das ist zum beispiel so
tryout und sowas in der richtung ja dann lasse ich mir das gefallen hier
rechtsklick zu überschreiben weil das eben eine grafik design visio klonen
geschichte ist aber für 99 prozent der webseiten finde ich rechtsklick
überschreibende doofidee trotzdem trotzdem ist gut trotzdem ist gut ja
suchen nervt mich auch immer richtig wisst ihr was was mich die letzten jahre
immer immer zunehmender nervt ist die verbreitung von diskurs oder wie das
heißt forum wie heißt das ding die diskus diskus ja genau warum so das ist
so
so
, so nervig weil mein home assistant hat das zum beispiel ja home assistant forum
so und das ist das ist so nervig du machst dir beispielsweise was aus doch
diskurs diskus war oder machst du zum beispiel was auf so nimmst machst hier
irgendwie keine idee dieser dieser thread machst du auf wie in einem forum so und
jetzt scrollst du hier durch und sagst ah ich würde gerne mal checken wie oft
das wort integration hier drinnen vorkommt und jetzt haben die steuerung
f überschrieben dann suchst du nach integration und das ist halt nicht so
dass was ich was ich erwarten würde ja letztendlich ist es das was man haben
will und dann geht es wieder zu wenn er da
drauf glücklich musste wieder offen machen
das ist super abfakt so man kann das ganze aus tricks indem man hier oben auf
die leiste gilt und sucht integration das ding ist nur
das funktioniert auch nicht richtig weil weil dieses forum nicht alle posts lädt
dieses forum lebt nur keine ahnung 20 posts und dann und dann muss es quasi
endlos scrollen das heißt wenn ich hier unten bin wenn
ich hier unten bin dann finde ich wenn ich so mit dem
normalen suche mit der normalen suche suche sachen aus dem allerersten post
nicht mehr für mich ist dieses ding der inbegriff von abfuck bei modernem
webdesign warum brauche ich javascript für den fucking forum was post anzeigt
mit endlos scroll endlos scroll ist der größte scheiß den sie sich die letzten 20
jahre im webdesign ausgedacht habe ich hasse und unendlich endlos scroll endlos
scroll ist so ein shit guck ich das mal an
guck ich das mal an
was eine dreckseide man endlos scroll so ein scheiß ja ja schön aber da finde
ich jetzt auch nicht alles drin du musst ja mit dieser hässlichen suche
hier drinnen suchen endlos scroll ist einfach nur richtiger scheiß mehrere
seiten mit steuerung f suchen geht halt auch nicht
du hast recht das funktioniert nicht mehrere seiten mit steuerung f suchen
aber eine seite mit dem text drauf funktioniert und es gab zeit
da konntest du in einem forums post auf seite 150 springen und bist dann immer
auf der gleichen seite rausgekommen so und jetzt guck dir das mal an endlos
scroll unter meinem video so hier video von mir letztes video wenn ich sage okay
da hat auch vor drei tagen einer was cooles gepostet
das heißt das müsste so auf seite 5 sein ja geh mal hier auf seite 5
du kannst youtube kommentare nicht durchsuchen durch endlos scroll
weil es erst lädt wenn du da bist ja bei einem forum in einem forum kannst du
wenigstens noch die seiten durchklicken bei youtube kommentaren und bei youtube
kommentaren ich will nicht wetten das gucken alter
bei youtube kommentaren musst du erst alle kommentare laden so weit wie geht
und dann kannst du suchen das ist so beschissen ich hasse das was also dies
das ist so echt endlos scroll und diese sachen mit diesem
das ist einfach geht mir so auf den sack beim modernen webdesign und dann ist
alles andere ist früher hatten foren unten so ein knopf da konntest du sagen
zehn post pro seite 50 post pro seite alle post pro seite und ganz ehrlich wir
haben heute kisten mit zwölf kern cpus 4,8 gigahertz pro core 64 gb ram da kann
mir doch keiner erzählen dass ich keine
hoflichen 116 post in meinen ramm rein kriege und das anzeigen lassen kann auf
der webseite das konnte ich vor 35 das konnte ich vor
30 jahren anzeigen lassen okay 30 jahren bisschen übertrieben 25
jahre ja weil vor 30 jahren war das so mit internet und so aber 25 jahren aber
1999 da war das schon so
da konnte ich mir ohne probleme 116 post in dem forum anzeigen lassen überhaupt
kein ding also das ist so das ist so eine unnötige ver-
verstrickung von technologien die eigentlich für das sagmal für das
publische anzeigen von pos nicht bräuchte okay und irgend jemand hat dann
reddit auf den plan gerufen das ganze noch schlechter zu machen hat dann eine
scum
Also, Reddit hat nicht nur Endless-Scroll, du kannst auch noch nicht mal Posts mehr richtig aufmachen.
Also, im neuen Reddit-Design.
Wenn du hier auf Reddit was aufmachst, dann hast du das Problem, dass hier dann auf einmal die Dinge eingeklappt sind.
Wenn ich jetzt, ja man kann glaube ich irgendwie, irgendwo oder mit Zusatz kann man glaube ich alles expanden oder so, frag mich gar nicht, wo der Button dafür ist.
Und wenn ich jetzt hier drinnen suchen möchte nach irgendwas, dann geht das doch nicht mal, weil die Dinger gar nicht geladen sind.
Ihr seht's, guckt, die Posts werden geladen, wenn ich die das erste Mal aufmache.
Deswegen, das einzige, wie man Reddit benutzen kann, ist tatsächlich Old Reddit.
What? Old Reddit.
Ich mein, ist das ernsthaft zu viel jetzt für meinen Browser, diese 98 Posts anzuzeigen?
Ist das echt zu viel?
Why does Frankfurt still have a bad reputation with Germans?
Naja, nicht nur Germans, oder?
Geht da schon wieder ab.
Ich glaube, Frankfurt Bahnhofsfeld hat überall eine bad reputation.
Außer die Leute, die den ganzen Tag da rumchillen und auf der Straße hocken und so.
Die haben halt keine andere Wahl wahrscheinlich.
Für die hat das keine bad reputation.
Oder die dealen da am Hauptbahnhof.
Die finden das geil.
Aber ansonsten hat Frankfurt Hauptbahnhof zu Recht ein schlechtes.
Beste Reputation.
Okay, so, jetzt hab ich ein bisschen gerantet über...
Machen wir mal Dark Mode an, ist mir alles zu hell hier.
Bisschen gerantet über Endless Crawl.
Aber das ist ohne Scheiß Endless Crawl.
Es ist mit die beschissenste Entwicklung von so Webdesign-Semi-Standards der letzten 20 Jahre.
Eigentlich sind es eher so der letzten 10 Jahre.
Der letzten 10 Jahre hat sich das so etabliert erst.
Das ist kein Standard.
Aber wisst ihr, wie ich meine, das ist so ein Semi-Standard.
Das machen fast alle und es fuckt mich fast überall ab.
Was du verpasst hast, wir haben festgestellt, dass im Command-Menü Home und End-Taste nicht funktioniert.
Deswegen werde ich es nicht benutzen.
So, also jetzt haben wir hier ein Kontext-Menü.
Das werde ich wahrscheinlich nicht brauchen.
Und wir haben Endless gescrollt.
Data Table.
Oh, das ist cool, dass die sowas drin haben.
Braucht man selten, aber wenn man es braucht, ist es nice.
Das ist auch so ein Advantage.
Advantage ist das Ding, was ganz vielen UI-Component-Library-Frameworks fehlt.
Ich persönlich benutze die Dinger nie, weil die immer irgendwas so machen, wie ich es nicht haben will.
Und ich baue den Filter meistens selbst.
Aber es ist cool, dass es es gibt.
Suchen wir mal zum Beispiel nach Success.
Ah ne, geht nicht.
Man kann nur nach E-Mail suchen.
Can.
Oder nach M.
O.
Achso, M, weil Mail.
R.
Okay, Pfundst.
Wie performant ist das?
Wie performant dieses Ding ist, mit 50.000 Einträgen, sei mal dahingestellt, wie kann man es selecten?
Das ist nicht richtig darkmoded hier, die Selectbox, ne?
Kann das sein?
Oh, doch, das ist Absicht.
Absicht, dass die Selectboxen hell sind, aber eigentlich ganz schick gemacht.
Finde ich eigentlich ganz gut.
Also wenn man sowas braucht, dann ist es nice.
Ja, man kann auch hier, eigentlich ganz hübsch gemacht.
Werde ich wahrscheinlich nicht brauchen, aber gut, dass es da ist.
So, Datepicker, das hatten wir schon.
Stand das nicht vorher noch unter Kalender?
Leider haben die keinen Timepicker.
Ja, sehe ich auch so.
Dialog, das hatten wir schon.
Da gibt es ein Popup.
Haben wir auch schon gecheckt, mit was das gemacht wird.
Ich glaube noch mit einem Diff.
Genau.
Aber immerhin, immerhin haben sie es ganz schön gefadet, Hintergrund.
Und vor allem kann man rausklicken und es geht wieder zu.
Draw.
Okay, da fadet von unten was ein.
Was ich sehr merkwürdig finde, ist, dass die ganze Seite sich movt, wenn das einfadet.
Findet ihr das nicht auch irritierend?
Dass die Seite irgendwie runterrutscht, wenn der Draw rausrutscht?
Ich glaube, die Seite wird einfach nur auf 80% skaliert, kann das sein?
Ich glaube, die Seite wird einfach nur kleiner.
Okay, whatever.
Da passiert drinne.
Dann haben wir so ein Dropdown-Menü.
Was erstmal nach oben geht.
Wie man das von einem Dropdown-Menü erwartet.
Also so geht es jetzt runter.
Ah ja, so geht es runter, okay.
Es hat mich erstmal irritiert, dass ein Dropdown-Menü nach oben geht.
Aber das geht immer dorthin, wo es Platz hat dafür.
Und jetzt ist die Frage, was passiert, wenn es keinen Platz mehr hat?
Aha.
Dann geht es nach oben.
Und es ist ihm einfach egal.
Und wenn er unten am meisten Platz...
Okay, das ist...
Das ist schon mal gut gemacht.
Probe bestanden.
Selbst wenn nicht alles drauf passt, aber unten mehr Platz ist, geht es unten auf.
Ja, sehr gut mitgedacht.
Schätzen, Entwickler.
Entwickler Teams.
EntwicklerInnen, wie man das so sagen muss, korrekterweise.
Leute.
Ich aber keinen Bock drauf habe.
Das haben... Da haben sie gut mitgedacht.
Entwicklende.
Entwickl... Da habe ich auch gerade dran gedacht.
Entwicklende.
MWD.
Dann haben wir alle dabei.
Schätzen, entwickelnde MWD.
MWX.
Aber das haben sie gut durchdacht.
Und mit Pop-Up-Menü.
Okay.
Werde ich auch nicht brauchen.
Aber gut, dass das da ist.
Form.
Boah, nee.
Forms habe ich jetzt keinen mehr.
Forms sind immer abfuck.
Egal wo.
Aber kann ich hier nach vorne...
Hier kann ich nach vorne und hinten scrollen.
Irgendwas ist da grundlegend kaputt.
Warst du schon immer programmieraffin?
Immer nicht, aber lange schon.
Also mal kurz.
Was schreibt das SoulFoxer?
Warst du schon immer programmieraffin?
Ich kenne das fast nur so, dass...
Leute, die E-Administration machen, entwickeln, Kacke finden, außer eventuell Automation oder so.
Ja, das sind Noobs.
Es ist meine Erfahrung.
Also Leute, die nicht gewillt sind, ein bisschen...
Also kein Interesse daran haben, über den Tellerrand rauszugucken.
Und sich von der einen Sache nicht für die andere Sache interessieren sind, in der Regel Noobs.
Skill-Issue.
Es geht übrigens in beide Richtungen.
Entwickler, die sich...
Die außerhalb ihrer Idee nichts kennen.
Und noch nicht einmal in ihrem Leben ein Docker-Image gebaut haben, sind Noobs.
Meistens.
Also so im großen und ganzen Kontext gesehen.
Sicherlich können die in der einen Sache schon ein bisschen Ahnung haben.
Aber in der Regel sind es Noobs.
Das sind meistens auch die gleichen Leute, die, wenn es ein neues Tool gibt, sagen, das kann ich ohne Schulung nicht benutzen.
Kennt ihr so Leute?
Es gibt ein neues Tool und ihr denkt euch, ey, finde ich kacke.
Oder ihr denkt euch, oh, finde ich ganz gut.
Oder wie auch immer.
Aber dann hast du Leute, die sagen, oh, das werde ich nicht benutzen ohne Schulung.
Das kann ich nicht benutzen ohne Schulung.
Das finde ich immer so affig.
Bei uns...
Bei uns gab es auch letztens wieder Diskussionen.
Die haben sich irgendeine neue Push-Notification-App gekauft.
Sodass man jetzt nicht mehr per SMS über Systemausfälle notifiziert wird.
Sondern dass man jetzt Push-Messages kriegt.
Und dazu...
Dazu kriegst du halt so eine App aufs Diensthandy gepusht.
Äh, ne, nicht gepusht.
Kriegst du eine App aufs Diensthandy installiert.
Und das geht dann halt über irgendeinen Push-Notification-Anbieter.
Ja, da haben sie sich irgendeinen Premium-Package gekauft mit, was weiß ich, 150.000 Messages im Monat oder keine Ahnung.
Und da brauchst du halt die App von denen und dann kriegst du Push-Messages.
Ist ganz cool gemacht.
Muss ich sagen, ist ganz cool gemacht.
Weil du kannst damit deinen Schichtplan synchen.
Und wenn der Schichtplan gesyncht ist...
Bekommt nur derjenige automatisch Critical-Notifications nachts, der im Schichtplan als Nachtschicht eingetragen ist und so.
Eigentlich ganz cool gemacht.
Ja.
Wahrscheinlich viel zu viel Geld gekostet für ne kleine easy Sache, die man...
Aber ist egal, eigentlich ganz gut gemacht.
Und die App ist super selbsterklärend.
Du machst die App auf.
Da hast du einen Knopf.
Äh, Schichtstart.
Es ist ein bisschen...
Ist das nicht Opsgenie? Es ist ein bisschen wie Opsgenie.
Ein bisschen.
Nicht ganz so umfangreich, ein bisschen in der Richtung.
Ja, die App ist super selbsterklärend.
Machst auf, hast einen Knopf.
Ähm, Schicht starten, Schicht beenden.
Oder...
Äh...
Du kannst noch in deine Settings gehen.
Die haben API-Docs und sowas.
Aber im Prinzip hast du einen Knopf.
Schichtstart, Schichtende und...
Ah ja, und...
Du kannst dir anzeigen lassen, wer gerade Schicht aus deinem oder anderen Teams hat.
Das ist alles.
Also die...
Die ist wirklich super selbsterklärend.
Und da hatten wir auch gleich jemand, der gemeint hat...
Ich weiß doch gar nicht, wie das geht.
Ich kann das doch nicht benutzen. Ich hatte da noch gar keine Schulung drin.
Ich...
Alter!
Es ist eine App mit drei Dingern zum Klicken.
Was soll man denn da schulen?
Und aus meiner Erfahrung
sind das halt Noobs, die
nicht schaffen, von ihrer eigenen Sache
ein bisschen über den Tellerrand rauszukommen.
Das sind Entwickler, die es nicht schaffen, sich außerhalb
von Eclipse oder IntelliJ
Da bin ich ja schon froh, wenn es IntelliJ ist.
Oder Admins,
die nicht in der Lage sind,
drei Zeilen Skript oder
vielleicht mal irgendwie ein Python-Programm
oder ein Go-Programm zu lesen.
Die müssen ja gar nicht unbedingt selbst komplett programmieren.
Das erwarte ich ja gar nicht.
Aber lesen und verstehen, was da abgeht, würde ich schon erwarten.
Und die, die das interessiert,
das sind in der Regel auch keine Noobs.
Ja, und wie das bei mir war...
Also ich war selbstverständlich nicht schon immer programmieraffin.
Also ich habe angefangen
mit Computerzeug basteln
lange bevor ich angefangen habe zu programmieren.
Also ich habe angefangen mit
Computerkram basteln, damals
mit...
Also mein erster eigener Computer
war ein...
Ich glaube ein Pentium 90.
Ich bin mir nicht ganz sicher.
Das war aber gar kein Pentium 90.
Das war irgendein AMD Fake Pentium 90.
Mit Windows 95
und Star Office damals.
Ja, und ich habe damals unglaublich gerne
an Hardware rumgebastelt
und alles mögliche ausprobiert auf dem...
auf der Kiste.
Und später dann...
Wir waren einer der ersten in Hanau,
die einen DSL-Anschluss hatten.
Die Story habe ich schon öfters erzählt.
Muss ich jetzt nicht wieder machen.
Gibt sogar ein eigenes Video zu.
Zu der DSL-Story.
Zumindest, da habe ich mich auch hauptsächlich
fürs Basteln damit interessiert.
Das höchste der Gefühle
war... Was habe ich damals
gemacht? Was...
Das höchste der Gefühle war so
AutoIT oder sowas zu verwenden.
So, wo man dann
beispielsweise
irgendwie was in Games
automatisch klicken konnte und sowas.
Ja, das war echt das höchste der Gefühle.
Aber...
Schon lange bevor ich
diesen Kram
beruflich gemacht habe,
habe ich mich angefangen fürs Programmieren zu interessieren.
Zwar lange nachdem ich angefangen habe mich
generell für Technik und Computer und Gebastel zu
interessieren, aber lange bevor ich angefangen
habe mich... Also das beruflich
zu machen, habe ich angefangen mich fürs Programmieren
zu interessieren.
Ich habe damals angefangen...
Also wir hatten...
Wir hatten damals in der Schule
oder in der...
Nicht mehr in der Realschule, sondern
ein zweiter.
Was ich nie fertig gemacht habe.
Andere Geschichte.
So, hatten wir einen Programmierkurs
und der Lehrer war super
pepega.
Der war damals schon
richtig so Hardcore Linux
Fanatiker.
2002 oder so.
Könnt ihr euch vorstellen, wie
advanced das damals schon gewesen ist.
Also das war noch recht frisch.
Ich glaube...
Das war noch... Das war Suse. Wann kam Suse?
Suse Linux 4.
Wann kam Suse Linux 4 raus?
Ich glaube das war nämlich ein Suse Linux 4.
Ne, ne, ne, ne, ne, ne, ne.
Sicherlich 1994.
Da garantiert nicht.
Wann kam das erste Suse Linux
raus?
Ja.
Ne, ne, ne, ne.
1996 war das nicht.
Das ist zu früh.
Dann war es vielleicht Suse Linux 6.
Ja, Suse Linux 6 ist wahrscheinlich.
So, äh...
Ja, ja, 6.4 oder sowas.
Irgendwie so in dem Dreh hier muss das gewesen sein.
Irgendwie so
in dem Dreh hier muss das gewesen sein.
So 98, 99, 2000.
Und
da hatten wir einen Programmierlehrer, der war
damals schon richtig so Hardcore Linux Fanatiker.
Und der hat natürlich auch nur C programmiert.
Und der hat mir tatsächlich
nicht etwa die Lust am Programmieren
beigebracht, sondern, dass ich es nie in meinem
Leben machen möchte.
Weil der so unfähig war, Sachen
ordentlich zu erklären.
Und du kannst nicht Programmier-Noobs,
die überhaupt gar keine Ahnung haben, was sie
machen, auf irgendwelche
Linux C Sachen loslassen.
Das Problem ist gar nicht so sehr, dass C an sich
super kompliziert wäre
von den Basics.
Ich glaube, es gibt kaum eine simplere Sprache
vom Umfang her als C.
Sondern, dass du einfach keine Ahnung hast,
weshalb du das gerade machst.
Wisst ihr, wenn ihr
nicht wisst, warum ihr das eigentlich macht,
dann interessiert euch
in der Regel auch nicht das, was ihr gerade
macht.
So, und dann hatte ich überhaupt keinen Bock.
Null.
Danach. So.
Da hatte ich null Bock. Aber,
als ich die ganze
Sache dann abgeblasen hatte und keinen Bock mehr
darauf hatte, hatte ich dann irgendwann so
2002 oder so, hier so in dem
Dreh,
hab ich
mein, versucht, mein
aller allererstes Programm selbst
zu programmieren. Und zwar war das
ein Logparser für,
wer hätte es gedacht, Dark Age of Camelot.
Und der Sinn war,
das Spiel gibt es heute übrigens immer noch,
und ich spiele das auch immer noch,
das war hier auf dem Eden-Free-Chart.
Zumindest,
das ist ein MMO gewesen,
das am Anfang die Beschränkung hatte,
das gab
Release Date, das war 2002
oder so,
kam das raus.
Ja, in Deutschland, in Europa
2002. So.
Und als das Game neu war,
konntest du aus
Anti-Cheat-Protection-Gründen,
keine Ahnung, was die sich gedacht haben
dabei, konntest du das,
nicht minimieren. Also du konntest
das nur starten, und sobald du es
minimiert hast, hat es sich automatisch geschlossen.
Das haben die zur
Cheat-Prevention gemacht.
Du konntest quasi deinen Rechner, während
du gespielt hast, für nichts
anderes benutzen, weil
es nur Fullscreen spielbar
war. Voll für den Arsch. Komplett für den Arsch.
Ja. Es gab damals auch schon
Tricks, das zu machen.
Das zu umgehen. Und zumindest,
was ich damals gemacht
habe, ist, ich hab versucht, einen Logparser
zu programmieren, weil
man konnte in dem Spiel
Chatlogging einschalten, und das hat auch die eigenen
Messages mitgeloggt.
Und ich hatte dann vor quasi sowas wie,
ich wusste damals nicht, dass es so heißt,
ich wollte so eine Art Dark Edge of
Camelot Shell programmieren. Ich wusste
damals nicht, dass man sowas Shell nennt.
Ich wollte damals quasi in Chat schreiben können,
sowas wie, Music Next.
Zum Beispiel.
Das wäre in der Logdatei gelandet,
und dann hätte
der Logparser das erkannt,
und hätte in meinem Musikplayer
auf Next gedrückt, so.
Weil ich konnte das Spiel ja nicht minimieren.
Und deswegen habe ich sowas gebraucht
in der Richtung. Das waren meine
allerersten Versuche, was zu programmieren.
Es hat nie richtig funktioniert,
muss ich dazu sagen. Mein Fehler
war auch, ich hab das natürlich mit C
probiert zu programmieren, weil C
das einzige war, was ich mal gesehen hatte
in der Schule, und ich irgendwie auch dachte, dass, ja keine Ahnung,
das wäre das einzige oder so.
Ich hab aber Text Parsing versucht hat mit C.
Ohne, ich vergesse es.
Das ist, hier,
Gets und Parsen und
und was ist,
Scan F und keine Ahnung, was da nicht alles
gibt. Und es ist für den Arsch.
Das hat nie richtig funktioniert, das war abfuck.
Ja, komplett für den Arsch. Richtig eklig.
Zumindest.
Daraufhin
ging das bei mir los mit,
dass mich Programmieren interessiert hat.
Denn ich hab C
erstmal über Bord geschmissen,
und hab mir damals
C-Sharp angeguckt. Ne, das stimmt nicht.
Das stimmt nicht.
Ich hab mir als allererstes ein Python Buch gekauft damals.
Das war Python, frag mich nicht,
2.1 oder sowas.
Ja, hä? Kommt, kommt ungefähr hin.
Python 2.1 war das.
Hab ich mir damals ein Programmierbuch gekauft
auf Amazon. Hab das
durchgeblättert und durchgelesen
und ausprobiert.
Und
Jaja, wie gesagt, das war 2001 oder so.
Und da
hab ich mir dann gedacht, ey, ist doch eigentlich ganz nice.
Was ich an Python damals richtig geil
fand, ist, dass du nicht schreiben musstest
int plub gleich 1, sondern einfach
nur schreiben konntest, plub gleich 1.
Ich hab damals gedacht, Typ-Systeme
beziehungsweise statisch
getypte Sachen sind bloat.
Weil ich halt null Ahnung
davon hatte.
Hab ich gesagt, hey, guck mal, ich hab jetzt die Auswahl
zwischen der Sprache, da musst du schreiben
int plub oder nur plub.
Dann ist logischerweise nur plub natürlich besser
als int plub.
Logisch, obviously ist das besser.
Und dann hab ich ein bisschen
Python gebastelt. Dann war das Ding aber
also ich hab wirklich
tatsächlich schon 2001 so die
absoluten Basics
mit Python gelernt.
Das Problem dabei war nur,
dass du mit Python nichts machen konntest.
So wirklich, was ich machen
wollte. Ich wollte damals
keine Kommandozeilenprogramme machen.
Wozu?
Was mir damals vorgeschwebt ist,
ist, ich möchte gerne
so ein paar Windows-Gui,
also Windows-Programme mit grafischer
Oberfläche machen.
Hakt mich bitte nicht mal was.
Keine Ahnung, weiß ich nicht mehr.
Bastelzeug. So.
Und daraufhin hab ich dann angefangen mit C-Sharp.
Es kam nämlich da
gerade raus. Auch so alles
in dem Dreh. Und
haben die hier eine History? Genau.
Hier.
Ich weiß noch, als ich dann
mit C-Sharp angefangen hab zu basteln,
als ich dann mit C-Sharp
angefangen hab zu basteln,
das dürfte so in dem Dreh hier gewesen sein,
da weiß ich, dass
ganz neu,
ich weiß nicht, ob es
Preview war oder angekündigt war,
es war ganz neu,
Generics.
Und Generics kam mit C-Sharp 2.
Also das hab ich,
nachdem ich ein bisschen C-Sharp gemacht hab,
hab ich das mitbekommen, dass demnächst dann
super krass tolle neue Versionen rauskommen,
die die Generics unterstützt.
Nicht, dass ich damals irgendeinen Plan
gehabt hätte, was Generics sind.
Aber das hab ich gelesen und hab mir gedacht,
okay, das ist die Sprache der Zukunft,
weil
die ja voll
gepusht wird jetzt und neue
Versionen rauskommen und so und
macht auch Bock.
Das war tatsächlich, was C-Sharp
die erste Programmiersprache,
die mir so richtig gut gefallen hat.
Vom Handling.
Auch vom Umfang
des Standard Frameworks her
fand ich damals schon
als richtiger Noob, der keine Ahnung hat, 2003,
fand ich das eine richtig coole Sache.
Ja und dann
hab ich weiter gebastelt, weiter gebastelt,
da kam dann irgendwann C-Sharp 2 und da waren halt Generics
ganz neu, kann ich mich noch dran erinnern,
so irgendwie 2005 rum dann.
Ja und dann hab ich ganz viel
C-Sharp gemacht und ich muss sagen,
ich hab zwar mittlerweile jede Menge andere
Programmiersprachen mir angeguckt, von Rust
bis Ruby, Go, sonst was.
Ich persönlich mag aber C-Sharp
immer noch am liebsten.
Weiß nicht, ob es daran liegt, dass
die Sprache war, mit der ich so richtig angefangen hab
zu programmieren. Wahrscheinlich nicht.
Sondern es liegt wahrscheinlich einfach daran, dass es
eine wirklich gute Sprache ist.
Und ich hab lange Zeit dann auch
Ruby on Rails
gebastelt, hier so rum.
Ruby on Rails kam mir dann so
hier so irgendwie in den
dem Dreh glaub ich
so raus dann auch.
Mittlerweile ist es ja
komplett, niemand benutzt
das mehr. Ja und so
sah das bei mir aus. So und hier
hab ich dann angefangen, so in dem Dreh
hab ich tatsächlich auch angefangen
das ganze beruflich zu machen.
Also ich hab quasi schon so
Was hab ich jetzt hier,
2001? Also ich hab quasi schon so
5-6 Jahre angefangen
mich damit zu beschäftigen, bevor
ich dann tatsächlich beruflich
in dem Bereich gearbeitet hab. Wobei ich ja wie gesagt,
ich arbeite ja nicht beruflich als Anwendungsentwickler.
Und ich hab auch eine Ausbildung
angefangen als Fachinformatiker
Systemintegration, hier so irgendwie in dem Dreh rum.
Hier so, da so.
Und äh
trotzdem hat es mich weiter
interessiert bis heute.
Enjoy Shopify nicht noch Ruby.
Das kann schon sein, Github
ist auch noch immer Ruby und mich würde nicht wundern
wenn GitLab nicht auch noch
wenn
GitLab nicht auch noch auf
Ruby Basis
wäre. So sollen wir mal gucken.
Gems, jaja das ist noch auf Ruby
Basis.
Was ich beruflich mache, guck mal bei mir auf Youtube
da gibt es ganz viele Videos, da ist noch Ruby.
Ganz viele Videos dazu.
Äh ich bin mittlerweile Senior
Linux Engineer. Hört sich cooler an als
es ist. Ja es ist Ruby, ja.
Immer noch.
Hätte mich auch gewundert, wenn man so
grundlegende Sachen ändert.
Davor war ich Senior DevOps Engineer.
Aber letztendlich sind Jobbezeichnungen
eh nur so ein bisschen Schall und Rauch, weil ich mach
schon sehr ähnliche Sachen zum letzten Job.
Aktuell kümmere ich mich hauptsächlich um
Automatisierung und Cloud Infrastruktur.
Also Automatisierung
für Cloud Infrastruktur.
Wie Terraform zum Beispiel.
Zum Teil bisschen Ansible.
Wobei man das glücklicherweise kaum noch braucht
da. Und generell
um sehr viel Containerisierung. Kubernetes.
Kubernetes.
Ja so
sieht das bei mir aus. Lange genug jetzt.
SoulFoxer. Ich hoffe ich habe es
ausführlich genug beantwortet. Ich habe jetzt irgendwie
zwei Stunden drüber gelabert.
Wie alt bist du? Ich bin
39. Ja ich
kenne Leute, die haben immer noch Eclipse, die sind da drauf
hängen geblieben.
Ja doch.
Leute.
Das ist so.
Soll ich euch sagen.
Das ist so.
Also mir fällt spontan mindestens noch
ein Java Entwickler ein, der voll auf Eclipse
schwört.
Das letzte Mal als ich ihn gesehen habe zumindest.
Der Rest ist mittlerweile auch IntelliJ.
Gibt es noch Leute, die NetBeans verwenden?
NetBeans waren aber zeitlang auch voll angesagt.
Ja doch, gibt es. Ich kenne Leute, die benutzen Eclipse.
Und schwören auch voll drauf.
Wie gesagt.
Mindestens einer fällt mir spontan ein.
Der voll auf Eclipse steht.
Mit Java.
Ja ist auch, denke ich, ganz gute
Einstiegssprache.
Dann lernt man
wenigstens gleich, wie man
Manager, Factories,
Single, Adapter
programmiert.
Ja. Das war eines der Gründe,
warum ich keinen Bock auf Python hatte.
Weil das in dem Buch, was ich hatte, richtig beschissen
beschrieben war.
Und
ich finde, der Typ, der das Buch geschrieben hat,
hat einen Fehler begangen.
Und zwar,
der hat versucht,
GUI Programmierung
und Objektorientierung
in Python
in einem Kapitel einzuführen.
Und man muss sagen, die eingebaute
UI Library in Python ist schon Schrott.
Und Objektorientierung in Python
ist
gewöhnungsbedürftig.
Ne, da bin ich weit
davon entfernt. Ich habe bei
Python beispielsweise noch nie Fortran gemacht.
Ja.
Ja, ja.
Dafür ist, also generell für Microservice,
Serverumgebung, also Go
hat einen riesen Vorteil.
Und das sind
Self-Contained Binaries. Das kann Go so gut
wie keine andere Programmiersprache.
Das hat jetzt mit der Sprache an sich
nichts zu tun.
Aber Go, also
das Ganze,
das was am Ende
rauskommt, das Binary, das ist,
so, das ist besser
Self-Contained, als ich das von jeder anderen Programmiersprache
kenne. Go-Binaries kannst du nehmen.
Ich kann ein Go-Binary
hier auf meiner Linux-Kiste
kompilieren. Und das
läuft auf jedem Linux-System
rückwirkend bis
Kernel 2638.
Also das ist quasi schon
keine Ahnung, 20 Jahre
alt oder so.
Ich kenne dich von Youtube, was kann ich sein?
Ich bin, ich bin Wobblors, Mann.
Ja, wahrscheinlich auch besser.
Xcode ist Pains Champion.
Oje.
Da weißt du Bescheid.
Ich hab keine Ahnung, ob man irgendwas
gut oder schlecht in Eclipse machen kann.
Ich hab Eclipse. Ok, Leute. Es muss jetzt sein.
Es muss sein.
Wir kommen nicht drum herum.
MonkaS. Gibt's das überhaupt
noch zu installieren?
Eclipse. Ok, auf geht's.
Mal gucken, ob das immer noch so
hässlich und unbenutzbar ist, wie früher.
Ich werde es nicht
lange, ich werde es aufmachen, dreimal drinnen rum
klicken, feststellen, wie kacke es ist
und wieder schließen, aber
Eclipse gibt es nur noch aus dem Auer.
Ja, ist doch gut so.
Noch ein bisschen abschreckenderes Beispiel,
das zu installieren. Ich gehe mal
davon aus, IntelliJ gibt es gar nicht, oder?
Ach doch, tatsächlich.
Aufladen wir ein bisschen schneller runter hier.
Warum dauert denn das so lange?
Das ist halt schon die, das ist die volle Eclipse
Experience, direkt von Anfang an.
Es ist, es ist langsam und eklig,
noch bevor die Installation fertig ist.
GN, das, das
kommt mir bekannt vor. Das hat man
auch vor 20 Jahren irgendwann mal verwendet.
Irgendwie so ein G-Tick. Ok, passt
mal auf hier, Leute. Eclipse.
Oh, wenn ich das Logo schon sehe,
MonkaS. Äh...
Äh...
Und jetzt? Welcome.
Aber man sieht nix. Ok, ist auch gut.
Nice.
Boah.
Wie ich das Ding hasse, Alter.
Ich finde bei Eclipsen die Einstellung.
Hier, Preferences.
Boah. Alter.
Alter, es sieht, es sieht aus,
es sieht aus wie
hingeschissen, Alter. Was ist das denn?
Das nimmt meine GTK-Einstellung
vom System. Ja, aber meine GTK-Einstellung
fürs System hat
nichts damit Probleme, außer Eclipse.
Nichts. Alles sieht ok aus.
Ja.
Das sind meine System-GTK-Einstellungen.
Die sind
auch vollkommen ok.
Aber für Eclipse nicht?
Boah, Dreck, Alter.
Rotz.
Snapshot. Revert.
Weg ist es wieder.
ABAP-Entwicklung.
Echt?
Ist Eclipse die Standard-
IDE für SAP-Gram?
Ja, ok. Ich geb zu. Ich bin's.
Exposed.
Was ist ein Self-Contained
Binary?
Ein Binary, in dem alles drin ist, was du brauchst,
dass du es ausführen kannst.
Also zum Beispiel
kannst du das von einem System aufs andere kopieren
und dort einfach starten, ohne irgendwas installieren
zu müssen. Und umso besser
Self-Contained es ist, umso weniger Probleme
bekommst du damit. Und in Go
ist es halt super easy. In Go
kompiliere ich jetzt hier was, da fällt ein Binary
raus, also quasi eine Echse, wie man das
unter Windows nennt.
Und das kopiere ich auf irgendein
Linux-System der letzten 20 Jahre und das läuft.
Das kann keine Sprache so gut wie Go.
Und es ist sogar easy, Go
in Go Binary
zu kompilieren
für von hier, was
auf ARM läuft. Genau. Ja.
Also das ist tatsächlich
top. An sich muss ich sagen, Go
die Programmiersprache, ich bin kein
allzu großer Go-Fan. Es geht
schon klar irgendwo.
Aber es gibt so ein paar Dinger, die mich an Go
nerven.
Ja. Zum Beispiel ihre Geschichte
mit, ja, benutze halt einfach
Schleifen. Was ich auch nicht mag
ist
diese Geschichte mit
du kannst nichts auskommentieren,
weil dann kompiliert dein Go-Kram nicht mal richtig.
Auch nicht mal kurz zum
testen. Ja.
Drei verschiedene Varianten, wie du
Variablen anlegen kannst.
Aber
die Generics habe ich jetzt
noch nicht groß ausprobiert, sah aber auch sehr
hakelig aus. Ja.
Also ist nix, keine
super
großen Sachen, dass man es nicht verwenden könnte.
Aber es gibt, wie gesagt, so die paar Punkte, die
nerven mich an Go schon.
Heißt nicht so, dass es an C-Sharp nichts gibt, was
mich nervt. Da haben sie gerade in den letzten Jahren
auch ein paar Sachen angebahnt,
die ich nicht so toll finde.
Das ist richtig, ja.
Bei Go ist das nicht so.
Deswegen ist Go auch so super
portable. Ist Helix
nicht der neue Scheiß? Was ist Helix?
Ein Texteditor?
Ja, Visual Studio Code
geht schon, geht schon klar.
Okay, komm, wir gucken uns das jetzt auch
mal kurz an. Das kenn ich noch
von früher. Na, immerhin
immerhin kann man
schon mal alles lesen, ja.
Schon mal, schon mal
Vorteil versus Eclipse.
Benutzen möchte ich es allerdings
auch nicht.
Klein nochmal, Klein nochmal
Revert Snapshot. So, jetzt haben wir
Snapshots revertet.
Und
jetzt löschen wir die ganzen Snapshots auch mal, weil
die unnötig, unnötig viel
Festplatten-Speicher
belegen.
Was geht
ab? Virtual
Was geht ab?
Vor allem bei Workstation.
So viel ist da jetzt nicht passiert.
Okay, Snapshots.
Snapshots, zack,
zack. Delete!
Yes! Weg damit.
Das war
Keyword finde ich schlimm. Meinst du in Go?
Ja, das ist auch so eines
der Punkte. In Go kannst du ja schreiben
war, blub gleich eins. Du kannst schreiben
äh, blub
Doppelpunkt gleich eins
und
du kannst schreiben. Es gibt drei Varianten
wie du auf Go, wie du in Go Variablen
schreiben kannst.
Fällt mir jetzt aber grad nicht ein.
In C-Sharp? Ne, in C-Sharp ist
war nice, ja.
Was magst du an C-Sharp mehr als an Rust?
Das ist jetzt,
das ist jetzt ein Vergleich
der ist vielleicht nicht so ganz fair
weil ich denke, dass
beide Sprachen ihre Daseinsberechtigung
haben und
wenn sie auch Überschneidungen haben
doch für
für sehr
entgegengesetzte Sachen geeignet sind.
Ich bin eh
der Meinung, dass Rust nur einen
ziemlich beschränkten Einsatz
nennt man das so
ja, einen sehr beschränkten
Einsatzzweck hat.
Auch wenn Rust mittlerweile für
alles irgendwie verwendet wird und super viele
Rust-Fanboys überall rumrennen und sagen
wir müssen alles rewriten in Rust
sehr viele, sehr viele Github-Projekte
die in Rust programmiert sind
sehen für mich so aus wie
die Rust Community löst wieder Probleme
die es nicht gibt
aber Hauptsache written in Rust
und
ja, Rust macht
schon Sinn
aber nicht unbedingt für alltägliche
0815 Software
also zum Beispiel
wofür Rust
komplett Sinn macht
ist, wenn man sich mal anguckt
wo das herkommt, das kommt ja von Mozilla
und wenn man sich mal so einen Webbrowser
anguckt, das teile von einem
Webbrowser oder einer Browser oder
ich glaube eines der ersten Sachen
was Mozilla in Rust gemacht hat
war glaube ich die Firefox CSS Engine
war irgendwie teilweise in Rust
und das macht natürlich enorm viel Sinn
das ergibt enorm viel Sinn so Sachen in Rust zu machen, weil
Rust hat
also so ein Einsatzzweck
wo es finde ich
nahezu unschlagbar ist
das sind Programme
die kompromisslos
performen müssen
und gleichzeitig
schon zur Compile-Time
quasi alles ausschließen müssen
was das irgendwie
was das Thema Memory Safety angeht
also sprich, du möchtest quasi bei einem Programm
wissen, ok
das hat keine Overflows, das hat
keine Threads
die irgendwie out of Scope gehen
und sonst was, du willst
zur Compile-Zeit wissen, das Programm
verhält sich so
wie es da steht
oder nach Möglichkeiten auch so wie ich es mir gedacht habe
und es soll möglichst schnell sein
in diesem Anwendungsfall ist Rust
einfach nice
zum Beispiel wenn es um irgendwie
Software geht, die im Kontext
von irgendeinem Browser läuft oder so
da ist das Sinn, ein Browser macht den ganzen Tag
nichts anderes wie
quasi fremde Sachen ausführen
die nicht von dir sind
und
wenn man sagt, ok
dort muss man besonders auf Security achten
und dort muss man besonders auf
Performance achten, das ist das
wo Rust gut ist
wo Rust aus meiner Sicht nicht so gut ist, ist
um einfach nur nach 15 Uhr tägliche Software
zu programmieren, wie beispielsweise irgendwelche
Kommandozeilen-Tools oder sonst was
weil, und ich weiß, das sehen die ganzen Rust-Fans
anders, weil
Rust doch sich langsamer entwickeln lässt
und ein bisschen umständlicher
zu entwickeln ist
und auch schlechter zu lesen ist
wie sagen wir mal
Go oder C-Sharp oder Ruby
oder Python oder sowas
das ist
bisschen gewöhnungsbedürftig, ja
aber du musst aufgrund der
Herkunft von Rust
musst du in Rust an Dinger denken
da musst du in anderen Sprachen nicht dran denken
zum Beispiel irgendwelche
Laufzeiten oder dass du beispielsweise
Lifetime
Declarations und sowas brauchst
bin ich genau sicher, wie Dinge heißen
dass der Rust-Compiler das frisst
das brauchst du in keiner anderen
Sprache, also da musst du schon bei Rust
dir ordentlich Gedanken zu machen, der Vorteil
davon ist, dass Rust die einzige
Programmiersprache ist, die mir einfällt
wo du sagen kannst, ey
sobald es kompiliert
macht es in der Regel auch das, was es soll
das ist bei keiner anderen
Programmiersprache so gut wie bei Rust
das heißt nicht zwangsläufig, dass
du richtig gedacht hast unbedingt immer
aber
bei Rust-Programmen passiert
selten was unvorhergesehenes
weil Rust halt an vielen Stellen aufpasst
du kannst in Rust nicht einfach
eine Variable out of scope
gehen lassen irgendwie und dann
da wieder drauf zugreifen oder
das funktioniert in Rust nicht
oder irgendein Thread irgendwo mal starten
und an der Stelle, weißt du nicht, läuft er noch
ist er schon beendet, es geht in Rust einfach nicht
das lässt sich dann einfach nicht kompilieren
also was ich, kommen wir mal zu der eigentlichen Frage zurück
also ich habe euch ein paar Sachen erzählt
warum Rust nice ist
also was ich an C-Sharp mehr mag als an Rust
ist einfach die Geschwindigkeit in der du da drin
was entwickeln kannst, nicht im Endeffekt
die Ausführungsgeschwindigkeit
wenn du was, sagen wir mal so
jemand der gut C-Sharp kann versus
jemand der gut Rust kann
und beide was gut optimiertes
programmieren, wird wahrscheinlich Rust
immer einen Ticken schneller sein
ich würde mal behaupten
je nach Anwendungsfall ist es gar
kein so großer Unterschied dazwischen
du wirst natürlich Fälle finden
da ist Rust um ein super krass
Vielfaches schneller
aber wenn man jetzt mal was nimmt
was jetzt nicht wirklich der Worst Case ist
für irgendeine Garbage Collected Sprache
und nicht der Best Case für Rust
also irgendwas 0815 mäßiges
und du hast zwei Leute, der eine kann gut Rust
der andere kann gut C-Sharp, würde ich sagen
okay, der der gut Rust kann, kriegt's
ein bisschen performanter hin
aber dafür ist der, das in C-Sharp programmiert
fünf mal schneller fertig
muss man halt sich überlegen
was einem da lieber ist
also die Entwicklungsgeschwindigkeit
finde ich in C-Sharp eindeutig angenehmer
und was ich auch in C-Sharp
umwelten besser finde
als in Rust, ist die Standard Library
das .NET Framework, was ja nicht mehr
.NET Framework heißt, sondern nur noch
.NET, also quasi das
die .NET Standard Lib
man, die
die Aussage, die ist
besser oder umfangreicher als in Rust
ist noch komplett untertrieben
Rust ist fast so ein bisschen
wie JavaScript, was das angeht
du brauchst erstmal 150
Dependencies
wir haben doch letztens hier WebRTC
was gebaut in Rust, wo ist es denn
hier
was in Go und was in Rust
so, und Rust hat
Cargo
hier
oi
das sind meine Rust Dependencies
also bei Rust brauchst du wirklich auch für jeden Scheiß
Dependencies, fast so krass wie bei JavaScript
nicht ganz so schlimm wie bei JavaScript
aber fast wie bei JavaScript
und, also
zu sagen, dass die einfach nur umfangreicher wäre
die .NET Standard Library, das ist ja noch übertrieben
die .NET Standard Library ist einfach ziemlich komplett
mit nahezu allem, was man
standardmäßig so immer mal brauchen kann
ich würde sogar
sagen, mittlerweile fast schon ein bisschen zu übertrieben
ich meine, es gibt
in der C-Sharp Standard Library
5 oder 6 verschiedene
Timer-Klassen, wo man sich auch
denkt, what the fuck Microsoft
aber immerhin
hast du den ganzen Kram in deiner Standard
Library dabei, bei Rust
nicht, also das ist echt
also die Geschwindigkeit, wie du was entwickeln
kannst, finde ich deutlich angenehmer in C-Sharp
die generelle
Lesbarkeit des Source Codes
finde ich persönlich viel angenehmer als in Rust
also finde ich in C-Sharp viel angenehmer
als in Rust und der Umfang der Standard
Library ist auch deutlich deutlich
DEUTLICH besser als
von Rust und ansonsten
wenn man das jetzt nochmal
vergleicht, wenn du
so super
memory intensive Sachen machst
wo du beispielsweise in C-Sharp
gefühlt in einem
Schleifendurchgang 150.000
Objekte anlegen müsstest und wieder löschen
beziehungsweise die dann irgendwann
bei der Garbage Collector aufräumen musst
da ist es natürlich durchaus sinnvoll
sowas unmanaged zu machen in Rust
wobei es da und da muss man sagen Microsoft
hat enorm viel
unternommen was das angeht
in letzter Zeit, wobei es da
mit
Rekordstructs und
Ref und Spans
und sonst was in C-Sharp
mittlerweile auch viele Möglichkeiten
gibt
das sehr performant zu machen
deswegen würde ich sagen, wenn du
zwei Leute
ans gleiche Problem setzt
der eine in C-Sharp und der andere in Rust
dann wird das Programm
von dem Typ in Rust am Ende vielleicht ein bisschen
besser performen, aber das C-Sharp Typ
ist ein bisschen besser
nicht wirklich meilenweit besser
aber das C-Sharp Typ ist
fünfmal schneller fertig
und so viel schneller wird die Rust Geschichte nicht sein
Ausnahmen bestätigen wir immer die Regel
in beide Richtungen
echt
war Haskell jemals schon der heiße Scheiß?
außer irgendwelche
weirdchamp Leute
auf Youtube
habe ich noch keinen erlebt der mir das schmackhaft machen wollte
wie gut ist die Sharp
was Selfcontain angeht
nicht so gut wie Go, aber ziemlich gut mittlerweile
spätestens seit
.NET 8
verbessern die ihren Compiler immer weiter
und das geht mittlerweile auch ganz
brauchbar, es geht noch nicht so geil
und easy wie in Go
also in Go sagst du Go Build
kannst sogar noch die Plattform und alles angeben
und dann hast du ein Binary was einfach
läuft, egal worauf rückwirkend
auf dem Linux System von
hast du nicht gesehen
bei C-Sharp sieht es ein bisschen anders aus
C-Sharp hat zwei verschiedene Modi
hat mehr aber prinzipiell hast du in C-Sharp
zwei verschiedene Modi in denen du ein Programm
laufen lassen kannst
du kannst es entweder zu einem Binary
kompilieren
oder du kannst es zu einem Binary
inklusive Runtime kompilieren
das sind zwei
unterschiedliche, gut
du kannst natürlich auch noch ohne Runtime kompilieren
und dann die Runtime zusätzlich installieren aber
wenn es um Selfcontained geht
gibt es bei .NET zwei verschiedene Varianten
kann ich dir auch mal zeigen
ich weiß wir wollten eigentlich UI Framework
machen aber scheiß drauf
Sidetrack beste
ich kann dir den Unterschied auch mal zeigen
machen wir hier mkdir
eieiei
machen wir hier mkdir was weiß ich kekwe lul
Hauptsache ich kann es mir noch merken
ja beste
kekl kek kekwe champ lul kekwe lul
alles klar natürlich weiß ich immer noch sofort
welches Projekt was ist
.NET New Console
Konsolenanwendung .NET
so eine ganz popelige Konsolenanwendung die
nichts macht außer
Moment
die gibt hello
cute
chat aus ok
so jetzt kann man die ausführen
.NET run und dann
macht er ein bisschen was und irgendwann kommt dann raus
hello cute chat
und wenn du die jetzt bauen möchtest kannst du sagen
.NET Publish
Release das ist das erste
was du machen kannst
dann fällt hier unter
bin release
bla bla bla
fallen so ein paar
Sachen raus so was du feststellen
wirst ist es fällt ein Binary
raus es fällt eine DLL raus
im Endeffekt werden
hier alle Dependencies drinnen gespeichert
und die
das Programm ist am Ende auch nur
71 KB
groß
manch einer würde jetzt sagen
71 KB für den hello world
ist ziemlich klein
manch einer würde sagen
71 KB für den hello world ist ja riesengroß
in der .NET Welt würde ich sagen
ist es ziemlich klein
und das liegt daran
weil das nicht allein lauffähig ist
wenn ich das jetzt versuche auszuführen
dann
wird das funktionieren
aber
ja dann wird das funktionieren aber auch nur
wenn ich die Runtime hier installiert habe
und er die finden kann
das ist ein .NET Binary
ohne Runtime
das heißt ich muss auf dem Zielsystem
wo ich das ausführen möchte
.NET installiert haben
das ist also alles andere als selfcontained
dafür ist es klein
und das ist nicht schlecht
ist die Runtime
nein da ist nix
da ist nix dabei
achso du meinst
das ist quasi gegen die Runtime gelingt
da steht auch drin
dass du .NET 8 brauchst
also wenn ich hier kein .NET installiert hätte
dann würde das nicht funktionieren
dafür ist das Binary klein
und das ist gar nicht schlecht
weil wenn du die beispielsweise auf den Server legst
wo die Runtime installiert ist
und du willst dort 80 .NET Anwendungen laufen
dann brauchst du die Runtime nur einmal
heutzutage
nur so semi toll
weil du wirst das eh in irgendein Container Image packen
und da laufen lassen
aber selbst da nachdem du ja das Image erstellst
kannst du die Runtime mit reinpacken
und gut ist
das ist übrigens auch der Standardweg
der den Microsoft vorschlägt
wie man so .NET Server Anwendungen dann verpacken soll
Binary rein
Runtime rein
in Container Image
und gut ist
dann gibt es schon relativ lange
in .NET
einen weiteren Schalter
der nennt sich
ich bin mir nicht sicher ob ich die Dinge jetzt richtig hinbekomme
Command Line Flags sind schon relativ weird
ich glaube es ist
minus minus selfcontained
ist es glaube ich
so und wenn wir jetzt hier hingucken
wenn es jetzt funktioniert hat
du siehst
da liegt jetzt deutlich mehr drin
dort liegt jetzt
alles drin
was ich brauche
um die Software auszuführen
jede Menge .NET Shit
jetzt kann ich keck weh lull da drin ausführen
und es läuft einfach
auch auf System ohne installierte
.NET Runtime
das Problem ist nur
72 MB
von 71 KB auf
72 MB
gibt es sowas wie Copilot für die Shell
du meinst jetzt nicht
Copilot aus der Shell aufrufen
sondern für Shell Kommandos
boah du kannst Chat GPT fragen
danach aber was es gibt was ich persönlich ganz gut
finde ist Explain Shell
das finde ich ganz nice ja
wenn du zum Beispiel sowas hast wie
rsync-va trägst du das da ein
und er erklärt dir welches Kommando
was macht
das finde ich ganz praktisch
ganz ohne AI
72 MB
für selfcontained ist hart
das ist aber halt die primitivste Version
für selfcontained
es ist im Endeffekt
ein Ordner mit Runtime
und das ist tatsächlich relativ portable
dadurch
weil es eben alles mitbringt was es braucht
natürlich ist es ein bisschen doof
dass es ein Ordner ist wo alles rumliegt
das heißt das hat Microsoft auch
gecheckt dass das eine blöde Idee ist
und hat noch
zusätzlich eingeführt dass du nicht nur
selfcontained sagen kannst sondern
publish
single file
machen wir das hier mal weg
weil es kann sein dass ich ein Runtime angeben muss
und dann hast du das gleiche
Bild
dann hast du das gleiche
wie vorher
aber
alles in einer Datei
ist auch noch sehr portable
kannst du auch auf nahezu jede Linux Geschichte
der letzten 10 Jahre kopieren
und es wird laufen
ist ein bisschen umfangreicher als Go
aber das ist schon mal ganz nice
es ist zwar recht fett
man muss sagen Go Binary mit ein paar Dependencies
ist auch relativ fett
vielleicht nicht 64 MB fett
aber
je nach den Dependencies
so 20 MB
mit so einem Hello World
wie groß ist ein Go Hello World
5-6 MB mit allem dabei
weiß gar nicht aus dem Kopf
warum das 64 MB ist
weil die komplette .NET Runtime
da drin ist
der komplette JIT
Code Generation alles
komplette .NET Runtime ist da drin gebundelt
wenn du das startest
passiert unter der Haube folgendes
die Anwendung wird in irgendein temporäres Verzeichnis
entpackt
inklusive Runtime und dann wird .NET
Run drauf gemacht
ist die Größe so wichtig
ne in der heutigen Zeit würde ich sagen
ist die Größe nicht so wichtig
gar nicht mal 64 MB ist kein Ding
viel wichtiger ist
ob das schnell startet oder nicht
und man muss sagen die Startup Time
im Vergleich zu Java zum Beispiel
ist die Startup Time
von einer Selfcontained .NET
Anwendung gar nicht so schlecht
aber immer noch ziemlich schlecht
User
Bin Time
wie
ist das denn installiert
aber es braucht halt immer noch
ja man sieht es nicht richtig
es ist immer noch
nicht sonderlich schnell
gestartet es braucht irgendwie
immer noch was ist denn das
200
20 Millisekunden
ne insgesamt
40
40 Millisekunden
zum ausführen
es ist halt nicht wirklich
40 Millisekunden zum Start
zumindest kommen wir mal
zu der eigentlichen Geschichte zurück
so das ist die Variante wie du schon ganz
lang Selfcontained .NET
Anwendung machen kannst und es ist
nicht schlecht die sind relativ gut
Portabel die kannst du
die kannst du im Endeffekt dahin kopieren
wo halt
.NET offiziell drauf supported ist
und dann geht das halt
aber mittlerweile
hat auch Microsoft festgestellt
dass das vielleicht nicht mehr so
das allergeilste ist
wobei ich jetzt sagen muss
jetzt kriege ich die Sachen nicht mehr so richtig gut aus dem Kopf hin
Microsoft hat aber auch festgestellt
dass es nicht mehr das allergeilste ist
und deswegen kann man jetzt
seit .NET
5 glaube ich sogar schon
aber so richtig gut geworden ist es erst seit .NET 8
kann man jetzt nicht nur sagen
Publish Single File
sondern man kann sagen Publish
AOT oder sowas
das kann man doch von Hand irgendwie
einschalten
Microsoft Docs mal wieder
checkt wieder keiner
checkt wieder keiner
Publish AOT gleich True muss man setzen
ok
jetzt kannst du sagen
F sharp haben wir nicht gemacht
und jetzt kannst du sagen seit .NET 8
du willst
das hier machen
Publish AOT
und jetzt
kompiliert er das wirklich
jetzt baut er nicht mehr die Runtime rein
sondern er erzeugt wirklich direkt ausführbaren
ein direkt ausführbares Binary
ohne .NET Runtime
wenn man jetzt hier mal reinguckt .NET Build
man sieht
das ist jetzt bloß noch 1,5 MB
groß
ist schon ein bisschen besser geworden
und es ist auch deutlich schneller
User Bin
Time
und es ist auch deutlich schneller
es braucht nur keine Ahnung 2-3 Millisekunden
oder so bis das gestartet und gestoppt ist
man kann das ganze noch ein bisschen
weiter verbessern
das ist das einzige was mir jetzt einfällt
es gibt noch ein paar mehr Compiler Flags
letztens habe ich doch irgendeinen Blog Artikel drüber gelesen
also
so jetzt kann man sagen
man möchte sogar noch die Debug Symbols raus
strippen
und dann ist das ganze am Ende
nur noch
1,5
da macht er das Standardmäßig wohl schon
konnte man noch Compressor
machen
ich weiß es nicht
es gibt noch ein paar mehr Optionen
für Publish AOT
da wird es noch ein Ticken kleiner
kann man hier sagen strip
läuft das dann noch wenn man hier
Debug Symbole entfernt
wahrscheinlich nicht oder
doch ah die sind schon entfernt
ist immer nicht kleiner geworden
minimal
size
.NET AOT
da gibt es
naja ich glaube wir müssen uns das jetzt nicht weiter angucken
aber es gibt noch
ein paar zusätzliche Optionen
wo man
wo man es noch ein bisschen
bisschen verringern
kann die Größe so
aber ich finde das hier ist ein ganz guter Kompromiss
in der .NET Welt
es ist quasi nur noch
1,5 MB groß
es startet sehr schnell
und wenn einem das wichtig ist
kann man das so machen wohlgemerkt
man hat damit aber auch ein paar
Probleme
Chat wer ist
wer kann sich denken
was die Probleme sind
von diesem
1,5 MB Binary
versus meine 64 MB
Version mit dem
mit der einkompilierten
.NET Runtime
was sind die Probleme von dem ganzen Ding
es gibt ein paar aber was sind so die
ersten Probleme die das haben könnte die euch
einfallen Portability
ja unter anderem
je nachdem wie man es macht so also
letztendlich ist das
auch das worauf ich
dass du .NET extra benötigst
ne ich brauche kein .NET extra
das läuft ohne .NET das ist jetzt wirklich
direkt 1 zu 1 native ausführbarer Code
ohne .NET also Portability
ist ein ganz guter Punkt
dadurch das es jetzt wirklich native
kompilierter Code ist
ist der abhängig von
dem System auf dem ich es kompiliert habe
nicht so wie bei Go die das ja
bisschen abstrahiert
haben alles sondern der ist beispielsweise
von der Version meiner eingesetzten
C Library abhängig
das ist eines der Punkte richtig
das heißt wenn ich das jetzt versuche
ich meine ich habe ein super aktuelles Arch Linux
wenn ich das jetzt versuche laufen zu lassen
auf einem
keine Ahnung Ubuntu 20.04
dann wird das wahrscheinlich nicht laufen
kann ich euch zeigen wir machen
jetzt hier Docker
run
Ubuntu
22.04
das ist dynamically linked gegen die
gegen meine
ich kann mir das immer nicht merken
wie ist das
einfach so
kann man das name vielleicht
name
perfekt
können wir jetzt sagen Docker cp
gibt es sowas
Docker cp
ich weiß das man Kubernetes so kopieren kann
ich bin mir nicht sicher ob man das auch so kopieren kann
das geht nice
jetzt haben wir das Programm hier liegen
im Docker Container auf einem Ubuntu 22.04
und jetzt führ ich das aus
und siehe da
da fehlt ja Zeug
da fehlt irgendwie
ne
ok das ist jetzt mein Fehler gewesen
das hätte ich noch machen sollen tatsächlich
die
dem fehlen
so
was ist das für
Zeit und
und Datums
Umwandlung Sachen fehlen dem
das muss ich machen
aber wir können uns das ganze angucken
also wenn ich jetzt sage hier
was ist das LED glaube ich ne
zeigt an gegen was das gelingt ist
und du siehst das auch hier
ja man sieht es halt richtig
ich zeige euch das ich muss mal kurz dieses komische Ding hier ausschalten
Global
Things System Invariant
brauche ich so wie setzt man den Kram
wie geht das jetzt nochmal
Pepega
Rider
öffnen
äh wo hat man das jetzt gesetzt
ich glaube hier
irgendwo in der Projekt
in der Projekt Config
na auf Rider mach hin ne man
ok
jaja
Unload Project
so und hier konnte man jetzt glaube ich
sagen äh
Invariant oder so
Global
ja
fragt man Alter wie heißt denn das richtig
Invariant
ja genau
Invariant
wo muss ich denn das setzen
hier hier
meine Güte Alter ich check das komische
Microsoft Format immer net
ja wie setzt man das dann hier
haben doch bestimmt irgendwie ein Beispiel drinne
ja
Invariant
Globalization
das will ich setzen genau
zack
wunderbar
Exit
und jetzt können wir das ganze nochmal bilden
rm
rm dies
Bild
jetzt bauen wir das nochmal
Publish AOT
jetzt Name
so Docker
CP
ja ich habs gelöscht jetzt kopieren wir das nochmal drauf
so guck mal jetzt ist es sogar noch ein
jetzt ist es noch ein Ticken kleiner
weil die ganze
Translation Sachen und so raus sind
aber wenn ich jetzt ausführe
dann funktioniert es
weil das System nicht alt genug ist
es funktioniert weil das System nicht alt genug ist
also anscheinend ist
von Ubuntu 22.04 meine
C Library aktuell genug dass es noch funktioniert
ok wir brauchen noch ein
wir brauchen noch ein älteres System
äh 18.04 ok
äh da ist es doch
heck weh lull
guck mal
und jetzt sagt er es geht nicht
weil ich mindest
mindest GLIB C Version
äh 2.32 und hier an der Stelle
2.34 brauche
das Problem habe ich mit dem Self-Contained Binary
so nicht
also wenn ich jetzt hier zum Beispiel sagen würde Self-Contained
hoffe ich erzähle jetzt
kein Mist ja
wenn ich sag mal hier minus minus Self-Contained oder sag mal Single
Single Single File
ja Build 2
jetzt kopieren wir das mal rüber
docker cp
nach ähm ja keine Ahnung heck weh lull 2
jetzt habe ich hier 62 MB
oder 67 MB rumliegen
seht ihr auch hier aber wenn ich das jetzt
versuche auszuführen dann gehts
obwohl es das gleiche ist
also der Unterschied ist
der der Native
Code der hat Abhängigkeiten
auf meine
C Library auf meine GLIB C
vom System auf
dem ich die Software gebaut habe
und mein Self-Contained Binary mit .NET
äh Runtime mit drinnen
hat das nicht
brauche es ja auch nicht weil es quasi den eigentlichen
Programm Code nicht als Native
ausliefert sondern als
.NET äh Byte Code
der dann von der .NET Runtime
die einfach nur Embedded ist in diesen
67 MB wiederum ausgeführt wird
das heißt für Portability ist tatsächlich
die 67 MB Variante
einfacher
so und das ist das das ist das erste
aber warum kann man denn nicht
Native IoT statically link machen
weil du gegen GLIB C nicht gescheit statically
linken kannst das Problem haben so gut wie
alle Binaries unter Linux
alle egal welche Programmiersprache
du nimmst
Go hat das nicht weil Go ähm ja
das könntest du machen das könntest du machen
Go hat das Problem nicht weil die da drauf nicht
zurückgreifen ja das könntest du machen
das ähm
also du könntest
du könntest irgendeine andere C Library verwenden
als GLIB C ja das könntest du machen
so aber
jetzt kommen wir mal zu der eigentlichen Sache zurück
das ist eines der Punkte
die vielleicht beim
Native kompilierten .NET ein bisschen
problematisch sind versus quasi .NET
selfcontained mit Runtime
also dem selfcontained
Binary und dem selfcontained Binary mit Runtime
also das mit Runtime
ist ein bisschen besser portable
es hat noch ein paar andere Nachteile
also Vorteile sind eindeutig
die Größe und die Geschwindigkeit
kann man starten
das sind um Welten besser als
hier mit Runtime
ein weiterer äh weiterer
Nachteil ist
das manche Features nicht richtig funktionieren
zum Beispiel Reflection
Reflection funktioniert nicht
in Native kompilierten .NET Binaries
man muss jetzt allerdings sagen
Reflection wird eh immer weniger benutzt
die meisten Leute
programmieren C Sharp und haben wahrscheinlich noch nie
Reflection verwendet Chatge
wer von euch ist C Sharp Entwickler und
benutzt regelmäßig Reflection
oder umgedreht wer von euch ist C Sharp
Entwickler und benutzt eigentlich nie Reflection
kann man gegen Musel
static linken und dann auf Ubuntu ausführen
ich sag mal in der Theorie
ja praktisch habe ich es noch nicht
gesehen mit .NET
du kannst .NET gegen Musel C linken lassen
für ähm
Alpine Linux
was dann allerdings nicht auf Ubuntu
läuft
es gibt aber noch was anderes worauf ich jetzt eigentlich raus will
so
also das ist das
das ist auch noch ein Nachteil davon
und das sind eigentlich so die zwei größten Nachteile
die mir einfallen
erst mal Portability
und wenn man so Sachen wie Reflection verwenden will
dann geht das nicht
mittlerweile gibt es aber mit Code Generation
tatsächlich schon ganz brauchbare Alternativen
für vieles wo früher Reflection benutzt wurde
da wird nämlich
zur Compile Zeit
schon
Dinger generiert die du später
die du nicht erst zur Runtime
aus Reflection zusammenbauen musst
also aber
was man machen kann natürlich ist
man kann das ganze kompilieren
unter einem alten System
oder besser gesagt
es muss kein altes System sein
du kannst das kompilieren
gegen eine alte GLibc Version
das kannst du machen
ja und was ich da anbiete
zum Beispiel ist
ein altes Debian oder ein altes Ubuntu
zu verwenden das noch im Support
ist so dass du nicht im Zweifelsfall
dir noch irgendwelche
Probleme einfängst
du kannst zum Beispiel sagen wir mal
guck das hier kann man jetzt ja nicht ausführen lassen
auf Ubuntu 18.04
aber was du natürlich machen kannst ist
was du machen kannst ist
du kannst hier natürlich
Update
ich zeige euch das jetzt mal exemplarisch
wir sind schon so krass gesidetrackt
da ist das jetzt auch vollkommen egal
wir sind hier auf dem alten Ubuntu 18.04
wir installieren uns mal an .NET hier drüben
drauf
ich hoffe ich brauche nicht noch irgendwelche Dependencies
dass der ganze Schritt läuft
wir installieren uns mal an .NET drauf
was sagt heute eigentlich die Küche
heute gab es super gesunde
Mozzarella Sticks
mit Pommes Frites und Dip
so und jetzt kann ich in dem Container
ne ich muss erstmal die Software nehmen
kann man mit Docker CP Ordner kopieren
geht das
kann ich jetzt sagen
das geht doch bestimmt nicht oder
kann ich sagen
tatsächlich
man kann Ordner kopieren
das wusste ich ja gar nicht dass das funktioniert
das ist ja cool
nice
so und jetzt kann ich hier drinnen sagen
.NET
.NET
.NET Publish Release
oh
IQ fehlt okay
das brauche ich jetzt nur zum kombinieren
install libIQ
ne oh meine Güte
libIQ
äh
IQLips
wie heißt der Kram unter
libIQDef
.NET Buch
das brauche ich jetzt nur für das Build System
später zum Ausführen nicht mehr
so
jetzt bauen wir uns das Binary
auf einem alten
ich weiß nicht was da ist
Was das älteste, noch supportetste Ubuntu ist, ich vermute mal 1804.
So, und jetzt kompilieren wir das Ganze hier auf dem System.
Und jetzt werdet ihr feststellen, dass, wenn das fertig ist,
wir unter Build ein Binary liegen haben,
was im Prinzip das gleiche Binary ist wie vorher, 1,4 MB.
Das jetzt allerdings läuft auf einem alten Ubuntu.
Und wenn ich das jetzt runterkopiere,
hier, kekw, kekel, build, kekw,
wenn ich die Sachen halt auch nochmal gescheit benennen würde, ja,
build, kekw, lul.
So, jetzt habe ich hier das Binary aus der VM.
Und wenn ich das hier ausführe auf einem Arch-Linux, dann geht's auch.
Dann geht's auch.
Das heißt, damit kann man das umgehen.
Man nimmt sich einfach ein möglichst altes Linux, was noch supportet ist,
und kompiliert das da drauf, gegen die GLibc-Version, die da drauf ist.
Man kann natürlich auch nur die alten Library-Versionen nehmen
und das Ganze dann umbiegen und auf dem aktuellen System kompilieren.
Vielleicht die bessere Variante.
Aber das funktioniert.
So, und jetzt habe ich in C-Sharp einen Binary,
was 1,4 MB groß ist,
saumäßig, saumäßig schnell startet,
und relativ portable ist,
zwischen allen Linux-Versionen.
Ich mein, Ubuntu 18.4, welche Version hat das?
Welche GLibc-Version hat das Ganze?
Kann man da nicht danach suchen.
Uptsearch, wir haben 227, ha?
227, Release-Date, 2018, ja.
Also, wir haben jetzt ein .NET Binary, was auf jedem Linux lauffähig ist,
was seit 2018 erschienen ist.
Das ist zwar nicht ganz so gut wie ein Go-Binary,
was rückwirkend läuft auf jedem Linux-Site-Kernel 2638 oder so.
Mein Kernel war schon ein bisschen älter, ja.
2638, März 2011.
Also, unser .NET-Programm ist nur lauffähig bis 2018.
Aber man sieht, die haben sehr viel aufgeholt.
In C-Sharp, also sprich, man kann mit C-Sharp portable, kleine,
das war relativ kleine, self-contained Binaries erzeugen mittlerweile,
die ziemlich kompatibel lauffähig sind zwischen unterschiedlichen Linux-Versionen.
Und ich denke mal, du wirst kaum einen Anwendungsfall finden, wo du sagst,
hey, das muss aber lauffähig sein auf einem System von vor 2018.
Da fällt mir jetzt ehrlich gesagt nicht so viel ein, wo das der Fall ist.
Ich bin mir auch gar nicht sicher, ob Ubuntu 18.04 tatsächlich das Kleinste ist,
was du laufen lassen kannst.
Vielleicht geht auch 16.04 noch.
Wir können, by the way.
Lass uns nochmal gerade ausprobieren.
Es interessiert mich mal, ob 16.04 geht.
Aber ich persönlich denke, 16.04 wird nicht mehr funktionieren.
Aber probieren wir mal.
By the way, 0.4 immer, weil 0.4 alle zwei Jahre die LTS-Version sind.
Das heißt, wenn wir...
Wenn überhaupt, dann muss man die verwenden.
Update, gibt es überhaupt noch...
Kann man noch? Ja, okay.
Upt, install, curl.
Ja.
Gucken wir mal.
Da bin ich jetzt selbst gespannt, ob das noch funktioniert.
So, installiert mal.
Gucken wir mal, ob man .NET überhaupt gescheit aufrufen kann da drauf.
Dann wird man...
Dass man das downloaden kann.
Und entpacken kann ich mir vorstellen.
Das hängt.
Warum hängt das?
Aber es soll doch wahrscheinlich auch die nächsten Jahre...
Noch laufen.
Ja, macht es ja auch.
Das Problem ist ja nur rückwirkend.
Vorwärts nicht.
Wenn du das jetzt da kompiliert hast, das ist...
Das ist vorwärts lauffähig bis in alle Ewigkeit unter Linux.
Es ist nur rückwärtskompatibilität, das Problem.
Vorwärtskompatibilität ist kein Problem.
Okay.
Ah, .NET.
.NET Version.
Ich brauche bestimmt wieder EQ irgendwas.
Ja, genau.
Up, install, lib, EQ, dev.
Okay, lauf.
Aber wahrscheinlich, weil gibt es Version nicht, ne?
Naja.
Ist minus minus Version.
Ja, ist minus minus Version.
Okay, dann machen wir CP nochmal.
CP, den ganzen Ordner dahin kopieren.
Ja, genau.
Hat funktioniert.
So, und jetzt sagen wir Build.
Ah, das funktioniert noch.
Guck mal, man kann das Ganze noch bauen unter Ubuntu 16.04.
Oder auch nicht.
Ne, kann man nicht mehr.
Hehe.
Äh, oder habe ich GCC?
Und so nicht installiert.
Ah, das kann sein.
Up, install, build, essentials.
Vielleicht brauche ich das auch noch, dass das funktioniert.
Build.
Build, essential.
Aber es kann sein, dass 16.04 nicht mehr funktioniert.
Das, das ist möglich.
Ne.
Ne.
16.04 funktioniert nicht mehr.
Aber witzigerweise läuft das Binary, weil sich auf 18.04 kompiliert und auf 16.04.
Ja.
Also, guck mal, wir können unsere Binary bis Ubuntu 16.04 ausführen, also, ganz ehrlich, ich behaupte einfach mal, das reicht, das ist 8 Jahre, ich glaube, 8 Jahre rückwirkend ist zu 99% ausreichend.
Fällt euch irgendein Fall ein, wo 8 Jahre rückwirkend Kompatibilität von Betriebssystemseite nicht ausreicht, also, Siemens setzt noch Körner an, die mit 2.x anfangen.
Ja, dann brauchst, dann brauchst, dann musst du Go verwenden, wenn du da rückwirkend was haben willst, was da noch läuft.
Gerade in der Bank sollte das ausreichend sein.
Ich kann es dir nur aus Sicht von der Versicherung sagen.
Dort wird ganz stark drauf geguckt, dass du Systeme hast, die aktuell sind.
Ja, die haben doch Oldschool-Dinger wie IBM Hosts und sowas.
Habe die normalen Linux-Systeme damit ganz stark drauf geguckt, dass die immer im Support sind und immer was Aktuelles verwenden.
Also, aktuell ist dann sowas wie.
Red Hat 8 oder so.
Was nicht wirklich aktuell ist, aber noch supported ist für 10 Jahre.
Oder wie lang auch immer Red Hat 8 noch supported ist.
Und das geht, das geht ja.
Da drauf lauffähig ist das.
Also, lange Rede kurzer Sinn.
Ich habe ziemlich lange gebraucht, das dazu zu beantworten.
Aber, IoT, nicht IoT, AOT, also ganz normales Kompilieren zu Self-Contained Binaries, ist mittlerweile in .NET echt gar nicht mehr so schlecht.
Es ist noch nicht ganz so geil wie unter Google.
Und noch nicht so easy zu benutzen.
Und noch nicht ganz so kompatibel wie unter Go.
Aber, es hat sich sehr viel getan.
Und ich würde sagen, zu 95% ist es ausreichend, was es kann.
Wer wirklich heutzutage Software programmiert, die lauffähig sein muss, auf Kernel 2638,
der wird es wahrscheinlich mit einem Custom-Build von .NET auch hinkriegen.
Aber das ist, glaube ich, den Aufwand nicht wert.
Dann muss sie irgendwas anderes verwenden.
Aber, wer solche Anforderungen hat, muss sich nicht mehr auf die Software konzentrieren.
Der hat bestimmt auch Gründe dafür.
Und der entwickelt wahrscheinlich die Sachen dann auch nicht in .NET Core für solche Systeme.
Also, ich finde, 8 Jahre rückwirkend ist echt mehr als ausreichend.
Um jetzt mal noch zu sagen, also was ich meine mit Portabilität ist,
du kannst das bauen auf einem Liniensystem, dann nimmst du das Binary, kopierst es auf ein anderes Liniensystem rüber,
führst es aus und es geht einfach.
Ohne, dass du irgendwas installieren musst zusätzlich.
Das meine ich mit Self-Contained Binaries.
Portable Binaries.
Irgendjemand wollte wissen, wofür man Reflection braucht.
Was ist eine Reflection?
Reflection ist die Möglichkeit in .NET, zur Laufzeit Informationen über sich selbst rauszubekommen.
Klingt jetzt erstmal wir.
Aber, nehmen wir mal ein Beispiel.
Nehmen wir mal ein Beispiel.
Eines der Beispiele schlechthin für .NET und Reflection.
Plugins.
Stell dir vor,
du entwickelst eine Software, die per Plugins erweiterbar sein soll.
Du musst ja zur Laufzeit die Plugins laden.
Du kannst ja keinen Compile-Step da in irgendeiner Art und Weise einbauen,
dass das irgendwie gebundelt wird, integriert wird in deine Software,
weil du lieferst die Plugins ja nicht mit aus.
Du lieferst die Software aus und die kann mit Plugins erweitert werden.
So und irgendjemand programmiert jetzt quasi einen Plugin in C-Sharp
und legt das in dein Anwendungsverzeichnis.
Und legt das in dein Anwendungsverzeichnis.
Die Anwendung wird gestartet und dann musst du irgendwie diese Plugins laden.
Und das machst du in der Regel über Reflection.
Du nimmst dann Reflection, sagst hey, Load Assembly, guckst nach, welche Klassen gibt es in diesem Assembly.
Dann hast du irgendeine Naming Convention für deine Plugins.
Die müssen beispielsweise ein I-Plugin Interface implementieren.
Dann guckst du mit Reflection nach.
In diesem Assembly gibt es eine Klasse, die I-Plugin implementiert.
Aha, gibt es dann diese Klasse laden.
Und dort die Methode.
Und dann kannst du das in das Init aufrufen.
Plugins sind ein ganz klassisches Beispiel für Reflections, für Reflection.
Und ein bisschen, ein bisschen einfacheres Beispiel.
Stell dir mal vor, du benutzt eine Library.
Und kannst, du musst unbedingt auf eine Funktion zugreifen in dieser Library.
Oder du musst unbedingt etwas internes auslesen von dieser Library.
Weil die Library ist alt, wird nicht mehr maintained.
Aber die Informationen gibt es.
Zum Beispiel, ja, du benutzt, du benutzt irgendeine, irgendeine Library für irgendeine Web-API oder so.
Und der Web-API ist doof, die kannst du einfach mitkönnen.
Du, du benutzt irgendeine, du benutzt irgendeine Library, um irgendein Gerät anzusteuern, so.
Und die Library hat intern Informationen darüber, über die Seriennummer von dem Gerät.
Aber der Typ, der die Library programmiert hat, hat vergessen, dass er ja eine Get, Get-Seriennummer-Methode anbieten sollte.
Leider ist dein Support-Vertrag alt.
Du hast deinen Support-Vertrag abgelaufen und du müsstest 50.000 Euro bezahlen, um eine neue Library-Version zu bekommen.
Was du jetzt machen kannst, ist, du kannst Reflection nehmen und dich mit Reflection durch diese Library durchhangeln.
Und die interne Variable, also irgendeine Private oder Internal, was auch immer, Variable auslesen.
Aus einer Klasse, auf die du eigentlich normalerweise nicht zugreifen kannst.
Per Reflection geht das.
Und für solche ekligen Dinger wird auch meistens Reflection verwendet.
Hauptsächlich aber für so Sachen wie Plugins.
Aber für diese anderen Sachen auch.
Aber man braucht das selten.
Also man braucht es wirklich selten für normale Anwendungen.
Und es ist ja auch ganz logisch, dass das mit self-contained, fertig-kompilierten Binaries nicht funktioniert.
Weil Reflection ist ein Runtime-Feature.
Und du hast keine Runtime mehr, wenn du es zu einem Binary kompiliert hast.
Es gibt beispielsweise die neue Möglichkeit zur Code-Generation.
Hast du ein paar Fälle, die du abdecken kannst, die du früher mit Reflection gemacht hättest, die kannst du heute mit Code-Generation machen.
Aber wenn man Reflection braucht, kannst du keinen AOT verwenden.
In anderen Sprachen, wo es keine Reflection gibt, können die Leute trotzdem Software entwickeln.
Also aus meiner Sicht ist das Nicht-Verwenden-Können von Reflection nicht wirklich ein großes Problem.
Für 95% der Anwendungen.
Viele andere Sprachen haben sowas gar nicht.
Und man kann damit trotzdem ganz normal.
Ich glaube Go hat sowas auch nicht.
Leute, hat Go sowas wie Reflections?
Oder Reflection?
Glaube nicht.
Wie ist bei euch der Prozess für ein Versions-Update von Linux-Distributionen?
Der Go-Debugger ist ja kein...
Das ist ja nicht Reflection.
Du guckst ja nicht zur Runtime dein Programm selbst an.
Sondern als Entwickler guckst du dir das Programm an.
Was ist das?
Was ist machen?
Das würde ich nicht als Reflection sehen.
Also ich glaube nicht, dass Go hat...
Das Go have Reflection.
Runtime Reflection in Go.
Tatsächlich.
Aha.
Und was...
Und was könnten die so?
Okay.
Bisschen...
Bisschen...
Alter.
Zu übertreibend.
Okay.
Bei Go geht das.
Aber Go hat ja auch eine Runtime mit dabei.
Go ist ja nicht nur reines...
Wie soll ich sagen?
Reines Binary mit deinem Code drinne.
Sondern...
Hat ja immer noch seine...
Seine Go-Runtime drinne für...
Thread Scheduling und alles mögliche.
Ja.
Das wusste ich nicht, dass Go sowas hat.
Habe ich auch noch nicht benutzt.
Aber Rust hat sowas beispielsweise definitiv nicht.
Also Rust hat keine Reflections.
Also ganz ehrlich...
C hat keine Runtime.
Rust hat auch keine Runtime.
C++ hat auch keine Runtime.
Und ob man das bei Go so bezeichnen kann, bin ich mir auch unschlüssig.
Also mit Runtime meine ich sowas wie die .NET Runtime.
Wo du dann im Endeffekt...
Deinen Code...
Nicht als Binary vorliegen hast.
Sondern als irgendwelchen Bytecode.
Der zur Laufzeit quasi von der Runtime...
Dann ausgeführt wird.
Oder äh...
Kompiliert wird und ausgeführt wird.
Was...
Bei Rust...
Keine Ahnung, was die damit meinen.
Eventuell...
Die Tatsache ist, dass...
Die Tatsache ist, dass...
Eventuell die Teile von Rust...
Die so Sachen machen wie...
Äh...
Runtime...
Out of Bounds Checking von Arrays oder sowas.
Aber das ist...
Das ist ganz weit entfernt...
Von einer kompletten .NET Runtime.
Wenn du dir C Sharp anguckst.
Deswegen ist dann Rust Binary auch nur ein paar Kilo Byte.
Und ein .NET Binary mit...
Embedded Runtime 67 MB.
Ah ja.
Wie ist bei euch der Prozess für ein Versionsupdate von Linux Distros?
Wird die Anwendung auf einen frischen Server mit...
Aktuellem OS umgezogen?
Oder wird stumpf das OS abgedeckt?
Das kommt ein bisschen drauf an, wie die Leute Bock haben.
Also...
In der Regel wird neuer Server installiert.
Oder drüber installiert.
Also sprich...
Das System wird ausgeschaltet, neu installiert.
Und die Anwendung wieder drauf deployt.
Wenn es was...
Ist, was ein bisschen länger dauert.
Und das nicht so lange down sein darf.
Dann bauen manche Leute auch einen zweiten Server auf.
Und lassen das dann drauf ausführen.
Manche machen tatsächlich auch ein...
OS Upgrade.
Wobei ich frisch aufbauen immer gar nicht so übel finde.
Da sammelt sich ja manchmal ein bisschen...
Schrott an.
Wir haben uns leicht Sidetracken lassen.
Was unsere...
Schätzen...
Experimente anbelangt.
Ich glaube ich hab von...
4 Stunden Stream...
Die letzten...
1,5 Stunden über was anderes gelabert.
Lasst uns doch mal schnell noch...
Die restlichen Elemente durchklicken.
Die es wenigstens noch gibt.
Richtig geiles UI.
Was wir gebaut haben, oder?
Boah Alter. Massive krasses UI.
Ein Button für Theme switchen.
Huge.
Wir haben eine Hover-Card.
Die macht was?
Ah!
Man muss ja auch hovern drüber.
Also, das ist tatsächlich ganz nützlich.
Wenn man es braucht ist gut, dass es da ist.
Input.
Mal gucken ob hier das Input...
fällt, frisst nicht.
Ende und Post 1.
Wenn das Theme jetzt noch mehrsprachig kann...
Ah ja!
Du meinst...
Mehrsprachiges Schwarz und Weiß?
Ah, das verstehe ich.
Also ich finde das...
Ja das muss auf Chinesisch...
Sieht das bestimmt anders aus.
Labels? Ja gut.
Labels halt.
Menübars? Brauche ich auch.
Quasi nie auf einer Webseite.
Okay.
Zum Durchschalten auch gut, dass es sowas gibt.
Popover.
Das ist jetzt ein bisschen verwirrend sind die Dinger schon.
Ja.
Es gibt ein...
Dropdown-Menü.
Was standardmäßig nach oben geht und nicht nach unten.
Und es gibt ein Popover.
Was drunter und nicht aufer poppt.
Ich finde das Default-Verhalten besser.
So wie er das hat.
Ist schon alles gut.
Aber die Benahmung im Web-Kontext...
ist halt schon ein bisschen pepege.
Und ja, ich weiß, man nennt die Dinger halt so.
Aber ist trotzdem blöd.
Progress Bar.
Oh, ich hoffe das benutzt nicht
die Native-Browser-Progress-Dinger.
Die sind richtig abfuck.
Okay.
Ich hoffe, das muss ich mal kurz ausprobieren.
Ich hoffe das benutzt
keine Native-Progress-Bar.
Die sind so eklig zu stylen.
Probieren wir das doch mal aus.
Hier, Components.
Warum was denn?
Äh.
Ja, Components.
Progress.
Progress.
Oh.
Alter, Visual Studio Code hat einfach mal
wieder den Abgang gemacht.
War zu lang inaktiv im Hintergrund.
Kann man nicht erwarten, dass es dann auch weiter funktioniert.
Progress.
What the f...
Progress. Alter.
Warum geht das nicht?
Okay.
Machen wir halt so.
Geht's jetzt?
What?
Fuck. Warum nicht?
Was hat's für Schmerzen?
Geht doch. Geht doch.
Keine Ahnung, ob das Autocomplete wieder im Arsch ist.
Es basiert auf...
Oh, zum Glück
auf einem Div, Alter.
Und nicht das Native-Progress.
Die Native-Progress-Elemente
sind so broken
und kaputt.
Und lassen sich so kacke stylen
und sehen auf Mobile wieder
schrottig aus oder auf dem Desktop schrottig aus
und so. Ja, das finde ich
viel besser, dass die das einfach mit einem Div machen.
Anstatt das Native...
Anstatt das Native-Progress-Element
zu benutzen.
Viel besser.
Finde ich.
Ich weiß nicht, wie ihr das seht, aber ich finde das besser.
Value.
Ups.
Value.
Gleich, keine Ahnung, 20?
Perfekt. Und was kann man da sonst noch einstellen?
Was hat das sonst noch so?
Max. Mehr gibt's nicht.
Ja, Color und so kann man wahrscheinlich dann
überschreiben hier.
Ja, Style, Translate.
Ich muss sagen, ich finde den
Ansatz von dieser Library wirklich ganz cool.
Dass es hier quasi in den Code
reinpastet und du
es nicht extra rappen musst und selbst dran rumbasteln kannst.
Wenn ich jetzt hier irgendwie
den Style bräuchte für...
Keine Ahnung, dass der Balken hier
in Rot ist,
da könnte ich mir selbst ein Property
machen, um das durchzuschalten oder ich sag einfach, ey,
ich will das defaultmäßig
in...
Ich bin jetzt ein bisschen
verwirrt,
wie ich die Farbe
da mache. Moment, das ist jetzt...
Ach hier, das ist der, das ist auch die Farbe
hier. BG Red
400.
Zack, schon ist Rot. Das finde ich
cool. Das muss ich
jetzt nicht nochmal extra rappen, sondern könnte hier quasi
sowas sagen wie hier, keine Ahnung,
Export irgendwie Alert
ist False.
Ups.
Ja, Alert.
Kann ich mal. Das ist False.
Da könnte man jetzt hier drinnen zum Beispiel
gucken...
Wie könnte man das jetzt gescheit machen?
Warte mal, ich glaube so, gell?
Template String könnte man jetzt machen.
Quasi checken ob...
Chat, wo ist das Problem?
Wo ist... Was war...
Ah, ah ja. Kann es sein, dass
ich das in Klammern setzen muss oder so?
In...
Oh. Ah ja.
Ah gut.
Schön ist
was anderes.
Muss man...
Oder kann ich hier irgendwas
einsetzen? Kann ich... Moment, ich könnte doch einfach
hier drinnen direkt
könnte ich
quasi gucken, ob Alert und dann
wenn es Alert ist, dann ist es hier
keine Ahnung, BG Red 500.
True.
Wird nicht Rot. Achso.
Achso, ja logisch.
Also es ist entweder Alert
oder wenn es nicht
Alert ist, dann
ist es BG
Primary.
Siehst du, und schon kann ich das umschalten.
Das finde ich... Ich finde den Ansatz von
dieser UI Library wirklich nicht schlecht.
Weil diesen Mist müsste ich eh
selbst basteln. Warum müsste...
Warum sollte ich ihren Kram
noch extra nochmal rappen
drumherum? Einfach da drin
editieren. Vom Ansatz
her echt nicht verkehrt.
So und jetzt könnte ich hier beispielsweise sagen
hier Alert
und jetzt ist das eben ein
Progress mit einer roten Progress Bar
und wenn ich Alert wegmache, ist das wieder ein normaler
Progress.
Eigentlich ganz cool. So, was haben wir sonst noch?
Radio Groups.
Es sind halt Buttons.
Es sind Buttons,
die laggen?
Irgendwie bisschen laggy sind?
Jetzt haben sie sich eingekickt. Aha.
Ah, das ist auch was,
was ich nicht mag.
Der Klick zwischen Text und Button
nichts macht.
Ich finde, wenn man hier hinklickt,
oder Chat, wie seht ihr das?
Wenn man hier hinklickt, sollte das
zählen als
ich will das haben. Weil warum soll ich...
Ohne Mist. Aus welchem Grund sollte ich hier
hinklicken? Hier, genau an die Stelle.
Wenn ich das
nicht selecten will.
Range Kalender brauchen wir nicht. Select.
Den ganzen Text. Du kannst den...
Das geht ja witzigerweise. Den Text kannst du
klicken.
Den Text kannst du klicken.
Du kannst den Button klicken, du kannst den Text klicken,
aber du kannst nicht zwischen den Button und den Text
klicken. Was ich schon wieder
übertrieben finde, was ich auch schon gesehen habe,
es gibt Libraries, die machen dann die komplette
Zeile. Ja, das ist ein bisschen übertrieben.
Ja, das ist
bisschen doof. So, was haben wir
sonst noch? Range Kalender. Select.
Separator.
Es ist ein horizontaler Strich.
Und vertikaler Strich.
Sheet.
Oh. So was brauche
ich nicht. Das ist zu advanced, das Webdesign
für mich.
Way too advanced. Sekunde.
Lass mich mal was
checken. So.
Was haben wir denn
hier? Use to show a
placeholder while content is loading.
Das ist nicht schlecht.
Ich bin für sowas immer
zu faul. Ich blende
an irgendwie... Ich blende lieber
einen Spinner ein, über
die komplette Seite, anstatt
sich mir die Mühe gebe, zu gucken,
ah, wie groß könnte es
am Ende werden? Und ah, bauen wir einen
Skeleton? Ne.
Da wird irgendwo ein Spinner eingeblendet
und dann hängt die Seite halt einfach so lange
oder macht nix.
Bis alles da ist.
Da bin ich... Cool, dass es das gibt,
aber da bin ich viel zu faul für.
Slider.
Oh.
Jetzt kommt die Frage der Fragen.
Ist es ein Native Slider?
Nein. Oder?
Nein, ist es nicht.
Sehr gut.
Das ist ein selbstgebauter Slider.
Ich mag die Leute,
weil die
Slider, die im Browser Native
zur Verfügung stehen, sind auch kacke.
So.
Da haben wir einen Slider.
Nächste Frage ist, funktioniert
der Slider in Chrome richtig, weil
die Native Slider in Chrome
buggen immer mal ganz gerne.
Ein Slider.
Und der buggt, der buggt auch.
Der buggt auch.
Okay, da ist es
doch ein Native Slider.
Roll Slider.
Nö, anscheinend nicht.
Weil der richtige Slider
ist ein Inputfeld mit Typ
Range, glaube ich, ne?
Nö. Aber...
Der Slider buggt
auch.
Guck.
Sobald ich aus dem Fenster rausgehe, hier ist der am
buggen. Und witzigerweise in Firefox
nicht.
Das ist irgendein Chrome Bug,
den ich nicht richtig nachgestellt
kriege. Manchmal ist es so, manchmal
nicht. Aber in Firefox ist es nie so.
Kein Problem. In Firefox
und in Chrome,
sobald du aus dem Fenster rausgehst,
broken Slider. Ich meine,
das ist jetzt wahrscheinlich nicht das normale Userverhalten,
erstmal den Slider anzuklicken, dann aus
dem Fenster raus und wie der Rest trotzdem doof, dass er nicht geht.
Da müsste man wahrscheinlich noch
irgendwie das fixen, extra für
Chrome, mit Fenster active, Fenster
inactive und dann wieder fokussen oder
sowas. Weiß nicht, was man dafür machen muss.
Da gibt es ein Sonner.
Leute, bevor ich das jetzt anklicke,
kann mir irgendjemand
erklären, was ein Sonner ist?
Wenn man mit der Maus ausrutscht, schon richtig.
Ja, finde ich auch. Also ganz ehrlich,
ich finde, sowas sollte funktionieren.
Was ist ein Sonner?
Nicht so nah.
Nicht so nah. Sonner.
Okay, wir gucken, was es ist.
Was? Ladering?
Ne, das würde wahrscheinlich Spinner heißen, oder?
Was ist ein Sonner?
Okay.
Ein Toast!
Warum heißt es Sonner und nicht Toast?
Unter Toast hätte ich mir
sofort was vorstellen können.
Warum Sonner?
Warum muss man es so kompliziert machen,
Alter? Ach, Sonner ist
eine Library.
Svelte Sonner. Ach, deswegen
heißt das. Okay.
Ich dachte,
Sonner ist irgendwie eine spezielle Art
von Toast oder sowas.
Okay, das ist cool, dass das drin ist.
Finde ich nice. Okay, Switch
muss, must have.
Ist auch wichtig,
dass es gibt, weil es gibt kaum ein Element,
was so abfuck zu stylen
ist, wie...
Was ist da immer unten drunter? Eine Checkbox?
CSS
Experts im Chat.
Wie macht man einen Switch mit einer Checkbox, gell?
Ich glaub, da wird eine Checkbox
missbraucht für, dass das so angezeigt
werden kann. Ein Button?
Nee, oder?
Doch hier, Input-Type, Checkbox.
Ja. Genau.
Checkbox. Die Leute machen das immer mit einer Checkbox.
Ah, da kann man bei der
Slider mal gucken. Da habe ich nämlich, glaube ich,
nicht richtig geguckt. Nee, das Slider
ist tatsächlich ein
Span und kein
Slider.
Ja, das Web ist kaputt, aber
richtig, ja.
So, Switch.
Das wird immer mit einer Checkbox gemacht.
Das ist mir auch schon aufgefallen, so.
Dann haben wir noch eine normale Table.
Halt, eine Table.
Was ich spannend finde, ist, kann die Zebra-Style...
Ich finde Zebra-Style
bei Tables immer nice.
Sieht nicht so aus.
Tabs?
Ja, Tabs halt.
Wichtig und richtig,
dass es Tabs gibt.
Wie heißt das, Adon, dass immer den Kopf
einer offenen Klammer anzeigt, wenn man
Tabs hat?
Meinst du sowas wie Rainbow Brackets
oder sowas?
Du meinst sowas hier?
Also das hier ist Default tatsächlich in Visual Studio Code.
Das Highlighten
von den dazugehörigen Sachen.
Es gibt Addons zum
Klammern-Highlighten, ja.
Weiß ich jetzt aber nicht genau, was du
machen willst.
Und weiß ich aus dem Kopf wahrscheinlich auch nicht, wie das Addon heißt.
So, aber
Tabs, das ist wichtig. Ohne Tabs geht es nicht.
Also in Wim
früher habe ich sowas wie
Rainbow Brackets oder sowas
glaube ich verwendet.
In Visual Studio Code...
Ja, ich weiß was du meinst. Du meinst sowas hier.
Du hast verschiedene Klammern.
Ich glaube sogar, dass das Default
mittlerweile in Visual Studio Code ist. Kann das sein?
Ist das mittlerweile Default?
Weil ich bilde mir ein, ich habe nichts
installiert dafür.
Ja, ist Default mittlerweile. Brauchst gar keinen Addon.
Ja, Tabs wichtig.
Ohne Tabs geht nichts.
Textarea.
Schon wieder ein Bug gefunden.
Der...
Das ist nicht der richtige Cursor.
Das müsste eine Hand sein an der
Stelle hier. Ich persönlich
finde es nicht schlimm, weil ich
eh nur sehr ungern Resizable
Textareas verwende.
Und Resizen am liebsten ausschalte, wenn
es überhaupt eine Textarea sein muss.
Toggle.
Äh, what?
Du schmilzt quasi mit dem Hintergrund.
Sieht man das besser im Lightstream? Oh, mein Auge!
Robert!
Close.
Fast erblindet.
Toggle Group. Ach, damit kann man.
Ok, verstehe.
Falls irgendjemand sowas machen will.
Ja, nice.
Gar nicht so schlecht.
Tooltip. Das Ding ist...
Ah, ich wollte gerade sagen, wo bleibt denn der Tooltip?
Da ist er doch.
Aber guck mal. Nachdem ich geklickt habe,
gibt es keinen Tooltip mehr.
Das ist klar.
So was, so was muss sein.
Ich hoffe, man braucht keine extra Library
dafür, dass das funktioniert.
Also, ich mag den Ansatz. Der gefällt mir wirklich
gut, der Ansatz von der Library.
Ich werde das mal
im Auge behalten.
Ok, Leute. 4,5 Stunden, das war
für meine Verhältnisse erstaunlich lang
heute. Ich weiß nicht, wie es die Leute
schaffen, 8 Stunden am Stück zu streamen.
Die müssen ja permanent
Halsschmerzen
haben, wenn du jeden Tag 8 Stunden
am Stück laberst.
Ich weiß nicht, wie das geht.
Geht es was? Ne, ich gehe noch nichts essen.
Eine halbe Stunde gehe ich was essen.
Immer ein Entschluss.
Ich hoffe, euch hat es gefallen.
Wir haben uns ja wieder richtig krass
sidetracken lassen.
Aber ich denke jetzt mal ehrlich, Leute.
Ich glaube, die Streams sind immer relativ
educational, oder?
Jetzt vielleicht mein
Frontendgebastel weniger.
Aber beispielsweise der Exkurs
über AOT Compilation in
.NET.
Das hast du doch auch nicht an jeder Ecke.
Auf den Qsharp
Stream. Ich bin jetzt mir nicht sicher, ob
normalerweise würde ich denken, du veräppelst mich.
Aber ich weiß, dass es eigentlich
fast nichts gibt, was es
nichts gibt. Deswegen gucke ich jetzt mal, ob es das nicht wirklich gibt.
Mich hätte es nicht
gewundert. Gibt es
Qsharp
für Quantenalgorithmen?
What?
Whatever. Da brauche ich erstmal
einen Quantencomputer für, würde ich sagen.
Dass wir Qsharp machen können.
Qsharp klingt auch
toll, oder? Qsharp.
Qsharp.
Wie würde Semper Video dazu
sagen? Der würde nicht Qsharp sagen.
Der würde sagen, Q
würde er wahrscheinlich sagen.
In Qsharp.
In diesem Video nur ganz kurz.
Qsharp.
Nein, nein, nein. Nicht Raute.
Wenn schon Q Lattenzaun.
So, Leute. Also, ich gehe jetzt auf.
Gehe ich nachher was futtern.
Jetzt erstmal ein bisschen
Kreiselgrinden.
MMO Kreiselgrind startet.
Gucken, ob die anderen Leute schon
da sind. Dann mache ich jetzt eine Runde
RPs.
Ein paar Gegner killen. Bis dann. Macht's gut.
See you.
