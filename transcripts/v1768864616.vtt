WEBVTT

00:00.000 --> 00:24.360
Auf gehts Pogu, ich muss nebenbei ins Discord gucken, ob MMO Kreiselgrind losgeht, da muss

00:24.360 --> 00:44.000
ich nämlich abhauen. Da ist er wieder. So Leute, seid ihr bereit noch für eine Runde

00:44.000 --> 01:01.680
zu gehen? Dann macht mal kurz ein Update in meiner Vm. Irgendwas stimmt auch mit meinem

01:01.680 --> 01:12.400
Mikrofon nicht. Sekunde, was hat Windows da wieder getrieben? Na ja, es ist doch zum

01:12.400 --> 01:19.440
Großteil eigentlich okay so. Ja, weiter gehts. Heute kümmern wir uns um zwei essentiell

01:19.440 --> 01:27.660
wichtige Sachen, nämlich Secrets und Let's Encrypt Zertifikate. Oder generell Zertifikate

01:27.660 --> 01:33.040
bei den meisten Leuten. Eigentlich Let's Encrypt, wenn man mal ehrlich ist. Wer gibt

01:33.040 --> 01:38.000
heute schon noch großartig Geld aus, außer mein Arbeitgeber, aber wer gibt da noch normal

01:38.000 --> 01:43.720
im Kopf ist, der gibt da noch großartig Geld für Zertifikate aus. Beziehungsweise macht

01:43.720 --> 01:48.760
sich den Aufwand dann mit teilweise noch manuellem Verlängern und sowas in der Richtung.

01:48.760 --> 01:54.920
Webminister, danke schön für den Zap. Patrick, moin. Schön, dass ihr alle am Start seid.

01:54.920 --> 02:02.200
Benutzt irgendjemand von euch noch Zertifikate, die nicht Let's Encrypt sind? Also ich weiß,

02:02.200 --> 02:08.240
bei mir auf der Arbeit haben wir noch Zertifikate, die nicht Let's Encrypt sind, weil irgendwelche

02:08.240 --> 02:12.840
Leute der Meinung sind, es ist besser, wenn sie die immer von Hand bestellen, weil sie

02:12.840 --> 02:20.600
dann wichtig sind. Ansonsten hat es keinen weiteren Sinn. So, ich mach mal kurz. Okay,

02:20.600 --> 02:25.760
läuft der Cluster noch? Nee, der Cluster ist abgekackt. Na auch gut. Ohne Mist, ich

02:25.760 --> 02:32.480
würde für Let's Encrypt auch was bezahlen. Kein Ding? Also wenn Let's Encrypt, also ich

02:32.480 --> 02:39.360
würde theoretisch sogar für Let's Encrypt auch so bezahlen, aber wenn die wirklich wollten,

02:39.360 --> 02:44.520
die müssten einfach nur irgendwie so paar ganz kleine Sachen vielleicht als Premium

02:44.520 --> 02:58.120
bieten, von der Supporter-Batch im Forum bis zu vielleicht irgendwie die Möglichkeit,

02:58.120 --> 03:01.520
die E-Mails nochmal zu redirecten, die man da eingetragen hat, wobei das natürlich dann

03:01.520 --> 03:09.320
auch bis braucht werden kann. Muss man sich halt genau überlegen. Also man müsste echt

03:09.320 --> 03:19.720
viel machen, dass ich da Geld bezahlen würde bei Let's Encrypt. Ja, das hat es bei uns

03:19.720 --> 03:24.360
auch gehießen, aber das kommt meistens von Leuten, die das nicht so meinen. Also es gibt

03:24.360 --> 03:29.120
zwei Varianten, entweder die haben keine Ahnung oder die meinen das eigentlich gar nicht so,

03:29.120 --> 03:33.400
sagen es aber trotzdem, weil sie es dann nicht mehr wichtig sind. Also es gibt ja Leute, die

03:33.400 --> 03:38.960
kümmern sich hauptsächlich um Zertifikats-Handling, Zertifikats-Management, Bestellen, Überwachen,

03:38.960 --> 03:45.160
Verneuern und diese Leute sagen dann null Let's Encrypt in der Produktion. Das sagen

03:45.160 --> 03:48.920
die allerdings nur, weil sie Schiss haben, dass Let's Encrypt sie irgendwie überflüssig

03:48.920 --> 03:55.520
macht. Ich weiß nicht, Stefan, wie war es bei euch? Oder wie schätzt du es denn ein?

03:55.520 --> 04:09.800
So, ich starte mal kurz die VM neu und wir machen mal Delete Minikube, machen wir den

04:09.800 --> 04:13.560
Cluster mal kurz aus, machen hier alles zu. Wir starten jetzt nämlich den Rechner mal

04:13.560 --> 04:22.120
neu, also die VM, nicht den Rechner, weil sonst wäre ja das Stream weg. Das kommt auch

04:22.120 --> 04:25.760
dazu, aber ich glaube gerade wenn es von Leuten kommt, die ein bisschen Ahnung haben, dann

04:25.760 --> 04:35.880
sehen die so ihre Fälle wegschwimmen. Also wenn die vorher was mit Zertifikaten zu tun

04:35.880 --> 04:44.160
hatten. Was ich gerade mache, ich habe gerade den Stream angemacht vor 4 Minuten. Ne, die

04:44.160 --> 04:52.520
Diablo 4, da werde ich mal warten bis es rauskommt. Ich kann mich auch dran erinnern, die Diablo

04:52.520 --> 05:06.720
3 Beta war auch nicht übel, weil der erste Akt auch das beste am ganzen Game war. Es

05:06.720 --> 05:12.680
ist ja noch nicht mal nur Zertbot. Mittlerweile ist der Mist ja schon in nahezu alles Mögliche

05:12.680 --> 05:18.760
integriert. Du hast Caddy geprinkt, das standardmäßig mit Traffic, falls irgendjemand wirklich noch

05:18.760 --> 05:23.040
Traffic verwenden will, freiwillig. Na gut, im Containerumfeld ist Traffic wirklich ganz

05:23.040 --> 05:30.720
nice, wenn man was braucht, was easy zum Setup ist. Allerdings, ich bin kein großer Traffic

05:30.720 --> 05:37.440
Fan. Caddy hat es eingebaut, Traffic hat es eingebaut, alle möglichen Hoster und Cloud

05:37.440 --> 05:49.640
Provenzer, alle haben es eingebaut mittlerweile. Das ist halt schon sehr praktisch. Ja, bewundert

05:49.640 --> 05:54.960
mich, ich glaube auch nicht. Nice, hat es richtig gelohnt. Moment, soll ich dich time

05:54.960 --> 06:03.480
outen? Moment, ich time oute dich persönlich sogar. Ich weiß gar nicht wie das geht. Wie

06:03.480 --> 06:13.880
überhaupt? Hatte man da nicht im Knopf, wenn man den Namen anklickt? Warte mal, ich bin

06:13.880 --> 06:23.720
zu blöd, ich kann das glaube ich nicht mehr. Ich kann nicht bunnen, blocken, ah hier, hier,

06:23.720 --> 06:45.440
hier, time out. Nice, so, jetzt bist du getime outet. Jetzt habe ich dich wieder untime outet,

06:45.440 --> 06:54.120
jetzt bist du wieder da. Was ist denn das hier, was passiert denn da im Hintergrund gerade?

06:54.120 --> 07:12.120
The Way aktualisiert Leute, The Way. Rust, nicht Blazingly Fast aktuell. Das ist überhaupt

07:12.120 --> 07:20.840
nicht Blazingly Fast. Ich mache das jetzt aus. Nochmal, nochmal neu starten. The Way.

07:20.840 --> 07:30.080
Erstmal halbes Internet runterladen, ja. Ah, okay, jetzt geht es schneller, na gut. Was

07:30.080 --> 07:34.400
passiert da eigentlich gerade? Der lädt wirklich, das ist ja fast schon zweites Node Modules

07:34.400 --> 07:47.360
was hier abgeht. Ich erzähle gleich was wir heute machen wenn ein paar mehr Leute da sind.

07:47.360 --> 07:50.640
Ich muss nebenbei immer ins Discord, erinnert mich mal please mit dran, ich muss mal nebenbei

07:50.640 --> 07:54.680
immer ins Discord gucken ob die Leute da sind. Dann machen wir nachher noch eine Runde Kreisel

07:54.680 --> 08:06.880
grind. Mein Gott, Rust, mach hinne, Alter. Was ist denn das? The Way, was ist das überhaupt?

08:06.880 --> 08:15.760
Das ist ein Snippet Manager für Command Line. Geht kein Mensch, Alter. The Way. Weg damit,

08:15.760 --> 08:24.960
cool. Alles klar, exzellent, perfekt. Okay, Reboot. Wir machen jetzt gleich ein neues

08:24.960 --> 08:35.240
GitHub Repo. Ja, wir machen jetzt ein neues GitHub Repo. Für den Stream heute. Beziehungsweise

08:35.240 --> 08:41.560
wir können ein GitHub Repo machen wo wir die ganzen Sachen rein posten in nächster

08:41.560 --> 08:47.160
Zeit. Also, dann erzähle ich mal so ungefähr was wir heute vorhaben. Es ist blöd wenn

08:47.160 --> 08:51.720
ich das jetzt erzähle. Ich starte erstmal den Cluster wie wir das letzte Mal aufgehört

08:51.720 --> 09:01.040
haben und dann gucken wir uns das an. Ja, geiles Notizprogramm, das haben wir jetzt

09:01.040 --> 09:14.160
gebraucht. So, ich hoffe es ist alles geupdatet. Cute. Cute K8S, da sind wir. Okay, alles

09:14.160 --> 09:23.600
klar, also ich werde das mal ganz kurz zeigen, mal kurz einloggen in Shithub. Fiveheader,

09:23.600 --> 09:45.760
alles klar. Repos. Nein, das nicht, das ist mein privates, da machen wir hier. Machen

09:45.760 --> 09:51.120
wir auch Public, ist nicht wild, dann könnt ihr danach gucken was wir heute gebastelt haben.

09:51.120 --> 09:58.680
Create Repo. So, also ich zeige euch mal wo wir das letzte Mal stehen geblieben sind,

09:58.680 --> 10:01.960
dass ihr so ungefähr durchblickt was wir das letzte Mal gemacht haben und dann sage

10:01.960 --> 10:09.760
ich was wir heute machen werden. Als erstes starte ich mal wieder wie gehabt einen lokalen

10:09.760 --> 10:17.280
Kubernetes Cluster, bei mir auf der VM mit Minikube. Das ist nichts wo man später produktive

10:17.280 --> 10:21.640
Kubernetes Cluster mit laufen lässt, sondern das ist nur lokal in der VM zum ausprobieren.

10:21.640 --> 10:29.200
Was ich mir demnächst vielleicht mit euch mal angucken will war Talos OS. Keine Ahnung

10:29.200 --> 10:33.560
ob das was taucht. Ich habe eh nicht vor im großen Stil Kubernetes Cluster selber zu

10:33.560 --> 10:38.560
hausen, aber sich so ein bisschen mit so Basics zu beschäftigen ist nie verkehrt, das hilft

10:38.560 --> 10:43.080
einem auch wenn man Managed Lösungen verwendet, weil man dann Dinge einfach besser einschätzen

10:43.080 --> 10:51.240
kann. So, also unser lokaler Kubernetes Cluster ist am Laufen und ich applye jetzt mal die

10:51.240 --> 10:58.680
Config vom letzten Mal. Ich bin mir nicht ganz sicher ob das so überhaupt funktioniert

10:58.680 --> 11:06.440
hat. Nee das funktioniert so nicht. Moment. Warte mal. Ich muss doch erstmal meine Passwörter

11:06.440 --> 11:12.320
setzen oder? Ich habe doch hier so eine Datei die sich super geheim nennt. Dann löschen

11:12.320 --> 11:19.800
wir den Cluster nochmal kurz. Wir machen jetzt nochmal start.sh. Dann sollte das Ding hoffentlich

11:19.800 --> 11:30.880
den Cluster hochfahren. Und dann sagen wir kubectl applye-k und applye in unsere aktuelle

11:30.880 --> 11:36.000
Config. Ich zeige mal kurz was wir aktuell im Cluster laufen haben. Nicht wahnsinnig

11:36.000 --> 11:40.720
irgendwie spannendes Zeug. Wir haben aktuell nur zwei Sachen laufen und zwar wir haben

11:40.720 --> 11:46.960
einmal ArgoCD laufen und einmal eine selbst entwickelte App, die nichts anderes außer

11:46.960 --> 11:57.840
bisschen Blödsinn auf dem Webinterface ausgibt zum testen. Dazu haben wir ein paar Configs

11:57.840 --> 12:04.640
noch angelegt. Kann ich euch zeigen. Wir haben noch ein paar Configs angelegt. So wir legen

12:04.640 --> 12:14.680
eine Namespace an für ArgoCD und ein bisschen Magic. Wir starten ein Ingress Server, quasi

12:14.680 --> 12:21.360
ein Reverseproxy, dass wir uns unter ArgoCDkappaLUL.com connecten können. Ihr könnt es ausprobieren

12:21.360 --> 12:24.240
ob ihr euch hinconnecten könnt. Ihr könnt nicht hinconnecten, weil ich die Domainlokale

12:24.240 --> 12:31.200
umgebogen habe. Dann haben wir zwei Appdefinitionen für ArgoCD. Einmal es selber und dann unsere

12:31.200 --> 12:35.280
selbst entwickelte App. Ich zeige euch das Ganze jetzt auch noch mal im Webinterface

12:35.280 --> 12:43.320
bzw. wenn man die Config Applian auf den Cluster. Das mache ich jetzt mal. Es gibt mehrere

12:43.320 --> 12:49.760
Möglichkeiten so eine Jaml-Konfigurationsdatei auf seinen Cluster zu schieben. Also es gibt

12:49.760 --> 12:56.880
generell mehrere Varianten so ein kombiniertes Cluster zu administrieren. Die billigste Variante,

12:56.880 --> 13:03.440
ich weiß nicht wie ich es jetzt nenne, die einsteigerfreundlichste Variante ist per Kommandozeile

13:03.440 --> 13:11.640
mit kubectl. Oder was ich witzig finde, Leute jetzt mal eine Frage. Wie sprecht ihr kubectl

13:11.640 --> 13:18.440
aus? Ich meine meiner Meinung nach steht das ja eindeutig für Kubernetes Control. Aber

13:18.440 --> 13:26.280
es gibt Leute die sprechen es nicht kubectl oder kubectl aus, sondern haltet euch fest

13:26.280 --> 13:42.560
kubectl. Also Kuschelwürfel quasi, Würfelkuschel. K9S ist das beste Interface, das bringt dir

13:42.560 --> 13:47.560
aber nichts wenn du den Cluster managen willst, großartig. Damit kannst du schön Sachen angucken.

13:47.560 --> 13:58.840
Ja es gibt Leute die sprechen das so aus, kubectl so. Also quasi Würfelkuschel, Würfelkuschler.

13:58.840 --> 14:13.200
Ich würde ja sagen der Chat darf sich aussuchen wie ich es ausspreche, das halte ich aber

14:13.200 --> 14:22.200
nicht aus das kubectl zu nennen. Sonst gewöhn ich mich noch an diesen Blödsinn. Das ist

14:22.200 --> 14:30.200
weiterhin kubectl. So also Cluster gestartet, also die einfachste Variante kubectl ist über

14:30.200 --> 14:34.720
kubectl. Da kann man alle möglichen Sachen, man kann sagen create, namespace, das Ding

14:34.720 --> 14:41.760
hat übrigens wie ihr seht auch TabCompletion. TabCompletion ist was was ich lustigerweise

14:41.760 --> 14:48.320
relativ selten in YouTube Tutorials sehe wo es um Kubernetes geht. Ich glaube das liegt

14:48.320 --> 14:54.280
daran dass viele Leute aus welchen Gründen auch immer die Administration von Windows aus

14:54.280 --> 15:02.240
machen in Videos. Ich weiß nicht was die geritten hat, warum man sowas machen will. Wir benutzen

15:02.240 --> 15:08.560
tatsächlich ziemlich playing Kubernetes ohne irgendwas aktuell, lokal. Die nächsten Tage

15:08.560 --> 15:16.200
machen wir tatsächlich dann auch mal richtig was ordentliches und zwar in Google Cloud.

15:16.200 --> 15:27.600
So und man kann in seine config für die shell, kann man eintragen dass man das hier haben

15:27.600 --> 15:34.520
will guck kubectl completion für zsh. Wenn man das hier einträgt dann hat man autocomplete

15:34.520 --> 15:40.560
für seinen Kubernetes Cluster. Und dann kann man das ganze noch aliasen und dann hat man

15:40.560 --> 15:46.320
ganz kurze Sachen und hat noch die Möglichkeit ihr seht es hier schon autocomplete zu machen,

15:46.320 --> 15:50.960
also besser geht es da nicht wenn man das über Kumano-Zehler administrieren will. Alias

15:50.960 --> 15:55.440
dass das ganze abgekürzt ist plus noch, ja was es noch gibt zeige ich euch vielleicht

15:55.440 --> 16:11.280
auch noch, aber nachdem ich den Cluster konfiguriert habe. So und der Nachvollziehbarkeit halber

16:11.280 --> 16:17.840
macht man außer beim Einstieg eigentlich relativ wenig über kubectl direkt am Kubernetes Cluster,

16:17.840 --> 16:22.440
sondern man macht das alles in Kubernetes Manifest Dateien, das sind solche Yammels,

16:22.440 --> 16:26.480
so was hier, so eine Yammel Datei zum Beispiel, da steht dann zum Beispiel drinne leg einen,

16:26.480 --> 16:33.200
also ich könnte zum Beispiel sagen kubectl create namespace keckel, da würde er namespace

16:33.200 --> 16:38.320
anlegen. Ich kann das allerdings auch so im Yammel definieren, das hat den Vorteil wenn

16:38.320 --> 16:42.080
ich das im Yammel definiere ist das halt irgendwo nachvollziehbar was passiert, ich brauche

16:42.080 --> 16:47.720
keine komischen Skripte mit Shell Befehlen, ich kann das relativ easy auf weitere Server

16:47.720 --> 16:52.080
anwenden, ich kann auch Sachen automatisch deployen lassen über Yammels, das ist alles

16:52.080 --> 16:56.560
über Kommandozeile ein bisschen, ein bisschen eklig und wenn man das eincheckt auf GitHub

16:56.560 --> 17:01.800
in den Repo, sorry auf Shithub in den Repo eincheckt, dann kann man sogar nachvollziehen

17:01.800 --> 17:07.320
wer wie wo wann was dran geändert hat, also das ist eigentlich so da way wie man das heutzutage

17:07.320 --> 17:13.920
macht, man macht natürlich trotzdem Sachen weiterhin mit kubectl, logs angucken, Portstatus

17:13.920 --> 17:19.120
angucken, Serviceadresse an was auch immer, alle möglichen Geschichten, man kann auch

17:19.120 --> 17:24.600
falls gerade einer im Chat erwähnt hat, man kann auch K9S verwenden als Frontend für den

17:24.600 --> 17:31.920
Cluster und sich dann so Sachen angucken wie IP vom Container, logs, logs vom Container

17:31.920 --> 17:42.200
und solche Geschichten, gibt es halt da keine logs. So und wenn man so eine Konfiguration

17:42.200 --> 17:49.080
erstellt hat in Yammel, da gibt es keine so strikte Vorgabe wie man das machen muss,

17:49.080 --> 17:53.600
man kann da kann man sich jeder selbst ein bisschen überlegen wie man das ganze eben

17:53.600 --> 17:58.600
organisiert, also ich mache ganz gerne zumindest aktuell mal gucken wie das ist, wenn ich da

17:58.600 --> 18:03.760
mal wirklich im richtig großen Stil komplett selbst konfigurieren muss, vielleicht denke

18:03.760 --> 18:11.120
ich mir da auch was anderes aus, pro installierte Anwendung ein Ordner wenn die Custom-Config

18:11.120 --> 18:18.720
braucht und für jede App so ein Application-File hier oben im Apps-Folder. So und dann hat

18:18.720 --> 18:23.360
man hier seine Konfiguration für den Cluster und dann geht man in das Verzeichnis und sagt

18:23.360 --> 18:30.720
kubectl apply entweder minus f, da kann man dann direkt das Yammel-File angeben was man

18:30.720 --> 18:36.520
auf den Cluster applyen will oder man sagt minus k Punkt, dann wird das Customize-File

18:36.520 --> 18:45.280
im aktuellen Verzeichnis ausgeführt. Customize ist eingebaut in kubectl und auch in ganz

18:45.280 --> 18:50.240
vielen anderen Gruppen des Tools, damit kannst du so ein bisschen die ganzen Yammel-Dateien

18:50.240 --> 18:55.360
bundeln. Ich kann zum Beispiel sagen hier, führ mal alles aus was im Argo-CD-Ordner ist

18:55.360 --> 19:00.660
und zusätzlich noch das da. Man kann da noch mehr machen, man kann auch Namespaces überschreiben

19:00.660 --> 19:07.640
in allen quasi ja darunter liegenden Ressourcen und noch viel andere ekliche Geschichten

19:07.640 --> 19:11.160
machen aber das lassen wir jetzt. Ich applye das jetzt mal auf meinen Cluster und dann

19:11.160 --> 19:18.840
gucken wir mal ob das noch funktioniert was wir das letzte Mal gebaut haben. Ah das wird

19:18.840 --> 19:23.520
wahrscheinlich nicht funktionieren, ja ok was auch immer. Das wird wahrscheinlich nicht

19:23.520 --> 19:28.080
funktionieren Leute, ich weiß auch warum das nicht mehr funktionieren wird. Mein GitHub

19:28.080 --> 19:44.240
Talken vom letzten Mal ist expired. Da sollte jetzt eigentlich nix gehen. Also schauen wir

19:44.240 --> 20:03.440
mal Pots. Zumindest Argo-CD selber läuft. Secret. Initial Secret. Einmal das mal hier.

20:03.440 --> 20:09.520
Port forward in den Cluster rein. Machen das mal auf. Das einzige was wir auf unserem Cluster

20:09.520 --> 20:20.480
aktuell installiert haben ist Argo-CD. Also das einzige was wir aktuell installiert haben

20:20.480 --> 20:25.920
auf unserem Kubernetes Cluster ist Argo-CD. Argo-CD ist ein Tool was dafür gedacht ist

20:25.920 --> 20:32.720
um eben solche Konfig hier aus einem Git Repo automatisch auf Kubernetes Cluster auszuführen.

20:32.720 --> 20:41.120
Also man macht dann gar nichts mehr per kubectl sondern man ändert so eine Datei, pusht das

20:41.120 --> 20:49.200
ins Git Repo und Argo-CD applyt das automatisch auf den Cluster. So das funktioniert allerdings

20:49.200 --> 20:53.920
aktuell gerade nicht weil mein GitHub Talken ausgelaufen ist und das Ding kommt nicht zu

20:53.920 --> 20:59.880
GitHub. Das heißt ich muss mal kurz mein GitHub Talken drüber kopieren damit wir heute weiter

20:59.880 --> 21:08.040
machen können. So Clipboard aus. Chat ihr müsst jetzt leider mal kurz weggucken. Ich

21:08.040 --> 21:13.120
weiß ihr guckt auch so weg wenn ich sage aber manchmal muss man auch nur sicher gehen.

21:13.120 --> 21:30.320
Wo haben wir es denn hier? GitHub Talken. Dauert eine Minute da muss ich den Clamp drüber kopieren.

21:30.320 --> 21:51.920
Ich hoffe man sieht nichts mehr. Github Talken. Da ist es zack. Glaube das war es. Das sollte

21:51.920 --> 22:04.600
reichen. Gehen wir mal zurück. Mache euch wieder an. Und ich hoffe ich habe meinen Talken

22:04.600 --> 22:08.200
jetzt nicht geleakt. Nein ich habe nicht meinen Talken geleakt. Und selbst wenn ich meinen

22:08.200 --> 22:12.120
Talken geleakt hätte das wäre nicht so schlimm. Weil ich habe was gemacht was ich schon längst

22:12.120 --> 22:15.800
hätte machen sollen wenn ich öfter streamen und in GitHub rum klicke. Kann ich euch vielleicht

22:15.800 --> 22:22.240
auch noch mal so als Sixhead Tipp erzählen. Wenn ihr einen privaten GitHub Account habt

22:22.240 --> 22:28.680
so wie ich hier und ihr habt da einige Repos drinnen und ihr habt Talkens generiert wo

22:28.680 --> 22:32.200
man Zugriff auf Repos hat wo ihr vielleicht nicht wollt dass jeder wenn ihr aus Versehen

22:32.200 --> 22:36.560
im Stream mal das Talken zeigt auf eure privaten Repos Zugriff hat dann könnt ihr folgendes

22:36.560 --> 22:41.160
machen. Ihr könnt eine Organisation erstellen auf GitHub zum Beispiel so hier wie ich hier

22:41.160 --> 22:49.120
5header und dann erstellt ihr euch einen neuen GitHub User mit irgendeiner Fake E-Mail Adresse

22:49.120 --> 22:54.320
oder aber mit irgendeiner E-Mail Adresse irgendeiner Catch All E-Mail Adresse von einem eurer Domains

22:54.320 --> 23:00.240
erstellt ihr euch einen neuen User und gebt diesem User Zugriff auf diese Organisation

23:00.240 --> 23:05.120
dann hat und dann stellt ihr die Talkens nur mit diesem neuen User aus dann habt ihr Zugriff

23:05.120 --> 23:11.120
auf die Repos in der Organisation mit eurem alten User mit dem ihr normalerweise verwendet

23:11.120 --> 23:16.000
und mit eurem neuen User aber wenn ihr das Talken liegt kann nichts Schlimmeres passieren

23:16.000 --> 23:21.040
als dass Leute Zugriff bekommen auf die Repos in eurer Organisation und dann muss man halt

23:21.040 --> 23:35.640
sich überlegen was man da reinpusht und was nicht. Ja so siehts aus. Ok. Delete. Ich initialisiere

23:35.640 --> 23:41.160
mal unseren Cluster neu und diesmal mit dem richtigen Git-Talken und dann hoffe ich zumindest

23:41.160 --> 23:49.560
dass es jetzt das richtige Git-Talken ist. Ihr habt den Blackscreen durchschaut. Shit.

23:49.560 --> 23:56.480
Jetzt ist vorbei. Blackscreen hack. Finde ich persönlich schlimmer als Blackfacing zu

23:56.480 --> 24:03.520
Fasching. Oh da haben sie wieder diskutiert aber ich sag dazu nichts. Ich sag dazu nichts

24:03.520 --> 24:13.800
das ist eine mühsliche Diskussion. So ist das Ding gestartet. Apply. Ich hoffe es funktioniert

24:13.800 --> 24:17.360
jetzt sonst müssen wir heute anfangen ohne dass ich euch den letzten Stand zeigen kann.

24:17.360 --> 24:26.800
Ok nicht nochmal ausführen. Secret. Secret ist noch nicht da das ist ok. Get Pots wir

24:26.800 --> 24:33.160
können auch K9S aufmachen und uns die Pots angucken und feststellen dass Argo CD Server

24:33.160 --> 24:39.040
gerade erstellt wird und deswegen man auch noch nicht drauf zugreifen kann. Aha da

24:39.040 --> 24:47.920
sind wir. Passwort. Port forward machen in den Cluster. Öffnen. Admin. Zack. Sign in.

24:47.920 --> 24:55.160
Update. Und. Ach das ist normal das kommt manchmal vor. Das kommt manchmal vor wenn

24:55.160 --> 25:01.360
man zu oft auf GitHub zugegriffen hat. Dann gehts das geht gleich. Das wird gleich. Repository

25:01.360 --> 25:20.240
not found. Welches Repo nehmen wir denn überhaupt. Ich hätte ich wäre halt doof dass meine

25:20.240 --> 25:28.960
Github Keys abgelaufen sind. Welches Repo nehmen wir denn überhaupt. Github ja. Ach

25:28.960 --> 25:33.680
ich hab mein privates Repo noch. Ja ne das funktioniert natürlich nicht. Wenn ich mein

25:33.680 --> 25:42.520
privates Repo nehme. Ok dann müssen wir das mal umstellen. Und zwar. Git. Remote. Rm.

25:42.520 --> 25:51.680
Origin. Git. Remote. Add. Origin. Im neuen Repo. Und dann sagen wir Git. Push. Oh.

25:51.680 --> 25:59.960
Bridge. Genau. Git. Push. Origin. Master. Oder Main. Wie es euch beliebt. Und dann

25:59.960 --> 26:07.000
haben wir hier den ganzen Krempel drinnen. Sehr schön. Gut. Und jetzt können wir pushen.

26:07.000 --> 26:19.920
So jetzt können wir das ganze noch mal ausführen. Unser Cluster initialisieren und hoffen dass

26:19.920 --> 26:25.080
es jetzt endlich funktioniert. Es wird wahrscheinlich auch nicht funktionieren. Weil meine App glaube

26:25.080 --> 26:37.880
ich auch in einem privaten Repo von meinem privaten Account liegt. Ja. Leider. Ne. Cute

26:37.880 --> 26:51.360
App. Naja gut. Das ist egal. Die App kann ruhig fehlschlagen. Ich kann euch aber zeigen

26:51.360 --> 26:57.480
dass es soweit alles funktioniert. Im Cluster. Weil wir machen das heute eh anders. Ihr habt

26:57.480 --> 27:00.920
ja mitbekommen ich hab jetzt Probleme mit meinen Github Secrets. Dass ich die hier nicht leake

27:00.920 --> 27:06.560
und sonst was. Wir kümmern uns heute um zwei Sachen. Einmal Secret Management in Kubernetes

27:06.560 --> 27:12.080
um Zertifikate. Aber erstmal um Secret Management. Also wenn ihr einen Kubernetes Cluster habt

27:12.080 --> 27:18.200
da werden ja da höchstwahrscheinlich entweder Infrastruktur Management Anwendungen drin laufen

27:18.200 --> 27:23.280
die Talkons, Passwörter, Usernamen und sowas brauchen damit sie funktionieren. Oder aber

27:23.280 --> 27:27.960
ihr habt irgendwelche Apps die irgendwo drauf hinzugreifen müssen. Die brauchen auch Passwörter,

27:27.960 --> 27:33.800
Usernamen, Talkons und haste nicht gesehen. Und da gibt es zwei verschiedene Varianten

27:33.800 --> 27:44.920
wie man das machen kann. Wir machen das heute mit einem Secret Manager. So. Rampel ist gepusht.

27:44.920 --> 28:08.280
Apply. Recaps Wobblors. Was sieht man da? Das meist benutzte E-Mode ist Wubgasm. Alles

28:08.280 --> 28:22.680
klar. Gucken wir uns später angucken. So Cluster ist eingerichtet. Forward. Ne Secret. So und

28:22.680 --> 28:25.800
dann können wir uns angucken wo wir das letzte Mal stehen geblieben sind. Ich hoffe es funktioniert

28:25.800 --> 28:38.520
jetzt. Ansonsten machen wir einfach weiter. Local Hosts. Update. Alter. Ah Moment. Moment.

28:38.520 --> 28:46.720
Das ist das Initiale. Ich hab Probleme auf GitHub zuzugreifen. Wait a minute. Ich hab

28:46.720 --> 28:53.760
das Repo noch nicht angepasst, oder? Ich hab das Repo noch nicht angepasst. Das ist

28:53.760 --> 29:14.480
5header. 5header. Ok jetzt. Ne Moment. Was mach ich denn hier? Das hier. So. So ist

29:14.480 --> 29:22.600
richtig. Und dann auch mit dem großen H an der Stelle. Jetzt aber gut. Jetzt nochmal

29:22.600 --> 29:31.000
und dann soll es aber endlich funktionieren. Basefin 16. Very secure. Highly, highly secure.

29:31.000 --> 29:46.080
Ist schon. Achso ne das Repo nicht. Das kann ich dir zeigen. Das Secret ist hier drinnen.

29:46.080 --> 29:53.520
Da. Guck der macht hier ein bisschen Magic. Der stellt ein wie oft er GitHub abfragt und

29:53.520 --> 30:01.480
hier kommen die ganzen Secrets her. Deswegen hat es eben auch nicht funktioniert. Das

30:01.480 --> 30:05.000
sei das Ding. ArgoCD muss funktionieren damit ich mein Cluster gescheit da drüber verwalten

30:05.000 --> 30:07.800
kann. Sonst müsste ich jetzt halt von Hand apply nochmal. Wär ja auch nicht schlimm.

30:07.800 --> 30:32.080
So. Apply. Kommt drauf an. Kommt drauf an wieviel du da drauf laufen lasst. Also so pauschal

30:32.080 --> 30:35.760
finde ich kann man es nicht sagen. Man muss sich bei Kubernetes halt mit ganz vielen Sachen

30:35.760 --> 30:40.840
drum herum beschäftigen. Kubernetes an sich ist nicht das Problem. So das gesamte Ökosystem

30:40.840 --> 30:46.000
und die ganzen Feinheiten. Und wenn man dann vom hundertsten ins tausendste gucken muss

30:46.000 --> 30:50.000
das ist tatsächlich ein Problem. Also Docker Compose File ist auf jeden Fall einfacher

30:50.000 --> 30:54.480
zu managen. Um Welten einfacher zu managen. Aber wenn man ab und zu mal was ändern muss.

30:54.480 --> 31:08.120
Also ein Kubernetes Cluster. Aber ansonsten kann das durchaus Sinn machen. Also ich würde

31:08.120 --> 31:23.680
jetzt nicht sagen es ist doof. Also das kann durchaus Sinn machen ja. So jetzt aber Cluster

31:23.680 --> 31:40.720
please funktionier. Was? Wollt ihr mich verarschen? Ich hab's so angepasst. I-Fedder? Hä? Moment

31:40.720 --> 31:45.680
ich applye das jetzt gleich nochmal. Ohne den Cluster neu aufzubauen. Hab ich doch irgendwie

31:45.680 --> 32:15.440
nur drinstehen? Fuck genau. Ach so. Ja dann. Okay mal gucken ob es jetzt funktioniert.

32:15.440 --> 32:24.080
Ja ja forward alles gut. Ah jetzt ist schon besser. Kaum passt man das repo an ist alles

32:24.080 --> 32:31.560
gut. So und was ihr jetzt nicht gesehen habt ist. Der züngt sich jetzt automatisch alle

32:31.560 --> 32:39.160
anderen Apps rüber. Wie euch vielleicht aufgefallen ist. Also ich hab eine Root App also so eine

32:39.160 --> 32:45.840
Master App so eine Main App in meinem Repo drinne und die holt sich aus diesem Verzeichnis

32:45.840 --> 32:52.400
alle anderen App Definitionen. Das ist quasi so die Base App selbst. Das ist meine selbst

32:52.400 --> 32:57.480
entwickelte App und das hier ist Argo CD selbst. Das hat den großen Vorteil ich zeig

32:57.480 --> 33:02.440
es euch jetzt nochmal. Das geht übrigens an der Stelle nicht. Weil ich keinen Zugriff

33:02.440 --> 33:11.040
auf das Repo hab und auch nicht auf das Repo mit dem Image. Aber das müssen wir eh fixen.

33:11.040 --> 33:35.760
Cute. Cute App. Wir machen jetzt hier nochmal für die Cute App ein Repo. Äh Public. Bäm

33:35.760 --> 33:53.040
geb ihm. Kopieren. Git Remote Rm Origin Git Add Push. Ok jetzt haben wir den ganzen Klempel

33:53.040 --> 34:02.200
hier. Ich hoffe die Action funktioniert auch. Git Tag. Ach ja gut. Minus Minus Tags pushen

34:02.200 --> 34:09.800
alles gut. So ich hoffe meine Action funktioniert. Nö die Action funktioniert nicht. Ok warum

34:09.800 --> 34:32.680
auch immer. Action. Ah weil Action. Sollte die GitHub Action nicht funktionieren jetzt

34:32.680 --> 34:42.720
eigentlich. Äh ich sag da gleich was zu. Ich guck mir gleich den Chat an. Warum geht

34:42.720 --> 34:50.960
meine GitHub Action nicht. Muss ich vielleicht ein neues Tag machen. Tag. Version 6 oder

34:50.960 --> 34:59.080
so. Warum läuft meine GitHub Action nicht. Ach jetzt. Best Feature ever. Ok. Action

34:59.080 --> 35:03.000
läuft. Gucken wir mal kurz in die Action rein. Ja ich muss das alles jetzt umziehen

35:03.000 --> 35:08.200
in meine Public Orga. Deswegen muss ich das nochmal ein bisschen fixen vom letzten Mal.

35:08.200 --> 35:12.600
Bevor wir heute mit der eigentlichen Geschichte anfangen können. So blub blub blub. Wo bloß

35:12.600 --> 35:21.600
ist auch verkehrt. Aufwärts. Pfeilfeder muss das sein. So. Pfeilfeder Cute App. Und

35:21.600 --> 35:50.760
dann muss ich noch der Action. Rechte geben. Äh. Äh. Warum geht das nicht. Äh. Äh.

35:50.760 --> 36:19.960
Wo ist das Problem. Warum darf ich das nicht einstellen. Äh. Äh. Äh. Äh. Äh. Äh.

36:19.960 --> 36:38.240
Hä. Wo ist das Problem. External Secrets probiere ich heute aus. Ähm. Ok. Muss ich irgendwie

36:38.240 --> 36:45.960
den User wechseln. Muss ich irgendwie in den Organisations User wechseln oder sowas.

36:45.960 --> 37:00.640
Warum darf ich hier nichts einstellen. Wo ich die Secrets ablege in dem lokalen Vault.

37:00.640 --> 37:06.360
Das ist jetzt kacke. Ich brauche GitHub Actions die in die Container Registry pushen dürfen.

37:06.360 --> 37:27.600
Warum geht das nicht. Settings. Muss man da vielleicht irgendwas einstellen. Packages.

37:27.600 --> 37:38.200
Action. General. Vielleicht da drüber. Aha. Aha. Man muss es komplett für die Organisation

37:38.200 --> 37:45.920
erst mal erlauben dass das funktioniert. Alles klar. Ok. Das ist gut zu wissen. Das

37:45.920 --> 37:53.560
war mir so nicht klar. GitHub. Pfeilfeder. Shit. Ne ne das ist nicht Premium Only. So

37:53.560 --> 38:04.720
sind wir in der App. Gehen wir in die Settings. Nochmal in die Actions. General. Jetzt. Ok.

38:04.720 --> 38:08.680
Alles klar. Jetzt passt es. Gut. Weil unsere Actions sollten fehlgeschlagen sein und zwar

38:08.680 --> 38:15.840
mit er hat keine Rechte auf die Container Registry verbinden to push. Tja. So sieht

38:15.840 --> 38:20.400
es aus. Neuer Tag. Sollten die alten vielleicht mal löschen. Aber gut. Tags löscht man

38:20.400 --> 38:26.520
eigentlich nicht. Tags sollten eigentlich unverändert so auf immer das gleiche Comet

38:26.520 --> 38:30.480
zeigen. Aber man kann Tags löschen. Nur dass man was nicht machen sollte heißt ja nicht

38:30.480 --> 38:41.920
dass man es nicht machen kann. So und jetzt geht hoffentlich. Der Workflow für meine

38:41.920 --> 38:48.400
Container Registry. Und dann gucke ich mir und dann gucke ich mir den Chat an. Push

38:48.400 --> 38:53.600
das Image ins richtige Repo. Ich hab es eben angepasst ja. Ich bilde mir ein ich hab es

38:53.600 --> 39:00.880
eben angepasst auf Pfeilfeder Organisation. Sehen wir jetzt gleich. Ach fuck. Ne hä warum

39:00.880 --> 39:10.920
nicht. Ich hab das doch eben angepasst. Ah ich hab nicht gepullt lokal. Ich hab vergessen

39:10.920 --> 39:37.240
zu pullen. Ja. Was. Ich hab vergessen zu pullen. Ok. Jetzt aber.

39:37.240 --> 39:45.800
Also wer wissen will wie man Tags pusht ist eigentlich relativ easy. Man sagt git push

39:45.800 --> 39:54.200
und entweder minus minus du lead oder Doppelpunkt 0.0.1 zum Beispiel. Oder git push origin.

39:54.200 --> 39:58.840
So und dann kann man den ersten Tag zum Beispiel löschen. Und dann muss man allerdings auch

39:58.840 --> 40:02.520
noch sagen dass man ihn lokal löscht weil ansonsten ist er irgendwann einfach wieder

40:02.520 --> 40:18.400
da. Dann ist der Tag weg. Aus irgendwelchen Gründen ist jetzt der GitHub Workflow nicht

40:18.400 --> 40:26.720
gelaufen. Ja Mensch was ist denn heute los. Warum geht denn das nicht. Jetzt. So. Please

40:26.720 --> 40:32.240
Prage Chat. Wir brauchen wieder eine Runde Prage dass das funktioniert. Das letzte Mal

40:32.240 --> 40:38.440
hat es auch erst funktioniert als der Chat Prage gespammt hat. Gut nice Chat. Jetzt kann

40:38.440 --> 40:43.480
nichts mehr schief gehen. Jetzt ist jetzt alles gut. Jetzt easy win easy win. Jetzt läuft

40:43.480 --> 40:58.000
es ohne Probleme durch. Alter. Was. Was hat er denn jetzt für Probleme. Repository must

40:58.000 --> 41:08.520
be lowercase. Das ist aber heute wirklich ein ganz schöner Akt man. Ok. Repository must

41:08.520 --> 41:20.120
be lowercase. Also dann 5 header so geschrieben vielleicht. So. Massive. Tolles. The best

41:20.120 --> 41:31.560
feature ever. Genau. So muss es heißen. Neuer Tag drauf. Es ist nicht das rechte Problem.

41:31.560 --> 41:35.520
Wir nähern uns. Wir nähern uns der Sache. Best feature ever wird gepusht. Es muss jetzt

41:35.520 --> 41:41.600
gehen. So viel Prage. So viel Prage wie im Chat ist muss es jetzt einfach gehen. Übrigens

41:41.600 --> 41:48.520
wenn man das schön machen will mit GitHub Actions man kann auch die Steps cashen sodass

41:48.520 --> 41:53.720
er nicht immer wieder den gleichen Container neu neu neu bauen muss. Potato Bob danke

41:53.720 --> 41:58.600
für den Sub. So jetzt Prage please. Ich will jetzt mal das eigentliche vom heutigen Stream

41:58.600 --> 42:04.480
machen und nicht GitHub Actions vom letzten Mal fixen. Push. Ok das ist gut. Das ist

42:04.480 --> 42:15.160
gut. Nice er hat gepusht. Endlich. Poggers. Nice. Ok. So jetzt kann ich in meinem Manifest

42:15.160 --> 42:25.160
einstellen. Hat funktioniert. Easy. So jetzt kann ich in meinem Manifest einstellen dass

42:25.160 --> 42:32.880
wir bei Qt App nicht Wuppler sondern 5 header verwenden wollen und zwar Version äh keine

42:32.880 --> 42:43.800
Ahnung. Punkt 10 ist glaube ich die letzte. So. Push. Best feature ever. Beste Git commits

42:43.800 --> 42:53.800
heute des Tages. Alles klar. Und jetzt sollte automatisch das ganze schon Applied werden.

42:53.800 --> 43:16.040
Es kann doch gar nicht sein dass das Repo nicht gefunden wurde. Jetzt hat er es. Ist

43:16.040 --> 43:23.880
doch richtig. Ach es funktioniert ja auch. Es funktioniert. Es funktioniert. So Pods

43:23.880 --> 43:50.760
backing of image. Unauthorized. Das ist public. Das Image ist public.

43:50.760 --> 44:02.840
Das Image ist public oder oder etwa nicht. Also das Repo ist public. Da ist normalerweise

44:02.840 --> 44:09.040
das. Nee ich brauche kein Key. Das Image. Das Image ist public. Guck. Probieren wir

44:09.040 --> 44:27.040
Git nicht geht. Alter doch. Ja wenn man das. Ich habe mit GitHub Organisation noch nie

44:27.040 --> 44:36.080
was gemacht aber normalerweise ist die Package Registry public wenn das Repo public ist und

44:36.080 --> 44:47.000
das Repo ist public. Ok Package Settings. Change Package Visibility. Ok aus irgendwelchen

44:47.000 --> 44:55.360
Gründen. Settings ist Disabled per Organisation Administrator. Glücklicherweise bin ich der

44:55.360 --> 45:24.120
Organisation Administrator und kann das. So wo könnte das jetzt sein Packages. Nee.

45:24.120 --> 45:53.960
Nicht so hier drüber jetzt. Nee das das geht jetzt wahrscheinlich wieder nicht. Settings

45:53.960 --> 46:10.480
changes. Da vielleicht. Hier. Ah hier alle alle bitte einmal donaten. Ach hier. Ok alles

46:10.480 --> 46:15.800
klar. Das ist so huge League dass das die öffentliche Adresse ist die ich für Donations

46:15.800 --> 46:36.480
eingetragen habe. Ok jetzt müsste es aber eigentlich gehen. Repositories Cute App wobei

46:36.480 --> 46:46.160
ich habe es doch hier noch auf. Cute App. So. Change Visibility Public. Jawoll. Jetzt

46:46.160 --> 46:49.160
muss ich mit der SMS Authentifizierung machen oder irgend so ein Shit. Nee es geht einfach

46:49.160 --> 46:57.280
so. Nice. Ok Pull. Ja Gott sei Dank man. So hat sich mein Kubernetes Cluster von alleine

46:57.280 --> 47:04.960
gefixt. Nee der ist immer noch der Meinung Image. Backoff Image. Also der Cluster sollte

47:04.960 --> 47:12.200
sich von alleine fixen wenn ich ein bisschen warte. Weil aktuell hängt er im Pull Back

47:12.200 --> 47:16.560
off also der macht es jetzt erst in drei Minuten oder so versucht er wieder zu pullen. Das

47:16.560 --> 47:22.640
ist der Prompt das ist Starship. Ja das ist Starship. So also der Kubernetes Cluster fixt

47:22.640 --> 47:31.080
sich gleich von alleine. Warum das hier sich dreht da kann ich auch gleich noch was zu

47:31.080 --> 47:35.920
erzählen das liegt an meinem lokalen Setup dass das nicht funktioniert. So wenn wir jetzt

47:35.920 --> 47:45.040
lange genug warten bis der nochmal versucht das Image zu pullen dann fixt sich der Cluster

47:45.040 --> 47:49.520
von alleine. Das macht er so der versucht ein Image zu pullen wenn es nicht geht versucht

47:49.520 --> 47:54.360
er wieder ein Image zu pullen und dann macht er so einen Backoff also quasi dann versucht

47:54.360 --> 47:57.280
er für eine Minute nicht zu pullen dann für zwei Minuten nicht zu pullen dann für vier

47:57.280 --> 48:01.840
Minuten nicht zu pullen also ich weiß die genauen Intervalle ehrlich gesagt nicht aber

48:01.840 --> 48:05.760
so in der Richtung dass er nicht permanent irgendwelche Registries voll spammt mit Images

48:05.760 --> 48:13.120
die es vielleicht nicht gibt. Also er müsste sich gleich von selbst reparieren oder ich

48:13.120 --> 48:18.400
kann sagen recreate Deployment das würde auch funktionieren. Also was man unter Kommando

48:18.400 --> 48:33.440
Zeile sagen kann ist z.B. sowas wie Cube CTL ich glaube. Nee Ree. Wie ist es. Restart Deployment

48:33.440 --> 48:48.480
boah weiß ich aus dem Kopf gar nicht. CTL Restart Deployment. Warum findet man da nicht

48:48.480 --> 49:02.120
gleich was. Was. Was. Deployment. Nee. Replace. Nee. Nee. Replace was nicht. Rollout. Ach

49:02.120 --> 49:08.120
hier Rollout. Rollout Restart Deployment und dann die App. Das könnte man machen oder

49:08.120 --> 49:16.400
die oder die oder die die Pods weghauen aber eigentlich sollte. Aha. Aha. Jetzt hat das

49:16.400 --> 49:21.240
jetzt hat das gecheckt. Jetzt hat er sich selbst repariert weil er jetzt das Image pullen

49:21.240 --> 49:31.080
konnte. Okay alles funktioniert. Anwendung läuft. Aus irgendwelchen Gründen proprogress

49:31.080 --> 49:40.880
er noch wegen dem ingress alles gut. So da kann ich euch zeigen wie die App aussieht

49:40.880 --> 49:46.520
wenn man die aufmacht und zwar unter CuteAppKappaLull.com ich hoffe. Okay aus irgendwelchen. Ja Moment

49:46.520 --> 49:59.360
nicht nicht. Okay. Hä. Wait a minute. Ach so. Oh man ich hab mir das Ingress noch nicht

49:59.360 --> 50:05.880
an. Das muss ich unbedingt in mein Startscript reinschreiben. Sonst werde ich mich da noch

50:05.880 --> 50:17.320
oft wundern warum irgendwelche Sachen nicht funktionieren. Start. Nee. Ach so das ist

50:17.320 --> 50:38.640
hier. Start. So. Okay. CuteApp. Da ist die App. Okay. Also das ist das wo wir das letzte

50:38.640 --> 50:42.320
Mal. Hat jetzt nur 50 Minuten gedauert bis wir da sind wo wir das letzte Mal gewesen

50:42.320 --> 50:50.000
sind. Also das ist das wo wir das letzte Mal stehen geblieben sind. Wir haben eine Installation

50:50.000 --> 50:55.200
mit ArgoCD am Start und einer selbst programmierten App die da drüber deployed wird. Nochmal

50:55.200 --> 51:01.000
ganz kurz was das coole daran ist. Normalerweise administriert man seinen Cluster über Kommando

51:01.000 --> 51:05.160
Zeile. Was heißt normalerweise. Eigentlich macht man das normalerweise nicht. Zum starten

51:05.160 --> 51:09.440
macht man es oftmals. Über Kommando Zeile. Aber es ist natürlich besser wenn das ganze

51:09.440 --> 51:13.600
nachvollziehbar ist. Über YAML Files in irgendeinem Git Repo. Da hat man eine History wo

51:13.600 --> 51:16.920
man nachgucken kann. Da kann man einfacher auch zurückrollen. Änderungen rückgängig

51:16.920 --> 51:23.240
machen wenn was nicht geht. So und jetzt mal so als Beispiel was da dran ganz cool ist

51:23.240 --> 51:27.160
wenn das alles automatisch funktioniert. Ich muss nichts machen außer. Also ich habe

51:27.160 --> 51:35.540
aktuell wie ihr hier seht habe ich 1 2 3 4 5 6 Backends laufen von meiner App. Steht

51:35.540 --> 51:43.160
auch hier drin. 6 Stück. Wenn ich jetzt sage ach komm es ist Nacht. Es ist Nacht. Ich brauche

51:43.160 --> 51:46.760
gar nicht so viele. Das kann man übrigens auch automatisch machen. Da kommen wir vielleicht

51:46.760 --> 51:52.040
irgendwann auch nochmal dazu. Dann kann ich sagen ok es ist jetzt bald Nacht. Da brauche

51:52.040 --> 51:56.200
ich ja nur 3. Das reicht ja. Oder sogar ich brauche ok ich brauche nur 2. Ich brauche

51:56.200 --> 52:00.840
nur 2. Weil es ist Nacht. Ist kaum Last drauf. Und dann trage ich das hier in mein Git Repo

52:00.840 --> 52:08.240
rein. Gehe in mein Repo. Mache ein Comet. Push das ganze. Also ich push jetzt die Änderung

52:08.240 --> 52:12.640
wo ich hier von 6 auf 2 runter bin. Push die Änderung. So und jetzt gucken wir mal hier

52:12.640 --> 52:23.440
zu. So in ein paar Sekunden wird er jetzt auf einmal die ganze Sache. Wartet mal. Mach

52:23.440 --> 52:29.400
mal so das man es vielleicht besser sieht. So in ein paar Sekunden falls ich automatisch

52:29.400 --> 52:36.760
Deployment eingestellt habe. Wird er jetzt runter skalieren. Auf 2 Pods. Habt ihr gesehen

52:36.760 --> 52:42.440
ich musste nichts machen. Der hat das automatisch über AgroCD ausgerollt. AgroCD hat die neuen

52:42.440 --> 52:51.160
Änderungen aus GitHub gepullt. Hat gesehen. Aha. ReplikaZ wurde verringert auf 2. Und

52:51.160 --> 52:56.240
darauf hin wurde es automatisch applied auf den Cluster. Und meine Pod Anzahl ist runter

52:56.240 --> 53:03.160
gegangen auf 2. So und wenn jetzt zufälligerweise. Was gibt es denn für deutsche gehypte YouTuber.

53:03.160 --> 53:09.320
Was ist denn da aktuell so angesagt. Sagt mir mal irgendeiner der da gerade angesagt

53:09.320 --> 53:15.760
ist. Ich blicke nicht durch in YouTube Deutschland. Max FPS. Genau wenn jetzt zufälligerweise

53:15.760 --> 53:22.120
Max FPS ein Video zugemacht der Apo rett bestimmt nicht. Oder ist er immer noch aus dem Insie

53:22.120 --> 53:27.560
Modus wieder raus. Also wenn jetzt irgendein bekannter YouTuber zufälligerweise ein Video

53:27.560 --> 53:33.360
über eure App gemacht hat. Beziehungsweise über eure Website gemacht hat. Und ihr ganz

53:33.360 --> 53:40.200
viel Traffic bekommt. Dann könnt ihr sagen wir skalieren jetzt mal diagonal auf den Mount

53:40.200 --> 53:49.200
Everest und sagen wir brauchen 12 Pods. Wird eingestellt. Hups. Eingestellt. Comet gemacht.

53:49.200 --> 53:57.080
Gepusht. Und gleich werdet ihr sehen. Übrigens hier das ganze ich demonstriere das mal indem

53:57.080 --> 54:03.160
ich hier auf Refreshen drücke. Das ganze ohne Serviceausfall. Passt mal auf. Ihr werdet

54:03.160 --> 54:08.880
es gleich sehen. Also ich guck jetzt hat das abgerufen es skaliert hoch auf 12 Pods auf

54:08.880 --> 54:15.680
12 Backends. Und während der hoch skaliert habe ich keinen Serviceausfall. Also ich bekomme

54:15.680 --> 54:21.320
die ganze Zeit weiter meinen Service. Obwohl der grad Dinger im Hintergrund neu startet.

54:21.320 --> 54:42.240
Stoppt und erweitert. So. Wir haben das letzte Mal tatsächlich getestet mit einem HTTP Benchmark

54:42.240 --> 54:51.320
Tool. Es sind von einer Million Requests 56 verloren gegangen oder 46 verloren gegangen.

54:51.320 --> 54:55.160
Also es ist tatsächlich ganz ganz gut. Ich kann euch das ich kann. Können wir machen

54:55.160 --> 54:59.480
können wir machen. Leute wir machen. Ich zeige ich zeige euch das. So wir gehen jetzt mal

54:59.480 --> 55:03.600
wir gehen jetzt mal wieder runter auf drei Pods. Ich muss ich muss das Ding immer wieder

55:03.600 --> 55:06.920
auf den zweiten Bildschirm verschieben. Wir gehen jetzt mal runter auf zwei Pods. Puschen

55:06.920 --> 55:17.640
das. Warten bis das ganze Applied ist. Und dann machen wir mal einen Benchmark von. Keine

55:17.640 --> 55:25.720
Ahnung hier von von zwei Minuten. Auf den auf den auf den Service. So ich warte jetzt

55:25.720 --> 55:29.040
erst mal bis das ganze Applied wurde. Wobei ich kann es ein bisschen beschleunigen nehme

55:29.040 --> 55:38.360
ich hier von Hand auf Refresh drücke. So. Pots runter skaliert. Alles gut. Ihr seht es

55:38.360 --> 55:44.800
sind bloß noch drei Pods am Start. Und jetzt schreibe ich hier mal wieder rein. Wir skalieren

55:44.800 --> 55:51.000
jetzt hoch auf neun Pods. Ich pushe das jetzt und dann mache ich ein HTTP Benchmark an.

55:51.000 --> 55:57.120
Und dann gucken wir mal zu. Ich lasse es jetzt. Ich lasse es jetzt eine Minute laufen. Gucken

55:57.120 --> 56:10.560
wir hier wieder zu. Na gut das oben kann ich mir eigentlich sparen. So es sind noch drei

56:10.560 --> 56:17.200
es sind noch drei. Ich mache gerade ganz viel ganz viel Benchmark im Hintergrund. So ich

56:17.200 --> 56:23.720
Refresh jetzt mal von Hand und jetzt skaliert er hoch. Jetzt skaliert er hoch auf neun Pods.

56:23.720 --> 56:37.960
Gleich ist er fertig. Alles ready alles gut. So jetzt können wir jetzt okay jetzt können

56:37.960 --> 56:44.960
wir eigentlich noch die Zeit warten. Warten wir mal bis zwei Minuten um sind bis der Benchmark

56:44.960 --> 56:54.760
durch ist. Hier unten. Und dann werdet ihr sehen wie viel von den Requests wirklich in

56:54.760 --> 56:58.080
die Hose gegangen sind. Man darf nicht vergessen ich laufe hier auf einer VM und mache den

56:58.080 --> 57:02.080
Benchmark auf eine VM. Und meine gesamte VM ist komplett ausgelastet. Also daher kann

57:02.080 --> 57:10.200
es auch ein bisschen kommen. Ich lasse es jetzt mal kurz laufen die zwei Minuten also

57:10.200 --> 57:18.360
die paar Sekunden haben wir jetzt noch übrig dafür. So und ich gucke mal in den Chat. Also

57:18.360 --> 57:40.800
Prompt ist Starship ja.

57:40.800 --> 57:57.160
Ich habe doch eben was gelesen im Chat wo ich gesagt habe da sage ich gleich was zu

57:57.160 --> 58:18.600
was war das denn noch mal.

58:18.600 --> 58:28.560
Ne das war was anderes gewesen.

58:28.560 --> 58:39.440
Welches Secret Management probierst du heute aus? Also ich habe lokal ein Vault laufen

58:39.440 --> 58:44.640
auf dem zweiten Rechner den seht ihr nicht. Da habe ich ein Cloudflare DNS Talken drinne

58:44.640 --> 58:51.920
und ich habe mein GitHub Talken drinne. Und wir werden aus der Vault Instanz Sünden in

58:51.920 --> 59:00.040
unseren Kubernetes Cluster mit dem External Secrets Manager heißt das Ding glaube ich

59:00.040 --> 59:11.920
oder einfach nur External Secrets. Ja ist auch eine sinnvolle Sache. Muss das nicht

59:11.920 --> 59:21.960
unbedingt alles in Kubernetes jammeln machen. Aber wenn sich Argo quasi selbst managt kann

59:21.960 --> 59:26.520
das sich dann selbst updaten. Das kann sich selbst updaten das klappt in der Regel auch

59:26.520 --> 59:32.040
ohne Probleme. Es kann aber auch in die Hose gehen. Also wenn irgendwas kaputt ist zwischen

59:32.040 --> 59:34.760
den Updates und es nicht mal startet dann hast du ein Problem dann kannst du nicht mehr

59:34.760 --> 59:40.520
so einfach zurückrollen über das Web Interface. Ich meine Applying per kubectl und sowas

59:40.520 --> 59:45.920
ist ganz natürlich immer noch. Es ist tatsächlich dann doof. Das heißt man könnte sich zum

59:45.920 --> 59:50.640
Beispiel auch überlegen hey man managt Argo CD nicht über Argo CD sondern man macht

59:50.640 --> 59:56.560
irgendwie mit einem Helm Chart ein Update oder ja sogar ganz von Hand. Oder noch sinniger

59:56.560 --> 01:00:01.120
vielleicht wenn man viele Kubernetes Cluster hat man lässt Argo CD zentral laufen nicht

01:00:01.120 --> 01:00:05.960
in jedem Cluster oder sowas sondern man lässt Argo CD einfach zentral laufen in irgendeinem

01:00:05.960 --> 01:00:12.080
nennen es mal Infrastruktur Management Cluster. Da kann dann auch gleich Prometheus mit laufen

01:00:12.080 --> 01:00:17.400
und alle möglichen Dinger. Dann hast du dann so nicht das Problem. Dann ist zumindest wenn

01:00:17.400 --> 01:00:23.720
Argo CD kaputt ist außer Argo CD sonst nix kaputt. Gibt es ja verschiedene Ansätze aber

01:00:23.720 --> 01:00:27.560
ja das geht und in der Regel geht das auch ohne Probleme aber es kann in die Hose gehen

01:00:27.560 --> 01:00:32.040
also muss man sich überlegen ob das eine gute Idee ist. Ne das kenne ich nicht.

01:00:32.040 --> 01:00:49.040
Ok nice. So also Request. Leute es ist nichts. Es ist nichts. Es ist nicht ein Request verloren

01:00:49.040 --> 01:00:59.960
gegangen bei diesem Upgrade. Von einer Million Request ist nicht ein Request fehl geschlagen

01:00:59.960 --> 01:01:06.000
während ich meine App hochskaliert habe. Also ich glaube da kann man sich nicht beschweren

01:01:06.000 --> 01:01:16.880
oder? Ja die Response Time ging zwischenzeitlich mal ein bisschen hoch. Aber das war es. Und

01:01:16.880 --> 01:01:21.560
das ist halt wirklich das richtig coole an Kuba. Ne das sowas out of the box möglich ist.

01:01:21.560 --> 01:01:27.440
Das ist auch der Hauptgrund warum sowas benutzt wird. Weil du eben on the fly dein Zeug abdecken

01:01:27.440 --> 01:01:33.480
kannst, hoch verfügbar machen, neu ausrollen kannst, super agil wie man so schon sagt gerade

01:01:33.480 --> 01:01:40.240
sein kannst, kontinuierlich kleine Verbesserungen rausbringen kannst, deine App updaten kannst

01:01:40.240 --> 01:01:44.840
ohne dass großartig was kaputt geht. Natürlich ist die App jetzt von mir enorm simpel. Das

01:01:44.840 --> 01:01:50.200
ist ein Web Request auf einen Endpunkt und fertig. Also da kann ja nichts großartig schief

01:01:50.200 --> 01:01:54.360
gehen. Es ist keine Datenbank dahinter. Da muss keine Datenbankmigration gemacht werden

01:01:54.360 --> 01:01:58.440
beim ersten starten. Das ist äußerst simpel. Natürlich ist es in der Praxis dann nicht

01:01:58.440 --> 01:02:02.160
so simpel wie es jetzt hier aussieht. Aber man sieht dass das prinzipiell möglich ist.

01:02:02.160 --> 01:02:09.160
So und was wir uns heute angucken nachdem jetzt alles funktioniert ist folgendes. Ich mach

01:02:09.160 --> 01:02:14.960
mal die Cute App zu. Was wir uns heute angucken ist folgendes. Ich hoffe ich mach mein Cluster

01:02:14.960 --> 01:02:28.000
nicht kaputt dabei. Ich skaliere mal meine App wieder ein bisschen runter. Was wir uns

01:02:28.000 --> 01:02:33.520
angucken ist folgendes. Also ich brauche an dieser Stelle, nee an dieser Stelle, brauche

01:02:33.520 --> 01:02:39.440
ich meinen GitHub Talken und wenn ich Zertifikate generieren will, dann brauche ich auch meinen

01:02:39.440 --> 01:02:45.240
GitHub Talken. Heißt im Endeffekt, äh nicht beim GitHub, im Cloudflare Talken. Also ich

01:02:45.240 --> 01:02:49.240
brauche an der Stelle einen GitHub Talken und ich brauche bei den anderen Cloudflare

01:02:49.240 --> 01:02:55.160
DNS Talken. Aktuell mache ich das mit den Talkens so. Die Talkens sind nicht im Git

01:02:55.160 --> 01:03:02.160
Repo drinnen, weil ich will ja mein Cloudflare DNS Talken nicht in mein Public Git Repo einchecken.

01:03:02.160 --> 01:03:11.440
Die Talkens mache ich am Anfang einmal initial per Kommandozeil in den Cluster und dann funktioniert

01:03:11.440 --> 01:03:15.960
es. Das ist natürlich nicht so der Weisheitsletzter Schluss, vor allem wenn man viele Secrets hat

01:03:15.960 --> 01:03:22.200
und wenn man Secrets hat, die sich auch ab und zu mal ändern. Muss ich dann CubeCTL machen

01:03:22.200 --> 01:03:26.320
für jeden Cluster den ich hab, muss ich dann dran denken, dass überall im Jaml irgendwie

01:03:26.320 --> 01:03:30.680
Referenzen und was auch immer anzupassen, neue Secrets, das ist auf jeden Fall doof.

01:03:30.680 --> 01:03:39.320
So und um Passwörter, Talken und solche Geschichten in Kubernetes zu verwalten bzw. in Jaml Manifests

01:03:39.320 --> 01:03:46.760
zu verwalten, gibt es mehrere Ansätze. Es gibt einmal sowas hier. Sealed Secrets, das

01:03:46.760 --> 01:03:51.040
ist im Prinzip eine Verschlüsselung. Das heißt du schreibst deine Secrets immer noch

01:03:51.040 --> 01:03:56.440
in dein Jaml, du schreibst dein Passwort quasi immer noch in dein Jaml File rein. Allerdings

01:03:56.440 --> 01:04:01.920
du verschlüsselst das was hier drinnen steht und der Cluster selbst hat ein Zertifikat

01:04:01.920 --> 01:04:07.120
mit dem man das wieder entschlüsseln kann. Das ist eine ganz coole Geschichte. Wenn man

01:04:07.120 --> 01:04:13.680
das alles 100%ig in seinen Jaml Files haben will, ist das eine ganz coole Geschichte.

01:04:13.680 --> 01:04:19.160
Wir machen heute das mit einem anderen Projekt und wir machen das heute mit dem External

01:04:19.160 --> 01:04:27.880
Secrets. Und zwar ist das ein Tool, das kann man installieren in seinem Kubernetes Cluster

01:04:27.880 --> 01:04:34.800
und das kann sich dann verbinden zu verschiedenen Passwort Saves. Aktuell unterstützen die natürlich

01:04:34.800 --> 01:04:42.680
den AWS Secret Store, Google Secret Manager und Azure irgendwo, wo ist er? Und Azure Keyboard.

01:04:42.680 --> 01:04:47.440
Also natürlich unterstützen die die drei großen Cloud Anbieter, dann können sie noch IBM

01:04:47.440 --> 01:04:51.600
Secrets Manager, Achilles, das habe ich noch nie bemerkt. Vault, das werden wir heute benutzen.

01:04:51.600 --> 01:05:02.000
Yandex, ist das irgendein China-Chinesen Zeug oder? Ne, Yandex in Russen oder? GitLab Variablen,

01:05:02.000 --> 01:05:07.480
Oracle Vault, One Passwort, über Webhooks kann man das ganze machen. Von einem anderen

01:05:07.480 --> 01:05:14.280
Kubernetes Cluster, Secrets Sinken, ja unterstützt eigentlich relativ viel. Wie groß war der

01:05:14.280 --> 01:05:23.920
Aufwand Vault bei dir im Hintergrund aufzusetzen? Zeige ich dir, wie groß der Aufwand war. Install,

01:05:23.920 --> 01:05:44.360
Vault. Yes. Vault. Def. Ne, äh. Mode. Ne, boah, wie ging das denn heute? Def Mode.

01:05:53.920 --> 01:06:01.440
Ah ja, Vault Server Def, so rum. So, fertig, Vault läuft. Das sollte man so nicht benutzen,

01:06:01.440 --> 01:06:09.360
weil das rein in Memory ist, das unsealed ist und man mit irgendwelchen Keys rumhantieren muss,

01:06:09.360 --> 01:06:16.720
aber es ist rein lokal bei mir auf der VM, also da würde ich mir jetzt nicht so viele Gedanken

01:06:16.720 --> 01:06:37.080
drum machen. Das ist jetzt ein lokaler Vault, allerdings im Developer-Modus. Das ist nicht

01:06:37.080 --> 01:06:47.000
persistent, es ist alles im RAM und er ist unsealed, du kannst es auch nicht speichern, also das ist

01:06:47.000 --> 01:06:53.200
wirklich nur zum rumbasteln gedacht. So, und so ein Vault habe ich hier auf der zweiten VM-Lauf

01:06:53.200 --> 01:07:01.680
mit ein paar Talkings von mir drin und da greifen wir heute drauf zu. Damit man jetzt auch sieht,

01:07:01.680 --> 01:07:06.880
dass das Ganze was bringt, fangen wir jetzt nicht direkt mit dem Secrets Manager an, weil ich war

01:07:06.880 --> 01:07:10.280
mit einem Secrets Manager anzufangen. Der Secrets Manager, den man nirgendswo braucht,

01:07:10.280 --> 01:07:16.760
ist ja relativ doof. Wir fangen jetzt mit Zertifikaten an. Also, an der Stelle hier,

01:07:16.760 --> 01:07:27.120
Ingress, an der Stelle seht ihr ja, habe ich ein Web-Server laufen bzw. ein Reverse-Proxy laufen,

01:07:27.120 --> 01:07:36.680
der SSL verschlüsselt ist, also der auf Port 443 lauscht und man mit HTTPS drauf zugreifen kann und

01:07:36.680 --> 01:07:43.800
das war unter argocdkappalul.com. Aktuell sind das alles Self-Signed Zertifikate. Mario, danke schön

01:07:43.800 --> 01:07:48.240
für den Sub. Aktuell sind das alles Self-Signed Zertifikate, das seht ihr auch, das kann ich euch

01:07:48.240 --> 01:07:57.280
auch zeigen. Geben wir mal Chrome auf, da sieht man das schöner. argocdkappalul.com, Zertifikate

01:07:57.280 --> 01:08:03.640
anzeigen, Kubernetes Ingress Controller Fake Certificate. Ich glaube, genauer kann das da nicht

01:08:03.640 --> 01:08:25.800
stehen. So, und jetzt wirst du uns angucken, wie kriegen wir da letzte Encrypt-Zertifikate rein.

01:08:25.800 --> 01:08:32.240
Dazu gibt es ein weiteres Projekt, das nennt sich Cert Manager, den gibt's da,

01:08:32.240 --> 01:08:36.840
ist auch saumäßig beliebt, wenn man das mal sucht. GitHub, Cert Manager.

01:08:36.840 --> 01:08:47.440
Warum bei Orga? Weil das das Protokoll ist zum Zertifikate ausstellen, warum die das da reingeschrieben

01:08:47.440 --> 01:08:52.880
haben, kein Plan. Also das Projekt ist auch ziemlich beliebt, ich meine 10.000 Sterne auf GitHub

01:08:52.880 --> 01:09:00.640
sprechen da denke ich mal für sich. Wie können wir jetzt Zertifikate für unsere Sachen ausstellen?

01:09:00.640 --> 01:09:07.880
Also wir brauchen ein Zertifikat für argocdkappalul.com, aber wir brauchen noch viel eher ein Zertifikat

01:09:07.880 --> 01:09:15.200
für Qt-App, also für unsere App. Und damit fangen wir jetzt mal an. Das heißt, als erstes

01:09:15.200 --> 01:09:26.040
installieren wir mal den Cert Manager. Und nachdem wir das Ganze ja über Kubernetes-Konfix

01:09:26.040 --> 01:09:31.320
machen, machen wir das nicht über Helm direkt und machen das auch nicht über kubectl mit

01:09:31.320 --> 01:09:35.480
irgendwelchen Yammel-Files, sondern wir machen das so, dass es nachvollziehbar ist, dass

01:09:35.480 --> 01:09:39.560
jeder durchblickt, wann im Git wie was passiert ist. Das heißt wir legen hier eine neue App

01:09:39.560 --> 01:09:45.680
an, die nennen wir einfach mal Cert Manager. Punkt Yammel. Und ich kopiere das jetzt mal

01:09:45.680 --> 01:09:50.680
rüber und dann erkläre ich, weil warum soll ich das jetzt alles von Hand schreiben, ich

01:09:50.680 --> 01:09:53.760
könnte es aus dem Kopf eh nicht, ich muss eh abgucken. Also es hat keinen Sinn, wenn

01:09:53.760 --> 01:09:59.200
ich sage, haha wir schreiben jetzt hier api-version-pong-dump. Ich weiß es aus dem Kopf nicht, ich kann

01:09:59.200 --> 01:10:07.080
keine fehlerfreie Yammel-Syntax da aus dem Kopf mir zusammenwursten. So, das heißt ich

01:10:07.080 --> 01:10:12.640
kopiere das jetzt mal rüber. So sieht das Ganze aus an App-Definition. Wir müssen hier

01:10:12.640 --> 01:10:23.800
plus anpassen auf QS, das richtige repo rein machen. Und dann kann ich erklären, was drinnen

01:10:23.800 --> 01:10:46.520
passiert. Also MMO-Kreise, Crying Ritthot, wahrscheinlich nichts, sind erst zwei Leute

01:10:46.520 --> 01:10:51.200
da. So, also jetzt kann ich euch erklären, was passiert. Wir können uns, wir gucken es

01:10:51.200 --> 01:10:55.280
uns einfach mal, wir gucken es uns einfach mal an. Es wird jetzt gleich gesagt, es wird

01:10:55.280 --> 01:11:01.120
jetzt nicht funktionieren, aber wir gucken es uns trotzdem an. Ich mache jetzt mal einen

01:11:01.120 --> 01:11:11.720
Push in unser Repo. Best Feature Ever immer noch. Push in unser Repo. Und auf einmal wird

01:11:11.720 --> 01:11:15.760
jetzt, ich beschleunige das Refreshen mal ein bisschen, auf einmal taucht jetzt der

01:11:15.760 --> 01:11:20.840
Cert Manager hier als neue App auf. Der wird natürlich nicht funktionieren, weil, naja,

01:11:20.840 --> 01:11:36.280
ich habe ja noch gar nichts drinne stehen. Ah, ich habe das Projekt gar nicht angelegt.

01:11:36.280 --> 01:11:47.240
Okay, das ist natürlich bescheuert. Dann müssen wir das anders machen, dann kommt das in Projekt

01:11:47.240 --> 01:11:54.640
Default. Hat mir nichts anderes übrig. So, und jetzt müssen wir noch ein bisschen Konfix

01:11:54.640 --> 01:11:57.840
anlegen für das Ganze. Das heißt, wir machen jetzt noch ein neues Verzeichnis, nennen

01:11:57.840 --> 01:12:05.760
wir auch Cert Manager. Dort kopieren wir einmal eine Namespace-Definition rein. Cert Manager.

01:12:05.760 --> 01:12:15.280
Das Ding soll in seinem eigenen Namespace laufen. Namespaces sind, das sind quasi

01:12:15.280 --> 01:12:19.840
diese Unterteilungen im Kubernetes Cluster. Man sieht ja, ich habe aktuell vier Namespaces,

01:12:19.840 --> 01:12:24.360
Cube System, das ist standardmäßig dabei, für den Ingress, also für den Reverse Box,

01:12:24.360 --> 01:12:28.120
den Default Namespace und für Argo CD, den Namespace. Da kann man das so ein bisschen

01:12:28.120 --> 01:12:33.720
aufteilen. Da kann man zum Beispiel, könnte man eine Namespace machen fürs Monitoring,

01:12:33.720 --> 01:12:37.040
Namespace machen für irgendwelche Storage-Streiber oder so, dass es ein bisschen besser kopiert

01:12:37.040 --> 01:12:43.600
ist. Es hat auch ein bisschen was später mit Berechtigungen zu tun, weil es können nur,

01:12:43.600 --> 01:12:49.680
oftmals, manchmal gibt es Ausnahmen, es können nur Sachen innerhalb eines Namespaces auf

01:12:49.680 --> 01:12:54.760
Ressourcen innerhalb von dem gleichen Namespace zugreifen. Ich glaube, die einzige Ausnahme

01:12:54.760 --> 01:13:00.160
ist, dass man per DNS übergreifend auflösen kann. Aber wenn ich zum Beispiel Passwörter

01:13:00.160 --> 01:13:03.920
und sowas habe, dann ist das immer auf den Namespace beschränkt. Das heißt, ich kann

01:13:03.920 --> 01:13:08.240
nicht einfach ein Passwort in meinem Kubernetes Cluster speichern, hier in Default und dann

01:13:08.240 --> 01:13:11.840
von diesem Namespace, von irgendeiner Anwendung in diesem Namespace drauf zugreifen. Das funktioniert

01:13:11.840 --> 01:13:19.840
nicht. Man sollte es vielleicht auch nicht übertreiben mit Namespaces. Die Diskussion,

01:13:19.840 --> 01:13:26.040
ob man Environments als Namespaces abbildet oder ob man Environments besser als eigene

01:13:26.040 --> 01:13:31.680
Cluster abbildet, kann man sich darüber streiten, hängt, denke ich, am Ende davon ab, wie gut

01:13:31.680 --> 01:13:39.600
will man es wirklich trennen und wie viel Geld hat man übrig. Also will man für das Live-System

01:13:39.600 --> 01:13:44.960
einen eigenen Cluster haben und für das Test-System einen eigenen Cluster haben oder sagt man sich

01:13:44.960 --> 01:13:48.920
scheiß drauf, wir machen das alles in einen Cluster, dann halt in einem unterschiedlichen

01:13:48.920 --> 01:13:54.160
Namespace. Muss man sich überlegen. Das gibt es auch, würde ich sagen, gibt es pauschal

01:13:54.160 --> 01:14:22.760
nichts, wo man sagen kann so und einzig wahre Sache. Ich schreibe mein Continuing, ich kann

01:14:22.760 --> 01:14:40.840
das nicht schreiben. So. Jetzt hat mich Discord gerade abgelenkt. Wo sind wir stehen geblieben?

01:14:40.840 --> 01:14:56.600
Wir wollten uns als Third-Manager konfigurieren. Ich glaube, jetzt passt das. Also das Ding

01:14:56.600 --> 01:15:02.560
braucht einen eigenen Namespace. Das ist schon mal ganz sinnvoll, dass der Third-Manager

01:15:02.560 --> 01:15:24.040
im eigenen Namespace läuft. Gut, dann müssen wir den Third-Manager konfigurieren. Das ist

01:15:24.040 --> 01:15:34.240
relativ simpel an der Stelle. Und da muss ich jetzt gucken, dass ich nichts leake, aber

01:15:34.240 --> 01:15:57.760
ich glaube, es passt. Ja, nee, ist okay. Nix drinne. So. In die Third-Manager-Definition

01:15:57.760 --> 01:16:10.440
muss ich jetzt mal gucken, was ich hier anlegen will. Das ist die Konfiguration für Let's

01:16:10.440 --> 01:16:16.000
Encrypt, dass ich Let's Encrypt-Zertifikate ausstellen kann. Ich lege hier einen Cluster-Issuer

01:16:16.000 --> 01:16:22.960
an. Warum das so heißt? Weil die Third-Manager-Leute gedacht haben, das muss so heißen. Ein Cluster-Issuer

01:16:22.960 --> 01:16:32.640
ist eine Ressource im Kubernetes-Cluster für den gesamten Cluster. Das heißt, die

01:16:32.640 --> 01:16:38.280
ist nicht Namespace gebunden. Sie selbst gehört zwar zum Third-Manager-Namespace, aber sie

01:16:38.280 --> 01:16:44.060
kann benutzt werden, weil Cluster vorne dran steht, aus dem gesamten Cluster. Das heißt,

01:16:44.060 --> 01:16:56.400
es kann jetzt jede Anwendung in diesem Kubernetes-Cluster nachfragen beim Let's Encrypt Cloudflare DNS-Cluster-Issuer.

01:16:56.400 --> 01:17:01.280
Bitte gib mir doch mal ein Zertifikat. So. Und damit der funktioniert, brauche ich einen

01:17:01.280 --> 01:17:07.440
API-Token für Cloudflare. Wo wir jetzt genau bei dem Problem sind, wo kriege ich dieses

01:17:07.440 --> 01:17:14.560
API-Token her? Das API-Token liegt in meinem Vault. Die verbinde ich den Vault mit Kubernetes.

01:17:14.560 --> 01:17:24.760
Wir richten jetzt erstmal den Third-Manager noch ein. Brauche ich noch irgendwas? Alter,

01:17:24.760 --> 01:17:38.280
was habe ich denn hier für Magic gemacht? What the fuck? MonkaS, was ist das? Was habe

01:17:38.280 --> 01:17:44.240
ich denn da gebaut? Egal. Ich Copy-Paste das jetzt einfach mal rüber. Wir müssen den Third-Manager

01:17:44.240 --> 01:17:58.720
noch installieren. Und das machen wir mal raus. Muss nicht jeder Pod Internetzugriff

01:17:58.720 --> 01:18:05.240
haben, um ein Zert anzufordern? Nein, muss nicht. Also ist standardmäßig so. Oder wäre

01:18:05.240 --> 01:18:10.560
so, wenn das Routing stimmt, muss nicht. Der Pod geht zum Cluster-Issuer und der Cluster-Issuer

01:18:10.560 --> 01:18:15.820
läuft im Hintergrund und macht das. Es reicht, wenn der ins Internet kommt. Der Pod selber

01:18:15.820 --> 01:18:23.600
muss nicht ins Internet kommen. Das ist gerade Sinn und Zweck der ganzen Übung. Oder eine

01:18:23.600 --> 01:18:30.360
der Übungen. Also der Pod selber muss nicht zwangsläufig ins Internet kommen. So, ich

01:18:30.360 --> 01:18:36.160
glaube, das passt jetzt soweit. Jetzt können wir das installieren. Und wir gehen schon

01:18:36.160 --> 01:18:48.360
mal her und stellen für unsere App ein, dass die erreichbar sein soll. Und zwar über

01:18:48.360 --> 01:19:04.920
cuteapp.com. Wunderbar. Nicht argocdls, cuteapp.tls. Jetzt commenten wir das Ganze. Und dann hat

01:19:04.920 --> 01:19:09.400
es schon gecheckt. Er hat es schon kapiert. Guck, er hat erkannt, ThirdManager ist am Start,

01:19:09.400 --> 01:19:15.440
die cuteapp muss sich refreschen und ThirdManager wird im Hintergrund installiert. Ohne, ohne

01:19:15.440 --> 01:19:18.720
dass ich was machen muss. Was hat er jetzt für ein Schmelz? Ach so, genau. ThirdManager

01:19:18.720 --> 01:19:26.560
kann nicht installiert werden. Richtig. Weil... Okay, die Fehlermeldung ist ziemlich pepega.

01:19:26.560 --> 01:19:30.920
Aber weil das Secret nicht stimmt. Also dieses Secret, was ich im ThirdManager eingestellt

01:19:30.920 --> 01:19:38.360
habe hier an der Stelle, das Cloudflare-Talken, das gibt es noch gar nicht im Cluster. Also

01:19:38.360 --> 01:19:44.160
das wird nicht klappen. Deswegen sagt er auch hier, ich bin kaputt. Kommen wir mal angucken.

01:19:44.160 --> 01:19:57.760
Startup, bla, funktioniert nicht. Man kann mal gucken mit Certificate-Requests. Aber man

01:19:57.760 --> 01:20:06.760
sieht, für Argo CD gibt es schon ein Certificate-Request. Der wird allerdings nie bearbeitet werden

01:20:06.760 --> 01:20:12.880
können, weil das Talken für Cloudflare, für den Cloudflare-DNS ist ja noch gar nicht

01:20:12.880 --> 01:20:23.000
da. Auf geht's. Das heißt, wir müssen jetzt mal gucken, wie kriegt man... Übrigens selbst

01:20:23.000 --> 01:20:26.680
wenn ich, ich sag's jetzt gleich mal, selbst wenn ich mein Cloudflare-Talken leaken sollte

01:20:26.680 --> 01:20:30.960
ist es nicht schlimm. Ich hab das gescoped auf meine Absender-IP. Das heißt, ihr könnt

01:20:30.960 --> 01:20:36.040
noch nicht mal darüber großartig was machen. Es sei dann, ihr kommt über meine Absender-IP,

01:20:36.040 --> 01:20:43.440
die ihr nicht habt. Ach stimmt, man kann auch... Ja, du hast recht. Irgendwie denke ich da nicht

01:20:43.440 --> 01:20:46.720
dran, weil ich hab das meistens schon so in der History, da ich an der Stelle einfach

01:20:46.720 --> 01:20:56.640
nur noch Complete drücken muss. ThirdManager ist installiert. Allerdings, wie gesagt,

01:20:56.640 --> 01:21:06.720
funktionieren kann das Ganze noch nicht. Qt-App ist am Start. Juna möchte auch TLS haben.

01:21:06.720 --> 01:21:18.720
Damit das Ganze funktioniert, muss man noch ein paar Sachen hinzuschreiben. Wie gesagt,

01:21:18.720 --> 01:21:24.240
neben dem, dass das Talken fehlt, kannst du uns denn den Scope mal zeigen? Was für

01:21:24.240 --> 01:21:42.840
einen Scope? Von was? Den Quickscope? Du meinst also quasi den...

01:21:42.840 --> 01:22:04.240
Wo hab ich denn den Sound? Man, jetzt wenn man ihn braucht, finde ich ihn nicht. Den

01:22:04.240 --> 01:22:15.240
Scope? Ich hab keine Ahnung, was du wissen willst. Also das ist alles bei mir nur lokal

01:22:15.240 --> 01:22:21.200
aufgelöst. Da kannst du externer nichts ausprobieren. Hat er mal das andere jetzt auch schon angefragt?

01:22:21.200 --> 01:22:32.040
Nee. So, also wo sind wir stehen geblieben? Also uns fehlt einmal das Token für den Zertifikatmanager,

01:22:32.040 --> 01:22:40.160
das ist noch nicht drinne. Und es fehlen auch noch ein paar Annotations, dass der Zertifikatmanager

01:22:40.160 --> 01:22:44.680
überhaupt checkt, dass er hierfür zuständig sein soll. Da muss man Folgendes machen, das

01:22:44.680 --> 01:22:49.960
Copy-Paste ich mir auch raus, weil aus dem Kopf kann ich den ganzen Krempel auch nicht,

01:22:49.960 --> 01:22:59.760
muss man noch zwei Annotations setzen bzw. eine, die essentiell ist. Und zwar gucken,

01:22:59.760 --> 01:23:14.120
wo ich die hab. Hier, Metadata Annotations muss man setzen. Zwar da, das da nicht, das

01:23:14.120 --> 01:23:23.240
da muss man setzen. Das heißt, hiermit sagt man dem Zertifikatmanager, du bist dafür

01:23:23.240 --> 01:23:29.080
zuständig. Guckt mal da rein, was dafür auszahlt und stell dafür ein Zertifikat aus. So und

01:23:29.080 --> 01:23:40.200
wenn ich das jetzt pushe, dann sollte der Zertifikatmanager zumindest denken, dass er dafür zuständig

01:23:40.200 --> 01:24:04.200
ist. Kann auch sein, dass er kaputt ist wegen dem Token. Ok. Guck, er hat versucht das Ganze

01:24:04.200 --> 01:24:12.200
anzufordern, aber es hat nicht funktioniert. Man sieht jetzt aus, es gibt jetzt zwei verschiedene

01:24:12.200 --> 01:24:19.560
Zertifikatsrequests, aber geht nicht. Das eine schon vor 4 Minuten, das andere vor 13.

01:24:19.560 --> 01:24:30.440
Das heißt, ich muss irgendwie dieses blöde Cloudflare Token da reinbekommen, dass das

01:24:30.440 --> 01:24:36.760
funktioniert. So und das machen wir jetzt mit dem External Secrets Manager. Das heißt,

01:24:36.760 --> 01:25:04.240
es gibt nochmal eine neue App. Diesmal für External Secrets. External Secrets.

01:25:04.240 --> 01:25:17.600
Copy Paste stellst du am Start. Du hast Sicht-Services, um dich selbst zu verwalten. Ja. Deswegen

01:25:17.600 --> 01:25:21.760
lohnt sich das auch für kleine Sachen nicht. Wenn du irgendwas kleines hosten willst, vm

01:25:21.760 --> 01:25:32.480
bei Hetzner und fertig aus. Neues Repo anpassen, fertig. Projekt Default muss sein. Ich hab

01:25:32.480 --> 01:25:42.160
das andere Zeug nicht hier. Ok, das ist alles gut so. Dann legen wir noch ein Verzeichnis

01:25:42.160 --> 01:25:49.920
für die anderen External Secrets. Da muss jetzt noch ein bisschen Konfiguration rein.

01:25:49.920 --> 01:25:53.720
Das ist der letzte Service, den wir konfigurieren müssen. Danach können wir einfach alles

01:25:53.720 --> 01:26:08.280
hinzufügen. Das da rein copy pasten. Weg damit. Also wir wollen External Secrets installieren

01:26:08.280 --> 01:26:16.080
in Version 0.81 von dieser Quelle in diesen Namespace und alles ist gut. Und dann brauchen

01:26:16.080 --> 01:26:21.480
wir noch eine Konfiguration, damit man sich oder damit sich der External Secrets Manager

01:26:21.480 --> 01:26:31.680
zu meinem lokalen Vault verbinden kann, den ich bei mir lokal laufen habe. Vault.yaml und

01:26:31.680 --> 01:26:37.280
das sieht so aus. Hier läuft der Vault und für den Zugriff auf das Vault braucht er

01:26:37.280 --> 01:26:44.280
auch wieder ein Token. Das heißt einmal am Anfang, wenn ich den Cluster boote, einmal

01:26:44.280 --> 01:26:48.080
muss ich den Token hinterlegen. Da komm ich nicht drumherum. Aber es reicht, wenn ich

01:26:48.080 --> 01:26:54.800
das Token hinterlege für meinen Passwort Manager, aus dem ich dann alle anderen Tokens

01:26:54.800 --> 01:27:01.280
holen kann. Ich meine irgendwie komme ich nicht gut. Ich meine ich könnte wahrscheinlich

01:27:01.280 --> 01:27:04.760
auch einen Passwort Manager nehmen, der nicht Passwort geschützt ist selber, aber das ist

01:27:04.760 --> 01:27:14.440
dann ein bisschen fragwürdig natürlich, ob das dann unterm Strich so sinnvoll ist. Ich

01:27:14.440 --> 01:27:21.720
muss jetzt einmal initial in meinen Kubernetes Cluster das hier noch reinpushen und zwar

01:27:21.720 --> 01:27:29.480
im Namespace External Secrets ein Secret anlegen Key mit einem, Key ist ein bescheuerer Name

01:27:29.480 --> 01:27:36.280
eigentlich. Man könnte es auch besser nennen. Cloudflare zum Beispiel könnte man das nennen.

01:27:36.280 --> 01:27:39.280
Wobei Cloudflare kann man das nicht nennen. Das ist doof, wenn ich Cloudflare nenne, weil

01:27:39.280 --> 01:27:44.360
Cloudflare nenne ich das Target Secret dann. Ich nenne es einfach mal Keys. Und da drin

01:27:44.360 --> 01:27:55.840
drunter dann ein Schlüssel, der sich Token nennt. Da kommt das ganze rein. Gut, also

01:27:55.840 --> 01:28:05.200
jetzt muss ich das ganze Copy Pasten. So, das dürft ihr übrigens alles sehen. Das ist

01:28:05.200 --> 01:28:12.920
nicht geheim, weil das ist eh bei mir lokal. Also nicht wirklich schlimm. Ich muss jetzt

01:28:12.920 --> 01:28:21.680
noch mein Token rüber kopieren für den Zugriff auf meinen lokalen Passwortmanager. Zack,

01:28:21.680 --> 01:28:28.280
leaked. Namespaces External Secrets not found. Ah, ja, weil ich es nicht installiert habe.

01:28:28.280 --> 01:28:46.200
Dann gibt es hier noch eine Namespace Definition. External Secrets. Alles klar, alles klar. Push.

01:28:46.200 --> 01:28:56.400
Gut, dann gucken wir erstmal, dass das ganze installiert wird. Refresh die ganzen Apps.

01:28:56.400 --> 01:29:03.320
Hopp, da ist sie. Das ist halt sehr praktisch mit ArgoCD. Du musst einfach nur eine App

01:29:03.320 --> 01:29:08.960
hinzufügen oder eine App Definition hinzufügen und zack ist der Kram auf dem Cluster applied.

01:29:08.960 --> 01:29:14.960
So, out of sync. Ja, geht nicht, weil failed Webhook und hast du nicht gesehen. Ja, ich

01:29:14.960 --> 01:29:22.120
weiß, dass der Webhook failed ist, weil naja, das Token ist nicht drinnen. Aber jetzt kann

01:29:22.120 --> 01:29:28.200
ich das hinzufügen. External Secrets created. Jetzt sollte das alles sich gleich von alleine

01:29:28.200 --> 01:29:36.720
fixen. Hoffe ich mal. Bin ich mal gespannt. Out of sync. Ah, kommt mal, External Secrets.

01:29:36.720 --> 01:29:45.000
Hat funktioniert. Der ist schon mal grün. Ja, jetzt fehlt eigentlich, guck mal, das hat

01:29:45.000 --> 01:29:50.400
sich jetzt alles gefixt. Jetzt fehlt eigentlich noch die App. Das Zertifikat ist allerdings

01:29:50.400 --> 01:29:57.920
noch nicht da. Es hat auch vor 5 Minuten angefragt, da war das Ganze noch nicht drin. Mal gucken,

01:29:57.920 --> 01:30:02.040
ob er das von alleine checkt. Da bin ich mir gar nicht sicher, ob er das von alleine kapiert.

01:30:02.040 --> 01:30:10.800
Ich habe aber noch gar keine Definition für das Zertifikat angelegt. Moment, Sekunde,

01:30:10.800 --> 01:30:17.840
brauche ich das? Cloudflare? Ja, ich muss, ich muss, ich muss ja noch anlegen, dass der

01:30:17.840 --> 01:30:29.680
sich zu Cloudflare verbinden soll. Das habe ich ja noch gar nicht gemacht. Also mein Zertmanager

01:30:29.680 --> 01:30:35.040
kann sich noch nicht zu Cloudflare verbinden. So, das heißt, wir müssen jetzt im Zertmanager

01:30:35.040 --> 01:30:43.720
sagen, dass der gefälligst mal auf das Cloudflare-Token zugreift bzw. erstmal das Cloudflare-Token

01:30:43.720 --> 01:30:48.560
als Secret überhaupt anlegt und das soll er sich über den external Secret-Manager holen.

01:30:48.560 --> 01:30:56.600
Und das funktioniert folgendermaßen, ich mache hier nochmal eine neue Datei, Secrets,

01:30:56.600 --> 01:31:05.440
Zertmanager, Secrets und das kann man dann so definieren, dann sagt man ihm, guck mal,

01:31:05.440 --> 01:31:12.840
hier zum Cluster-Secret-Store, der Cluster-Secret-Store, der wird hier angelegt und connectet sich

01:31:12.840 --> 01:31:24.040
zu meinem Vault-Backend und aus dem Cluster-Secret-Store holt ihr das Cloudflare-Token und erstellt

01:31:24.040 --> 01:31:30.600
ein neues internes Kubernetes-Secret mit dem Namen Cloudflare und einem Key-Token.

01:31:30.600 --> 01:31:38.840
Also man kann hier drin auch quasi so eine eigene Config zusammenbauen mit vielleicht

01:31:38.840 --> 01:31:45.680
aus verschiedenen Secrets, falls die jeweilige App das braucht.

01:31:45.680 --> 01:31:51.160
Dann committen wir das Ganze mal und wenn wir jetzt Glück haben, dann sollte sich in

01:31:51.160 --> 01:31:57.080
2-3 Minuten alles erledigt haben von alleine und ich sollte ein Zertifikat haben.

01:31:57.080 --> 01:32:04.560
Noch kein richtig echtes gültiges Zertifikat, Cloudflare.de Domains, da bin ich sofort

01:32:04.560 --> 01:32:11.280
dabei. Also noch kein richtig echtes gültiges Zertifikat,

01:32:11.280 --> 01:32:18.920
weil ich habe Cloudflare hier, wie ihr seht. Let's Encrypt habe ich ja Staging drinnen,

01:32:18.920 --> 01:32:24.560
das ist die Let's Encrypt-Stelle zum Testen, weil man hat ja nur gewisse Limits in der

01:32:24.560 --> 01:32:32.160
Woche für Let's Encrypt, die man benutzen kann. Ich habe eigentlich gehofft, der macht

01:32:32.160 --> 01:32:38.960
eine neue Anfrage für das Zertifikat, macht er aber nicht, natürlich doof.

01:32:38.960 --> 01:33:00.080
Jetzt weiß ich nicht, wie ich das gescheit regelt, dass der Cert Manager nochmal nachguckt.

01:33:00.080 --> 01:33:11.080
Also der Cert Manager hat zumindest nicht gecheckt, der Cert Manager hat nicht gecheckt,

01:33:11.080 --> 01:33:15.080
dass er ein neues Zertifikat anfragen soll. Das ist natürlich doof, wir können auch

01:33:15.080 --> 01:33:23.120
mal in die Logs rein gucken, Logs, Namespace, Cert Manager, Cert Manager, hier was macht

01:33:23.120 --> 01:33:44.480
er? Error, get in Cloudflare's Secret, Secret Cloudflare not found, okay, get secrets,

01:33:44.480 --> 01:33:50.280
übrigens die secrets die werde ich nicht anzeigen, denn ansonsten habe ich ein Problem,

01:33:50.280 --> 01:33:56.040
das Cloudflare's Secret ist doch, das Cloudflare's Secret ist doch da, alles gut, ah im Namespace

01:33:56.040 --> 01:34:03.040
Cert Manager, okay da ist das ja, da ist es falsch, das muss in, nee Moment, nee im Namespace

01:34:03.040 --> 01:34:12.160
Cert Manager ist das richtig, Error, get in Cloudflare's Secret, Secret Cloudflare not

01:34:12.160 --> 01:34:30.480
found, da ist es doch, hä, jaja es ist angelegt, alles im Vault, not found, aber warum nicht,

01:34:30.480 --> 01:34:39.200
da ist es doch, es ist im Cert Manager Namespace und der Cert Manager meint, das ist nicht

01:34:39.200 --> 01:34:45.320
da, ah Moment, das ist 19, Moment, Moment, das ist vor, das war vor 4 Minuten, wir haben

01:34:45.320 --> 01:34:53.520
es hier eben auch erst updated, wir haben es hier eben auch erst updated, ah, es funktioniert

01:34:53.520 --> 01:35:00.280
alles, man muss einfach nur ein bisschen warten, guck, DNS-Record, Qt-App-Capa-Lul-Not-Yet-Propagated,

01:35:00.280 --> 01:35:06.360
das dauert jetzt ein bisschen bis der Authentifizierung für Let's Encrypt gemacht hat über DNS,

01:35:06.360 --> 01:35:15.320
aber in paar Minuten oder bald, bald sollte, sollte es da sein, Certificate Requests, noch

01:35:15.320 --> 01:35:26.360
nicht, noch nichts zu sehen, wenn Ready True da steht, True 0W, dann weiß ich, es hat funktioniert,

01:35:26.360 --> 01:35:32.240
es kann durchaus mal 2-3 Minuten dauern, ah, not yet propagated, bla bla bla, wir warten

01:35:32.240 --> 01:35:39.840
jetzt bis das Zertifikat da ist und dann zeige ich euch, Qt-App, da ist es, Qt-App-Capa-Lul,

01:35:39.840 --> 01:35:53.640
ja, ist ja gut, man, so, ihr seht, noch ist das alte Zertifikat da, ne, da ist es schon,

01:35:53.640 --> 01:35:59.200
staging Let's Encrypt hat funktioniert, True, in dem Moment, wo ich es ausprobieren wollte,

01:35:59.200 --> 01:36:04.280
also er ist jetzt zu Let's Encrypt, da habe ich den Zertifikat ausgestellt, das ist die

01:36:04.280 --> 01:36:11.120
staging, also die Testumgebung von Let's Encrypt, das habe ich absichtlich gemacht, weil ich

01:36:11.120 --> 01:36:16.480
ansonsten in irgendwelche Limits laufen würde, ich kann es euch mal zeigen, dass es wirklich

01:36:16.480 --> 01:36:21.360
echt funktioniert mit dem echten Zertifikat, ja, sodass ich nicht so sehr in meine Limits

01:36:21.360 --> 01:36:32.240
laufen darf, das heißt, wir ändern das ganze mal, ich gehe jetzt hier wieder rein, wo ich

01:36:32.240 --> 01:36:36.600
den Clusterissuer definiert habe und sage, ok, von welchem Server sollst du dir die Zertifikate

01:36:36.600 --> 01:36:41.320
holen bei Let's Encrypt, aktuell haben wir das Staging drinne und ich habe ehrlich gesagt

01:36:41.320 --> 01:36:51.720
keine Ahnung, ob das die richtige URL ist, wahrscheinlich einfach Staging raus, oder,

01:36:51.720 --> 01:36:56.640
ok, einfach Staging raus, so und jetzt holen wir uns mal ein Zertifikat, ich hoffe, der

01:36:56.640 --> 01:37:04.200
refrescht das jetzt, wenn ich es an der Stelle ändere, müsst ihr eigentlich, jetzt gehen

01:37:04.200 --> 01:37:16.040
wir auf das Live Let's Encrypt, also auf geht's, Push, jetzt gehen wir auf das Live Let's Encrypt,

01:37:16.040 --> 01:37:23.280
ich refresche mal, dass es ein bisschen schneller geht, ok, ne, das juckt dir nicht, wenn man

01:37:23.280 --> 01:37:36.040
das da refrescht, ja, wie, ok, das habe ich noch nicht gemacht, wie kann man ihm jetzt

01:37:36.040 --> 01:37:53.120
sagen, please ein neues Zertifikat ausstellen, oh, was, URL ist falsch, fail to retrieve

01:37:53.120 --> 01:38:11.240
order, oh, ist das falsch, Moment, Cert Manager Let's Encrypt URL, wie ist denn die richtige

01:38:11.240 --> 01:38:25.320
URL, oder, Let's Encrypt URLs, was ist die Let's Encrypt URL, ja, aber ich bilde mir

01:38:25.320 --> 01:38:40.680
ein, das habe ich doch, habe ich das nicht, äh, sieht ziemlich gut aus, vielleicht ohne

01:38:40.680 --> 01:38:50.120
Directory hinten dran, gibt's da, gibt's, ups, da gibt's doch bestimmt Cert Manager

01:38:50.120 --> 01:38:55.840
Example mit Let's Encrypt, kann doch nicht so kompliziert sein, muss doch schon irgendjemand

01:38:55.840 --> 01:39:08.840
vor mir gemacht haben, ja, ja genau, von dem will ich das jetzt wissen, ne, ist doch, ist

01:39:08.840 --> 01:39:23.560
doch richtig, ist doch alles richtig, was hat er für Schmerzen, war doch, ist doch alles,

01:39:23.560 --> 01:39:38.200
ist doch alles gut, selbes Secret, ja, das ist ja nur das Secret vom, vom, vom DNS, äh,

01:39:38.200 --> 01:39:44.760
das kann sein, dass ich das, dass ich das noch ändern muss, das kann sein, dass er

01:39:44.760 --> 01:39:48.440
das gecached hat und das deswegen nicht funktioniert, das wäre vielleicht, vielleicht möglich,

01:39:48.440 --> 01:39:59.720
keine Ahnung, gucken wir mal, das Problem hatte ich so noch nicht, Refresh, na gut,

01:39:59.720 --> 01:40:21.080
das, äh, ich glaube, ich glaube jetzt hat er's gecheckt, ja, das ist glaube ich besser,

01:40:21.080 --> 01:40:35.600
deswegen, so und wie kann ich dem jetzt sagen, dass er das Zertifikat neu ausstellen soll,

01:40:35.600 --> 01:40:39.440
also das sieht jetzt schon mal besser aus, ich hab jetzt ja, das, das hat's dir ja so

01:40:39.440 --> 01:40:44.040
normalerweise auch nicht, dass da einfach mal die, ähm, Zertifizierungsstelle für schon

01:40:44.040 --> 01:40:49.040
bestehen, ich mein, ich könnte die URL ändern, das ist vielleicht nicht so, nicht so geil,

01:40:49.040 --> 01:40:53.800
das machen wir jetzt aber mal, weil, vielleicht muss man auch einfach nur ein bisschen warten,

01:40:53.800 --> 01:41:04.840
das könnte natürlich auch sagen, ah ja, ok, alles gut, ah nee, jetzt holt er für

01:41:04.840 --> 01:41:25.320
Argo CD eins, ah gut, dann, dann warten wir doch mal ab, ob das, ob das funktioniert,

01:41:25.320 --> 01:41:29.240
gucken wir mal, dann kann ich Argo CD gleich mit einem echten, mit einem echten Zertifikat

01:41:29.240 --> 01:41:37.240
aufmachen, wir müssen auf jeden Fall noch eine Sache eintragen und zwar, Annotations

01:41:37.240 --> 01:41:49.640
sollten da noch, ach nee, hab ich schon, hab ich schon, ach deswegen geht das jetzt, so,

01:41:49.640 --> 01:42:04.520
Error, not yet propagated, ja, blablabla, mach hinne, welche Distro würdest du zum Umsteigen

01:42:04.520 --> 01:42:13.080
empfehlen, habe bisher nur Erfahrung mit Debian-Servern, na ja, wie wär's mit Ubuntu?

01:42:13.080 --> 01:42:27.480
Error, was ist denn jetzt für ein Problem, Key-ID-Header-Contain-Invalid-Account-Ul,

01:42:27.480 --> 01:42:34.560
hä, irgendwas hab ich da verkehrt, verkehrt reingepastet, das ist die falsche URL für

01:42:34.560 --> 01:42:42.400
Let's Encrypt man, keine Ahnung, was der für Schmerzen hat, aber das stimmt doch,

01:42:42.400 --> 01:42:51.920
muss man das vielleicht Quoten oder so, nur für den Fall der Fälle, DNS Error Accepting

01:42:51.920 --> 01:43:16.040
Challenge-Invalid-Account-Ul, okay, keine Ahnung, kein Plan man, Key-ID-Header ist Invalid-Account,

01:43:16.040 --> 01:43:24.920
irgendjemand im Plan was der für Schmerzen hat, ich hätte jetzt eigentlich gerechnet

01:43:24.920 --> 01:43:31.120
damit, das geht einfach, weil wenn, wenn über Staging das funktioniert und ich die Url austausche,

01:43:31.120 --> 01:43:37.080
dann würde man erwarten, dass es für Produktion auch geht, also fürs Produktive Let's Encrypt,

01:43:37.080 --> 01:43:45.120
ist die URL vielleicht doch falsch, es muss doch irgendwo ein Cert Manager Let's Encrypt

01:43:45.120 --> 01:43:57.720
Exempel geben, kann doch nicht sein, irgendwas Aktuelles halt, irgendwas aus dem letzten Jahr,

01:43:57.720 --> 01:44:19.720
Let's Encrypt, Staging, so schlau bin ich auch, ich will es ja nicht für Staging, das hatte ich ja schon,

01:44:19.720 --> 01:44:34.480
gibt es das vielleicht auch mal ohne Staging das Beispiel, ja Digital ist das beste, was

01:44:34.480 --> 01:44:41.960
habe ich verkehrt gemacht, keine Ahnung, ich ändere jetzt, okay ich probiere jetzt mal das aus,

01:44:41.960 --> 01:44:51.120
ich ändere jetzt die URL für meine App, das ist jetzt CuteApp-Prot und das heißt auch Minus

01:44:51.120 --> 01:45:02.320
Prot-TLS, push, dann schauen wir mal ob das funktioniert, weil ansonsten wüsste ich echt

01:45:02.320 --> 01:45:18.880
nicht mehr, was er noch für Schmerzen hat, das sieht gut aus, hier Digital Ocean,

01:45:18.880 --> 01:45:36.840
haben wir noch da bestimmt, ist doch genau das, Moment, ist doch genau das was ich verwende, ist

01:45:36.840 --> 01:45:45.600
ein Bug ja, das kann tatsächlich sein, dass der denkt das ist der alte, jedenfalls doof,

01:45:45.600 --> 01:45:49.840
dass es nicht funktioniert, aber jetzt habe ich den neuen Domain, also mit der muss es ja

01:45:49.840 --> 01:45:59.800
auf jeden Fall funktionieren, CuteApp-Prot, okay das ist das ist soweit, okay CuteApp-Prot,

01:45:59.800 --> 01:46:18.840
gut, das ist in Ordnung, so in 1-2 Minuten sollte er jetzt ein gültiges Zertifikat haben, schauen

01:46:18.840 --> 01:46:29.360
wir mal ob das so ist, jetzt bräuchte man so ein Tail oder sowas, okay, not yet propagated,

01:46:29.360 --> 01:46:35.880
ne Anführungszeichen sind es eigentlich, ich habe die extra drum gemacht, das sollte in

01:46:35.880 --> 01:46:50.600
Jaml an der Stelle keinen Unterschied machen, hat funktioniert, hat funktioniert, CuteApp-Prot,

01:47:05.880 --> 01:47:23.560
ach ich habe oben vergessen anzupassen, Lul, push, aber man sieht einen Vorteil davon schon,

01:47:23.560 --> 01:47:32.040
es ist alles nachvollziehbar, das ist halt wirklich nice, ich muss nichts per CubeCTL

01:47:32.040 --> 01:47:39.080
oder sonst was machen, es wird alles automatisch Applied ausgerollt auf mein Cluster, ich beschleunige

01:47:39.080 --> 01:47:43.920
das ganze jetzt halt mal ein bisschen, es wird alles automatisch ausgerollt auf mein Cluster

01:47:43.920 --> 01:47:49.320
und das ist natürlich cool, so jetzt sollte es eigentlich schon gehen, Pester geht, so und jetzt

01:47:49.320 --> 01:47:55.520
wird euch vielleicht was auffallen, ich habe ein gültiges Let's Encrypt Zertifikat, also es hat

01:47:55.520 --> 01:48:03.520
funktioniert, Verified Let's Encrypt, echtes gültiges Zertifikat, nicht Self-Signed, nicht

01:48:03.520 --> 01:48:09.840
Staging, sondern richtig echtes Zertifikat, was in jeder Browser akzeptiert und das kann ich jetzt

01:48:09.840 --> 01:48:16.360
für jede App anfordern lassen in der Config aus meinem Kubernetes-Klasse, also wenn ich jetzt hier

01:48:16.360 --> 01:48:22.680
noch 15 andere Apps reinpappe, dann muss ich einfach so einen Eintrag hier rein machen und schon kriegen

01:48:22.680 --> 01:48:35.640
ich ein Zertifikat ausgestellt über den Certificate Manager und haben ein gültiges TLS SSL HTTPS

01:48:35.640 --> 01:48:39.720
Zertifikat, so wir machen jetzt noch mal das andere, wundert mich nämlich, dass es mit ArgoCD

01:48:39.720 --> 01:48:47.800
nicht richtig funktioniert, guck mal hier CR, CR, All Namespaces, True, False, wir löschen es jetzt einfach mal,

01:48:47.800 --> 01:48:56.400
hier Delete, habe ich glaube ich noch nie gemacht, CR, wie löscht man das eigentlich, Namespace,

01:48:56.400 --> 01:49:06.720
achso okay einfach so, alles als Helm-Chart bauen, nee warum, das ist doch so übersichtlich genug,

01:49:06.720 --> 01:49:12.840
da brauche ich doch keine Helm-Charts für, bin ich der große Helm-Freund ehrlich gesagt, vielleicht

01:49:12.840 --> 01:49:18.440
kommt noch irgendwann das große Aha-Erlebnis, wo ich sagen würde, ja unbedingt, aber ich denke mir

01:49:18.440 --> 01:49:24.400
halt die meisten Sachen zusammen bundeln kannst du mit Customize machen und sobald man Logik braucht

01:49:24.400 --> 01:49:29.520
und Templates braucht, da finde ich Helm jetzt auch nicht so wirklich nice, ich meine du kannst

01:49:29.520 --> 01:49:35.760
das damit machen, aber es ist halt diese komische Go-Template-Syntax, dann würde ich, wenn ich

01:49:35.760 --> 01:49:40.480
wirklich was kompliziertes machen will, dann würde ich wahrscheinlich sogar lieber sowas verwenden

01:49:40.480 --> 01:49:45.520
und das in einer ordentlichen Programmiersprache erstellen, meine Manifests, da kann ich nämlich

01:49:45.520 --> 01:49:50.560
wirklich alles machen, wie ich will, aber das ist ein bisschen Philosophie-Frage, das ist ein bisschen

01:49:50.560 --> 01:49:57.920
Richtung Pulumi versus Terraform, die einen sagen ja klar Easy Terraform Beste reicht für alles und

01:49:57.920 --> 01:50:01.320
die anderen sagen ja ein bisschen Programmiersprache, Logik drumherum war auch nicht verkehrt.

01:50:01.320 --> 01:50:11.400
Fordert er jetzt das ganze noch mal neu an oder muss ich noch irgendwas machen?

01:50:11.400 --> 01:50:17.520
Wer hat das eben vorgeschlagen mit CR löschen und alles ist gut?

01:50:17.520 --> 01:50:31.160
Muss ich jetzt noch irgendwas machen, dass er das noch mal anfragt?

01:50:31.160 --> 01:50:38.640
Ich hätte jetzt, guck mal hier, wenn ich jetzt sage Argo CD Kappa Lull, dann ist immer noch

01:50:38.640 --> 01:50:46.320
das Self-Sign-Zertifikan am Start. Ich weiß es gibt für Third Manager ein

01:50:46.320 --> 01:50:53.680
Commando Sign Tool, um sowas zu machen, aber man muss es ja auch irgendwie im Plaster anfordern

01:50:53.680 --> 01:51:02.360
können und das ohne, dass ich das lösche, ist ja doof, wenn ich das jedes mal löschen muss.

01:51:02.360 --> 01:51:10.400
Argo CD TLS habe ich gelöscht, muss ich das Zertifikat selber vielleicht noch löschen?

01:51:10.400 --> 01:51:20.280
Request habe ich schon gelöscht, Zertifikat, das können wir löschen, ok, das muss ich

01:51:20.280 --> 01:51:28.360
vielleicht löschen, dass das dann checkt. Jetzt funktioniert es, ok, jetzt haben wir

01:51:28.360 --> 01:51:44.800
das Zertifikat selbst, Blablabla. Was? Ok, jetzt sollte es funktionieren.

01:51:44.800 --> 01:51:55.560
Jetzt müsste es gleich funktionieren, hol mal aus Argo CD Kappa Lull, noch ist es das

01:51:55.560 --> 01:52:14.320
falsche Zertifikat, noch ist es das Fake Ingress Zertifikat, Watch. Ich hoffe, dass der Kram

01:52:14.320 --> 01:52:27.600
gleich auf True springt, True Lull W, wenn es Propagated ist. Ich meine, ich habe das

01:52:27.600 --> 01:52:32.560
Zertifikat gelöscht, ich habe den Zertifikat Request gelöscht, eigentlich sollte er jetzt

01:52:32.560 --> 01:52:44.640
ein neues Zertifikat anfragen, aber noch ist es das alte, vielleicht wird es sonst

01:52:44.640 --> 01:52:49.800
noch irgendwo gecasht, kein Plan. Zumindest für unsere App hat er schon mal, ach jetzt,

01:52:49.800 --> 01:52:58.120
True, True, aber hier ist noch das alte. Ok, er hat jetzt ein gültiges Zertifikat,

01:52:58.120 --> 01:53:10.720
aber er liefert noch das alte aus, warum? Oder ist das ein Firefox Ding? Ah easy, funktioniert,

01:53:10.720 --> 01:53:17.280
alles gut, Firefox hat es gecasht, ok, alles gut, in Chrome sieht man, dass es funktioniert,

01:53:17.280 --> 01:53:23.760
guck, zack, gültiges Zertifikat, Connection ist secure, vertraut und das ganze ist ausgestellt,

01:53:23.760 --> 01:53:34.600
Argo CD Kappa Lull, Let's Encrypt, so muss das sein, wunderbar. So, jetzt kann man das

01:53:34.600 --> 01:53:41.400
vielleicht noch ein bisschen in der Handhabung angenehmer machen, indem wir jetzt zum Beispiel

01:53:41.400 --> 01:53:51.120
einen zweiten Cluster Issuer definieren, den man, na komm, scheiß drauf, also ich hab euch,

01:53:51.120 --> 01:53:55.760
ne, das machen wir nicht, das machen wir nicht, weil aus dem Grund, ich stell das um, aus

01:53:55.760 --> 01:53:59.600
einem ganz praktischen Grund, ich hab keinen Bock, dass ich jetzt den Cluster ein paar

01:53:59.600 --> 01:54:06.120
mal neu aufsetze und neu starte und ich mein wöchentliches Let's Encrypt Kontingent damit

01:54:06.120 --> 01:54:10.760
irgendwie voll mache, da hab ich wirklich keinen Nerv drauf, deswegen, ich tu einfach

01:54:10.760 --> 01:54:15.320
so, als wäre das echte Zertifikate, ich hab euch jetzt gezeigt, es funktioniert, ja,

01:54:15.320 --> 01:54:20.880
es gibt richtig echte, gültige Zertifikate und das funktioniert und die Browser vertrauen

01:54:20.880 --> 01:54:26.880
dem, aber ich stell's wieder um hier auf das Staging Area, da gibt's gar keine Probleme.

01:54:26.880 --> 01:54:38.560
Push, gut, dann hätten wir das an der Stelle eigentlich schon, was haben wir gemacht, wir

01:54:38.560 --> 01:54:52.800
haben Zert Manager installiert und wir haben External Secrets, Private Key Secret Ref,

01:54:52.800 --> 01:55:14.400
ja, stell was so um, so und jetzt können wir per External Secrets auf unseren Passwort

01:55:14.400 --> 01:55:23.520
von Vault zugreifen, dort Tokens, Username, Passwörter auslesen und mit Zert Manager Zertifikate

01:55:23.520 --> 01:55:31.660
ausstellen für alle Services im Cluster, so, das war's jetzt im Prinzip, was man großartig

01:55:31.660 --> 01:55:36.240
selbst konfigurieren muss, das weitere Zeug kann man eigentlich mehr oder weniger so installieren

01:55:36.240 --> 01:55:40.600
oder eben Apps drauf hosten, wir haben jetzt die grundlegenden Sachen da, das nächste

01:55:40.600 --> 01:55:49.280
Mal können wir uns noch eine Runde Monitor, wobei, ich mein, es ist noch Zeit, wir könnten

01:55:49.280 --> 01:55:57.160
jetzt auch noch ein bisschen, wir könnten irgendwie mal so ein Prometheus Stack rein

01:55:57.160 --> 01:56:05.120
pushen, wobei, nee, Prometheus drauf zu hauen ist wirklich abfuck, bis das läuft, ich mein,

01:56:05.120 --> 01:56:09.520
wir können's probieren, vielleicht geht's auch, soll man noch probieren Prometheus drauf

01:56:09.520 --> 01:56:16.000
zu hauen für Cluster Monitoring, ich hab fertige Manifests dafür, wo ich eigentlich

01:56:16.000 --> 01:56:22.040
nur Copy Paste muss und wir uns das Ganze angucken können, aber es hängt halt einiges dran

01:56:22.040 --> 01:56:33.560
und das ist ein bisschen blöd, also zum Beispiel, wenn ich Grafana installieren will, ne, Check

01:56:33.560 --> 01:56:39.680
MK will ich jetzt grade nicht machen, okay, wir probieren das mal, also wir machen eine

01:56:39.680 --> 01:56:57.800
neue App, in dem Fall Grafana.YAML, ich Copy Paste das mal und dann erzähl ich was zu,

01:56:57.800 --> 01:57:02.640
wir müssen eh ein paar Sachen anpassen, so, wir installieren jetzt Grafana, wir installieren

01:57:02.640 --> 01:57:08.560
hier einfach nur Grafana, wir installieren den Kubernetes Prometheus Stack, der besteht

01:57:08.560 --> 01:57:15.960
aus einem Prometheus, aus einem Grafana, aus irgendeinem Loki Endpunkt, aus zig tausend

01:57:15.960 --> 01:57:20.200
Zeug, vergiss es, so, Loki schmeißen wir raus, das werd ich jetzt nicht installieren,

01:57:20.200 --> 01:57:25.800
Grafana Services lassen wir so stehen, wie es ist, Project wird Default, das reicht,

01:57:25.800 --> 01:57:32.200
ansonsten der Rest passt, glaub ich, so und das hier geht auch noch nicht, weil Prometheus

01:57:32.200 --> 01:57:39.360
ist ein Monitoring System, das heißt, das braucht Storage logischerweise und es gibt

01:57:39.360 --> 01:57:44.720
nur ein Plugin, das würd ich normalerweise jetzt vielleicht in einem Cloud Service nicht

01:57:44.720 --> 01:57:50.360
verwenden, aber lokal ist es ganz praktisch, da kann man automatisch den Storage auf der

01:57:50.360 --> 01:57:56.200
lokalen Kiste professionieren lassen für Container in Kubernetes, das ist ganz praktisch,

01:57:56.200 --> 01:58:00.360
das hauen wir jetzt auch noch rein, ich bin mir gar nicht sicher, was er macht, wenn ich

01:58:00.360 --> 01:58:06.480
die Storage Glass weglasse, wahrscheinlich gar nicht starten, dafür machen wir jetzt

01:58:06.480 --> 01:58:16.960
hier noch Local Storage, das Storage Punkt Jamme, Local Storage, Local Storage Punkt

01:58:16.960 --> 01:58:26.280
Jamme und da kommt folgendes rein, ich muss mir gleich die Manifest nochmal angucken,

01:58:26.280 --> 01:58:31.920
ich hab bestimmt irgendwas übersehen, da kommt folgendes rein, bla bla bla blub, dieses

01:58:31.920 --> 01:58:37.720
Repo, bla bla bla blub, fertig aus, Zombie, das passt so, das ist wie gesagt nur für

01:58:37.720 --> 01:58:44.680
lokale Cluster, das würd ich nicht unbedingt machen, das ist Public, Kyo-Kun, ach du bist

01:58:44.680 --> 01:58:54.680
auch mal wieder am Start, moin, ja, das ist Public, ok, ich hoffe, ich hab alles richtig

01:58:54.680 --> 01:59:00.920
gemacht, das sollte eigentlich jetzt schon reichen für eine Runde Grafana, es ist nicht

01:59:00.920 --> 01:59:11.360
auf Wublaws, es ist, hier guck mal, in der Fiveheader Organisation ist es, damit ich

01:59:11.360 --> 01:59:18.320
nicht, falls ich im Trocken liege, nix passiert, ist das in der Organisation drinne, so wenn

01:59:18.320 --> 01:59:29.720
ich jetzt Glück habe, sollte mein Prometheus funktionieren gleich, ich bin da noch skeptisch,

01:59:29.720 --> 01:59:36.120
hab ich irgendwelche Repos vielleicht noch nicht angepasst, ne Repos drinne passt, ok,

01:59:36.120 --> 01:59:40.680
checken wir mal, so wir müssen wieder nichts selbst machen, ich beschleunige nur das Refreshen

01:59:40.680 --> 01:59:51.960
mal, Argo CD wird das ganze für uns installieren, Local Path, ok, Local Path ist installiert,

01:59:51.960 --> 01:59:58.760
so wenn wir Glück haben, geht Grafana jetzt auch noch, Grafana dauert ein bisschen zum

01:59:58.760 --> 02:00:01.840
installieren, ihr sehts hier oben vielleicht, mein Rechner ist ein bisschen am abkacken

02:00:01.840 --> 02:00:09.320
gerade, und dann haben wir gleich einen Grafana Stack laufen, wo wir unseren Cluster mit monitorn

02:00:09.320 --> 02:00:19.120
können, wenn das funktioniert, das ist immer ein bisschen eklig, was hat er hier was nicht

02:00:19.120 --> 02:00:25.120
funktioniert, ah Namespace, den Namespace gibt es nicht, wobei hab ich nicht gesagt

02:00:25.120 --> 02:00:35.000
Create Namespace, doch hab ich gesagt, müsste funktionieren, was hat er das Problem für

02:00:35.000 --> 02:00:48.360
Namespace, de-created, warum, oh Moment, soll ich mir erzählen, dass mein Grafana einfach

02:00:48.360 --> 02:01:03.560
jetzt funktioniert oder was, so ganz von alleine, Moin, Shane Law, wie Moment, das hat auf

02:01:03.560 --> 02:01:08.280
ihn funktioniert, meine Grafana Installation, da hab ich jetzt aber, da hab ich jetzt ehrlich

02:01:08.280 --> 02:01:19.600
gesagt nicht mit gerechnet, also aber gar nicht, ok, ja, dann connecten wir uns mal zu

02:01:19.600 --> 02:01:29.880
unserem Grafana, und zwar auf den Grafana Service, wie macht man das mit K9S denn jetzt

02:01:29.880 --> 02:01:38.680
eigentlich so hier, auf Grafana Service, das sind ja nur Pods, ich will ja den Service

02:01:38.680 --> 02:01:50.200
haben, wie lässt man sich hier den Service anzeigen, beim Plan, ich weiß, wie ich Spiel

02:01:50.200 --> 02:01:57.040
in CubeZtl mache, keine Ahnung, wie könnte man das mit K9S machen jetzt den Service,

02:01:57.040 --> 02:02:18.680
egal, wir machen Forward, service, auf Service Grafana, Grafana, nein, wie heißt das Service,

02:02:18.680 --> 02:02:33.000
was heißt Grafana, achso, ich hab den Namespace überschrieben, das ist auch nicht Portding,

02:02:33.000 --> 02:02:51.320
sondern Port 80, nee, Port 3000, nee, wo denn, Get Service, Get Service, Grafana Service

02:02:51.320 --> 02:02:59.120
läuft auf Port 80, läuft nicht Grafana, normalerweise auf Port 8000, na gut, Local House 8080 und

02:02:59.120 --> 02:03:09.640
schon haben wir einen Grafana am Start, zack, kann man die Helm-Values noch in eine eigene

02:03:09.640 --> 02:03:16.600
Datei kippen, ja, es gibt verschiedene Varianten, wie man das machen kann, also, es gibt in

02:03:16.600 --> 02:03:21.120
ArgoCD zwei Varianten, wie man Helmcharts installieren kann, du kannst Helmcharts entweder

02:03:21.120 --> 02:03:26.640
direkt als Application und zwar als Helmchart angeben, dann kannst du hier, achso, du meinst

02:03:26.640 --> 02:03:34.760
die Values hier in der eigenen Datei, du kannst irgendeine Config, ja, das geht, das geht,

02:03:34.760 --> 02:03:41.320
das war nochmal ArgoCD Helm-Values, das geht, die Hilfe-Seite von denen ist tatsächlich

02:03:41.320 --> 02:03:56.640
ganz nice, Value Files, hier, hier, du kannst, du kannst, hier, so, das kannst du angeben,

02:03:56.640 --> 02:04:20.160
Value Files, Values Production-Yaml, ja, das kannst du machen, it's Ctrl-Z-Button-Paper,

02:04:20.160 --> 02:04:36.920
ok Chain-Lore, all du's bist, das können wir uns morgen früh angucken, ja, das, das

02:04:36.920 --> 02:04:44.320
funktioniert, ja, genau, es gibt zwei Varianten, wie du Helmcharts hinzufügen kannst, einmal

02:04:44.320 --> 02:04:51.560
hier halt direkt als Helmchart enden oder wenn du das Helmchart selber noch etwas erweitern

02:04:51.560 --> 02:04:57.120
musst, ohne dass du selbst quasi ein eigenes Chart machen willst mit der Dependency auf

02:04:57.120 --> 02:05:06.200
das andere Chart und sowas, da kannst du's einfach auch in die, da kannst du's auch

02:05:06.200 --> 02:05:13.560
so in der Customize-Datei reinschreiben, funktioniert auch, da kannst du hier noch andere Sachen

02:05:13.560 --> 02:05:17.960
incluiden im gleichen Ordner, ohne dass du quasi das Helmchart forken musst oder ohne

02:05:17.960 --> 02:05:26.240
dass du das Helmchart extenden musst, für kleine Sachen ist das ganz, ganz nice, ist

02:05:26.240 --> 02:05:37.960
halt wieder komplex, as fuck, unnötigerweise, so, ja, also, wir haben uns bei Grafana eingeloggt,

02:05:37.960 --> 02:05:42.160
jetzt können wir mal unseren Cluster uns angucken, also, Browse, das war jetzt wirklich easy

02:05:42.160 --> 02:05:51.400
mit Grafana, Browse, so, wir haben ein paar Standard-Dashboards dabei, ja, das stimmt

02:05:51.400 --> 02:05:59.020
wohl, das ist, da ist vieles, immer auf 50 Varianten möglich und bei Yammel-Bausen laufen

02:05:59.020 --> 02:06:03.640
auch irgendwelche Fehler ein, so, gucken wir uns mal, gucken wir uns mal die mitgelieferten

02:06:03.640 --> 02:06:08.800
Dashboards an, ob da irgendwas Spannendes drin ist, Cordien ist, okay, alert man, dass

02:06:08.800 --> 02:06:17.240
was drin, ah ja, interessant, nichts, sehr schön, ah, nichts, excellent, auch sehr interessant,

02:06:17.240 --> 02:06:20.880
wahrscheinlich sollte ich mal auf die letzten fünf Minuten stellen, auch nicht, wann habe

02:06:20.880 --> 02:06:28.200
ich überhaupt Datenquellen drinnen, die funktionieren, data sources, ja, ich hab die Standard-Prometos-Data-Source

02:06:28.200 --> 02:06:35.680
drin, die sollte funktionieren, ah, hier steht was drinnen, computer-sources, CPU, no data,

02:06:35.680 --> 02:06:45.920
auch geil, nice, ggeats, no data, hier, memory, doch ein paar Sachen stehen drin, CPU-limits

02:06:45.920 --> 02:06:52.240
und sowas, no data, CPU-usage, ich geh davon aus, du musst einfach noch ein bisschen einsammeln,

02:06:52.240 --> 02:06:59.360
da steht überall nichts drin, excellent, sehr schön, alles klar, da weiß man gleich

02:06:59.360 --> 02:07:17.080
Bescheid, okay, hier steht was drin, CPU-utilization, aber die Grafen sind auch noch nicht gefüllt,

02:07:17.080 --> 02:07:22.880
hier haben wir ein bisschen was, api-server und hier haben wir overview, Cordien, Cordien

02:07:22.880 --> 02:07:29.760
S, haben wir ein paar Anfragen, okay, Requests, Alert-Manager, ja gut, wollen wir haben Alerts,

02:07:29.760 --> 02:07:43.480
warum haben wir Alerts, von was, ja, wenn wir schon so gerade so nice am Monitoren sind,

02:07:43.480 --> 02:07:48.680
hauen wir auch gleich nochmal Loki drauf für Loks, dann kann ich euch das auch zeigen,

02:07:48.680 --> 02:08:01.200
so, aber jetzt, okay, langsam, lang, aber, ja, doch, jetzt, jetzt kriegen wir langsam

02:08:01.200 --> 02:08:07.360
ein paar Werte her, nicht dass mir das jetzt irgendwie großartig ist, was sagt, aber wir

02:08:07.360 --> 02:08:12.320
haben schon ein paar hübsche Dashboards, die beim Chef Eindruck machen, gibt es Monitoring

02:08:12.320 --> 02:08:17.400
fürs Monitoring und dann Monitoring fürs Monitoring, um dann wiederum das Monitor zu

02:08:17.400 --> 02:08:34.280
monitorn, mein Monitoring des Monitorings ist mein Auge, iChamp, so, Loki am Start,

02:08:34.280 --> 02:08:39.560
mehr müssen wir hier glaube ich an der Stelle nicht machen, Projekt Default und wir müssen

02:08:39.560 --> 02:08:56.560
jetzt noch hier abschließend in Grafana die Loki-Source einbinden und dann habe ich sogar

02:08:56.560 --> 02:09:04.720
Log-Dateien, ich zeige euch noch was wichtiges an der Stelle, guckt mal hier, Server-Site-Apply-True

02:09:04.720 --> 02:09:14.680
muss man setzen, weil Grafana bzw. dieses ganze Bundle hier aus Cube, Prometheus, Stack und

02:09:14.680 --> 02:09:20.360
alles mögliche, das ist so groß, dass das Probleme hat, wenn es an die Kubernetes-AP

02:09:20.360 --> 02:09:26.080
geschickt wird, deswegen muss man Server-Site-Apply einstellen, dann gibt es keine Probleme mehr.

02:09:26.080 --> 02:09:43.440
So, Push, jetzt sollten wir auch gleich noch eine Loki-Installation haben, achso, Local-Host,

02:09:43.440 --> 02:10:07.640
das ist ja klar, dass das nicht geht, Secret, Massive Password, Loki, da ist es doch schon

02:10:07.640 --> 02:10:25.360
und es ist auch gesüngt, der Pod startet noch nicht, mal abwarten, sollte sich hoffentlich

02:10:25.360 --> 02:10:53.520
gleich erledigt haben, Loki ist nicht Running, vielleicht braucht er einfach noch ein bisschen,

02:10:53.520 --> 02:10:58.040
ja, aber wir sind gleich fertig, ok, Loki hat kein Bock zu starten, mal gucken was ich

02:10:58.040 --> 02:11:12.480
verkackt habe, Logs, Loki, warum will das nicht starten, weil, Handing Over Indexes

02:11:12.480 --> 02:11:19.280
to Shipper, alles klar, die allerbesten Fehlermeldungen, achja ok, es läuft, ich habe nichts gesagt,

02:11:19.280 --> 02:11:26.200
funktioniert, Loki läuft, so, das heißt, ich kann jetzt auch in meinen Grafana gehen

02:11:26.200 --> 02:11:41.880
und wenn ich Glück habe, haben die, achso, vielleicht soll ich, Forwarding ist an, Forwarding

02:11:41.880 --> 02:11:56.840
ist an, Unexpected Error, ok, geht es jetzt, kein Unexpected Error mehr, Data Sources,

02:11:56.840 --> 02:12:07.080
Loki am Start, ok, so, jetzt können wir mal unsere Log-Dateien browsen, Data Source, Loki

02:12:07.080 --> 02:12:12.720
und zwar, keine Ahnung, hier, Pod, und zwar wollen wir uns Logs angucken und besser gesagt

02:12:12.720 --> 02:12:20.920
Server, egal, Pod, Pod wollen wir uns angucken vom Server Manager unbedingt, so, Run Query

02:12:20.920 --> 02:12:27.920
und wir haben Logs drinnen, Bam, wir sehen was kritisch ist, wir sehen was nicht kritisch

02:12:27.920 --> 02:12:36.160
ist, können Logs durchsuchen, eigentlich ganz nice, hier sieht man ok, da gab es irgendwelche

02:12:36.160 --> 02:12:44.600
Fehler, man könnte jetzt noch ein Log-Level einstellen, das ging jetzt deutlich schneller

02:12:44.600 --> 02:12:55.960
als ich gedacht habe, mein so ist das ein ziemliches Müll-Frontend, ja, oh, was macht

02:12:55.960 --> 02:13:01.680
er denn hier, ja, aber das ist doch jetzt schon mal eine ganz gute Grundlage, ich meine,

02:13:01.680 --> 02:13:08.800
da können wir doch die nächsten Male ordentlich weiter machen, wir haben alle Basics da, die

02:13:08.800 --> 02:13:14.400
wir brauchen, wir haben einen Cert Manager für Zertifikate, wir haben eine Testanwendung

02:13:14.400 --> 02:13:19.800
für unseren Kram, wir haben Anbindung an unseren Key Vault, das heißt selbst wenn ich mal meine

02:13:19.800 --> 02:13:25.400
Keys ändere, dann ist es easy, das einfach im Vault anpassen und gut ist und der Cluster

02:13:25.400 --> 02:13:31.960
aktualisiert sich, wir haben Logging, wir haben lokale Storage, wir haben Grafana fürs

02:13:31.960 --> 02:13:39.480
Monitoring beziehungsweise zum drauf gucken, Argo CD zum automatisch ausrollen, das ist

02:13:39.480 --> 02:13:55.920
auch schon mal ein ganz gutes Setup, nutzt du Wayland oder X, das ist X, Wayland funktioniert

02:13:55.920 --> 02:14:13.200
ja vm nicht gescheit, das ist ja immer noch meine Linux vm, ja guck hier Windows da Linux,

02:14:13.200 --> 02:14:23.360
ok.

02:14:23.360 --> 02:14:52.520
So, ja gut, man könnte sich jetzt noch ein bisschen Gedanken darüber machen, warum zum

02:14:52.520 --> 02:15:01.120
Beispiel die Qt App hier die ganze Zeit so ein drehendes Ding hat. Könnte das sein,

02:15:01.120 --> 02:15:09.320
dass der Health Check schlicht und ergreifend nicht funktioniert? Was habe ich denn da für

02:15:09.320 --> 02:15:17.520
den Health Check eingestellt? Gar keinen! Nee doch, hier. Readiness Probe slash Health,

02:15:17.520 --> 02:15:35.640
das sollte doch eigentlich funktionieren. Holen wir mal aus. Slash Health, jo. Health,

02:15:35.640 --> 02:15:41.640
ja, weil, weil, warum Health mit Z? Weil sich irgendwelche coolen Leute bei Google gedacht

02:15:41.640 --> 02:15:46.960
haben. Das ist eine gute Idee, das mit Z zu schreiben. Ich habe keine Ahnung, warum die

02:15:46.960 --> 02:15:55.200
auf diese klorreiche Idee gekommen sind. Aber der Default Endpunkt für einen Cluster Endpunkt,

02:15:55.200 --> 02:16:10.840
nein, für einen Service Endpunkt Check ist Health Z. Das ist der Default. Also warum

02:16:10.840 --> 02:16:15.800
der Service hier permanent in progressing ist, weiß ich nicht. Ich vermute aber mal,

02:16:15.800 --> 02:16:21.680
das liegt daran, weil ich es lokal betreibe und nicht bei einem Cloud-Anbieter. Also das

02:16:21.680 --> 02:16:26.600
ArgoCD da irgendwelche Probleme damit. Habe ich auch mal was zu gelesen. Progressing Service,

02:16:26.600 --> 02:16:35.240
wenn man das lokal hat. Hier, ArgoCD progressing state forever. Ja, Resource Health, genau,

02:16:35.240 --> 02:16:43.080
Service. If Service ist auf type Load Balancer, Status Load Balancer Ingress List ist non-empty.

02:16:43.080 --> 02:16:55.760
Okay, wollen wir mal gucken, ob das auf Typ Load Balancer ist. Get Service, Minus A. Es

02:16:55.760 --> 02:17:07.520
ist auf type. Moment, ich habe da einen Falto, Qt-App muss ich gucken, hier. Load Balancer,

02:17:07.520 --> 02:17:15.920
aha. Das ist das Problem. Die App ist auf Typ, der Service ist auf Typ Load Balancer. Warum

02:17:15.920 --> 02:17:21.880
eigentlich? Kann der lokal gar nicht funktionieren. So, gucken wir mal wahrscheinlich, weil ich Mist

02:17:21.880 --> 02:17:26.960
eingestellt habe. Will ich Cluster IP haben? Wahrscheinlich will ich Cluster IP haben. Ist Cluster

02:17:26.960 --> 02:17:38.320
IP nicht so geil der Default? Okay, Push. Und jetzt hat sich das hoffentlich erledigt. Bäm. Alles

02:17:38.320 --> 02:17:56.480
gesüngt. Healthy, wunderbar. Pogu. So muss das sein. Haben wir alles am Start.

02:17:56.480 --> 02:18:03.120
External Secrets, Zertifikate, Log-Auswertungen, Grafana-Dashboard, lokale Storage, automatisches

02:18:03.120 --> 02:18:09.600
Ausrollen auf dem Cluster. Da kann man doch mit leben, so. Okay, was sagt Chat-GPT? In Kubernetes

02:18:09.600 --> 02:18:14.720
ist slash Health ein Endpunkt für den einfachen Gesundheitscheck von Pods, während Health ein

02:18:14.720 --> 02:18:25.880
Endpunkt für erweiterte Prüfung der Pod-Gesundheit ist. Das erscheint mir ein bisschen sass, was Chat-GPT

02:18:25.880 --> 02:18:44.600
da erzählt. Also, ich mein, das heißt ja im Endeffekt, das gibt's nämlich gar nicht.

02:18:44.600 --> 02:18:54.440
Dass das Z für Zero steht, nee, das ist irgendwie so Google-Ding mit dem Z hinten dran. Keine Ahnung.

02:18:54.440 --> 02:19:11.600
Svelte. Svelte, finde ich, ist mit Abstand mein Favorite. Wenn du was brauchst, was verbreitet

02:19:11.600 --> 02:19:17.000
ist, also super krass weit verbreitet, und wenn du Leute finden willst, die mit dran arbeiten,

02:19:17.000 --> 02:19:21.920
da bleibt ja eigentlich nur React. React ist das mit Abstand, wirklich mit riesem Abstand

02:19:21.920 --> 02:19:27.360
verbreitetste Frontend-Framework, wo du auch ein paar Leute für findest, die davon Plan

02:19:27.360 --> 02:19:51.320
haben. Ja, mit Svelte, weiß ich nicht, ob es da so viele gibt. So. Leute, wir haben

02:19:51.320 --> 02:20:00.000
noch eine Stunde Zeit, was machen wir denn jetzt? Wir haben jetzt 2 Stunden 15 Kubernetes-ed,

02:20:00.000 --> 02:20:13.480
können wir doch irgendwas Sinniges da drin machen jetzt? Ich überleg gerade. Traffic

02:20:13.480 --> 02:20:20.200
als Ingress, nee. Traffic als Ingress ist jetzt eklig zu einzurichten, weil bei mir

02:20:20.200 --> 02:20:24.440
lokal auf der Kiste, da muss ich einfach bei Minikube das Nginx Addon anmachen und gut

02:20:24.440 --> 02:20:33.600
ist. Hast du Geburtstag in 3 Stunden? Pogu. Nee, das machen wir heute nicht, das ist zu

02:20:33.600 --> 02:21:00.760
umfangreiches Thema. Nö, da fällt mir jetzt gerade nichts mehr, ehrlich gesagt großartig

02:21:00.760 --> 02:21:16.080
ein, was wir da heute machen könnten. Du kannst links zu Stackoverflow posten, jaja. Kube

02:21:16.080 --> 02:21:46.000
Doom. Die Leute haben ja schon wieder Ideen, ey. Kackel. Das ist einfach eine gute Idee,

02:21:46.000 --> 02:22:03.880
oder? Kubernetes Doom. Security Scan. Ich schreibe mir das mal alles, ich schreibe mir

02:22:03.880 --> 02:22:33.240
das mal auf als To Do's, ja. Das ist ja geil. Das zusammen Windows Update machen, dann fährt

02:22:33.240 --> 02:22:44.880
mein Rechner ja runter und ihr seid weg. Leute, wisst ihr, dass ich bald 39 werde? Ich hab

02:22:44.880 --> 02:22:52.600
da auch kein Bock drauf. Dann ist nur noch ein Jahr bis 40. Mit 40 ist das Leben zur

02:22:52.600 --> 02:23:05.280
Hälfte vorbei, sozusagen. Chainlord, ich weiß nicht, wie alt du bist, aber wenn du

02:23:05.280 --> 02:23:12.120
unter 20 bist, könnte ich easy dein Vater sein, ja? Ist richtig. Ja, könnte ich, theoretisch.

02:23:12.120 --> 02:23:28.560
Ich bin es meines Wissens nach nicht, aber ich könnte, rein vom Alter her. Ja, wer weiß.

02:23:28.560 --> 02:23:44.320
Wenn du dir dein Alter aussuchen könntest, welches würdest du gerne wieder sein? Okay,

02:23:44.320 --> 02:23:54.280
es geht ja um das Alter und nicht um die Zeit. Ja, das muss man ja immer trennen. Wenn es

02:23:54.280 --> 02:24:07.600
um die Zeit ging, was richtig cool war, dann hätte ich eindeutig gesagt. Bonkers. Alter.

02:24:07.600 --> 02:24:25.520
Also, wenn es um die Zeit geht, da gibt es mehrere, aber ich glaube, ohne Mist, wenn

02:24:25.520 --> 02:24:35.360
ich nochmal Zeit, dann würde ich tatsächlich was nehmen, wo ich Ferien hatte und noch in

02:24:35.360 --> 02:24:42.880
die Schule gegangen bin. Ja, wo Oma und Opa noch am Leben waren, wo ich Half-Life gespielt

02:24:42.880 --> 02:24:48.000
habe den ganzen Tag auf meinem 17 Zoll Röhrenbildschirm, dann angefangen habe, schon ein bisschen

02:24:48.000 --> 02:25:03.800
MMOs zu grinden. So, sagen wir mal, sagen wir mal so die, so 1996 bis 2000, so die Zeit,

02:25:03.800 --> 02:25:15.960
das fände ich geil. So, aber wenn es um das Alter geht, also quasi so mit jetzigem Wissen

02:25:15.960 --> 02:25:23.600
und jetziger Zeit und so, wie alt ich heute sein möchte, ganz ehrlich, dann wahrscheinlich

02:25:23.600 --> 02:25:36.920
nur ein paar Jahre jünger, nicht wirklich viel. Vielleicht 25 oder so. Oder 30, 30

02:25:36.920 --> 02:25:47.480
wahrscheinlich. 30 ist eigentlich ganz gut. 30, paarunddreißig. Ehrlich keine Schmerzen.

02:25:47.480 --> 02:25:54.480
25 bis 35 so dazwischen irgendwie. Es ist jetzt auch nicht wirklich so schlimm gerade.

02:25:54.480 --> 02:26:01.000
Ich kann mich jetzt nicht beschweren. Wie gesagt, ich war lange nicht mehr so fit und so gesund,

02:26:01.000 --> 02:26:05.080
so auch was Rückenschmerzen und Kopfweh und so angeht wie jetzt. Und das liegt einzig

02:26:05.080 --> 02:26:19.920
und allein an mehr Bewegung. So ist es. Also ich war lange nicht mehr, wie gesagt, so fit

02:26:19.920 --> 02:26:30.360
und ja, also insgesamt eigentlich alles ganz gut wie jetzt. Ja, deswegen habe ich ja gesagt,

02:26:30.360 --> 02:26:35.560
wenn Ferien sind, Schulzeit selbst, da hätte ich auch keinen Bock mehr drauf. Schule war

02:26:35.560 --> 02:27:00.760
richtig kacke. Da hätte ich auch keinen Bock drauf jetzt. Schule ist ultra suck.

02:27:00.760 --> 02:27:30.720
Ähm. Kommt das hin mit 24? Joah. Leg gerade. Also

02:27:30.720 --> 02:27:42.800
Ausbildung 2007. Ja, ja, so irgendwie in dem Dreh, ne? Ja, nochmal. 2007 minus 1984, 23,

02:27:42.800 --> 02:27:48.480
ja, also mit 23, 24 ist richtig. Joah. Äh, was ich vorher gemacht habe. Ich habe vorher

02:27:48.480 --> 02:27:59.880
beispielsweise BWL-Shit gemacht. Ja. Nicht wirklich studiert BWL-Shit oder so. Eher ausbildungstechnisch

02:27:59.880 --> 02:28:03.720
was gemacht, aber da habe ich überhaupt keinen Bock drauf gehabt. Das habe ich auch nur

02:28:03.720 --> 02:28:11.520
gemacht, weil mich meine Mutter so genervt hat, genervt hat, dass ich das jetzt unbedingt

02:28:11.520 --> 02:28:22.880
was machen muss. Ja, was mit Holz. Was hast du für eine Ausbildung? Wie gesagt, ich habe

02:28:22.880 --> 02:28:33.480
mal Bürokauf angefangen zu lernen. Vor langer Zeit habe ich nicht fertig gemacht und das

02:28:33.480 --> 02:28:40.200
war die Zeit, da habe ich eigentlich mich morgens an Rechner gesetzt, eingeloggt, MMO-Kreiselgrind

02:28:40.200 --> 02:28:46.720
gemacht bis abends und dann bin ich dann bin ich pennen gegangen und dann bin ich aufgestanden

02:28:46.720 --> 02:28:55.160
und habe wieder MMO-Kreiselgrind gemacht den ganzen Tag. Und dann ging mir halt meine Mutter

02:28:55.160 --> 02:29:06.080
so sehr auf den Keks, dass ich dann mich habe halt dazu überreden lassen Bürokaufmann

02:29:06.080 --> 02:29:11.640
zu machen. Weil man ja irgendwie eine Ausbildung angeblich machen muss so. Und egal was, wie

02:29:11.640 --> 02:29:17.800
scheiße es ist, mach halt mal. Und ich meine nicht, dass ich da irgendwie jetzt großartig

02:29:17.800 --> 02:29:28.640
was gerissen hätte. Janfried, danke schön für den Sub. Nicht, dass ich da groß was

02:29:28.640 --> 02:29:37.200
gerissen hätte. Ich hatte auch keinen Bock. Also wie gesagt, ich habe da den ganzen Tag

02:29:37.200 --> 02:29:45.680
habe ich MMO-Kreiselgrind gemacht, mich für nichts anderes interessiert. Ja, löten

02:29:45.680 --> 02:29:54.000
deswegen mal was sinnvolles was man lernt, wenn man sowas lernt in der Schule. Also wie

02:29:54.000 --> 02:29:58.960
gesagt, das einzige was ich mir gemerkt habe aus meiner kaufmännischen Ausbildungszeit

02:29:58.960 --> 02:30:06.720
da ist, wie man eine Buchhalternase macht und dass man linear und dekresiv abschreiben

02:30:06.720 --> 02:30:20.400
kann. Wobei ich gehört habe, dass es mittlerweile gar nicht mehr so ist. Kannst du noch etwas

02:30:20.400 --> 02:30:27.160
sagen, was du nach der Physi-Ausbildung verdient hast? Ja, kann ich sagen 33.500 im Jahr beim

02:30:27.160 --> 02:30:44.280
Provider. Direkt nach der Ausbildung. Ja, mit Bonus sogar ein bisschen mehr. Also sagen

02:30:44.280 --> 02:30:50.840
wir mal, ich habe meinen Gehalt in den letzten 15 Jahren quasi ziemlich genau verdreifacht,

02:30:50.840 --> 02:31:05.960
kann man glaube ich sagen. Ne, sogar mehr. Bisschen mehr sogar. Fast verdreifacht. Ich

02:31:05.960 --> 02:31:10.760
bin mir relativ sicher, in den nächsten 15 Jahren wird das nicht mal so viel sein. Ich

02:31:10.760 --> 02:31:26.400
glaube nicht, dass ich nochmal mal 3 verdienen werde. 2035. Die hat Epic? Was soll denn

02:31:26.400 --> 02:31:44.480
Epic sein? Erzählende Literatur, ok. Inflationsbereinigt, keine Ahnung, musst du selbst ausrechnen.

02:31:44.480 --> 02:32:07.960
Gibt es dazu einen Rechner? Wie viel das heute wird? 33.500, 2010 oder so. Die Seite

02:32:07.960 --> 02:32:11.800
mache ich nicht auf. Die sieht sass aus. Ah, im Moment das Spiegel ist aus. Ok, es sieht

02:32:11.800 --> 02:32:21.960
trotzdem sass aus. Ok, zeig mal her. Protogohalt, Datum, so frisst es jedenfalls. Was soll ich

02:32:21.960 --> 02:32:49.480
da jetzt eintippen? Muss ich jetzt da zurückgehen auf 2010 oder

02:32:49.480 --> 02:32:56.160
das muss ich da jetzt einstellen. 2010 habe ich, keine Ahnung, 33.500 durch 12. Wie viel

02:32:56.160 --> 02:33:06.240
ist denn das? Ok. Um sich genauso viel leisten zu können wie November, müssen sie heute

02:33:06.240 --> 02:33:15.360
3600 verdienen. Ok. Ok, ich glaube ich kann auch einfach das Jahresgal reinschreiben.

02:33:15.360 --> 02:33:27.120
Ok, also heute müsste man dann schon 43.000 verdienen. Das ist schon krass wenn man sich

02:33:27.120 --> 02:33:34.600
das hier anguckt, oder? Davor eigentlich nur halbwegs milde und jetzt wirklich bergab.

02:33:34.600 --> 02:33:52.640
Da kann das durchaus sein, wenn das so weiter geht. Also wenn das irgendwie 10% im Jahr

02:33:52.640 --> 02:33:59.760
sind, da kann das durchaus sein, dass ich in 15 Jahren oder in 10 Jahren tatsächlich

02:33:59.760 --> 02:34:14.400
dieses doppelte habe oder so, weil die müssen ja irgendwie da mitziehen. Wer weiß. Ja, das

02:34:14.400 --> 02:34:23.480
ist doch eigentlich ziemlich gut, oder? Es kommt recht genau hin. Mit meinem Einstiegsgehalt

02:34:23.480 --> 02:34:46.240
damals und jetzt bei ihm. Naja. So, ich war mal kurz bei dem Kubernetes-Klasse aus. Ausgecubed

02:34:46.240 --> 02:35:04.080
für heute. Das Chat-GPT uns alle arbeitslos macht. Ja, wenn es nach YouTube geht ist das

02:35:04.080 --> 02:35:12.800
ja so. Wenn die Leute damit leben können, dass in allen Arbeiten irgendwelche versteckten

02:35:12.800 --> 02:35:16.480
Fehler drin sind, von denen du nichts weißt, ja dann kannst du Chat-GPT alles machen lassen.

02:35:42.800 --> 02:35:57.960
Welchen IT-Job kann man machen, wo man nicht 24-7 programmiert? Alle außer Software-Entwickler

02:35:57.960 --> 02:36:08.440
und selbst als Software-Entwickler programmierst du nicht 24 Stunden? Wann war der letzte

02:36:08.440 --> 02:36:26.800
AVM-Aufsett-Stream? Gar nicht so lange her. Ich glaube im Dezember. Ich bin echt richtig

02:36:26.800 --> 02:36:32.880
gelangweilt von diesen ganzen Chat-GPT-Videos oder generell von diesem Ultra-AI-Gehype.

02:36:32.880 --> 02:36:40.880
Ich habe es nach einer Woche schon gelangweilt. Weil die Videos auch immer die gleichen sind.

02:36:40.880 --> 02:36:46.520
Oh, ich lasse Chat-GPT eine Webseite machen. Oh, Chat-GPT schreibt meine Bewerbung. Blablabla.

02:36:46.520 --> 02:36:57.200
Die Diskussion ist sehr ermüdend alles. Es ist ja auch langsam mal wieder gut. War doch

02:36:57.200 --> 02:37:03.440
Januar, Februar kann auch sein. Kann auch sein, dass es Januar, Februar gewesen ist.

02:37:03.440 --> 02:37:27.560
Na ja, Leute, ich glaube, ich gehe jetzt off.

02:37:27.560 --> 02:37:38.840
Ja, ich habe da auch ein paar Ausschnitte gesehen. Was sie da erzählt haben auf Genie-Level

02:37:38.840 --> 02:37:43.240
und sowas. Ich muss Chat-GPT einfach nur mal nach einer genauen Funktionsweise vom Kommando-Zahlen-Tool

02:37:43.240 --> 02:37:51.600
fragen. Da denkt sich schon irgendwelchen Blödsinn aus. Chat-GPT kann eins richtig

02:37:51.600 --> 02:38:08.920
gut. Dich mit einer riesen Masse an Text erschlagen.

02:38:08.920 --> 02:38:22.800
Ja, Leute, wir haben jetzt genug gewürfelt für heute. Kubernetes. Das schon, das hat

02:38:22.800 --> 02:38:37.440
ja mit Chat-GPT erstmal nur am Rande zu tun. Bis denn, macht's gut, CU.

