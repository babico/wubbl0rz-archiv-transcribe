1
00:01:09,420 --> 00:03:20,340
Ja, doch. Die letzte Woche habe ich 600 Euro Tierarztrechnung ausgegeben. Aber ich will ja, dass es Chico gut geht. Ja, aber das ist schon echt ordentlich.

2
00:03:20,340 --> 00:03:30,850
Ich meine, bei mir ist es nicht so wild, ja. Die Kohle muss eh irgendwo hin. Aber schon ganz schön heftig, wenn man sich das überlegt.

3
00:03:30,850 --> 00:03:33,850
Wie macht man das, wenn man jetzt nicht so viel Geld hat?

4
00:03:33,850 --> 00:03:57,800
Ich meine, es war ja nicht zum Fenster rausgeschmeißt. Es war für die Katz sozusagen. Aber 600 Euro Tierarztkost, schon krass. Ich war... Ich habe einmal... Einmal habe ich das... Ne, ich will keine neue Katz.

5
00:03:57,800 --> 00:04:26,110
Einmal waren die hier, haben sich Chico angeguckt. Dann war ich beim Augenarzt mit Chico. Moment, die Musik ist zu laut. Wait. Dann war ich beim Augenarzt mit Chico.

6
00:04:26,110 --> 00:04:35,770
Dann war ich beim Augenarzt mit Chico. Also, also das Ding war, ich habe letzte Woche, hat Chico hier auf dem Schrank... Ich war mal nicht vor M an.

7
00:04:35,770 --> 00:04:42,770
Letzte Woche hat Chico, letztes letzte Wochenende hat Chico hier auf dem Schrank gehockt und hat so ein bisschen, habe ich gesehen, die hat so ein bisschen Blut im Auge gehabt.

8
00:04:42,770 --> 00:04:49,770
Denkt man sich ja erstmal nichts großartiges dabei. Man kann sich gekratzt haben oder irgendwie sonst was. Also unten rechts ein bisschen Blut im Auge.

9
00:04:49,770 --> 00:05:03,770
Aber, nachdem Chico ja bekanntermaßen ein bisschen Nierenprobleme hat und auch nur Diätfutter und alles kriegt. Chico ist ja 13 mittlerweile schon. Er ist jetzt zwar kein alter wirklich für Katzen, aber schon alt.

10
00:05:03,770 --> 00:05:29,770
Also sie sind alt, sie können durchaus noch älter werden, aber auf jeden Fall schon Oma. Und zumindest, dann habe ich im Internet geguckt, dass gerade Katzen mit Nierenerkrankung oftmals auch unter Bluthochdruck leiden und Bluthochdruck bei Katzen sehr oft auf das Auge geht und das Auge blutet und manchmal löst sich auch tatsächlich die Netzhaut ab.

11
00:05:30,770 --> 00:05:48,660
Zumindest war ich dann beim Tierarzt, wo wir sonst hingehen und hab gesagt, ihr Katz hat Blut im Auge und Blutdruck messen. Da haben die irgendwie gesagt, doch nö, wir können gar keinen Blutdruck messen. Fand ich schon sehr pipega, dass sie das so alles überhaupt nicht interessiert hat.

12
00:05:48,660 --> 00:06:01,660
Hab ich mir gesagt, so gut dann, neuen Tierarzt suchen. Hab ich mir neuen Tierarzt gesucht und die sind tatsächlich sogar daheim vorbeigekommen, weil die haben gesagt, dass Blutdruck messen ist am besten, wenn die Katz halt entspannt ist.

13
00:06:01,660 --> 00:06:21,660
Leider war Chico sehr unkooperativ, was Blutdruck messen angeht. Da mussten sie erstmal in ihr Auto hocken und dann haben sie da gemessen und Chico hat halt richtig krass hohen Blutdruck. Chico hat über 250 Blutdruck, normalerweise ist 150 gerade so noch okay. Chico hat super krass hohen Blutdruck.

14
00:06:21,660 --> 00:06:47,350
Jetzt kriegt Chico zusätzlich zu ihren Schilddrüsen und Nierenmedikamenten noch Blutdruck senkende Mittel und für das Blut im Auge war ich mit der Katze beim Augenarzt, ja es gibt Augenärzte für Katzen. Die hat das Auge untersucht, hat gemeint, oh ja, da ist schon ein bisschen blutig und hat auch nochmal Blutdruck gemessen, war auch wieder viel zu hoch.

15
00:06:47,350 --> 00:07:07,350
Und jetzt muss sie noch ein paar Cortison-Tabletten schlucken, dass das alles wieder schön abschwillt im Auge und die Netzhaut auf jeden Fall dran bleibt und sie nicht blind wird. Und jetzt kriegt die halt Blutdruck senkende Mittel und morgen gehe ich schon wieder zum Tierarzt und Mittwoch wieder zum Augenarzt.

16
00:07:07,350 --> 00:07:35,510
Also ich habe wahrscheinlich innerhalb von 14 Tagen bin ich 1000 Euro los, was Tierarzt angeht. Die ist 13, die ist schon älter, da haben die ja öfters mal die ein oder anderen probiert. Oh nee, C++, geh mal weg, ich mache, ich mache, ich mache weg.

17
00:07:35,510 --> 00:07:52,730
Gibt es eine Krankenversicherung? Ey, keine Ahnung, ob es das gibt, aber wenn, ist es wahrscheinlich so unsinnig teuer. Ich bezahle das selbst. Irgendwo muss die Kohle ja hin.

18
00:07:52,730 --> 00:08:17,580
Also ich hoffe, dass es morgen, wenn Blutdruck gemessen wird, dass, also wir waren ja da nochmal letzte Woche Blutdruck messen, und zwar am Freitag, da war er schon runter ein bisschen, aber noch nicht genug. Aber das dauert immer ein bisschen, bis das Blutdruckmedikament bei der Katze im Blut ist, bei Menschen übrigens nicht anders, bis das alles ordentlich wirkt.

19
00:08:18,580 --> 00:08:35,580
Chico bewegt sich auch viel zu wenig, ja. Chico hängt immer nur rum. Und ich hoffe, der Blutdruck ist da noch ein bisschen runter gegangen und beim Augenarzt stellen sie fest, dass alles wieder, alles wieder soweit okay ist und, weil, ganz ehrlich, die Katze klickt halt sehr viel im Medikament und die Katze hat keinen Bock da drauf, die zu nehmen.

20
00:08:35,580 --> 00:09:07,700
Ja, du hast aber sicherlich nicht einmal 80 Euro bezahlt, oder? Ist er Freigänger? Ne, es ist eine Sie, auch wenn sie Chico heißt, ergibt keinen Sinn, aber was weiß ich, was die Vorbesitzer sich dabei gedacht haben. Kann man aber wahrscheinlich auch nur für die junge, für eine junge Katze abschließen, wenn du das für eine 13-jährige Katze abschließt. Da wollen die fast was für sich dafür haben, Alter. Das ist so, wie wenn du mit 70 sagst, ich möchte noch Krankenversicherung abschließen.

21
00:09:08,700 --> 00:09:14,700
Ne, ist er nicht. Das Einzige, was Chico kann, ist, die kann hier auf die Terrasse, aber die Terrasse hat so ein Netz drumherum.

22
00:09:14,700 --> 00:09:49,230
Ich bin ganz schön kaputt heute. Gestern Abend, ähm, ja, wie gesagt, ich bin ganz schön kaputt. Gestern Abend Fahrrad gefahren, 45 Minuten volle Pulle und heute Morgen 10 Kilometer gerannt. Ich merk's echt in den Beinen, das reicht jetzt erstmal. Morgen mach ich nix. Morgen mach ich gar nix. Reicht echt. Ich merk's auch voll im Schienbein.

23
00:09:50,230 --> 00:10:12,230
Du warst heute Morgen nicht da, gell? Heute Morgen hat mich die Waage übelst debatet. Ich bin rübergegangen, hab mich auf die Waage gestellt, hatte noch Socken und Unterhose an. Da hat die Waage 90 Kilo angezeigt. Dann bin ich weg, hab das Handy geholt zum Fotografieren, hab Socken und Unterhose ausgezogen, hat 90,2 oder 90,3.

24
00:10:13,230 --> 00:10:44,460
Das heißt, ich hatte weniger an, hab mehr gewogen. Null. War nix. Es war ganz knapp, es war ganz knapp über 90. Das heißt, noch ein paar Wochen, also bis Ende des Jahres sollte ich dieses Mal unter 90 auf jeden Fall schaffen, wenn das so weitergeht. Ja, wird's ja auch.

25
00:10:44,460 --> 00:11:06,460
Es war nicht so krass wie zu Corona-Zeiten, wo ich angefangen hab mit allem. Ja, man darf nicht vergessen, dass wenn man sich ordentlich bewegt, man kriegt ja auch Muskel. Man tradet ja auch ein bisschen Speck gegen Muskel. Ja, kenn ich, hab ich aber noch nie großartig was mitgemacht.

26
00:11:06,460 --> 00:11:38,270
Excellent. So, dann erstmal Finger aufwärmen für krasse Progress-Action. So, Finger aufgewärmt. Auf geht's. Ich zeig euch mal, für alle, die nicht dabei waren, war jemand beim letzten Rust-Stream dabei und hat mir zugeguckt, wie ich nix gecheckt hab.

27
00:11:38,270 --> 00:12:06,310
Ich zeig euch kurz, was Sache ist und heute wird's nicht so super kompliziert, weil erstens bin ich ziemlich kaputt und hab wahrscheinlich auch jetzt 19 Uhr nicht mehr die größten Brain-Resources übrig. Heute versuchen wir das mal ein bisschen aufzuräumen. Dazu braucht man aber auch Rust-Spezialitäten.

28
00:12:06,310 --> 00:12:36,030
Und dementsprechend schauen wir mal. So, also, hab ich jetzt Package-Updates gemacht? Arch-Linux, by the way, falls jemand Fragen hat. Schon wieder Package-Updates? Meine Güte. Hast du mal zwei Minuten keine Package-Updates gemacht? Ja. Arch use ich, by the way. Packages 171. Ich weiß wahrscheinlich von gerade mal 20 oder so, dass ich die wirklich wissentlich installiert hab.

29
00:12:36,030 --> 00:13:13,580
Übrigens, Leute, jetzt, wo ich ttf-Tweemojis sehe, pass mal auf. Wisst ihr, was ich gesehen hab? Es gibt bald eine neue Tweemoji-Version auf GitHub. Endlich neue Unicode-15-Emojis. Tweemoji-GitHub. Und zwar Discord macht Gigachat-Move. Ja. Discord macht Gigachat-Move und addet den Großteil der fehlenden Unicode-15-Emojis.

30
00:13:15,580 --> 00:13:35,580
Steven from Discord ist am Start. Steven from Discord und sagt, ihr In-House-Artist, der Kevin VQ-Damm, geiler Name, VQ-Damm, hat Emojis open-sourced für Tweemoji.

31
00:13:36,580 --> 00:13:54,580
Also, wer sich fragt, was das Problem ist eigentlich, das Ding ist, Tweemoji ist eigentlich der Twitter-Emoji-Font. Das dumme ist nur, seit Elon Twitter übernommen hat, wurde jegliches Open-Sourcing von ihrem Emoji-Font eingestellt.

32
00:13:55,580 --> 00:14:02,580
Und dementsprechend können die neuesten Emojis nicht einfach kopiert werden von Twitter, weil die halt copyrighted sind. Bei Twitter oder bei X.

33
00:14:03,580 --> 00:14:22,580
Witzigerweise, der Fork auf GitHub ist von alten Twitter-Mitarbeitern, die rausgeschmissen wurden von Twitter und sich damals um den Emoji-Font gekümmert haben.

34
00:14:22,580 --> 00:14:32,580
Und die Discord-Leute haben neue Emojis beigesteuert. Ich glaube, es sind jetzt nahezu alle Unicode-15-Emojis. Das heißt, sie müssen jetzt nur noch einen neuen Font bauen.

35
00:14:33,580 --> 00:14:43,850
Und dann gibt es endlich eine neue Version von Tweemoji, die Unicode-15-kompatibel ist.

36
00:14:44,850 --> 00:14:48,850
Wie sieht es eigentlich mit Unicode-16 aus?

37
00:14:49,850 --> 00:14:57,140
Okay, kommt September 2024 raus.

38
00:15:00,290 --> 00:15:06,290
Aha, guck mal, 2024 gibt es neue Emojis. Gucken wir mal, ob es da schon welche gibt zum angucken.

39
00:15:07,290 --> 00:15:12,290
Fingerprint-Emoji gibt es noch kein Beispiel für. Emoji-16 gibt es noch nicht.

40
00:15:13,290 --> 00:15:18,290
Face with backs under eyes gibt es dann. Aha, alles klar, gibt es auch noch keine Implementierung.

41
00:15:19,290 --> 00:15:31,430
Blätter, Leafless-Tree, Harp, eine Schaufel und irgendwelche Veganer-Sachen.

42
00:15:32,430 --> 00:15:35,430
Unbedingt Unicode-16 braucht es.

43
00:15:38,000 --> 00:15:46,000
Da bin ich wirklich froh, dass hier Discord-Leute den Giga-Chat-Modus gezündet haben und neue Emojis beisteuern.

44
00:15:46,000 --> 00:15:54,000
Dann heißt das Ding zwar Tweemoji, hat aber nicht die Emojis von Twitter, wobei Twitter auch nicht mehr Twitter, sondern X heißt.

45
00:15:55,000 --> 00:15:58,000
Also Chat, weiter geht's.

46
00:15:59,000 --> 00:16:01,000
Hier sind wir stehen geblieben. Ich zeige euch, wie wir stehen geblieben sind.

47
00:16:02,000 --> 00:16:09,000
Das Ziel ist eine WebRTC-Anwendung zu bauen mit Low-Level-WebRTC in Rust.

48
00:16:10,000 --> 00:16:12,000
Frontend ist ein bisschen HTML-JavaScript.

49
00:16:13,000 --> 00:16:18,000
Backend, weil ein bisschen mehr Backend erforderlich ist, als nur Seite auszuliefern, ist eine .NET-Anwendung.

50
00:16:19,000 --> 00:16:22,000
Und die .NET-Anwendung macht Interop mit Rust.

51
00:16:23,000 --> 00:16:29,000
Ich zeige euch das Ganze mal. Wir machen hier mal Rust auf.

52
00:16:30,000 --> 00:16:39,000
Mal kurz in die JetBrains-Toolbox looken, ob es neue Versionen von den IDEs gibt.

53
00:16:40,000 --> 00:16:44,630
Massive. Es gibt neue Versionen von PyCharm und Golan.

54
00:16:45,630 --> 00:16:50,630
Ja, brauche ich jetzt ehrlich gesagt. Aber komm, wir machen Update.

55
00:16:50,630 --> 00:16:53,630
So, dann müssen wir Rider starten.

56
00:16:54,630 --> 00:16:57,630
Frontend mit dem Framework oder Plain?

57
00:16:58,630 --> 00:17:04,630
In dem Fall Plain, weil das Frontend gerade 30 Zeilen ist. Da ist nicht viel zu sehen.

58
00:17:05,630 --> 00:17:07,630
Ich zeige dir gleich, wie das aussieht.

59
00:17:08,630 --> 00:17:12,630
Also das hier ist aktuell alles, was das Frontend beinhaltet.

60
00:17:13,630 --> 00:17:15,630
Das macht zur Zeit nichts anderes als WebRTC-Verbindungsaufbau.

61
00:17:15,630 --> 00:17:17,630
Und dann auf die Webseite schreiben.

62
00:17:18,630 --> 00:17:20,630
Boah, laggy im Hintergrund.

63
00:17:21,630 --> 00:17:23,630
Alter, wie das... What the f...

64
00:17:24,630 --> 00:17:26,630
Das Update... Alter.

65
00:17:27,630 --> 00:17:30,630
JetBrains. Java. Keck Java.

66
00:17:33,200 --> 00:17:34,200
Was ist da los?

67
00:17:36,960 --> 00:17:39,960
Die brauchen beim Updaten der IDEs einfach mal alle 8 CPU-Cores.

68
00:17:49,820 --> 00:17:50,820
So gehört sich das.

69
00:17:54,740 --> 00:17:55,740
Ich habe das All-Products-Pack, ja.

70
00:18:07,900 --> 00:18:09,900
Was genau macht das da jetzt 3 Stunden beim Updaten?

71
00:18:09,900 --> 00:18:11,900
Oh, es gibt eine neue Sea Lion.

72
00:18:14,660 --> 00:18:15,660
Interesting.

73
00:18:29,430 --> 00:18:31,430
So. Update ist gelaufen.

74
00:18:32,430 --> 00:18:35,430
Gut. Also, ich zeige euch mal, wie das aktuell aussieht.

75
00:18:36,430 --> 00:18:37,430
Das Frontend ist äußerst unspektakulär.

76
00:18:38,430 --> 00:18:40,430
Da sieht man nicht viel, aber ich zeige es euch mal trotzdem.

77
00:18:41,430 --> 00:18:42,430
.NET Run.

78
00:18:44,430 --> 00:18:45,430
Aktuell sieht das...

79
00:18:46,430 --> 00:18:47,430
Äh, Moment. Ist das überhaupt...

80
00:18:48,430 --> 00:18:49,430
Moment, Moment. Das geht ja gerade gar nicht.

81
00:18:49,430 --> 00:18:55,870
Geht ja gerade gar nicht, weil ich gestern in weiser Voraussicht die Hälfte auskommentiert habe.

82
00:18:56,870 --> 00:18:57,870
Keck, wait.

83
00:18:58,870 --> 00:18:59,870
Die wir jetzt wieder einkommentieren müssen.

84
00:19:09,100 --> 00:19:10,100
Wait a minute. Ich glaube, es ist gerade kaputt.

85
00:19:11,100 --> 00:19:13,100
Wir haben doch gestern noch mit UIDs rumgewurschtelt, oder?

86
00:19:14,100 --> 00:19:19,780
Ja, es ist gar kein UN64 mehr.

87
00:19:20,780 --> 00:19:21,780
Das wird jetzt gar nicht funktionieren.

88
00:19:22,780 --> 00:19:23,780
Pass mal auf, das crasht jetzt.

89
00:19:31,540 --> 00:19:34,540
Okay. Wir haben das etwas unfertig hinterlassen gestern.

90
00:19:35,540 --> 00:19:36,540
Das Ganze.

91
00:19:38,540 --> 00:19:40,540
Wir haben so halb aufgehört.

92
00:19:41,540 --> 00:19:42,540
Zwischendrin.

93
00:19:43,540 --> 00:19:44,540
Zumindest, dass das Frontend...

94
00:19:45,540 --> 00:19:49,540
Oh, wir müssen gerade mal kurz eine Sache im Frontend machen. Das ist mir viel zu hell.

95
00:19:50,540 --> 00:19:51,540
Ähm, Style.

96
00:19:52,540 --> 00:19:54,540
Wie macht man das? Background, Color.

97
00:19:55,540 --> 00:19:56,540
Und jetzt?

98
00:19:57,540 --> 00:19:58,540
Keine Ahnung.

99
00:19:59,540 --> 00:20:00,540
Gray, oder sowas?

100
00:20:03,810 --> 00:20:08,420
Okay, schon besser.

101
00:20:09,420 --> 00:20:11,420
Okay, ja, ein bisschen nicht ganz so anstrengend.

102
00:20:12,420 --> 00:20:13,420
Okay.

103
00:20:14,420 --> 00:20:16,420
Also das Frontend ist äußerst simpel.

104
00:20:17,420 --> 00:20:18,420
Das ist alles an JavaScript.

105
00:20:19,420 --> 00:20:21,420
Der baut eine WebRTC-Verbindung auf.

106
00:20:22,420 --> 00:20:23,420
Im Detail werdet ihr es wahrscheinlich gleich sehen.

107
00:20:24,420 --> 00:20:25,420
Dann ist das hier das .NET-Backend.

108
00:20:26,420 --> 00:20:27,420
Moment, das hier ist das .NET-Backend.

109
00:20:28,420 --> 00:20:29,420
Da passiert auch nicht viel.

110
00:20:30,420 --> 00:20:32,420
Und das hier ist die Raster-Anwendung. Das ist da, wo wir heute drin rumbauen werden.

111
00:20:33,420 --> 00:20:34,420
Und ich glaube,

112
00:20:35,420 --> 00:20:38,420
ich glaube, Chad, wir müssen das erstmal wieder funktional machen.

113
00:20:39,420 --> 00:20:40,420
Bevor wir jetzt weitermachen.

114
00:20:40,420 --> 00:20:42,420
Deswegen, ich schmeiß

115
00:20:43,420 --> 00:20:45,420
diesen Krempel hier mit

116
00:20:47,990 --> 00:20:49,990
mit der UID schmeiß ich wieder raus.

117
00:20:52,880 --> 00:20:54,880
Wir machen da wieder ein U64 draus.

118
00:20:55,880 --> 00:20:58,880
Sodass, sodass, erstmal, erstmal kurz machen, dass es wieder funktioniert.

119
00:20:59,880 --> 00:21:03,790
Okay, ja.

120
00:21:04,790 --> 00:21:05,790
Wozu baust du das denn?

121
00:21:06,790 --> 00:21:07,790
Erstens, um ein bisschen Rust zu lernen.

122
00:21:08,790 --> 00:21:09,790
Und zweitens, weil ich vorhabe, alle meine Webcams

123
00:21:10,790 --> 00:21:12,790
realtime zu streamen auf eine Webseite.

124
00:21:20,220 --> 00:21:22,220
ID. ID kommt hier her.

125
00:21:23,220 --> 00:21:24,220
ID ist einfach 1. Jetzt hardcoded.

126
00:21:25,220 --> 00:21:27,220
Gucken, ob es noch

127
00:21:28,220 --> 00:21:30,220
ob es noch compiled.

128
00:21:31,220 --> 00:21:32,220
Cargo.

129
00:21:33,220 --> 00:21:34,220
Nope.

130
00:21:38,940 --> 00:21:40,940
UID mal wieder rausschmeißen.

131
00:21:41,940 --> 00:21:45,280
1.

132
00:21:49,130 --> 00:21:51,130
Und wo hat er jetzt noch Schmerzen?

133
00:21:54,980 --> 00:21:55,980
Client ID.

134
00:21:56,980 --> 00:21:59,670
Hä?

135
00:21:59,670 --> 00:22:00,670
Wie?

136
00:22:03,370 --> 00:22:05,370
Wie kommt er da drauf, dass es ein U128 sein soll?

137
00:22:06,370 --> 00:22:07,370
Will er mich gebanen?

138
00:22:08,370 --> 00:22:12,020
Achso!

139
00:22:13,020 --> 00:22:15,020
Weil hier oben die Collections noch U128 sind, gell?

140
00:22:16,020 --> 00:22:17,020
Ah, okay, alles klar.

141
00:22:18,020 --> 00:22:19,020
Nice. Und jetzt?

142
00:22:20,020 --> 00:22:21,020
Okay, was ist jetzt für ein Problem?

143
00:22:22,020 --> 00:22:25,620
Und?

144
00:22:26,620 --> 00:22:31,100
71. Pounds.

145
00:22:32,100 --> 00:22:33,100
128. Ah.

146
00:22:34,100 --> 00:22:35,100
U64.

147
00:22:36,100 --> 00:22:37,100
U64.

148
00:22:37,100 --> 00:22:41,060
So, ich glaube, wir sollten nirgendwo mal U128 benutzen.

149
00:22:42,060 --> 00:22:43,060
So, und wenn das jetzt funktioniert,

150
00:22:44,060 --> 00:22:46,060
dann sollte auch alles wieder klappen

151
00:22:47,060 --> 00:22:48,060
und das sollte laufen.

152
00:22:49,060 --> 00:22:50,060
Zwar nicht perfekt,

153
00:22:51,060 --> 00:22:52,060
aber laufe ich sein?

154
00:22:53,060 --> 00:22:57,390
Oh man! Alter, ich hab's kaputt gemacht gestern.

155
00:22:58,390 --> 00:22:59,390
Jetzt müssen wir das...

156
00:23:00,390 --> 00:23:02,390
Jetzt müssen wir das erst mal fixen wieder.

157
00:23:03,390 --> 00:23:04,390
Okay, also.

158
00:23:13,810 --> 00:23:14,810
Na geil, na geil.

159
00:23:15,810 --> 00:23:16,810
Jetzt haben wir das irgendwie zerstört.

160
00:23:17,810 --> 00:23:18,810
Warum?

161
00:23:19,810 --> 00:23:20,810
Was haben wir hier zerstört?

162
00:23:21,810 --> 00:23:22,810
Was will er eigentlich von mir, man?

163
00:23:23,810 --> 00:23:24,810
Achso, ich weiß warum.

164
00:23:25,810 --> 00:23:26,810
Weil ich das falsche returne.

165
00:23:27,810 --> 00:23:29,810
Wir returnen jetzt kein U128 mehr,

166
00:23:30,810 --> 00:23:31,810
sondern ein U46.

167
00:23:32,810 --> 00:23:33,810
U in 46.

168
00:23:34,810 --> 00:23:35,810
So, jetzt geht's wieder.

169
00:23:39,850 --> 00:23:40,850
Nice. Guck, passt wieder.

170
00:23:41,850 --> 00:23:44,540
Also, folgendermaßen.

171
00:23:45,540 --> 00:23:46,540
Frontend?

172
00:23:47,540 --> 00:23:48,540
Das Cray.

173
00:23:49,540 --> 00:23:51,540
Gibt das nicht irgendwie Light Cray oder sowas?

174
00:23:54,560 --> 00:23:55,560
Azure.

175
00:23:56,560 --> 00:23:59,380
Äh.

176
00:24:00,380 --> 00:24:01,380
Okay, wir können einfach...

177
00:24:02,380 --> 00:24:03,380
Wir können einfach...

178
00:24:08,190 --> 00:24:09,190
Wie geht das? RGB?

179
00:24:10,190 --> 00:24:11,190
Ich wollte gerade sagen,

180
00:24:12,190 --> 00:24:13,190
Visual Studio hat doch da so einen Selektor.

181
00:24:15,950 --> 00:24:16,950
Perfekt.

182
00:24:17,950 --> 00:24:18,950
Hä?

183
00:24:19,950 --> 00:24:27,320
Das ist doch im Leben nicht die gleiche Farbe, oder?

184
00:24:28,320 --> 00:24:29,320
Hä?

185
00:24:30,320 --> 00:24:34,360
Moment, was...

186
00:24:35,360 --> 00:24:36,360
Was zum...

187
00:24:37,360 --> 00:24:49,850
Hat da Visual Studio Code gerade draus gemacht?

188
00:24:50,850 --> 00:24:51,850
Okay, ja, so ist es okay.

189
00:24:52,850 --> 00:24:53,850
So lass ich mir das gefallen.

190
00:24:54,850 --> 00:24:55,850
Das ist ganz...

191
00:24:56,850 --> 00:24:57,850
Es ist wirklich easy, es macht nicht viel.

192
00:24:58,850 --> 00:25:00,850
Es versucht eine WebRTC-Verbindung aufzubauen.

193
00:25:01,850 --> 00:25:03,850
Dazu holt es sich vom Backend die Informationen,

194
00:25:04,850 --> 00:25:07,850
was der Server für Codecs und alle möglichen Sachen unterstützt.

195
00:25:08,850 --> 00:25:13,850
Dann subscribes es zum ConnectionState-Event

196
00:25:14,850 --> 00:25:17,850
und ändert hier ein bisschen die Farbe und den Text auf der Webseite,

197
00:25:18,850 --> 00:25:19,850
wenn sich da was ändert.

198
00:25:20,850 --> 00:25:21,850
Dann schickt es eine Antwort an den Server zurück,

199
00:25:22,850 --> 00:25:23,850
was der Browser selbst für Codecs unterstützt.

200
00:25:24,850 --> 00:25:25,850
Und...

201
00:25:26,850 --> 00:25:27,850
Ja, das war's.

202
00:25:28,850 --> 00:25:29,850
Mehr macht das Frontend nicht.

203
00:25:30,850 --> 00:25:33,850
Das Ganze wird quasi mehr oder weniger durch die .NET-Anwendung durchgeschleift.

204
00:25:34,850 --> 00:25:35,850
Das ist alles.

205
00:25:36,850 --> 00:25:37,850
Das ist alles, was einen hier großartig interessieren muss.

206
00:25:38,850 --> 00:25:40,850
Und das landet dann in der jeweiligen Rust.

207
00:25:41,850 --> 00:25:43,850
In der jeweiligen Rust-Endpunkt.

208
00:25:44,850 --> 00:25:46,850
Rust ist deutlich komplizierter gewesen gestern,

209
00:25:47,850 --> 00:25:48,850
als ich mir das vorgestellt habe.

210
00:25:49,850 --> 00:25:50,850
Und zwar...

211
00:25:51,850 --> 00:25:52,850
Die Main-Funktion brauchen wir nicht.

212
00:25:52,850 --> 00:25:53,850
Das ist ein asynchrones Rust.

213
00:25:54,850 --> 00:25:55,850
Das heißt, das läuft mit Tokio.

214
00:25:56,850 --> 00:26:01,850
Und damit Tokio funktioniert, braucht man eine Tokio-Runtime.

215
00:26:02,850 --> 00:26:03,850
Leute, ich habe bis heute nicht gecheckt, was es genau macht

216
00:26:04,850 --> 00:26:05,850
und wofür das Ganze gut ist.

217
00:26:06,850 --> 00:26:07,850
Aber es hat funktioniert,

218
00:26:08,850 --> 00:26:11,850
nachdem wir gestern sehr viel Try-and-Error rumgefuddelt haben.

219
00:26:15,120 --> 00:26:17,120
Und jetzt funktioniert es.

220
00:26:21,030 --> 00:26:23,030
Und man sieht hier die entsprechenden Sachen,

221
00:26:24,030 --> 00:26:25,030
die in C-Sharp aufgerufen werden.

222
00:26:26,030 --> 00:26:27,030
Hier wird beispielsweise aufgerufen Get-Offer.

223
00:26:28,030 --> 00:26:32,030
Hier wird Create-Connection aufgerufen.

224
00:26:33,030 --> 00:26:34,030
Hier wird Set-Answer aufgerufen.

225
00:26:35,030 --> 00:26:37,030
Wenn man sich das hier in Rust anguckt, sieht man das auch.

226
00:26:38,030 --> 00:26:39,030
Das ist eigentlich das Einzige.

227
00:26:40,030 --> 00:26:41,030
Hier passiert eigentlich das meiste.

228
00:26:42,030 --> 00:26:44,030
Der erstellt eine neue WebRTC-Connection.

229
00:26:50,570 --> 00:26:52,570
Hier, der erstellt eine neue WebRTC-Connection.

230
00:26:53,570 --> 00:26:54,570
Warum habe ich hier Tracks?

231
00:26:55,570 --> 00:27:01,850
Das ergibt überhaupt keinen Sinn.

232
00:27:02,850 --> 00:27:03,850
Ah, Tracks, weil ich die...

233
00:27:04,850 --> 00:27:05,850
Okay, ergibt doch Sinn.

234
00:27:05,850 --> 00:27:06,850
Hier erstelle ich eine WebRTC-Connection

235
00:27:07,850 --> 00:27:11,850
und hole mir dann raus, was der Server für Codecs unterstützt.

236
00:27:12,850 --> 00:27:13,850
Was für Codecs unterstützt werden, stelle ich hier ein.

237
00:27:14,850 --> 00:27:18,850
Es wird genau ein Codec unterstützt, und zwar H.264

238
00:27:19,850 --> 00:27:21,850
mit 90.000 Clockrate, das ist alles.

239
00:27:22,850 --> 00:27:26,800
Hier wird die WebRTC-Verbindung aufgebaut

240
00:27:27,800 --> 00:27:30,800
und hier wird die Sache, die der Browser antwortet, gesetzt.

241
00:27:31,800 --> 00:27:32,800
Ist aber alles nicht so wild,

242
00:27:33,800 --> 00:27:34,800
weil heute geht es um syntaktische Rust-Geschichte,

243
00:27:34,800 --> 00:27:36,800
weniger um die WebRTC-Sache an sich.

244
00:27:37,800 --> 00:27:39,800
Denn, was ich mir überlegt habe, ist,

245
00:27:40,800 --> 00:27:41,800
das hier ist ja kein schönes Rust hier oben.

246
00:27:42,800 --> 00:27:44,800
Also, schön ist hier vieles nicht dran,

247
00:27:45,800 --> 00:27:48,800
beispielsweise diese ganzen Calls mit GetUnwrap, ReadUnwrap.

248
00:27:49,800 --> 00:27:50,800
Das sieht schon abartig aus.

249
00:27:51,800 --> 00:27:58,080
Was willst du da absichern?

250
00:27:59,080 --> 00:28:01,080
Es macht keinen Sinn, die abzusichern, weil es...

251
00:28:02,080 --> 00:28:04,080
Es darf durchaus crashen, wenn...

252
00:28:05,080 --> 00:28:06,080
Also, wenn das hier nicht funktioniert, was soll er machen?

253
00:28:07,080 --> 00:28:08,080
Dann muss er ja crashen im Endeffekt.

254
00:28:08,080 --> 00:28:10,080
Ach so, gut. Ja doch, du hast insofern recht.

255
00:28:11,080 --> 00:28:12,080
Stimmt schon.

256
00:28:13,080 --> 00:28:15,080
Man könnte gucken, wenn es aus irgendwelchen Gründen nicht klappt,

257
00:28:16,080 --> 00:28:17,080
dass das Main-Programm nicht crasht.

258
00:28:18,080 --> 00:28:20,080
Aber ganz ehrlich, das sind solche Dinger,

259
00:28:21,080 --> 00:28:22,080
die sollten eigentlich nicht crashen.

260
00:28:23,080 --> 00:28:24,080
Also, die sollten eigentlich nicht fehlschlagen.

261
00:28:25,080 --> 00:28:26,080
Wenn sie doch fehlschlagen, ist irgendwas kaputt,

262
00:28:27,080 --> 00:28:28,080
dann soll es halt crashen.

263
00:28:29,080 --> 00:28:30,080
Ist schon okay.

264
00:28:31,080 --> 00:28:33,080
Dass hier eine hardcoded-ID drin ist, ist übrigens auch nicht so sinnvoll.

265
00:28:34,080 --> 00:28:38,930
Java ist gigalangsam, das stimmt überhaupt nicht.

266
00:28:38,930 --> 00:28:39,930
Java ist gar nicht so lahm.

267
00:28:40,930 --> 00:28:41,930
Java ist...

268
00:28:42,930 --> 00:28:43,930
Sag mal so aus...

269
00:28:44,930 --> 00:28:45,930
Historisch wurde gerne über Java geflamed.

270
00:28:46,930 --> 00:28:47,930
Und...

271
00:28:48,930 --> 00:28:49,930
Gerade über Memory-Consumption.

272
00:28:50,930 --> 00:28:52,930
Aber die reine CPU-Performance ist Java gar nicht so schlecht.

273
00:28:53,930 --> 00:28:54,930
Genauso wie C-Sharp und .NET.

274
00:28:55,930 --> 00:28:56,930
.NET ist sogar ziemlich schnell.

275
00:28:57,930 --> 00:28:58,930
Sogar einen Ticken schneller als Java, je nachdem,

276
00:28:59,930 --> 00:29:00,930
was man sich für Benchmarks anguckt.

277
00:29:01,930 --> 00:29:03,930
So, und zwar, wir haben hier ganz viele globale Variablen.

278
00:29:04,930 --> 00:29:06,930
Das ist nicht gerne gesehen in Rust.

279
00:29:06,930 --> 00:29:07,930
Mal ganz davon abgesehen,

280
00:29:08,930 --> 00:29:09,930
dass mich das nicht wirklich interessiert,

281
00:29:10,930 --> 00:29:13,930
ob das irgendwelche Rust-Experten als schön oder nicht schön empfinden.

282
00:29:14,930 --> 00:29:16,930
Das Ding ist, es geht nicht anders als globale Variablen.

283
00:29:17,930 --> 00:29:18,930
Denn, es ist ja nicht...

284
00:29:19,930 --> 00:29:20,930
Es liegt ja hier nicht in der Hand,

285
00:29:21,930 --> 00:29:23,930
von Rust das alles zu machen,

286
00:29:24,930 --> 00:29:27,930
sondern, ich call ja in den Rust-Code von außen rein.

287
00:29:28,930 --> 00:29:31,930
Das heißt, ich brauche irgendwie den State vom letzten Call

288
00:29:32,930 --> 00:29:34,930
und den kann Rust nicht tracken für mich.

289
00:29:34,930 --> 00:29:35,930
Wie soll es das machen?

290
00:29:36,930 --> 00:29:38,930
Das wird aufgerufen von C aus

291
00:29:39,930 --> 00:29:43,930
und geht dann zurück mit ein paar Sachen zu dem C-Interface zurück.

292
00:29:44,930 --> 00:29:47,930
Das heißt, wir brauchen ein paar statische Variablen.

293
00:29:48,930 --> 00:29:49,930
Was ich mir jetzt überlegt habe,

294
00:29:50,930 --> 00:29:51,930
und da bin ich mal gespannt, ob ich das hinkriege.

295
00:29:52,930 --> 00:29:54,930
Was mir hier persönlich am allerwenigsten gefällt,

296
00:29:55,930 --> 00:29:57,930
sind diese ganzen Unwrap-Orgien.

297
00:29:59,930 --> 00:30:01,930
Das sieht einfach total unreadable und eklig aus.

298
00:30:01,930 --> 00:30:02,930
Und was mir auch nicht gefällt,

299
00:30:03,930 --> 00:30:05,930
sind diese Ultra-Deep-Nested-Typen.

300
00:30:06,930 --> 00:30:07,930
Guckt euch das mal an.

301
00:30:08,930 --> 00:30:09,930
Da rast es da aus.

302
00:30:10,930 --> 00:30:13,930
Once-Log, Rw-Log, Hash-Map, Arc-Track...

303
00:30:14,930 --> 00:30:17,930
Im Prinzip will ich einfach nur einen Dictionary haben

304
00:30:18,930 --> 00:30:21,930
mit int64 als Key

305
00:30:22,930 --> 00:30:26,930
und diesem Struct hier als Value.

306
00:30:27,930 --> 00:30:28,930
Damit das funktioniert,

307
00:30:28,930 --> 00:30:31,930
musst du das in diesen ganzen Krempel reinwrappen.

308
00:30:32,930 --> 00:30:33,930
Das ist echt nicht normal.

309
00:30:34,930 --> 00:30:35,930
Deswegen habe ich mir überlegt,

310
00:30:42,460 --> 00:30:43,460
wir machen folgendes.

311
00:30:44,460 --> 00:30:47,460
Wir haben nämlich aktuell da so einen kleinen Bug drin,

312
00:30:48,460 --> 00:30:49,460
der daraus resultiert,

313
00:30:50,460 --> 00:30:51,460
dass ich gestern nicht besser darüber wusste,

314
00:30:52,460 --> 00:30:53,460
was ich machen soll.

315
00:30:54,460 --> 00:30:56,460
Und zwar jede Connection und jeder Track,

316
00:30:57,460 --> 00:30:58,460
der angelegt wird.

317
00:30:59,460 --> 00:31:00,460
Also mit Track ist in Video gemeint.

318
00:31:01,460 --> 00:31:02,460
Das Ziel ist ja im Endeffekt,

319
00:31:02,460 --> 00:31:04,460
mit FFmpeg Webcams auslesen,

320
00:31:05,460 --> 00:31:08,460
auf Serverseite RTSP Webcams auslesen

321
00:31:09,460 --> 00:31:12,460
und dann auf Serverseite das Ganze in einen Stream schreiben,

322
00:31:13,460 --> 00:31:14,460
rüber streamen an den Browser.

323
00:31:15,460 --> 00:31:16,460
Und der Browser rendert die Videos

324
00:31:17,460 --> 00:31:19,460
dann in einem Canvas oder einem Video-Element.

325
00:31:20,460 --> 00:31:22,780
Das Ding, damit das funktioniert,

326
00:31:23,780 --> 00:31:25,780
ist, es braucht jeder Track und jede Connection

327
00:31:26,780 --> 00:31:27,780
eine eindeutige ID.

328
00:31:28,780 --> 00:31:34,150
Und aktuell ist es kaputt.

329
00:31:35,150 --> 00:31:39,150
Weil jeder Track hardcoded die ID 2 bekommt.

330
00:31:40,150 --> 00:31:41,150
Das kann ja schon mal gar nicht funktionieren.

331
00:31:42,150 --> 00:31:46,150
Und jede neue Connection hardcoded die ID 1 bekommt.

332
00:31:47,150 --> 00:31:49,150
Das kann auch schon nicht richtig funktionieren.

333
00:31:50,150 --> 00:31:53,360
Also insofern,

334
00:31:54,360 --> 00:31:57,360
und diese unwraps und read und get und unwrap,

335
00:31:58,360 --> 00:31:59,360
das ist auch eklig.

336
00:32:00,360 --> 00:32:01,360
Deswegen habe ich mir überlegt,

337
00:32:02,360 --> 00:32:03,360
wir machen folgendes, wir probieren das mal zumindest.

338
00:32:04,360 --> 00:32:05,360
Wir legen heute in Rust zwei neue Typen an.

339
00:32:06,360 --> 00:32:10,360
Und zwar einmal so eine Art AppState.

340
00:32:11,360 --> 00:32:13,360
Hier so etwas wie AppState.

341
00:32:14,360 --> 00:32:17,360
Und da fassen wir diese ganzen Dinger hier drinnen zusammen.

342
00:32:18,360 --> 00:32:19,360
Gucken, wie das funktioniert.

343
00:32:20,360 --> 00:32:22,360
Und dann würde ich gerne noch ein Struct,

344
00:32:23,360 --> 00:32:27,360
so etwas wie zum Beispiel Registry bauen

345
00:32:28,360 --> 00:32:29,360
und das generic machen.

346
00:32:30,360 --> 00:32:32,360
Ich habe keine Ahnung, wie das in Rust funktioniert.

347
00:32:33,360 --> 00:32:34,360
Geht das vielleicht sogar so?

348
00:32:35,360 --> 00:32:36,360
Moment, Punkt.

349
00:32:37,360 --> 00:32:38,360
Geht das etwa so?

350
00:32:39,360 --> 00:32:40,360
Das ist die gleiche,

351
00:32:41,360 --> 00:32:42,360
das ist die Sharp-Syntax für generics.

352
00:32:44,360 --> 00:32:45,360
So.

353
00:32:46,360 --> 00:32:49,360
Und dann will ich eine generic Collection machen,

354
00:32:50,360 --> 00:32:51,360
die ich jetzt mal Registry nenne.

355
00:32:52,360 --> 00:32:53,360
Wir können sie auch einfach List nennen oder so.

356
00:32:54,360 --> 00:32:55,360
Letztendlich ist es egal, wie das Ding heißt.

357
00:32:56,360 --> 00:32:57,360
Die folgendes macht.

358
00:32:58,360 --> 00:32:59,360
Ich nenne es lieber Registry.

359
00:33:00,360 --> 00:33:01,360
Das ist deutlich sinniger in dem Fall.

360
00:33:01,360 --> 00:33:03,360
Die Tracks und Connections sammelt.

361
00:33:04,360 --> 00:33:06,360
Also dass man quasi eine Collection machen kann,

362
00:33:07,360 --> 00:33:09,360
entweder auf Tracks oder auf Per-Connections.

363
00:33:10,360 --> 00:33:13,360
Und die automatisch eine ID-Such, die frei ist

364
00:33:14,360 --> 00:33:16,360
und eine freie ID für die jeweilige Connection

365
00:33:17,360 --> 00:33:18,360
und für den jeweiligen Track vergibt.

366
00:33:19,360 --> 00:33:20,360
Gestern habe ich mir kurzzeitig überlegt,

367
00:33:21,360 --> 00:33:24,360
man könnte einfach eine JuJu-ID generieren für alles.

368
00:33:25,360 --> 00:33:29,360
Das Problem ist, dass eine JuJu-ID ein 128-Bit-Int ist.

369
00:33:30,360 --> 00:33:34,360
Und man das interop-technisch nicht gescheit hinbekommt.

370
00:33:35,360 --> 00:33:38,360
Man muss es ja über einen C-Interface quasi mit C-Sharp dann sharen.

371
00:33:39,360 --> 00:33:40,360
Und es geht, haben wir gestern gebaut.

372
00:33:41,360 --> 00:33:42,360
Aber schön ist was anderes.

373
00:33:43,360 --> 00:33:46,760
Oh ne.

374
00:33:47,760 --> 00:33:48,760
Da habe ich...

375
00:33:49,760 --> 00:33:50,760
Ich setze mich jetzt erstmal mit Rust auseinander.

376
00:33:51,760 --> 00:33:53,760
Und wenn mich Rust irgendwann so abfuckt,

377
00:33:54,760 --> 00:33:55,760
dass ich Erholung brauche,

378
00:33:56,760 --> 00:33:57,760
dann gehe ich nicht zu Java.

379
00:33:58,760 --> 00:34:02,970
Dann baue ich irgendwas in irgendeiner Webseite

380
00:34:03,970 --> 00:34:04,970
in irgendeiner Sprache, auf die ich Bock drauf habe.

381
00:34:05,970 --> 00:34:06,970
Oder wir bauen mal wieder Microcontroller,

382
00:34:07,970 --> 00:34:08,970
löten irgendwelche Sachen,

383
00:34:09,970 --> 00:34:10,970
spielen mal wieder Battlefield oder sonst was.

384
00:34:14,240 --> 00:34:16,240
Gibt es irgendwo ein FAQ mit Setup und so weiter?

385
00:34:17,240 --> 00:34:18,240
Ne.

386
00:34:19,240 --> 00:34:21,240
Aber es gibt ein Archiv, falls du alte Streams angucken willst.

387
00:34:22,240 --> 00:34:25,240
Und das Archiv ist absolut gigachat-nice gebaut hier.

388
00:34:28,900 --> 00:34:30,900
Mit AI-generated Thumbnails für die Streams.

389
00:34:31,900 --> 00:34:38,900
Ja, hier hat Whisper ein bisschen gefailt, oder?

390
00:34:41,720 --> 00:34:43,720
Whisper hat es ja prinzipiell nicht so mit Text.

391
00:34:47,250 --> 00:34:48,250
Rrrri.

392
00:35:02,210 --> 00:35:04,210
Ne, ne, ne. Kein Java.

393
00:35:05,210 --> 00:35:07,210
Ja, da wurde wahrscheinlich keins für generated.

394
00:35:10,480 --> 00:35:11,480
Ja. Ja.

395
00:35:12,480 --> 00:35:13,480
Steht auch noch aus.

396
00:35:14,480 --> 00:35:15,480
Neowim-Stream steht ja auch noch drin.

397
00:35:16,480 --> 00:35:17,480
Guck. Irgendwo, glaube ich.

398
00:35:20,560 --> 00:35:22,560
Neowim mit Plugins. Pimp mein Neowim. Ja.

399
00:35:29,860 --> 00:35:30,860
Das ist auf GitHub.

400
00:35:31,860 --> 00:35:33,860
Du kannst ja das klonen, wenn du willst.

401
00:35:34,860 --> 00:35:36,860
Okay, so. Das ist der Plan heute.

402
00:35:37,860 --> 00:35:40,860
Ich auch. Es ist nicht so, als hätte ich super Ahnung von Neowim.

403
00:35:41,860 --> 00:35:43,860
Ich habe früher halt meinen Wim auch mega aufgebohrt mit Plugins.

404
00:35:44,860 --> 00:35:45,860
Aber das war alles Wim-Skript.

405
00:35:46,860 --> 00:35:48,860
Und Neowim ist ja zum größten Teil Lua.

406
00:35:49,860 --> 00:35:51,860
Okay. Also das ist der Plan.

407
00:35:52,860 --> 00:35:53,860
So stelle ich mir das vor. Ja.

408
00:35:54,860 --> 00:35:56,860
Das heißt, wir fangen jetzt mal an.

409
00:35:57,860 --> 00:35:58,860
Mit was fangen wir jetzt einfach an?

410
00:35:59,860 --> 00:36:00,860
Kompiliert das jetzt eigentlich gerade?

411
00:36:01,860 --> 00:36:02,860
Wenn ich das auskommentiere?

412
00:36:03,860 --> 00:36:04,860
Ja. Okay. Nice.

413
00:36:04,860 --> 00:36:08,860
Also. Ich würde sagen, wir machen erstmal einen Struct Upstate.

414
00:36:09,860 --> 00:36:13,860
Okay. Und wir hauen jetzt mal diesen ganzen Krempel,

415
00:36:14,860 --> 00:36:20,500
der hier aktuell so in global Sachen hängt.

416
00:36:21,500 --> 00:36:23,500
Wir machen es mal testweise.

417
00:36:24,500 --> 00:36:25,500
Nehmen wir einfach mal die API.

418
00:36:26,500 --> 00:36:27,500
Die hauen wir hier rein.

419
00:36:28,500 --> 00:36:29,500
Static brauchen wir nicht. Nehmen wir mal API.

420
00:36:30,500 --> 00:36:31,500
Wir brauchen auch kein Oneslock mehr,

421
00:36:31,500 --> 00:36:38,580
sondern einfach nur API, oder?

422
00:36:39,580 --> 00:36:40,580
Sonst nichts, glaube ich.

423
00:36:41,580 --> 00:36:42,580
Das Ding müsste thread-safe sein.

424
00:36:43,580 --> 00:36:44,580
Das heißt im Endeffekt,

425
00:36:45,580 --> 00:36:47,580
wir brauchen jetzt einmal noch das hier für den AppState.

426
00:36:48,580 --> 00:36:49,580
AppState.

427
00:36:50,580 --> 00:36:51,580
So.

428
00:36:54,400 --> 00:36:55,400
Machen wir mal hier die API weg,

429
00:36:56,400 --> 00:36:58,400
um zu checken, ob da alles funktioniert.

430
00:36:59,400 --> 00:37:00,400
Da sollte es ein paar rote Sachen geben.

431
00:37:01,400 --> 00:37:04,400
So. Jetzt müssen wir das Ganze noch initialisieren.

432
00:37:05,400 --> 00:37:14,220
Let AppState set AppState.

433
00:37:15,220 --> 00:37:19,390
Okay. Gut.

434
00:37:20,390 --> 00:37:22,390
Was hat er hier? Use shorthand. Alles klar.

435
00:37:23,390 --> 00:37:24,390
So. Hoffen wir mal, ob das jetzt funzt.

436
00:37:25,390 --> 00:37:27,390
Nein. Funktioniert nicht, weil Zeile 95.

437
00:37:28,390 --> 00:37:29,390
Obviously. Zeile 95.

438
00:37:30,390 --> 00:37:32,390
Ach so. Ja. Das brauchen wir jetzt gar nicht mehr, oder?

439
00:37:33,390 --> 00:37:34,390
Wir brauchen jetzt AppState.

440
00:37:36,390 --> 00:37:37,390
Get

441
00:37:38,390 --> 00:37:39,390
Unwrap API.

442
00:37:41,390 --> 00:37:44,390
Nee. Das wäre jetzt auch zu einfach,

443
00:37:45,390 --> 00:37:46,390
wenn das einfach funktionieren würde, oder?

444
00:37:47,390 --> 00:37:48,390
Gag wait.

445
00:37:49,390 --> 00:37:51,390
Das wäre deutlich way too easy,

446
00:37:52,390 --> 00:37:55,390
wenn das auf first try irgendwie klappen würde.

447
00:37:56,390 --> 00:37:59,600
Was ist denn das Problem,

448
00:38:00,600 --> 00:38:01,600
was er jetzt schon wieder hat?

449
00:38:11,340 --> 00:38:12,340
Da fehlt der BorrowOperator.

450
00:38:13,340 --> 00:38:14,340
Das heißt, ich muss da einen...

451
00:38:15,340 --> 00:38:16,340
Ach. Wie?

452
00:38:16,340 --> 00:38:17,340
Okay.

453
00:38:21,250 --> 00:38:22,250
Der Chat weiß Bescheid.

454
00:38:30,320 --> 00:38:31,320
Der Chat ist wirklich schlau.

455
00:38:35,550 --> 00:38:37,550
Nee. Die sind teilweise nicht wirklich useful.

456
00:38:38,550 --> 00:38:39,550
Aber es funktioniert.

457
00:38:40,550 --> 00:38:42,550
Ich meine, findest du das useful?

458
00:38:50,310 --> 00:38:52,310
Eindeutiger Hinweis, dass man einen Unten nehmen soll.

459
00:39:02,430 --> 00:39:03,430
Oh. Okay.

460
00:39:04,430 --> 00:39:05,430
Ach ja.

461
00:39:06,430 --> 00:39:07,430
Okay. Ich habe nichts gesagt. Ihr habt recht.

462
00:39:08,430 --> 00:39:09,430
Steht ja wirklich da.

463
00:39:13,790 --> 00:39:14,790
Es steht wirklich darunter.

464
00:39:15,790 --> 00:39:17,790
Okay. Ich gebe zu, die Rust-Fehlermeldung in dem Fall war hilfreich.

465
00:39:18,790 --> 00:39:19,790
Alles klar. Gut. Gut.

466
00:39:21,790 --> 00:39:22,790
Keck G.

467
00:39:23,790 --> 00:39:24,790
Ja. Ist okay.

468
00:39:25,790 --> 00:39:27,790
Ich gebe zu, die war wirklich hilfreich.

469
00:39:33,700 --> 00:39:40,860
Also, das hat schon mal funktioniert.

470
00:39:41,860 --> 00:39:42,860
Das in AppState zu moven.

471
00:39:43,860 --> 00:39:44,860
So. Jetzt packen wir die Runtime.

472
00:39:46,860 --> 00:39:48,860
Kannst du nochmal das Backinserter-Meme machen?

473
00:39:48,860 --> 00:39:49,860
Nee.

474
00:39:50,860 --> 00:39:51,860
Das Backinserter-Meme?

475
00:39:52,860 --> 00:39:54,860
Du meinst das auf Stackoverflow, das C++-Zeug?

476
00:39:55,860 --> 00:39:57,860
Ja. Ich habe jetzt keinen Bock. Das kann ich in jedem Stream zeigen.

477
00:39:58,860 --> 00:39:59,860
Welche Idee ist das eigentlich?

478
00:40:04,090 --> 00:40:05,090
Das ist Rust-Rover.

479
00:40:06,090 --> 00:40:09,090
Das ist die Rust-Idee von JetBrains für Rust.

480
00:40:10,090 --> 00:40:12,090
Die hat aber noch so ein paar etwas...

481
00:40:13,090 --> 00:40:14,090
Ja.

482
00:40:16,090 --> 00:40:18,090
Vielleicht etwas unrunde...

483
00:40:19,090 --> 00:40:20,090
Ist auch etwas unrunde.

484
00:40:20,090 --> 00:40:21,090
Ist auch etwas unrund an manchen Stellen.

485
00:40:22,090 --> 00:40:23,090
Ja.

486
00:40:24,090 --> 00:40:32,610
So. Die API haben wir jetzt da reingepackt.

487
00:40:33,610 --> 00:40:35,610
Jetzt packen wir noch die Runtime da rein.

488
00:40:36,610 --> 00:40:37,610
Wobei, Leute. Ich habe eine Idee.

489
00:40:38,610 --> 00:40:39,610
Passt mal auf. Six-Head-Time.

490
00:40:40,610 --> 00:40:43,610
Wenn das klappt in Rust, dann habe ich Rust verstanden.

491
00:40:44,610 --> 00:40:45,610
Ja. Da dauert es noch ein bisschen hin.

492
00:40:46,610 --> 00:40:47,610
Gucke mal. Guck dir mal. Guck dir mal.

493
00:40:48,610 --> 00:40:49,610
Ich sage doch jedes Mal hier,

494
00:40:50,610 --> 00:40:53,610
wenn ich diese Async-Runtime starte,

495
00:40:54,610 --> 00:40:55,610
ich sage jedes Mal,

496
00:40:55,610 --> 00:40:57,610
Runtime.get.unwrap.plogon.

497
00:40:58,610 --> 00:41:00,610
Ich habe eine Idee. Ich habe eine Idee.

498
00:41:01,610 --> 00:41:03,610
Und zwar. Und zwar. Passt mal auf.

499
00:41:04,610 --> 00:41:08,610
Wir gucken uns die Funktionsdefinition von Plogon an.

500
00:41:09,610 --> 00:41:10,610
Kopieren die uns.

501
00:41:11,610 --> 00:41:12,610
Und jetzt.

502
00:41:15,880 --> 00:41:18,880
Und jetzt geben wir unserem API-State eine Funktion,

503
00:41:19,880 --> 00:41:20,880
die Plogon heißt.

504
00:41:23,770 --> 00:41:24,770
Das funktioniert. Ach, Moment. Das ist ja Rust.

505
00:41:25,770 --> 00:41:26,770
Moment. Das ist ja Rust.

506
00:41:27,770 --> 00:41:28,770
Das ging doch irgendwie so, oder?

507
00:41:32,040 --> 00:41:33,040
Moment.

508
00:41:34,040 --> 00:41:35,040
Ich will kein Makro, ne.

509
00:41:38,040 --> 00:41:39,040
So. Das kriegt jetzt eine Funktion.

510
00:41:40,040 --> 00:41:41,040
Plogs on.

511
00:41:42,040 --> 00:41:45,040
Dann braucht das hier API-State.

512
00:41:46,040 --> 00:41:48,040
Dann braucht das hier noch Runtime,

513
00:41:49,040 --> 00:41:50,040
als, ja, für Klassenvariable.

514
00:41:51,040 --> 00:41:52,040
Wie auch immer das heißt in Rust.

515
00:41:54,040 --> 00:41:55,040
Als Instanzvariable.

516
00:41:56,040 --> 00:41:57,040
Kein Schimmer, wie man das korrekt in Rust nennt.

517
00:41:58,040 --> 00:41:59,040
Trade-Variable. Struct-Variable.

518
00:41:59,040 --> 00:42:01,040
Struct-Failed. Weiß nicht.

519
00:42:02,040 --> 00:42:03,040
So.

520
00:42:05,040 --> 00:42:06,040
Und.

521
00:42:07,040 --> 00:42:08,040
Jetzt sagen wir.

522
00:42:09,040 --> 00:42:10,040
Moment. Self. Passt doch.

523
00:42:11,040 --> 00:42:12,040
Jetzt sagen wir. Self.

524
00:42:13,040 --> 00:42:14,040
Runtime.

525
00:42:15,040 --> 00:42:16,040
Und jetzt kopieren wir das, was ich hier immer mache.

526
00:42:17,040 --> 00:42:18,040
Plogon.

527
00:42:19,040 --> 00:42:20,040
Wobei, ne. Muss ich ja gar nichts machen.

528
00:42:22,990 --> 00:42:23,990
Plogon.

529
00:42:26,560 --> 00:42:28,560
Und da schieben wir das jetzt rein.

530
00:42:29,560 --> 00:42:30,560
Und hoffen, dass es noch kompiliert.

531
00:42:30,560 --> 00:42:31,560
Ne. Shit.

532
00:42:32,560 --> 00:42:34,560
Ah ne. Moment. Missing Runtime.

533
00:42:35,560 --> 00:42:36,560
Hier. Missing Runtime.

534
00:42:37,560 --> 00:42:38,560
Runtime.

535
00:42:40,870 --> 00:42:41,870
So.

536
00:42:42,870 --> 00:42:56,170
Ach so. Ich muss. Hä?

537
00:42:58,170 --> 00:42:59,170
Wait a minute.

538
00:43:00,170 --> 00:43:01,170
Ah.

539
00:43:02,170 --> 00:43:03,170
Moment.

540
00:43:06,500 --> 00:43:07,500
Das beißt sich jetzt ein bisschen in den Schwanz.

541
00:43:08,500 --> 00:43:09,500
Gutschi.

542
00:43:10,500 --> 00:43:11,500
Was?

543
00:43:11,500 --> 00:43:14,010
Äh.

544
00:43:15,010 --> 00:43:17,010
Die Runtime setze ich hier oben.

545
00:43:18,010 --> 00:43:21,980
Und.

546
00:43:22,980 --> 00:43:26,980
Hier unten lege ich erst den App-State an.

547
00:43:27,980 --> 00:43:37,270
Ich mein.

548
00:43:40,290 --> 00:43:41,290
Das muss aber nicht so sein.

549
00:43:42,290 --> 00:43:47,600
Kann ich nicht einfach den ganzen Crample hier raus kopieren?

550
00:43:51,830 --> 00:43:52,830
Und da rein.

551
00:43:56,870 --> 00:44:04,020
Und dann. Ja. Okay.

552
00:44:05,020 --> 00:44:08,040
Äh. Und dann brauche ich das hier.

553
00:44:09,040 --> 00:44:10,040
Dann brauche ich das doch eigentlich gar nicht.

554
00:44:11,040 --> 00:44:13,040
Ach doch. Ach. Moment. Moment. Moment. Moment.

555
00:44:14,040 --> 00:44:16,040
Doch. Doch. Das muss in der Runtime gecallt werden.

556
00:44:17,040 --> 00:44:19,040
Sonst hab ich wieder so diesen komischen Bug. Ne. Ne. Ne. Ne. Ne.

557
00:44:20,040 --> 00:44:23,500
Nopos.

558
00:44:31,190 --> 00:44:34,190
Das Rust-Buch. Ja. Soll ich jetzt das Rust-Buch im Stream lesen oder wie?

559
00:44:35,190 --> 00:44:41,470
Aber was wir machen können ist.

560
00:44:42,470 --> 00:44:45,550
Kann man.

561
00:44:49,080 --> 00:44:50,080
Okay. Jetzt bin ich mal gespannt.

562
00:44:51,080 --> 00:44:54,080
Kann ich das hier einfach die Runtime als Parameter übergeben?

563
00:44:56,080 --> 00:44:57,080
Runtime.

564
00:44:57,080 --> 00:44:58,080
Runtime.

565
00:44:59,080 --> 00:45:00,080
Alter. Ich.

566
00:45:01,080 --> 00:45:02,080
Mir pegelt das zu schreiben.

567
00:45:03,080 --> 00:45:04,080
Und jetzt. Runtime.

568
00:45:05,080 --> 00:45:06,080
Da reinschreiben.

569
00:45:07,080 --> 00:45:10,030
Ne. Weil.

570
00:45:11,030 --> 00:45:12,030
Achso. Äh. Is missing.

571
00:45:14,980 --> 00:45:17,940
Runtime.

572
00:45:18,940 --> 00:45:19,940
Used after move.

573
00:45:20,940 --> 00:45:22,940
Okay. Dann muss. Dann. Dann muss das hier.

574
00:45:26,270 --> 00:45:28,270
MonkaS. Alter. Ich hab mir das so einfach vorgestellt.

575
00:45:29,270 --> 00:45:32,800
Ist es aber nicht.

576
00:45:37,420 --> 00:45:39,420
Ich. Okay. Wir lassen das. Wir lassen das sein. Ja.

577
00:45:39,420 --> 00:45:41,420
Wir. Wir lassen. Wir. Wir lassen das sein.

578
00:45:42,420 --> 00:45:49,140
Wir lassen das. Wir lassen das sein.

579
00:45:50,140 --> 00:45:54,140
Weil. Ich. Ich will ja Runtime get. Ich. Ich will das ja wegschmeißen.

580
00:45:55,140 --> 00:45:56,140
Ich will das ja. Ich will das ja gar nicht mehr haben.

581
00:46:01,020 --> 00:46:03,020
Ähm. Okay. Wir. Wir lassen das mal kurz hier jetzt weg.

582
00:46:04,020 --> 00:46:06,020
Das ist eigentlich gar nicht das. Vielleicht fällt mir das später noch was zu ein.

583
00:46:07,020 --> 00:46:12,340
Das. Das darf jetzt so bleiben.

584
00:46:13,340 --> 00:46:15,340
Und das. Das. Das hier fliegt jetzt erstmal wieder weg. Okay.

585
00:46:17,340 --> 00:46:18,340
Und das. Das hier auch.

586
00:46:19,340 --> 00:46:21,340
Da. Da bin ich grad noch nicht high IQ Rust-mäßig genug für.

587
00:46:22,340 --> 00:46:31,470
Das muss ich mal schauen, wie man das später noch macht.

588
00:46:33,470 --> 00:46:35,470
Weil das beißt sich. Ich kann nicht die Runtime hier anlegen.

589
00:46:36,470 --> 00:46:37,470
Das ist. Das ist halt echt blöd.

590
00:46:42,470 --> 00:46:43,470
Egal. Das waren wir jetzt nicht.

591
00:46:44,470 --> 00:46:46,470
Vielleicht. Vielleicht. Vielleicht fällt mir das später noch was zu ein.

592
00:46:47,470 --> 00:46:49,470
Wir. Wir. Also was mich viel mehr interessiert ist.

593
00:46:50,470 --> 00:46:52,470
Wie man ein Custom. Custom Type implementiert in Rust.

594
00:46:53,470 --> 00:46:56,470
Eine Custom Collection wohlgemerkt in Rust implementiert.

595
00:46:57,470 --> 00:46:59,470
Eine Generic Custom Collection in Rust.

596
00:46:59,470 --> 00:47:01,470
Ich würde mal vorschlagen.

597
00:47:02,470 --> 00:47:04,470
Wir kopieren das Ganze in ein eigenes.

598
00:47:05,470 --> 00:47:07,470
In ein eigenes File.

599
00:47:08,470 --> 00:47:12,230
Kann man das nicht kopieren?

600
00:47:13,230 --> 00:47:15,230
Refactor. Move.

601
00:47:16,230 --> 00:47:18,230
To ähm.

602
00:47:19,230 --> 00:47:23,700
Registry.rs.

603
00:47:24,700 --> 00:47:28,840
So. Jaja. Add.

604
00:47:29,840 --> 00:47:31,840
Jetzt bin ich mal gespannt. Jetzt. Jetzt bin ich mal gespannt.

605
00:47:32,840 --> 00:47:34,840
Also. Warte nicht. Runtime. Moment.

606
00:47:35,840 --> 00:47:37,840
Äh.

607
00:47:38,840 --> 00:47:40,840
Also. Was ich haben will.

608
00:47:41,840 --> 00:47:43,840
Ich will ein Generic. Ich will ein Generic Type.

609
00:47:44,840 --> 00:47:46,840
In Rust. Ich habe keine Ahnung wie man Generic.

610
00:47:47,840 --> 00:47:49,840
Rust. Rust. Generic Type. Wie geht das?

611
00:47:50,840 --> 00:47:52,840
Generic Data Types.

612
00:47:55,470 --> 00:48:00,000
Strukt. Äh.

613
00:48:01,000 --> 00:48:03,000
Ja. T.

614
00:48:04,000 --> 00:48:06,000
Also im Prinzip ein bisschen wie in .NET.

615
00:48:07,000 --> 00:48:09,000
Registry. T. Okay. So.

616
00:48:10,000 --> 00:48:12,000
Dann machen wir hier mal eine Variable drin.

617
00:48:13,000 --> 00:48:15,000
Die nennen wir einfach Storage. Oder Store.

618
00:48:16,000 --> 00:48:18,000
Storage. Keine Ahnung. Store. Wir nennen es Store.

619
00:48:19,000 --> 00:48:21,000
Und.

620
00:48:22,000 --> 00:48:24,000
Das wird eine Hash Map.

621
00:48:25,000 --> 00:48:27,000
Das wird eine Hash Map.

622
00:48:28,000 --> 00:48:30,000
Vom Typ. Ähm. Tja. Wie viele IDs brauche ich?

623
00:48:31,000 --> 00:48:33,000
Wahrscheinlich reicht ein U32 Log da aus.

624
00:48:34,000 --> 00:48:36,000
U32 Max.

625
00:48:37,000 --> 00:48:39,000
Nicht Z32. Was auch immer ich da gerade gegoogelt habe.

626
00:48:40,000 --> 00:48:42,000
Z32 Max ist. Ja. Ja.

627
00:48:43,000 --> 00:48:45,000
Ich glaube das reicht.

628
00:48:46,000 --> 00:48:48,000
Ich glaube ich werde nie so viele Connections gleichzeitig haben.

629
00:48:49,000 --> 00:48:51,000
Dass das irgendwie Probleme macht.

630
00:48:52,000 --> 00:48:54,000
So. Also.

631
00:48:55,000 --> 00:48:58,440
Wir brauchen eine extra ID pro Connection.

632
00:48:59,440 --> 00:49:01,440
Wenn das Compile. Das wird auf jeden Fall nicht Compile.

633
00:49:02,440 --> 00:49:04,440
So. Ähm. Und dann.

634
00:49:05,440 --> 00:49:07,440
Ein Value auf Type T. Okay.

635
00:49:08,440 --> 00:49:10,440
So weit sollte es noch Compilieren. Da haben wir noch nichts gemacht.

636
00:49:11,440 --> 00:49:13,440
So. Aber. Aber generic das ganze.

637
00:49:14,440 --> 00:49:16,440
So. Und jetzt.

638
00:49:17,440 --> 00:49:19,440
Kann das mal machen. Was ich will.

639
00:49:20,440 --> 00:49:22,440
Registry of Type T.

640
00:49:23,440 --> 00:49:25,440
Moment. Jetzt geht das nicht. Warum?

641
00:49:26,440 --> 00:49:28,440
Unresolved Reference.

642
00:49:34,980 --> 00:49:36,980
Ach. Hier muss T vorne noch hin.

643
00:49:37,980 --> 00:49:39,980
Implement. Okay.

644
00:49:40,980 --> 00:49:42,980
Implement T. Implement Type T.

645
00:49:43,980 --> 00:49:45,980
Registry of Type T. So. Also.

646
00:49:46,980 --> 00:49:48,980
Connection.

647
00:49:49,980 --> 00:49:51,980
Muss man da Public eigentlich da vorschreiben?

648
00:49:52,980 --> 00:49:54,980
Ja ne. Ich muss da Pub da vorschreiben.

649
00:49:55,980 --> 00:49:57,980
Damit das exportiert wird nachher.

650
00:49:58,980 --> 00:50:00,980
Dass ich das benutzen kann. Glaube ich.

651
00:50:01,980 --> 00:50:03,980
Oder muss ich. Muss ich nur hier.

652
00:50:04,980 --> 00:50:06,980
Pub da vorschreiben.

653
00:50:07,980 --> 00:50:09,980
Also nicht genau. So. Fn.

654
00:50:10,980 --> 00:50:12,980
Also was brauchen wir in so einer Collection?

655
00:50:13,980 --> 00:50:15,980
Wir brauchen einmal New.

656
00:50:24,820 --> 00:50:26,820
So. Wir machen das mal so ein bisschen wie in Go.

657
00:50:27,820 --> 00:50:29,820
Also. Es. Boah. Ich habe keine Ahnung wie das geht.

658
00:50:30,820 --> 00:50:32,820
Rust. New. Constructor.

659
00:50:36,540 --> 00:50:38,540
Ja. Jawohl. Genau das will ich haben.

660
00:50:39,540 --> 00:50:41,540
Excellent. Copy. Paste.

661
00:50:42,540 --> 00:50:44,540
So. Wir wollen kein Value. Wir returnen Self. Okay.

662
00:50:45,540 --> 00:50:47,540
Und Self ist immer. Okay. Store.

663
00:50:48,540 --> 00:50:50,540
Ist eine Hash Map.

664
00:50:51,540 --> 00:50:53,540
Ein neues Dictionary im Endeffekt.

665
00:50:54,540 --> 00:50:56,540
Okay. Funs. Nice. Was hat er für Schmerzen?

666
00:50:57,540 --> 00:50:59,540
Function is never used.

667
00:51:00,540 --> 00:51:02,540
Kompiliert. Alles gut.

668
00:51:03,540 --> 00:51:05,540
Das heißt wir können jetzt das ganze neu anlegen.

669
00:51:06,540 --> 00:51:08,540
Übrigens um das zu testen.

670
00:51:09,540 --> 00:51:11,540
Machen wir hier einfach mal eine Funktion.

671
00:51:12,540 --> 00:51:14,540
Und rufen das auf. Wir tun einfach mal so.

672
00:51:17,490 --> 00:51:19,490
Registry new. Achso. Registry of type.

673
00:51:20,490 --> 00:51:22,490
Ah. Int. Oder so.

674
00:51:28,640 --> 00:51:30,640
Ähm.

675
00:51:31,640 --> 00:51:33,640
Wie schreibt man das jetzt?

676
00:51:34,640 --> 00:51:52,290
In. Muss man das hier vorne

677
00:51:52,290 --> 00:51:55,980
irgendwie schreiben?

678
00:51:55,980 --> 00:51:57,980
Type annotation needed.

679
00:51:57,980 --> 00:51:59,980
Ah ja.

680
00:51:59,980 --> 00:52:01,980
Okay. Das muss man hier machen.

681
00:52:01,980 --> 00:52:03,980
Das ist auch ein bisschen gewöhnungsbedürftig.

682
00:52:04,980 --> 00:52:06,980
Off. Ja. Hier.

683
00:52:06,980 --> 00:52:08,980
U32.

684
00:52:08,980 --> 00:52:10,980
Oder machen wir local static track

685
00:52:11,980 --> 00:52:13,980
Sample. So. Perfekt.

686
00:52:13,980 --> 00:52:15,980
Kompiliert noch. Kompiliert noch.

687
00:52:15,980 --> 00:52:17,980
So.

688
00:52:17,980 --> 00:52:19,980
Also.

689
00:52:19,980 --> 00:52:21,980
Was braucht man für eine Collection?

690
00:52:21,980 --> 00:52:27,790
Wir brauchen im Prinzip

691
00:52:27,790 --> 00:52:29,790
ähm. Wir brauchen im Prinzip

692
00:52:29,790 --> 00:52:31,790
drei Methoden. Vier. Vier Methoden.

693
00:52:31,790 --> 00:52:33,790
Wir brauchen add Elemente,

694
00:52:33,790 --> 00:52:35,790
get Elemente,

695
00:52:35,790 --> 00:52:37,790
delete Elemente und

696
00:52:37,790 --> 00:52:39,790
loop

697
00:52:39,790 --> 00:52:41,790
oder sowas. Ja.

698
00:52:41,790 --> 00:52:43,790
Alles klar.

699
00:52:43,790 --> 00:52:45,790
Also. Pop.

700
00:52:45,790 --> 00:52:47,790
Fangen wir mal an. Pop.

701
00:52:47,790 --> 00:52:49,790
Fn. Machen wir mal add.

702
00:52:49,790 --> 00:52:51,790
Add dürfte ja noch relativ easy sein.

703
00:52:51,790 --> 00:52:57,020
Und jetzt. Ne Moment.

704
00:52:57,020 --> 00:52:59,020
Wo kommt jetzt hier der

705
00:52:59,020 --> 00:53:01,020
der Type hin?

706
00:53:01,020 --> 00:53:04,720
Also bei .net kommt er

707
00:53:04,720 --> 00:53:06,720
dahin glaube ich. Ja. Okay. Kommt den Rust

708
00:53:06,720 --> 00:53:12,660
auch dahin. So. Add.

709
00:53:12,660 --> 00:53:14,660
So. Und dann kriegen wir als Parameter

710
00:53:14,660 --> 00:53:16,660
ein

711
00:53:16,660 --> 00:53:18,660
ein Element.

712
00:53:18,660 --> 00:53:23,630
Oh fuck. Wie war man das jetzt?

713
00:53:23,630 --> 00:53:33,280
Ähm.

714
00:53:33,280 --> 00:53:35,280
Also wir kriegen Element of T im Endeffekt.

715
00:53:35,280 --> 00:53:37,280
So.

716
00:53:37,280 --> 00:53:39,280
Was hat er hier für Schmerzen?

717
00:53:39,280 --> 00:53:42,720
T is already used.

718
00:53:42,720 --> 00:53:44,720
Hä? Ach brauche ich das

719
00:53:44,720 --> 00:53:46,720
hier gar nicht mehr?

720
00:53:46,720 --> 00:53:48,720
Ah. Ich brauche das gar nicht mehr.

721
00:53:48,720 --> 00:53:50,720
So. Und dann brauchen wir aber noch

722
00:53:50,720 --> 00:53:52,720
irgendwie und self.

723
00:53:52,720 --> 00:53:54,720
Das ist übrigens das gleiche wie

724
00:53:54,720 --> 00:53:56,720
this in C Sharp oder self in Python

725
00:53:56,720 --> 00:53:58,720
oder me glaube ich

726
00:53:58,720 --> 00:54:00,720
in Lua oder sowas.

727
00:54:00,720 --> 00:54:02,720
So.

728
00:54:02,720 --> 00:54:04,720
Das heißt jetzt sagen wir self

729
00:54:04,720 --> 00:54:06,720
store

730
00:54:06,720 --> 00:54:08,720
insert

731
00:54:08,720 --> 00:54:10,720
Das findest du doch so im Leben nicht.

732
00:54:10,720 --> 00:54:12,720
Jetzt brauchen wir. Achtung Moment. Eine ID

733
00:54:12,720 --> 00:54:14,720
brauchen wir noch. Eine ID die

734
00:54:14,720 --> 00:54:16,720
muss ich generieren.

735
00:54:16,720 --> 00:54:18,720
Let ID gleich 1. Die generiere ich.

736
00:54:18,720 --> 00:54:20,720
ID und dann fügen

737
00:54:20,720 --> 00:54:22,720
wir das Element ein.

738
00:54:22,720 --> 00:54:24,720
Das geht natürlich nicht.

739
00:54:24,720 --> 00:54:28,220
Weil das nicht mutt ist.

740
00:54:28,220 --> 00:54:30,220
Ich glaube in Lua heißt es me.

741
00:54:30,220 --> 00:54:42,300
Leute. Das kann

742
00:54:42,300 --> 00:54:44,300
so nicht funktionieren.

743
00:54:44,300 --> 00:54:46,300
Das ist verkehrt was ich mache.

744
00:54:46,300 --> 00:54:48,300
Also okay. Das würde funktionieren

745
00:54:48,300 --> 00:54:50,300
im Chat. Das würde funktionieren

746
00:54:50,300 --> 00:54:52,300
aber spätestens

747
00:54:52,300 --> 00:54:59,840
wie will Rust das handeln

748
00:54:59,840 --> 00:55:01,840
wenn ich das von verschiedenen Threads

749
00:55:01,840 --> 00:55:06,240
aufrufe?

750
00:55:06,240 --> 00:55:08,240
Moment. Das testen wir jetzt mal.

751
00:55:08,240 --> 00:55:12,640
Ja.

752
00:55:12,640 --> 00:55:14,640
Weil ich glaube schon dass man das hier locken muss.

753
00:55:14,640 --> 00:55:16,640
HashMap ist ja sicherlich nicht

754
00:55:16,640 --> 00:55:18,640
thread safe. Probieren wir das mal.

755
00:55:18,640 --> 00:55:20,640
Jetzt irgendwie

756
00:55:20,640 --> 00:55:22,640
1 oder so.

757
00:55:22,640 --> 00:55:24,640
Moment. Let mutt

758
00:55:24,640 --> 00:55:32,300
R mutt. Ja gut.

759
00:55:32,300 --> 00:55:34,300
Hier weiß er ja

760
00:55:34,300 --> 00:55:36,300
dass es nicht multithreaded ist, weil das in der gleichen

761
00:55:36,300 --> 00:55:39,870
Funktion ist.

762
00:55:39,870 --> 00:55:43,820
Der wird mich das

763
00:55:43,820 --> 00:55:45,820
schlicht und ergreifend nicht anlegen lassen.

764
00:55:45,820 --> 00:55:47,820
Vermute ich einfach mal.

765
00:55:47,820 --> 00:55:49,820
Ich glaube wir brauchen

766
00:55:49,820 --> 00:55:51,820
da einen Lock drum.

767
00:55:51,820 --> 00:55:53,820
Ich glaube damit ersparen wir uns schon

768
00:55:53,820 --> 00:55:55,820
einige Probleme.

769
00:55:55,820 --> 00:55:57,820
Wir brauchen da

770
00:55:57,820 --> 00:55:59,820
einen Lock drum. Lassen wir das mal

771
00:55:59,820 --> 00:56:01,820
so. Also Ziel muss sein dass

772
00:56:01,820 --> 00:56:03,820
die Registry selbst nicht mutable ist.

773
00:56:03,820 --> 00:56:05,820
Aber er hat trotzdem funktioniert.

774
00:56:05,820 --> 00:56:07,820
So. Heißt im Endeffekt

775
00:56:07,820 --> 00:56:09,820
wir brauchen hier wahrscheinlich ein

776
00:56:09,820 --> 00:56:11,820
RwLock. Ne oder wie ist das Ding

777
00:56:11,820 --> 00:56:13,820
was wir hier hatten? Doch RwLock.

778
00:56:13,820 --> 00:56:15,820
RwLock

779
00:56:15,820 --> 00:56:23,490
HashMap.

780
00:56:23,490 --> 00:56:25,490
Und jetzt ist es RwLock

781
00:56:25,490 --> 00:56:33,020
new. Du könntest

782
00:56:33,020 --> 00:56:35,020
auch nur self machen und dann versuchen mit get

783
00:56:35,020 --> 00:56:37,020
mutt die Referenz

784
00:56:37,020 --> 00:56:39,020
zu holen. Was?

785
00:56:39,020 --> 00:56:41,020
Wie jetzt?

786
00:56:41,020 --> 00:56:43,020
Das kann aber doch auch multithreaded nicht

787
00:56:43,020 --> 00:56:48,380
funktionieren. Was soll ich

788
00:56:48,380 --> 00:56:50,380
machen? Add? Also quasi

789
00:56:50,380 --> 00:56:52,380
das muss

790
00:56:52,380 --> 00:56:54,380
übrigens weg hier.

791
00:56:54,380 --> 00:56:56,380
Self.

792
00:56:56,380 --> 00:56:58,380
Get.

793
00:56:58,380 --> 00:57:00,380
Okay was ist das

794
00:57:00,380 --> 00:57:02,380
für schwarze Magie?

795
00:57:02,380 --> 00:57:04,380
Returns a mutable

796
00:57:04,380 --> 00:57:06,380
reference to the value. The key may be

797
00:57:06,380 --> 00:57:08,380
any borrowed form of

798
00:57:08,380 --> 00:57:10,380
the map key partitionable.

799
00:57:10,380 --> 00:57:12,380
Wie soll das funktionieren?

800
00:57:12,380 --> 00:57:15,700
Get mutt.

801
00:57:15,700 --> 00:57:21,820
Geht auch nicht.

802
00:57:21,820 --> 00:57:23,820
Ach Moment.

803
00:57:23,820 --> 00:57:25,820
Das ist

804
00:57:25,820 --> 00:57:30,480
das ist

805
00:57:30,480 --> 00:57:32,480
jetzt aus

806
00:57:32,480 --> 00:57:34,480
der HashMap raus.

807
00:57:34,480 --> 00:57:38,240
Das ist was anderes.

808
00:57:38,240 --> 00:57:40,240
Ne ne das

809
00:57:40,240 --> 00:57:44,510
ich check es auch nicht.

810
00:57:44,510 --> 00:57:46,510
Ne ne das gibt es überhaupt nicht.

811
00:57:46,510 --> 00:57:50,020
Try?

812
00:57:50,020 --> 00:57:52,020
Ne das muss in den Lock.

813
00:57:52,020 --> 00:57:54,020
Das muss in den Lock rein sonst funzt das nicht.

814
00:57:54,020 --> 00:57:56,020
Wir hatten es doch eben

815
00:57:56,020 --> 00:57:58,020
gerade hier schon.

816
00:57:58,020 --> 00:58:00,020
Lock.

817
00:58:00,020 --> 00:58:02,020
LWLock. Also

818
00:58:02,020 --> 00:58:04,020
Self.

819
00:58:04,020 --> 00:58:06,020
Store.

820
00:58:06,020 --> 00:58:08,020
Store ist jetzt allerdings nicht mehr

821
00:58:08,020 --> 00:58:10,020
direkt eine HashMap sondern

822
00:58:10,020 --> 00:58:12,020
ein ThreadSaveLock.

823
00:58:12,020 --> 00:58:14,020
Das holen wir jetzt.

824
00:58:14,020 --> 00:58:16,020
Write. Die Referenz raus.

825
00:58:16,020 --> 00:58:22,460
Unwrap. Okay.

826
00:58:22,460 --> 00:58:24,460
Und jetzt sagen wir MapInsert

827
00:58:24,460 --> 00:58:26,460
ID

828
00:58:26,460 --> 00:58:28,460
und Element E. So und das funzt

829
00:58:28,460 --> 00:58:30,460
jetzt wahrscheinlich. Ja. Ach shit.

830
00:58:30,460 --> 00:58:32,460
Was ist das? CannotBorrowMutable.

831
00:58:32,460 --> 00:58:34,460
Make mutable. Ja. Sehr schön.

832
00:58:34,460 --> 00:58:36,460
Fuck.

833
00:58:36,460 --> 00:58:38,460
CannotBorrow

834
00:58:38,460 --> 00:58:40,460
as mutable. Achso.

835
00:58:40,460 --> 00:58:42,460
Weil dann noch. Das brauchen wir doch jetzt gar nicht mehr.

836
00:58:42,460 --> 00:58:44,460
Oder? Ah. Nice. Funzt.

837
00:58:44,460 --> 00:58:46,460
Sehr schön. Also.

838
00:58:46,460 --> 00:58:48,460
Jetzt müssen wir die Registry selbst

839
00:58:48,460 --> 00:58:50,460
nicht mutable machen. Können aber

840
00:58:50,460 --> 00:58:52,460
trotzdem Sachen einfügen.

841
00:58:52,460 --> 00:58:56,480
Boah. Meine Güte.

842
00:58:56,480 --> 00:59:01,520
Der fliegt jetzt auf die Schnauze

843
00:59:01,520 --> 00:59:03,520
wenn es von einem anderen gelockt ist.

844
00:59:03,520 --> 00:59:05,520
Ich hab ehrlich gesagt keine Ahnung wie sich

845
00:59:05,520 --> 00:59:07,520
wie sich das verhält.

846
00:59:07,520 --> 00:59:11,600
Ob das einfach nur

847
00:59:11,600 --> 00:59:13,600
hängt an der Stelle.

848
00:59:13,600 --> 00:59:15,600
Oder ob

849
00:59:15,600 --> 00:59:17,600
das. Oh.

850
00:59:17,600 --> 00:59:19,600
Ne.

851
00:59:19,600 --> 00:59:21,600
Locks

852
00:59:21,600 --> 00:59:23,600
das LWLock with exclusive

853
00:59:23,600 --> 00:59:25,600
write access. Blocking the current thread

854
00:59:25,600 --> 00:59:27,600
until it can be acquired. Ne.

855
00:59:27,600 --> 00:59:29,600
Ne. Ne. Ne. Hier. Blocking the current

856
00:59:29,600 --> 00:59:31,600
thread until it can be

857
00:59:31,600 --> 00:59:37,020
acquired. This function

858
00:59:37,020 --> 00:59:39,020
will not return while other writers

859
00:59:39,020 --> 00:59:41,020
or other readers currently have access to the

860
00:59:41,020 --> 00:59:43,020
lock.

861
00:59:43,020 --> 00:59:45,020
Okay. Das hängt einfach an der Stelle.

862
00:59:45,020 --> 00:59:47,020
Das ist aber auch okay, dass das hängt.

863
00:59:47,020 --> 00:59:49,020
Weil wir wollen ja

864
00:59:49,020 --> 00:59:51,020
die einzige mutable reference haben,

865
00:59:51,020 --> 00:59:53,020
dass wir was einfügen können.

866
00:59:53,020 --> 00:59:55,020
Rast5head.

867
00:59:55,020 --> 00:59:57,020
Ja. So. Also. Jetzt haben wir

868
00:59:57,020 --> 00:59:59,020
unsere Add-Methode. Das war erstaunlich

869
00:59:59,020 --> 01:00:01,020
einfach. Das war erstaunlich

870
01:00:01,020 --> 01:00:03,020
erstaunlich einfach bis jetzt.

871
01:00:03,020 --> 01:00:05,020
So.

872
01:00:05,020 --> 01:00:07,020
Als nächstes brauchen wir

873
01:00:07,020 --> 01:00:09,020
ein Get. Muss ich hier überhaupt

874
01:00:09,020 --> 01:00:11,020
public davor schreiben?

875
01:00:11,020 --> 01:00:13,020
Pub. Fn.

876
01:00:13,020 --> 01:00:15,020
Get.

877
01:00:15,020 --> 01:00:17,020
Und self.

878
01:00:17,020 --> 01:00:20,590
Jetzt brauch ich ne ID.

879
01:00:20,590 --> 01:00:27,040
Jetzt brauch ich ne ID.

880
01:00:27,040 --> 01:00:31,890
Moment. Wait a minute.

881
01:00:31,890 --> 01:00:33,890
Wait a minute. Ich hab doch die ID gar nicht.

882
01:00:33,890 --> 01:00:35,890
Moment. Hier muss die

883
01:00:35,890 --> 01:00:37,890
ToDo

884
01:00:37,890 --> 01:00:39,890
generate ID.

885
01:00:39,890 --> 01:00:41,890
Das funktioniert nicht so wie gedacht

886
01:00:41,890 --> 01:00:43,890
gerade.

887
01:00:43,890 --> 01:00:47,200
Wobei. Muss ich

888
01:00:47,200 --> 01:00:49,200
jemals überhaupt einzelne Elemente

889
01:00:49,200 --> 01:00:51,200
daraus getten? Ja klar.

890
01:00:51,200 --> 01:00:53,200
Für die Connections.

891
01:00:53,200 --> 01:00:55,200
Das heißt, mein Add muss

892
01:00:55,200 --> 01:00:57,200
eigentlich die ID returnen,

893
01:00:57,200 --> 01:00:59,200
dass das funktioniert.

894
01:00:59,200 --> 01:01:01,200
Return ID.

895
01:01:01,200 --> 01:01:06,050
So.

896
01:01:06,050 --> 01:01:08,050
Jetzt weiß ich die ID.

897
01:01:08,050 --> 01:01:10,050
So. Jetzt hab ich die ID.

898
01:01:10,050 --> 01:01:12,050
Und jetzt kann ich wahrscheinlich sagen

899
01:01:12,050 --> 01:01:14,050
self

900
01:01:14,050 --> 01:01:16,050
store. Read.

901
01:01:16,050 --> 01:01:18,050
Reicht jetzt. Unwrap.

902
01:01:18,050 --> 01:01:20,050
Get.

903
01:01:20,050 --> 01:01:22,050
Element oder sowas. Get.

904
01:01:22,050 --> 01:01:24,050
Key value.

905
01:01:24,050 --> 01:01:28,830
Was? Get.

906
01:01:28,830 --> 01:01:30,830
Wat?

907
01:01:30,830 --> 01:01:32,830
Get.

908
01:01:32,830 --> 01:01:34,830
Und jetzt ID.

909
01:01:34,830 --> 01:01:36,830
Das ganze dann returnen.

910
01:01:38,830 --> 01:01:40,830
Return. Func. Wat?

911
01:01:40,830 --> 01:01:42,830
Unwrap. Unwrap.

912
01:01:42,830 --> 01:01:46,720
Was?

913
01:01:46,720 --> 01:01:48,720
Found.

914
01:01:48,720 --> 01:01:53,500
Wat?

915
01:01:53,500 --> 01:01:57,650
Expected.

916
01:01:57,650 --> 01:01:59,650
Found.

917
01:01:59,650 --> 01:02:01,650
Achso.

918
01:02:01,650 --> 01:02:05,860
Der Return Type fehlt.

919
01:02:05,860 --> 01:02:07,860
Was hat er hier unten für Schmerzen?

920
01:02:07,860 --> 01:02:09,860
Ah.

921
01:02:09,860 --> 01:02:11,860
Moment.

922
01:02:11,860 --> 01:02:13,860
Get muss eine Referenz sein.

923
01:02:13,860 --> 01:02:15,860
Okay.

924
01:02:15,860 --> 01:02:17,860
Und jetzt

925
01:02:17,860 --> 01:02:19,860
kann ich auch eine Reference

926
01:02:19,860 --> 01:02:21,860
returnen dazu.

927
01:02:21,860 --> 01:02:23,860
Geht aber immer noch nicht.

928
01:02:23,860 --> 01:02:25,860
Cannot return value reference.

929
01:02:25,860 --> 01:02:27,860
Oh je, oh je. Was will er von mir?

930
01:02:27,860 --> 01:02:35,840
Ne, was soll ich denn sonst machen

931
01:02:35,840 --> 01:02:41,070
außer Unwrap?

932
01:02:41,070 --> 01:02:43,070
Moment, Moment. Das kann ja nicht funktionieren.

933
01:02:43,070 --> 01:02:46,830
Wobei, warum eigentlich

934
01:02:46,830 --> 01:02:48,830
nicht?

935
01:02:48,830 --> 01:02:50,830
Das ist eine Referenz.

936
01:02:50,830 --> 01:02:52,830
Achso, ich weiß warum das nicht

937
01:02:52,830 --> 01:02:54,830
funktionieren kann.

938
01:02:54,830 --> 01:02:56,830
Das ist eine Referenz und ich könnte

939
01:02:56,830 --> 01:02:58,830
ja jederzeit

940
01:02:58,830 --> 01:03:00,830
den Inhalt löschen hier drin zum Beispiel.

941
01:03:00,830 --> 01:03:04,140
Heißt im Endeffekt,

942
01:03:04,140 --> 01:03:06,140
dann wäre die Referenz ungültig

943
01:03:06,140 --> 01:03:08,140
und das mag Rust ja nicht.

944
01:03:08,140 --> 01:03:10,140
Also, was muss ich jetzt machen?

945
01:03:10,140 --> 01:03:12,140
Cannot return. Was schlägt mir

946
01:03:12,140 --> 01:03:14,140
denn der Compiler vor?

947
01:03:14,140 --> 01:03:16,140
Returns the value

948
01:03:16,140 --> 01:03:18,140
referencing data owned by the

949
01:03:18,140 --> 01:03:26,770
current function.

950
01:03:26,770 --> 01:03:28,770
Okay, ich habe was gelernt. Ich glaube ich weiß,

951
01:03:28,770 --> 01:03:30,770
wie wir das fixen können.

952
01:03:30,770 --> 01:03:32,770
Ich glaube ich weiß, wie wir das fixen können.

953
01:03:32,770 --> 01:03:34,770
Genauso wie wir es hier gefixt haben.

954
01:03:34,770 --> 01:03:36,770
Ein Arc drum herum

955
01:03:36,770 --> 01:03:42,960
wrappen. Also es ist jetzt

956
01:03:42,960 --> 01:03:44,960
nicht

957
01:03:44,960 --> 01:03:46,960
es ist jetzt nicht

958
01:03:46,960 --> 01:03:48,960
Type T, sondern es ist Type

959
01:03:48,960 --> 01:03:50,960
Arc

960
01:03:50,960 --> 01:03:54,590
of T.

961
01:03:54,590 --> 01:03:56,590
Und dann hier ist es Arc

962
01:03:56,590 --> 01:03:58,590
new.

963
01:03:58,590 --> 01:04:00,590
Ey, gibt das so Sinn?

964
01:04:00,590 --> 01:04:02,590
Und jetzt, und jetzt

965
01:04:02,590 --> 01:04:04,590
kriege ich den Arc

966
01:04:04,590 --> 01:04:06,590
zurück

967
01:04:06,590 --> 01:04:08,590
und den können wir klonen,

968
01:04:08,590 --> 01:04:10,590
was den Referenz-Counter

969
01:04:10,590 --> 01:04:12,590
erhöht.

970
01:04:12,590 --> 01:04:14,590
Und dann sollte es

971
01:04:14,590 --> 01:04:16,590
funktionieren?

972
01:04:16,590 --> 01:04:18,590
Hey, es kommt

973
01:04:18,590 --> 01:04:23,120
bald!

974
01:04:23,120 --> 01:04:25,120
Five-Head-Time!

975
01:04:25,120 --> 01:04:27,120
Es funktioniert!

976
01:04:27,120 --> 01:04:29,120
Ob es genau das macht,

977
01:04:29,120 --> 01:04:31,120
was ich haben will? Chat, hat irgendjemand

978
01:04:31,120 --> 01:04:33,120
einen Plan, was der Unterschied ist zwischen

979
01:04:33,120 --> 01:04:35,120
Box

980
01:04:35,120 --> 01:04:37,120
und Arc? Also Arc ist

981
01:04:37,120 --> 01:04:39,120
ein Reference-Counter, das weiß ich.

982
01:04:39,120 --> 01:04:41,120
Genauso wie RC. Warum es unterschiedliche Sachen

983
01:04:41,120 --> 01:04:43,120
gibt, habe ich auch noch nicht gecheckt.

984
01:04:43,120 --> 01:04:46,560
Aber,

985
01:04:46,560 --> 01:04:48,560
ich vermute mal, dass Box

986
01:04:48,560 --> 01:04:54,430
ne, keine Ahnung.

987
01:04:54,430 --> 01:04:56,430
Ich wollte gerade sagen, ich vermute, ne.

988
01:04:56,430 --> 01:04:58,430
Würde das

989
01:04:58,430 --> 01:05:00,430
auch so funktionieren mit Box?

990
01:05:00,430 --> 01:05:02,430
Box of T?

991
01:05:02,430 --> 01:05:04,430
Ja, Arc ist Atomic, aber was das in dem

992
01:05:04,430 --> 01:05:15,300
Fall bedeuten soll? Keine Ahnung.

993
01:05:15,300 --> 01:05:17,300
Okay, das funktioniert. Expected Box,

994
01:05:17,300 --> 01:05:19,300
Found und Box.

995
01:05:19,300 --> 01:05:24,720
Und Box.

996
01:05:24,720 --> 01:05:26,720
Ne, das ist das gleiche Problem.

997
01:05:26,720 --> 01:05:28,720
Ja, wir müssen das

998
01:05:28,720 --> 01:05:30,720
mit Arc machen, weil Threat Safety.

999
01:05:30,720 --> 01:05:32,720
Genau, so.

1000
01:05:32,720 --> 01:05:34,720
Wunderbar. Also wenn ich

1001
01:05:34,720 --> 01:05:36,720
das richtig verstehe, passiert jetzt Folgendes.

1002
01:05:36,720 --> 01:05:40,160
Der

1003
01:05:40,160 --> 01:05:42,160
speichert jetzt, also

1004
01:05:42,160 --> 01:05:44,160
der Arc, also das ist ein

1005
01:05:44,160 --> 01:05:46,160
Atomic Reference-Counter.

1006
01:05:46,160 --> 01:05:48,160
Der Arc

1007
01:05:48,160 --> 01:05:50,160
übernimmt Ownership of T.

1008
01:05:50,160 --> 01:05:53,600
Das ist so Rust-Logik für,

1009
01:05:53,600 --> 01:05:55,600
ja, gibt es eigentlich in anderen Sprachen oftmals

1010
01:05:55,600 --> 01:05:57,600
nichts direkt Vergleichbares.

1011
01:05:57,600 --> 01:05:59,600
Also,

1012
01:05:59,600 --> 01:06:01,600
T gehört dem Arc und Arc

1013
01:06:01,600 --> 01:06:03,600
selbst ist ein Reference-Counter und jedes Mal,

1014
01:06:03,600 --> 01:06:05,600
wenn ich den klone,

1015
01:06:05,600 --> 01:06:07,600
wird der Reference-Counter um 1

1016
01:06:07,600 --> 01:06:09,600
hochgezählt und erst wenn der Reference-Counter

1017
01:06:09,600 --> 01:06:11,600
bei 0 ist, wird

1018
01:06:11,600 --> 01:06:13,600
das freigegeben. Das heißt, jetzt

1019
01:06:13,600 --> 01:06:15,600
kann ich Save

1020
01:06:15,600 --> 01:06:17,600
das Returnen, weil dadurch, dass

1021
01:06:17,600 --> 01:06:19,600
es in einem Arc ist, immer sichergestellt

1022
01:06:19,600 --> 01:06:21,600
ist, solange ich noch irgendwo

1023
01:06:21,600 --> 01:06:23,600
ne gültige Referenz habe, bisschen wie der

1024
01:06:23,600 --> 01:06:25,600
Garbage-Collector in C-Sharp,

1025
01:06:25,600 --> 01:06:27,600
naja, ganz, ganz

1026
01:06:27,600 --> 01:06:29,600
light, ja.

1027
01:06:29,600 --> 01:06:31,600
Sobald ich

1028
01:06:31,600 --> 01:06:33,600
quasi noch irgendwie einen Reference-Counter habe,

1029
01:06:33,600 --> 01:06:35,600
dann

1030
01:06:35,600 --> 01:06:37,600
ist das quasi sicher

1031
01:06:37,600 --> 01:06:41,940
und kann nie out of scope gehen.

1032
01:06:41,940 --> 01:06:43,940
Oh man, die Musik ist vorbei.

1033
01:06:43,940 --> 01:06:48,910
Sack.

1034
01:06:48,910 --> 01:06:55,740
Gut.

1035
01:06:55,740 --> 01:06:57,740
So, jetzt können wir das Element

1036
01:06:57,740 --> 01:07:02,530
getten, auch schon mal nice.

1037
01:07:02,530 --> 01:07:04,530
RC cannot be shared

1038
01:07:04,530 --> 01:07:06,530
between threads. Ja, deswegen braucht

1039
01:07:06,530 --> 01:07:08,530
man wahrscheinlich Arc, dass

1040
01:07:08,530 --> 01:07:10,530
der Reference-Counter irgendwie

1041
01:07:10,530 --> 01:07:12,530
Atomic-mäßig erhöht wird

1042
01:07:12,530 --> 01:07:14,530
und damit thread-safe ist. Rate

1043
01:07:14,530 --> 01:07:18,100
ich jetzt einfach mal. So.

1044
01:07:18,100 --> 01:07:20,100
Soweit, so gut. Was hat er hier?

1045
01:07:20,100 --> 01:07:22,100
Registry is never constructed.

1046
01:07:22,100 --> 01:07:24,100
Die IDE ist auch schon ein bisschen pp-iger,

1047
01:07:24,100 --> 01:07:26,100
oder? Ja gut, die Funktion

1048
01:07:26,100 --> 01:07:28,100
wird nicht aufgerufen. Ja, okay. Okay, okay.

1049
01:07:28,100 --> 01:07:30,100
Lasst mir gefallen. So,

1050
01:07:30,100 --> 01:07:32,100
das brauchen wir als nächstes. Delete.

1051
01:07:32,100 --> 01:07:34,100
Delete brauchen wir als nächstes.

1052
01:07:34,100 --> 01:07:36,100
Fn.

1053
01:07:36,100 --> 01:07:38,100
Nennen wir einfach Dell.

1054
01:07:38,100 --> 01:07:40,100
U32, die ID.

1055
01:07:40,100 --> 01:07:42,100
Und jetzt, das dürfte relativ easy

1056
01:07:42,100 --> 01:07:45,540
sein. Das dürfte relativ easy

1057
01:07:45,540 --> 01:07:47,540
sein. Self. Moment, das kann ich doch eigentlich

1058
01:07:47,540 --> 01:07:49,540
so lassen. Self, so. Jetzt

1059
01:07:49,540 --> 01:07:51,540
wahrscheinlich write.

1060
01:07:51,540 --> 01:07:53,540
Ähm.

1061
01:07:53,540 --> 01:07:55,540
Wie löscht man? Wie löscht

1062
01:07:55,540 --> 01:07:57,540
man da was? Get, insert,

1063
01:07:57,540 --> 01:07:59,540
ether, clear. Ne.

1064
01:07:59,540 --> 01:08:01,540
Ich will sowas wie erase, delete

1065
01:08:01,540 --> 01:08:03,540
oder sowas. Remove.

1066
01:08:03,540 --> 01:08:05,540
Remove.

1067
01:08:05,540 --> 01:08:15,440
Remove entry.

1068
01:08:15,440 --> 01:08:17,440
Oh.

1069
01:08:17,440 --> 01:08:22,420
Was ist der Unterschied?

1070
01:08:22,420 --> 01:08:24,420
Removes the key from the map, returning the stored

1071
01:08:24,420 --> 01:08:26,420
key and value if the key was previously

1072
01:08:26,420 --> 01:08:29,860
in the map. Okay.

1073
01:08:29,860 --> 01:08:31,860
Und, und.

1074
01:08:31,860 --> 01:08:33,860
Remove is,

1075
01:08:33,860 --> 01:08:35,860
removes the key from the map, returning the

1076
01:08:35,860 --> 01:08:37,860
value at the key. Achso,

1077
01:08:37,860 --> 01:08:39,860
das eine returned key value und das andere

1078
01:08:39,860 --> 01:08:41,860
returned nur den value. Ich will überhaupt

1079
01:08:41,860 --> 01:08:43,860
nichts returnen.

1080
01:08:43,860 --> 01:08:45,860
Gibt es sowas wie drop oder so? Hey.

1081
01:08:45,860 --> 01:08:47,860
Moment, ist wieder was anderes.

1082
01:08:47,860 --> 01:08:49,860
Was zum Teufel macht drop?

1083
01:08:49,860 --> 01:08:51,860
Drop

1084
01:08:51,860 --> 01:08:53,860
ist so Nische, das hat auch nicht mal

1085
01:08:53,860 --> 01:08:59,660
irgendeinen Hilfetext.

1086
01:08:59,660 --> 01:09:01,660
Also, remove.

1087
01:09:01,660 --> 01:09:03,660
Einfach nur remove.

1088
01:09:03,660 --> 01:09:05,660
ID.

1089
01:09:05,660 --> 01:09:07,660
Und da muss auch gar nichts returned werden. Einfach

1090
01:09:07,660 --> 01:09:09,660
so. Easy.

1091
01:09:09,660 --> 01:09:13,300
Eats. Eats.

1092
01:09:13,300 --> 01:09:15,300
Easy as fuck.

1093
01:09:15,300 --> 01:09:18,670
Easy as fuck.

1094
01:09:18,670 --> 01:09:20,670
Moment, das funds wieder nicht. Warum?

1095
01:09:20,670 --> 01:09:24,620
Achso, und.

1096
01:09:24,620 --> 01:09:26,620
Mit was? Mit STRG Q kannst du...

1097
01:09:26,620 --> 01:09:31,280
Meinst du hier?

1098
01:09:31,280 --> 01:09:38,980
Nö.

1099
01:09:38,980 --> 01:09:40,980
Ich habe Visual Studio Key Mappings.

1100
01:09:40,980 --> 01:09:42,980
Keine Ahnung. Ich glaube, das war keine gute Idee.

1101
01:09:42,980 --> 01:09:44,980
Okay.

1102
01:09:44,980 --> 01:09:46,980
Ja, das war es doch im Großen und

1103
01:09:46,980 --> 01:09:48,980
Ganzen schon. Und jetzt,

1104
01:09:48,980 --> 01:09:50,980
jetzt eigentlich nur noch sowas wie

1105
01:09:50,980 --> 01:09:52,980
public

1106
01:09:52,980 --> 01:09:54,980
function.

1107
01:09:54,980 --> 01:09:56,980
Ja.

1108
01:09:56,980 --> 01:09:58,980
All oder so.

1109
01:09:58,980 --> 01:10:00,980
All.

1110
01:10:00,980 --> 01:10:02,980
Irgendwas in der Richtung.

1111
01:10:02,980 --> 01:10:04,980
All.

1112
01:10:04,980 --> 01:10:10,590
Und jetzt

1113
01:10:10,590 --> 01:10:12,590
quasi return self.

1114
01:10:12,590 --> 01:10:16,420
Ach Moment.

1115
01:10:16,420 --> 01:10:18,420
Self.

1116
01:10:18,420 --> 01:10:20,420
Store.

1117
01:10:20,420 --> 01:10:22,420
Ähm.

1118
01:10:22,420 --> 01:10:24,420
Read.

1119
01:10:24,420 --> 01:10:26,420
Vermutlich.

1120
01:10:26,420 --> 01:10:30,240
Unwrap.

1121
01:10:30,240 --> 01:10:33,680
Eater. Klingt gut.

1122
01:10:33,680 --> 01:10:38,660
Und das jetzt einfach

1123
01:10:38,660 --> 01:10:40,660
zurückgeben, oder? Das müsste doch sein.

1124
01:10:40,660 --> 01:10:42,660
Nee.

1125
01:10:42,660 --> 01:10:44,660
Ist es nicht. Warum nicht?

1126
01:10:44,660 --> 01:10:46,660
Oh Gott, Rust.

1127
01:10:46,660 --> 01:10:48,660
Warum ist das wieder kompliziert?

1128
01:10:48,660 --> 01:10:50,660
Returns a value

1129
01:10:50,660 --> 01:10:52,660
referencing data owned by the current

1130
01:10:52,660 --> 01:10:54,660
function.

1131
01:10:54,660 --> 01:10:56,660
Was ist das eigentlich für ein

1132
01:10:56,660 --> 01:10:58,660
ultra hässlicher Return Wert?

1133
01:10:58,660 --> 01:11:00,660
Eater.

1134
01:11:00,660 --> 01:11:02,660
Ähm. Single quotes.

1135
01:11:02,660 --> 01:11:04,660
Underscore.

1136
01:11:04,660 --> 01:11:06,660
What?

1137
01:11:06,660 --> 01:11:10,160
Kann man es nicht einfach löschen?

1138
01:11:10,160 --> 01:11:12,160
Äh, prägt nichts.

1139
01:11:12,160 --> 01:11:14,160
Okay, Rust.

1140
01:11:14,160 --> 01:11:16,160
Ich habe legit keine Ahnung,

1141
01:11:16,160 --> 01:11:18,160
wie das funktioniert.

1142
01:11:18,160 --> 01:11:20,160
Leute, ich habe

1143
01:11:20,160 --> 01:11:22,160
eine absolute Pipega-Idee, was

1144
01:11:22,160 --> 01:11:24,160
wir machen könnten.

1145
01:11:24,160 --> 01:11:26,160
Wir können sagen, unwrap.

1146
01:11:26,160 --> 01:11:32,030
Clone.

1147
01:11:32,030 --> 01:11:34,030
Und wir returnen eine neue Hash Map

1148
01:11:34,030 --> 01:11:36,030
jedes Mal, wenn wir all. Aber das kann es ja nicht

1149
01:11:36,030 --> 01:11:38,030
sein, oder?

1150
01:11:38,030 --> 01:11:43,390
Ich will einfach

1151
01:11:43,390 --> 01:11:45,390
nur außerhalb

1152
01:11:45,390 --> 01:11:47,390
eine Schleife machen können über alle

1153
01:11:47,390 --> 01:11:49,390
Elemente in der Registry.

1154
01:11:49,390 --> 01:11:53,340
Wie funktioniert das?

1155
01:11:53,340 --> 01:11:55,340
Ich will sagen können,

1156
01:11:55,340 --> 01:11:58,660
for.

1157
01:11:58,660 --> 01:12:00,660
Äh, Moment.

1158
01:12:00,660 --> 01:12:04,800
Äh, for.

1159
01:12:04,800 --> 01:12:06,800
Er.

1160
01:12:06,800 --> 01:12:08,800
All.

1161
01:12:08,800 --> 01:12:10,800
Äh, ja, blub.

1162
01:12:10,800 --> 01:12:12,800
Das will ich

1163
01:12:12,800 --> 01:12:14,800
sagen können. Das funzt jetzt

1164
01:12:14,800 --> 01:12:16,800
an der Stelle. Klar, weil ich eine neue Map

1165
01:12:16,800 --> 01:12:18,800
mache. Aber ich will

1166
01:12:18,800 --> 01:12:20,800
ja nicht wirklich

1167
01:12:20,800 --> 01:12:22,800
die Map einmal komplett klonen.

1168
01:12:22,800 --> 01:12:24,800
Bei jedem Aufruf.

1169
01:12:24,800 --> 01:12:26,800
Das ist ja nicht Sinn und Zweck der Sache.

1170
01:12:26,800 --> 01:12:30,620
Okay, stack overflow.

1171
01:12:30,620 --> 01:12:32,620
Rust. Return

1172
01:12:32,620 --> 01:12:40,160
iterator.

1173
01:12:40,160 --> 01:12:44,620
Oh. Returning

1174
01:12:44,620 --> 01:12:46,620
iterator. Was? Returning

1175
01:12:46,620 --> 01:12:48,620
Rust iterators. Depth

1176
01:12:48,620 --> 01:12:50,620
first. Returning an iterator.

1177
01:12:50,620 --> 01:12:54,380
Ja, genau.

1178
01:12:54,380 --> 01:12:56,380
Genau das will ich machen. Und das habe ich

1179
01:12:56,380 --> 01:12:58,380
auch gerade gemacht, aber das funzt nicht.

1180
01:12:58,380 --> 01:13:03,040
The compiler produces an error.

1181
01:13:05,040 --> 01:13:07,040
The type is contained within the error

1182
01:13:07,040 --> 01:13:09,040
messages. Ja, genau das

1183
01:13:09,040 --> 01:13:11,040
habe ich gerade gemacht.

1184
01:13:11,040 --> 01:13:13,040
Genau das

1185
01:13:13,040 --> 01:13:15,040
habe ich gerade gemacht.

1186
01:13:15,040 --> 01:13:17,040
Beifällige Webseite.

1187
01:13:17,040 --> 01:13:19,040
Aber.

1188
01:13:19,040 --> 01:13:21,040
Moment.

1189
01:13:21,040 --> 01:13:23,040
Ne, ne, ne.

1190
01:13:23,040 --> 01:13:25,040
Moment, das funzt. Ne, das funzt nicht.

1191
01:13:25,040 --> 01:13:27,040
Das ist nicht das, was ich haben will.

1192
01:13:29,040 --> 01:13:31,040
Oh man.

1193
01:13:31,040 --> 01:13:33,040
IDE, please.

1194
01:13:33,040 --> 01:13:35,040
Genau das habe ich gemacht,

1195
01:13:35,040 --> 01:13:37,040
aber das funzt nicht.

1196
01:13:37,040 --> 01:13:39,040
Gibt es da nicht

1197
01:13:39,040 --> 01:13:41,040
Intuiter? Ja, aber ich will ja nicht

1198
01:13:41,040 --> 01:13:46,340
Ownership zurückgeben.

1199
01:13:46,340 --> 01:13:48,340
Ich will ja nicht Ownership zurückgeben.

1200
01:13:48,340 --> 01:13:51,780
Sondern einfach nur

1201
01:13:51,780 --> 01:13:53,780
eine.

1202
01:13:53,780 --> 01:13:55,780
Ja.

1203
01:13:55,780 --> 01:13:57,780
Jede Menge. Die Referenzen

1204
01:13:57,780 --> 01:13:59,780
auf die Elemente in diesem

1205
01:13:59,780 --> 01:14:01,780
in dieser HashMap.

1206
01:14:01,780 --> 01:14:08,610
So, also. Das was

1207
01:14:08,610 --> 01:14:10,610
die Seite vorschlägt funzt nicht, weil

1208
01:14:10,610 --> 01:14:12,610
dann returns a value

1209
01:14:12,610 --> 01:14:14,610
referencing data

1210
01:14:14,610 --> 01:14:16,610
owned by the current function.

1211
01:14:16,610 --> 01:14:21,390
Und da bin ich mir nicht sicher, was

1212
01:14:21,390 --> 01:14:23,390
es mir sagen möchte, ehrlich gesagt.

1213
01:14:23,390 --> 01:14:25,390
Muss ich vielleicht das hier erst nochmal.

1214
01:14:25,390 --> 01:14:27,390
Moment. Muss ich sagen let m irgendwie so.

1215
01:14:27,390 --> 01:14:32,940
Und dann.

1216
01:14:32,940 --> 01:14:34,940
Ne, das funktioniert natürlich auch nicht.

1217
01:14:34,940 --> 01:14:36,940
Okay. Und wie geht das weiter?

1218
01:14:36,940 --> 01:14:40,900
Das habe ich probiert.

1219
01:14:40,900 --> 01:14:42,900
Laut der Seite geht das so.

1220
01:14:42,900 --> 01:14:44,900
Ist das irgendwie

1221
01:14:44,900 --> 01:14:46,900
so eine AI generierte Webseite?

1222
01:14:46,900 --> 01:14:48,900
Aber von 2020 eher nicht.

1223
01:14:48,900 --> 01:14:50,900
Irgendeine AI generierte Webseite.

1224
01:14:50,900 --> 01:14:57,860
Das ist gut.

1225
01:14:57,860 --> 01:14:59,860
How to implement iterator

1226
01:14:59,860 --> 01:15:01,860
over

1227
01:15:01,860 --> 01:15:03,860
wrapped vector in Rust.

1228
01:15:03,860 --> 01:15:05,860
Genau. Hier. Wrapped.

1229
01:15:05,860 --> 01:15:07,860
Und jetzt

1230
01:15:07,860 --> 01:15:09,860
will der, dass man das iteraten kann.

1231
01:15:09,860 --> 01:15:11,860
Genau das will ich. Genau sowas will ich haben.

1232
01:15:11,860 --> 01:15:24,900
Actual to call it

1233
01:15:24,900 --> 01:15:26,900
as you described. You don't need to

1234
01:15:26,900 --> 01:15:28,900
implement iterator.

1235
01:15:28,900 --> 01:15:30,900
For it, you just need to return

1236
01:15:30,900 --> 01:15:32,900
the iterator of the inner vec.

1237
01:15:32,900 --> 01:15:38,770
Ja, ich habe das schon gesehen,

1238
01:15:38,770 --> 01:15:45,150
den Link. Okay, six hat time.

1239
01:15:45,150 --> 01:15:50,060
Okay, probieren wir

1240
01:15:50,060 --> 01:15:52,060
das doch mal so aus.

1241
01:15:52,060 --> 01:15:54,060
Das sollte doch nicht allzu kompliziert

1242
01:15:54,060 --> 01:15:59,420
sein. So, self.

1243
01:15:59,420 --> 01:16:01,420
Jetzt brauchen wir erstmal hier den,

1244
01:16:01,420 --> 01:16:06,980
probieren, planten wir das mal aus hier.

1245
01:16:06,980 --> 01:16:08,980
So, zack.

1246
01:16:08,980 --> 01:16:10,980
M iter.

1247
01:16:10,980 --> 01:16:14,670
Funzt nicht,

1248
01:16:14,670 --> 01:16:16,670
weil

1249
01:16:16,670 --> 01:16:18,670
unelide

1250
01:16:18,670 --> 01:16:20,670
lifetimes.

1251
01:16:20,670 --> 01:16:29,230
What?

1252
01:16:29,230 --> 01:16:32,860
Ich weiß nicht mehr, was es will von mir.

1253
01:16:32,860 --> 01:16:36,180
Ich lass mal hier den.

1254
01:16:36,180 --> 01:16:38,180
Okay, und jetzt geht das?

1255
01:16:38,180 --> 01:16:40,180
Method not found.

1256
01:16:40,180 --> 01:16:42,180
Achso. Moment.

1257
01:16:42,180 --> 01:16:47,280
Nee. Returns a value

1258
01:16:47,280 --> 01:16:49,280
referencing data owned by the current function.

1259
01:16:49,280 --> 01:16:51,280
Okay, das funzt schon mal

1260
01:16:51,280 --> 01:16:53,280
nett.

1261
01:16:53,280 --> 01:16:55,280
So, das geht nicht. Also,

1262
01:16:55,280 --> 01:16:57,280
stackoverflow fail.

1263
01:16:57,280 --> 01:16:59,280
Nee, da fehlt kein return.

1264
01:16:59,280 --> 01:17:01,280
Wenn man das Semikolon

1265
01:17:01,280 --> 01:17:03,280
weglässt, wird die letzte

1266
01:17:03,280 --> 01:17:05,280
Zeile automatisch als return

1267
01:17:05,280 --> 01:17:07,280
verwendet. Ist auch

1268
01:17:07,280 --> 01:17:09,280
ein bisschen, weiß nicht, bisschen

1269
01:17:09,280 --> 01:17:11,280
pp-iger irgendwie, dass es dafür was extra

1270
01:17:11,280 --> 01:17:15,810
gibt. Aber das funktioniert

1271
01:17:15,810 --> 01:17:26,100
nicht. Also, stackoverflow

1272
01:17:26,100 --> 01:17:28,100
Antwort three hat.

1273
01:17:28,100 --> 01:17:30,100
Okay,

1274
01:17:30,100 --> 01:17:32,100
nächste Antwort. Accepted Antwort.

1275
01:17:32,100 --> 01:17:34,100
Accepted Antwort.

1276
01:17:34,100 --> 01:17:36,100
Vec itself does not implement

1277
01:17:36,100 --> 01:17:38,100
iterator. However, it implements into

1278
01:17:38,100 --> 01:17:43,070
iterator in three ways.

1279
01:17:43,070 --> 01:17:45,070
You probably wanted to implement

1280
01:17:45,070 --> 01:17:47,070
these for your wrapper as well.

1281
01:17:47,070 --> 01:17:50,510
Nee, into iterator will ich

1282
01:17:50,510 --> 01:17:52,510
schon mal nett.

1283
01:17:52,510 --> 01:17:56,340
Deref. Wie?

1284
01:17:56,340 --> 01:17:58,340
Deref to slice so that we can.

1285
01:17:58,340 --> 01:18:02,290
Ich. Was?

1286
01:18:02,290 --> 01:18:05,660
Was bin ich überhaupt sehend

1287
01:18:05,660 --> 01:18:10,130
hier gerade? Implementier

1288
01:18:10,130 --> 01:18:12,130
doch den iterator für arc iterator.

1289
01:18:12,130 --> 01:18:14,130
Oder bin ich gerade dumm?

1290
01:18:14,130 --> 01:18:21,790
Ja, wie denn?

1291
01:18:21,790 --> 01:18:26,000
Alter, was? Okay.

1292
01:18:26,000 --> 01:18:28,000
Implement iterator.

1293
01:18:28,000 --> 01:18:30,000
So, okay.

1294
01:18:30,000 --> 01:18:32,000
Also, so einfach wie stackoverflow das macht, geht das

1295
01:18:32,000 --> 01:18:34,000
schon mal nett. Also, implement

1296
01:18:34,000 --> 01:18:36,000
iterator for registry

1297
01:18:36,000 --> 01:18:38,000
of

1298
01:18:38,000 --> 01:18:46,430
t.

1299
01:18:46,430 --> 01:18:51,340
Ähm, was?

1300
01:18:51,340 --> 01:18:53,340
Okay, item type.

1301
01:18:53,340 --> 01:18:55,340
Type item gleich

1302
01:18:55,340 --> 01:19:01,980
u32.

1303
01:19:03,980 --> 01:19:05,980
Nee, mein item type ist t.

1304
01:19:05,980 --> 01:19:10,130
Und dementsprechend ist es auch einfach

1305
01:19:10,130 --> 01:19:12,130
option of t.

1306
01:19:12,130 --> 01:19:19,020
Und das da oben lass ich weg.

1307
01:19:19,020 --> 01:19:27,840
Und was? Ich check's nicht,

1308
01:19:27,840 --> 01:19:29,840
was der hier macht.

1309
01:19:29,840 --> 01:19:31,840
Was soll das?

1310
01:19:31,840 --> 01:19:33,840
Was soll das heißen?

1311
01:19:33,840 --> 01:19:35,840
Ach, man muss das?

1312
01:19:35,840 --> 01:19:37,840
Moment, man braucht das hier.

1313
01:19:37,840 --> 01:19:39,840
Okay, das ist erforderlich.

1314
01:19:39,840 --> 01:19:41,840
Hast du Tipps,

1315
01:19:41,840 --> 01:19:43,840
wie man am besten anfangen kann, zu programmieren?

1316
01:19:43,840 --> 01:19:45,840
Ja, der beste Tipp ist,

1317
01:19:45,840 --> 01:19:47,840
du hast irgendwie eine coole Idee, was

1318
01:19:47,840 --> 01:19:49,840
du schon immer mal machen wolltest,

1319
01:19:49,840 --> 01:19:51,840
und suchst dir die beste Technologie dafür raus

1320
01:19:51,840 --> 01:19:53,840
und fängst damit an. Weil dann hast du auch

1321
01:19:53,840 --> 01:19:55,840
immer Motivation, was zu machen,

1322
01:19:55,840 --> 01:19:57,840
weil das ja was ist, was du letztendlich

1323
01:19:57,840 --> 01:19:59,840
schon immer mal machen wolltest. Also, wenn du

1324
01:19:59,840 --> 01:20:01,840
sagst, ich würde gerne microcontroller

1325
01:20:01,840 --> 01:20:03,840
programmieren, eine eigene Webseite machen,

1326
01:20:03,840 --> 01:20:05,840
meinen Rollladen hoch- und runterfahren

1327
01:20:05,840 --> 01:20:07,840
automatisch, das ist natürlich am besten,

1328
01:20:07,840 --> 01:20:09,840
wenn du so ein Ziel schon im Kopf hast.

1329
01:20:09,840 --> 01:20:11,840
Das ist motivierend. Wenn du gar keine Ahnung

1330
01:20:11,840 --> 01:20:13,840
hast, wie du anfangen sollst und einfach

1331
01:20:13,840 --> 01:20:15,840
nur gucken willst, ob das was für dich

1332
01:20:15,840 --> 01:20:17,840
ist, kann ich dir nur empfehlen,

1333
01:20:17,840 --> 01:20:19,840
lad dir Visual Studio Code runter

1334
01:20:19,840 --> 01:20:23,340
und fang mit JavaScript an.

1335
01:20:23,340 --> 01:20:25,340
JavaScript, bisschen HTML, CSS

1336
01:20:25,340 --> 01:20:27,340
hat die mit Abstand

1337
01:20:27,340 --> 01:20:29,340
niedrigste Einstiegshürde. Du brauchst

1338
01:20:29,340 --> 01:20:31,340
einen ordentlichen Texteditor, wie gesagt,

1339
01:20:31,340 --> 01:20:33,340
nimm Visual Studio Code, ist alles out of the box

1340
01:20:33,340 --> 01:20:35,340
für JavaScript dabei.

1341
01:20:35,340 --> 01:20:37,340
Und du brauchst einen Browser, und einen Browser hast du,

1342
01:20:37,340 --> 01:20:39,340
sonst wärst du hier nicht im Twitch-Chat.

1343
01:20:39,340 --> 01:20:49,380
Und dann legst du los.

1344
01:20:49,380 --> 01:20:51,380
Ich check nicht, was ich machen muss, Chat.

1345
01:20:51,380 --> 01:20:53,380
Was will das hier von mir?

1346
01:20:53,380 --> 01:20:59,950
Here we define a sequence using

1347
01:20:59,950 --> 01:21:05,380
current und next.

1348
01:21:05,380 --> 01:21:07,380
Fn next. Okay,

1349
01:21:07,380 --> 01:21:09,380
option will ich doch gar nicht, oder?

1350
01:21:09,380 --> 01:21:11,380
Ich will einfach

1351
01:21:11,380 --> 01:21:13,380
t return.

1352
01:21:13,380 --> 01:21:17,840
Nee, das geht nicht. Es muss

1353
01:21:17,840 --> 01:21:22,940
eine Option sein.

1354
01:21:22,940 --> 01:21:24,940
Moment, kann ich nicht...

1355
01:21:24,940 --> 01:21:33,630
Was will...

1356
01:21:33,630 --> 01:21:40,560
Current next?

1357
01:21:40,560 --> 01:21:44,060
Self current? What?

1358
01:21:44,060 --> 01:21:46,060
Kann ich nicht das einfach

1359
01:21:46,060 --> 01:21:48,060
re-usen?

1360
01:21:48,060 --> 01:21:50,060
Store? Kann ich das nicht

1361
01:21:50,060 --> 01:22:02,910
einfach re-usen von...

1362
01:22:02,910 --> 01:22:04,910
Read? Kann ich das

1363
01:22:04,910 --> 01:22:06,910
nicht einfach re-usen?

1364
01:22:06,910 --> 01:22:18,160
Von dem anderen?

1365
01:22:18,160 --> 01:22:20,160
Und so?

1366
01:22:20,160 --> 01:22:22,160
De-referencen?

1367
01:22:22,160 --> 01:22:25,730
Wobei, das braucht man eigentlich nicht.

1368
01:22:25,730 --> 01:22:27,730
Dass ich jetzt sagen kann, irgendwie, return

1369
01:22:27,730 --> 01:22:37,540
m next.

1370
01:22:37,540 --> 01:22:39,540
Ja, das kann man doch

1371
01:22:39,540 --> 01:22:49,440
einfach reppen, oder?

1372
01:22:49,440 --> 01:22:51,440
Return n.

1373
01:22:51,440 --> 01:22:53,440
Wobei, nee. Moment.

1374
01:22:53,440 --> 01:23:04,180
Was muss man returnen?

1375
01:23:04,180 --> 01:23:08,060
Hier return was?

1376
01:23:08,060 --> 01:23:10,060
Option of

1377
01:23:10,060 --> 01:23:12,060
u 32

1378
01:23:12,060 --> 01:23:14,060
t.

1379
01:23:14,060 --> 01:23:16,060
Oh man, was ist denn jetzt?

1380
01:23:16,060 --> 01:23:18,060
Method next has an incomparable

1381
01:23:18,060 --> 01:23:20,060
expected time

1382
01:23:20,060 --> 01:23:24,780
found.

1383
01:23:24,780 --> 01:23:26,780
Ach so. Moment.

1384
01:23:26,780 --> 01:23:30,800
Ähm.

1385
01:23:30,800 --> 01:23:32,800
Was muss ich sagen? Wie haben die gesagt?

1386
01:23:32,800 --> 01:23:36,430
Self? Item?

1387
01:23:36,430 --> 01:23:38,430
Item? Nee.

1388
01:23:38,430 --> 01:23:41,940
Wie haben die das hier gemacht?

1389
01:23:41,940 --> 01:23:43,940
Oh man, shit. Das ist ja super

1390
01:23:43,940 --> 01:23:56,530
komplizierter shit wieder.

1391
01:23:56,530 --> 01:23:58,530
Self. Self cross.

1392
01:23:58,530 --> 01:24:00,530
Okay.

1393
01:24:00,530 --> 01:24:02,530
Item. Und item ist quasi

1394
01:24:02,530 --> 01:24:04,530
u 32

1395
01:24:04,530 --> 01:24:06,530
t.

1396
01:24:06,530 --> 01:24:08,530
Okay. Ist nicht,

1397
01:24:08,530 --> 01:24:10,530
weil... Ach so.

1398
01:24:10,530 --> 01:24:12,530
Weil es und

1399
01:24:12,530 --> 01:24:14,530
es ist und u 32

1400
01:24:14,530 --> 01:24:16,530
aus irgendwelchen Gründen

1401
01:24:16,530 --> 01:24:18,530
und a t.

1402
01:24:18,530 --> 01:24:20,530
Alter, what the fuck, man.

1403
01:24:20,530 --> 01:24:22,530
Found was?

1404
01:24:22,530 --> 01:24:24,530
Okay, u 32.

1405
01:24:24,530 --> 01:24:29,440
What the hell?

1406
01:24:29,440 --> 01:24:31,440
Alter, Rust, man.

1407
01:24:31,440 --> 01:24:33,440
Ich will einfach ne Schleife drüber machen.

1408
01:24:33,440 --> 01:24:35,440
Was will das denn von mir?

1409
01:24:37,440 --> 01:24:41,780
Was will das von mir, man?

1410
01:24:41,780 --> 01:24:48,740
Oh, fucking shit.

1411
01:24:48,740 --> 01:25:11,250
Ich mein, okay.

1412
01:25:11,250 --> 01:25:13,250
Würde das dann prinzipiell überhaupt

1413
01:25:13,250 --> 01:25:18,160
funktionieren? Würde das...

1414
01:25:18,160 --> 01:25:23,140
Nee, all ist auskommentiert.

1415
01:25:23,140 --> 01:25:28,820
Meine Güte.

1416
01:25:28,820 --> 01:25:30,820
Okay, also.

1417
01:25:30,820 --> 01:25:35,020
Was will das von mir?

1418
01:25:35,020 --> 01:25:38,850
Und. Okay. Und und

1419
01:25:38,850 --> 01:25:40,850
ist nicht erlaubt. Warum ist und

1420
01:25:40,850 --> 01:25:42,850
nicht erlaubt? Weil missing

1421
01:25:42,850 --> 01:25:44,850
lifetime specifier.

1422
01:25:44,850 --> 01:25:48,290
Okay, Rust, hilf mir.

1423
01:25:48,290 --> 01:25:50,290
Rust, please.

1424
01:25:50,290 --> 01:25:52,290
Was? Und not

1425
01:25:52,290 --> 01:25:54,290
a.

1426
01:25:54,290 --> 01:25:56,290
MonkaW.

1427
01:25:56,290 --> 01:26:14,670
Oh. So.

1428
01:26:14,670 --> 01:26:18,690
Okay. Okay.

1429
01:26:18,690 --> 01:26:20,690
Ich habe absolut keine Ahnung, was ich

1430
01:26:20,690 --> 01:26:22,690
da gerade mache.

1431
01:26:22,690 --> 01:26:24,690
Okay. Okay. Moment. Moment, Leute.

1432
01:26:24,690 --> 01:26:33,250
Nee, was ist jetzt?

1433
01:26:33,250 --> 01:26:36,750
Leute.

1434
01:26:36,750 --> 01:26:38,750
Mann, das kann doch nicht so schwierig

1435
01:26:38,750 --> 01:26:45,580
sein.

1436
01:26:45,580 --> 01:26:47,580
Ich habe absolut keine Ahnung, was Rust von mir will, man.

1437
01:26:47,580 --> 01:26:56,020
Nehme mal oben das

1438
01:26:56,020 --> 01:26:58,020
a raus. Habe ich. Aber

1439
01:26:58,020 --> 01:27:00,020
das geht nicht.

1440
01:27:00,020 --> 01:27:02,020
Dann will er

1441
01:27:02,020 --> 01:27:04,020
nicht, weil lifetime

1442
01:27:04,020 --> 01:27:06,020
specifier missing.

1443
01:27:06,020 --> 01:27:08,020
So. Und jetzt sagt

1444
01:27:08,020 --> 01:27:10,020
er mir hier.

1445
01:27:16,020 --> 01:27:18,020
Alles klar. Jetzt sofort.

1446
01:27:18,020 --> 01:27:20,020
Muss man vielleicht so machen? Hier so?

1447
01:27:20,020 --> 01:27:23,970
Nee.

1448
01:27:23,970 --> 01:27:25,970
Ich habe keine Ahnung, man.

1449
01:27:25,970 --> 01:27:27,970
Alter, Rust. Die Sprache fuckt

1450
01:27:27,970 --> 01:27:32,690
jedenfalls hier so krass ab, ey.

1451
01:27:32,690 --> 01:27:34,690
Also, ich habe wirklich, ich habe absolut keine Ahnung,

1452
01:27:34,690 --> 01:27:47,280
was das Ding von mir will, man.

1453
01:27:47,280 --> 01:27:49,280
Du musst es auch embracen.

1454
01:27:49,280 --> 01:27:51,280
Naja.

1455
01:27:51,280 --> 01:28:01,890
Massive embracing am Start.

1456
01:28:01,890 --> 01:28:03,890
Okay. Keine Ahnung. Wir gucken mal.

1457
01:28:03,890 --> 01:28:05,890
Wir gucken mal weiter.

1458
01:28:05,890 --> 01:28:07,890
Also, das funzt ja schon mal nett.

1459
01:28:07,890 --> 01:28:12,350
Wie das hier.

1460
01:28:12,350 --> 01:28:14,350
Was haben wir hier sonst noch so zur Auswahl?

1461
01:28:14,350 --> 01:28:16,350
Imple deref for binary.

1462
01:28:16,350 --> 01:28:18,350
Okay, dann probieren wir. Okay. Wenn das mit dem iterator

1463
01:28:18,350 --> 01:28:20,350
nicht funktioniert, dann probieren wir einfach was anderes.

1464
01:28:20,350 --> 01:28:22,350
For registry

1465
01:28:22,350 --> 01:28:30,460
t.

1466
01:28:30,460 --> 01:28:32,460
Probier mal. Moment, was?

1467
01:28:32,460 --> 01:28:34,460
Moment. Wo soll ich das

1468
01:28:34,460 --> 01:28:36,460
probieren? Wir kommentieren das mal aus,

1469
01:28:36,460 --> 01:28:38,460
weil vielleicht brauchen wir das gleich nochmal.

1470
01:28:38,460 --> 01:28:40,460
Probier mal self next

1471
01:28:40,460 --> 01:28:42,460
map.

1472
01:28:42,460 --> 01:28:48,590
What?

1473
01:28:48,590 --> 01:28:53,820
Was? Zeile 26.

1474
01:28:53,820 --> 01:29:05,580
Fiver time. Das ist ja nicht self.

1475
01:29:05,580 --> 01:29:27,460
Das ist ja nur m. C++

1476
01:29:27,460 --> 01:29:29,460
Level types, würde ich sagen.

1477
01:29:29,460 --> 01:29:31,460
So.

1478
01:29:31,460 --> 01:29:33,460
Das wird jetzt auskommentiert. Okay.

1479
01:29:33,460 --> 01:29:35,460
Next. Also, probieren wir das mit dem

1480
01:29:35,460 --> 01:29:37,460
deref.

1481
01:29:37,460 --> 01:29:39,460
Implement deref for. Okay.

1482
01:29:39,460 --> 01:29:41,460
t.

1483
01:29:41,460 --> 01:29:43,460
Registry.

1484
01:29:43,460 --> 01:29:45,460
t.

1485
01:29:45,460 --> 01:29:49,280
Output.

1486
01:29:49,280 --> 01:30:22,190
Moment.

1487
01:30:22,190 --> 01:30:27,040
Das sind die Elemente.

1488
01:30:27,040 --> 01:30:29,040
Das sind die Elemente.

1489
01:30:29,040 --> 01:30:31,040
Also, mein Element ist

1490
01:30:31,040 --> 01:30:33,040
Output ist dann

1491
01:30:33,040 --> 01:30:35,040
ein

1492
01:30:35,040 --> 01:30:37,040
32 Vector of t.

1493
01:30:37,040 --> 01:30:52,640
Self.

1494
01:30:52,640 --> 01:30:57,230
Self.

1495
01:30:57,230 --> 01:30:59,230
Warum hat er hier noch ein und davor?

1496
01:30:59,230 --> 01:31:01,230
Warum ist hier nochmal ein und

1497
01:31:01,230 --> 01:31:03,230
davor?

1498
01:31:03,230 --> 01:31:06,930
Ich check's nicht. Okay.

1499
01:31:06,930 --> 01:31:08,930
Self.

1500
01:31:08,930 --> 01:31:15,120
Store. Achso, ja.

1501
01:31:15,120 --> 01:31:17,120
Moment. Hä?

1502
01:31:17,120 --> 01:31:20,940
Deref ist gar nicht

1503
01:31:20,940 --> 01:31:22,940
importiert. Okay. Nice.

1504
01:31:22,940 --> 01:31:30,990
Das gibt's überhaupt nicht.

1505
01:31:30,990 --> 01:31:32,990
Output is not

1506
01:31:32,990 --> 01:31:34,990
member.

1507
01:31:34,990 --> 01:31:36,990
Implement members. Ja, ganz toll.

1508
01:31:36,990 --> 01:31:38,990
Target. Heißt das jetzt

1509
01:31:38,990 --> 01:31:40,990
Target? Wurde das umbenannt oder wie?

1510
01:31:40,990 --> 01:31:46,740
Moment. Was macht

1511
01:31:46,740 --> 01:31:48,740
deref eigentlich?

1512
01:31:48,740 --> 01:31:54,030
Deref. Rust.

1513
01:31:54,030 --> 01:31:56,030
Was zum...

1514
01:31:56,030 --> 01:31:58,030
Alter. Ich will einfach nur

1515
01:31:58,030 --> 01:32:00,030
ne Schleife da drüber machen

1516
01:32:00,030 --> 01:32:06,100
können, man.

1517
01:32:06,100 --> 01:32:08,100
Ist das so kompliziert in fucking Rust

1518
01:32:08,100 --> 01:32:14,160
ne Schleife zu machen?

1519
01:32:14,160 --> 01:32:16,160
Type targets.

1520
01:32:16,160 --> 01:32:18,160
Target self.

1521
01:32:18,160 --> 01:32:25,380
Okay. Okay.

1522
01:32:25,380 --> 01:32:27,380
Type t.

1523
01:32:27,380 --> 01:32:29,380
Type t. Okay.

1524
01:32:29,380 --> 01:32:31,380
Type t. Sehr gut. Sehr gut. Exzellent.

1525
01:32:31,380 --> 01:32:33,380
Deref.

1526
01:32:33,380 --> 01:32:35,380
Self target.

1527
01:32:37,380 --> 01:32:39,380
Aus welchen Gründen auch immer.

1528
01:32:39,380 --> 01:32:41,380
Reference.

1529
01:32:41,380 --> 01:32:44,880
Und jetzt self store.

1530
01:32:44,880 --> 01:32:55,620
Was ich programmiere?

1531
01:32:55,620 --> 01:32:57,620
Eine Schleife in Rust.

1532
01:32:57,620 --> 01:32:59,620
Für nen eigenen Typ. Aber

1533
01:32:59,620 --> 01:33:01,620
aus irgendwelchen Gründen mag

1534
01:33:01,620 --> 01:33:03,620
Rust das nicht wirklich.

1535
01:33:03,620 --> 01:33:05,620
Also.

1536
01:33:07,620 --> 01:33:09,620
Und jetzt?

1537
01:33:09,620 --> 01:33:11,620
Store unwrap.

1538
01:33:11,620 --> 01:33:13,620
Self store get.

1539
01:33:13,620 --> 01:33:15,620
Hä? Sekunde.

1540
01:33:15,620 --> 01:33:17,620
Bin verwirrt.

1541
01:33:17,620 --> 01:33:21,250
Self store read.

1542
01:33:21,250 --> 01:33:23,250
Ach read. Read.

1543
01:33:23,250 --> 01:33:31,100
Unwrap.

1544
01:33:31,100 --> 01:33:38,000
Das wird so nicht funktionieren.

1545
01:33:38,000 --> 01:33:40,000
Expected but found it.

1546
01:33:40,000 --> 01:33:42,000
Mann.

1547
01:33:42,000 --> 01:33:51,200
Wofür machst du das überhaupt?

1548
01:33:51,200 --> 01:33:53,200
Lass die wrapper Funktion weg.

1549
01:33:53,200 --> 01:33:55,200
Ich will ne Schleife machen da drüber.

1550
01:33:55,200 --> 01:33:59,470
Mann. Und das geht ja nicht.

1551
01:33:59,470 --> 01:34:01,470
Irgendwie hier

1552
01:34:01,470 --> 01:34:03,470
muss der Kram ja da drankommen.

1553
01:34:03,470 --> 01:34:07,300
Am liebsten

1554
01:34:07,300 --> 01:34:09,300
hätte ich

1555
01:34:09,300 --> 01:34:11,300
ne Funktion, die irgendwie all oder so

1556
01:34:11,300 --> 01:34:17,040
heißt. Deref hat nix

1557
01:34:17,040 --> 01:34:19,040
mit ner Schleife zu tun. Laut Stack Overflow

1558
01:34:19,040 --> 01:34:21,040
schon. Hier will auch ein Typ ne Schleife

1559
01:34:21,040 --> 01:34:23,040
machen. Und das

1560
01:34:23,040 --> 01:34:25,040
legt vor, dass man das entweder so macht

1561
01:34:25,040 --> 01:34:27,040
so macht oder so macht.

1562
01:34:27,040 --> 01:34:29,040
Moment.

1563
01:34:29,040 --> 01:34:31,040
Der Typ

1564
01:34:31,040 --> 01:34:33,040
transferiert. Ne der Typ

1565
01:34:33,040 --> 01:34:38,340
der Typ ähm. Warte

1566
01:34:38,340 --> 01:34:42,290
mal. Was hatten wir da vor?

1567
01:34:42,290 --> 01:34:48,030
Moment. Wie hatten wir das gerade

1568
01:34:48,030 --> 01:34:53,840
nochmal hier unten?

1569
01:34:53,840 --> 01:34:58,370
Iterator next. Ne.

1570
01:34:58,370 --> 01:35:00,370
Hab ich doch. Das ist doch das allererste

1571
01:35:00,370 --> 01:35:02,370
was ich gemacht hab hier unten. Das funktioniert

1572
01:35:02,370 --> 01:35:04,370
nicht.

1573
01:35:04,370 --> 01:35:08,000
Das funktioniert nicht.

1574
01:35:08,000 --> 01:35:10,000
Das allererste was ich probiert hab. Das

1575
01:35:10,000 --> 01:35:15,940
klappt nicht. Ich mein kann ich nicht

1576
01:35:15,940 --> 01:35:17,940
kann ich nicht einfach sowas hier machen?

1577
01:35:17,940 --> 01:35:23,940
Wir klauen

1578
01:35:23,940 --> 01:35:28,210
das jetzt einfach von hier.

1579
01:35:28,210 --> 01:35:30,210
Da sagt er bestimmt, dass es nicht matcht oder?

1580
01:35:30,210 --> 01:35:33,900
Er ist ein incompatibel

1581
01:35:33,900 --> 01:35:39,580
Typ. Was ist das da

1582
01:35:39,580 --> 01:35:43,020
vorne überhaupt? Kann das mal weg?

1583
01:35:43,020 --> 01:35:46,340
Er ist inkompatibel. Okay.

1584
01:35:46,340 --> 01:35:48,340
Moment. T. Moment. Moment.

1585
01:35:48,340 --> 01:35:50,340
Moment. Moment. Moment. Target T ergibt ja

1586
01:35:50,340 --> 01:35:52,340
auch überhaupt keinen Sinn.

1587
01:35:52,340 --> 01:35:54,340
Target ist

1588
01:35:54,340 --> 01:35:56,340
was? Target? Ne Output.

1589
01:35:56,340 --> 01:35:58,340
Was? Das stimmt doch nicht nochmal

1590
01:35:58,340 --> 01:36:06,130
überhaupt hier. Target ist

1591
01:36:06,130 --> 01:36:25,820
was? Target ist das

1592
01:36:25,820 --> 01:36:29,200
was man zurück gibt oder?

1593
01:36:29,200 --> 01:36:31,200
Also im Prinzip

1594
01:36:31,200 --> 01:36:36,110
ein

1595
01:36:36,110 --> 01:36:40,830
Was haben wir denn hier bei?

1596
01:36:40,830 --> 01:36:52,340
Bei Keys? What the fuck man?

1597
01:36:52,340 --> 01:36:54,340
Was beim ersten Ansatz

1598
01:36:54,340 --> 01:36:56,340
mit der Hashmap. Du meinst das da unten?

1599
01:36:56,340 --> 01:36:58,340
Was den

1600
01:36:58,340 --> 01:37:00,340
Iterator muss ich klonen? Man kann den

1601
01:37:00,340 --> 01:37:05,630
klonen? Okay. Nice.

1602
01:37:05,630 --> 01:37:09,460
I? Ne.

1603
01:37:09,460 --> 01:37:11,460
Ne. Ne. Ne.

1604
01:37:15,460 --> 01:37:25,200
Nope.

1605
01:37:25,200 --> 01:37:27,200
Du musst die Referenz zur Hashmap klonen.

1606
01:37:27,200 --> 01:37:29,200
Die was bitte? Die Referenz?

1607
01:37:29,200 --> 01:37:32,960
Was soll ich

1608
01:37:32,960 --> 01:37:40,940
klonen?

1609
01:37:40,940 --> 01:37:42,940
M.Clone

1610
01:37:42,940 --> 01:37:44,940
Ja Moment. Dann klone ich die Hashmap.

1611
01:37:44,940 --> 01:37:46,940
Das will ich doch nicht.

1612
01:37:46,940 --> 01:37:48,940
Ich will doch nicht die Hash...

1613
01:37:48,940 --> 01:37:50,940
Das ist doch das allererste was ich gemacht hab.

1614
01:37:50,940 --> 01:37:52,940
Das ist doch das allererste was ich gemacht hab.

1615
01:37:52,940 --> 01:37:54,940
Dass das geht ist klar aber dann

1616
01:37:54,940 --> 01:37:56,940
erstellt er doch eine neue Hashmap.

1617
01:37:56,940 --> 01:37:58,940
Das ist doch komplett für den Arsch.

1618
01:37:58,940 --> 01:38:00,940
Der soll keine neue Hashmap erstellen.

1619
01:38:00,940 --> 01:38:02,940
Das ist doch das allererste was ich gemacht hab.

1620
01:38:02,940 --> 01:38:04,940
Das hat auch funktioniert.

1621
01:38:04,940 --> 01:38:06,940
Aber das ist doch bescheuert.

1622
01:38:06,940 --> 01:38:08,940
Ich will doch nicht eine komplett neue Hashmap

1623
01:38:08,940 --> 01:38:10,940
anlegen wenn ich einfach nur die Elemente

1624
01:38:10,940 --> 01:38:12,940
durchlaufen will von einer schon bestehenden Hashmap.

1625
01:38:12,940 --> 01:38:14,940
Warum soll ich das machen?

1626
01:38:14,940 --> 01:38:16,940
Das funktioniert.

1627
01:38:16,940 --> 01:38:18,940
Das habe ich schon ausprobiert. Das funktioniert.

1628
01:38:18,940 --> 01:38:22,510
Guck das geht.

1629
01:38:22,510 --> 01:38:24,510
Das ist das allererste was ich gemacht hab.

1630
01:38:24,510 --> 01:38:26,510
Ich will ne Schleife

1631
01:38:26,510 --> 01:38:28,510
machen man.

1632
01:38:28,510 --> 01:38:30,510
Ne Schleife. Eine stinknormale

1633
01:38:30,510 --> 01:38:32,510
Schleife über nen Customtyp.

1634
01:38:32,510 --> 01:38:34,510
Und ich hab keine Ahnung wie man das in Rust

1635
01:38:34,510 --> 01:38:42,370
gescheit macht. Also das ist schon mal

1636
01:38:42,370 --> 01:38:47,920
nix. Ja genau.

1637
01:38:47,920 --> 01:38:49,920
Ich will ne Schleife machen. Guck ich will

1638
01:38:49,920 --> 01:38:51,920
vor...

1639
01:38:51,920 --> 01:38:53,920
Keine Ahnung. Vor Blub in...

1640
01:38:53,920 --> 01:38:55,920
Alter.

1641
01:38:55,920 --> 01:38:57,920
Das will ich machen können. Okay?

1642
01:38:57,920 --> 01:38:59,920
So und das geht nicht.

1643
01:38:59,920 --> 01:39:01,920
Weil it's not a iterator.

1644
01:39:01,920 --> 01:39:03,920
Okay alles klar.

1645
01:39:03,920 --> 01:39:05,920
Iterator implementieren.

1646
01:39:05,920 --> 01:39:07,920
Habe ich absolut keine Ahnung gehabt.

1647
01:39:07,920 --> 01:39:13,220
Was der von mir will.

1648
01:39:13,220 --> 01:39:15,220
Und was sie hier auch immer mit deref

1649
01:39:15,220 --> 01:39:17,220
wollen. Ich habe auch keine Ahnung.

1650
01:39:17,220 --> 01:39:19,220
Okay wir machen jetzt einfach mal.

1651
01:39:19,220 --> 01:39:21,220
Wir suchen jetzt. Rust deref

1652
01:39:21,220 --> 01:39:23,220
Vector

1653
01:39:23,220 --> 01:39:25,220
wrapped

1654
01:39:25,220 --> 01:39:27,220
Was hast du lieber?

1655
01:39:27,220 --> 01:39:29,220
C++ oder Rust?

1656
01:39:29,220 --> 01:39:31,220
Auf keinen Fall C++.

1657
01:39:31,220 --> 01:39:33,220
Aber Rust in dem Fall jetzt gerade auch nicht.

1658
01:39:33,220 --> 01:39:35,220
How to create a new

1659
01:39:35,220 --> 01:39:37,220
instance of wrapped vector in Rust.

1660
01:39:37,220 --> 01:39:43,600
Oh was ist das?

1661
01:39:43,600 --> 01:39:53,120
5 hat time.

1662
01:39:53,120 --> 01:39:55,120
After the creation of such an object you can use

1663
01:39:55,120 --> 01:39:57,120
the object somewhat transparently by

1664
01:39:57,120 --> 01:39:59,120
implementing deref.

1665
01:39:59,120 --> 01:40:01,120
Moment hier ist target.

1666
01:40:01,120 --> 01:40:03,120
Wait a minute.

1667
01:40:03,120 --> 01:40:05,120
Hier ist target

1668
01:40:05,120 --> 01:40:07,120
nicht T.

1669
01:40:07,120 --> 01:40:17,950
Sondern. Moment.

1670
01:40:17,950 --> 01:40:19,950
Return self store.

1671
01:40:19,950 --> 01:40:21,950
Ne und.

1672
01:40:21,950 --> 01:40:26,100
Und self store.

1673
01:40:26,100 --> 01:40:30,300
Moin Kirolo.

1674
01:40:30,300 --> 01:40:33,620
Was für ein Typ ist das jetzt?

1675
01:40:33,620 --> 01:40:35,620
Kann er nicht mal den Typ davon ordentlich ableiten?

1676
01:40:35,620 --> 01:40:37,620
Oder was?

1677
01:40:37,620 --> 01:40:39,620
Das ist ein hier.

1678
01:40:39,620 --> 01:40:41,620
RwLogHashMap irgendwas.

1679
01:40:41,620 --> 01:40:43,620
Aber und. Und okay.

1680
01:40:43,620 --> 01:40:48,980
Jaja.

1681
01:40:48,980 --> 01:40:50,980
So.

1682
01:40:50,980 --> 01:40:54,740
Shit. Fast. Fast.

1683
01:40:54,740 --> 01:40:59,580
Äh.

1684
01:40:59,580 --> 01:41:05,460
RwLogHashMap.

1685
01:41:05,460 --> 01:41:09,730
Ah ne.

1686
01:41:09,730 --> 01:41:11,730
Und self.

1687
01:41:11,730 --> 01:41:16,700
Kann ich nicht einfach so das

1688
01:41:16,700 --> 01:41:18,700
ganze Ding returnen?

1689
01:41:18,700 --> 01:41:22,850
Ne das geht nicht.

1690
01:41:22,850 --> 01:41:24,850
Über den internen.

1691
01:41:24,850 --> 01:41:26,850
Über meine interne HashMap.

1692
01:41:26,850 --> 01:41:28,850
Ich hab eine interne HashMap

1693
01:41:28,850 --> 01:41:30,850
gerappt quasi in einem eigenen

1694
01:41:30,850 --> 01:41:32,850
Struct und ich will über meinen Struct iteraten.

1695
01:41:32,850 --> 01:41:34,850
So. Angeblich stimmt das so.

1696
01:41:34,850 --> 01:41:36,850
Ne natürlich.

1697
01:41:36,850 --> 01:41:56,350
Was?

1698
01:41:56,350 --> 01:41:58,350
Ey super.

1699
01:41:58,350 --> 01:42:00,350
Jetzt kompiliert er so eine Fehler aber.

1700
01:42:00,350 --> 01:42:02,350
Gehen. Gehen tut es trotzdem

1701
01:42:02,350 --> 01:42:23,970
nicht.

1702
01:42:23,970 --> 01:42:33,810
Und die Funktion gibt es hier nicht.

1703
01:42:33,810 --> 01:42:35,810
Okay und was war jetzt der Sinn davon?

1704
01:42:35,810 --> 01:42:37,810
Gibt es wenigstens D-Ref? Ah D-Ref gibt es okay.

1705
01:42:37,810 --> 01:42:49,440
Wait a minute.

1706
01:42:49,440 --> 01:42:56,530
Was? Ich weiß nicht ob ich D-Ref brauche.

1707
01:42:56,530 --> 01:42:58,530
Das hat irgendjemand aus Sega overflow

1708
01:42:58,530 --> 01:43:20,210
vorgeschlagen.

1709
01:43:20,210 --> 01:43:24,420
Und jetzt? Ey Leute ich hab keine Ahnung

1710
01:43:24,420 --> 01:43:26,420
was das für ein Scheiß.

1711
01:43:26,420 --> 01:43:32,480
Übrigens Rotzsprache alter.

1712
01:43:32,480 --> 01:43:34,480
Was? Read?

1713
01:43:34,480 --> 01:43:36,480
Und was will

1714
01:43:36,480 --> 01:43:38,480
er hier von mir? Read?

1715
01:43:38,480 --> 01:43:40,480
Log Result?

1716
01:43:40,480 --> 01:43:42,480
Achso.

1717
01:43:42,480 --> 01:43:44,480
Moment.

1718
01:43:44,480 --> 01:43:48,180
Moment. Weil ich.

1719
01:43:48,180 --> 01:43:52,000
Wait a minute.

1720
01:43:52,000 --> 01:43:54,000
Weil ich ja das

1721
01:43:54,000 --> 01:43:57,630
returne mit dem Log.

1722
01:43:57,630 --> 01:43:59,630
Sag bloß wenn das ja. Wait a minute.

1723
01:43:59,630 --> 01:44:01,630
Ich wollte mir jetzt erzählen. Das funktioniert oder was?

1724
01:44:01,630 --> 01:44:03,630
Haha.

1725
01:44:03,630 --> 01:44:05,630
What the fuck?

1726
01:44:05,630 --> 01:44:17,330
Ich hab. Alter.

1727
01:44:17,330 --> 01:44:19,330
Was bin ich sehend

1728
01:44:19,330 --> 01:44:21,330
überhaupt man?

1729
01:44:21,330 --> 01:44:24,770
Das geht auf jeden Fall besser.

1730
01:44:24,770 --> 01:44:26,770
Ich hab keine Ahnung was das überhaupt.

1731
01:44:26,770 --> 01:44:28,770
Was mir das überhaupt sagen soll.

1732
01:44:28,770 --> 01:44:33,940
What the fuck?

1733
01:44:33,940 --> 01:44:35,940
What?

1734
01:44:35,940 --> 01:44:47,060
Was ist der Hashmap iter?

1735
01:44:47,060 --> 01:44:49,060
Naja, ein Iterator über die Typ in der Hashmap.

1736
01:44:49,060 --> 01:44:53,970
Also der Typ ist das hier.

1737
01:44:53,970 --> 01:44:55,970
Guck das da.

1738
01:44:55,970 --> 01:44:59,860
Ich hab keine Ahnung was ich hier gemacht

1739
01:44:59,860 --> 01:45:01,860
habe, warum es kompiliert und was ich

1740
01:45:01,860 --> 01:45:03,860
jetzt. Was das überhaupt tut unter der Haube.

1741
01:45:03,860 --> 01:45:09,730
Okay.

1742
01:45:09,730 --> 01:45:11,730
What the fuck?

1743
01:45:11,730 --> 01:45:17,090
Ich versteh es auch nicht.

1744
01:45:17,090 --> 01:45:19,090
Macht dir nichts draus.

1745
01:45:19,090 --> 01:45:21,090
Was musst du? Okay. Chatgear

1746
01:45:21,090 --> 01:45:23,090
ist pfeifert. Ich glaube im Next von dem

1747
01:45:23,090 --> 01:45:25,090
Iterator implementierst du nur

1748
01:45:25,090 --> 01:45:27,090
arg s ref.

1749
01:45:27,090 --> 01:45:29,090
Okay. Done. Wenn ich das nur

1750
01:45:29,090 --> 01:45:31,090
nur das machen muss. Easy.

1751
01:45:31,090 --> 01:45:34,850
Es holt

1752
01:45:34,850 --> 01:45:36,850
den rwLog, umwrapped den readAxis

1753
01:45:36,850 --> 01:45:38,850
iteriert. Ja, ja, ja.

1754
01:45:38,850 --> 01:45:40,850
Im Prinzip habe ich damit die Hash

1755
01:45:40,850 --> 01:45:42,850
Im Prinzip könnte ich auch

1756
01:45:42,850 --> 01:45:44,850
so

1757
01:45:44,850 --> 01:45:46,850
Das ist nichts anderes wie

1758
01:45:46,850 --> 01:45:48,850
direkt auf die

1759
01:45:48,850 --> 01:45:50,850
Struct Variable zugreifen im Endeffekt.

1760
01:45:50,850 --> 01:45:52,850
Also eigentlich komplett unsinnig.

1761
01:45:52,850 --> 01:45:59,870
Okay.

1762
01:45:59,870 --> 01:46:01,870
Implement Iterator for Registry.

1763
01:46:01,870 --> 01:46:07,740
So, was muss ich?

1764
01:46:07,740 --> 01:46:09,740
Arg s ref.

1765
01:46:09,740 --> 01:46:11,740
Was? Wo?

1766
01:46:11,740 --> 01:46:13,740
Wie? Wo muss ich

1767
01:46:13,740 --> 01:46:17,630
hier was machen?

1768
01:46:17,630 --> 01:46:19,630
Arg s ref. HashMap fällt

1769
01:46:19,630 --> 01:46:21,630
vom Struct. Okay. Arg s.

1770
01:46:21,630 --> 01:46:23,630
Alles klar. Easy. Easy.

1771
01:46:23,630 --> 01:46:25,630
Arg s ref

1772
01:46:25,630 --> 01:46:27,630
self

1773
01:46:27,630 --> 01:46:29,630
store

1774
01:46:29,630 --> 01:46:34,930
ähm

1775
01:46:34,930 --> 01:46:36,930
read

1776
01:46:36,930 --> 01:46:41,460
unwrap

1777
01:46:41,460 --> 01:46:43,460
Mäh.

1778
01:46:43,460 --> 01:46:45,460
Das funktioniert

1779
01:46:45,460 --> 01:46:47,460
nicht. Chat, ich bin froh, dass ihr auch

1780
01:46:47,460 --> 01:46:49,460
nicht schlauer seid wie ich, was das angeht.

1781
01:46:49,460 --> 01:46:51,460
Also hier weiß ich auch noch nicht mal,

1782
01:46:51,460 --> 01:46:53,460
was die Referenz überhaupt ist.

1783
01:46:53,460 --> 01:46:55,460
Es ist

1784
01:46:55,460 --> 01:46:57,460
b auf unknown.

1785
01:46:57,460 --> 01:46:59,460
Alles klar, ja.

1786
01:46:59,460 --> 01:47:03,150
Ich meine, es kann doch

1787
01:47:03,150 --> 01:47:05,150
nicht so schwer sein.

1788
01:47:05,150 --> 01:47:12,750
Das hier ist die HashMap

1789
01:47:12,750 --> 01:47:14,750
doch.

1790
01:47:14,750 --> 01:47:16,750
Ah ne, das ist das VamaletMap.

1791
01:47:16,750 --> 01:47:18,750
Gleich.

1792
01:47:18,750 --> 01:47:20,750
Ah ne, das ist die rwLogGuard.

1793
01:47:20,750 --> 01:47:22,750
Ähm.

1794
01:47:22,750 --> 01:47:24,750
Das da ist die HashMap.

1795
01:47:24,750 --> 01:47:26,750
Zumindest eine Referenz

1796
01:47:26,750 --> 01:47:30,510
auf die HashMap.

1797
01:47:30,510 --> 01:47:32,510
Aber das checkt er trotzdem nicht.

1798
01:47:32,510 --> 01:47:34,510
Mismatch.

1799
01:47:34,510 --> 01:47:36,510
ExpectedArg.

1800
01:47:36,510 --> 01:47:39,820
Was? Was? Was?

1801
01:47:39,820 --> 01:47:41,820
Was expected er?

1802
01:47:41,820 --> 01:47:43,820
Expected und? Ne, ne, ne.

1803
01:47:43,820 --> 01:47:47,650
Okay, so funktioniert das schon mal nicht.

1804
01:47:47,650 --> 01:47:49,650
Chat, ne, ne, ne.

1805
01:47:49,650 --> 01:47:51,650
So klappt das nicht.

1806
01:47:51,650 --> 01:47:53,650
Ich hab

1807
01:47:53,650 --> 01:47:55,650
wirklich keine Ahnung, wie es funktioniert.

1808
01:47:55,650 --> 01:47:57,650
Echt nicht. Kein Schimmer.

1809
01:47:57,650 --> 01:48:03,330
Okay, wir suchen nochmal

1810
01:48:03,330 --> 01:48:05,330
stackr. Rust iterator.

1811
01:48:05,330 --> 01:48:07,330
Implement

1812
01:48:07,330 --> 01:48:09,330
iterator Rust.

1813
01:48:09,330 --> 01:48:11,330
Iterators.

1814
01:48:11,330 --> 01:48:13,330
Rust by example.

1815
01:48:13,330 --> 01:48:15,330
Ja, das, Moment. Das Exampel habe ich ja schon

1816
01:48:15,330 --> 01:48:17,330
wrapped

1817
01:48:17,330 --> 01:48:24,930
HashMap. So.

1818
01:48:24,930 --> 01:48:26,930
Okay, genau das. Hier.

1819
01:48:26,930 --> 01:48:28,930
Der hat eine HashMap in einem struct.

1820
01:48:28,930 --> 01:48:30,930
Und jetzt will er für sein

1821
01:48:30,930 --> 01:48:37,950
struct.

1822
01:48:37,950 --> 01:48:39,950
Jetzt will er für sein struct

1823
01:48:39,950 --> 01:48:49,380
äh, response.

1824
01:48:49,380 --> 01:48:51,380
Ah, response headers.

1825
01:48:51,380 --> 01:48:54,940
Will er das? Okay.

1826
01:48:54,940 --> 01:48:56,940
Genau das. Im Prinzip genau

1827
01:48:56,940 --> 01:48:58,940
das, was

1828
01:48:58,940 --> 01:49:00,940
was ich auch machen will.

1829
01:49:00,940 --> 01:49:02,940
You are doing

1830
01:49:02,940 --> 01:49:04,940
right. Was?

1831
01:49:04,940 --> 01:49:06,940
What you are doing right now is delegating to

1832
01:49:06,940 --> 01:49:08,940
the into iterator implement.

1833
01:49:08,940 --> 01:49:10,940
But you need to delegate to the

1834
01:49:10,940 --> 01:49:12,940
into iterator implementation

1835
01:49:12,940 --> 01:49:14,940
of on HashMap

1836
01:49:14,940 --> 01:49:16,940
string. Because

1837
01:49:16,940 --> 01:49:18,940
you can't get

1838
01:49:18,940 --> 01:49:20,940
an own version. Ja, ja, ja.

1839
01:49:20,940 --> 01:49:22,940
This is easy to fix.

1840
01:49:22,940 --> 01:49:24,940
Thankfully. Leute.

1841
01:49:24,940 --> 01:49:26,940
Easy.

1842
01:49:26,940 --> 01:49:32,620
Es ist easy to fix.

1843
01:49:32,620 --> 01:49:34,620
Alles klar.

1844
01:49:34,620 --> 01:49:40,820
Easy to fix.

1845
01:49:40,820 --> 01:49:42,820
Dann machen wir das doch mal. Easy to fix.

1846
01:49:42,820 --> 01:49:44,820
Let's go. Easy.

1847
01:49:44,820 --> 01:49:46,820
And for

1848
01:49:46,820 --> 01:49:48,820
ähm

1849
01:49:48,820 --> 01:49:50,820
Wait a minute.

1850
01:49:50,820 --> 01:49:52,820
For registry

1851
01:49:52,820 --> 01:49:58,460
of T.

1852
01:49:58,460 --> 01:50:00,460
Okay.

1853
01:50:00,460 --> 01:50:02,460
Was ist das eigentlich

1854
01:50:02,460 --> 01:50:06,100
für hässliche Sachen wieder?

1855
01:50:06,100 --> 01:50:08,100
Irgendwelche Lifetime Sachen. Okay.

1856
01:50:08,100 --> 01:50:10,100
ItemType.

1857
01:50:10,100 --> 01:50:16,800
Ach, hier oben.

1858
01:50:16,800 --> 01:50:18,800
HeaderMap.

1859
01:50:18,800 --> 01:50:20,800
ItemType ist

1860
01:50:20,800 --> 01:50:22,800
Hash. Okay. Ich kopiere das mal.

1861
01:50:22,800 --> 01:50:24,800
U32 of T.

1862
01:50:24,800 --> 01:50:26,800
Ja, gut. Das ähm.

1863
01:50:26,800 --> 01:50:32,930
Das funktioniert so nicht.

1864
01:50:32,930 --> 01:50:34,930
Not member of. Okay.

1865
01:50:34,930 --> 01:50:36,930
Kann man das vielleicht

1866
01:50:36,930 --> 01:50:38,930
hier irgendwie reinpappen? Nein.

1867
01:50:38,930 --> 01:50:40,930
Kann man das irgendwie

1868
01:50:40,930 --> 01:50:42,930
äh hier reinpappen?

1869
01:50:42,930 --> 01:50:44,930
Nein.

1870
01:50:44,930 --> 01:50:46,930
Okay. Es ist ja auch wurscht.

1871
01:50:46,930 --> 01:50:48,930
Wir können das copy-pasten.

1872
01:50:48,930 --> 01:50:54,860
Was ich da mache, das frage ich mich auch.

1873
01:50:54,860 --> 01:50:56,860
HeaderMap.

1874
01:50:56,860 --> 01:50:58,860
Okay. Okay. Das ist okay. Alles klar.

1875
01:50:58,860 --> 01:51:00,860
Okay.

1876
01:51:00,860 --> 01:51:02,860
Ja. Nice. Nice. Nice.

1877
01:51:02,860 --> 01:51:04,860
Okay. Ja.

1878
01:51:04,860 --> 01:51:06,860
Und self.

1879
01:51:06,860 --> 01:51:08,860
Okay.

1880
01:51:08,860 --> 01:51:10,860
Self. Store.

1881
01:51:10,860 --> 01:51:12,860
Read.

1882
01:51:12,860 --> 01:51:17,260
Unwrap.

1883
01:51:17,260 --> 01:51:23,900
Ey, das wäre jetzt zu einfach, wenn es funktioniert.

1884
01:51:23,900 --> 01:51:25,900
Ist das hier überhaupt die Map?

1885
01:51:25,900 --> 01:51:27,900
Map gleich.

1886
01:51:27,900 --> 01:51:29,900
Ey, wir brauchen

1887
01:51:29,900 --> 01:51:40,380
wieder hier.

1888
01:51:40,380 --> 01:51:42,380
Und jetzt. Moment. Jetzt brauche ich doch eigentlich.

1889
01:51:42,380 --> 01:51:48,380
Das wäre jetzt viel zu einfach, wenn

1890
01:51:48,380 --> 01:51:50,380
das funktioniert.

1891
01:51:50,380 --> 01:51:52,380
ItemMismatch.

1892
01:51:52,380 --> 01:51:56,660
Ne, ne.

1893
01:51:56,660 --> 01:51:58,660
Der Store ist nicht die HashMap.

1894
01:51:58,660 --> 01:52:02,290
Der Store ist ein RwLog.

1895
01:52:02,290 --> 01:52:04,290
Was?

1896
01:52:06,290 --> 01:52:08,290
Ah.

1897
01:52:08,290 --> 01:52:10,290
Siehste?

1898
01:52:10,290 --> 01:52:12,290
Hab's ja auch verkehrt gemacht.

1899
01:52:12,290 --> 01:52:28,660
Äh.

1900
01:52:28,660 --> 01:52:30,660
Aber. Aber.

1901
01:52:30,660 --> 01:52:45,490
Warum geht das jetzt nicht?

1902
01:52:45,490 --> 01:52:55,780
Wieder genau der gleiche

1903
01:52:55,780 --> 01:52:59,410
Scheiß wie vorher, Mann.

1904
01:52:59,410 --> 01:53:04,510
Was will er hier jetzt?

1905
01:53:04,510 --> 01:53:06,510
TemporaryValueCreated

1906
01:53:06,510 --> 01:53:12,320
Ja und?

1907
01:53:12,320 --> 01:53:36,560
Was will er?

1908
01:53:36,560 --> 01:53:38,560
Das kann doch nicht so schwer sein.

1909
01:53:40,560 --> 01:53:42,560
Meine Fresse, Alter.

1910
01:53:42,560 --> 01:53:44,560
Ich will eine Schleife machen.

1911
01:53:44,560 --> 01:53:50,430
Ich meine.

1912
01:53:50,430 --> 01:53:52,430
Ich bin ja froh, dass das easy to fix ist.

1913
01:53:52,430 --> 01:54:00,160
Glücklicherweise

1914
01:54:00,160 --> 01:54:40,340
ist es easy to fix.

1915
01:54:40,340 --> 01:54:42,340
Ich weiß nicht, was das von mir

1916
01:54:42,340 --> 01:54:55,760
will, Mann.

1917
01:54:55,760 --> 01:55:00,610
Es ist ja noch nicht mal AsyncRust.

1918
01:55:00,610 --> 01:55:05,840
Und?

1919
01:55:05,840 --> 01:55:07,840
Echt. Ich hab. Ich hab. Seriously.

1920
01:55:07,840 --> 01:55:11,220
Ich hab keinen blassen Schimmer.

1921
01:55:11,220 --> 01:55:13,220
SetCursorOfHashMap.

1922
01:55:13,220 --> 01:55:17,940
I'm trying a simple thread.

1923
01:55:17,940 --> 01:55:19,940
SaveMemoryKeyValue.

1924
01:55:19,940 --> 01:55:21,940
My code looks like this.

1925
01:55:21,940 --> 01:55:28,450
Jeder macht.

1926
01:55:28,450 --> 01:55:30,450
Obviously. Simple. Implement.

1927
01:55:30,450 --> 01:55:35,100
Cursor.

1928
01:55:35,100 --> 01:55:37,100
Okay. Ist vielleicht.

1929
01:55:37,100 --> 01:55:46,690
Ich will die Werte nicht klonen, Mann.

1930
01:55:46,690 --> 01:55:48,690
Ich check die Antwort noch nicht mal.

1931
01:55:48,690 --> 01:55:52,580
Die Antwort ist mir

1932
01:55:52,580 --> 01:55:54,580
schon zu sick.

1933
01:55:54,580 --> 01:55:56,580
Okay.

1934
01:55:56,580 --> 01:56:00,590
Okay.

1935
01:56:00,590 --> 01:56:02,590
Okay.

1936
01:56:02,590 --> 01:56:04,590
Okay.

1937
01:56:04,590 --> 01:56:06,590
Okay.

1938
01:56:06,590 --> 01:56:18,610
Okay.

1939
01:56:18,610 --> 01:56:42,530
Okay.

1940
01:56:42,530 --> 01:56:44,530
Okay.

1941
01:56:44,530 --> 01:56:56,930
Okay.

1942
01:56:56,930 --> 01:57:02,290
Okay.

1943
01:57:02,290 --> 01:57:04,290
Okay.

1944
01:57:04,290 --> 01:57:09,900
Okay.

1945
01:57:09,900 --> 01:57:15,010
Okay.

1946
01:57:15,010 --> 01:57:17,010
Okay.

1947
01:57:17,010 --> 01:57:19,010
Okay.

1948
01:57:19,010 --> 01:57:21,010
Okay.

1949
01:57:21,010 --> 01:57:23,010
Okay.

1950
01:57:23,010 --> 01:57:25,010
Okay.

1951
01:57:25,010 --> 01:57:37,540
Okay.

1952
01:57:37,540 --> 01:57:39,540
Okay.

1953
01:57:39,540 --> 01:57:41,540
Okay.

1954
01:57:41,540 --> 01:57:45,420
Okay.

1955
01:57:45,420 --> 01:57:49,500
Okay.

1956
01:57:49,500 --> 01:57:51,500
Okay.

1957
01:57:51,500 --> 01:57:53,500
Okay.

1958
01:57:53,500 --> 01:57:55,500
Okay.

1959
01:57:55,500 --> 01:57:57,500
Okay.

1960
01:57:57,500 --> 01:57:59,500
Okay.

1961
01:57:59,500 --> 01:58:04,220
Okay.

1962
01:58:04,220 --> 01:58:06,220
Okay.

1963
01:58:06,220 --> 01:58:08,220
Okay.

1964
01:58:08,220 --> 01:58:10,220
Okay.

1965
01:58:10,220 --> 01:58:12,220
Okay.

1966
01:58:12,220 --> 01:58:30,700
Okay.

1967
01:58:30,700 --> 01:58:32,700
Okay.

1968
01:58:32,700 --> 01:58:34,700
Okay.

1969
01:58:34,700 --> 01:58:36,700
Okay.

1970
01:58:36,700 --> 01:58:38,700
Okay.

1971
01:58:38,700 --> 01:58:40,700
Okay.

1972
01:58:40,700 --> 01:58:42,700
Okay.

1973
01:58:42,700 --> 01:58:44,700
I'm trying a simple thread.

1974
01:58:44,700 --> 01:58:46,700
Eventually.

1975
01:58:46,700 --> 01:58:48,700
Es gibt übrigens viele Autos.

1976
01:58:48,700 --> 01:58:56,700
Welcher Datentyp wäre deiner Meinung nach besser geeignet an der Stelle als RWLOG von den vielen Threadsafe-Datentypen?

1977
01:58:56,700 --> 01:59:02,450
So, jetzt können wir hier sagen...

1978
01:59:02,450 --> 01:59:06,450
Jetzt funzt es. Ja, das ist klar, aber jetzt kopiert er das auch.

1979
01:59:06,450 --> 01:59:09,450
Das fuckt mich ultra ab, man.

1980
01:59:09,450 --> 01:59:12,450
Ich will wissen, wie das funktioniert.

1981
01:59:12,450 --> 01:59:24,930
Wir machen jetzt aber damit nicht weiter, sonst dreh ich echt am Rad.

1982
01:59:25,930 --> 01:59:27,930
Okay, Moment mal.

1983
01:59:27,930 --> 01:59:31,930
Chat, Chat, das ist genau das, was ich machen will.

1984
01:59:31,930 --> 01:59:33,930
A, B, D...

1985
01:59:33,930 --> 01:59:37,560
What?

1986
01:59:37,560 --> 01:59:39,560
What the f...

1987
01:59:39,560 --> 01:59:42,560
Ich verstehe noch nicht mal, was er fragte.

1988
01:59:42,560 --> 01:59:50,560
You can't solve this with naming your lifetimes, as this isn't really a lifetime problem, but a problem with ownership.

1989
01:59:50,560 --> 01:59:59,580
You can provide access to the HashMap and make the call values.

1990
01:59:59,580 --> 02:00:08,380
Ja, sowas in der Richtung habe ich ja auch schon gebaut.

1991
02:00:08,380 --> 02:00:16,980
Ich meine, das soll mir auch recht sein.

1992
02:00:16,980 --> 02:00:21,290
Trivial, trivial.

1993
02:00:21,290 --> 02:00:25,290
Because God-like FN-Trades don't exist.

1994
02:00:26,290 --> 02:00:30,290
Jetzt weiß ich, Leute, jetzt weiß ich, warum es nicht funktioniert, man.

1995
02:00:30,290 --> 02:00:33,290
Because God-like FN-Trades don't exist.

1996
02:00:33,290 --> 02:00:36,290
Hätte es mal gleich einer gesagt, Mensch.

1997
02:00:36,290 --> 02:00:40,290
Ich hoffe, euch ist jetzt auch alles klar.

1998
02:00:40,290 --> 02:00:43,290
Jetzt, obviously, jetzt ist alles logisch.

1999
02:00:43,290 --> 02:00:49,350
Ja, easy.

2000
02:00:49,350 --> 02:00:51,350
So, ich war mal...

2001
02:01:05,960 --> 02:01:08,960
Es leuchtet ein, ne? Es leuchtet komplett ein.

2002
02:01:08,960 --> 02:01:18,050
Achso, Moment. Item ist die HashMap.

2003
02:01:27,770 --> 02:01:32,940
Alter.

2004
02:01:52,990 --> 02:01:58,560
Guck mal, hier, Rust weiß noch nicht, was will ich? Map, Map.

2005
02:01:58,560 --> 02:02:01,560
It's not an iterator. Ja, ach, okay. Nice.

2006
02:02:01,560 --> 02:02:05,560
Sehr gut, sehr gut. Excellent. Jetzt weiß ich Bescheid, ja, man.

2007
02:02:05,560 --> 02:02:21,840
Cannot find. Moment, das gibt es überhaupt nicht?

2008
02:02:21,840 --> 02:02:24,840
Das gibt es einfach überhaupt nicht, was die hier vorschlagen.

2009
02:02:24,840 --> 02:02:30,500
Alter, was ist das für ein pp-iger Post, man?

2010
02:02:30,500 --> 02:02:33,500
LW-LogGuard gibt es über... Ach, Moment, das ist von ParkingLot.

2011
02:02:33,500 --> 02:02:36,500
Was auch immer ParkingLot ist.

2012
02:02:36,500 --> 02:02:39,500
Das ist die ParkingLot-LW-Guard, Mensch.

2013
02:02:39,500 --> 02:02:48,950
Ja, dann ist klar.

2014
02:02:48,950 --> 02:02:50,950
Ich glaube, ich weiß, wo...

2015
02:02:50,950 --> 02:02:59,960
Alles klar, scheiß drauf.

2016
02:02:59,960 --> 02:03:01,960
Jetzt nicht, jetzt nicht, Leute.

2017
02:03:01,960 --> 02:03:04,960
Jetzt nicht. Wir lassen es jetzt.

2018
02:03:04,960 --> 02:03:16,530
Da drehe ich ab bei...

2019
02:03:16,530 --> 02:03:21,670
Also, ich bin erstaunt,

2020
02:03:21,670 --> 02:03:24,670
dass das so krass kompliziert ist.

2021
02:03:24,670 --> 02:03:38,520
Okay, Rust Playground.

2022
02:03:38,520 --> 02:03:51,280
Ich mache jetzt nicht weiter.

2023
02:03:51,280 --> 02:03:54,280
Reicht dir das? Ja, Moment, Moment. Mal gucken.

2024
02:03:54,280 --> 02:03:57,280
Moment. Excellent, excellent. ChatGym macht mit.

2025
02:03:57,280 --> 02:04:06,900
Ich bin froh. Chat ist schlau.

2026
02:04:06,900 --> 02:04:11,470
Wo ist der Unterschied zu mir? Ah, hier.

2027
02:04:11,470 --> 02:04:14,470
Okay, was macht das jetzt?

2028
02:04:14,470 --> 02:04:17,470
Anders als meins?

2029
02:04:17,470 --> 02:04:20,470
Zwei, okay.

2030
02:04:20,470 --> 02:04:26,830
Store. Unwrap.

2031
02:04:26,830 --> 02:04:29,830
Okay, wirklich schön ist...

2032
02:04:29,830 --> 02:04:32,830
Da muss ich zumindest nicht klonen.

2033
02:04:32,830 --> 02:04:35,830
Das finde ich eigentlich ganz gut.

2034
02:04:35,830 --> 02:04:38,830
Da muss ich zumindest nicht klonen.

2035
02:04:38,830 --> 02:04:43,210
Und es funktioniert, oder?

2036
02:04:43,210 --> 02:04:48,160
Das ist gut. Das reicht mir.

2037
02:04:48,160 --> 02:04:56,060
Also, ich würde sagen, das reicht mir.

2038
02:04:56,060 --> 02:05:03,700
Das ist im Prinzip einfach noch mal gerappt.

2039
02:05:03,700 --> 02:05:06,700
Das ist die bisschen schönere Variante

2040
02:05:06,700 --> 02:05:09,700
wie von meinem geklonten.

2041
02:05:09,700 --> 02:05:12,700
Wofür ist denn hier vorne das Ding?

2042
02:05:12,700 --> 02:05:17,200
Kann man das wegmachen?

2043
02:05:17,200 --> 02:05:20,200
Anscheinend, okay. Ich weiß nicht, wofür das da ist.

2044
02:05:20,200 --> 02:05:25,920
Wofür ist das Ding? Eine Lifetime.

2045
02:05:25,920 --> 02:05:32,950
Aber Lifetime für was?

2046
02:05:32,950 --> 02:05:35,950
Lifetime, die ich sonst nirgendswo benutze, oder?

2047
02:05:35,950 --> 02:05:38,950
Lassen wir einfach mal weg.

2048
02:05:38,950 --> 02:05:45,730
Ja, das finde ich gut.

2049
02:05:45,730 --> 02:05:48,730
Alter, was ein Akt, Mann.

2050
02:05:48,730 --> 02:05:51,730
MonkaS.

2051
02:05:51,730 --> 02:05:59,240
MonkaS, Mann.

2052
02:05:59,240 --> 02:06:02,240
Okay, können wir jetzt eigentlich... Moment, Moment.

2053
02:06:02,240 --> 02:06:05,240
Ja, wir machen weiter, aber jetzt kommt ja noch was anderes,

2054
02:06:05,240 --> 02:06:18,260
was das Ding können soll.

2055
02:06:18,260 --> 02:06:24,230
Und zwar, es soll ja noch IDs berechnen können.

2056
02:06:24,230 --> 02:06:27,230
Wie könnten wir das mit der ID-Berechnung machen, Chat?

2057
02:06:27,230 --> 02:06:33,340
Habt ihr irgendeine klare Idee?

2058
02:06:33,340 --> 02:06:36,340
Also, wir könnten einfach random was generieren.

2059
02:06:36,340 --> 02:06:39,340
Das wäre eigentlich schön.

2060
02:06:39,340 --> 02:06:42,340
Ich meine, die Chance, dass was doppelt generiert wird,

2061
02:06:42,340 --> 02:06:45,340
bei meiner kleinen Anzahl.

2062
02:06:45,340 --> 02:06:48,340
UID ist raus, weil ich UID nur etwas komplizierter

2063
02:06:48,340 --> 02:06:51,340
hin- und herschieben kann über ein C-Interface.

2064
02:06:51,340 --> 02:06:54,340
Aber wir könnten...

2065
02:06:54,340 --> 02:06:59,930
Ich habe eine Idee, Leute.

2066
02:06:59,930 --> 02:07:02,930
Ich habe eine Idee, was wir machen können.

2067
02:07:02,930 --> 02:07:07,500
Was ist mit random oder einem Hash?

2068
02:07:07,500 --> 02:07:10,500
Ich hätte gerne lieber irgendeinen simplen Counter.

2069
02:07:10,500 --> 02:07:15,190
Okay, ich habe nämlich eine Idee,

2070
02:07:15,190 --> 02:07:18,190
wie wir das ganz einfach machen können.

2071
02:07:18,190 --> 02:07:21,190
Ich meine, unsere Keys sind U32.

2072
02:07:21,190 --> 02:07:24,190
Also, wir haben 4 Trillionen, was auch immer, Milliarden, sonst was.

2073
02:07:24,190 --> 02:07:27,190
Möglicher...

2074
02:07:27,190 --> 02:07:30,190
Ich weiß nicht, was U32 Max ist. Irgendwas mit einer 4 vorne.

2075
02:07:30,190 --> 02:07:33,190
Ah, das läuft.

2076
02:07:33,190 --> 02:07:36,190
Mögliche, mögliche IDs.

2077
02:07:36,190 --> 02:07:39,190
Wir machen mal so eine Funktion.

2078
02:07:39,190 --> 02:07:46,450
Wobei, brauchen wir nicht mal für.

2079
02:07:46,450 --> 02:07:49,450
Also, den Store.

2080
02:07:49,450 --> 02:07:52,450
Er ist hier.

2081
02:07:52,450 --> 02:07:55,450
Also, die ID.

2082
02:07:55,450 --> 02:08:00,340
Wir generieren die ID folgendermaßen.

2083
02:08:00,340 --> 02:08:05,540
Und zwar, wir checken einfach...

2084
02:08:05,540 --> 02:08:08,540
Ich habe eine Idee.

2085
02:08:08,540 --> 02:08:11,540
Ich muss mir nur kurz Gedanken drüber machen.

2086
02:08:11,540 --> 02:08:14,540
Wir machen eine Schleife.

2087
02:08:14,540 --> 02:08:17,540
Und wir lassen eine Schleife laufen.

2088
02:08:17,540 --> 02:08:20,540
Von 0 bis U32 Max.

2089
02:08:20,540 --> 02:08:23,540
Und die erste freie ID,

2090
02:08:23,540 --> 02:08:32,660
die noch nicht vergeben ist, nehmen wir.

2091
02:08:32,660 --> 02:08:35,660
Das müsste doch eigentlich gut funktionieren.

2092
02:08:35,660 --> 02:08:38,660
Nee? Warum nicht?

2093
02:08:38,660 --> 02:08:44,820
Warum ist das kacke?

2094
02:08:44,820 --> 02:08:49,580
Dann kannst du auch random nehmen.

2095
02:08:49,580 --> 02:08:52,580
Das bedeutet immer, dass ich eine Unique ID finde.

2096
02:08:52,580 --> 02:08:55,580
Bei random habe ich im Zweifelsfall...

2097
02:08:55,580 --> 02:08:58,580
Bei einem 32-Bit-Random habe ich im Zweifelsfall doppelte Werte.

2098
02:08:58,580 --> 02:09:08,020
Die Chancen sind gering.

2099
02:09:08,020 --> 02:09:11,020
Aber sie sind da.

2100
02:09:11,020 --> 02:09:18,660
Und mit einem Counter nicht.

2101
02:09:18,660 --> 02:09:21,660
Also, bei einem 32-Bit...

2102
02:09:21,660 --> 02:09:24,660
Das ist nicht impossible.

2103
02:09:24,660 --> 02:09:27,660
Bei einem 32-Bit-Int...

2104
02:09:27,660 --> 02:09:30,660
Hast du... Moment.

2105
02:09:30,660 --> 02:09:38,550
U32 Max.

2106
02:09:38,550 --> 02:09:41,550
Was ist denn das?

2107
02:09:41,550 --> 02:09:44,550
Das ist gar nicht mal so viel.

2108
02:09:44,550 --> 02:09:47,550
Das sind nur 4 Milliarden.

2109
02:09:47,550 --> 02:09:50,550
Wir haben nur 4 Milliarden...

2110
02:09:50,550 --> 02:09:53,550
mögliche...

2111
02:09:53,550 --> 02:09:56,550
IDs.

2112
02:09:56,550 --> 02:09:59,550
4 Milliarden bei 5 gleichzeitigen Connections...

2113
02:09:59,550 --> 02:10:02,550
ist die Chance auch sehr gering.

2114
02:10:02,550 --> 02:10:05,550
Aber nur mal von der Idee her...

2115
02:10:05,550 --> 02:10:08,550
Die Chancen sind gar nicht so klein.

2116
02:10:08,550 --> 02:10:12,990
Wir haben 5 Milliarden zufällige IDs.

2117
02:10:12,990 --> 02:10:15,990
Und ab der Hälfte...

2118
02:10:15,990 --> 02:10:18,990
Ab 2 Milliarden IDs...

2119
02:10:18,990 --> 02:10:21,990
ist die Chance über 50%...

2120
02:10:21,990 --> 02:10:24,990
dass die nächste generierte Random ID schon mal vorhanden ist.

2121
02:10:24,990 --> 02:10:27,990
Es sind einfach...

2122
02:10:27,990 --> 02:10:30,990
Es sind einfach in einem U32 zu wenig Platz.

2123
02:10:30,990 --> 02:10:38,310
Unix-Timestamp ist selbst in Millisekunden...

2124
02:10:38,310 --> 02:10:41,310
nicht unbedingt so sinnvoll an der Stelle.

2125
02:10:41,310 --> 02:10:44,310
Komm, wir machen mal das, was ich gesagt habe.

2126
02:10:44,310 --> 02:10:47,310
Also, wir machen eine Schleife.

2127
02:10:47,310 --> 02:10:50,310
Wir machen eine Schleife von...

2128
02:10:50,310 --> 02:10:58,340
Kann man nicht einfach zählen hier mit einer Schleife?

2129
02:10:58,340 --> 02:11:01,340
4i...

2130
02:11:01,340 --> 02:11:04,340
4i in...

2131
02:11:04,340 --> 02:11:07,340
U32 Max...

2132
02:11:07,340 --> 02:11:11,840
So, und jetzt...

2133
02:11:11,840 --> 02:11:19,740
Wir müssen das hier mal kurz unwrappen.

2134
02:11:19,740 --> 02:11:22,740
Hier oben schon.

2135
02:11:22,740 --> 02:11:25,740
If Map...

2136
02:11:25,740 --> 02:11:28,740
Da gibt es doch immer so Contains...

2137
02:11:28,740 --> 02:11:31,740
Contains Key i...

2138
02:11:31,740 --> 02:11:34,740
If Not Contains Key i...

2139
02:11:34,740 --> 02:11:39,880
Dann...

2140
02:11:39,880 --> 02:11:42,880
Das ist alles, was wir machen müssen.

2141
02:11:42,880 --> 02:11:48,090
Schon kriegen wir die erste freie ID.

2142
02:11:48,090 --> 02:11:51,090
Nee, das ist doch eigentlich gar nicht schlecht.

2143
02:11:51,090 --> 02:11:54,090
Weil das Schöne ist, die Verbindung...

2144
02:11:54,090 --> 02:11:57,090
Das ist ja nicht nur Add, Append Only.

2145
02:11:57,090 --> 02:12:00,090
Es können ja auch Sachen gelöscht werden.

2146
02:12:00,090 --> 02:12:03,090
Mal angenommen, der erzeugt 5 Verbindungen.

2147
02:12:03,090 --> 02:12:06,090
Irgendwann macht einer den Browser zu...

2148
02:12:06,090 --> 02:12:09,090
und die ersten 5 Verbindungen werden gelöscht.

2149
02:12:09,090 --> 02:12:12,090
0-5 wieder frei.

2150
02:12:12,090 --> 02:12:15,090
Und wenn das nächste Mal die Schleife läuft,

2151
02:12:15,090 --> 02:12:18,090
vergibt er IDs 0-5 neu.

2152
02:12:18,090 --> 02:12:21,090
Das dürfte immer ziemlich schnell laufen.

2153
02:12:21,090 --> 02:12:26,420
Übrigens Return i ist an der Stelle für Pegatime.

2154
02:12:26,420 --> 02:12:29,420
Leute, wie würde man das jetzt Rust...

2155
02:12:29,420 --> 02:12:32,420
Ich habe eine Idee.

2156
02:12:32,420 --> 02:12:35,420
Wir machen jetzt Rust Idiomatic Way das Ganze.

2157
02:12:35,420 --> 02:12:42,360
Match.

2158
02:12:43,360 --> 02:12:47,740
Ich habe keine Ahnung.

2159
02:12:47,740 --> 02:12:50,740
Ähm...

2160
02:12:50,740 --> 02:12:53,740
Da müssen wir...

2161
02:12:53,740 --> 02:13:06,300
Connectest du vielleicht dann so mit dem Sam...

2162
02:13:06,300 --> 02:13:11,700
Ähm...

2163
02:13:11,700 --> 02:13:14,700
Nee, weil einmal geschlossene Connections...

2164
02:13:14,700 --> 02:13:21,580
können glaube ich nicht mal neu aufgebaut werden.

2165
02:13:21,580 --> 02:13:24,580
Moin, für die nicht Programmierer unter uns sind.

2166
02:13:24,580 --> 02:13:27,580
Was wird programmiert?

2167
02:13:27,580 --> 02:13:30,580
Ein Rust WebRTC Backend.

2168
02:13:30,580 --> 02:13:33,580
Mit dem du alle deine Webcams im Browser...

2169
02:13:33,580 --> 02:13:36,580
in Echtzeit rein streamen kannst.

2170
02:13:36,580 --> 02:13:41,780
Also, wenn es denn dann funktioniert.

2171
02:13:41,780 --> 02:13:44,780
So, also.

2172
02:13:44,780 --> 02:13:47,780
Und wir lernen Rust dabei.

2173
02:13:47,780 --> 02:13:50,780
Also, guck mal.

2174
02:13:50,780 --> 02:13:53,780
Kann man hier so eine Art Range draus machen?

2175
02:13:53,780 --> 02:13:56,780
Range Rust.

2176
02:13:56,780 --> 02:14:04,070
So was hier.

2177
02:14:04,070 --> 02:14:07,070
Plammern.

2178
02:14:07,070 --> 02:14:10,070
Und jetzt sagen wir Eater.

2179
02:14:10,070 --> 02:14:13,070
Moment, das gibt es nicht.

2180
02:14:13,070 --> 02:14:16,070
Into Eater, soll mir auch recht sein.

2181
02:14:16,070 --> 02:14:19,070
Select.

2182
02:14:19,070 --> 02:14:25,460
Filter.

2183
02:14:25,460 --> 02:14:28,460
Nee, Filter will ich nicht.

2184
02:14:28,460 --> 02:14:31,460
Rust.

2185
02:14:31,460 --> 02:14:41,630
Position.

2186
02:14:41,630 --> 02:14:44,630
Find.

2187
02:14:44,630 --> 02:14:47,630
Find.

2188
02:14:47,630 --> 02:14:53,220
Find.

2189
02:14:53,220 --> 02:14:56,220
Find takes the...

2190
02:14:56,220 --> 02:15:02,710
Okay.

2191
02:15:02,710 --> 02:15:05,710
Find is short-circuiting.

2192
02:15:05,710 --> 02:15:08,710
In other words, it will stop processing as soon as the closure returns true.

2193
02:15:08,710 --> 02:15:11,710
Ja, das ist das, was ich haben will.

2194
02:15:11,710 --> 02:15:14,710
Closure in Rust.

2195
02:15:14,710 --> 02:15:17,710
Das ist so, glaube ich. Wie in Ruby ist das.

2196
02:15:17,710 --> 02:15:23,050
Ja.

2197
02:15:23,050 --> 02:15:27,360
Oder sagen wir mal ID.

2198
02:15:27,360 --> 02:15:30,360
Und jetzt so?

2199
02:15:30,360 --> 02:15:34,930
Okay, jetzt weiß ich nicht weiter.

2200
02:15:34,930 --> 02:15:37,930
Wahrscheinlich einfach Klammer auf, Klammer zu.

2201
02:15:37,930 --> 02:15:40,930
Moment.

2202
02:15:40,930 --> 02:15:43,930
Oder kann man vielleicht sogar...

2203
02:15:43,930 --> 02:15:49,140
Map contains key.

2204
02:15:49,140 --> 02:15:52,140
ID.

2205
02:15:52,140 --> 02:15:55,140
Oder not.

2206
02:15:55,140 --> 02:16:03,290
Ah.

2207
02:16:03,290 --> 02:16:06,290
Moment, da ist jetzt ein Match drauf.

2208
02:16:06,290 --> 02:16:09,290
Dass wir eine Fehlermeldung schmeißen, wenn er keine freien IDs findet.

2209
02:16:09,290 --> 02:16:12,290
Wie fundst du das jetzt?

2210
02:16:12,290 --> 02:16:18,140
Match. Jawohl, die Idee hat mal was gebracht.

2211
02:16:18,140 --> 02:16:21,140
Okay, wenn er keine freien gefunden hat,

2212
02:16:21,140 --> 02:16:24,140
dann würde ich sagen, paniken wir.

2213
02:16:24,140 --> 02:16:27,140
Panik.

2214
02:16:27,140 --> 02:16:35,030
No free ID found.

2215
02:16:35,030 --> 02:16:38,030
Und wenn er was gefunden hat,

2216
02:16:38,030 --> 02:16:42,470
dann soll er die ID returnen.

2217
02:16:42,470 --> 02:16:45,470
Macht das so Sinn?

2218
02:16:45,470 --> 02:16:48,470
Du kannst auch expect machen.

2219
02:16:48,470 --> 02:16:51,470
Mit Panik killst du den Prozess.

2220
02:16:51,470 --> 02:16:58,540
Ja, das ist gut so.

2221
02:16:58,540 --> 02:17:01,540
Auf der anderen Seite, ihr habt recht,

2222
02:17:01,540 --> 02:17:04,540
das macht überhaupt keinen Sinn mit Match,

2223
02:17:04,540 --> 02:17:07,540
sondern wir sagen einfach let ID,

2224
02:17:07,540 --> 02:17:10,540
expect und dann machen wir eine custom Fehlermeldung.

2225
02:17:10,540 --> 02:17:13,540
No free ID found.

2226
02:17:13,540 --> 02:17:19,800
Zack, easy.

2227
02:17:19,800 --> 02:17:22,800
Das finde ich schick.

2228
02:17:22,800 --> 02:17:25,800
Kompiliert auch noch.

2229
02:17:25,800 --> 02:17:28,800
Und jetzt haben wir jedes Mal eine frische ID.

2230
02:17:28,800 --> 02:17:31,800
Sehr gut, nice.

2231
02:17:31,800 --> 02:17:36,180
Jetzt können wir doch gleich mal testen, ob das funktioniert, was wir gebaut haben.

2232
02:17:36,180 --> 02:17:44,330
Ich glaube, mehr brauchen wir in dieser Custom-Klasse nicht.

2233
02:17:44,330 --> 02:17:47,330
So, dann lass uns doch mal gucken,

2234
02:17:47,330 --> 02:17:50,330
ob sich die Aufregung heute gelohnt hat.

2235
02:17:50,330 --> 02:17:53,330
Gehen wir mal in unsere Lib.

2236
02:17:53,330 --> 02:17:56,330
So, RP State.

2237
02:17:56,330 --> 02:17:59,330
Da gibt es jetzt ein Feld für Connections.

2238
02:17:59,330 --> 02:18:02,330
Ich habe jetzt schon öfters gesehen,

2239
02:18:02,330 --> 02:18:05,330
dass die Leute gerne in Rust die Sachen abkürzen.

2240
02:18:05,330 --> 02:18:08,330
Wie würdet ihr das schreiben an der Stelle?

2241
02:18:08,330 --> 02:18:11,330
Würdet ihr die Variable Connections nennen?

2242
02:18:11,330 --> 02:18:14,330
Mojo, Jojo, danke schön für den Sub.

2243
02:18:14,330 --> 02:18:17,330
Würdet ihr die Variable an der Stelle Connections nennen?

2244
02:18:17,330 --> 02:18:20,330
Con?

2245
02:18:20,330 --> 02:18:23,330
Cons?

2246
02:18:23,330 --> 02:18:26,330
C?

2247
02:18:26,330 --> 02:18:37,740
Oder WConnections?

2248
02:18:37,740 --> 02:18:40,740
Poggen.

2249
02:18:40,740 --> 02:18:46,020
Verbindungen, ja, genau.

2250
02:18:46,020 --> 02:18:58,520
Prime Sub für die Krustentiere.

2251
02:18:58,520 --> 02:19:01,520
Sehr schön, Pogu.

2252
02:19:01,520 --> 02:19:04,520
Von Aqua, danke schön für den Sub.

2253
02:19:04,520 --> 02:19:07,520
Und für die feinfette Unterstützung vorhin.

2254
02:19:07,520 --> 02:19:10,520
Okay, Connections, also.

2255
02:19:10,520 --> 02:19:15,150
Registry of T.

2256
02:19:15,150 --> 02:19:18,150
Kann das sein, dass ich schon mal Registry irgendwie habe hier?

2257
02:19:18,150 --> 02:19:21,150
Registry.

2258
02:19:21,150 --> 02:19:24,150
Das habe ich schon mal importiert.

2259
02:19:24,150 --> 02:19:27,150
Was ist das?

2260
02:19:27,150 --> 02:19:30,150
Shit.

2261
02:19:30,150 --> 02:19:33,150
Registry of.

2262
02:19:33,150 --> 02:19:36,150
So, was brauchen wir jetzt?

2263
02:19:36,150 --> 02:19:45,650
Testweise Connections, haben wir gesagt.

2264
02:19:45,650 --> 02:20:00,490
Track local static sample.

2265
02:20:00,490 --> 02:20:03,490
Wo ist das Problem jetzt?

2266
02:20:03,490 --> 02:20:06,490
Ah.

2267
02:20:06,490 --> 02:20:14,260
Exzellent.

2268
02:20:14,260 --> 02:20:25,350
Wie will ich importieren?

2269
02:20:25,350 --> 02:20:28,350
Moin.

2270
02:20:28,350 --> 02:20:33,560
Pogu.

2271
02:20:33,560 --> 02:20:38,380
Der Name kommt mir zumindest bekannt vor.

2272
02:20:38,380 --> 02:20:43,400
Ich weiß nicht genau, woher.

2273
02:20:43,400 --> 02:20:50,080
Aber der Name kommt mir bekannt vor.

2274
02:20:50,080 --> 02:20:53,080
Also hier aus dem Chat auf jeden Fall.

2275
02:20:53,080 --> 02:20:58,420
Connections, Registry, Track local static sample.

2276
02:20:58,420 --> 02:21:01,420
Das müsste doch immer noch kompilieren, oder?

2277
02:21:01,420 --> 02:21:04,420
Nein, natürlich nicht.

2278
02:21:04,420 --> 02:21:10,970
Ist okay, ist okay.

2279
02:21:10,970 --> 02:21:13,970
Registry new.

2280
02:21:13,970 --> 02:21:16,970
Alles klar, es kompiliert.

2281
02:21:16,970 --> 02:21:21,280
Top.

2282
02:21:21,280 --> 02:21:24,280
Dann können wir das auch jetzt mal ausprobieren.

2283
02:21:24,280 --> 02:21:27,280
Connections, dann schmeißen wir das hier mal weg.

2284
02:21:27,280 --> 02:21:30,280
Check mal, ob die Funktionen alle public sind.

2285
02:21:30,280 --> 02:21:38,690
Aber sonst alle.

2286
02:21:38,690 --> 02:21:43,320
So.

2287
02:21:43,320 --> 02:21:50,060
Und jetzt, wo verwenden wir denn jetzt Connections?

2288
02:21:50,060 --> 02:21:53,060
Ich lösche das hier einfach mal.

2289
02:21:53,060 --> 02:21:56,060
Connections, klar.

2290
02:21:56,060 --> 02:21:59,060
Also im Prinzip brauchen wir jetzt bloß noch self.

2291
02:21:59,060 --> 02:22:02,060
App state, get.

2292
02:22:02,060 --> 02:22:07,910
Unwrap Connections.

2293
02:22:08,910 --> 02:22:11,910
Cannot move.

2294
02:22:11,910 --> 02:22:14,910
Achso, muss ich wieder und davor machen.

2295
02:22:14,910 --> 02:22:22,070
Okay, Registry.

2296
02:22:22,070 --> 02:22:25,070
Pair Connections.

2297
02:22:25,070 --> 02:22:30,090
Connections, get.

2298
02:22:30,090 --> 02:22:34,980
Moment, erstmal da unten das Ganze fixen.

2299
02:22:34,980 --> 02:22:41,590
App state, get.

2300
02:22:41,590 --> 02:22:47,950
Unwrap Connections.

2301
02:22:47,950 --> 02:22:50,950
Und wieder und.

2302
02:22:50,950 --> 02:22:53,950
So, insert. Insert gibt es nicht.

2303
02:22:53,950 --> 02:22:56,950
Es gibt add.

2304
02:22:56,950 --> 02:23:03,700
Und es wird einfach nur die Pair Connections hinzugefügt.

2305
02:23:03,700 --> 02:23:21,700
Achso.

2306
02:23:21,700 --> 02:23:24,700
Ja, wenn man es mal richtig macht, dann wird es auch funktionieren.

2307
02:23:24,700 --> 02:23:30,300
Das hier unten brauche ich gar nicht mehr.

2308
02:23:30,300 --> 02:23:33,300
Weil es schon initialisiert ist.

2309
02:23:33,300 --> 02:23:44,100
Ja.

2310
02:23:44,100 --> 02:23:47,100
Bleibt im Endeffekt nur noch das hier.

2311
02:23:47,100 --> 02:23:50,100
Pair Connections, get ID.

2312
02:23:50,100 --> 02:23:53,100
Das hier bleibt jetzt noch zu fixen.

2313
02:23:53,100 --> 02:23:56,100
So, und wir getten jetzt.

2314
02:23:56,100 --> 02:23:59,100
Okay, das ist ein U32, muss es nur noch sein.

2315
02:23:59,100 --> 02:24:06,100
Wir sind mal hart drauf und casten mal schnell das U64 runter zu einem U32.

2316
02:24:06,100 --> 02:24:13,360
Und get ist bei mir ein U32.

2317
02:24:13,360 --> 02:24:21,360
Moment, kann man in Rust irgendwie casten, dass ich sage U32, ID?

2318
02:24:21,360 --> 02:24:24,360
Äh, okay.

2319
02:24:24,360 --> 02:24:27,360
Das ist unsafe.

2320
02:24:27,360 --> 02:24:33,080
Ach nee, SU32.

2321
02:24:33,080 --> 02:24:36,080
Unwrap.

2322
02:24:36,080 --> 02:24:48,420
Jetzt brauchen wir gar nichts unwrappen.

2323
02:24:48,420 --> 02:24:51,420
Doch, ist doch gut. Passt doch alles.

2324
02:24:51,420 --> 02:24:54,420
Okay, ich glaube das war es schon.

2325
02:24:54,420 --> 02:24:58,420
Das ist übrigens blöd. Wir machen das mal richtig.

2326
02:24:58,420 --> 02:25:01,420
Das ist ein U32 hier.

2327
02:25:01,420 --> 02:25:04,420
Und das ist ein U32 hier.

2328
02:25:04,420 --> 02:25:10,020
Und das ist ein U32 hier.

2329
02:25:10,020 --> 02:25:13,020
U64.

2330
02:25:13,020 --> 02:25:16,020
Das ist ein U32 hier. Wir machen das mal richtig.

2331
02:25:16,020 --> 02:25:19,020
Sonst habe ich nachher irgendwelche merkwürdigen random Bugs.

2332
02:25:19,020 --> 02:25:24,020
Und in .NET ist das auch ein UINT32.

2333
02:25:24,020 --> 02:25:27,020
Okay, so.

2334
02:25:27,020 --> 02:25:30,020
So, und jetzt können wir mal sehen, ob der Bug gefixt ist.

2335
02:25:30,020 --> 02:25:33,020
Das nur einmalig funktioniert.

2336
02:25:33,020 --> 02:25:38,160
Das sollte jetzt mehrmalig mit reloaden funktionieren.

2337
02:25:38,160 --> 02:25:43,240
Starten. Okay.

2338
02:25:43,240 --> 02:25:51,240
Shit. Irgendwo habe ich was verkehrt gemacht.

2339
02:25:51,240 --> 02:25:54,240
Okay. 44. Zeile 44.

2340
02:25:54,240 --> 02:25:59,260
Okay, let's go. Zeile 44.

2341
02:25:59,260 --> 02:26:09,010
Hast du die Lib kopiert?

2342
02:26:09,010 --> 02:26:13,900
Ja. Zeile 44.

2343
02:26:13,900 --> 02:26:16,900
Die ID gibt es nicht.

2344
02:26:16,900 --> 02:26:41,500
Okay, die ID gibt es nicht. Warum gibt es die ID nicht?

2345
02:26:41,500 --> 02:26:44,500
Weil ich irgendwo Mist mache hier.

2346
02:26:44,500 --> 02:26:47,500
ID gleich.

2347
02:26:47,500 --> 02:26:50,500
Okay, ID.

2348
02:26:50,500 --> 02:26:59,220
Ach hier, ID gleich 1.

2349
02:26:59,220 --> 02:27:14,740
ID gleich.

2350
02:27:14,740 --> 02:27:17,740
Und jetzt gibt es die ID auch.

2351
02:27:17,740 --> 02:27:20,740
Wenn da immer 1 drin steht.

2352
02:27:20,740 --> 02:27:23,740
Nee, Option Return. Das ist gut, dass das gecrashed ist.

2353
02:27:23,740 --> 02:27:31,180
Der konnte schlicht und ergreifend nicht weitermachen.

2354
02:27:31,180 --> 02:27:39,020
Ich finde das gut. Da weiß man nichts, was kaputt ist.

2355
02:27:39,020 --> 02:27:45,890
So, nochmal.

2356
02:27:45,890 --> 02:27:53,050
Es geht.

2357
02:27:53,050 --> 02:27:56,050
Der Browser war einfach nur PP gerade.

2358
02:27:56,050 --> 02:28:11,580
Kann das sein, dass mein Javascript ein bisschen weird champ ist?

2359
02:28:11,580 --> 02:28:14,580
Ich glaube, mein Javascript war ein bisschen weird champ gerade.

2360
02:28:14,580 --> 02:28:17,580
Aber es funktioniert. Der Bug ist behoben.

2361
02:28:17,580 --> 02:28:20,580
WebRTC funktioniert.

2362
02:28:20,580 --> 02:28:23,580
Und er funktioniert mehrfach.

2363
02:28:23,580 --> 02:28:26,580
Auch wenn man refresht.

2364
02:28:26,580 --> 02:28:29,580
Aber wenn man zu schnell refresht, dann...

2365
02:28:29,580 --> 02:28:35,810
Moment, wenn er irgendwas reused, dann funktioniert es nicht.

2366
02:28:35,810 --> 02:28:38,810
Okay, das müssen wir so nochmal überprüfen.

2367
02:28:38,810 --> 02:28:43,180
Der baut aber gar nicht die Verbindung auf.

2368
02:28:43,180 --> 02:28:55,050
Nun ja.

2369
02:28:55,050 --> 02:28:58,050
Der versucht irgendwas zu reusen, was er nicht reusen soll.

2370
02:28:58,050 --> 02:29:10,680
Da stimmt irgendwas doch nicht ganz in der Logik, würde ich sagen.

2371
02:29:10,680 --> 02:29:13,680
Wir geben nochmal kurz aus.

2372
02:29:13,680 --> 02:29:16,680
Die Connection ID.

2373
02:29:16,680 --> 02:29:19,680
Weil das sollte immer eine neue ID sein.

2374
02:29:19,680 --> 02:29:24,440
Es sollte immer...

2375
02:29:24,440 --> 02:29:27,440
Log...

2376
02:29:27,440 --> 02:29:30,440
Es sollte immer eine neue ID sein.

2377
02:29:30,440 --> 02:29:33,440
35, 36, 37...

2378
02:29:33,440 --> 02:29:36,440
Es ist auch immer eine neue.

2379
02:29:36,440 --> 02:29:39,440
38, 39...

2380
02:29:39,440 --> 02:29:42,440
Ja, der Browser denkt nur, er kann die Sache cachen aus irgendwelchen Gründen.

2381
02:29:42,440 --> 02:29:45,440
Und das funktioniert nicht.

2382
02:29:45,440 --> 02:29:48,440
Manchmal cacht das und manchmal nicht.

2383
02:29:48,440 --> 02:29:51,440
Keine Ahnung, was mein Browser da für PP-Ger-Sachen macht.

2384
02:29:51,440 --> 02:29:54,440
Aber ich bin mir relativ sicher,

2385
02:29:54,440 --> 02:29:57,440
weil es auch immer neu ist, dass das nicht an meinem Backend liegt.

2386
02:29:57,440 --> 02:30:04,500
Weil, weil,

2387
02:30:04,500 --> 02:30:07,500
wenn ich ohne Cache refreshe,

2388
02:30:07,500 --> 02:30:10,500
guckt, wenn ich ohne Cache refreshe,

2389
02:30:10,500 --> 02:30:16,740
dann funzt es immer.

2390
02:30:16,740 --> 02:30:26,680
Bis es nicht funktioniert.

2391
02:30:26,680 --> 02:30:35,220
Kommt das nicht irgendwie in die Quere?

2392
02:30:35,220 --> 02:30:38,220
Das sieht ein bisschen nach Threat-Problemen aus, oder?

2393
02:30:38,220 --> 02:30:41,220
Aber ihr seht, es ist immer eine neue Connection.

2394
02:30:41,220 --> 02:30:45,780
Und daran kann es ja eigentlich nicht liegen.

2395
02:30:45,780 --> 02:30:51,820
Und nachdem ich immer alles schön unwrappe und hier nichts abkackt,

2396
02:30:51,820 --> 02:30:54,820
ich schiebe das wirklich aktuell auf meinen Browser.

2397
02:30:54,820 --> 02:30:59,140
Dass der da nicht so genau...

2398
02:30:59,140 --> 02:31:07,100
weiß, was er macht.

2399
02:31:07,100 --> 02:31:10,100
Ich schiebe es auch auf JavaScript.

2400
02:31:10,100 --> 02:31:15,560
Versuch mal Firefox.

2401
02:31:15,560 --> 02:31:30,530
About WebRTC.

2402
02:31:30,530 --> 02:31:36,760
True, lol, weh.

2403
02:31:36,760 --> 02:31:51,380
Failed.

2404
02:31:51,380 --> 02:31:57,190
Aber ihr seht, er bekommt die Offer hier.

2405
02:31:57,190 --> 02:32:00,190
Hat er Probleme mit dem Multiplexen beim Port oder so?

2406
02:32:00,190 --> 02:32:06,620
Wir machen noch mal ganz kurz den Debug rein.

2407
02:32:06,620 --> 02:32:15,340
ATMX.

2408
02:32:15,340 --> 02:32:22,340
Das ändert daran doch jetzt auch nichts.

2409
02:32:22,340 --> 02:32:25,340
Wir haben in Rust nirgendwo Error-Handling.

2410
02:32:25,340 --> 02:32:28,340
Also an Rust wird es in dem Fall echt nicht liegen.

2411
02:32:28,340 --> 02:32:31,340
Irgendwie liegt es glaube ich an PPGaJava-Skript.

2412
02:32:31,340 --> 02:32:43,850
Das ist meine Vermutung.

2413
02:32:43,850 --> 02:32:46,850
Das ist übrigens auch, da waren sie lustig bei Firefox.

2414
02:32:46,850 --> 02:32:49,850
Das steht in jeder dieser Meldungen drin.

2415
02:32:49,850 --> 02:32:52,850
Das ist SDP.

2416
02:32:52,850 --> 02:32:55,850
Weil das halt das Session-Description-Protokoll ist.

2417
02:32:55,850 --> 02:32:58,850
War einer lustig, hat geschrieben.

2418
02:32:58,850 --> 02:33:04,440
Also wenn ihr das mal seht, da war ein Mozilla-Mitarbeiter.

2419
02:33:04,440 --> 02:33:07,440
Wollte witzig sein.

2420
02:33:07,440 --> 02:33:10,440
Also das hat funktioniert offensichtlich.

2421
02:33:10,440 --> 02:33:13,440
Das hätte hier ja nichts geantwortet.

2422
02:33:13,440 --> 02:33:31,900
Wir machen noch mal hier.

2423
02:33:31,900 --> 02:33:34,900
Keckl.

2424
02:33:34,900 --> 02:33:37,900
Rintel.

2425
02:33:37,900 --> 02:33:46,240
Jetzt können wir mal gucken.

2426
02:33:46,240 --> 02:33:49,240
Also das sieht nicht so aus, als liegt das...

2427
02:33:49,240 --> 02:33:52,240
Hä?

2428
02:33:52,240 --> 02:34:05,830
Ich glaube eher, das liegt an meinem Java-Skript-Zeug.

2429
02:34:05,830 --> 02:34:13,540
Okay, zweites ist kaputt gegangen.

2430
02:34:13,540 --> 02:34:16,540
Bei mir ist alles durchgegangen.

2431
02:34:16,540 --> 02:34:21,550
Also ich vermute, das liegt...

2432
02:34:21,550 --> 02:34:24,550
Es ist auch immer eine neue ID am Start.

2433
02:34:24,550 --> 02:34:29,760
ID2.

2434
02:34:29,760 --> 02:34:34,520
Wir können mal gucken, ob es in neuen Tabs irgendwann auftritt.

2435
02:34:34,520 --> 02:34:37,520
Wenn es nämlich nicht in neuen Tabs auftritt, dann liegt das...

2436
02:34:37,520 --> 02:34:42,860
Okay, es tritt auch in neuen Tabs auf.

2437
02:34:42,860 --> 02:34:45,860
Dann ist tatsächlich irgendwas kaputt.

2438
02:34:45,860 --> 02:35:09,690
Aber das werden wir nicht jetzt fixen.

2439
02:35:09,690 --> 02:35:12,690
Ist der Browser nicht lang genug?

2440
02:35:12,690 --> 02:35:17,580
Nee, das glaube ich nicht so schnell, wie das immer geht.

2441
02:35:17,580 --> 02:35:20,580
Aber auf jeden Fall, wenn es jeden zehntes Mal loaden oder so nicht funktioniert,

2442
02:35:20,580 --> 02:35:29,620
dann ist schon pipega.

2443
02:35:29,620 --> 02:35:32,620
Clear History.

2444
02:35:32,620 --> 02:35:35,620
Clear History juckt dies nicht.

2445
02:35:35,620 --> 02:35:40,320
Clear History.

2446
02:35:40,320 --> 02:35:43,320
Ja, das geht doch in unerheblichen Teilen der Fälle...

2447
02:35:43,320 --> 02:35:46,320
...geht es kaputt.

2448
02:35:46,320 --> 02:35:52,040
Er bekommt aber den Handshake.

2449
02:35:52,040 --> 02:36:05,020
Ja, er bekommt auch Candidates.

2450
02:36:05,020 --> 02:36:10,020
Also ich tippe drauf, dass das ein Problem der Rust-Library vielleicht ist.

2451
02:36:10,020 --> 02:36:13,020
Weil ich mache hier so Port-Multiplexing.

2452
02:36:13,020 --> 02:36:18,680
Ich mache hier so Port-Multiplexing und...

2453
02:36:18,680 --> 02:36:21,680
Okay, das ist meine letzte Amtshandlung heute.

2454
02:36:21,680 --> 02:36:24,680
Ich lasse das mal weg, das Port-Multiplexing,

2455
02:36:24,680 --> 02:36:27,680
und gucke mal, ob es dann weg ist.

2456
02:36:27,680 --> 02:36:33,850
Aber ohne Port-Multiplexing will ich das nicht betreiben.

2457
02:36:33,850 --> 02:36:42,510
Was bedeuten die Abkürzungen in Rust?

2458
02:36:42,510 --> 02:36:45,510
Welche Abkürzungen?

2459
02:36:45,510 --> 02:36:48,510
Also unspezifischer Fragen hättest du auch nicht mehr können, oder?

2460
02:36:48,510 --> 02:36:52,950
Oder du meinst, für was Rust steht?

2461
02:36:52,950 --> 02:36:55,950
Rust ist gar keine Abkürzung. Rust ist eine Programmiersprache.

2462
02:36:55,950 --> 02:37:02,380
Was ist Port-Multiplexing?

2463
02:37:02,380 --> 02:37:05,380
Der macht mehrere Connections über den gleichen Port, anstatt für jeden Port was eigenes auf.

2464
02:37:05,380 --> 02:37:11,610
Ah!

2465
02:37:11,610 --> 02:37:14,610
Chat-Gear?

2466
02:37:14,610 --> 02:37:17,610
Das liegt am Port-Multiplexing, guckt mal.

2467
02:37:17,610 --> 02:37:35,780
Seht ihr das?

2468
02:37:35,780 --> 02:37:43,100
Jetzt kackt nichts ab.

2469
02:37:43,100 --> 02:37:48,300
Das liegt am Port-Multiplexing von der Library.

2470
02:37:48,300 --> 02:37:51,300
Aber ohne Port-Multiplexing werde ich das nicht betreiben.

2471
02:37:51,300 --> 02:37:58,780
Guckt, das wäre schon längst abgekackt, normalerweise.

2472
02:37:58,780 --> 02:38:05,660
Ich kann noch ein paar mal refreshen.

2473
02:38:05,660 --> 02:38:11,180
Pass mal auf.

2474
02:38:11,180 --> 02:38:14,180
Ich habe halt ein paar Ports offen jetzt, ne?

2475
02:38:14,180 --> 02:38:17,180
Das ist wirklich nicht viel.

2476
02:38:17,180 --> 02:38:20,180
Was ich jetzt machen würde, ist,

2477
02:38:20,180 --> 02:38:23,180
ich würde einen Retry im JavaScript einbauen.

2478
02:38:23,180 --> 02:38:26,180
Also, guckt mal.

2479
02:38:26,180 --> 02:38:29,180
Das ist ja relativ offensichtlich der Bug.

2480
02:38:29,180 --> 02:38:32,180
Der irgendwie im Port-Multiplexing liegt.

2481
02:38:32,180 --> 02:38:35,180
Und nachdem ich hier nichts großartig einstellen kann,

2482
02:38:35,180 --> 02:38:43,020
man kann ja auch keine großartigen Settings sonst einstellen.

2483
02:38:43,020 --> 02:38:46,020
UDP-Multiplexing-Default.

2484
02:38:47,020 --> 02:38:50,020
Man kann da nicht wirklich viel einstellen.

2485
02:38:50,020 --> 02:38:55,100
Closed.

2486
02:38:55,100 --> 02:39:01,070
Gibt keine großartigen Settings.

2487
02:39:01,070 --> 02:39:04,070
Ich würde einen Retry im JavaScript einbauen.

2488
02:39:04,070 --> 02:39:14,400
Da kann man nicht viel. Option.

2489
02:39:14,400 --> 02:39:21,020
Warum nicht TCP?

2490
02:39:21,020 --> 02:39:24,020
Würde ich gerne machen, unterstütze die Library nicht.

2491
02:39:24,020 --> 02:39:27,020
Und ist für Echtzeit-Video jetzt auch nicht so wichtig,

2492
02:39:27,020 --> 02:39:30,020
dass sie das kann.

2493
02:39:31,020 --> 02:39:34,020
Und zwar,

2494
02:39:34,020 --> 02:39:38,840
kompilieren das nochmal.

2495
02:39:38,840 --> 02:39:41,840
Dann gehen wir in C-Sharp.

2496
02:39:41,840 --> 02:39:44,840
Höhen das nochmal aus.

2497
02:39:44,840 --> 02:39:47,840
Gucken, ob das Problem noch auftritt.

2498
02:39:47,840 --> 02:39:50,840
Ja, Problem tritt immer noch auf.

2499
02:39:50,840 --> 02:39:53,840
Es liegt echt am Port-Multiplexing.

2500
02:39:53,840 --> 02:39:56,840
Guckt, dass das manchmal nicht geht.

2501
02:39:56,840 --> 02:40:02,880
Kaum ist das eingeschaltet, buggt es wieder rum.

2502
02:40:02,880 --> 02:40:05,880
Was ich jetzt machen würde,

2503
02:40:05,880 --> 02:40:08,880
ich würde einen Retry im JavaScript einbauen.

2504
02:40:08,880 --> 02:40:11,880
So nach dem Motto,

2505
02:40:11,880 --> 02:40:14,880
wenn das innerhalb von nicht-connected hat,

2506
02:40:14,880 --> 02:40:17,880
dann Retry.

2507
02:40:17,880 --> 02:40:20,880
Das kann ich mir jetzt nicht aus dem Ärmel schütteln.

2508
02:40:20,880 --> 02:40:23,880
Aber ich schreibe mir das mal als To-Do rein.

2509
02:40:23,880 --> 02:40:26,880
To-Do, Retry.

2510
02:40:26,880 --> 02:40:31,580
5 Minuten haben wir noch Zeit.

2511
02:40:31,580 --> 02:40:34,580
Vielleicht kann man das sogar relativ einfach machen.

2512
02:40:34,580 --> 02:40:37,580
Der legt hier die Verbindung an.

2513
02:40:37,580 --> 02:40:43,230
Okay, ich weiß, was wir machen.

2514
02:40:43,230 --> 02:40:46,230
Easy.

2515
02:40:46,230 --> 02:40:49,230
Es ist JavaScript, da können wir auch eklige Sachen machen.

2516
02:40:49,230 --> 02:40:52,230
SetInterval nach einer Sekunde.

2517
02:40:52,230 --> 02:40:55,230
Passt mal auf, das wird jetzt richtig eklig.

2518
02:40:55,230 --> 02:40:58,230
Das wird so eklig,

2519
02:40:58,230 --> 02:41:01,230
da werdet ihr den Stream ausschalten wollen.

2520
02:41:01,230 --> 02:41:04,230
Also, wenn nach einer Sekunde der Connection State

2521
02:41:04,230 --> 02:41:09,380
ungleich

2522
02:41:09,380 --> 02:41:12,380
ungleich

2523
02:41:12,380 --> 02:41:15,380
ungleich

2524
02:41:15,380 --> 02:41:18,380
connected ist,

2525
02:41:18,380 --> 02:41:23,070
dann, pass auf, Pfeil fährt,

2526
02:41:23,070 --> 02:41:26,070
dann Window, Location,

2527
02:41:26,070 --> 02:41:43,600
Reload.

2528
02:41:43,600 --> 02:41:46,600
Das ist ein bisschen schnell.

2529
02:41:46,600 --> 02:41:49,600
Vielleicht 2 Sekunden.

2530
02:41:49,600 --> 02:41:52,600
Okay, 2 Sekunden.

2531
02:41:52,600 --> 02:41:58,190
Jetzt habe ich es gebroken.

2532
02:41:58,190 --> 02:42:01,190
Jetzt ist es kaputt, Leute.

2533
02:42:01,190 --> 02:42:07,840
Ah, geht doch. Easy.

2534
02:42:07,840 --> 02:42:10,840
Vielleicht machen wir auch 3 Sekunden.

2535
02:42:10,840 --> 02:42:19,220
Easy.

2536
02:42:19,220 --> 02:42:22,220
Eventuell noch ClearInterval im Else-Case.

2537
02:42:22,220 --> 02:42:28,380
Moment, ich will ja auch nicht SetInterval,

2538
02:42:28,380 --> 02:42:32,950
ich will ja SetTimeout.

2539
02:42:32,950 --> 02:42:35,950
Ich will ja gar nicht SetInterval.

2540
02:42:35,950 --> 02:42:49,350
Ich will ja, dass es nur einmal ausgewählt wird.

2541
02:42:49,350 --> 02:42:52,350
Guck, und es funzt.

2542
02:42:52,350 --> 02:42:57,430
Connection-Probleme, 3 Sekunden später,

2543
02:42:57,430 --> 02:43:00,430
Bam, Seite, Reloaded, Connection funzt.

2544
02:43:00,430 --> 02:43:05,190
Kannst du nicht das Event Connected abfangen für den Reload?

2545
02:43:05,190 --> 02:43:08,190
Doch.

2546
02:43:08,190 --> 02:43:11,190
Aber ich will ja hart nach 3 Sekunden gucken,

2547
02:43:11,190 --> 02:43:14,190
dann fange ich hier ab.

2548
02:43:14,190 --> 02:43:17,190
Ich könnte warten, bis das auf Failed steht.

2549
02:43:17,190 --> 02:43:20,190
Guck mal, wie lange das dauert,

2550
02:43:20,190 --> 02:43:27,800
bis es sich auf Failed stellt.

2551
02:43:27,800 --> 02:43:34,350
Das dauert ewig, bis es auf Failed geht.

2552
02:43:34,350 --> 02:43:42,250
Das geht einfach gar nicht auf Failed.

2553
02:43:42,250 --> 02:43:48,160
Das fängt auch gar nicht an erst.

2554
02:43:48,160 --> 02:43:54,460
SetInterval, wir gucken jetzt mal kurz.

2555
02:43:54,460 --> 02:43:57,460
Alle Sekunde,

2556
02:43:57,460 --> 02:44:00,460
Log, PC,

2557
02:44:00,460 --> 02:44:03,460
Connection-State und Log,

2558
02:44:03,460 --> 02:44:06,460
PC, Ice,

2559
02:44:06,460 --> 02:44:15,180
Connection-State.

2560
02:44:15,180 --> 02:44:18,180
New, New, New,

2561
02:44:18,180 --> 02:44:21,180
Das geht nie auf Failed.

2562
02:44:21,180 --> 02:44:24,180
Das macht einfach gar nichts.

2563
02:44:24,180 --> 02:44:38,930
Jetzt habt ihr es gerade gesehen.

2564
02:44:38,930 --> 02:44:44,070
Ich mache das da für euch in die Mitte.

2565
02:44:44,070 --> 02:44:47,070
Das erkennt gar nicht, dass es Failed ist.

2566
02:44:47,070 --> 02:44:50,070
Das heißt, mein Ansatz ist einfach

2567
02:44:50,070 --> 02:44:53,070
bester JavaScript-Fix ever.

2568
02:44:53,070 --> 02:44:56,070
3 Sekunden warten, wenn nicht Connected,

2569
02:44:56,070 --> 02:44:59,070
Restart. Easy.

2570
02:44:59,070 --> 02:45:02,070
Guck, nicht Connected, 3 Sekunden später,

2571
02:45:02,070 --> 02:45:05,070
Restart und Connected.

2572
02:45:05,070 --> 02:45:08,070
Ich glaube, das liegt in diesem Port-Multiplexing.

2573
02:45:08,070 --> 02:45:11,070
Was man auch gesehen hat.

2574
02:45:11,070 --> 02:45:14,070
Wenn ich das Port-Multiplexing

2575
02:45:14,070 --> 02:45:17,070
raus mache.

2576
02:45:17,070 --> 02:45:20,070
Irgendwann geht das auf Failed.

2577
02:45:20,070 --> 02:45:23,070
GitHub,

2578
02:45:23,070 --> 02:45:26,070
WebRTCS.

2579
02:45:26,070 --> 02:45:29,070
Wir können noch einmal kurz hier reingucken

2580
02:45:29,070 --> 02:45:33,700
in die Examples.

2581
02:45:33,700 --> 02:45:36,700
Single Port.

2582
02:45:36,700 --> 02:45:39,700
Die hatten gar kein Beispiel dafür.

2583
02:45:40,700 --> 02:45:53,780
Okay, die High-IQ-Leute setzen das so.

2584
02:45:53,780 --> 02:46:00,080
Was ist UDP?

2585
02:46:00,080 --> 02:46:05,480
Die verbindungslose Variante von TCP.

2586
02:46:05,480 --> 02:46:08,480
Settings

2587
02:46:08,480 --> 02:46:11,480
Engine.

2588
02:46:11,480 --> 02:46:14,480
Okay, das hat jetzt wahrscheinlich nicht so viel gebracht.

2589
02:46:14,480 --> 02:46:17,480
Settings Engine,

2590
02:46:17,480 --> 02:46:24,740
Set UDP Network.

2591
02:46:24,740 --> 02:46:27,740
Okay, die coolen Leute machen so.

2592
02:46:27,740 --> 02:46:30,740
Vielleicht bin ich einfach nicht Rust-Pro genug.

2593
02:46:30,740 --> 02:46:33,740
Ich meine mal seriously,

2594
02:46:33,740 --> 02:46:36,740
das hier ist wahrscheinlich nicht viel anders

2595
02:46:36,740 --> 02:46:39,740
zu dem, was ich gebaut habe.

2596
02:46:39,740 --> 02:46:46,610
Ach so, Settings Engine sollte ich

2597
02:46:46,610 --> 02:46:53,420
gleich noch anlegen.

2598
02:46:53,420 --> 02:46:58,620
Das müsste die gleichen Probleme haben.

2599
02:46:58,620 --> 02:47:01,620
Es ist kein Unterschied zu dem, was ich gemacht habe.

2600
02:47:01,620 --> 02:47:06,380
Nur irgendwie ineinander gerappt.

2601
02:47:06,380 --> 02:47:09,380
Placingly fast und coole Leute verwenden Rust.

2602
02:47:09,380 --> 02:47:12,380
Ich will auch zu den coolen Leuten gehören.

2603
02:47:12,380 --> 02:47:15,380
Nee, okay, Probleme gibt es immer noch.

2604
02:47:15,380 --> 02:47:18,380
Jetzt geht es gar nicht mehr.

2605
02:47:18,380 --> 02:47:24,230
Leute, jetzt ist es komplett kaputt.

2606
02:47:24,230 --> 02:47:33,980
Jetzt ist es komplett broken.

2607
02:47:33,980 --> 02:47:36,980
Hat ein bisschen gebraucht.

2608
02:47:36,980 --> 02:47:39,980
Nee, aber es ist immer noch kaputt.

2609
02:47:39,980 --> 02:47:46,860
Aber leakst du jetzt nicht eine Connection

2610
02:47:46,860 --> 02:47:49,860
beziehungsweise eine ID?

2611
02:47:49,860 --> 02:47:52,860
Aktuell schon.

2612
02:47:52,860 --> 02:47:55,860
Wir probieren WebRTC zu streamen.

2613
02:47:55,860 --> 02:47:58,860
Vom Server in den Browser.

2614
02:47:58,860 --> 02:48:01,860
Doch aktuell leake ich.

2615
02:48:01,860 --> 02:48:04,860
Ich brauche jetzt noch sowas wie

2616
02:48:04,860 --> 02:48:07,860
Cleanup

2617
02:48:07,860 --> 02:48:10,860
Old Connections.

2618
02:48:10,860 --> 02:48:13,860
Dazu kann man,

2619
02:48:13,860 --> 02:48:16,860
das machen wir aber heute nicht,

2620
02:48:16,860 --> 02:48:19,860
dazu kann man beispielsweise

2621
02:48:19,860 --> 02:48:22,860
ein Event subscriben.

2622
02:48:22,860 --> 02:48:27,170
Da gibt es per Connection

2623
02:48:27,170 --> 02:48:32,060
State On

2624
02:48:32,060 --> 02:48:35,060
On State

2625
02:48:35,060 --> 02:48:38,060
On per Connection State Changed

2626
02:48:38,060 --> 02:48:41,060
Wie auch immer man das aufruft.

2627
02:48:41,060 --> 02:48:47,160
Da steckt man ein Callback rein.

2628
02:48:47,160 --> 02:48:50,160
Da ist einfach ein Syntaxfehler drin.

2629
02:48:50,160 --> 02:48:53,160
Da kann ich warten bis der Code

2630
02:48:53,160 --> 02:48:56,160
Closed ist und dann lösche ich den

2631
02:48:56,160 --> 02:48:59,160
aus der Hashmap.

2632
02:48:59,160 --> 02:49:02,160
Und dann wird nichts mehr geleakt.

2633
02:49:02,160 --> 02:49:06,540
Okay, der Rest ist selbsterklärend.

2634
02:49:06,540 --> 02:49:09,540
Deswegen hat es auch keine Tests oder Docs.

2635
02:49:09,540 --> 02:49:14,550
Braucht man nicht.

2636
02:49:14,550 --> 02:49:17,550
Git Add Minus A

2637
02:49:17,550 --> 02:49:20,550
Diff Minus Minus

2638
02:49:20,550 --> 02:49:27,360
Staged

2639
02:49:27,360 --> 02:49:31,990
Ich wollte gucken ob Windows Line Endings wieder drin sind.

2640
02:49:31,990 --> 02:49:34,990
Okay, Git Status

2641
02:49:34,990 --> 02:49:37,990
Git Commits A Minus M

2642
02:49:37,990 --> 02:49:42,370
Cute Chat

2643
02:49:42,370 --> 02:49:45,370
Okay, MVP

2644
02:49:45,370 --> 02:49:48,370
Wir küren jetzt am Abschluss jedes Streams

2645
02:49:48,370 --> 02:49:51,370
Chatge-MVPs

2646
02:49:51,370 --> 02:49:54,370
MVP

2647
02:49:54,370 --> 02:49:57,370
Okay, vielleicht mehrere Leute

2648
02:49:57,370 --> 02:50:00,370
Wer ist euch heute besonders positiv aufgefallen?

2649
02:50:00,370 --> 02:50:03,370
Wir machen Chatge

2650
02:50:03,370 --> 02:50:06,370
Chatge darf Chatge bewerten

2651
02:50:06,370 --> 02:50:25,370
Communityge

2652
02:50:25,370 --> 02:50:28,370
RonAqua

2653
02:50:28,370 --> 02:50:38,340
RonAqua

2654
02:50:38,340 --> 02:50:41,340
Odolmit

2655
02:50:45,320 --> 02:50:48,320
😅

2656
02:50:48,320 --> 02:50:51,320
ulen

2657
02:51:10,160 --> 02:51:13,160
NㅁN

2658
02:51:13,160 --> 02:51:32,130
NㅁN

2659
02:51:32,130 --> 02:51:37,400
NㅁN

2660
02:51:37,400 --> 02:51:40,400
NㅁN

2661
02:51:40,400 --> 02:51:43,400
NㅁN

2662
02:51:43,400 --> 02:51:46,400
NㅁN

2663
02:51:46,400 --> 02:52:03,980
Anzeige ist raus. So mal gucken, ob alles auf ShitHub ordentlich drin ist. Ja, sieht gut aus.

2664
02:52:03,980 --> 02:52:15,120
Okay, ChatGel, nice. Schön, dass ihr am Start gewesen seid. Ich gehe jetzt pennen. Wir sehen

2665
02:52:15,120 --> 02:52:16,680
uns. Bis denn. Macht's gut. CEU.
