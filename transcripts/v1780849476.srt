1
00:00:30,880 --> 00:00:33,440
Hallo schon jemand da

2
00:00:40,440 --> 00:00:47,280
Anscheinend noch nicht dann warten wir mal bis twitch das mitbekomme dass das stream online ist in der Zwischenzeit entwirre ich war mein headset

3
00:01:01,000 --> 00:01:06,280
So jetzt habe ich sehr sehr entwirrt moin leute

4
00:01:06,280 --> 00:01:08,280
Die

5
00:01:23,400 --> 00:01:30,160
Heute wird wenn wir uns mal github actions ein wenig hat letztens jemand gefragt ob wir uns das noch mal so ganz grundlegend

6
00:01:31,000 --> 00:01:33,000
die die basics

7
00:01:33,040 --> 00:01:34,280
angucken können

8
00:01:34,280 --> 00:01:37,320
Das heißt wenn wir uns die basics ich kann das nicht richtig ausspringen

9
00:01:38,120 --> 00:01:45,480
Wenn wir uns die basics heute angucken dann hoffe ich auch ganz wichtig chat dass ihr das nötige high performer mindset mitbringt

10
00:01:46,240 --> 00:01:48,440
Weil sonst geht ja bekanntlichermaßen nix

11
00:01:49,800 --> 00:01:54,120
Also high performer modus mindset modus aktivieren please

12
00:01:56,360 --> 00:01:58,480
Und natürlich die gruppe join das ist schon mal klar

13
00:01:58,480 --> 00:02:05,800
Nur für fife logisch logisch nur für fife er

14
00:02:14,880 --> 00:02:21,000
High IQ only high performer mindset aktiviert leute auf geht's

15
00:02:28,880 --> 00:02:30,880
Wir gucken uns heute github actions an

16
00:02:31,760 --> 00:02:37,240
Und dann fangen an ich erzähle mal ein paar sachen zu wir haben aber ein konkretes ziel heute was wir machen wollen

17
00:02:40,080 --> 00:02:45,600
Ja nee nee nee nee nee das machen wir nicht mal kurz die musik entticken leiser

18
00:02:47,600 --> 00:02:49,600
Auch wenn es richtiger banger ist

19
00:02:53,400 --> 00:02:55,880
Ja aber wenn wir dazu kommen

20
00:02:56,120 --> 00:03:01,680
Ja aber wenn wir dazu kommen dann machen wir das heute genau das ist das ziel

21
00:03:04,160 --> 00:03:08,800
Wobei ich den part noch nie gemacht habe das heißt da müssen wir tatsächlich mal schauen

22
00:03:14,280 --> 00:03:19,360
Das ist so ein geiler soundtrack den kann man echt in endlos schleifel laufen lassen seit elf jahren

23
00:03:20,320 --> 00:03:22,320
theoretisch

24
00:03:22,320 --> 00:03:24,320
Die

25
00:03:24,520 --> 00:03:26,520
Hoggers

26
00:03:27,040 --> 00:03:32,480
Kurz audio settings checken nein nicht volume mixer warum will ich immer auf volume mixer

27
00:03:33,080 --> 00:03:36,800
Weil wenn los settings für den arsch sind man nicht durchblickt vielleicht könnte sein

28
00:03:45,080 --> 00:03:47,080
Du kannst helfen beim hour

29
00:03:48,000 --> 00:03:54,000
Übrigens nichts hat nichts mit der hour zu tun in dem fall geht es um das art user repo

30
00:03:54,520 --> 00:03:58,520
heißt überhaupt die art shoot also art user heißt heißt das repo glaub schon

31
00:03:59,400 --> 00:04:01,400
das hour

32
00:04:01,400 --> 00:04:03,520
Nee, aber wir gucken uns heute an

33
00:04:04,480 --> 00:04:11,560
Wie eben wir ein projekt was ich auf github habe also den vm champ was sonst ja wie wir das automatisch

34
00:04:11,760 --> 00:04:13,760
bilden können

35
00:04:13,760 --> 00:04:19,680
Und so gucken wir uns ein paar sachen drumherum an so von ganz simpel bis ein bisschen komplizierter bis

36
00:04:20,800 --> 00:04:24,680
docker multistage wobei weiß ich auch mal multistage bild brauchen

37
00:04:25,760 --> 00:04:27,760
wie man docker docker

38
00:04:28,640 --> 00:04:36,880
Bilds bzw. Containerbilds casht in github actions wie man artefakte hoch lädt und danach eventuell auch muss ich mal gucken

39
00:04:38,640 --> 00:04:43,440
Wie man beispielsweise noch eine art user repo package pushen kann mal gucken wie weit wir kommen es

40
00:04:43,480 --> 00:04:48,200
Könnte sein dass heute immer wo kreisel klein ist bis jetzt ist allerdings noch keiner da

41
00:04:49,800 --> 00:04:54,760
Deswegen vermute ich mal dass nix mehr ist

42
00:04:56,160 --> 00:04:57,440
aber

43
00:04:57,440 --> 00:04:59,440
Man weiß es nicht

44
00:05:04,880 --> 00:05:07,760
Du du du du du du du tu tu tu tu

45
00:05:13,440 --> 00:05:16,720
Was ich packetieren will genau das was wortig gerade verlinkt hat

46
00:05:17,360 --> 00:05:23,240
Das hier ich mache aber erstmal die vm an der stream muss ja noch richtig anlaufen sind erst 69 leute da

47
00:05:23,560 --> 00:05:29,120
Sehr gute zuschauerzahl ich hoffe alle haben wie gesagt das high performer mindset heute am start

48
00:05:29,760 --> 00:05:31,760
weil weil auch only high performer

49
00:05:32,720 --> 00:05:36,080
sind sind ready für den github actions crash kurs

50
00:05:36,640 --> 00:05:39,680
Das hast du neulich schon richtig den packen Wahnsinn

51
00:05:40,640 --> 00:05:45,600
den muss man normalerweise nicht groß roundig packen den kann man bauen und upload als release in github

52
00:05:46,240 --> 00:05:51,640
Aber das bietet sich jetzt einfach an weil das eben neues neues projekt es bringt wieder auf das große

53
00:05:52,640 --> 00:05:55,100
was� ach das hier oder ich kann das ja vielleicht nur machen

54
00:05:55,400 --> 00:05:58,160
säger ich bin into

55
00:05:58,160 --> 00:06:01,080
den kann man bauen und uploaden als release in github

56
00:06:01,440 --> 00:06:07,640
Aber das bietet sich jetzt einfach an weil das eben neues neues projekt ist übrigens gab heute tatsächlich ein pull request

57
00:06:08,160 --> 00:06:12,240
Guck mal da ist gar ein pull request falscher link für all mal linux

58
00:06:13,280 --> 00:06:18,560
Vom christ im moment ist ne ne moment das das das der christian waldmann das der christian heuse darf man nicht

59
00:06:19,000 --> 00:06:24,360
Hab gedacht vielleicht wärst du das gewesen im prinzip kleine sache aber das finde ich gut dass die leute hier mitmachen

60
00:06:24,920 --> 00:06:31,320
So pack man erste mal erst mal alle pakete update zack arch by the way gibt es immer was zum updaten

61
00:06:33,480 --> 00:06:35,480
Gib ihm

62
00:06:35,800 --> 00:06:42,680
Wichelt studio code auch bämm alles was ist denn da neu das müssen wir mal kurz gucken wie ist code 1.77

63
00:06:44,200 --> 00:06:46,200
Im märz okay

64
00:06:46,680 --> 00:06:48,680
kam raus am

65
00:06:49,240 --> 00:06:52,440
Datum ist overrated outdated gebaited braucht man nicht

66
00:06:52,440 --> 00:06:56,680
Wer will auch schon ein datum in release notes in release notes haben mensch

67
00:06:58,840 --> 00:07:01,640
Vermute mal heute oder gestern kam das raus

68
00:07:03,480 --> 00:07:09,080
Aber so datum wäre schon wäre schon echt extrem porg wenn man so was rausbringt

69
00:07:11,880 --> 00:07:14,440
Ja okay heute heute kam das ganze wohl raus okay

70
00:07:14,440 --> 00:07:19,000
Lass mal ganz kurz drüber gucken ob es irgendwas irgendwas spannendes gibt in der aktuellen wie das code version

71
00:07:19,160 --> 00:07:24,840
Accessibility thermal ex blablabla blablabla was except in ordentlich auch wurscht

72
00:07:26,360 --> 00:07:28,360
Copy github die blinks okay

73
00:07:29,080 --> 00:07:36,600
Ich benutze eh keine gith integration in git in in visual studio code dass ich den sinn persönlich gar nicht drinne ich bin gefühlt einer der wenigen

74
00:07:36,920 --> 00:07:39,320
Die komplett auf kommando zeile schwören

75
00:07:41,160 --> 00:07:42,680
Hat man jetzt einen

76
00:07:42,680 --> 00:07:45,640
Browser in github hat man jetzt habe ich das richtig

77
00:07:46,280 --> 00:07:52,200
Browser in github hat man jetzt habe ich das richtig gesehen leute haben die jetzt den browser in visual studio code

78
00:07:54,200 --> 00:07:58,920
Also ich meine das ganze ding basiert auf browser technologie es gab trotzdem lange zeit keinen browser

79
00:08:06,200 --> 00:08:08,200
Ach nee

80
00:08:08,600 --> 00:08:10,600
Die machen jetzt

81
00:08:11,720 --> 00:08:13,720
Was bin ich hier überhaupt sehend

82
00:08:14,200 --> 00:08:16,200
Was ist das hier edge

83
00:08:16,440 --> 00:08:18,360
Oder was?

84
00:08:18,360 --> 00:08:21,000
Was ist das hier was man da sieht überhaupt edge

85
00:08:21,880 --> 00:08:23,880
Der edge sieht aber anders aus als meiner

86
00:08:24,920 --> 00:08:30,520
Aber in kirby musik ist mir zu anstrengend gerade ich brauche ich brauche irgendwas irgendwas entspannendes

87
00:08:34,840 --> 00:08:36,840
Ja

88
00:08:37,960 --> 00:08:42,480
Ist ist okay hauptsache irgendwas was nicht so nicht so anstrengend ist im hintergrund

89
00:08:43,440 --> 00:08:50,240
Oder ich mache andere ich mache wirklich für das wort andere hintergrund musik und

90
00:08:52,560 --> 00:08:58,560
Machen uns jetzt erst mal fünf minuten ordentliche heavy metal an nee kann ich nicht mal ich habe keinen ich habe keinen eigenen tonspur

91
00:09:03,120 --> 00:09:05,120
Terminal improvements

92
00:09:05,840 --> 00:09:07,840
All shell null

93
00:09:08,400 --> 00:09:10,400
Gits file support

94
00:09:12,400 --> 00:09:18,320
Verwendet jemand von euch geht in visual studio code beziehungsweise irgendwelche frage erweitern wir die frage mal

95
00:09:18,760 --> 00:09:27,680
Verwendet von euch irgendjemand einen editor mit git integration von dem er halt auch die git integration benutzt im editor und ich meine damit jetzt nicht

96
00:09:28,240 --> 00:09:33,760
Merch konflikt diff das ist das ist tatsächlich was wo ich die daseinsberechtigung von einem

97
00:09:33,920 --> 00:09:35,920
Editor gestütztem

98
00:09:36,960 --> 00:09:39,520
Merch tool verstehe ich ja

99
00:09:41,120 --> 00:09:43,120
Ihr verwende das wirklich

100
00:09:43,120 --> 00:09:48,320
Okay, ich meine ich will euch jetzt ich will euch das nicht ausreden mein ihr könnt ja verwenden was ihr will was ihr wollt

101
00:09:48,320 --> 00:09:56,400
Aber ich mag das gar nicht ich mach git kommando zeilen die da weiß man wenigstens was passiert wir hatten wir hatten mal einen entwickler das weiß ich noch bei uns

102
00:09:57,920 --> 00:10:00,640
Der der war tatsächlich damals im admin team

103
00:10:00,640 --> 00:10:06,800
Weil er sich ums deployment von irgendwelchen anwendungen ist auch egal in der grunde ist egal zumindest er hat damals noch in klips oder

104
00:10:07,600 --> 00:10:09,600
IntelliJ ich glaube aber es war noch eclipse damals

105
00:10:10,160 --> 00:10:14,160
Verwendet mit irgend so einem git plugin und er hat immer ganz merkwürdige

106
00:10:14,720 --> 00:10:20,640
Rebases gemacht mit diesem mit diesem tool ich wüsste gar nicht wie ich das wie der das gemacht hat wie man das auf der kommando zeile gescheit macht

107
00:10:20,960 --> 00:10:24,960
Aber es war kam am ende immer nicht das raus was ich gerne haben wollte zu merchen

108
00:10:25,040 --> 00:10:27,040
Da weiß man wenigstens genau was passiert

109
00:10:28,320 --> 00:10:32,480
Notebooks interessiert mich nicht interessiert mich nicht language

110
00:10:35,440 --> 00:10:42,480
Aber die wollen bei typescript irgendwann z sharp überholen oder wenn die schon bei version 5 sind z sharp ist jetzt aber glaubt bei version 11 oder

111
00:10:43,040 --> 00:10:45,040
nächstes mal 12

112
00:10:45,280 --> 00:10:47,280
Git ignore support

113
00:10:48,240 --> 00:10:50,240
Wie geht es jetzt

114
00:10:51,200 --> 00:10:53,200
Git ignore support

115
00:10:54,320 --> 00:10:56,560
Wie gab es das die ganze zeit nicht oder was

116
00:10:57,520 --> 00:11:01,880
Man hat davon abgesehen was muss man bitteschön supporten an git ignore files

117
00:11:03,040 --> 00:11:05,040
was was

118
00:11:12,080 --> 00:11:18,000
Weil es das heidet das heidet dann im editor view wenn man das im git okay ganz nice

119
00:11:18,560 --> 00:11:20,560
Das ist das ist schick extensions

120
00:11:21,680 --> 00:11:24,960
Wie viel ist denn da drinnen man notebooks verwende ich in der form nicht

121
00:11:26,160 --> 00:11:28,800
GitHub co-pilot natürlich was auch sonst

122
00:11:30,800 --> 00:11:32,800
So viele features

123
00:11:35,840 --> 00:11:41,920
Eol warning für windows 8 und windows 8 1 ja das können die ruhig eol das mir egal

124
00:11:44,720 --> 00:11:46,720
Big thank you to all contributors

125
00:11:48,240 --> 00:11:50,160
Na gut alles klar

126
00:11:50,160 --> 00:11:57,360
Jetzt wissen wir bescheid visual studio 177 ist raus nichts dabei was mich groß interessiert aber heißt ja nicht dass nichts dabei ist was euch interessiert

127
00:11:59,360 --> 00:12:06,320
Co-pilot ist nice ja ich verspreche mich bei co-pilot immer ich sage immer co-pilot was aber plötzlich heißt ja co-pilot aber

128
00:12:06,960 --> 00:12:08,960
co-pilot ist irgendwie so

129
00:12:09,600 --> 00:12:14,520
Kommt mir eher in kopf bei dem was github co-pilot eigentlich ist als co-pilot

130
00:12:18,960 --> 00:12:20,600
Ja

131
00:12:20,600 --> 00:12:26,160
Gut das habe ich auch das das das habe ich auch in der kommando zeile ich gehe einfach in der history zurück

132
00:12:27,000 --> 00:12:30,640
Und suche mir das letzte kommet raus das ist dann meistens update oder update

133
00:12:31,320 --> 00:12:35,080
Irgendwie sowas ist auch nicht sonderlich durch sonderlich aussahre kräftig

134
00:12:37,600 --> 00:12:43,800
Also die besten die besten kommet messages hatte ich immer noch hier als wir ein bisschen komponente stellens gemacht haben und ich

135
00:12:44,240 --> 00:12:46,240
Ich github actions triggern musste

136
00:12:46,240 --> 00:12:51,840
Und die die besten die besten kommet messages gab es immer noch

137
00:12:53,760 --> 00:12:55,760
Gab es immer noch hier

138
00:12:55,760 --> 00:13:03,360
Best feature ever und und um nicht und um nicht zu vergessen die qtab hat auch wunder sehr gute sehr gute kommet messages

139
00:13:03,840 --> 00:13:05,840
Aber ich habe mich hab mich vertan glaube ich

140
00:13:07,840 --> 00:13:09,840
Ah ne doch nicht

141
00:13:09,840 --> 00:13:16,080
Ein anderes repo von mir hatte 400 400 kommets 400 kommets keckel drinne

142
00:13:18,400 --> 00:13:24,400
Ja warum nicht dafür dafür ist das hier tatsächlich ja ok hier wird die readme ein bisschen geupdatet ja über das

143
00:13:24,400 --> 00:13:28,400
über das github frontend deswegen geht es nicht anders aber ansonsten ist eigentlich alles in ordnung

144
00:13:34,080 --> 00:13:36,080
Nice

145
00:13:36,960 --> 00:13:38,960
Nice

146
00:13:45,840 --> 00:13:51,960
Hello empty bringt ja auch nicht wirklich was da hast du halt einen kommet ohne kommet message ein kommet ohne kommet message ist trotzdem neues kommet

147
00:13:53,960 --> 00:13:58,840
Das beste was man machen kann ist einfach wenn man lokal oder wenn man halt irgendwie immer wieder was pushen muss zum triggern

148
00:13:59,240 --> 00:14:01,240
wenn man einfach lokal

149
00:14:01,800 --> 00:14:07,600
Was erzähl ich lokal lokal einfach immer das letzte letzte tag überschreibt

150
00:14:07,600 --> 00:14:12,760
Endlich letzte tag letzte kommet immer wieder überschreibt und forst pusht in extra branche zum ausprobieren

151
00:14:12,920 --> 00:14:16,480
Dann saut man nicht total rum falls man das irgendwann mal merchen will und gut ist

152
00:14:19,360 --> 00:14:23,720
Benutzt du auch geht chat gpt für boilerplate code ehrlich gesagt selten

153
00:14:24,520 --> 00:14:28,600
Eigentlich gar nicht wofür ich chat gpt ganz gerne verwende ist manche sachen

154
00:14:28,960 --> 00:14:34,560
Wenn ich nicht so genau sicher bin wie das wie das funktioniert zum beispiel habe ich letztes verwendet

155
00:14:34,960 --> 00:14:39,880
Interop zwischen z libraries und z sharp da war ich mir nicht ganz sicher wie man das aufruft

156
00:14:39,880 --> 00:14:43,080
Chat gpt hat auch ziemlich ein mist erzählt wieder zwischendurch

157
00:14:46,520 --> 00:14:51,240
Aber wenn man dann schreibt so nach dem motto das und das gibt es nicht macht auch mal das beispiel in c

158
00:14:51,680 --> 00:14:56,120
Dann ist es manchmal ganz praktisch gerade und es ist jetzt bescheuert an aber gerade

159
00:14:56,360 --> 00:15:01,280
Weil chat gpt manchmal die sachen ein bisschen zu umständlich macht hat man manchmal

160
00:15:02,400 --> 00:15:06,400
Erkennt man einen gewissen denk ansatz drin für sich selbst weil einem auffällt

161
00:15:07,160 --> 00:15:13,300
Okay, der eigentliche weg geht ja auch so du schreibst dann zwar im endeffekt nicht so wie es chat gpt geschrieben hat

162
00:15:13,640 --> 00:15:19,360
Aber man kommt man kommt dann drauf an der stelle ach ok das ist ja eigentlich gar kein pointer sondern ist ein pointer auf ein pointer

163
00:15:19,680 --> 00:15:22,600
Deswegen musst du musst du die adresse nehmen an der stelle und sowas

164
00:15:23,280 --> 00:15:24,320
Also

165
00:15:24,320 --> 00:15:26,200
Für solche sachen

166
00:15:26,200 --> 00:15:33,320
Zumindest mal kann es nicht schaden chat gpt zu fragen hier erklär mal bitte wie ich keine ahnung lip wird das und das aufrufe

167
00:15:33,320 --> 00:15:38,720
Und dann versucht das chat gpt zu erklären chat gpt lügt halt auch ganz gerne wenn es keine ahnung hat

168
00:15:38,720 --> 00:15:44,840
Haben wir letztens erst gesehen wir haben letztens chat gpt gefragt wie man eine progress bar und dass die schaab mit dem

169
00:15:44,840 --> 00:15:51,720
Http klein macht für den download also progress anzeige und hat sich ganz frech einfach was ausgedacht

170
00:15:52,600 --> 00:15:58,560
Und wenn man es dann darauf hingewiesen hat dass es diese methode im http klein gar nicht gibt hat es halt ja das stimmen

171
00:15:58,560 --> 00:16:03,960
Und was anderes rausgehauen was auch nicht funktioniert also insofern ja

172
00:16:06,760 --> 00:16:10,080
Ja ich habe die letzten tage ein paar

173
00:16:11,600 --> 00:16:13,600
Image recognition

174
00:16:13,880 --> 00:16:20,260
Sachen ausprobiert zum beispiel open flamingo das ist zwar irgendwas aus auf lama basis

175
00:16:20,540 --> 00:16:24,980
Weil ich habe eine kamera bei mir im keller gegenüber von der heizung

176
00:16:25,740 --> 00:16:27,180
und die

177
00:16:27,180 --> 00:16:29,180
hat in ihrem bildbereich

178
00:16:29,700 --> 00:16:36,460
Die druckanzeige von der heizung die druckanzeige von der heizung ist eine ist so so so ein analoger

179
00:16:37,660 --> 00:16:43,700
Tacho nenne ich das mal ja von 0 bis 4 und die nadel ist meistens so zwischen 1 und 2

180
00:16:45,260 --> 00:16:47,260
Das machen wir heute gar nicht

181
00:16:47,820 --> 00:16:51,540
Lama ist ein ki model von facebook

182
00:16:53,260 --> 00:17:01,580
Das machen heute gar nicht heute mal high IQ github github actions und pipeline bauen mini pipeline so dass man dass man alles alles verstehen kann

183
00:17:04,220 --> 00:17:09,580
Und der dem dem habe ich die den hab dem habe ich die bilder hochgeladen habe gefragt so nach dem auto

184
00:17:10,820 --> 00:17:15,060
Auf welchem wert steht denn die nadel in diesem in dieser anzeige

185
00:17:16,060 --> 00:17:20,300
Und ich habe es versucht dahin zu führen dass das model erzählt

186
00:17:20,980 --> 00:17:27,620
Was was ich hören will so nach dem motto ich habe ihm gesagt hier sehen sie eine analoge also hier siehst hier hier sieht

187
00:17:27,620 --> 00:17:31,020
man eine analoge anzeige zwischen 0 und 4

188
00:17:32,340 --> 00:17:35,660
Aktuell befindet sich die nadel zwischen 1 und 2

189
00:17:36,540 --> 00:17:40,940
Auf auf welchem die schritte sind in 0,2 er steps

190
00:17:41,540 --> 00:17:49,020
Auf welchem wert befindet sich zur zeit die nadel so ich habe den model wirklich versucht genau zu erklären was ich haben will hat es nicht

191
00:17:49,020 --> 00:17:50,020
hinbekommen

192
00:17:50,020 --> 00:17:55,720
Also da setze ich tatsächlich ein bisschen auf gpt 4 gpt 4 hat ja ein bisschen die leute

193
00:17:55,940 --> 00:18:02,820
Gebetet ich weiß nicht ob ihr noch die ankündigung kennt von von gpt 4 so nach dem motto man kann bilder als input

194
00:18:02,940 --> 00:18:08,460
Benutzen und sowas und das ist jetzt ganz furchtbar innovativ man kann sich bilder beschreiben lassen und sowas

195
00:18:09,100 --> 00:18:11,100
Das geht alles noch gar nicht

196
00:18:11,820 --> 00:18:15,740
Das haben die in die ankündigung einfach reingepackt und jeder denkt irgendwie ja geil

197
00:18:16,300 --> 00:18:22,540
Gpt 4 kann bilder kann es noch gar nicht es war einfach nur eine ankündigung drin mag sein dass es das intern irgendwie kann

198
00:18:23,340 --> 00:18:28,980
Aber publik benutzen kann das noch niemand selbst wenn du bezahlst für gpt 4 kannst du das nicht machen

199
00:18:29,220 --> 00:18:33,500
bilder support ist obwohl die das angekündigt haben und obwohl die das quasi so

200
00:18:34,260 --> 00:18:41,460
Introduced haben als wäre das jetzt logischerweise da und dabei und für jeden benutzt war ist nicht da und wann das benutzt

201
00:18:41,460 --> 00:18:45,940
Bar wird es auch noch nicht klar also insofern ganz schöner tschie bait

202
00:18:46,300 --> 00:18:52,300
Glücklicherweise habe ich im vorfeld mal ein bisschen nachgeforscht festgestellt dass das der fall ist und habe kein sonst hätte ich nämlich in

203
00:18:52,300 --> 00:18:55,660
Gpt 4 aber abgeschlossen hätten wir das angeguckt weil da

204
00:18:56,460 --> 00:18:58,460
da hoffe

205
00:18:58,780 --> 00:19:00,780
Es poppt heute wieder am mikro

206
00:19:03,500 --> 00:19:09,420
Ah ich weiß woran es liegt jetzt weiß ich woran das immer liegt

207
00:19:11,860 --> 00:19:13,220
Alter

208
00:19:13,220 --> 00:19:18,780
Jetzt jetzt weiß ich okay ich kann es ich ich ich versuche es euch mal zu erklären woran es liegt normalerweise

209
00:19:19,260 --> 00:19:24,340
Habe ich das kabel vom headset also das hier jetzt poppt das wenn ich so an dem kabel mache ja

210
00:19:26,260 --> 00:19:31,500
Normalerweise hängt das kabel vom headset einfach so ein paar mir an der seite runter auf die erde manchmal

211
00:19:32,500 --> 00:19:35,460
Na moment aber nur vielleicht ist es auch nicht das richtige

212
00:19:36,380 --> 00:19:40,820
Aber es ist ja nur manchmal so wenn ich das kabel aus versehen

213
00:19:41,260 --> 00:19:44,460
Über passt mal auf jetzt jetzt lasse ich hier mal liegen

214
00:19:45,020 --> 00:19:51,020
Wenn ich das kabel aus versehen über die armlehne runter hängen lassen habe dann komme ich immer so

215
00:19:52,620 --> 00:19:54,620
Was ist

216
00:19:55,260 --> 00:20:01,380
Immer immer so dran das poppt nicht das das macht so dass das dürfte so so dumm für

217
00:20:01,500 --> 00:20:03,500
dumm für

218
00:20:04,340 --> 00:20:05,660
Ja

219
00:20:05,660 --> 00:20:10,500
Schlaggeräusche geben im hintergrund wenn ich das kabel im hintergrund jetzt hier drüber drüber

220
00:20:12,060 --> 00:20:15,620
Das das kabel klatscht dann immer so an den

221
00:20:17,140 --> 00:20:21,620
An die armeauflage vom stuhl jetzt mache ich es wieder runter jetzt sollte eigentlich nix sein hoffe ich mal

222
00:20:24,180 --> 00:20:26,700
Müssen mich dran erinnern ok daran scheint es wahrscheinlich zu liegen

223
00:20:27,700 --> 00:20:33,700
Daran scheint es wahrscheinlich die polizei ist da nice daran scheint es wahrscheinlich zu liegen also ihr könnt mich daran erinnern sollte es mal wieder komische

224
00:20:34,700 --> 00:20:36,700
Schlaggeräusche im hintergrund machen

225
00:20:37,340 --> 00:20:39,340
Dann ist das das kabel was an die

226
00:20:39,660 --> 00:20:41,660
armeauflage haut

227
00:20:42,500 --> 00:20:44,500
Scheuert

228
00:20:44,500 --> 00:20:45,500
Jo

229
00:20:45,500 --> 00:20:51,580
Also da setze ich ja ein bisschen auf gpt 4 das wenn gpt 4 dann endlich mal rauskommt mit image input

230
00:20:51,620 --> 00:20:56,580
Mit image input also mit image erkennung und allem das gpt 4

231
00:20:58,620 --> 00:21:00,620
Das kann

232
00:21:01,620 --> 00:21:03,620
Meine

233
00:21:05,060 --> 00:21:13,340
Anzeige also meine druckanzeige an der heizung im keller auslesen das das wäre äußerst hilfreich dafür gebe ich auch 20 euro im monat aus

234
00:21:13,340 --> 00:21:15,340
Ja

235
00:21:20,380 --> 00:21:28,740
Ja nice ich wie gesagt ich also gpt 4 bzw code pilot ich werde es mir auf jeden fall in nächster zeit noch mal angucken

236
00:21:31,260 --> 00:21:34,740
Ich will halt das aber erst abschließen wenn das image feature dabei ist

237
00:21:35,060 --> 00:21:41,580
Weil das image feature ist was da bin ich wirklich scharf drauf und es ist halt doof dass sie so angekündigt haben als wäre das automatisch

238
00:21:41,980 --> 00:21:47,980
Gleich mit dabei das haben die ja ganz selbstverständlich in der ankündigung so erwähnt als ist es jetzt da aber es ist halt einfach noch

239
00:21:47,980 --> 00:21:51,140
Gar nicht da und es weiß auch keiner wann es wann es genau kommt

240
00:21:51,220 --> 00:21:56,300
So ich mache noch mal ein update von meiner vm. Wobei. Nee habe ich das nicht gerade gemacht. Waren können update dabei. Ach scheiße

241
00:21:56,300 --> 00:21:58,440
War mein reboot schadet auf jeden fall nicht

242
00:21:59,940 --> 00:22:01,940
Einmal einmal rebooten nicht verkehrt

243
00:22:03,300 --> 00:22:06,300
Tut gut reboot reboot tut gut

244
00:22:11,580 --> 00:22:13,580
So

245
00:22:14,420 --> 00:22:16,420
Firefox

246
00:22:17,420 --> 00:22:21,420
Sack ja gebeck ok nice

247
00:22:26,700 --> 00:22:28,260
So

248
00:22:28,260 --> 00:22:35,100
Also ich hoffe ich bin auch bei github eingeloggt ich bin auch bei github eingeloggt sehr nice sonst hätten wir jetzt probleme gekriegt

249
00:22:35,300 --> 00:22:39,020
Weil ich mein password na doch ich habe ein password im save stehen hätte ich drüber kopieren können

250
00:22:40,020 --> 00:22:48,660
Also chat ich hoffe ihr habt das high performer mindset heute ausgepackt heute mal github actions das könnt ihr danach in euren lebenslauf schreiben

251
00:22:49,580 --> 00:22:57,820
Fortgeschrittene oder quatsch vor wer schreibt fortgeschrittene rein fortgeschrittene ist out experte in github actions gleich danach in lebenslauf rein

252
00:22:58,500 --> 00:23:00,500
fünf jahre experience

253
00:23:01,380 --> 00:23:07,940
Direkt auch auf linkedin und überall können wir direkt als referenz ihr kriegt am ende für streams auch alle ein zertifikat ausgestellt

254
00:23:08,420 --> 00:23:10,420
das originale wubbler zert

255
00:23:11,660 --> 00:23:13,660
Also ist weltweit sehr beliebt

256
00:23:14,620 --> 00:23:18,620
Und da werdet ihr instant eingeladen bei irgendwelchen vorstellungsgesprächen

257
00:23:19,980 --> 00:23:23,180
Das heißt heute muss das high performer mindset ausgepackt werden

258
00:23:24,140 --> 00:23:28,940
Aber nur wenn du das mit pecken wie paint alter das ist ei generiert natürlich

259
00:23:28,940 --> 00:23:34,340
Payne so wir sind doch wir sind im jahr 2023 da wird so was nicht mehr mit paint gebaut

260
00:23:35,700 --> 00:23:39,100
Das ist dann ein nft ne ne das klingen ja mehrere leute das wird ja nicht funktionieren

261
00:23:48,900 --> 00:23:50,900
Okay

262
00:23:50,900 --> 00:23:53,500
Ich muss mal kurz in mich gehen wo fangen wir denn jetzt mal

263
00:23:53,540 --> 00:23:55,540
Wo fangen wir denn jetzt am besten an

264
00:24:02,940 --> 00:24:04,940
Nfts sind schon langsam wieder out

265
00:24:05,980 --> 00:24:07,980
Ja der hype der hype ist rum

266
00:24:08,540 --> 00:24:13,020
Wobei uns das auf lange sicht sie denke ich schon erhalten bleiben wird

267
00:24:13,900 --> 00:24:15,900
Aber wir sind schon langsam wieder out

268
00:24:16,380 --> 00:24:18,380
Ja der hype der hype ist rum

269
00:24:18,980 --> 00:24:22,660
Wobei uns das auf lange sicht sie denke ich schon erhalten bleiben wird

270
00:24:24,500 --> 00:24:32,580
Also gut gehen wir mal rüber auf github ich weiß wo ich anfange ich habe hier ein projekt es ist egal was es ist

271
00:24:33,940 --> 00:24:37,580
Also macht heute macht heute eigentlich keinen unterschied was es ist

272
00:24:38,540 --> 00:24:42,380
geht einfach nur darum dass ich ein projekt auf github habe was wir heute als

273
00:24:43,700 --> 00:24:48,260
Grundlage für github actions benutzen wollen wenn ihr wissen wollt was es ist es ist was wo man

274
00:24:49,420 --> 00:24:51,820
lokal auf die schnelle sich vms erstellen kann

275
00:24:54,500 --> 00:25:01,580
Willst du echte github actions nehmen ja ne ne ich will kein act runner ich nehme echte github actions

276
00:25:09,980 --> 00:25:17,620
Ja man kann sich damit lokale test vms schnell erstellen das ist ein sicherprogramm das heißt das muss gebaut werden

277
00:25:18,500 --> 00:25:20,500
das muss

278
00:25:23,580 --> 00:25:25,580
Es muss und und push gebaut werden

279
00:25:26,340 --> 00:25:32,820
Das muss in vallem in dem container in dem cento 7 container gebaut werden dass das system worauf es gebaut wird schön alt ist das

280
00:25:32,820 --> 00:25:38,620
Ist tatsächlich wichtig dass es möglichst rückwärts kompatibel zu vielen system läuft so jetzt hat man hier lokale vm und kann rumsauen

281
00:25:42,300 --> 00:25:44,300
Github ist arsch lahm

282
00:25:47,180 --> 00:25:53,020
Ich ja ihr du hast recht aber ich finde es nicht schlecht wenn wir es in github machen wir gucken mal wenn es zu unerträglich

283
00:25:53,060 --> 00:25:55,060
wird machen wir das

284
00:25:55,380 --> 00:26:00,500
Ich finde es nicht schlecht ist auf github zu machen da sieht man nämlich auch mal was es für ein vorteil ist wenn man cashing benutzt

285
00:26:03,660 --> 00:26:08,860
Wie viel schneller es dann ist und ich gehe davon aus und ich hoffe wenn wir das ordentlich cashen

286
00:26:10,140 --> 00:26:17,660
Dann haben wir da haben wir da weniger probleme warum nicht schittier actions weil github das ist was die meisten leute verwenden

287
00:26:18,660 --> 00:26:23,740
Und ich glaube das bringt mehr leuten was wenn wir uns github actions angucken als

288
00:26:23,980 --> 00:26:27,960
Schittier actions wobei das ja im prinzip ein github actions klohn ist

289
00:26:32,380 --> 00:26:35,420
So also wir haben ein c-sharp projekt

290
00:26:36,460 --> 00:26:42,800
Und das ziel ist dass wir das projekt bauen auf möglichst alten stand in einem alten docker container

291
00:26:43,300 --> 00:26:45,300
dann das ganze

292
00:26:45,460 --> 00:26:53,380
Bild also die die das das resultierende binary also das jetzt zum beispiel ja da kommt also ein binary rausgefallen das binary

293
00:26:53,820 --> 00:27:01,700
Dann als artefakt an den bild dran hängen jetzt zu zeigen wie das geht die einzelnen steps cashen dass die actions

294
00:27:02,460 --> 00:27:07,100
schneller gehen und am ende ist das ziel dass wir ein art schuhe repo machen

295
00:27:07,860 --> 00:27:09,860
also ein

296
00:27:10,860 --> 00:27:18,380
Dass wir einen repo machen in art schuhe repo wo wir dann das binary reinpushen ob wir soweit kommen muss ich mal gucken

297
00:27:18,580 --> 00:27:23,060
hängt wahrscheinlich ein bisschen davon ab ob wir heute mmo kreise machen oder nicht

298
00:27:25,340 --> 00:27:32,100
Bevor wir anfangen mit github actions muss ich erst mal kurz erklären was ist github actions beziehungsweise warum gibt es was ist was ist der

299
00:27:32,100 --> 00:27:35,140
sinn von dieser ganzen geschichte also warum warum gibt es so was

300
00:27:36,460 --> 00:27:38,100
beziehungsweise warum

301
00:27:38,140 --> 00:27:43,540
Github actions ist ja nicht das erste beziehungsweise was ist ist so so geschichten gut also

302
00:27:43,820 --> 00:27:47,940
Github actions ich weiß gar nicht was die was sie selbst zu sagen was github actions ist

303
00:27:50,100 --> 00:27:52,100
Ja nee nicht wirklich

304
00:27:53,420 --> 00:27:59,940
Ja github actions ist continuous integration continuous delivery platform that allows automate build ok steht im prinzip alles da

305
00:28:00,220 --> 00:28:04,340
So wirklich so wirklich klar wenn man das noch nicht benutzt hat ist es ist es eigentlich nicht

306
00:28:05,340 --> 00:28:12,300
Also wenn man eine software es muss übrigens nicht zwangsläufig nur ein software projekt sein es kann durchaus auch ein software projekt mit

307
00:28:13,460 --> 00:28:15,460
infrastruktur definitionen sein

308
00:28:16,100 --> 00:28:18,100
Aber gehen wir jetzt mal voraus ein software projekt

309
00:28:19,420 --> 00:28:24,860
Als besteht ihr erst einmal auch source code damit man das ganze ausführen kann muss es in irgendeiner art und weise

310
00:28:26,220 --> 00:28:27,900
Zu einem package

311
00:28:28,500 --> 00:28:35,780
Zusammen geschnürt werden was auch immer das bedeutet das kann ein compiler sein der läuft es kommt eine exe am ende raus in den binary was ausführbar ist

312
00:28:37,140 --> 00:28:44,980
Es kann irgendein job package für javas sein es kann ein container image sein was in irgendeine registry kommt aber irgendwie muss das source code

313
00:28:46,180 --> 00:28:52,780
So aufbereitet werden dass man es am ende dort wo man das laufen lassen will ausführen kann ist ja logisch mit dem source code alleine kann

314
00:28:52,780 --> 00:28:54,780
man nicht allzu viel machen

315
00:28:55,340 --> 00:29:01,460
Das können verschiedene schritte sein die dazu erforderlich sind es kann compiler step sein der notwendig ist vielleicht möchten wir vorher noch

316
00:29:01,460 --> 00:29:03,860
Ein paar tests ausführen es kann ein image

317
00:29:04,380 --> 00:29:06,380
bauen notwendig sein

318
00:29:06,660 --> 00:29:11,740
Vielleicht muss man irgendwelche zwischen steps irgendwo hochladen vielleicht muss man irgendwelche abhängigkeiten

319
00:29:12,460 --> 00:29:14,460
noch überprüfen

320
00:29:14,500 --> 00:29:16,500
zumindest möchte man das ganze

321
00:29:17,580 --> 00:29:19,580
möglichst nachvollziehbar haben

322
00:29:19,980 --> 00:29:23,180
Also nicht jetzt dass ein entwickler das bei sich auf dem notebook baut

323
00:29:23,620 --> 00:29:29,140
Und dann funktioniert die anwendung am endefekt nur bei dem auf dem notebook und nicht auf irgendwie dem server wo es am ende laufen soll

324
00:29:29,780 --> 00:29:31,780
Man möchte das möglichst

325
00:29:31,780 --> 00:29:33,780
nachvollziehbar haben und möchte das vor allem auch

326
00:29:34,620 --> 00:29:36,620
möglichst

327
00:29:36,820 --> 00:29:39,740
Unabhängig von der entwickler plattform haben

328
00:29:40,540 --> 00:29:43,660
Und das ganze so viel oder so weit wie möglich

329
00:29:44,260 --> 00:29:50,820
Automatisiert dass kein entwickler oder in admin oder sonst was hingehen muss und da jeden tag von hand irgendwie die software

330
00:29:50,820 --> 00:29:57,260
Patchen neue package bauen die package dann irgendwo hin deployen und sowas das soll wobei das mit dem deployment noch mal ein zweiter schritt ist da

331
00:29:57,260 --> 00:29:59,260
hat jetzt mit dem bauen erstmal nichts zu tun und

332
00:30:00,820 --> 00:30:03,140
Das soll halt möglichst automatisiert passieren

333
00:30:04,060 --> 00:30:06,060
dass es keine gute idee ist wenn

334
00:30:06,220 --> 00:30:12,460
Die software auf einem entwickler notebook gebaut wird und dann irgendjemand auf den server kopiert und erhofft dass es funktioniert und dann dort andere

335
00:30:12,460 --> 00:30:19,340
Library versionen sind jetzt irgendwelche komischen bugs gibt es gar nicht funktioniert es vielleicht memory leaks gibt wo sonst gar keine sein sollten was auch immer

336
00:30:19,780 --> 00:30:23,100
Da ist man schon relativ früh drauf gekommen dass das nicht so clever ist

337
00:30:23,620 --> 00:30:31,380
Quasi auf auf einer auf der entwicklerkiste zu bauen oder auf unterschiedlichen kisten wenn sie immer die gleiche entwicklerkiste wäre besser noch halb so wild

338
00:30:32,100 --> 00:30:38,860
Auf unterschiedlichen kisten zu bauen oder gar auf produktiven system zu bauen dass es möglichst gleich ist da ist man schon relativ früh auf die

339
00:30:38,860 --> 00:30:42,060
Idee gekommen dass es keine allzu gute idee ist das zu machen

340
00:30:42,940 --> 00:30:48,580
Und dafür gibt es schon seit längerer zeit continuous integration tools sowas wie jenkins

341
00:30:49,940 --> 00:30:52,620
Falls das jemand noch kennt von früher

342
00:31:01,180 --> 00:31:08,500
Jenkins war mit das erste es war nicht das erste weil es gab noch ein vorgängerprogramm von jenkins das war hudson das wird an

343
00:31:08,500 --> 00:31:15,100
Irgendwann gefragt zu jenkins aber jenkins war auf jeden fall somit der erste große bekannte kontinue

344
00:31:15,540 --> 00:31:17,260
erste bekannte

345
00:31:17,260 --> 00:31:22,740
Continuous integration oder es ist ja man muss ja sagen jenkins ist ja eigentlich gar kein richtiges

346
00:31:23,260 --> 00:31:26,620
continuous integration programm sondern mehr oder weniger ein

347
00:31:27,860 --> 00:31:33,180
Task runner mit web interface du kannst den jenkins alles mögliche definieren und hast dann

348
00:31:33,700 --> 00:31:39,580
Verschiedene jobs die du anklicken kannst oder automatisch ausführen lassen kannst oder über das web interface starten kannst die dann

349
00:31:40,020 --> 00:31:46,420
Dinge erledigen die du definiert hast also in jenkins kannst du alles machen dafür musst du auch relativ viel von hand machen das war so

350
00:31:46,580 --> 00:31:48,140
Eines der ersten

351
00:31:48,140 --> 00:31:53,540
Programme in dieser richtung als die leute angefangen haben auf die idee zu kommen es ist keine gute idee

352
00:31:53,980 --> 00:31:57,900
Auf live system software zu kompilieren auf entwicklungsrechner das ganze zu kompilieren

353
00:31:58,300 --> 00:32:02,260
geschweige denn dass es auf dem einen rechner geht auf dem anderen nicht und

354
00:32:03,220 --> 00:32:08,340
Dass es auch gar keiner mehr von hand machen muss und da haben die leute angefangen jenkins zu verwenden jenkins

355
00:32:09,100 --> 00:32:11,100
ist richtig fette java software

356
00:32:14,580 --> 00:32:19,020
Gibt es ein video oder screenshots zu der config deiner netzwerk switch

357
00:32:22,060 --> 00:32:28,300
Also weder noch welchen teil der config interessiert dich denn und vor allem von welchem switch

358
00:32:28,300 --> 00:32:30,820
Ist ja nicht, so dass ich nur einen habe

359
00:32:34,700 --> 00:32:36,700
Hat jemand von euch schon mal

360
00:32:36,700 --> 00:32:37,700
Mikrotik

361
00:32:37,700 --> 00:32:39,020
Mikrotik

362
00:32:39,020 --> 00:32:42,300
Ich habe keine du meinst den mikrotik router den hex poe router

363
00:32:42,620 --> 00:32:47,100
Davon gibt es weder ein video noch kann noch kann ich den config dampf davon ziehen

364
00:32:48,100 --> 00:32:51,100
Wenn du was konkretes wissen willst kann ich dir vielleicht was zu sagen

365
00:32:51,740 --> 00:32:55,260
Wie land config ist in router us ein bisschen eklig

366
00:32:55,940 --> 00:33:00,520
Zu hand haben da muss man sich in paar tutorials durchlesen bis man das gecheckt hat wie das funktioniert

367
00:33:01,780 --> 00:33:03,780
Hat jemand von euch mal die ehre

368
00:33:04,380 --> 00:33:10,500
in frühe also vielleicht immer noch oder erst mal die erst mal die frage an euch hat jemand von euch schon mal die ehre gehabt

369
00:33:10,780 --> 00:33:12,780
hat jemand von euch schon mal die ehre gehabt

370
00:33:12,900 --> 00:33:14,900
dass ihr euch schon mal die ehre gehabt habt

371
00:33:14,900 --> 00:33:20,980
in frühe also vielleicht immer noch oder erst mal die erst mal die frage an euch hat jemand von euch schon mal die ehre gehabt

372
00:33:21,060 --> 00:33:23,380
die letzten jahre über jenkins zu benutzen

373
00:33:24,260 --> 00:33:27,100
und die zweit also wir benutzen dort kein jenkins keine sorge

374
00:33:27,620 --> 00:33:33,420
und die zweite frage ist hat noch jemand die ehre jenkins aktuell betreiben zu müssen beziehungsweise zu benutzen

375
00:33:35,220 --> 00:33:39,460
Also wir hatten jenkins schon vor ganz langer zeit habe ich sogar damals aufgesetzt

376
00:33:39,860 --> 00:33:43,700
weil ich ja damals schon zuständig war für unsere inför für unsere infrastruktur

377
00:33:45,780 --> 00:33:50,580
repos und server definitionen und so was den habe ich damals aufgesetzt den jenkins das war

378
00:33:51,220 --> 00:33:54,700
da gab es noch gar kein offizielles pipelines plugin da gab es ein komisches

379
00:33:55,020 --> 00:34:00,160
ein komisches plugin was dann grüne kästchen dargestellt hat an welcher stelle was fehlt und so was

380
00:34:01,980 --> 00:34:07,900
habe ich damals aufgesetzt und ich muss sagen bis heute mag ich jenkins eigentlich

381
00:34:08,500 --> 00:34:15,420
Es ist ein bisschen aus der mode gekommen wobei man sagen muss dadurch dass jenkins so super flexibel ist und nur nahezu alles

382
00:34:15,980 --> 00:34:19,420
damit machen kannst und das ganze auch gut lokal läuft

383
00:34:21,020 --> 00:34:27,820
Es hat es hat jenkins die zeiten ganz gut überlebt es ist jetzt sicherlich nicht mehr das das tool der wahl heute

384
00:34:28,220 --> 00:34:33,900
wenn man irgendwelche automatisierten builds laufen lassen muss aber wenn man vielleicht ein bisschen mehr links und rechts machen muss

385
00:34:34,140 --> 00:34:39,780
Aber wenn man vielleicht ein bisschen mehr links und rechts machen muss ist jenkins gar nicht so doof

386
00:34:44,540 --> 00:34:49,340
Ach du wechselt auch zum ersten vierten ja bei mir ist auch nächste woche erster arbeitstag

387
00:34:54,860 --> 00:35:00,940
Lies mal eine nachricht please wo denn da das ist doch kein zufall eben auf der arbeit gerade noch gitlab

388
00:35:01,500 --> 00:35:04,180
Pipelines fertig geschrieben das war so ein brainfuck aber die

389
00:35:04,980 --> 00:35:09,740
Saast scan reports werden jetzt in gitlab page was ist ein saast

390
00:35:10,380 --> 00:35:12,380
klingt nach antivirus

391
00:35:13,380 --> 00:35:17,700
System audit and security toolkit

392
00:35:21,540 --> 00:35:23,540
Saast reports

393
00:35:24,260 --> 00:35:26,260
Pfeifert

394
00:35:26,540 --> 00:35:28,540
Saast scan

395
00:35:29,540 --> 00:35:36,020
Irgendwelche security zeug ja wir machen aber so was so was machen wir heute nicht in github actions wir bauen eine software und pushen dann

396
00:35:36,020 --> 00:35:38,020
pushen dann das binary

397
00:35:40,860 --> 00:35:45,780
Gerade wenn man die letzten jahre über viele jenkins gemacht hat fällt es vielen da schwer von weg zu migrieren

398
00:35:46,100 --> 00:35:50,380
wobei ich halt auch sagen muss warum auch wenn es gut funktioniert ja es macht ja

399
00:35:51,220 --> 00:35:54,420
Macht ja keinen sinn was bei jenkins ein bisschen schwierig ist

400
00:35:54,820 --> 00:35:59,580
Zumindest in der vergangenheit ich weiß nicht wie es jetzt ist ich habe schon lange kein neuen jenkins mehr installiert

401
00:35:59,660 --> 00:36:07,940
Was ein bisschen schwierig war beim jenkins ist wenn du das ding skalieren wolltest also wenn die eine instanz nicht mehr ausgereicht hat

402
00:36:08,020 --> 00:36:10,180
Dann wurde es da wurde es ein bisschen kompliziert

403
00:36:10,500 --> 00:36:18,220
Beziehungsweise unmöglich du kannst zwar bei jenkins ganz viele verschiedenen runner haben also so im Prinzip so wie bei gitlab oder github actions auch

404
00:36:18,700 --> 00:36:25,700
Aber du hast nur einen zentralen jenkins server über die alle gehen müssen und also wenn wenn wenn jenkins von ganz vielen leuten benutzt wird hat man

405
00:36:25,700 --> 00:36:27,380
damit probleme

406
00:36:27,380 --> 00:36:29,380
wenn man aber lokal damit klarkommt

407
00:36:29,740 --> 00:36:33,620
Macht ja auch nicht so viel sinn muss ja auch nicht unbedingt sein dass man das abschafft ist ding

408
00:36:34,060 --> 00:36:36,900
lange rede kurzer sinn ich mag jenkins eigentlich immer noch

409
00:36:39,380 --> 00:36:44,300
Aber irgendwann vor ein paar jahren dürfte so vor drei vier jahren gewesen sein ist schon ein bisschen her

410
00:36:44,660 --> 00:36:50,540
Kam github auf die idee sie könnten doch auch so was machen und zwar direkt ins repo integriert

411
00:36:51,500 --> 00:36:58,380
Und zwar haben sie dann sich github actions ausgedacht mit github actions ich zeige euch mal so ein example

412
00:36:58,900 --> 00:37:02,400
gibt so in zum getting getting started oder so was

413
00:37:06,460 --> 00:37:08,460
Ja das ist vielleicht ein bisschen

414
00:37:09,300 --> 00:37:14,380
Ah hier examples gucken wir uns mal ja so sieht das zum warum wisst ihr was

415
00:37:15,540 --> 00:37:19,900
Wir gucken uns einfach ein beispiel von einem von einem repo bei mir an

416
00:37:20,340 --> 00:37:24,100
Hat der typ 1 geantwortet? Ah der typ hat gar nicht geantwortet ich muss mal kurz lesen was er geschrieben hat

417
00:37:24,260 --> 00:37:26,260
Und

418
00:37:36,580 --> 00:37:42,140
Weil das einer geschrieben hat wird viere das nicht machen so ich sage ich zeige jetzt mal ein beispiel bisschen bisschen längeres

419
00:37:42,340 --> 00:37:46,000
絶対 ein kompliziertes beispiel so sieht das ganze in github actions aus

420
00:37:47,220 --> 00:37:49,140
und zwar macht man dort

421
00:37:49,140 --> 00:37:51,140
diesen ganz die ganzen build step

422
00:37:51,900 --> 00:37:55,580
In jammel definiert man das wobei das auch nur zur halb

423
00:37:56,300 --> 00:38:02,140
Halbwahrheit ist ja man definiert das hier alles in jammel und wir gucken uns das gleich auch im detail an wie man das alles macht

424
00:38:02,580 --> 00:38:07,940
Aber man kann auch nach wie vor man sieht es hier man kann auch nach wie vor einfach shell kommandos reinschreiben

425
00:38:07,940 --> 00:38:13,620
Das ist also ein bisschen wie in jenkins wo man auch best scripts untereinander sich sachen zusammen frickelt nur

426
00:38:13,980 --> 00:38:17,900
der große also es ist jammel config ist schon mal der unterschied nur

427
00:38:18,020 --> 00:38:25,420
Der der neiße die neiße geschichte ist dass hier repo und quasi die bildanweisung

428
00:38:26,340 --> 00:38:30,780
alles im gleichen repot also der source code und die bildanweisung sind alles im gleichen repo drinne

429
00:38:31,900 --> 00:38:39,340
Das ist aber jenkins nicht so bei jenkins hast du eine job config ich glaube es gibt mittlerweile sowas wie jenkins files wo man das auch machen

430
00:38:39,340 --> 00:38:41,740
Kann habe ich nie benutzt keine ahnung wie das funktioniert

431
00:38:42,740 --> 00:38:48,660
Aber das ist so ein neuer ansatz gewesen damals im vergleich zu jenkins man hat die definitionen

432
00:38:50,300 --> 00:38:52,540
Direkt im repo beim source code mit drinnen

433
00:38:53,620 --> 00:39:01,140
So man hat nicht nur ein also man kann mehrere workflows haben github actions müssen immer unter punkt github slash workflows

434
00:39:01,140 --> 00:39:05,380
Und dann in den jammel daten kann man mehrere haben die output sieht man dann am ende hier

435
00:39:07,420 --> 00:39:10,100
Und das gucken wir uns aber gleich an wenn man es wenn man es laufen lässt

436
00:39:11,740 --> 00:39:16,980
So und so sieht zum beispiel eine kleine github action aus das geht deutlich geht deutlich komplexer

437
00:39:17,380 --> 00:39:24,940
Das schöne ist an github actions warum es auch meine lieblingsplattform ist um solche um builds zu automatisieren oder generell um sachen

438
00:39:25,060 --> 00:39:29,140
Automatisch laufen zu lassen wir haben da mittlerweile auf der arbeit dinger drinne die gar nicht wirklich

439
00:39:29,540 --> 00:39:36,740
Was mit software builds zu tun haben wir generieren da zum beispiel neue neue inventarlisten und sowas rüber über github actions

440
00:39:37,740 --> 00:39:42,380
Einfach alle viertelstunde laufen dass das ist äußerst praktisch das ganze

441
00:39:44,900 --> 00:39:46,580
Und was man

442
00:39:46,580 --> 00:39:49,780
Was unterscheidet sich das von der github umsetzung

443
00:39:50,620 --> 00:39:56,380
Ehrlich gesagt ich habe persönlich noch nicht so viel github gemacht aber es hält was ich gesehen habe hält sich in grenzen

444
00:39:59,140 --> 00:40:01,140
Es hält es hält sich in grenzen

445
00:40:01,380 --> 00:40:07,940
Also ja es ist anders aber es ist doch verkleidet es ist ziemlich ziemlich ähnlich vom aufbau her

446
00:40:09,620 --> 00:40:11,620
Was ich bisher gesehen habe

447
00:40:13,460 --> 00:40:15,460
Was war denn die frage

448
00:40:19,060 --> 00:40:21,060
Ach so hier das ja

449
00:40:21,060 --> 00:40:25,740
Ja also es ist relativ ähnlich es ist relativ ähnlich also github sind auch jammel files

450
00:40:26,060 --> 00:40:30,700
Es sind halt ist es ja nicht job build strategy ist das irgendwas anderes aber es ist doch recht ähnlich

451
00:40:30,700 --> 00:40:33,580
Also wenn man das eine verstanden hat kommt man mit dem anderen auch ganz gut klar

452
00:40:34,220 --> 00:40:36,220
so

453
00:40:37,020 --> 00:40:41,980
Ein weiterer eine weitere sache die man wissen muss zu github actions

454
00:40:50,620 --> 00:40:55,060
Also ähnlich ja genau also eine weitere sache die man zu github actions wissen muss

455
00:40:57,100 --> 00:40:59,100
Das was hier definiert ist

456
00:40:59,860 --> 00:41:01,860
Muss ja irgendwo ausgeführt werden

457
00:41:02,860 --> 00:41:08,500
Also hier steht ja nur drin was passieren soll beispielsweise bei einem push auf diesen branche

458
00:41:09,460 --> 00:41:14,500
Irgendwo muss das ganze ja noch ausgeführt werden dafür gibt es runner bei github

459
00:41:15,220 --> 00:41:20,740
Und bei github und bei gtea mittlerweile ist überall das gleiche du brauchst runner dafür irgendwo

460
00:41:21,060 --> 00:41:24,020
Muss dieser krempel ja ausgeführt werden der hier definiert wurde

461
00:41:24,860 --> 00:41:26,860
Wenn man das in der cloud benutzt

462
00:41:27,500 --> 00:41:33,260
Gibt es runner bei github die man auch benutzen kann bis zu

463
00:41:35,140 --> 00:41:37,900
Müssen wir die limits angucken die weiß ich aus dem kopf nicht

464
00:41:41,020 --> 00:41:43,020
Also man kann

465
00:41:44,940 --> 00:41:47,620
Bis zu 2000 minuten im monat

466
00:41:48,260 --> 00:41:55,420
Kostenlos das ganze verwenden hat bis zu 500 mb storage das reicht in der regel locker aus für alles was man machen will also das ist

467
00:41:55,420 --> 00:41:58,900
Sehr großzügig und damit kann man eigentlich alles machen das gibt es kostenlos

468
00:42:01,140 --> 00:42:04,780
Und mit minuten ist gemeint die laufzeit deiner

469
00:42:07,860 --> 00:42:10,980
Die laufzeit deiner sachen hier in einem runner

470
00:42:11,580 --> 00:42:16,140
Also sobald man das pusht der runner anfängt das auszuführen das sind die minuten die dann zählen

471
00:42:18,500 --> 00:42:20,500
Was man auch noch wissen muss ist

472
00:42:20,900 --> 00:42:27,540
Also das ist halt eben nicht unendlich funktioniert aber mehr als genug großzügiges free tier was man auch noch wissen muss ist

473
00:42:28,460 --> 00:42:31,740
Das sind vms und das ist auch gut dass das vms sind

474
00:42:33,380 --> 00:42:37,700
Also man sieht hier beispielsweise run on ubuntu latest

475
00:42:38,340 --> 00:42:40,820
das sind vms es gibt soweit ich weiß in

476
00:42:41,860 --> 00:42:43,860
github gibt es drei vm typen

477
00:42:44,420 --> 00:42:45,780
ubuntu

478
00:42:45,780 --> 00:42:49,380
windows 11 oder so oder windows server oder e-mails

479
00:42:49,380 --> 00:42:54,020
oder windows server oder in windows ubuntu windows 11 und mac os

480
00:42:54,900 --> 00:42:59,740
Also man kann mit github action software bauen für alle drei großen betriebssysteme

481
00:43:01,780 --> 00:43:09,620
Und nachdem man da drin aber auch container starten kann kann man ja eigentlich für alles bauen zumindest linux technisch aber

482
00:43:10,700 --> 00:43:14,580
Standardmäßig ist das ding hier unter ubuntu nein das sind keine docker images

483
00:43:15,300 --> 00:43:17,300
Das was man da drin ausführen kann später

484
00:43:17,940 --> 00:43:23,380
Kommen wir noch zu aber das hier sind keine docker images und das sind auch keine container das sind vms

485
00:43:23,580 --> 00:43:25,700
ich bin mir nicht sicher was das für eine

486
00:43:27,740 --> 00:43:33,380
Ressourcen zuteilung hat diese vms also wie viel cpus wie viel ram und so man benutzen kann

487
00:43:33,500 --> 00:43:37,380
Ich muss sagen ich bin bisher in github actions noch nie an die grenzen gestoßen

488
00:43:37,540 --> 00:43:41,100
Wenn man da drinne jetzt allerdings komplett verrückte sachen macht

489
00:43:42,100 --> 00:43:44,100
Beispielsweise

490
00:43:44,340 --> 00:43:48,220
Open street maps sich runterladen und irgendwie

491
00:43:49,140 --> 00:43:54,580
preprocessen für einen routen planer wo man eigentlich mindestens mindestens 64 g ram

492
00:43:55,340 --> 00:44:00,420
Und keine ahnung 500 gigabyte ssd storage braucht dass es gut funktioniert

493
00:44:00,860 --> 00:44:08,780
Dann würde ich sagen gerät man mit github actions wahrscheinlich an seine grenzen aber für normale build shops ist das vollkommen ausreichend

494
00:44:09,780 --> 00:44:11,780
Aber es sind vms

495
00:44:12,620 --> 00:44:15,260
Sollte einem sollte man den hinterkopf behalten

496
00:44:15,420 --> 00:44:20,100
Es ist im prinzip eigentlich nur gut dass es vms sind weil dann hat man keine probleme mit

497
00:44:20,540 --> 00:44:27,660
Beschränkungen die man vielleicht in containern hat containern kann man nicht alles machen in vms kannst du eigentlich alles ausführen deswegen ist es

498
00:44:27,980 --> 00:44:33,860
Eigentlich eine gute wahl dass es vms sind das muss man ein bisschen hinterkopf weil das sind vms deswegen dauert es auch ein bisschen bis

499
00:44:34,100 --> 00:44:36,100
Beispielsweise bis es startet und sowas

500
00:44:39,140 --> 00:44:41,140
Ja

501
00:44:52,220 --> 00:44:54,220
Gut

502
00:44:54,740 --> 00:45:01,060
Theoretisch könnte man können ich sage jetzt einfach mal ja theoretisch könntest du können module in github actions bauen

503
00:45:01,780 --> 00:45:02,980
und

504
00:45:02,980 --> 00:45:07,220
Gucken ob sie der korn laden kann also das müsste wahrscheinlich gehen ja ja ja

505
00:45:07,500 --> 00:45:12,340
Da ich sage jetzt einfach mal ja genau wissen tue ich nicht aber ich denke schon ja

506
00:45:15,660 --> 00:45:20,180
Ja du kannst da auch sehr abgedrehte sachen machen du kannst zum beispiel dann auch mit q emo

507
00:45:20,860 --> 00:45:25,140
in einem container in dieser vm cross kompilen beispielsweise von

508
00:45:26,100 --> 00:45:28,100
Für arm dass dann ein raspberry pie

509
00:45:28,860 --> 00:45:30,860
image rausfällt und sowas ganz viele geschichten

510
00:45:32,980 --> 00:45:37,100
Bevor wir uns bevor wir jetzt eine action anlegen für hier für den für den vier champ

511
00:45:38,140 --> 00:45:46,780
Formen in action anlegen eine sache sollte man sich noch angucken und zwar dass alle das den start hier oben es gibt verschiedene

512
00:45:49,180 --> 00:45:52,300
Einstellungen wie github actions getriggert werden können

513
00:45:57,020 --> 00:46:00,460
Also es gibt es gibt mehrere es gibt glaube ich drei

514
00:46:00,460 --> 00:46:08,460
Oft viel verwendete trigger es gibt noch viel mehr es gibt noch viel viel mehr kann man

515
00:46:12,900 --> 00:46:14,900
Ja also kannst

516
00:46:17,300 --> 00:46:19,700
Events wenn issues aufgemacht werden

517
00:46:20,420 --> 00:46:28,460
Und sowas also gibt alle möglichen aber es gibt drei es gibt drei sachen wie die oft verwendet werden das erste ist und push

518
00:46:29,300 --> 00:46:35,940
Branches also sprich sobald jemand in einem dieser branches neue changes pusht soll dieser job laufen

519
00:46:36,900 --> 00:46:42,180
Das nächste ist und pusht tags wenn eine neun tag pusht das ist das werden wir wahrscheinlich heute auch benutzen

520
00:46:42,540 --> 00:46:49,700
Wenn eine einen neuen tag pusht dann sollen die soll das sollen die jobs laufen und das dritte ist so eine art grondjob alle

521
00:46:49,820 --> 00:46:51,820
Viertel stunde

522
00:46:52,660 --> 00:46:56,540
In fusion ich weiß nicht genau was du meinst meinst du dass du das selbst aus dass du das selbst hausen kannst doch das gibt's

523
00:47:01,940 --> 00:47:07,780
Ja und da gibt es und wie gesagt da gibt es noch so eine art grondjob dass man sagen kann alle viertel stunde ausführen oder einmal am

524
00:47:07,780 --> 00:47:12,580
Tag oder einmal um zwei uhr nachts und sowas das gibt es auch das verwenden wir zum beispiel auf

525
00:47:12,580 --> 00:47:19,460
Haben wir zumindest ich muss jetzt sagen auf meine alten arbeit verwendet wobei auf meiner aktuellen arbeit heute bin ich heute also ich bin ja ich bin ja noch

526
00:47:19,500 --> 00:47:26,820
Ich bin ja noch drei stunden und 25 minuten dort angestellt ja also bei meiner aktuellen arbeit haben wir das auch verwendet um beispielsweise

527
00:47:28,020 --> 00:47:30,020
automatisiert alle viertel stunde

528
00:47:30,300 --> 00:47:33,980
irgendwelche inventar hostlisten zu erstellen aus mehreren datenquellen

529
00:47:34,460 --> 00:47:39,340
Es ist tatsächlich sehr nützlich github actions nicht nur für das bauen von software sondern für alles mögliche

530
00:47:40,820 --> 00:47:45,620
Ja so und ich glaube das war es jetzt eigentlich so was man an basics zu github actions wissen muss

531
00:47:45,740 --> 00:47:48,460
Fangen wir mal an uns das uns das ganze anzugucken

532
00:47:49,780 --> 00:47:53,380
Ich überlege gerade gibt es noch gibt es noch irgendwas also wir fangen jetzt simpel an

533
00:47:58,380 --> 00:48:03,980
Achso in future habe ich noch nie gemacht das habe ich das habe ich noch nicht so ausprobiert keine ahnung

534
00:48:04,380 --> 00:48:05,820
Ok

535
00:48:07,260 --> 00:48:09,540
Alles klar so ich überlege gerade gibt es so etwas was manくs thấy

536
00:48:10,660 --> 00:48:10,820
Es tut mir leid dass es gibt etwas wacha

537
00:48:11,140 --> 00:48:12,240
Das macht überhaupt nichts besser

538
00:48:13,540 --> 00:48:14,940
aber

539
00:48:14,940 --> 00:48:17,540
wenn ich mal erscheint

540
00:48:17,680 --> 00:48:23,640
In die

541
00:48:23,640 --> 00:48:25,760
diaw Rogue

542
00:48:28,180 --> 00:48:31,060
Ganz schnell

543
00:48:31,660 --> 00:48:38,220
Alles klar so ich überlege gerade gibt es so irgendwas was ich im vorfeld sagen muss ich glaube nicht

544
00:48:45,780 --> 00:48:49,740
Ach ja doch eine sache eine sache sollte ich noch im vorfeld sagen

545
00:48:51,540 --> 00:48:59,900
Dadurch dass das ganze recht eng verzahnt ist mit github also sprich die jobs sind im gleichen repo definiert wie das sourcecode

546
00:49:01,700 --> 00:49:05,660
Können diese jobs auch auf viele github

547
00:49:06,980 --> 00:49:12,180
Interne sachen zugreifen oder auf viele infos die in github gespeichert sind zugreifen was enorm praktisch ist

548
00:49:12,620 --> 00:49:19,620
Zum beispiel könnt ihr wenn ihr die passenden permissions anfordert mit eurer action das ist eine wissenschaft für sich deswegen erwähne ich jetzt einfach

549
00:49:19,620 --> 00:49:21,340
nur mal und

550
00:49:21,340 --> 00:49:25,420
Teilweise muss man manche sachen in den settings freigeben aber ihr könnt dort zum beispiel

551
00:49:25,980 --> 00:49:32,900
Für eine action ein one-time-talken bekommen wo ihr dann in eine container registry pushen könnt das heißt ihr müsst euch nicht irgendwie um die

552
00:49:33,540 --> 00:49:37,380
Alternifizierung über die github api und sowas kümmern das steht alles in der action zur verfügung

553
00:49:37,700 --> 00:49:44,900
Ihr könnt beispielsweise auch zugreifen ihr guckt ihr seht noch sie hier hier hier sieht man es wunderbar ich lock mich hier in der github container registry

554
00:49:44,900 --> 00:49:50,540
Ein und zwar gibt es hier zwei globale variablen die in dieser action zur verfügung gestellt werden einmal

555
00:49:50,740 --> 00:49:58,340
Username github repository owner das bin ich und einmal secrets github talken das ist nichts was im vorfeld angelegt werden muss

556
00:49:58,340 --> 00:50:00,340
das injected github

557
00:50:00,420 --> 00:50:09,260
Dynamisch beim start der action in ja als als environment variablen quasi dass ich sie da drin benutzen kann das heißt man kann viele sachen die github zur

558
00:50:09,260 --> 00:50:10,580
verfügung stellt

559
00:50:10,580 --> 00:50:17,100
Relativ easy ohne dass man sich mit der github api beschäftigen muss direkt aus github actions benutzen wir dürfen nicht vergessen

560
00:50:17,660 --> 00:50:19,660
github hat mittlerweile eine menge

561
00:50:19,980 --> 00:50:21,980
Was es gibt

562
00:50:22,100 --> 00:50:24,820
Also neben pull requests issues

563
00:50:25,940 --> 00:50:27,620
wikis

564
00:50:27,620 --> 00:50:29,620
verschiedene bild environments

565
00:50:29,740 --> 00:50:31,740
deployment container registry

566
00:50:33,860 --> 00:50:40,820
Releases alles mögliche was man über die github api steuern kann kann man relativ einfach aus github actions an

567
00:50:42,740 --> 00:50:46,940
Anfahren ja ohne dass man sich da im detail mit beschäftigen muss wie das ganze funktioniert

568
00:50:47,700 --> 00:50:54,140
Und ein weiterer vorteil und das gucken wir uns heute heute an ein weiterer vorteil von github actions ist

569
00:50:54,580 --> 00:50:56,340
dass es sehr viele

570
00:50:56,340 --> 00:51:00,660
Actions schon vorgefertigt gibt man muss nämlich nicht wie bei jenkins

571
00:51:00,940 --> 00:51:06,020
alles von hand machen sondern es gibt viele actions die sind schon fix und fertig

572
00:51:06,300 --> 00:51:10,140
das kann man sich nämlich zum beispiel angucken wenn man auf den marketplace geht

573
00:51:11,140 --> 00:51:13,140
und dann mal reinguckt

574
00:51:13,340 --> 00:51:15,340
damit man es mal geplendet

575
00:51:16,340 --> 00:51:18,660
Und dann sieht man guckt mal da es gibt

576
00:51:20,100 --> 00:51:24,500
17910 vorgefertigte actions gut die meisten davon wird man wahrscheinlich

577
00:51:25,580 --> 00:51:29,020
wird wahrscheinlich nie verwenden aber wenn man hier mal

578
00:51:31,940 --> 00:51:33,940
Durchguckt

579
00:51:37,820 --> 00:51:43,500
Ja es ist es sehr nahe es gibt zum beispiel eine action wo man seinen source code prüfen lassen kann auf

580
00:51:44,500 --> 00:51:50,300
Nein das meine ich nicht ob man auch sich an die coding guidelines gehalten hat und

581
00:51:52,420 --> 00:51:54,420
Dass man sein output cashen kann

582
00:51:55,140 --> 00:52:02,020
Und dass man neue github pages anlegen kann dass man sich psh irgendwo hin verbinden kann und solche geschichte das ist halt alles schon fix

583
00:52:02,020 --> 00:52:06,260
Und fertig ich muss dann meistens nur zwei drei variablen als in input

584
00:52:06,860 --> 00:52:12,500
hinzufügen und dann geht das ist natürlich schon enormer vorteil wenn man sich das hier anguckt also man kann relativ sicher sein

585
00:52:12,660 --> 00:52:19,100
Wenn man jetzt keinen ganz super abstrakten anwendungspfahl hat dann gibt es wahrscheinlich schon was zu

586
00:52:20,460 --> 00:52:25,260
Und wir gucken übrigens jetzt aber ob es was für art user repos gibt das habe ich nämlich noch nie nachgeguckt

587
00:52:26,780 --> 00:52:31,020
Aber publisch gibt es hier zum beispiel okay wir sorten mal nach maus start

588
00:52:31,540 --> 00:52:36,660
Bild auf packet ist publisch auch okay nicht so wahnsinnig nicht so wahnsinnig beliebt

589
00:52:37,660 --> 00:52:44,620
Aber ihr seht es gibt eine fix und fertige action aha das nice können wir später vielleicht verwenden es gibt eine fix und fertige action wie ich

590
00:52:44,620 --> 00:52:50,180
Im art user repo dann meine gebaute software veröffentlichen kann gibt es auch was für cobalt wasch gucken wir ziemlich sicher gibt es was für cobalt

591
00:52:50,180 --> 00:52:56,260
Das heißt es muss muss ich dann gar nicht mehr von hand machen sondern kann es einfach über diesen job machen die jobs selber

592
00:52:56,260 --> 00:53:01,500
Also die nicht die jobs die die actions selber die sind auch alle versioniert ihr seht hier

593
00:53:01,500 --> 00:53:03,500
Den den link zum

594
00:53:04,140 --> 00:53:08,540
Zum jeweiligen github repo wo es das ganze gibt aktuell ist version 2.7 2

595
00:53:09,180 --> 00:53:11,180
Und wenn ihr hier unter

596
00:53:11,180 --> 00:53:16,540
Wo sie möglich tags kann man auch gucken wenn man sich jetzt anguckt die sind die dinger sind immer getagged

597
00:53:17,020 --> 00:53:21,180
Das heißt man kann sich sicher sein und das finde ich ist wirklich eine coole sache

598
00:53:21,660 --> 00:53:26,340
Wenn man seine actions die man verwendet also die sachen die andere leute schon haben

599
00:53:26,420 --> 00:53:31,380
Wenn man die taggt mit einem mit einem version stack dann kann man sich sicher sein

600
00:53:32,020 --> 00:53:34,020
dass auch bei updates

601
00:53:34,340 --> 00:53:40,900
Der eigene workflow hier weiterhin funktioniert also sprich wenn ich jetzt zum beispiel sage hier ich verwende die

602
00:53:42,020 --> 00:53:44,020
die action für

603
00:53:44,340 --> 00:53:46,820
dort net installieren in meiner ubuntu vm

604
00:53:48,100 --> 00:53:49,980
Und die habe ich festgelegt hier die action

605
00:53:50,460 --> 00:53:52,820
Dort net installieren in meiner ubuntu vm

606
00:53:54,220 --> 00:53:57,940
Und die habe ich festgelegt hier action nennt sich dort net setup

607
00:53:58,460 --> 00:54:05,460
Version 3 dann heißt das der verwendet ich glaube version 3 bedeutet bedeutet dass der auch patch version nimmt

608
00:54:06,260 --> 00:54:13,380
Da kann ich mir sicher sein selbst wenn die diesen parameter umbenannt haben in einer der neueren versionen dadurch dass ich explizit hier

609
00:54:14,100 --> 00:54:16,100
referenziere auf v3

610
00:54:16,420 --> 00:54:20,580
Dass das eben nicht so ist dass das weiter funktioniert und das ist wirklich eine coole geschichte

611
00:54:21,900 --> 00:54:25,660
So und jetzt das letzte damit sich der chat freut

612
00:54:28,580 --> 00:54:32,980
Marketplace github actions wir gucken mal nach cobalt

613
00:54:34,900 --> 00:54:39,940
Setup cobalt guck mal hier sogar für cobalt gibt es was also es gibt wirklich für alles was

614
00:54:40,940 --> 00:54:46,820
Also wenn sogar wenn sogar für cobalt was fertiges drinne ist da kann es dir sicher sein du wirst für das meiste was finden

615
00:54:49,980 --> 00:54:54,820
Jetzt braucht man nur noch die action um die action zu updaten du wirst lachen das gibt es

616
00:54:57,020 --> 00:55:01,260
Nennt sich nennt sich renovate unter anderem gibt es gibt es dafür gibt es gibt es dafür

617
00:55:03,780 --> 00:55:05,780
Das ist das richtige renovate

618
00:55:05,780 --> 00:55:07,780
Kannst du benutzen für sowas

619
00:55:09,980 --> 00:55:11,980
Renovate scannt dein repo

620
00:55:12,780 --> 00:55:17,740
Nach config files die versionsnummern enthalten und macht dann einen pull request in einem repo auf

621
00:55:18,140 --> 00:55:24,060
Ob du nicht die versionsnummer updaten willst ich kann dir das sogar in action zeigen ich glaube wir haben das sogar in einem repo mal kurz getestet

622
00:55:24,660 --> 00:55:26,660
Ja hier sieht man es hier sieht man es

623
00:55:29,660 --> 00:55:31,660
Pull requests

624
00:55:32,660 --> 00:55:34,660
Pull requests

625
00:55:36,980 --> 00:55:39,940
Genau so so sieht das so sieht das ganze aus

626
00:55:41,540 --> 00:55:45,380
Also renovate hat mein repo gecheckt hat festgestellt es gibt eine datei

627
00:55:45,740 --> 00:55:52,060
Wo eine versionsnummer hardcoded drin steht und da gibt es jetzt eine neue version möchte ich das möchte ich das ganze nicht updaten

628
00:55:52,060 --> 00:55:55,500
Und soweit ich weiß kann renovate auch github action files

629
00:55:55,500 --> 00:55:59,660
Das heißt ich kann mit renovate github act ich kann mit der github github

630
00:56:00,780 --> 00:56:06,380
Mit der renovate bot github action kann ich an kann ich den restlichen github actions updaten lassen

631
00:56:07,180 --> 00:56:09,500
Dann wird es dann wird aber extrem feif her

632
00:56:12,020 --> 00:56:14,020
Das ist das ist schon sehr nice

633
00:56:17,980 --> 00:56:21,140
So dass mal kurz in ob's jetzt habe ich das irgendwie zugemacht

634
00:56:21,620 --> 00:56:24,880
So dass mal kurz in ob's jetzt habe ich das irgendwie zugemacht

635
00:56:26,660 --> 00:56:29,300
Das mal kurz cobalt gucken set up cobalt

636
00:56:29,940 --> 00:56:34,540
This action sets up a set up a new cobalt programming language environment

637
00:56:36,660 --> 00:56:41,220
Nice gut lange rede kurzer sinn ich guck mal kurz in discord

638
00:56:42,340 --> 00:56:44,980
Hat keiner geschrieben heute also anscheinend gibt es

639
00:56:46,260 --> 00:56:48,260
Kein kreisel grind

640
00:56:51,140 --> 00:56:53,140
Na dann

641
00:56:54,700 --> 00:56:57,780
I put the action in my action to action while action

642
00:57:00,420 --> 00:57:03,740
Ja genau genau hier sieht man das hier sieht man es

643
00:57:12,700 --> 00:57:17,580
Gut dann fangen wir mal an ich würde sagen wir fangen mal sehr simpel an

644
00:57:18,580 --> 00:57:24,460
Und zwar legen wir eine wir machen mal kurz wir machen mal einen neuen branche davon

645
00:57:26,020 --> 00:57:28,020
geht pull github

646
00:57:30,220 --> 00:57:32,220
Wir haben den def branche

647
00:57:35,580 --> 00:57:42,300
Haben wir dinger gemacht brauchen wir alles nicht mehr geht wenn ich jetzt richtig schreiben kann geht check out

648
00:57:42,420 --> 00:57:48,620
Out master geht branche minus d def

649
00:57:49,740 --> 00:57:52,800
Jetzt pull github master

650
00:57:57,260 --> 00:58:01,740
Aktuell stand geht check out wobei ich ich hoffe ich habe meine alias hier

651
00:58:02,420 --> 00:58:05,420
geht check out minus b def

652
00:58:05,980 --> 00:58:07,980
Ich habe meine alias hier

653
00:58:08,140 --> 00:58:11,820
So jetzt haben wir in def branche und ich würde sagen da legen wir jetzt mal eine

654
00:58:13,780 --> 00:58:15,780
Github action drin an

655
00:58:16,540 --> 00:58:21,820
Und wie gesagt damit github actions funktionieren muss das ganze in diesem verzeichnis liegen

656
00:58:22,500 --> 00:58:26,140
github slash workflows also wir sind hier in

657
00:58:28,500 --> 00:58:32,260
Quasi in diesem repo drinne jetzt ich habe das lokal bei mir geklont also

658
00:58:32,740 --> 00:58:40,260
Mk dir github also versteckter ordner github mk dir workflow workflows oder workflow

659
00:58:41,860 --> 00:58:43,620
Workflows

660
00:58:43,620 --> 00:58:47,660
Workflows und da können wir jetzt was drin anlegen zum beispiel eine

661
00:58:48,620 --> 00:58:50,620
Ja bild punkt jammel

662
00:58:51,340 --> 00:58:56,180
Leere datei macht noch nichts wir schreiben jetzt was ganz simples rein

663
00:58:56,620 --> 00:59:00,780
Und zwar also wir machen jetzt auch gar nicht viel in diese action dass man sieht dass es funktioniert

664
00:59:00,980 --> 00:59:04,660
Das ding braucht ein name dass es das es funktioniert

665
00:59:07,460 --> 00:59:12,420
Gibt es für die workflows es gibt lokale runner ja zum beispiel das hier

666
00:59:14,700 --> 00:59:21,620
Machen wir aber heute nicht also du kannst github actions lokal ausführen du kannst diesen runner in deinem repo auch registrieren

667
00:59:21,980 --> 00:59:27,500
Dass es dann da drüber ausgeführt wird aber da muss man ein bisschen vorsichtig sein also falls ihr auf die idee kommt

668
00:59:27,820 --> 00:59:33,500
Bei einem public repo einen lokalen runner zu verwenden da müsst ihr euch im klaren drüber sein

669
00:59:34,060 --> 00:59:38,260
Dass es quasi in einem public repo jemand zugriff auf eine lokale vm

670
00:59:39,100 --> 00:59:45,820
Über umwege bei euch bekommt also da müsst ihr euch das wirklich überlegen ob ihr das so machen wollt zum beispiel wenn ihr das eingestellt

671
00:59:45,820 --> 00:59:47,820
Habt dass bei jedem pull request

672
00:59:48,260 --> 00:59:55,060
Irgendetwas ausgeführt wird so und ihr habt jetzt ein public repo und lokalen runner dort registriert und irgendjemand

673
00:59:55,580 --> 00:59:57,180
pusht jetzt

674
00:59:57,180 --> 01:00:00,980
ein pull request oder macht ein pull request auf und hat dort

675
01:00:01,460 --> 01:00:06,620
Irgendein mist in den mist drinne stehen dann führt das euer lokaler runner aus und im zweifelsfall

676
01:00:07,020 --> 01:00:13,620
Könnte das negative auswirkung haben auf eure lokale umgebung also mit public repos und lokalen runner muss man ein bisschen aufpassen

677
01:00:13,620 --> 01:00:15,620
Mit den cloud runner ist das kein problem

678
01:00:21,140 --> 01:00:24,260
Wir nehmen uns einfach mal ein beispiel hier aus dem

679
01:00:25,940 --> 01:00:27,940
Die hälfte

680
01:00:28,980 --> 01:00:36,500
Boah man die schwätzen eigentlich hier voll im leben okay ich mach die ich mach die minimal action selbst hat hat keinen sinn also

681
01:00:38,740 --> 01:00:40,740
Wir pushten das ding einfach

682
01:00:41,580 --> 01:00:48,420
Wir pushten das ding einfach dort net heißt es beim pamphlet so wir bauen jetzt einfach bild ist egal wie das heißt

683
01:00:50,180 --> 01:00:53,540
Rest editieren wir über github weil dann sieht man das ganze ein bisschen schöner

684
01:00:54,380 --> 01:00:56,380
geht status geht

685
01:00:56,740 --> 01:00:58,740
so was haben wir denn

686
01:00:58,900 --> 01:01:00,900
geht komm mit

687
01:01:01,460 --> 01:01:07,340
bester temp bester name so heißt das jetzt temp git push github def

688
01:01:08,340 --> 01:01:10,840
Okay so github actions

689
01:01:12,060 --> 01:01:17,380
Temp oh nein temp ist fehlgeschlagen also wir sehen jetzt an der an der stelle schon mal zwei sachen

690
01:01:19,340 --> 01:01:27,700
Wir haben in unserem def branche einen workflow oder einem github action angelegt beziehungsweise workflow angelegt mit dem namen bild

691
01:01:29,100 --> 01:01:31,100
Leider steht halt noch sonst nichts drinne

692
01:01:32,020 --> 01:01:39,460
Und sobald man das gemacht hat seht ihr hier taucht unter actions was auf und zwar dass es fehlgeschlagen ist

693
01:01:39,620 --> 01:01:44,620
Ja gut es ist völlig fehlgeschlagen weil naja es steht ja auch noch gar nicht drinne was gemacht werden soll

694
01:01:45,740 --> 01:01:47,740
Das musste ja im endeffekt fehlschlagen

695
01:01:49,860 --> 01:01:52,020
Jetzt können wir das ganze hier über github editieren

696
01:01:52,700 --> 01:01:59,460
Waren wir mal ein bisschen ein bisschen größer hier die schlagen einem die schlagen einem hier auch beispielsweise immer sachen vor wenn man selbst nicht genau

697
01:01:59,460 --> 01:02:03,300
Weiß wie das funktioniert aber am besten ist am besten man guckt einfach auf marketplace

698
01:02:04,420 --> 01:02:06,660
Wie das wie das wie das ganze funktioniert

699
01:02:09,780 --> 01:02:13,780
Also wir fangen jetzt ganz simpel an abriss johnny moin

700
01:02:15,980 --> 01:02:22,820
Wir üben actions ja champ gut dass du da bist aber nicht teste dass ich teste das ganze nicht lokal

701
01:02:23,820 --> 01:02:30,180
Also das erste was man angehen muss für so eine action ist wann die ausgeführt werden soll das habe ich euch ja eben schon gezeigt

702
01:02:30,420 --> 01:02:36,780
Es ist jammel es ist auch alles dofe dabei was jammel so ausmacht eindrückungen die nicht stimmen und sowas

703
01:02:37,100 --> 01:02:44,500
Ja man ist ja heutzutage immer jammel engineer als irgendwas anderes insofern ist es selbst das hier natürlich auch selbstverständlich jammel was sonst

704
01:02:44,580 --> 01:02:48,780
So und jetzt kann man hier sagen zum beispiel und push jetzt müssen wir uns überlegen ok

705
01:02:49,780 --> 01:02:51,700
Wann wollen wir

706
01:02:51,700 --> 01:02:53,700
dass unsere software gebaut wird

707
01:02:54,180 --> 01:03:00,580
Bei jedem push alle viertel stunde bei einem tech push in der regel würde ich sagen entweder

708
01:03:00,860 --> 01:03:05,300
Alle einmal am tag für irgendwie so ein daily bild nachts das können wir nachher auch machen

709
01:03:05,620 --> 01:03:11,540
Oder aber bei einem push von einem tech wenn es eine neue version gibt gibt es in der regel einen neuen tech

710
01:03:11,860 --> 01:03:16,140
Also könnte man sagen ok wir wollen unsere software bauen lassen wenn es einen neuen tech gibt

711
01:03:16,500 --> 01:03:18,500
Und das funktioniert folgendermaßen

712
01:03:20,340 --> 01:03:23,740
Moment ich habe das falsch geschrieben muss ja auch texte vor habe ich vergessen so

713
01:03:24,620 --> 01:03:32,060
Ich kann sagen und push wenn neue text gepusht werden und dann kann man wildcards verwenden wenn ein tech gepusht wird der mit v

714
01:03:32,060 --> 01:03:37,620
anfängt das heißt wenn wir unsere unsere software jetzt taggen zum beispiel mit

715
01:03:38,740 --> 01:03:40,740
V

716
01:03:42,740 --> 01:03:44,740
3 oder sowas

717
01:03:46,220 --> 01:03:53,540
Ja genau ganz toll und das dann pushen dann wird github actions erkennen aha siehe an

718
01:03:55,340 --> 01:04:00,340
Da hat er mal den tech gepusht und der workflow match darauf deswegen führen wir jetzt den workflow aus

719
01:04:02,420 --> 01:04:05,260
Also wir wollen das ganze ausführen wenn ein tech gepusht wird

720
01:04:06,780 --> 01:04:08,780
Als nächstes muss man angeben

721
01:04:09,900 --> 01:04:12,700
Permissions falls man welche braucht brauchen wir jetzt erstmal nicht

722
01:04:12,860 --> 01:04:17,500
Jetzt muss man seine jobs definieren also jobs ist im endeffekt das was ausgeführt werden soll

723
01:04:18,180 --> 01:04:23,940
definieren wir mal ein job bild es kann ja durchaus sein dass man mehrere jobs hat zum beispiel ein job für bild

724
01:04:25,620 --> 01:04:31,940
Und ein job für oder was weiß ich bild man könnte sagen man hat einen job für bild

725
01:04:34,820 --> 01:04:41,100
Amd 64 und bild raspberry pi oder sowas ja keine verschiedene verschiedene jobs geben

726
01:04:42,100 --> 01:04:44,100
Jobs können

727
01:04:47,660 --> 01:04:52,780
Wenn man das wenn man das richtig definiert können jobs parallel ausgeführt werden

728
01:04:55,820 --> 01:04:57,820
Innerhalb eines jobs

729
01:05:01,620 --> 01:05:08,900
Ist allerdings alles streng sequenziell ja genau man könnte erst testen dann bilden und wenn man das je nachdem wie man das angibt kann

730
01:05:09,260 --> 01:05:11,940
Jobs parallel ausführen lassen also man kann zum beispiel

731
01:05:12,740 --> 01:05:15,860
ein bild wenn man jetzt sagen würde ich will meine software bauen für

732
01:05:17,180 --> 01:05:19,180
x86 64

733
01:05:19,620 --> 01:05:24,760
Und ja bla bla bla und dann habe ich noch einen bild shop für bild

734
01:05:28,260 --> 01:05:33,900
Bild arm oder sowas das würde funktionieren das kann man wenn man es richtig definiert

735
01:05:35,340 --> 01:05:37,340
Dann auch

736
01:05:39,100 --> 01:05:41,900
Parallel laufen lassen aber das machen wir nicht wir machen heute einen job

737
01:05:42,540 --> 01:05:47,060
Wir machen also ein workflow mit einem job drinne und der ist dafür da um die software zu bauen

738
01:05:47,540 --> 01:05:51,740
Gut jetzt muss ich noch angeben ich glaube hier gibt sogar autocomplete wenn man control

739
01:05:52,420 --> 01:05:58,140
Leertaste drückt kriegt man kriegt man hier bei github ein bisschen ein bisschen autovervollständigung was an der stelle erlaubt ist

740
01:05:59,980 --> 01:06:05,420
So wir wollen haben run runs on aber du hörst dann auch schon wieder auf mit autocomplete

741
01:06:05,980 --> 01:06:11,060
Da gibt es an der stelle nur was uns interessiert und to latest

742
01:06:13,300 --> 01:06:19,260
Github actions vms man hat auch irgendwo eine übersicht was es gibt

743
01:06:21,340 --> 01:06:23,340
Ubuntu

744
01:06:27,420 --> 01:06:30,060
Genau also folgende folgende sachen stehen zur verfügung

745
01:06:30,500 --> 01:06:36,100
Die man hier benutzen kann die github für einen kostenlos zur verfügung stellt bis zu 500 minuten

746
01:06:36,900 --> 01:06:43,420
Bis zu 2000 minuten im monat also man kann das ganze entweder unter windows server bauen lassen man kann das ganze laufen lassen

747
01:06:43,420 --> 01:06:49,420
Und dann ist oder man kann das ganze unter ubuntu laufen lassen bunt gibt es latest das zeigt immer auf das letzte

748
01:06:49,780 --> 01:06:56,740
Lts release in dem fall ist es 2204 also man könnte wenn ich hier auf nummer sicher gehen will dass es immer mit dem gleichen

749
01:06:57,180 --> 01:07:02,900
Den gleichen voraussetzungen ausgeführt wird kann ich auch sagen ich will ubuntu 2204 anstatt

750
01:07:03,140 --> 01:07:06,100
Also es könnte ja sein dass jetzt demnächst irgendwann ubuntu

751
01:07:06,820 --> 01:07:12,980
24 04 rauskommt das nächste lts ist 24 04 dauert noch ein jahr aber ziemlich so bald

752
01:07:13,500 --> 01:07:20,300
Demnächst in einem jahr 24 und dann könnte es ja sein dass mein workflow nicht mehr funktioniert weil ich auf irgendwelche

753
01:07:20,500 --> 01:07:26,660
Eigenheiten zurückgreife von ubuntu 22 04 die sich dann in 24 04 geändert hat das heißt man kann auch hier

754
01:07:27,580 --> 01:07:30,220
Relativ statisch reinschreiben was man haben wird muss sagen ok

755
01:07:30,700 --> 01:07:36,020
Worauf soll denn dieser job ausgeführt werden und zwar auf einer vm mit ubuntu 22 04

756
01:07:36,300 --> 01:07:41,940
So und jetzt als nächstes muss ich meine build steps definieren also sprich was soll nacheinander

757
01:07:42,740 --> 01:07:49,820
Ausgeführt werden die erste action die man nahezu immer braucht deswegen copy copy paste ich die mir auch die erste action die man

758
01:07:49,820 --> 01:07:51,820
nahezu immer braucht ist die hier

759
01:07:52,660 --> 01:08:00,140
Check out repo beziehungsweise check out action die check out action macht nichts anderes wie den inhalt von eurem repo

760
01:08:01,740 --> 01:08:05,060
In die vm hier zu kopieren

761
01:08:05,540 --> 01:08:10,980
Und nachdem wir in der regel immer was machen wollt mit dem inhalt des repos wobei nicht immer

762
01:08:11,100 --> 01:08:17,460
Es gibt ja durchaus auch leute haben ich euch ja gerade erzählt dort wo ich aktuell noch arbeite für drei stunden nicht für

763
01:08:17,900 --> 01:08:19,580
vier stunden noch genau

764
01:08:19,780 --> 01:08:23,900
Für vier stunden und für vier stunden und ne für drei stunden und vier minuten

765
01:08:25,980 --> 01:08:30,540
Kann ich rechnen für vier stunden und vier minuten das macht quasi einen git clone im endeffekt genau

766
01:08:30,860 --> 01:08:34,500
ich also dort wo ich auch für vier stunden arbeite wir benutzen das zum beispiel um

767
01:08:35,220 --> 01:08:40,940
Inventarlisten zu generieren alle viertel stunde und dass man muss nicht zwangsläufig den repo inhalt kopieren aber

768
01:08:42,500 --> 01:08:49,380
Du willst ja meistens den kram aus deinem repo benutzen das heißt die erste action die man nahezu immer braucht ist den repo inhalt

769
01:08:49,820 --> 01:08:51,820
in die ubuntu vm kopieren

770
01:08:52,820 --> 01:08:54,500
immer

771
01:08:54,500 --> 01:08:56,500
im endeffekt also

772
01:08:56,860 --> 01:09:01,300
Ich glaube ich habe ich habe keine action am start wo das nicht mindestens gemacht wird

773
01:09:02,140 --> 01:09:04,940
so und jetzt können wir uns mal angucken

774
01:09:06,660 --> 01:09:10,180
Das war schon mehr müssen wir an der stelle gar nicht machen jetzt können wir uns mal angucken

775
01:09:10,700 --> 01:09:17,660
Wie man kommandos da drin ausführt weil es gibt ja nicht zwangsläufig für alles vorgefertigte actions was man machen will das wäre ja

776
01:09:17,700 --> 01:09:19,700
Blöd wenn die einfachsten sachen

777
01:09:20,300 --> 01:09:26,120
Nicht möglich wären von hand auszuführen und es für alles in der action braucht was man jetzt machen kann ist folgendes man kann

778
01:09:26,120 --> 01:09:29,780
Einen neuen step anlegen nennen wir jetzt mal command command keckel

779
01:09:30,740 --> 01:09:33,180
und das kriegt eine ein ein

780
01:09:34,740 --> 01:09:38,140
Sieht das hier feld run und da kann man jetzt

781
01:09:39,060 --> 01:09:41,660
Befehle beziehungsweise shell befehle reinschreiben

782
01:09:42,100 --> 01:09:46,460
Das ist jammel synthax wenn man hier so einen pipe dahinter macht ist das was da drunter kommt ein

783
01:09:47,300 --> 01:09:52,100
Multi multiline string das heißt ich kann jetzt einfach hier sowas machen wie lsl a

784
01:09:53,060 --> 01:09:55,060
echo 1 2 3

785
01:09:58,100 --> 01:10:00,100
Jaja

786
01:10:00,260 --> 01:10:02,460
huge and prams ab so

787
01:10:03,260 --> 01:10:08,460
Kann ich jetzt machen jetzt speichere ich das ganze mal und dann gucken wir uns an ob es funktioniert

788
01:10:12,660 --> 01:10:18,300
Dann baut github das in einer eigenen vm kurz zusammen richtig github actions

789
01:10:19,860 --> 01:10:21,860
Übergibt das an den runner

790
01:10:25,700 --> 01:10:32,140
Wir müssen es gar nicht so kompliziert sagen github github actions startet eine vm und führt den kram hier drinnen aus genau

791
01:10:32,900 --> 01:10:34,900
Ja so jetzt

792
01:10:35,180 --> 01:10:39,580
Committen wir das ganze mal wenn man jetzt in actions guckt passiert noch nichts

793
01:10:42,260 --> 01:10:45,220
Also wenn man jetzt jetzt passiert noch nix an der stelle

794
01:10:45,940 --> 01:10:49,340
Warum chat wer wer hat ahnung warum noch nix passiert

795
01:11:07,980 --> 01:11:09,180
Kein tag richtig

796
01:11:10,180 --> 01:11:12,100
Kein tag richtig

797
01:11:12,100 --> 01:11:17,820
Mach workflow dispatch dann ist es einfacher workflow dispatch ist dass man einen knopf hat zum manuell starten

798
01:11:24,740 --> 01:11:28,220
Aber das ist richtig chat es gibt noch kein tag also das heißt hier an der stelle

799
01:11:29,220 --> 01:11:32,980
An der stelle hier gibt es noch nix das heißt wenn wir jetzt

800
01:11:33,500 --> 01:11:39,100
Sonst musst du immer taggen ja können wir gleich einfügen aber du hast recht es ist sinnvoll das einzufügen

801
01:11:39,180 --> 01:11:44,380
Aber jetzt erst einmal zeigen wir mal dass das auch prinzipiell funktioniert alles so das heißt wenn ich das ganze jetzt tagge

802
01:11:44,780 --> 01:11:46,780
Ich ich ich pull mal kurz

803
01:11:48,180 --> 01:11:50,580
So wenn ich jetzt wenn ich jetzt sage

804
01:11:51,940 --> 01:11:53,700
Gith tag

805
01:11:53,700 --> 01:11:57,500
Minus a ja machen wir das hier mal minus a minus m

806
01:11:59,020 --> 01:12:04,860
V3 neue version wird getaggt und dann pushen wir die pushen wir den tag

807
01:12:06,180 --> 01:12:08,340
Ich will ich zu origin ich will zu

808
01:12:09,980 --> 01:12:11,540
Github

809
01:12:11,540 --> 01:12:13,140
Ja

810
01:12:13,140 --> 01:12:15,020
Po tag

811
01:12:15,020 --> 01:12:17,020
Alter

812
01:12:17,060 --> 01:12:19,060
Ok

813
01:12:19,260 --> 01:12:21,460
Gith tag minus d

814
01:12:23,300 --> 01:12:27,380
Ich löscht das ding jetzt einfach geht push geht ab minus minus delete

815
01:12:28,140 --> 01:12:32,860
V0.0.3 ignoriert es einfach mal jetzt ist der tag weg und wird neu gepusht

816
01:12:33,260 --> 01:12:38,240
So jetzt habe ich meine software neu getaggt neu gepusht und ihr werdet feststellen bäm

817
01:12:40,180 --> 01:12:43,740
Da tut sich was da läuft jetzt was

818
01:12:44,340 --> 01:12:51,140
Das dauert jetzt ein bisschen bis das ganze startet das ding muss eine vm für uns anlegen beziehungsweise muss erst mal uns warten bis platz

819
01:12:51,140 --> 01:12:53,780
Auf vorgefertigten vms ist je nachdem wir dies intern

820
01:12:54,220 --> 01:13:00,300
gemacht haben aber ihr seht auch der job ist durchgelaufen es ist ja auch nicht viel passiert hier setup job

821
01:13:02,060 --> 01:13:05,700
Checkout repo den step hat er gemacht er hat quasi unser repo geklont

822
01:13:10,020 --> 01:13:19,140
Wo man es genau sieht hier in ich in ich leise den repo fett schrieb und das ist er repo geklont und dann hat er

823
01:13:19,140 --> 01:13:23,500
Unseren keckel step ausgeführt der im prinzip genau das gemacht hat was wir reingeschrieben haben

824
01:13:23,980 --> 01:13:29,940
ls ls minus la auf root und 1 2 3 rr q chat primes ab ausgegeben

825
01:13:30,900 --> 01:13:35,220
Das ist übrigens der moment chat wenn es euch gefällt und weiterhilft

826
01:13:36,220 --> 01:13:38,220
Wo ihr primes haben könnt

827
01:13:38,220 --> 01:13:40,060
Aber natürlich nicht müsst

828
01:13:40,060 --> 01:13:45,740
Trotzdem wenn ihr den primes habt nicht dass ich mich nicht drüber freuen würde oder so ihr könnt in mir gerne geben ich habe da

829
01:13:45,740 --> 01:13:49,060
Keine schmerzen mit ich finde das freue mich über jeden primes ab aber

830
01:13:50,620 --> 01:13:57,740
Ihr solltet euren primes ab zumindest verwenden einmal im monat wenn auch nicht wenn auch nicht unbedingt jetzt auf mich weil ansonsten überweist

831
01:13:57,740 --> 01:14:00,980
Ihr direkt 2 euro 50 an besos das wollt ihr wahrscheinlich nicht

832
01:14:01,460 --> 01:14:06,620
Deswegen könnt ihr euren primes ab irgendwo auf twitch raushauen ich freue mich natürlich auch wenn ich euren primes abklicke

833
01:14:09,060 --> 01:14:11,540
Ab letztens einen workflow für einen

834
01:14:12,380 --> 01:14:14,860
cd prerelease für einen minecraft bot gemacht

835
01:14:15,140 --> 01:14:21,540
Hab aber noch keinen plan wie ich das wirklich bequem hinbekomme mit automatischer versionierung bezug auf meinen brandstruktur gut

836
01:14:21,780 --> 01:14:27,980
Das ist immer eine sehr individuelle sache das sagen die übrigens auch in ihrer hilfedatei das github actions eine

837
01:14:28,220 --> 01:14:31,180
Boah wie sagt die marketing abteilung von github dazu

838
01:14:35,020 --> 01:14:40,140
Github ich glaube die marketing abteilung von github nennt das github actions

839
01:14:42,980 --> 01:14:49,820
Ist ich kriege sie zusammen zu nennen zumindest nennen die das github actions ist choose your own adventure style

840
01:14:50,660 --> 01:14:57,060
Irgendjemand in der marketing abteilung dachte sich choose your own adventure ist eine gute beschreibung dafür wie github actions vom ansatz er ist

841
01:14:57,100 --> 01:15:04,300
Also was sie damit sagen wollen ist es gibt keine starre vorgefertigte struktur wie du bestimmte sachen machen muss sondern du musstest dir selbst

842
01:15:04,620 --> 01:15:07,140
zusammenstellen aus den aus den bauplöcken die da sind

843
01:15:07,740 --> 01:15:10,820
Was auch gut ist weil so kann man es ziemlich individuell anpassen

844
01:15:11,220 --> 01:15:15,820
Ja so dankeschön für den sub jonathan proga subscription und liest das normal

845
01:15:16,460 --> 01:15:17,980
auch am start

846
01:15:17,980 --> 01:15:19,980
dankeschön leute für die primes subs

847
01:15:20,940 --> 01:15:23,860
So und jetzt hat er das ganze ausgeführt was wir hier reingeschrieben haben

848
01:15:24,820 --> 01:15:26,820
was er machen soll so

849
01:15:27,740 --> 01:15:30,420
Das ist so ziemlich die simpelste form von einem

850
01:15:30,940 --> 01:15:35,980
Jcon dankeschön pox subscription jetzt kommt gleich der scam train um die ecke ich sehe schon hier

851
01:15:36,500 --> 01:15:37,900
pass auf

852
01:15:37,900 --> 01:15:39,900
der jebait train fährt an

853
01:15:43,460 --> 01:15:46,740
Oder an die stufe eins abgeschlossen

854
01:15:49,420 --> 01:15:54,180
Wo ist der jebait train hat kein bock mehr ach da oben ok

855
01:15:57,220 --> 01:16:04,220
So das ist jetzt so ziemlich die simpelste art und weise eine github actions anzulegen die es gibt also

856
01:16:04,660 --> 01:16:08,420
Ist ja nicht viel bei aber man sieht jetzt schon eine ganz coole sache hier dran

857
01:16:08,820 --> 01:16:16,420
Man könnte jetzt prinzipiell wenn man zum beispiel noch lokale jenkins jobs oder so was hat die nicht viel großartig kompliziertes machen

858
01:16:16,420 --> 01:16:19,100
noch nicht auf lokale ressourcen angewiesen sind

859
01:16:19,980 --> 01:16:26,380
Man könnte auch hier seine shell befehle reinschreiben das heißt man muss nicht zwangsläufig für alles eine action benutzen

860
01:16:26,900 --> 01:16:34,180
oftmals ist es auch einfacher wenn man drei vier befehle shell script reinschreibt und dann ist fertig das schöne ist dass es immer

861
01:16:34,740 --> 01:16:37,780
nachvollziehbar es muss nicht auf einer lokalen entwicklerkiste laufen

862
01:16:39,180 --> 01:16:43,060
Und es ist zentral im repo gepflegt also das hat schon hat schon seine vorteile

863
01:16:43,060 --> 01:16:47,700
Versand mal github actions zu sehen wie gesagt dafür habe ich github noch nicht soviel benutzt

864
01:16:50,860 --> 01:16:51,860
Ja

865
01:16:51,860 --> 01:16:57,900
Also man könnte jetzt alles man könnte jetzt alles mögliche machen man könnte jetzt zum beispiel auch sagen ihr drehen ab install

866
01:16:58,500 --> 01:17:01,620
oder sagt mir mal irgendein gutes package was man installieren könnte

867
01:17:02,300 --> 01:17:07,860
Aski aquarium gibt es leider gibt es leider gibt es leider nicht unter unter debian startmäßig also ist ja auch egal

868
01:17:07,860 --> 01:17:12,660
Also ist ja auch egal man könnte man könnte jetzt alles mögliche hier keine ahnung hardtop zum beispiel

869
01:17:12,660 --> 01:17:20,180
Man könnte jetzt alles mögliche hier installieren falls man das braucht für für seinen weitere weiteren schritt neo gibt gibt es neofetch

870
01:17:20,980 --> 01:17:22,980
neofetch

871
01:17:30,740 --> 01:17:37,660
Wo muss ein workflow workflow dispatch über ein workflow dispatch über ein workflow dispatch über ein workflow dispatch über ein workflow dispatch

872
01:17:37,860 --> 01:17:39,860
überhaupt hin hier oben

873
01:17:40,100 --> 01:17:42,100
ne wahrscheinlich

874
01:17:43,500 --> 01:17:45,500
Wo muss denn das hin

875
01:17:52,580 --> 01:17:54,580
Wo muss workflow dispatch hin

876
01:17:57,100 --> 01:18:02,260
Ach on ach so ja ist ja eigentlich logisch jaja

877
01:18:02,260 --> 01:18:04,260
Ja

878
01:18:06,700 --> 01:18:08,980
Und workflow dispatch inputs

879
01:18:13,660 --> 01:18:15,660
Kannst du leer lassen

880
01:18:16,060 --> 01:18:19,340
Ok also im prinzip so dann müsste es auch funktionieren

881
01:18:22,220 --> 01:18:24,220
Oder oder muss ich jetzt hier irgendwie

882
01:18:24,940 --> 01:18:26,940
Ne wahrscheinlich ich glaube nicht

883
01:18:28,100 --> 01:18:30,380
Ne muss man nicht verbrannt das muss man glaube ich auch nicht

884
01:18:32,260 --> 01:18:36,100
Es ist eine map und keine liste ok start kommet

885
01:18:37,820 --> 01:18:39,820
Zack

886
01:18:41,900 --> 01:18:49,340
Jetzt können wir hier zu actions zu actions gehen und das wahrscheinlich auch manuell triggern wo triggert man das jetzt manuell

887
01:18:51,380 --> 01:18:57,020
5 hat high IQ chats chatters wie triggert man das jetzt manuell

888
01:19:03,260 --> 01:19:06,140
Wer ist so high IQ nur ist das ich hab das noch nicht benutzt

889
01:19:09,180 --> 01:19:11,700
Man hier wenn man reinklickt kann man es rerun

890
01:19:14,340 --> 01:19:16,340
You don't

891
01:19:21,620 --> 01:19:25,340
Ja anscheinend anscheinend don'ten wir

892
01:19:25,340 --> 01:19:34,220
Aber gut gut das was das ist wahrscheinlich weil es nicht im master ist kann ich mir vorstellen vielleicht zählt nur das was im master ist

893
01:19:38,420 --> 01:19:43,980
Ist aber auch egal wir pushen einfach text und gut ist juckt mich juckt mich jetzt nicht weiter

894
01:19:45,380 --> 01:19:47,380
Dann nehme ich ich nehme das mal wieder raus

895
01:19:47,380 --> 01:19:54,740
Und editieren editieren wir das weiter mal lokal wir pushen wir pushen einfach neue text ist doch egal so pull

896
01:19:58,100 --> 01:20:00,180
Jetzt machen wir was ganz was ganz eklig ist

897
01:20:01,500 --> 01:20:03,500
Gits komm mit

898
01:20:04,780 --> 01:20:06,780
Minus a minus m

899
01:20:07,900 --> 01:20:09,900
Kekkel beste beste name

900
01:20:10,660 --> 01:20:14,580
Minus minus amend dass auch alles dran ist geht push

901
01:20:14,660 --> 01:20:17,220
Minus minus force bam in your face give him

902
01:20:21,380 --> 01:20:23,380
Als funst wieder getriggert

903
01:20:25,020 --> 01:20:28,100
So und jetzt werden wir sehen sagt es wieder gepusht

904
01:20:28,820 --> 01:20:31,860
Jetzt macht er genau das der installiert neo fetsch

905
01:20:33,060 --> 01:20:39,420
Und führt neo fetsch aus sofern es das package gibt wenn es fehlt schlägt falls es fehlt schlagen soll es nicht fehlen

906
01:20:39,500 --> 01:20:45,380
Und führt neo fetsch aus sofern es das package gibt wenn es fehlt schlägt falls es fehlt schlagen sollte wir gar nicht so

907
01:20:45,380 --> 01:20:47,380
schlecht es schlägt fehl nice

908
01:20:47,940 --> 01:20:49,940
nice weil

909
01:20:51,620 --> 01:20:53,340
Ich nicht gut bin ok

910
01:20:53,340 --> 01:20:59,820
Es ist gut zu sehen dass das ganze mal fehl schlägt weil so sieht das aus wenn irgendwie ein fehler drinne ist in euren in euren actions

911
01:21:00,060 --> 01:21:06,660
Das bricht einfach an der stelle ab aber ihr könnt euch im nachhinein immer noch den output angucken und gucken wo das ganze fehl

912
01:21:06,660 --> 01:21:08,660
geschlagen ist man muss sagen die

913
01:21:08,900 --> 01:21:15,580
Ausgabe von manchen konsolen tools sehen wir jetzt gleich auch wenn man docker content docker image bauen oder sowas die man die ausgabe von manchen

914
01:21:15,860 --> 01:21:19,180
Cli tools ist in github actions ein bisschen abartig

915
01:21:19,700 --> 01:21:25,060
Weil das ja kein terminal ist das heißt wenn du eine progress anzeige hast dann macht das pro progress update

916
01:21:25,460 --> 01:21:28,540
Eine neue zeile und spammt sich spammt sich hier erst mal voll

917
01:21:30,020 --> 01:21:34,020
Gut aber ich würde sagen dann machen wir was sinnvolles in unseren actions

918
01:21:34,700 --> 01:21:38,220
Wim github workflows nee nicht docker image

919
01:21:39,180 --> 01:21:46,020
Workflow bild so also was können wir denn sinnvolles machen das ziel heute ist ja dass wir unsere

920
01:21:48,220 --> 01:21:50,220
Software bauen

921
01:21:51,100 --> 01:21:54,580
Und dass wir zum im ersten im ersten zwischenschritt mal

922
01:21:55,180 --> 01:22:01,140
Ein bild hier in so einem workflow veröffentlichen das geht nämlich man kann aus einem workflow

923
01:22:02,300 --> 01:22:07,140
Die software die man gebaut hat quasi exportieren das nennt sich ein artefakt

924
01:22:07,620 --> 01:22:14,220
Und das hängt dann wenn man hier unter summary geht man sieht jetzt noch nichts weil ich nichts exportiert habe hier unter summary steht dann unten

925
01:22:14,220 --> 01:22:19,020
Noch der output der binary output also quasi das kompilierte von von dem job

926
01:22:19,620 --> 01:22:25,420
Das ist so das erste zwischendritt bevor wir uns das art user repo angucken weil da habe ich dann echt keine ahnung wie es funktioniert

927
01:22:25,860 --> 01:22:27,860
wie das funktioniert also

928
01:22:28,300 --> 01:22:34,260
Machen wir diesen blödsinn machen wir diesen blödsinn mit neo fetsch mal wieder weg also wie bauen wir

929
01:22:34,260 --> 01:22:38,700
Unsere software aktuell bauen wir unsere software so

930
01:22:39,380 --> 01:22:43,580
Kann ich euch mal zeigen es gibt ein docker feil da passiert folgendes drin

931
01:22:44,380 --> 01:22:48,180
Er nimmt cento s7 als grundlage warum cento s7

932
01:22:54,820 --> 01:22:59,780
Er nimmt cento s7 als grundlage warum cento s7 das kann ich mal schnell erklären und zwar

933
01:23:00,780 --> 01:23:05,260
Ich benutze hier eine brifu version von dotnet 8

934
01:23:06,180 --> 01:23:09,860
dotnet 8 hat ein neues oder was kein neues feature ein

935
01:23:11,220 --> 01:23:13,220
verbessertes feature

936
01:23:13,420 --> 01:23:15,420
für single

937
01:23:16,460 --> 01:23:18,460
Teil executables

938
01:23:22,580 --> 01:23:28,620
Und zwar kannst du deine komplette dotnet anwendung wie bei go im endeffekt wobei es nicht ganz so cool ist wie bei go

939
01:23:28,940 --> 01:23:34,500
In eine in eine einzelne exe zusammen bauen lassen und bei windows bei windows sprache zu bleiben

940
01:23:35,820 --> 01:23:37,900
Und das haben die jetzt verbessert die

941
01:23:39,220 --> 01:23:41,220
Dateien sind deutlich kleiner

942
01:23:41,860 --> 01:23:48,340
Zeige euch das mal das binary wenn man das kompiliert ist nur noch 12 mb groß

943
01:23:49,220 --> 01:23:55,820
Das ist auch nicht so viel größer als als eine go als ein go binary vor allem was da alles da ist ja alles mögliche drin

944
01:23:56,780 --> 01:23:58,300
So

945
01:23:58,300 --> 01:24:04,380
Also das docker feil das docker feil ist nicht nicht super optimal aber es macht das was es machen soll

946
01:24:06,060 --> 01:24:08,060
Es zieht sich cento s7

947
01:24:08,780 --> 01:24:13,060
Und es zieht sich cento s7 ach so ich müsste es vielleicht mal ergänzen was ich gerade sagen wollte

948
01:24:14,300 --> 01:24:15,620
und

949
01:24:15,620 --> 01:24:22,540
Wenn er das kompiliert zu so einer single binary dann hat er eigentlich keine abhängigkeit außer ein ding

950
01:24:23,140 --> 01:24:25,140
und zwar

951
01:24:25,220 --> 01:24:26,980
Die aktuelle

952
01:24:26,980 --> 01:24:31,700
gelibc version unter dem us wo es gebaut wird

953
01:24:32,100 --> 01:24:36,000
das heißt wenn ich das hier jetzt bauer auf meinem art standung sind so ziemlich

954
01:24:36,820 --> 01:24:42,420
Aktuelleres system kannst du nicht haben dann läuft die software höchstwahrscheinlich auf älteren system nicht mehr

955
01:24:43,540 --> 01:24:49,260
Weil mindestens gelibc version so neu ist dass es halt zum beispiel schon auf dem umbundung von letztem jahr wahrscheinlich nicht mehr laufen wird

956
01:24:49,660 --> 01:24:54,940
Deswegen baue ich das unter was ganz altem deswegen baue ich es unter dem cento s cento s hat gelibc

957
01:24:56,700 --> 01:25:04,420
2.17 oder sowas dies von 2012 das ist uralt das heißt das ist übrigens auch ein super anwendungsbeispiel für container

958
01:25:04,740 --> 01:25:09,020
das heißt nämlich auch wenn ich das hier baue und das ente 7

959
01:25:09,500 --> 01:25:15,020
Muss ich den ganzen muss ich muss schon mal dieses ganze alte zeug nicht auf meinem host system installieren sondern kann es im container machen

960
01:25:15,340 --> 01:25:21,180
Und die software die am ende raus fällt ist lauffähig unter allen linux systemen die die letzten

961
01:25:22,220 --> 01:25:24,220
zehn jahre rausgekommen sind

962
01:25:25,460 --> 01:25:31,780
Und da kannst du dich nicht beschweren binary drauf kopieren wunderbar funktioniert oder aus dem repo installieren wenn man arsch verwendet

963
01:25:34,380 --> 01:25:36,380
Also das ist der grund

964
01:25:38,020 --> 01:25:40,220
Warum genau cento s und nicht irgendein debian

965
01:25:41,140 --> 01:25:43,340
weil nur cento s noch

966
01:25:43,900 --> 01:25:50,580
Aktive repos hat und noch halbwegs gepflegt wird mit einer so alten gelibc version

967
01:25:53,860 --> 01:25:59,380
Die anderen debian sind alle out out of support und bei den alten ubuntu gibt es beispielsweise schon gar kein

968
01:26:01,220 --> 01:26:03,220
Repo mehr was funktioniert

969
01:26:04,060 --> 01:26:08,300
Zumal die alten ubuntu teilweise zu alte gelibc versionen haben

970
01:26:09,180 --> 01:26:16,180
Gelibc 2.17 ist genau richtig alt so dass es noch von dotnet 8 supportet wird ja und es ist bald out of support

971
01:26:16,420 --> 01:26:20,260
Raus aber solange dotnet 8 läuft kann man dort mit 8 damit bauen das ist ja nicht schlimm

972
01:26:22,740 --> 01:26:25,460
Macht ja nix die abhängig ist sonst hat es ja keine abhängigkeit

973
01:26:27,340 --> 01:26:29,340
So und in diesem docker image

974
01:26:29,420 --> 01:26:36,820
Passiert eigentlich nichts großartiges wird erst mal das system geupdatet dann wird dort net installiert dann wird die software in das container image also in

975
01:26:37,580 --> 01:26:39,580
Container rüber kopiert

976
01:26:39,580 --> 01:26:45,140
Und dann wird dotnet kompiliert also das das programm kompiliert fertig aus das war es

977
01:26:45,300 --> 01:26:48,540
So dazu gibt es noch ein build script was wir heute aber nicht weiter verwenden werden

978
01:26:48,820 --> 01:26:51,660
Build script was ich was ich dann in binary da raus kopiert

979
01:26:51,940 --> 01:26:57,100
So also im prinzip wird es mit dem docker file gebaut das heißt wir müssen jetzt gucken wie kriegen wir

980
01:26:58,540 --> 01:27:04,500
Dieses docker bild wie kriegen wir das ganze in github actions untergebracht

981
01:27:05,380 --> 01:27:10,980
Und da zeige ich euch jetzt ein paar tricks zu das heißt wir machen jetzt mal von von von null auf

982
01:27:11,460 --> 01:27:14,860
Naja von nicht von null auf 100 aber wir machen jetzt ein bisschen ein bisschen advancederes zeug

983
01:27:16,020 --> 01:27:20,820
Das kann das muss ich sagen das kann ich nicht auch wenn es jetzt vielleicht so aussehen das kann ich nicht alles aus dem

984
01:27:20,820 --> 01:27:26,060
Kopf runterschreiben da muss ich zwischendurch in dem bei ein bisschen abgucken wie das funktioniert aber ich erkläre euch alles und zwar

985
01:27:26,260 --> 01:27:28,260
Wir wollen jetzt in docker image bauen

986
01:27:28,260 --> 01:27:31,380
Also wir wollen quasi in docker image anlegen in github actions

987
01:27:32,580 --> 01:27:37,940
Mit cento s7 darin die software bauen und am ende wenn das fertig ist

988
01:27:38,340 --> 01:27:42,100
Die software aus dem container image raus kopieren und veröffentlichen

989
01:27:43,700 --> 01:27:47,940
Also anhängen eine github action ich nenne es mal veröffentlichen das ist das ziel

990
01:27:48,740 --> 01:27:55,780
So bauen mit docker in github actions ist relativ easy da gibt es eine fertige fertige action

991
01:27:55,860 --> 01:27:59,940
Beziehungsweise man braucht eigentlich gar nichts weil ich werde es euch mal zeigen

992
01:28:01,220 --> 01:28:04,100
Gehen wir mal zu unserer keckel action zurück ich kann einfach sagen

993
01:28:04,900 --> 01:28:06,900
docker bild punkt

994
01:28:07,940 --> 01:28:12,100
Lasst euch nicht jebaiten es wird nicht funktionieren ich zeige es euch nur was jetzt passiert

995
01:28:16,100 --> 01:28:16,820
So

996
01:28:16,820 --> 01:28:18,820
Jetzt läuft eine neue action los

997
01:28:19,140 --> 01:28:22,660
Und docker ist schon vorinstalliert in dem ubuntu image was

998
01:28:22,660 --> 01:28:27,380
In github actions benutzt wird werdet ihr werdet ihr gleich sehen der bild das bild wird nicht gehen

999
01:28:28,420 --> 01:28:30,420
sei ich gleich dazu

1000
01:28:30,740 --> 01:28:32,740
so check out

1001
01:28:33,220 --> 01:28:38,100
Guck jetzt macht da gerade einen docker pull und ihr seht jetzt vielleicht schon eine sache

1002
01:28:39,300 --> 01:28:41,300
Es ist abartig langsam

1003
01:28:42,180 --> 01:28:49,860
So ein großes container image zu bauen guckt euch das mal an es ist abartig langsam ein großes container image in github actions zu bauen

1004
01:28:49,860 --> 01:28:53,940
Und wenn man sich jetzt überlegt der muss das jedes mal jetzt machen

1005
01:28:54,580 --> 01:29:01,540
Da muss jedes mal weil der baut das in der vm dieses container image und schmeißt die vm danach weg

1006
01:29:02,580 --> 01:29:04,100
heißt ja auch

1007
01:29:04,100 --> 01:29:09,380
Das docker image ist weg das heißt wenn ich das nächste mal das ganze ausführe da muss er das wieder machen

1008
01:29:10,100 --> 01:29:12,100
Das kostet euch drei minuten

1009
01:29:13,940 --> 01:29:16,740
Und es ist nervig wenn ihr drei vier minuten wartet

1010
01:29:17,380 --> 01:29:21,460
Und es ist nervig wenn ihr drei vier minuten warten müsst bis eure software fertig gebaut ist

1011
01:29:22,180 --> 01:29:27,140
Ich glaube gebt ihr mir recht oder ist schon ein bisschen doof wenn man jedes mal so lang darauf warten muss

1012
01:29:28,660 --> 01:29:33,220
Deswegen gibt es jetzt was neues das ist tatsächlich relativ neu das gibt es glaube ich erst seit ein paar monaten

1013
01:29:35,780 --> 01:29:41,140
Man kann docker verwenden um das container image zu bauen mit github actions support

1014
01:29:41,140 --> 01:29:45,380
Die haben mittlerweile in docker eingebaut beziehungsweise in build x oder in buildkit

1015
01:29:45,940 --> 01:29:52,900
Haben die github action support eingebaut das ist eine ganz neisse geschichte früher musste man das alles von hand machen

1016
01:30:00,500 --> 01:30:03,540
Hier könntest du auch ein base image für bauen es wäre auch total easy

1017
01:30:04,020 --> 01:30:06,020
Du musstest halt in irgendeine registry pushen

1018
01:30:06,740 --> 01:30:08,740
Können wir vielleicht auch mal machen

1019
01:30:09,140 --> 01:30:11,140
Können wir vielleicht auch mal machen

1020
01:30:12,340 --> 01:30:17,460
Chat nicht weggehen ich muss mal kurz den chat refreshen ich sehe euch mal kurz nicht nix anstellen

1021
01:30:18,420 --> 01:30:22,680
Okay wieder da chat hat gerade verabschiedet bei mir im vorschau bildschirm

1022
01:30:27,380 --> 01:30:29,380
So ihr seht wie lahm das ist

1023
01:30:30,740 --> 01:30:37,380
Ihr seht wie lahm das ist das willst nicht das willst nicht guck mal hier zwei minuten drei sekunden es wird übrigens auch gleich kaputt gehen

1024
01:30:39,540 --> 01:30:41,540
Was sind github actions

1025
01:30:42,100 --> 01:30:47,700
Github actions ist quasi der jenkins von github kennst du jenkins soll es ist kaputt gegangen

1026
01:30:49,140 --> 01:30:55,220
Das ist blazing die store wenn du jenkins kennst dann ist das der jenkins von github nur dass man ihn in jammel konfiguriert

1027
01:30:56,660 --> 01:30:58,500
So er sagt weil

1028
01:30:58,500 --> 01:31:04,820
Targetversion fallt also es hat nicht funktioniert so jetzt überlegt euch mal ich habe jetzt zwei minuten 16 gewartet

1029
01:31:05,300 --> 01:31:11,260
Das ding ist fehlgeschlagen ich würde jetzt was anpassen das wieder pushen und ich müsste noch einmal

1030
01:31:11,900 --> 01:31:17,000
2 minuten 16 warten bis ich sehe ob es wieder funktioniert da drehst du durch dabei da wirst du verrückt

1031
01:31:18,540 --> 01:31:21,340
Deswegen gibt es einen richtig nice trick

1032
01:31:21,980 --> 01:31:29,300
Wie man das ganze beschleunigen kann und zwar wenn ihr mal hier unter action guckt also es ist logisch oder warum das so langsam ist

1033
01:31:30,460 --> 01:31:32,460
weil das ist eine vm

1034
01:31:32,700 --> 01:31:33,700
und

1035
01:31:33,700 --> 01:31:39,540
Der baut das image in der vm und wenn ich das image wieder bauen wenn ich das neu anstoße ist die vm ja weg

1036
01:31:39,540 --> 01:31:45,060
Der hat den letzten stand nicht mehr wenn ich das lokal bei mir machen würde da würde an der stelle hier weitermachen und wäre ziemlich schnell

1037
01:31:45,300 --> 01:31:49,500
Aber so muss er das alles wieder neu machen weil ihm der inhalt von der vm weg ist

1038
01:31:49,940 --> 01:31:53,680
Das kann man beheben das gibt nämlich wenn ihr unter action guckt so was hier caches

1039
01:31:54,460 --> 01:31:56,460
aktuell gibt es noch keine caches

1040
01:31:57,940 --> 01:32:02,260
Aber naja man sieht dadurch dass da schon so ein button für caches ist man kann das ganze irgendwie cashen

1041
01:32:02,420 --> 01:32:05,100
Es gibt unter github die cache action

1042
01:32:10,380 --> 01:32:16,420
Da die kann man manuell benutzen für alles was man so will das sieht dann beispielsweise

1043
01:32:19,940 --> 01:32:23,020
Das sieht dann beispielsweise so aus ja da kann ich hier sagen

1044
01:32:23,540 --> 01:32:29,940
Restore von diesem cache und wenn du fertig bist dann speichere das ganze unter diesem key im cache

1045
01:32:30,180 --> 01:32:34,980
Das heißt das ist universell einsetzbar für alle outputs nicht nur zwangsläufig für docker

1046
01:32:35,900 --> 01:32:41,580
Also das geht das geht für alle also wenn ihr wenn ihr java programme baut mit mehreren zwischenstabs oder wenn ihr generell mehrere bild

1047
01:32:41,580 --> 01:32:48,060
Stabs habt und das cashen wollte so was könnt ihr manuell cashen mit der mit der caching action ist kein problem

1048
01:32:48,940 --> 01:32:50,940
was viel nicer ist

1049
01:32:51,220 --> 01:32:53,220
docker hat das mittlerweile eingebaut

1050
01:32:53,900 --> 01:33:00,460
Guck mal docker bild x nicht das normale bild die bildkit extension hat das eingebaut

1051
01:33:02,220 --> 01:33:04,220
Das will ich eigentlich nicht das will ich haben

1052
01:33:05,300 --> 01:33:09,440
Und das nennt sich docker bild x bild

1053
01:33:10,180 --> 01:33:12,180
Und da gibt es jetzt sowas

1054
01:33:12,300 --> 01:33:13,820
cache from

1055
01:33:13,820 --> 01:33:15,820
cache to

1056
01:33:15,820 --> 01:33:22,580
Man sieht schon irgendwie können die sich an speziellen ordnern kann man dort

1057
01:33:23,300 --> 01:33:27,300
Zwischenstände von seinem container bild von seinem container bild zwischenspeichern

1058
01:33:28,940 --> 01:33:31,820
Und das neueste feature das ist wirklich noch nicht lang drinne

1059
01:33:32,660 --> 01:33:36,300
Ein halbes jahr oder so vielleicht die können jetzt

1060
01:33:37,060 --> 01:33:42,140
GitHub actions cache direkt benutzen früher musste man das bild quasi machen

1061
01:33:42,380 --> 01:33:48,700
Früher musste man das bild quasi machen dann sich eine caching action einbauen die

1062
01:33:49,260 --> 01:33:50,540
die

1063
01:33:50,540 --> 01:33:53,780
Zwischenstände kopiert hat in den cache beim nächsten rand wieder

1064
01:33:54,220 --> 01:34:02,680
Restored hat das caching directory umgebogen hat und daraus gelesen hat mittlerweile ist github actions cache direkt in bild x eingebaut

1065
01:34:03,500 --> 01:34:05,500
Das heißt man kann jetzt hier direkt angeben

1066
01:34:06,500 --> 01:34:13,100
Das heißt man muss außer das richtige docker bild kommando gar nichts mehr verwenden dass das ding auf den

1067
01:34:13,660 --> 01:34:17,700
github actions cache zugreift ich glaube standardmäßig ist da cache 500 mb

1068
01:34:19,180 --> 01:34:21,180
Aber das reicht ja auch

1069
01:34:21,660 --> 01:34:27,860
Ne im moment das stimmt nicht der cache ist nicht 500 mb der cache ist größer der cache ist glaube ich 10 gigabyte für

1070
01:34:28,420 --> 01:34:30,420
github actions cache

1071
01:34:31,380 --> 01:34:36,220
Giga bei für für jetzt habe actions cache free

1072
01:34:42,300 --> 01:34:44,300
Ok steht ich nicht irgendwo

1073
01:34:44,820 --> 01:34:46,820
Github actions cache

1074
01:34:46,860 --> 01:34:52,860
3 tier ich glaube 10 gigabyte ist das freetier und das reicht das reicht eigentlich in der regel so

1075
01:34:53,220 --> 01:34:56,520
Also das heißt wir müssen uns reaction anpassen dass der es

1076
01:34:57,520 --> 01:35:01,800
Einmal bild x verwendet für docker und nicht normales docker bild

1077
01:35:03,400 --> 01:35:10,680
Und dass das ganze gecached wird das heißt als erstes fangen wir an dass bild x installiert wird weil normales docker bild

1078
01:35:10,680 --> 01:35:15,600
Tut es nicht mehr wenn ihr normales docker bild macht wird euch vielleicht noch auffallen dass der mittlerweile

1079
01:35:19,200 --> 01:35:24,320
Dass der mittlerweile meckert dass das der legacy bilder ist und man auch gefällig bild x verwenden soll

1080
01:35:25,320 --> 01:35:28,880
Den install ich ne bild bild x auch mal lokal

1081
01:35:30,560 --> 01:35:36,120
Ihr müsst euch keine gedanken machen ich gehe nicht davon aus dass die es jemals aus einem future release

1082
01:35:36,960 --> 01:35:42,760
Entfernen werden es gibt so viele scripts wo docker bild direkt verwendet wird das ist bescheuert wäre total bescheuert das zu entfernen

1083
01:35:43,080 --> 01:35:51,040
Wobei man sagen muss die company hinter docker macht die letzten jahre über viel sinnlosen scheiß es könnte also auch sein dass die docker bild irgendwann

1084
01:35:51,040 --> 01:35:52,400
Mal entfernen

1085
01:35:52,560 --> 01:35:56,960
Zutrauen würde ich es ihnen habt ihr übrigens mitbekommen die haben die haben zurück gerudert

1086
01:35:57,680 --> 01:35:59,840
die haben zurück gerudert mit ihrem

1087
01:36:00,920 --> 01:36:05,320
docker team accounts entfernen und sowas das wird jetzt wird jetzt weiter bei behalten

1088
01:36:08,360 --> 01:36:12,800
Also als erstes müssen wir jetzt bild x installieren das ist easy das kopiere ich mir raus

1089
01:36:15,960 --> 01:36:21,640
Das funktioniert nämlich genauso fertig man gibt hier einfach an dass man diese action verwenden möchte

1090
01:36:21,920 --> 01:36:27,960
install bild x docker set up bild x fertig mehr muss man nicht machen jetzt hat man einen docker mit bild x in seiner

1091
01:36:29,000 --> 01:36:31,000
Ubuntu vm auf github zur verfügung

1092
01:36:32,080 --> 01:36:34,560
So und jetzt wird es ein bisschen komplizierter

1093
01:36:35,080 --> 01:36:42,960
Jetzt müssen wir sagen wie er unser unsere anwendung zusammenbauen soll ich kann euch schon gleich sagen direkt so wird es nicht funktionieren wir müssen das nachher

1094
01:36:42,960 --> 01:36:49,720
Noch das docker file anpassen dass es funktioniert vielleicht vielleicht machen wir das auch erst lokal mit dem docker file

1095
01:36:52,360 --> 01:36:57,080
Vielleicht passen wir auch das docker file erst mal an dass wir da auch gleich gucken können ob es funktioniert

1096
01:37:00,280 --> 01:37:07,080
Also wir müssen jetzt nicht mehr docker bild aufrufen sondern wir müssen aufrufen docker bild x bild

1097
01:37:07,880 --> 01:37:12,600
Punkt sieht jetzt ein bisschen anders aus aber im großen und ganzen macht es immer noch das gleiche

1098
01:37:13,960 --> 01:37:15,960
Es ist immer noch play singly slow

1099
01:37:16,240 --> 01:37:18,240
Es ist immer noch play singly slow

1100
01:37:19,400 --> 01:37:23,360
Aber wir können das lokal mit cash mit mit mit mit cashing schon mal ausprobieren

1101
01:37:23,720 --> 01:37:27,320
Ich lasse es jetzt einmal lahm durchlaufen das einmal durchlaufen muss was machen

1102
01:37:32,560 --> 01:37:36,620
Zum glück zum glück geht das ganze lokal ein bisschen schneller wie über github actions

1103
01:37:37,400 --> 01:37:44,220
Damage ist dann ja ist so die sind die sind auch total bescheuert also dass sie das angekündigt haben haben sich weitere leute

1104
01:37:44,460 --> 01:37:50,060
Nachdem sie ja schon nicht mehr die hauptanlauf stelle für docker images sind weil sie sich selbst verschissen haben die letzten jahre über

1105
01:37:51,100 --> 01:37:57,340
Es gab keine es gab keine docker es gab keine github container registry keine github konnte die haben alle docker images

1106
01:37:57,540 --> 01:38:05,420
Auf github auf docker hab gehostet bis die auf die glorreiche idee gekommen sind zu sagen ach nee wir schaffen mal das free tier ab

1107
01:38:07,540 --> 01:38:12,700
Bild oder ein es ist kaputt weil ich keine richtige version angegeben habe siehste geht schon los

1108
01:38:13,180 --> 01:38:17,420
Geht schon los also unser docker bild kommando ist verkehrt

1109
01:38:18,260 --> 01:38:21,900
dort net compile möchte eine target version haben bei mir

1110
01:38:23,060 --> 01:38:26,540
Die target version ist relativ einfach anzugeben bild args

1111
01:38:28,020 --> 01:38:30,020
Bild arg

1112
01:38:32,260 --> 01:38:38,860
Target target version gleich 0.0.3 nennen wir das ganze jetzt mal

1113
01:38:39,860 --> 01:38:45,900
Und ihr seht bei mir lokal ist es jetzt gecasht geht es viel schneller ist euch vielleicht aufgefallen

1114
01:38:47,460 --> 01:38:54,420
Ich habe jetzt alle steps bis zum compile übersprungen weil mein bild gecasht ist das ist ja auch kein ding mein lokaler state

1115
01:38:54,900 --> 01:38:57,700
bleibt ja vorhanden ich habe ja nicht meine vm kurz gelöscht und

1116
01:38:58,020 --> 01:39:02,620
Und wieder neu gestartet so wie das so wie das unter github github actions der fall ist

1117
01:39:02,620 --> 01:39:05,580
also es ist viel viel schneller dieses ganze einrichten des

1118
01:39:06,780 --> 01:39:08,780
docker containers

1119
01:39:08,900 --> 01:39:14,620
Ist mir erspart geblieben und wenn ich jetzt noch mal ausführe ist es blazingly fast written in rust

1120
01:39:15,100 --> 01:39:17,100
Weil es ist ja im prinzip schon fertig

1121
01:39:18,580 --> 01:39:24,620
So das kommando ist allerdings immer noch nicht ganz korrekt es fehlen noch ein paar dinger was wir brauchen einmal

1122
01:39:24,940 --> 01:39:29,820
Brauchen wir die ganzen angaben zum cash die können wir jetzt noch nicht machen weil ich lokal

1123
01:39:30,260 --> 01:39:34,380
Kein github actions cache gescheit benutzen kann wie soll das funktionieren

1124
01:39:35,260 --> 01:39:38,140
Aber wir haben ein problem an der stelle jetzt

1125
01:39:38,860 --> 01:39:41,580
Ich habe jetzt ein image gebaut so passt mal auf

1126
01:39:42,340 --> 01:39:49,220
Vielleicht vielleicht fällt euch das problem auf so ich habe ein image gebaut und ich kompiliere mein dotnet programm

1127
01:39:49,980 --> 01:39:51,380
in

1128
01:39:51,380 --> 01:39:53,380
den ordner bild

1129
01:39:54,980 --> 01:40:01,460
Ja was ist jetzt das problem also an der stelle also hat jemand eine idee was was jetzt

1130
01:40:06,300 --> 01:40:08,300
Was ich jetzt nicht machen kann

1131
01:40:08,940 --> 01:40:10,940
Ich weiß nicht wie ich es anders ausdrücken soll

1132
01:40:12,620 --> 01:40:15,540
Vielleicht hat der user der user ist immer das problem

1133
01:40:18,220 --> 01:40:22,180
Peppkack problem exist betwen chair und keyboard ne betwen

1134
01:40:22,820 --> 01:40:24,820
doch betwen chair und keyboard

1135
01:40:24,860 --> 01:40:28,540
also das problem ist ich habe die software gebaut

1136
01:40:29,580 --> 01:40:33,260
in meinem content also beim erstellen meines container images

1137
01:40:34,260 --> 01:40:40,340
Ich muss die software die ich gebaut habe da irgendwie wieder raus bekommen weil ich will gar kein container image

1138
01:40:40,500 --> 01:40:44,820
Das ist bei mir nur ein notwendiges übel dass ich es unter sento s7 baue

1139
01:40:45,700 --> 01:40:50,900
Sie ist jetzt aber die software ist jetzt im container ich will die gar nicht im container haben sie ist im container image

1140
01:40:50,900 --> 01:40:55,940
Ich will die wieder raus kriegen aus dem container image so und bisher habe ich mich da eines kleinen

1141
01:40:58,460 --> 01:41:02,900
Eines kleinen hacks beholfen und zwar ich habe das ich habe das gebaut

1142
01:41:03,260 --> 01:41:10,540
das container image danach habe ich docker run gemacht mit dem container image und dann mit docker cp aus dem erstellten

1143
01:41:11,500 --> 01:41:12,620
container

1144
01:41:12,620 --> 01:41:17,380
Es wieder raus kopiert das ist allerdings nicht so schön und das ist glücklicherweise

1145
01:41:18,180 --> 01:41:21,140
mit bild x auch nicht mehr notwendig

1146
01:41:21,740 --> 01:41:24,140
Kann ich euch mal einen kleinen trick zeigen an der stelle

1147
01:41:24,140 --> 01:41:26,900
Geht docker cp nur bei laufendem container

1148
01:41:27,220 --> 01:41:34,180
Ne es geht nicht nur bei laufendem container aber das muss einmal ein container angelegt worden sein mit diesem image dass es funktioniert du kannst

1149
01:41:34,180 --> 01:41:41,260
Kein docker cp von einem image machen du kannst nur ein docker cp machen von einem container der du vor allem image also mit

1150
01:41:41,260 --> 01:41:43,260
einem image gestartet hast

1151
01:41:43,860 --> 01:41:45,860
also natürlich

1152
01:41:45,860 --> 01:41:49,180
Ebenfalls doof, aber mit bild x ist das ganz einfach

1153
01:41:49,340 --> 01:41:51,340
Natürlich

1154
01:41:51,340 --> 01:41:54,940
Ebenfalls doof, aber mit bild x ist das gar kein problem mehr

1155
01:41:56,060 --> 01:41:58,060
weil man jetzt

1156
01:41:58,060 --> 01:42:00,060
folgendes machen kann

1157
01:42:00,980 --> 01:42:04,940
Ich mal kurz abgucken weil ich das aus dem kopf wahrscheinlich nicht hinkriege

1158
01:42:06,300 --> 01:42:08,780
Genau was man jetzt machen kann ist folgendes

1159
01:42:09,740 --> 01:42:11,900
Belegen wir benutzen multi multi

1160
01:42:12,580 --> 01:42:17,020
Wie heißt das multistage bild multistage bild also wir bauen quasi

1161
01:42:18,020 --> 01:42:20,020
Mehrere images zusammen

1162
01:42:21,300 --> 01:42:25,660
Und wir möchten jetzt die datei die wir hier erzeugt haben

1163
01:42:26,140 --> 01:42:32,860
Auf den host zurück kopieren so und das geht in zwei steps man muss hier einmal ein fake

1164
01:42:33,780 --> 01:42:36,140
image anlegen in seinem

1165
01:42:37,860 --> 01:42:44,660
Was heißt ein fake image ja ein fake image ein fake container image anlegen in seinem docker file auf das man dann mit bild x

1166
01:42:44,780 --> 01:42:47,500
Zugreifen kann und dafür gibt es habe ich übrigens auf

1167
01:42:48,420 --> 01:42:51,540
Inspiration habe ich von stag overflow bin ich nicht bin ich nicht selbst drauf gekommen

1168
01:42:52,500 --> 01:42:59,660
Es gibt ein scratch image seit irgendwie ein paar docker versionen das ist kein image was auf gett auf docker haplikt

1169
01:42:59,980 --> 01:43:02,620
Das ist quasi ein nicht existentes image

1170
01:43:03,420 --> 01:43:09,620
Warum die so genannt haben ich habe keine ahnung aber es heißt so das heißt an der stelle wird nicht wirklich ein image angelegt

1171
01:43:09,620 --> 01:43:13,060
Es ist aber in der syntax von wie als würde ich ein image anlegen

1172
01:43:13,780 --> 01:43:19,100
Das muss ich nicht output nennen ich muss dem ding nur namen geben also from scratch als output

1173
01:43:19,340 --> 01:43:25,660
copy jetzt muss ich ihm sagen was für dateien ich aus diesem bild step in dieses fake image kopieren will nämlich

1174
01:43:26,380 --> 01:43:27,700
from

1175
01:43:27,700 --> 01:43:30,500
Bild wir nennen das ganze übrigens mal bild nicht bild ent

1176
01:43:31,140 --> 01:43:34,140
from bild also quasi von von diesem bild step

1177
01:43:34,820 --> 01:43:38,500
von dem filesystem in diesem bild step will ich jetzt kopieren

1178
01:43:38,620 --> 01:43:45,980
Slash ab weil ihr seht hier work work directory ab also von da will ich will ich sachen kopieren slash app

1179
01:43:46,780 --> 01:43:48,340
slash bild

1180
01:43:48,340 --> 01:43:53,040
Warum slasch bild na ja weil ich den output von meinem compile kommando nach bild geschrieben habe

1181
01:43:54,180 --> 01:43:57,060
Slash bild und dann legt eine

1182
01:43:58,100 --> 01:44:04,700
Binary rum was ich vm champ nennt und das ganze will ich hier in dieses image kopieren einfach unter root slash vm champ

1183
01:44:05,580 --> 01:44:07,580
fertig wenn ich das jetzt bilde

1184
01:44:07,940 --> 01:44:10,980
wird hoffentlich funktionieren ja

1185
01:44:12,780 --> 01:44:17,100
Hat funktioniert ging sehr zackig und wie kriege ich das ganze jetzt raus

1186
01:44:18,380 --> 01:44:24,100
Dazu kann man bild x erweitern und zwar kann man an bild x hinten noch angeben target

1187
01:44:24,980 --> 01:44:33,060
Gleich output das output hier ist der name von diesem fake environment was ich gerade in meinem docker file angelegt habe

1188
01:44:33,580 --> 01:44:35,580
minus minus target output

1189
01:44:35,980 --> 01:44:44,180
Und jetzt muss ich angeben minus minus output gleich und nee so rum type gleich local

1190
01:44:45,900 --> 01:44:51,260
Destination das weiß aus dem kopf das weiß ich nicht aus dem kopf das schreibe ich gerade ab aus aus dem anderen docker file also

1191
01:44:51,980 --> 01:44:58,340
Also aus einem anderen script das weiß aus dem kopf jetzt alle wieder das genau funktioniert jetzt kann ich sagen wohin das ganze kopiert werden soll ja

1192
01:44:58,580 --> 01:45:03,900
nach tmp out zum beispiel wenn ich das jetzt ausführe zack

1193
01:45:04,340 --> 01:45:06,340
Dann habe ich unter tmp out

1194
01:45:09,500 --> 01:45:17,500
Das executable liegen was ich haben will und das ist ein enormer fortschritt versus dem klassischen docker bild

1195
01:45:19,580 --> 01:45:24,540
Wo man einen container erstellen muss und das erst danach aus kopieren kann viel einfacher

1196
01:45:25,340 --> 01:45:31,780
Ohne dass ich das image überhaupt jemals in docker laden muss und ohne dass ich doch starten muss oder sowas einfach aus dem image raus kopieren

1197
01:45:32,180 --> 01:45:38,700
Was ist denn mit docker create und dann docker cp das kannst du auch machen aber dazu musst du das image erst mal in docker importieren den container starten

1198
01:45:40,700 --> 01:45:46,180
Stoppen und dann wieder raus kopieren das ist so viel einfacher viel schneller und geht in einem befehl

1199
01:45:47,540 --> 01:45:51,380
So also das brauchen wir jetzt an der stelle für unser

1200
01:45:54,620 --> 01:45:57,460
Bild in github actions

1201
01:46:01,780 --> 01:46:03,780
So sieht's aus

1202
01:46:04,740 --> 01:46:08,860
Gut dann gehen wir mal in unsere github actions rein

1203
01:46:11,380 --> 01:46:13,860
Da und fügen das fügen das ganze mal

1204
01:46:15,340 --> 01:46:17,340
Hinzu habe ich hier nicht

1205
01:46:18,500 --> 01:46:21,980
Wo ist meine keckel action ich brauche meine keckel action sonst geht hier gar nichts

1206
01:46:24,100 --> 01:46:26,420
So das ding nennen wir jetzt step

1207
01:46:27,300 --> 01:46:31,820
Bilds release oder sowas so und da fügen wir jetzt

1208
01:46:34,980 --> 01:46:38,180
Docker bild x bild bild args target version ein

1209
01:46:39,700 --> 01:46:46,500
Target output des output ja wunderbar das fügen wir ein wir sehen an der stelle schon ok das kann auch nicht so ganz funktionieren uns fehlen

1210
01:46:46,500 --> 01:46:52,300
Noch ein paar sachen uns fehlt nämlich zum beispiel die target version ist jetzt hier hardcoded auf 0.0.3

1211
01:46:53,300 --> 01:47:01,620
Das bringt uns ja nichts weil vielleicht ist es ja irgendwann mal 0.0.4 das heißt an der stelle wollen wir eigentlich gar keine hardcoded version benutzen

1212
01:47:03,540 --> 01:47:09,260
Sondern wir möchten das benutzen was uns github zur verfügung stellt und zwar nennt sich das ganze

1213
01:47:09,580 --> 01:47:15,440
Also das ist eine globale variabler die uns github zur verfügung stellt und zwar nennt sich das an der stelle

1214
01:47:15,440 --> 01:47:21,760
Jetzt haben wir noch etwas kleines machen dass das richtig funktioniert weil der tag den wir pushen der ist ja ihr seht es ja

1215
01:47:21,760 --> 01:47:23,760
0.0.3

1216
01:47:25,760 --> 01:47:27,760
Und das v also

1217
01:47:29,760 --> 01:47:31,520
0.0.3

1218
01:47:31,520 --> 01:47:33,520
0.0.3

1219
01:47:33,520 --> 01:47:35,520
0.0.3

1220
01:47:35,520 --> 01:47:37,520
0.0.3

1221
01:47:37,520 --> 01:47:39,520
0.0.3

1222
01:47:39,520 --> 01:47:41,520
0.0.3

1223
01:47:41,600 --> 01:47:51,080
Und das v also das v das mag dotnet bild nicht das heißt wir müssen das v irgendwie abschneiden

1224
01:47:54,600 --> 01:47:56,600
Das wir können jetzt sowas hier machen

1225
01:47:57,600 --> 01:48:00,880
Docker kann das vom zweiten character bis zum schluss

1226
01:48:02,000 --> 01:48:04,000
Jetzt haben wir jetzt haben wir nur noch

1227
01:48:04,600 --> 01:48:06,600
haben wir nur noch

1228
01:48:06,760 --> 01:48:10,960
0.3 das heißt wir machen jetzt hier eine environment variable die nennen wir

1229
01:48:11,400 --> 01:48:15,080
Target wörscht das ist ganz normales bash was ihr an der stelle seht ja

1230
01:48:15,640 --> 01:48:21,960
Ganz normales bash sonst sonst nix also muss man sich keine großartigen gedanken was mache ich denn hier keine großartigen gedanken machen

1231
01:48:23,040 --> 01:48:25,040
target target versions

1232
01:48:27,000 --> 01:48:33,680
Echo ups wenn man das auch richtig schreiben kann echo nicht punkt 3 was mache ich denn hier

1233
01:48:33,680 --> 01:48:41,640
Github revs so target version stehen jetzt da drinnen und hier können wir jetzt einfach reinschreiben dollar target

1234
01:48:45,680 --> 01:48:47,440
Version

1235
01:48:47,440 --> 01:48:54,960
Leerzeichen machen dass man es einfacher lesen kann gut das heißt wir holen uns jetzt aus der information welcher tech bash geht auch ja

1236
01:48:55,840 --> 01:48:57,840
Bash magic geht immer irgendwie

1237
01:48:58,080 --> 01:49:03,920
Wir holen uns hier aus der leute ich habe bauchwehe ich habe heute abend noch ein stück pizza gefressen und richtig fettige

1238
01:49:06,080 --> 01:49:10,000
Pizza Hut pizza alle das war keine gute idee

1239
01:49:13,080 --> 01:49:15,080
Painge

1240
01:49:17,880 --> 01:49:23,560
Es kann sein dass ich gleich erstmal eine runde pepo pepo toilet fire zoom machen muss

1241
01:49:28,840 --> 01:49:30,840
Ah

1242
01:49:33,320 --> 01:49:35,320
Ob das so poggers ist weiß ich nicht

1243
01:49:46,960 --> 01:49:53,040
Da warten wir mal ab wie es wird okay also target version

1244
01:49:58,400 --> 01:50:02,040
Stim vom klo ich gucke aber in chat vom klo aus

1245
01:50:02,720 --> 01:50:06,560
Targetversion so das passt jetzt eigentlich schon mal ganz gut was wir hier haben

1246
01:50:08,200 --> 01:50:11,000
Jetzt ist nur die frage wie machen wir das mit dem cash

1247
01:50:11,600 --> 01:50:18,840
Wie machen wir das mit dem cash dass er nicht jedes mal neu diese ganze sache bildet und da muss ich ehrlich sagen

1248
01:50:19,720 --> 01:50:24,760
Hab ich nicht das habe ich mir nicht alles selbst ausgedacht das habe ich mal auf

1249
01:50:25,000 --> 01:50:27,880
Stag overflow gefunden wer hätte wer hätte das gedacht ja

1250
01:50:29,840 --> 01:50:35,560
Das heißt credit wo credit gebührt ich versuche mal ob ich den stag overflow post wieder von finde

1251
01:50:37,200 --> 01:50:39,200
Stag overflow hier

1252
01:50:41,160 --> 01:50:45,600
Der beschreibt wie man dieses cashing feature von docker bild x benutzt

1253
01:50:47,480 --> 01:50:51,680
Und ich habe mir das hier gerippt aus dem stag overflow

1254
01:50:51,920 --> 01:50:59,840
Post von ihm wie das funktioniert das ist nämlich äußerst äußerst magic wie das funktioniert

1255
01:51:00,080 --> 01:51:04,680
Und ich gehe ihr könnt euch ihr könnt euch lest euch lest euch durch was was er schreibt

1256
01:51:05,520 --> 01:51:08,440
Ich gehe jetzt mal eine runde pepo toilet zoom machen

1257
01:51:12,120 --> 01:51:14,520
Gleich gleich gleich gleich wieder da

1258
01:51:15,480 --> 01:51:19,560
Ich mach euch komm mach ich das ascii aquarium an ich bin gleich wieder da

1259
01:55:51,680 --> 01:55:58,900
Jetzt schon sagen ich glaube das war es noch nicht er ich glaube ich muss da demnächst noch mal ok machen wir weiter

1260
01:56:05,440 --> 01:56:07,440
Wo sind wir stehen geblieben

1261
01:56:09,760 --> 01:56:15,880
Wie läuft auf der neuen arbeit ich habe den ersten arbeitstag nächsten montag dann dann weil dann kann ich ihr bescheid sagen

1262
01:56:22,080 --> 01:56:27,920
So wo sind wir stehen geblieben also beim cashen von unserem von unserem docker bild

1263
01:56:32,200 --> 01:56:36,880
Also wie gesagt das habe ich hier aus das habe ich hier aus github wie das wie das funktioniert ich habe das allerdings ein

1264
01:56:36,880 --> 01:56:37,640
bisschen ein bisschen

1265
01:56:37,640 --> 01:56:42,400
abgeändert ja ich laute das nicht in mein docker und sowas rein ich beschreibe auch nicht das docker feil so

1266
01:56:42,600 --> 01:56:45,840
also das das hier muss man machen dass man zugriff hat auf

1267
01:56:46,600 --> 01:56:52,600
Den docker cash was auch immer irgendwie super krasse krasse magic mit irgendwelchen tokens was auch immer

1268
01:56:52,800 --> 01:56:59,400
stack overflow triffen programming wir glauben ihm das einfach was er da geschrieben hat und gut ist jetzt muss ich den cash konfigurieren

1269
01:56:59,840 --> 01:57:02,120
und den cash konfiguriert man folgendermaßen

1270
01:57:05,600 --> 01:57:09,520
Moment zeige ich euch ist eigentlich auch recht easy den cash konfiguriert man so

1271
01:57:10,520 --> 01:57:12,520
wir können auch mal irgendwie einen

1272
01:57:13,520 --> 01:57:20,680
Zeilen und proben machen den cash konfiguriert man so also man muss die richtigen environment variablen setzen die kann man eins zu eins also das geht

1273
01:57:20,680 --> 01:57:27,760
Das ist jetzt nicht explizit auf meine repo zugeschnitten das geht in eurem repo eins zu eins auch so so docker bild x

1274
01:57:28,760 --> 01:57:30,760
target version da bla bla bla

1275
01:57:31,000 --> 01:57:40,440
cash to type github actions mode alle layer cash from type github actions so fertig das war es und wenn ich das jetzt ausführe

1276
01:57:40,720 --> 01:57:48,800
Dann wird euch auffallen es ist gleich viel schneller wohlgemerkt beim zweiten bild im ersten bild ist ja der cash noch nicht also

1277
01:57:49,800 --> 01:57:51,800
ist ja noch nichts im cash

1278
01:57:56,960 --> 01:58:00,800
Wir machen noch wir machen noch einen zweiten step dass das man hier sieht

1279
01:58:00,800 --> 01:58:06,760
ups wir machen noch einen zweiten step dass man sieht dass auch was passiert nennen wir das jetzt mal irgendwie copy file

1280
01:58:07,240 --> 01:58:11,400
Copy file und da machen wir erstmal nix anderes wie ein

1281
01:58:13,000 --> 01:58:19,760
ls minus la auf tmp out ja tmp out ist ja das wo wir die

1282
01:58:21,000 --> 01:58:28,800
Das binary das das binary was in dem container gebaut wurde hin kopieren so fertig aus das reicht jetzt jetzt pushen wir das ganze

1283
01:58:32,080 --> 01:58:34,080
Und nun

1284
01:58:35,080 --> 01:58:40,840
Gucken wir was in den actions so abgeht

1285
01:58:42,880 --> 01:58:45,120
Wie gesagt der erste step dauert lang

1286
01:58:45,680 --> 01:58:50,560
Der erste step dürfte jetzt wieder zwei minuten 15 dauern ungefähr weil er muss das image

1287
01:58:50,880 --> 01:58:57,640
Initial einmal bauen aber danach wir können es schon mal aufmachen danach gucken wir den cash aktuell ist der cash noch leer

1288
01:58:57,960 --> 01:59:04,600
Danach gucken wir den cash und ihr werdet feststellen danach ist das image gecasht und jeder weitere bild geht

1289
01:59:05,160 --> 01:59:09,120
Super viel schneller nicht einfach nur schneller sondern wirklich mega viel schneller

1290
01:59:11,280 --> 01:59:13,280
So kann er mal anfangen jetzt please

1291
01:59:14,240 --> 01:59:16,240
So ihr bild bild release

1292
01:59:16,520 --> 01:59:22,000
So er macht wieder den gleichen mist also theoretisch könnte man jetzt eigentlich sagen ist ja eine gute sache dass er so lahm ist

1293
01:59:22,000 --> 01:59:24,000
Da kann man wenn man auf der arbeit ist

1294
01:59:24,240 --> 01:59:30,320
Faken dass man beschäftigt ist man kann mal aufs klo gehen oder manche leute trinken ja auch kaffee ich weniger

1295
01:59:31,080 --> 01:59:35,920
Man kann ein bisschen schwätzen mit irgendwelche leuten man kann den screen output

1296
01:59:36,280 --> 01:59:41,120
Rekorden und in der loop abspielen wenn sein chef mal reinkommt also das hat ja durchaus hat er durchaus

1297
01:59:41,760 --> 01:59:48,760
Vorteile wenn man mal ein bisschen zeit hat aber vielleicht möchte nicht jeder zweieinhalb minuten warten bis sein bild fertig ist

1298
01:59:49,760 --> 01:59:54,400
Und deswegen cashen wir das ganze jetzt

1299
02:00:02,600 --> 02:00:04,600
Völlig detaillierte tricks

1300
02:00:19,000 --> 02:00:21,440
Patrick dankeschön 45 monat subscription

1301
02:00:27,400 --> 02:00:29,400
So wir sind bei fast zwei minuten schon

1302
02:00:33,360 --> 02:00:37,360
Und da hat man nicht jeder hat man doch wirklich keinen bock drauf sich dass sich das öfters zu geben

1303
02:00:37,360 --> 02:00:39,360
Was wird hier

1304
02:00:41,200 --> 02:00:43,000
Was wird hier

1305
02:00:43,000 --> 02:00:48,000
Irgendein testbruch, ne der vm champ aber es geht hauptsächlich um bisschen github actions zeigen

1306
02:00:49,840 --> 02:00:56,640
Aktuell sind wir gerade beim cashen von container builds in github actions und hier sieht man wieder eine schöne

1307
02:00:56,640 --> 02:00:59,920
Demonstration wie lahm das ganze ist aber es ist auch ein bisschen

1308
02:00:59,960 --> 02:01:02,340
Nach dem cashen von container builds in

1309
02:01:03,000 --> 02:01:09,120
github actions und hier sieht man wieder ein schöne demonstration wie lahm das ganze ist also es hat jetzt es hat ungefähr zwei

1310
02:01:09,200 --> 02:01:12,260
Minuten 30 gebraucht bis das ganze durch ist dass es halt ab

1311
02:01:12,560 --> 02:01:17,960
Zaag langsam aber ihr seht das bild hat funktioniert vm champ ist gebaut und so alles gut

1312
02:01:20,720 --> 02:01:27,520
Also ich baue einen arch user repo ist das ziel ja wobei wir das heute wahrscheinlich nicht. Mehr hinkriegen

1313
02:01:28,520 --> 02:01:35,280
Heute machen wir nur github actions und hängen das art bild artefakt an den an den job an den job dran das muss dann muss dann

1314
02:01:35,280 --> 02:01:40,960
Reichen also ich habe gesehen es ist richtig richtig langsam das ganze also ab ab fack langsam

1315
02:01:41,880 --> 02:01:45,040
Und jetzt zeige ich euch mal dass das cashen was gebracht hat guckt bei

1316
02:01:49,160 --> 02:01:51,160
Warum ist da nix im cash

1317
02:01:57,520 --> 02:01:59,520
Also

1318
02:02:15,840 --> 02:02:17,840
Habe ich mich irgendwie

1319
02:02:27,680 --> 02:02:29,680
Hab ich mich irgendwo vertan

1320
02:02:34,480 --> 02:02:36,480
Dr. Bild x

1321
02:02:39,680 --> 02:02:41,680
Ne das habe ich doch sogar kopiert

1322
02:02:47,920 --> 02:02:54,160
Ich habe was vergessen leute jetzt weiß ich ich habe keine permissions auf dem cashen

1323
02:02:54,320 --> 02:02:57,400
Jetzt weiß ich ich habe keine permissions auf den cash

1324
02:02:57,960 --> 02:02:59,960
Da habe ich ja noch gar nicht drüber geredet ja

1325
02:03:00,400 --> 02:03:06,800
Bei muss für manche sachen wie zum beispiel schreibrechte muss man explizit für github actions anfordern

1326
02:03:08,440 --> 02:03:14,320
Ich hatte keine schreibrechte auf den cash deswegen ging das nicht ist natürlich doof dass er da kein fehler schmeißt

1327
02:03:14,320 --> 02:03:21,680
Okay jetzt jetzt sollte es funktionen jetzt müssen wir das ganze noch mal angucken okay optimaler zeitpunkt leute

1328
02:03:22,400 --> 02:03:24,960
Ich warte auf den pusher und gehe ich noch mal kacken schnell

1329
02:03:27,520 --> 02:03:31,920
Die die pizza hut pizza muss raus af af klo

1330
02:03:36,960 --> 02:03:39,680
Wir warten noch bis der bild gestartet ist okay

1331
02:03:39,680 --> 02:03:44,240
Wir warten noch bis der bild gestartet ist okay hier so gleich wieder da

1332
02:06:39,680 --> 02:06:41,680
Fertig

1333
02:06:41,680 --> 02:06:48,080
Komm mal ich komme genau richtig ich bin genau richtig am start bild ist fertig und klo ist fertig

1334
02:06:49,040 --> 02:06:51,040
exzellent

1335
02:06:51,120 --> 02:06:56,320
Diesmal hat sogar noch länger gedauert was wahrscheinlich daran liegt dass es was in cash geschrieben hat cashes

1336
02:06:56,960 --> 02:07:00,080
Ja guck mal da wir haben was im cash stehen

1337
02:07:00,960 --> 02:07:07,360
Bin auch in der stelle der stelle der stelle der stelle der stelle der stelle der stelle der stelle der stelle der stelle

1338
02:07:07,520 --> 02:07:09,200
Kleintivalente

1339
02:07:09,200 --> 02:07:10,240
J an deržeist

1340
02:07:10,240 --> 02:07:17,640
die stelle der stelle der stelle der stelle der stelle der stelle der stelle der stelle der stelle der stelle der stelle der stelle der stelle der stelle

1341
02:07:17,760 --> 02:07:18,000
Diss

1342
02:07:18,000 --> 02:07:23,760
Der gerade be opinionetene

1343
02:07:23,920 --> 02:07:25,920
{\an8</ realizes

1344
02:07:26,720 --> 02:07:28,400
sailed

1345
02:07:28,400 --> 02:07:36,820
Ei

1346
02:07:37,360 --> 02:07:40,560
Teraform anschmeißen um irgendwas zu professionieren

1347
02:07:41,760 --> 02:07:43,760
zu professionieren oder

1348
02:07:44,200 --> 02:07:51,760
Konfigurieren oder was auch immer es gibt bestimmt sogar eine fertige ansible action oder sowas aber github action selbst ist dafür nicht gedacht und kann

1349
02:07:51,760 --> 02:07:57,680
Man dafür auch nicht gut verwenden um ähnliche sachen zu wachen wie mit terraform und auch nicht ähnliche sachen wie mit ansible

1350
02:07:59,560 --> 02:08:01,560
Dafür ist es nicht da

1351
02:08:01,960 --> 02:08:06,120
So und jetzt werde ich euch zeigen ihr habt gesehen das bild dauert

1352
02:08:06,800 --> 02:08:10,000
Fast drei minuten 30 und jetzt passt mal auf

1353
02:08:10,720 --> 02:08:12,720
Wir pushen das ganze jetzt einfach noch mal

1354
02:08:13,440 --> 02:08:15,680
Und ihr werdet feststellen das bild

1355
02:08:16,200 --> 02:08:18,040
geht jetzt

1356
02:08:18,040 --> 02:08:20,040
erstaunlich viel schneller

1357
02:08:23,560 --> 02:08:25,560
Bild

1358
02:08:33,360 --> 02:08:35,360
Check out repo install bild x

1359
02:08:37,120 --> 02:08:39,120
Guck mal da

1360
02:08:41,720 --> 02:08:43,720
Guck mal da

1361
02:08:44,720 --> 02:08:46,720
Und er ist fertig

1362
02:08:48,680 --> 02:08:54,820
Er ist durch in 18 sekunden also so so ein bild zu cashen ist schon nicht verkehrt

1363
02:08:56,160 --> 02:09:02,160
Also drei drei drei minuten 30 versus versus 28 sekunden ist schon ein kleiner unterschied

1364
02:09:03,160 --> 02:09:08,720
Also es lohnt sich auf jeden fall den cash von github actions zu benutzen wie man jetzt hier sieht

1365
02:09:10,400 --> 02:09:12,480
Das ist das ist eine sehr sinnvolle geschichte

1366
02:09:15,960 --> 02:09:19,320
Cache das denn auch für den nächsten tag ja

1367
02:09:22,040 --> 02:09:24,040
Wobei ob es für den nächsten tag

1368
02:09:25,280 --> 02:09:30,720
Es casht auf jeden fall für den gleichen branche ob es für den nächsten tag casht

1369
02:09:32,480 --> 02:09:37,640
Müssen wir mal gucken für den gleichen branche casht es auf jeden fall testen wir das doch mal

1370
02:09:39,360 --> 02:09:41,360
0.4

1371
02:09:45,200 --> 02:09:52,640
0.4 wenn er pro tag einen full bild macht wäre ja nicht so schlimm weil tags nicht oft kommen

1372
02:09:52,640 --> 02:09:59,200
Ja warum sollte ich jetzt mehrere jobs oder gar mehrere workflows machen für sowas kleines

1373
02:10:04,640 --> 02:10:07,400
Mal gucken ob das jetzt greift beim nächsten tag

1374
02:10:09,040 --> 02:10:15,120
Schauen wir mal also im gleichen branche greift es auf jeden fall bei tags bin ich mir nicht sicher

1375
02:10:16,520 --> 02:10:21,240
Das ist ein bisschen ein bisschen ein bisschen ein bisschen ein bisschen ein bisschen ein bisschen ein bisschen

1376
02:10:22,640 --> 02:10:29,760
Das ist gescoped pro branche also es durchaus möglich dass es auch gescoped ist pro tag und deswegen jetzt nicht schneller ist

1377
02:10:31,200 --> 02:10:33,200
Sehen wir ja gleich

1378
02:10:36,800 --> 02:10:38,800
Ne oder

1379
02:10:39,920 --> 02:10:41,920
Ne okay

1380
02:10:41,960 --> 02:10:49,680
Tags wenn man unterschiedliche tags pusht dann ist es nicht gecasht weil das immer gescoped ist auf den jeweiligen branche und tag ist ja

1381
02:10:49,680 --> 02:10:52,960
Quasi so eine art branche nur dass du dran ändern kannst

1382
02:10:53,400 --> 02:10:59,300
Okay also für tags bringt es nicht so viel für branches bringt es allerdings sehr viel wir können das jetzt mal umstellen um das

1383
02:10:59,300 --> 02:11:06,620
Um das zu zeigen also wir wir pushen jetzt hier nicht und und tag sondern wir pushen wir pushen und branche also

1384
02:11:07,840 --> 02:11:14,480
Ich habe kein bock selbst kaputt zu machen aber wir könnten das umstellen auf branches pushen und dann wäre es

1385
02:11:15,520 --> 02:11:17,520
gecasht

1386
02:11:19,960 --> 02:11:22,120
Also anscheinend pro tag ist es wohl nicht so

1387
02:11:26,080 --> 02:11:31,560
Was aber eigentlich logisch ist weil sie sagen ja es ist es ist gescoped pro branche also

1388
02:11:33,840 --> 02:11:35,840
Ergibt ergibt eigentlich sinn

1389
02:11:40,640 --> 02:11:42,760
Zumindest der bild ist sehr viel schneller

1390
02:11:44,920 --> 02:11:48,640
Wenn auch nicht von tag zu tag aber von pusht zu pusht im gleichen branche

1391
02:11:50,080 --> 02:11:53,280
Als letztes müssen wir uns jetzt noch angucken wie

1392
02:11:55,120 --> 02:11:59,680
Kriegen wir jetzt das binary was wir hier raus kopiert haben wie kriegen wir das binary

1393
02:12:00,240 --> 02:12:07,160
Irgendwie hier veröffentlicht auf github zum beispiel für den nightly bild oder den daily bild oder sowas und dafür gibt es eine

1394
02:12:07,600 --> 02:12:09,600
upload action

1395
02:12:10,280 --> 02:12:12,280
Und die sieht so aus

1396
02:12:13,640 --> 02:12:17,480
Name nehmen wir es einfach mal upload binary

1397
02:12:17,480 --> 02:12:23,120
Uses das muss ich mir jetzt kopieren uses action

1398
02:12:28,000 --> 02:12:33,200
Uses action upload artifact hier auch wenn er versioniert auf 3.1.2 dass da nicht aus

1399
02:12:33,800 --> 02:12:39,920
irgendwie aus versehen was kaputt geht so jetzt muss man den name angeben unter welchem name das

1400
02:12:40,720 --> 02:12:46,160
Binary beziehungsweise dass das zip file dann hochgeladen werden soll das ist immer ein zip file

1401
02:12:47,000 --> 02:12:50,520
Das soll hochgeladen werden unter vm champ

1402
02:12:51,680 --> 02:12:53,680
Minus linux

1403
02:12:54,040 --> 02:12:59,680
Minus und jetzt wollen wir an der stelle auch wieder die github tag version minus minus ref name

1404
02:13:02,360 --> 02:13:06,120
Minus amd 64 soll das ganze heißen

1405
02:13:06,920 --> 02:13:12,760
Wirst du noch sagen wo er das ganze her bekommt und zwar bekommst du das her unter temp out vm champ

1406
02:13:13,760 --> 02:13:17,680
Und dann brauchen wir noch retention days das brauchen wir nicht

1407
02:13:18,120 --> 02:13:23,280
Aber mehr als einen tag aufheben ist jetzt relativ sinnlos ich will ja nicht mal einen speicherplatz unnötig belasten

1408
02:13:23,840 --> 02:13:25,920
Ich hoffe der bildjob ist gleich mal durch

1409
02:13:26,800 --> 02:13:28,800
immer noch in progress

1410
02:13:32,240 --> 02:13:34,240
Hoffentlich haben wir es jetzt gleich mal

1411
02:13:43,760 --> 02:13:45,760
Ja jetzt ist er fertig

1412
02:13:49,880 --> 02:13:55,760
Müsste der cash nicht in der branche auch in weil also im branche ist das mit dem cash bei jedem push

1413
02:13:56,480 --> 02:14:02,560
Ist das so also der kann auf den cash zugreifen dass das schreiben die auch explizit auf der seite

1414
02:14:03,120 --> 02:14:09,640
Von docker bild und der implementierung von diesem von diesem cash dass das gescopt ist pro pro branche

1415
02:14:09,760 --> 02:14:16,000
Ja gut über text schreiben sie nichts aber in dem fall ergibt es irgendwie sinn ja jeder tag ist ja wenn das so wills für sich

1416
02:14:16,000 --> 02:14:18,000
genommen sein eigener branche

1417
02:14:25,720 --> 02:14:28,080
So dann kommenden wir das ganze jetzt war

1418
02:14:31,120 --> 02:14:36,160
Wir haben jetzt ja nichts großartig geändert außer dass er den output upload

1419
02:14:36,160 --> 02:14:45,120
Bei dockerfile change doch bei dockerfile change je nachdem wo du das dockerfile nicht nicht dickerfile

1420
02:14:48,000 --> 02:14:55,200
Yep, jepp cock je nachdem wo du das dockerfile änders da speichert sich schon die einzelnen steps da cashe sich die einzelnen steps

1421
02:14:55,520 --> 02:15:00,160
Also wenn du jetzt hier was änderst dann ist es dann ist es können wir gleich ausprobieren

1422
02:15:00,400 --> 02:15:04,080
Dann ist es nur ab hier wo was neu machen muss können wir gleich können wir gleich ausprobieren

1423
02:15:05,080 --> 02:15:09,800
So also ich pusht das ganze jetzt noch mal pusht blablabla tag

1424
02:15:17,040 --> 02:15:22,480
Und jetzt werden wir ich habe ja nur das hier hinzugefügt dass sie die sache uploadet und jetzt werdet ihr sehen haben wir

1425
02:15:22,480 --> 02:15:24,480
eine sehr schnelle github action wieder laufen

1426
02:15:25,240 --> 02:15:27,520
Innerhalb von 20 sekunden ist die wieder durch

1427
02:15:34,080 --> 02:15:38,000
Wenn er dann anfängt install zack

1428
02:15:40,880 --> 02:15:42,880
Ach shit oh nee

1429
02:15:44,000 --> 02:15:46,000
Hä

1430
02:15:49,440 --> 02:15:53,520
Warum macht er das jetzt noch mal ne doch ist okay er hat es aus dem cash geholt

1431
02:15:54,000 --> 02:15:57,880
Ist viel viel zu schnell ist er hat es aus dem cash geholt ich war jetzt erst verwirrt was macht er denn da

1432
02:15:57,960 --> 02:16:04,040
Nee der ist hier durch so zack 32 sekunden fertig und jetzt haben wir hier an dieser action guckt mal da

1433
02:16:04,680 --> 02:16:07,240
Ein artefact hängen und ich darf nicht scrollen

1434
02:16:08,440 --> 02:16:14,360
Vm champ linux v004 amd 64 da hat mir das mal runter das ist eine zip datei

1435
02:16:18,280 --> 02:16:20,280
CD downloads

1436
02:16:20,520 --> 02:16:22,520
Ist es anzip

1437
02:16:23,960 --> 02:16:25,640
Anzip

1438
02:16:25,640 --> 02:16:28,680
ch mod x vm champ

1439
02:16:29,560 --> 02:16:35,000
vm champ minus minus version und sie da es ist lauffähig und version 4

1440
02:16:36,120 --> 02:16:42,760
Also das hat funktioniert wir haben das ding gebaut im container mit mit cash dass es schon schnell baut

1441
02:16:43,400 --> 02:16:50,120
Also das hat funktioniert wir haben das ding gebaut im container mit mit cash das ist schön schnell baut

1442
02:16:52,040 --> 02:16:55,400
Und danach aus dem container extra hier und hochgeladen

1443
02:16:58,200 --> 02:17:02,200
Ach so ja und das alle stimmt stimmt stimmt das allerwichtigste ist natürlich kekwe

1444
02:17:02,200 --> 02:17:07,480
Und das ist bestimmt bild und release action oder sowas

1445
02:17:09,000 --> 02:17:12,360
An die bild und pusht action ja die kann man auch verwenden

1446
02:17:13,560 --> 02:17:17,240
Da musste auch nicht diesen ganzen blödsinn machen den ich in bash gemacht habe

1447
02:17:22,840 --> 02:17:24,840
Die artefacts noch testen

1448
02:17:25,560 --> 02:17:28,280
Ja wenn ich das noch testen kann ich das noch testen

1449
02:17:28,920 --> 02:17:30,920
Die artefacts noch testen

1450
02:17:31,480 --> 02:17:35,840
Ja wenn du wenn du wenn du tests hast genau dafür ist github action star

1451
02:17:36,400 --> 02:17:42,640
Also wenn du jetzt sagst bevor ich das hoch lade möchte ich mit dem binary noch ein paar tests durchführen so nach dem motto

1452
02:17:44,160 --> 02:17:51,800
Steht in der hilfe ausgabe das und das drin ist die version auch wirklich wirklich vier und sowas ja das das wäre natürlich sinnvoll da könnte

1453
02:17:51,800 --> 02:17:53,800
man jetzt hier entweder

1454
02:17:54,360 --> 02:17:59,240
Ups entweder könnte man das hier was mache ich denn

1455
02:18:01,080 --> 02:18:05,960
Entweder könnte man hier noch ein testing step einbauen oder man macht für den testen komplett neuen workflow

1456
02:18:06,480 --> 02:18:08,480
Ja, aber das wäre tatsächlich sehr sinnvoll

1457
02:18:09,160 --> 02:18:15,920
Wenn man da wenn sie also wenn es bei der software sinnvoll ist ja man könnte das jetzt testen tatsächlich was da rauskommt am besten testen natürlich

1458
02:18:16,440 --> 02:18:22,360
Bevor man bevor man das das das artefakt hoch lädt also hier dazwischen hier können wir noch einen test step machen

1459
02:18:23,040 --> 02:18:27,120
Könnte man dann könnte man dann step machen für das testen dass man dann sagt ok

1460
02:18:30,360 --> 02:18:33,160
Test und da könnte man dann so dinge machen wie

1461
02:18:34,000 --> 02:18:37,160
Finden den vm champ ausführen temp out

1462
02:18:37,680 --> 02:18:44,960
Vm champ minus minus help und er hält greppen oder mit minus minus version und dann greppen ob der auch wirklich

1463
02:18:46,720 --> 02:18:50,360
Die richtige versionsnummer hat oder sowas könnte man jetzt machen

1464
02:18:51,120 --> 02:18:58,360
Ja und ganz wichtig wichtig ob ob ob auch keck keck w ausgeführt werden kann keck w ganz enorm wichtig ob das geht

1465
02:18:58,480 --> 02:19:03,840
Aber nachdem es an der stelle keinen sinn macht das zu testen lassen wir es mal aus wir probieren jetzt mal eine sache aus das was

1466
02:19:03,840 --> 02:19:07,240
Der wort die geschrieben hat oder irgendwer hat es geschrieben die wort cs hat es geschrieben

1467
02:19:07,560 --> 02:19:12,360
Was passiert denn jetzt wenn wir das docker file anpassen also mal angenommen man ändert jetzt hier irgendwas im docker file

1468
02:19:13,680 --> 02:19:16,160
Beleg gerade was wir sinnvoll im docker file ändern können

1469
02:19:20,360 --> 02:19:27,640
Ja hier wir wollen wir wollen minus minus p anstatt slash p hier verwenden weil ganz ganz essenziell

1470
02:19:29,160 --> 02:19:31,160
Ja und und minus minus p

1471
02:19:32,920 --> 02:19:36,720
Also wovon da bin ich mir jetzt nicht der wovon ich jetzt ausgehe ist folgendes

1472
02:19:38,040 --> 02:19:43,640
Das kompilieren muss er neu machen weil sich die zeile im docker file geändert hat der muss ab hier alles neu machen

1473
02:19:44,000 --> 02:19:46,680
Das davor kann er aus dem cache benutzen

1474
02:19:47,040 --> 02:19:50,320
Warum denke ich das weil ich gesagt habe

1475
02:19:50,880 --> 02:19:52,000
hier

1476
02:19:52,000 --> 02:19:56,360
Cache tu max und da sollte er angeblich alle zwischen steps

1477
02:19:57,640 --> 02:20:04,480
Cache wobei ich mir nicht sicher bin ob er wirklich alle zwischen steps cached oder alle zwischen images falsches welche gibt cached

1478
02:20:05,640 --> 02:20:09,800
Das müssen wir jetzt mal ausprobieren ob änderungen im docker file den kompletten

1479
02:20:11,720 --> 02:20:13,720
Cache quasi

1480
02:20:14,080 --> 02:20:20,320
Aushebeln sehen wir jetzt gleich also wenn es jetzt drei minuten läuft dann wissen wir geht auf jeden fall nicht

1481
02:20:28,360 --> 02:20:32,560
Aber so weit zu den absoluten basics was

1482
02:20:35,480 --> 02:20:37,480
Github actions angeht

1483
02:20:37,880 --> 02:20:41,920
Das ist wirklich sehr übersichtlich an der stelle hier was wir gemacht haben das ist alles

1484
02:20:42,160 --> 02:20:48,360
Aber ich glaube es sind schon die wichtigsten sachen ok das ging sehr schnell also anscheinend hat das funktioniert hier bild release

1485
02:20:50,280 --> 02:20:52,280
Zack zack zack zack

1486
02:20:52,840 --> 02:20:55,880
Ging ging mega mega zackig alles

1487
02:20:58,120 --> 02:21:01,920
Also er hat aber noch er hat neu kompiliert also wahrscheinlich war das genauso

1488
02:21:07,200 --> 02:21:11,000
Moment ich habe ich habe miss erzählt hat noch gar nicht angefangen

1489
02:21:12,720 --> 02:21:16,000
War das falsche ok ich habe nichts gesagt

1490
02:21:20,760 --> 02:21:22,760
Ja

1491
02:21:24,600 --> 02:21:26,600
Docker bild

1492
02:21:28,160 --> 02:21:30,160
War der alte bild habe ich verguckt

1493
02:21:33,560 --> 02:21:39,600
Ok ja es ist so wie ich gesagt habe er macht am kompilier step weiter

1494
02:21:40,160 --> 02:21:42,760
Er macht dem kompilier step weiter er macht nicht alles

1495
02:21:43,080 --> 02:21:50,320
Er macht das das den compile step machte nur das heißt der cache bringt was auch wenn man das docker file ändert bringt der cache was

1496
02:21:50,400 --> 02:21:54,280
Den ganzen shit davor hat er nicht gemacht er hat hier beim kompilieren angefangen

1497
02:21:56,680 --> 02:21:58,680
So eigentlich nice

1498
02:21:59,160 --> 02:22:04,280
Gut jetzt brauche ein bisschen weil er den cache refreshen muss aber es ist halbwegs geschwind

1499
02:22:04,280 --> 02:22:07,280
Ja gut schön dass das funktioniert hat

1500
02:22:09,000 --> 02:22:11,800
Warten wir mal wie viel er wie viel er wirklich am ende jetzt braucht

1501
02:22:16,440 --> 02:22:19,320
Weil so viel so viel langsamer ist er jetzt auch nicht

1502
02:22:21,000 --> 02:22:23,000
Ja toll

1503
02:22:23,000 --> 02:22:26,920
So also so viel zeit spart man nicht ein bisschen was eine halbe minute spart man

1504
02:22:26,920 --> 02:22:29,640
Na wobei vorher hat es drei minuten noch was gebraucht

1505
02:22:29,720 --> 02:22:36,000
Ja zwischen eineinhalb und zwei minuten spart man ist ist also durchaus ist also durchaus ok auch wenn man das docker file ändert

1506
02:22:36,000 --> 02:22:38,000
Das docker file ändert man nicht so oft

1507
02:22:38,000 --> 02:22:41,160
Ja, also das war es jetzt zur absoluten basics was

1508
02:22:41,800 --> 02:22:43,800
GitHub actions angeht

1509
02:22:44,280 --> 02:22:49,480
Wir haben jetzt auch advancedere topics heute dabei gehabt zum beispiel wie man docker docker files geht

1510
02:22:49,480 --> 02:22:51,480
Also das war es jetzt zur absoluten basics was

1511
02:22:52,040 --> 02:22:54,040
GitHub actions angeht

1512
02:22:54,440 --> 02:23:00,920
Wir haben jetzt auch advancedere topics heute dabei gehabt zum beispiel wie man docker docker files cached also docker build

1513
02:23:01,520 --> 02:23:06,120
Cached normalerweise wollte ich mich jetzt darum kümmern wie man ein arch user repo

1514
02:23:09,400 --> 02:23:12,280
Package bild oder wie auch immer erstellt von arch user repo

1515
02:23:14,280 --> 02:23:19,000
Das können heute allerdings nicht mehr machen weil ich habe immer noch probleme mit meiner pizza

1516
02:23:19,000 --> 02:23:22,940
Und ich habe jetzt kein bock mit bauchweh weiter zu streben das guckt man es dann morgen oder so an wie man

1517
02:23:22,940 --> 02:23:35,720
Wie man ein arch user repo package baut und ein arch user repo automatisch erzeugt per github actions

1518
02:23:36,680 --> 02:23:41,980
Ich vermute mal dass ich mein ssh key per secret im github repo hinterlegen muss

1519
02:23:42,880 --> 02:23:44,760
und

1520
02:23:44,760 --> 02:23:47,960
Ja dann irgendwie package bild customisem und und pushen

1521
02:23:49,440 --> 02:23:53,440
Aber ich denke man hat jetzt ein bisschen ahnung davon wenn man vor allem noch gar nichts mit github actions gemacht hat

1522
02:23:53,440 --> 02:23:59,480
Wie das so aussieht und man hat eine sache zumindest schon mal gelernt caching bei docker container lohnt sich enorm

1523
02:24:05,480 --> 02:24:08,840
Alles klar, ich habe immer noch bauchweh ich gehe jetzt

1524
02:24:08,840 --> 02:24:11,880
Ich gehe jetzt off und noch mal aufs klo bis dann machts gut see you

