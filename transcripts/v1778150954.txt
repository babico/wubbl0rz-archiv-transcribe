Da bin ich schon wieder.
Nachdem ich gestern ja relativ zackig weg musste, wegen anstehenden MMORPG, wegen an...
ich kann nicht reden, ich muss den Satz nochmal neu anfangen.
Nachdem ich ja gestern weg musste, wegen anstehenden MMORPG, bin ich heute wieder am Start.
Heute kein MMORPG, das entscheidet sich immer erst ein bisschen später, wenn die Leute von
der Arbeit kommen.
Wir sind ja mittlerweile die ultra casuals, wir spielen vielleicht 2-3 Stunden oder vielleicht
auch mal 4-5, aber meistens eher so 2-3 Stunden abends.
Also casual as fuck und auch nicht jeden Tag und das hängt immer ein bisschen davon ab,
ob die Leute halt da sind.
Ja, mit denen man MMORPG alleine spielen ist doof und das hängt dann immer ein bisschen
davon ab, ob die Leute da sind und manche haben Homeoffice, da wissen sie schon dann
im Tag sind sie da, aber manchmal wissen sie auch auf die Arbeit und nicht so einfach,
zumal es mittlerweile auch ziemlich bunt gemischt ist.
Wir haben die MMO Group, mit der ich da schon eine ganze Weile eigentlich spiele, das besteht
aus 4-6 Deutsch, je nachdem wer da ist, ein Franzose, ein Niederländer, es ist wild
Es sind 8 Leute, es sind sogar mehr als 8 Leute, weil in Daug brauchst halt 8, um eine gescheite
Group zusammen zu kriegen, nachdem nicht immer alle da sind.
Ja und das entscheidet sich dann halt immer abends, ob die Leute da sind oder nicht.
Guck mal, ich hab Viewtime auf meinem eigenen Video und dementsprechend kann ich so nicht
so genau sagen, ob MMORPG oder nicht.
Deswegen müssen wir halt anfangen, weil vor 20 Uhr wird heute relativ sicher.
Kein Kreisegrind sein, das heißt wir haben noch eineinhalb Stunden Zeit, was sinnvolles
mindestens zu machen.
Ich glaube nicht, dass heute was ist, wir haben gestern bis 23 Uhr 30 Uhr oder so gespielt.
Excited morgen das neue Business zu skalieren, morgen nicht, nächste Woche Montag ist es
so weit.
Würdest du irgendwann mein Steam Game mal probieren, wenn ich dir einen Keygift also
in ein paar Monaten.
Du bist nicht derjenige, der schon vor einer Weile mal was von einem Steam Game geschrieben
hat, oder?
Irgendwas mit Strichmännchen war das doch, oder?
Oder bring ich das jetzt durcheinander?
War das nicht irgendwas mit Strichmännchen?
Oder ist das, oder ist das fast ganz was anderes?
War das nicht so etwas mit minimalistischer Grafik und Strichmännchen?
Oder es kann sein, dass ich das, dass ich das.
Nee, nee, nee, dann bist du jemand anderes, aber ich erinnere mich, ich erinnere mich
an die Frage zur Twitch-Tint-Integration, da membre ich mich, ja.
Aber an das andere, das hat irgendjemand ja auch mal erzählt, in Game of Steam Released,
das war irgendwas, das war so Strichmännchen-Warfare, oder irgendwie sowas.
Ich krieg's nicht mal ganz zu sagen, das war irgendwas ganz minimalistisches mit Strichmännchen.
Aber das ist schon, das braucht jetzt schon, keine Ahnung, zweieinhalb Jahre oder so her.
Nie wieder was von gehört.
Ja, so sieht's aus.
Die Playlist ist wirklich Müll, ja.
Ich kann sich echt nicht entscheiden, wie laut oder leise es sein wird, ich mach mal kurz
die View auf meinen eigenen Videos aus.
Beste.
So, da haben wir ja noch die, das ist natürlich exellent, dass wir noch die To-Do-Liste vom
letzten Mal haben.
Haben wir das nicht auch irgendwo hier gespeichert zufälligerweise?
Nee?
Na gut, da könnte man ja zur Abwechslung mal mein Notizprogramm benutzen, was ich eigentlich
nie verwende hier auf der, auf der Admin, äh, auf der Streaming, nicht Admin, auf der
Streaming-VM.
Jetzt ist die Musik wieder zu laut, man, die können sich echt nicht entscheiden über
dieser Playlist.
Was ist das denn?
Excellent.
Ich guck gleich, ich guck gleich den Chat rein.
Ich will nur mal kurz vorbereiten, dass alles, dass alles richtig, richtig funktioniert
gleich.
Dann guck ich, dann guck ich den Chat rein, dass wir dann gleich auch noch ein bisschen
was, heute zumindest mal ein bisschen was Sinnvolles machen können.
So.
Also, Leute, nochmal was anderes, hat irgendjemand eine Ahnung, wie ich diesen Mist hier aus
Windows raus bekomme?
Ich kann hier nicht in die Search-Settings, Index-Options und so, bringt, bringt mir alles
nix.
Ja?
Also, ich hab keine Ahnung, wie das, wie ich das, ich, ich, ich, ich will das alles
nicht wissen.
Also, ich, ich will weder wissen, Pflanzentricks von Oma, noch Comeback-Flopped, Rauchwolke
über Moskau, wie kann man diesen Shit ausschalten?
Das ist, das ist was, das regt mich wahnsinnig auf.
Und was mich auch aufregt ist, dass meine, sei das meine Suchanfragen, die ich hier eintippe,
automatisch zu Microsoft geschickt werden.
Ja, DeepLog, aber da muss es doch was ohne irgendwie halbe Windows-Funktionalität entfernen
geben.
Da muss da irgendwelche, wir haben das mal probiert mit irgendeiner Gruppenrichtlinie.
Settings, Personalisieren, Personalize, ne.
Hier das da meiste, ne, ne, da geht das nicht.
Da kann man, das wäre viel zu schön, wenn man das hier einfach ausschalten könnte.
Ne, das geht natürlich nicht bei Windows.
Hm.
Du hast keine Default-Network-Bridge, hast du Berechtigung, bist du in der LibWirt-Gruppe
drin?
Das könnte ich vielleicht auch in die, in die Ritmi schreiben.
Siehst du, siehst du als Root ein Netzwerk?
Wenn du als Root auch kein Netzwerk siehst, dann fehlt das schlicht und ergreifend.
Dann kannst du entweder über den Wirt-Manager, hier das Default-Netzwerk, aber das müsste
eigentlich da sein, dieses Default-Network.
Das ist, also normalerweise legt der ne, ne Wirt-Bridge, gut, das ist halt Voraussetzung,
du brauchst irgendein Netzwerk-Interface, dass das Netzwerk funktioniert logischerweise.
Ansonsten, ja, weiß nicht.
Leute, ich, ich, ähm, muss ich noch was, muss ich noch was anderes, aber ich beantworte
mal kurz.
Chat, also.
Sorry, wenn ich etwas off-topic reinwerfe, habe die letzten zwei Tage damit verbracht
von Hand, unsere Apps von Umgebung 1 in Umgebung 2 und 3 zu releasen, wie macht ihr das automatisiert?
Könnt ihr etwas empfehlen?
Dazu müsste man jetzt erstmal ergründen, was du da genau gemacht hast, also.
Ich, ich rate jetzt einfach mal, was du gemacht hast und du sagst dann, ob das stimmt.
Also, du hast irgendwie ein paar Binaries und Config-Files und was weiß ich, vielleicht
noch ein paar mehr Dependencies, die gebraucht werden, dass deine Anwendung läuft, ja, beispielsweise
OS-Packages, die installiert werden müssen und sonst was.
So, und du bist jetzt quasi hergegangen und hast nochmal Linux-Kisten hingestellt, hast
versucht, die Pakete möglichst gleich zu installieren, wie auf der ersten, äh, nennen wir es mal
im ersten Environment und dann hast du deine Anwendung, Binaries rüberkopiert, deine Config
rüberkopiert, die Config editiert und dann versucht es zu starten, so irgendwie sowas
in der Richtung.
Oder?
Also, ist schwierig zu sagen.
Ja, kannst du ja mal schreiben, was du, bisschen konkreter, was du gemacht hast, so allgemein
muss man sagen, Umgebung baut man am besten, oder verschiedene Environments baut man am
besten damit auf, äh, baut man am besten auf, indem man das heute in irgendeiner, muss nicht
zwangsläufig Terraform sein, aber in irgendeiner Infrastructure als Code-Lösung abbildet,
mit passenden Variablen an den Stellen, dass du dann relativ schnell 1, 2, 3, 4 Testing-Umgebungen
starten kannst.
Ähm, Anwendung, Deployen ist halt immer die Frage, wohin, also sprich auf eigene Infrastruktur,
ist das möglich Stateless, ist das vielleicht in der Cloud, also sprich, wieviel muss drum
darum da sein, dass die Anwendung läuft, das kann man so pauschal nicht sagen, am besten
ist halt, ach, Google Cloud, ok, ah ja dann, dann ist das ganze doch deutlich, ok, dann
ist es doch, dann geht das doch, dann geht das doch tatsächlich ganz gut.
Ähm, ich scroll mal kurz durch, soll ich da irgendwas über sehen, aber, du musst mit
rechtsklick, rechtsklick alle anpinnen, hier gibt es nichts zum anpinnen, hier kann man
nicht drauf, man kann das löschen, ja super, aber auch nur einmal, lull, man kann das nur
einmal löschen Leute, nur einmal, mehr geht nicht, der Rest bleibt da und jetzt kann man
auch nicht rechts anklicken, ich sag euch Leute, ich bin doch so ein, shit, Alter, also,
Google Cloud mit Kubernetes, darf ich fragen, ist das ein Standard Kubernetes Cluster oder
ist es ein Autopilot Cluster, also, meine Güte, diese Playlist macht mich fertig, einmal
so, einmal so, GitLab und Jenkins sind auch da, aber trotzdem sehr viel von Hand dazwischen,
also, ok, wo fange ich da jetzt am besten an, immer mit dem Sternchen dran, dass ich
jetzt auch nicht der Kubernetes Alleskönner auf jeder Cloud Plattform bin, aber es gibt
eine coole Möglichkeit oder ein System, wie man das ganz gut machen kann, natürlich müssen
die Anwendungen darauf angepasst sein, also das erste ist natürlich, die Anwendungen
selbst brauchen kein Streicheln in dem Sinn, sondern können konfiguriert werden über
Environment Variablen für deine Pots, für die Container, das ist da natürlich relativ
praktisch, das stellst du im Deployment ein, Image XY, die Environment Variablen und gut
ist, das ist schonmal das erste, wenn die Anwendung sich so verhält, dass man sie über
Environment Variablen konfigurieren kann, ist noch mal ein großes Plus und ansonsten gibt's da
ein ganz gutes System, was mittlerweile auch ein bisschen gehyped ist, beziehungsweise,
dass so viele als, so macht man's ansieht, muss natürlich immer zum jeweiligen Unternehmen passen
und zwar, man hat das ganze zweistufig, also, du hast irgendwo dein GitLab, keine Ahnung, ob's da ein
schönes Bild zu gibt, doch gibt's bestimmt ein schönes Bild zu, du hast irgendwo dein GitLab und
ein Jenkins, so, du hast dein Source Code von der Anwendung und du hast für diese Anwendung selbst
Kubernetes Ressourcen definiert, ja, irgendwelche Yamels, das kann entweder im Anwendungsrepo drinnen
sein, also, dass du dann beispielsweise in deiner Java Anwendung einen extra Ordner für einen Helmchart
oder irgendwie sowas hast oder einen extra Ordner für irgendwelche Kubernetes, Jaml-Files,
wie auch immer, es ist meistens ein bisschen angenehmer, wenn das Anwendungsrepo und das
Infrastruktur für die Anwendungskonfigurationsrepo zwei Getrennte sind, weil da können auch unterschiedliche
Leute drinnen rumwurschteln und ja, da komm ich gleich zu und es sind ja oftmals unabhängige
Sachen voneinander und du müllst dem anderen auch nicht die History, die GitHistory zu, also,
ein Repo mit der Anwendung, ein Repo mit der Kubernetes-Konfig für die Anwendung oder wenn
sowas klein ist, kann es auch in eins schmeißen, ist erstmal wurscht, so, dann, wir überspringen
das jetzt mal mit Pull-Request und dem ganzen Blödsinn drumherum, da gibt es eine neue Version,
wie auch immer das aussieht und dann triggert das Jenkins, in dem Fall machen wir Jenkins,
dann baut Jenkins, und jetzt kommt der Trick an der ganzen Geschichte, dann baut Jenkins nicht
nur die Anwendung, sondern, falls es notwendig ist, passt es auch so weit wie notwendig die
Kubernetes-Manifest, die Konfig an und dann pusht es der Jenkins alles in ein Continuous-Delivery-Repo
und dann hast du sowas wie Flux oder ArgoCD in deinem Kubernetes-Cluster laufen, was permanent
guckt, ob in diesem Continuous-Delivery-Repo Changes drin sind und sobald dort Changes
reingepusht werden, wendet zum Beispiel ArgoCD automatisch diese Changes aus diesem Repo auf
deinen Kubernetes-Cluster an, das heißt, es ist darauf ausgelegt, dass du nichts mehr von Hand in
deinem Kubernetes-Cluster machst, das ist der Sinn dahinter, das ist auch das, was ganz gut passt,
weil das willst du dir auch nicht, also sprich, du würdest deine Anwendung pushen, du würdest
deine Konfig-Changes wie auch immer pushen, du würdest Jenkins das ganze zusammenbauen lassen
und das Endprodukt quasi neue Anwendungs-Image in die Registry pushen und was auch immer Jenkins
noch so alles macht und die Kubernetes-Config updaten kann ja auch sein, dass zum Beispiel
in der Kubernetes-Config einfach die Image-Version neu geupdatet werden muss, also Jenkins baut
zuerst die Anwendung, baut da draußen ein Container-Image, pusht das Container-Image
in die Container-Registry, dann schnappt sich als nächstes Jenkins das Infrastruktur-Repo für
diese Anwendung, aktualisiert da drinnen, ist jetzt nur ein Beispiel, aktualisiert da drinnen die
Version des Container-Images, dann ist Jenkins fertig mit seinem Build, pusht den Output in ein
Continuous-Deployment, Continuous-Delivery, wie auch immer man es nennt, eigenes Git-Repo und
auf diesem Repo lauscht dann zum Beispiel sowas wie Argo-CD und das schnappt sich die Änderung und
wende das auf den Cluster an, das hat den Vorteil, du kannst alles immer wunderbar nachvollziehen,
aus welchem Grund was gemacht wurde und es kann auch nicht, und das ist das eigentlich das Schöne,
es kann auch nichts außer Sync kommen, weil das immer über diesen automatisierten Weg geht,
das Ganze, wenn man cool sein will, nennt man dieses Verfahren GitOps, weil sich irgendwelche
Leute ausgedacht haben, das hört sich geil an, man sollte nicht so sehr darauf gucken,
wie ich das sage oder wie Leute in YouTube-Videos das erzählen, man muss schon immer gucken,
dass das irgendwie vom jeweiligen Ablauf, weil die Tools sind ja auch in jedem Unternehmen ein
bisschen anders, dazu passt, hier ist glaube ich ein ganz, das ist ja wieder wahnsinnig kompliziertes
Bild, das ist jetzt mit Argo, Argo-CD-Bildchen, die Bilder sind jetzt alle nicht so schön ehrlich
gesagt, ja das geht eigentlich, aber da muss es doch schönere Bilder zu geben,
naja, das ist tatsächlich gar nicht, das ist tatsächlich gar nicht mal so schlecht dieses Bild
hier, das ist tatsächlich gar nicht so schlecht, also irgendein Typ entwickelt seinen Kram,
committer das in irgendein Git-Repo, in dem Fall natürlich, weil es Microsoft ist,
selbstverständlich über GitHub, also an Git laufen, hier GitHub Actions, GitHub Actions und
das ist jetzt, in dem Fall gehen die davon aus, dass anscheinend Software-Quellcode und
Infrastruktur-Kubanitis-Yaml-Definition in einem Repo drin, es könnten auch in zwei Repos sein,
wenn es größer wird, ist es sogar sinnvoll, das in zwei Repos zu machen, der committer das,
dann laufen GitHub Actions, das ist in deinem Fall der Jenkins, der Jenkins baut dann ein
Kubernetes-Manifest, baut ein neues Container-Image, pusht das Container-Image,
im Prinzip genau das, was ich gesagt habe, pusht das Container-Image in die Registry und am Ende,
das ist jetzt, an der Stelle fehlt eigentlich noch ein weiterer Punkt, weil das machst du nicht mit
GitHub Actions, an dieser Stelle sitzt dann sowas wie ArgoCD zum Beispiel dazwischen und erkennt,
ok, es gibt ein neues Kubernetes-Manifest und applied das auf deinen Cluster, du musst das
natürlich nicht machen, der Chat hat vollkommen recht, du könntest die Dinge auch mit kubectl
apply selbst raufhauen, wenn du willst, wobei ich das Verfahren mit ArgoCD wirklich sehr nice finde,
oder Flux, Flux habe ich aber noch nie verwendet, muss ich ehrlich sagen, wobei ich das Verfahren
mit ArgoCD persönlich ganz nice finde, weil du nichts mehr manuell, nichts ist jetzt übertrieben,
aber zumindest die Anwendungs-Deployments, die musst du nicht mehr von Hand machen und es ist
immer alles schön nachvollziehbar, du musst keine, du musst keine Images von Hand updaten,
keine Versionen und sonstige Geschichten. Ich habe da letztens sogar einen Stream drüber gemacht,
aber ich würde dir nicht empfehlen, den Stream anzugucken, weil der war relativ verplant,
ich habe irgendwie eineinhalb Stunden gebraucht, das Setup vom letzten Stream zum Laufen zu bekommen,
guck dir lieber was anderes an als meinen Twitch-Stream dazu, aber was ich dir zeigen kann ist,
aus dem Stream, was ich dir zeigen kann aus dem Stream ist, wie das mit ArgoCD am Ende aussieht,
weil das ist glaube ich was, was du machen willst, also guck mal, das ist das Webinterface von ArgoCD,
lass dich nicht verwirren, nichts davon muss von Hand konfiguriert werden, das ist einfach nur die
Anzeige und das sind alle Anwendungen, die ArgoCD kennt, also das hier sind zwar fertige Anwendungen,
das ist übrigens meine hier, das ist meine Testanwendung, die ich gebaut habe, aber du
kannst ja auch andere Projekte, die schon fertig sind, da reinhauen,
ja, das hier war meine Testanwendung, so und wenn ich jetzt das irgendwie auf die
Reihe kriege davor zu schwulen, kann man, dann kann man jetzt, ich weiß gar nicht,
wo ich das, wo man es hier mal schön sieht im Stream,
und jetzt einfach mal kurz vor, vielleicht sieht man es irgendwie noch,
Alter, gescheit spulen geht hier auch nicht, oder? Ich glaube hier war ich schon fertig,
was auch immer, zumindest sieht man das wunderbar zwischendurch,
wenn ich was committe in meiner Anwendung, in meinem Anwendungsrepo,
immer ich da getrieben habe, Alter, ich weiß nicht, da habe ich Prometheus Zeug jetzt nicht,
wo the fuck hier, Prometheus, keine Ahnung, wo man, keine Ahnung, wo man es jetzt gescheit
sieht im Stream, hier, hier, hier sieht man es jetzt, nee, ach shit, ach keine Ahnung,
ach gut, bevor ich jetzt ewig rumsuche, lass ich, keine Ahnung, ja, aber wir haben das
letztens im Stream zusammen gemacht, guckt ihr lieber ein paar YouTube Videos an,
als Entwickler Trigger möchte das automatische commit auf deiner Konfigurationsrepo, falls
Agoth sich über einen Kreis hat, aber dafür ist alles andere, äh, wie jetzt, hä? Du meinst,
dass dein Bildtool oder was auch immer, dein CI Tool Infrastruktur, ja Moment, deswegen sage
ich ja auch, es ist sinnvoll unterschiedliche Repos zu haben, das ist genau das, was ich ja eben
gemeint habe, es macht durchaus Sinn, nicht den Source Code der Anwendung und die Infrastruktur
Definition im gleichen Repo zu haben, weil es spamt ja unter anderem die History voll,
das ist genau das, was ich eben gemeint habe, nee, mit Terraform hat das gar nichts zu tun,
Agoth CD macht nicht CI, sondern Agoth CD macht CD, Agoth CD ist dafür da, das zu
deliveren in den Kubernetes Cluster, das was schon fertig ist, CI ist Jenkins in deinem Fall
und Agoth CD würde den Output von Jenkins im Infrastruktur Repo nehmen und den Applian auf
den Cluster. In dem Test, in dem Bastel Stream, den ich gemacht habe, da habe ich das ganze
über GitHub Actions gemacht. Ja, es ist die Frage, ob du das machst, ob das vielleicht
einen Build Server macht und ob das wirklich im gleichen Repo sein muss. Also es würde sich
doch durchaus anbieten zu sagen, okay, man hat ein Anwendungsrepo, eventuell mit den Kubernetes
Definitionen oder mit einem Helm Chart oder irgendwie sowas drin, aber gehen wir mal von
aus, du hast ein Anwendungsrepo, wo auch deine Kubernetes Configs drin sind, ja dein Customize
Zeug ist da zum Beispiel drin und du müsstest jetzt ja die Version vom Image aktualisieren.
Die erste Frage ist, warum kannst du die Version vom Image nicht in irgendeinem Build Prozess,
in irgendeinem Jenkins, GitHub Actions, was auch immer aktualisieren, weil irgendwo muss das Image
ja gebaut werden. Wenn du das Image baust, könntest du theoretisch das auch an der Stelle
aktualisieren, wenn man das will und wenn das vom Ablauf her passt, aber der Output, also mal
angenommen, das würde, mal angenommen du hättest den Jenkins und der baut das für dich zusammen,
der baut ein Image, der pusht das Image in die Registry und der schreibt in das Yammerfile die
neueste Version von einem Image rein, dann sollte der das nicht zurück committen in das
Ursprungs-Source-Repo, sondern es sollte ein eigenes Repo dafür geben, wo nur automatisch
generierte Sachen reinkommen werden, ansonsten wirst du ja verrückt in deiner Repo und wenn
du das Problem hast, dass du von Hand editieren musst, die Image-Version, dann würde es sich
vielleicht anbieten, dass du die Anwendung und die Infrastrukturkomponenten eben auch voneinander
trennst, dass du eben nicht den Scheiß hast, dass dir irgendwelche Infrastrukturänderungen
permanent deine Historie vollspammen. Ich glaube, das muss man ein bisschen dynamisch
handhaben, je nachdem wie groß das Ganze ist, wie viele Leute daran arbeiten, wie so der allgemeine
Workflow ist. Aber das kann ich verstehen, das würde mir persönlich auch extrem auf den Sack gehen,
wenn keine Ahnung, die Hälfte oder 80 Prozent der Commits irgendwelche changed value in Kubernetes
YAML-Commits sind. Da pleckst du ja bei der eigentliche Anwendung nicht mehr durch.
Und da bietet es sich ja vielleicht wirklich an, dass man sagt, hey, man splittet die
Infrastruktur-Konfiguration für die Anwendung und die Anwendung selber auf. Ja, du könntest ja zum
Beispiel ein, was weiß ich, du könntest hier Qt-App machen und du könntest Qt-App-Infra machen,
zum Beispiel. Also zwei Repos. Hier ist deine Anwendung drin, ihr könnt entwickeln,
wie ihr lustig seid. Hier hast du die Kumpanätes-Definitionen und Gedöns drin,
wo dann unter anderem vielleicht auch andere Leute dran rumbasteln als jetzt du oder rein die
Entwickler an sich. So, dann hast du irgendeinen Jenkins. Da hast du irgendeinen Jenkins. Oder
was ist noch cool hier? GitHub Actions oder was auch immer. Hast du dann dazwischen?
Und der hier, also quasi das Continuous Integration Tool, das könnte ja dann theoretisch sowohl das,
sowohl das als auch das quasi zusammenführen, indem es, sagen wir mal, App kompiliert,
Dinge macht und Image baut, Image in Registry pusht und dann, und dann das Infrastruktur-Repo
nimmt, dort, dort Images updated oder Image, Image-Version updated und der Output, der geht
dann in irgendein, ich nenne es jetzt mal, keine Ahnung hier, k8s-gitops.git oder was auch immer,
in irgendein Output oder irgendwie, keine Ahnung, generated oder sowas. So, und dieses
Repo, das Pulled-Argo-CD und applied das dann auf den Cluster. So, nice. Tolles ASCII Bildchen,
ja. Also ich glaube, man versteht halbwegs, mal allerdings, danke schön für den Zapp,
man versteht glaube ich halbwegs, halbwegs, was ich, was ich will, ja. So, das, das stimmt,
ja. Okay, danke für den Zapp. Es stimmt, GitHub Actions sind ein bisschen eklig zu debuggen,
wenn was nicht funktioniert, aber es gibt da einen kleinen Trick, wenn du es lokal ausprobieren
willst. Du kannst damit nicht alles ausprobieren, aber du kannst zum Beispiel sowas hier verwenden.
Nicees Projekt der V-Champ, der VM-Champ, ja, wir machen gleich weiter was. Du kannst,
du kannst zum Beispiel das da ausprobieren. Hat nur 36.000 Sterne, ist nicht so bekannt.
Damit kannst du GitHub Actions lokal ausführen zum Testen. Wobei, wobei du selbstverständlich
damit nicht alles machen kannst. Also du hast dann zum Beispiel, oder, weiß ich gar nicht,
ob man das nicht vielleicht irgendwie verbinden kann, aber du kannst da zum Beispiel nicht direkt
auf Repro Secrets zugreifen. Man kann allerdings irgendwie in GitHub, das habe ich aber auch noch
nicht gemacht, man kann auch, man kann auch ja irgendwie Custom Runner registrieren in GitHub.
Wobei ich das echt noch nie gemacht habe. Da könntest du quasi in den lokalen Runner registrieren
für dein Projekt. Vielleicht, vielleicht braucht man auch in den Enterprise Abo, keine Ahnung.
Ich weiß so, dass es geht, aber ich habe es noch nicht gemacht. Jo. Aber ja, es stimmt schon,
GitHub Actions sind ein bisschen eklig zu entwickeln. Gerade wenn man für jeden Test was pushen,
was committen muss, was pushen muss oder was force, überschreiben, force pushen muss,
dann irgendwie eine Minute wartet, bis die GitHub Action durchgelaufen ist, nur dass er im Elften
von Zwölf Build Steps failed mit irgendeinem Shit, wo du nicht weißt, was es bedeuten soll,
dann musst du wieder von vorne anfangen. Also ich kenne dein Problem. Ich kann das,
ich kann das, ich fühle es, wie man so schön sagt heutzutage. Nichtsdestotrotz muss ich sagen,
es ist zwar Jaml und ich habe mittlerweile echt eine Abneigung gegen Jaml entwickelt,
weil mittlerweile bist du, du bist nicht DevOps Engineer, Server Admin oder Entwickler. Du bist
eigentlich zu 90 Prozent ja teilweise nur noch Jaml Engineer. Aber nichtsdestotrotz finde ich
noch von allen Lösungen ist GitHub Actions eine schöne Kombination aus simple zu benutzen und man
kann das meiste recht easy damit machen. Du hast sehr viele vorgefertigte Actions,
die du benutzen kannst. Es gibt zum Beispiel eine komplett fertige Action, um ein neues
GitHub Release zu machen, also ein neues, also Spugi Musik. Also wenn man jetzt zum Beispiel
ein neues Release hier anlegen will auf GitHub, gibt es eine Action, die macht genau das. Da muss
man sich gar nicht mehr selbst darum kümmern, das ist auch sehr praktisch. Nee, habe ich nicht,
habe ich nicht. Ich noch nicht. Habe ich auch nicht vor. Zu viel, zu viel Kacke, JavaScript Kacke.
Du meinst, wenn du die Secret nicht direkt ins Git legen willst, oder? Ach nee,
du meinst, du meinst den lokalen Runner, wenn du deine Secrets nicht, ja, ja, das ist tatsächlich
ganz, ganz ähnlich. Also ich weiß zum Beispiel, wir auf der Arbeit, also da wo ich mein noch
Arbeitgeber, noch für quasi einen Tag, da haben wir das so. Wir haben manchmal in GitHub Actions
ein bisschen Zwecke entfremdet, ja. Wir haben zum Beispiel eine GitHub Action, die bei einem Push
neue Hostlisten generiert oder bei einem Push Sachen aus der CMDB Datenbank kopiert in was
anderes und sowas. Es ist ein bisschen zweckentfremdet, ist auch egal warum. Zumindest wichtig ist,
die haben eigentlich aus dem Internet raus keine Zugriff auf irgendwelche internen Management Tools
und wir haben einen GitHub Runner, der steht bei uns und hat darauf Zugriff. Also das ist
tatsächlich ganz nützlich, ja. Muss ich dir ehrlich sagen, habe ich persönlich noch nicht
allzu viel mitgemacht. Das, was ich bisher gesehen habe, sah relativ ähnlich aus zu GitHub Actions.
Warum nimmt man nicht gleich einen Jenkins? Naja, da musst du halt einen Jenkins installieren und
musst dich um Jenkins kümmern und im Jenkins kannst du zwar alles machen, muss sagen Jenkins
ist wahrscheinlich auch heute noch mit Abstand, wahrscheinlich wirklich mit Abstand das Flexibelste,
aber du musst dich um den Jenkins kümmern, was du bei GitHub Actions nicht machen musst und du
musst halt alles selbst, oder was heißt alles, du musst halt vieles selbst bauen, wo du bei
GitHub Actions einfach sagen kannst, ich nehme die GitHub Release Action, schreibe da drei Werte
rein und fertig ist bei einem Tag Push ein neues GitHub Release. Also du kannst alles in Jenkins
machen, also wenn du was super Flexibles brauchst, wo ganz komische Dinge gemacht werden, die vielleicht
manuelle ausgefeilte Logik erfordern, dann ist ein Jenkins nicht verkehrt. Kann man durchaus machen.
Ansonsten ist GitHub Actions einfacher finde ich in der Handhabung, es ist direkt Bestandteil vom
Repo und du musst dich nicht ums Hosting kümmern, also insofern finde ich es gar nicht verkehrt.
Lieber Jaml oder Domain Specific, das hat Vor- und Nachteile bei, das kann ich so pauschal nicht
sagen. Also Jaml hat halt den Vorteil, es ist Jaml, es ist überall gleiches Jaml, wobei natürlich die
Sachen, die man reinschreiben muss, trotzdem unterschiedlich sind. Eine Ruby on Rails Config in
Jaml sieht anders aus wie eine Kubernetes Config in Jaml, obwohl das alles Jaml ist und man muss
halt auf Einrückungen stehen, also wahrscheinlich mögen Python Entwickler deswegen Jaml so gerne,
weil die auf Einrückungen stehen, keine Ahnung, aber es ist zumindest Jaml, man kann sich dran
gewöhnen. Domain Specific Language ist auch nicht der Weisheitsletzter Schluss, guckt ihr Terraform
an. Das ist erträglich, aber ich finde Terraform nicht schön. Und Terraform ist auch auf die Idee
gekommen schon, ich weiß nicht, ob ihr das kennt, wie heißt das? CDRTF oder so? Ne, CDKTF? Also
Terraform ist nämlich auch schon auf die Idee gekommen, dass ihr Terraform HCL auch nicht so
das geilste Format auf diesem Planeten ist. Wollen wir ein Beispiel an? Moment, das ist... Nein.
Das ist nicht so hübsch. Ja, das hier sieht auch alles so übersichtlich aus, aber spätestens wenn
du Schleifen hast und Branches und so, dann wird es ein bisschen abartig. Und das ist Terraform
übrigens auch aufgefallen, dass das nicht für alle Fälle so gut ist, ihr Terraform Special Language.
Und deswegen sind sie auf die Idee gekommen, wir tun einfach mal so, als sind wir Pulumi und
machen Terraform nur mit ordentlichen Programmiersprachen. Und das habe ich noch nie ausprobiert, das ist
übrigens auch was, was ich mal auf unsere Stream-Ausprobierliste schreiben will. Setz mal an
der Stelle. Ja, das ist jetzt, das ist jetzt neu. Was heißt neu? Also so mega, mega neu ist es auch
nicht mehr. Nein, das hat nichts mit CDK, das hat nichts mit CDK, mit AWS-CDK zu tun, bitteschön.
Nicht, dass man auf die Idee kommt, dass CDK hier wäre das CDK da. Nein, nein, nein, nein, nein. Das
ist das Cloud Development Kit for Terraform. Das andere ist das AWS Cloud Development Kit,
nicht das Terraform Cloud Development Kit. Also nicht, dass ihr jetzt irgendwie durcheinander
kommt oder so. Oh fuck. Big, Big Cack W. Du hast zwei Pulumi Beispiele. Ja, schick mal. Find ich,
können wir uns das tatsächlich gerade angucken. Und das ist quasi noch mal ein Aufsatz auf Terraform,
wo man dann Terraform, so wie Pulumi, in ordentlichen Programmiersprachen schreiben kann. Da kann man
sowas hier zum Beispiel machen, falls sie irgendwie mal gescheite. Ich hätte wetten
können, auf mobile konnte ich C-Sharp anklicken an der Stelle. C-Sharp Example.
Natürlich alles nur für AWS, aber wie gesagt, die sagen ja selbst, dass es für alles gilt,
nicht nur für AWS. Also meine persönliche Empfehlung wäre, guck dir mal Pulumi an,
wenn du gerne Infrastructure as Code als Programmiersprache als Source Code hälst,
dann kannst du dir Pulumi angucken. C-Sharp Example. Ich glaube, wir haben sogar ein bisschen Pulumi
im Stream gemacht. Das sieht dann so aus, guck. Haben die alle mal gescheite Beispiele,
please? Ja, Pulumi Examples. Weiß ich jetzt, C-Sharp, da ist sie. S3 Folder, ja. Ja, toll. Wo ist
es denn? Webstack, CS, da ist es. Guck, da kannst du in normalen Programmiersprachen eben
definieren. Pulumi hat damit angefangen und Terraform hat jetzt mit CDKTF nachgezogen.
Das gibt es doch nicht so lange. Guck, ihr seht ja, so die ersten paar YouTube-Dinger
sind von Anfang 2022. Ja, wenn die sich für Terraform entschieden haben, dann ist wahrscheinlich
CDKTF-Abkürzung besser. Warum man nicht Jenkins für so was nimmt? Weil man dann unter anderem
Jenkins betreiben muss. Also das ist, ich muss das jetzt an der Stelle noch mal sagen,
das ist Fluch und Segen von so Cloud-Umgebung in einem. Oder, nee, das muss ich anders sagen,
das ist Fluch und Segen von moderner, muss ja nicht zwangsläubig Cloud sein, von modernem
Infrastruktur-Handling ist das Fluch und Segen zugleich, dass du alles auf 1000 Varianten machen
kannst. Ja, es gibt für alles 10 verschiedene Tools, die du wieder auf 20 verschiedene Art und
Weise zusammenstöpseln kannst. Mal damit, mal damit, mal lässt du den Step weg. Weil
sind die Leute dafür zuständig, mal ist es da. Hat aber auch den Vorteil, du kannst das,
wenn man genug Hirnschmalz reinsteckt, und das ist natürlich immer die Voraussetzung,
fähige Leute für hast, das recht gut individuell anpassen, dass es für die Stelle, wo man es gerade
baut, am besten passt. Aber es ist schon unglaublich komplizierter. Es gibt ja hunderte Varianten und
insgesamt 10.000 Kombinationsmöglichkeiten, wie du die ganzen Sachen machen kannst.
Ja, du hast schon recht, sollte ich wirklich machen. Das ist nicht JavaScript. Terraform
unterstützt C-Sharp. Ja, also Terraform CDK unterstützt C-Sharp, Go, Java, Python und
TypeScript. Also du kannst das in TypeScript machen. Das ist, ohne Scheiß, ich glaube exakt
das gleiche, was Pulumi auch unterstützt. Das ist auch eine sehr gute Sprachauswahl. Du hast
Python und JavaScript, somit die beliebtesten Programmiersprachen, zumindest wenn man mal nach
GitHub geht aktuell. Du hast Java und C-Sharp fürs Enterprise und Go für die Hipster Cloud
Native Leute. Fehlt eigentlich nur noch, damit auch die Rust-Taskforce glücklich ist. Aber dafür
hat Rust glaube ich noch zu wenig Verbreitung. Und ehrlich gesagt bietet sich Rust dafür auch
nicht wirklich an. Weil Rust ist eine Sprache, die hat einen ganz spezifischen Sinn, nämlich quasi
unmanaged möglichst memory safe zu sein. Und es ist keine Sprache, die jetzt gedacht ist für
super Programmiererproduktivität oder sonstiges, einzig und allein. Und das ist der Hauptgrund von
Rust, unmanaged möglichst memory safe zu sein. Das heißt es macht auch wenig Sinn,
die Konfiguration in Rust zu programmieren. Placingly, selbstverständlich alles Placingly fast.
So, jetzt aber Leute. Jetzt müssen wir mal ein bisschen was machen. Excel,
ich habe schon unsere To-Do-Liste für heute. Jetzt aber. Warum habe ich hier eigentlich das
dreimal auf? Egal, schade nix. Kurz ein Update reinhauen, gucken ob es ein Update gibt. Das ist
Arch, by the way, da gibt es immer Updates. Ah, pnp, immer wieder ein Update, alles klar.
Ok, Enter drücken geht, alles klar. Glaube der Chat, ja kann schon sein, dass da der Twitch-Chat
ein bisschen rumbackt. Like für Potman. Hä? Wir haben letztens irgendwas mit Potman gemacht,
ja. Ah, hier. Images gebaut. Ah ja, warum haben wir, by the way, wenn wir gerade schon bei so
Bildprozessen sind, kann ich noch eine Sache einwerfen, bevor wir jetzt hier anfangen mit
der eigentlichen Progress-Geschichte. Potman vs. Docker. Manchmal macht es tatsächlich Sinn,
Potman zu verwenden und zwar dann, wenn man keine Route-Rechte hat bzw. keine Route-Rechte vergeben
will oder wenn Docker mal wieder keinen Bock hat, sinnvolle Features einzubauen, wie zum Beispiel,
dass man auf lokale Registries zugreifen kann ohne HTTPS bzw. mit Self-Sign-Zertifikaten. Das
kann man in Docker machen, allerdings nur, wenn man die globale Docker-Config editiert. Potman
hat dafür schlicht und ergreifend ein, wie auch immer, ich weiß nicht, ob ich hier noch eine
History habe. Potman hat dafür einfach ein Ignore-TLS. Potman kann dafür kein Caching,
wie? Echt nicht? Wo sollen die das nicht können? Auszuschließen ist ja hier nix. Sehr schön. Gut,
auf geht's jetzt. Also, heute, ich muss mal kurz gucken. Okay, heute ist wahrscheinlich kein
Kreisel-Grind MMO-technisch, weil zwei Leute sind schon mal nicht da. Was im Endeffekt heißt,
ist schon mal gut für euch, da können wir heute auch tatsächlich im Stream was machen und ich
muss mich nicht ultra-ultra-hetzen. Vorti, da bist du ja. Moin. Hast du mal eine Nachricht gelesen und
was hältst du von noch einen Bin-User-Repo anzulegen, anstatt nur ein Minus-Git? Vielleicht ganz
sinnvoll, weil ich will wahrscheinlich sich kaum einer dort net installieren und dann
sich das kompilieren. Vielleicht wäre ein Minus-Bin-User-Repo auch nicht verkehrt. Wo,
Wim? Da, oh fuck. Da, Wim. Aber nicht lange, weil das brauchen wir jetzt nicht. Hast keine
Zeit ständig zu aktualisieren. Das stimmt, dafür sind Minus-Git-Repo natürlich sinniger.
Das können wir aber automatisch machen. Das können wir automatisch machen. Das macht dann,
ja dann ist es tatsächlich besser, dann mach ich das. Dann mach ich das, dass es sich mit
irgendwie GitHub Actions, keine Ahnung, ich hab noch nie einen Art User-Repo gemacht, aktualisiert.
Das ist auch schwierig da noch durchzublicken. Das ist auch schwierig da durchzublicken. Also
Docker ist so das Original-Linux-Container-Frontend. Man muss ja sagen, unter der Haube ist es alles
das Gleiche. Unter der Haube sind das alles Linux-Container. Also LXC, wie sich das ursprünglich
nannte. Also LX Linux-Container. Also die, wohlgemerkt die LXC Linux-Container-Funktionalität
im Kernel. Das ist benutzt, alles das Gleiche. Portman, Docker, Kubernetes sind ja im Prinzip
nur Frontends dafür, die natürlich noch viel mehr drumherum mitbringen, aber die alle unterm Strich
die Kernel-Container-Funktionalität benutzen. Docker ist so das Original, was soll man sagen,
das bekannteste, sagen wir so. Eines der ersten und eines der ersten, die es gut gemacht haben,
Command Line Tools für Linux-Container, um eben diese Linux-Kernel-Container-Funktionalität zu
konfigurieren. Irgendwann kam Red Hat, ich glaube es ist Red Hat, irgendwann kam Red Hat auf die Idee,
Docker sackt und haben ihre eigene Docker-Version gemacht und das ist Portman. Portman ist quasi
der Red Hat-Docker-Klon. Das ist sogar so weit, dass du mehr oder weniger eins zu eins die Docker
Command Line copypasten kannst und einfach nur Portman anschließend als Docker reinschreiben
und es funktioniert zu 99%. Das ist beides für für lokal und fürs Image bauen und sowas. Und
K3S ist ein Minimal-Kubernetes für etwas schwächere Hardware. Es ist unglaublich wir. Das ist auch das,
was ich als am herausforderndsten finde in diesem Kontainerisierungsumfeld und im Cloud-Umfeld ist
oftmals nicht so sehr die einzelne Sache, sondern das Gesamtsystem. Kubernetes an sich selbst ist
eigentlich relativ überschaubar. Also wenn es darum geht in Deployment zu machen und Service
einzurichten und Loadbalancer zu konfigurieren in Kubernetes, das kriegst du innerhalb von einem
Tag hin, kannst du das lernen, ist überhaupt kein Problem. Das Dumme ist nur, dass es damit ja nicht
getan ist. Das Ökosystem darum ist so riesengroß und es gibt so viele Third-Party-Sachen und
Dinge, die halt auf den Kubernetes-Funktialitäten aufsetzen, dass du zum Beispiel automatisch
Workloads skalieren kannst anhand von Prometheus-Metriken, anhand von CPU-Auslastung, anhand von X und Y und
sonst was noch. Es ist ein riesengroßes Umfeld. Deswegen ist die Kubernetes-Lernkurve ja auch so.
Du fängst an und nach dem ersten Tag denkst du dir so, geht doch eigentlich. Da hast du mal
Deployment gemacht, da hast du mal einen Service eingelegt, einen Loadbalancer angelegt, mal
automatisch anhand der CPU-Auslastung ein paar Container skaliert. Denkst dir, geht doch eigentlich,
ist doch gar nicht so wild. Und am nächsten Tag stellst du aber fest, ach du Kacke, was da alles
dranhängt, da bin ich fürs nächste halbe Jahr beschäftigt, um die erweiterten Basics überhaupt
mal zu lernen. Man muss sich mit tausend Projekten beschäftigen, die alle sonderbaren Namen haben.
Ja, also das artet wirklich aus. Nun gut, weiter geht's. Gab's da eigentlich gerade ein Colonel-Update
oder muss ich nicht neu starten? Ne, ich muss nicht neu starten. Bevor ich anfange, eine Minute
nur, dann geht's auch wirklich richtig los, Leute. Ich muss euch noch was sagen. Bald ist übertrieben,
in einem halben Jahr oder so ungefähr, werde ich 39 und ich habe mich heute zum ersten Mal in meinem
Leben, glaubt ihr mal das, aber es ist die Wahrheit, ich habe mich heute zum ersten Mal in meinem Leben
nass rasiert. Ich fände das. Zum ersten Mal nass rasiert. Bisher habe ich das immer nur,
ja tatsächlich, bisher habe ich das immer nur mit einem Rasierer gemacht, also mit einem elektrischen
Rasierer gemacht, einmal für die bisschen längere Haare, einmal um das glatt zu bekommen und mich
hat's einfach so genervt, auch schon die letzten Jahre über, bis es jetzt so weit ist, weil es
ist so unangenehm mit einem elektrischen Rasierer. Ist mir jetzt wieder aufgefallen, es hat mich so
genervt, es hat mich so genervt, dass ich schon angefangen habe, mich teilweise eine Woche nicht
zu rasieren, weil ich keinen Bock hatte drauf. Das ist doch auch blöd und ich habe mir jetzt mal
ein Set gekauft bei Amazon, also was ist das, kein Set, ich habe mir einfach ein paar Dinge gekauft
aus einem ordentlichen Rasierer, aus einem ordentlichen Rasierer, ein paar Klingen, Schaum
und was, so ein bisschen Creme zum danach drauf machen. Ich muss euch sagen Leute, das war am
Anfang, jetzt also als ich angefangen habe, war das erstmal ein bisschen Gewöhnungsbedürf,
man wusste nicht, wie fest man drauf drücken muss und in welche Richtung, genau, und macht man einmal
längs oder ein bisschen in kleinen Etappen und sowas, das hängt natürlich auch ein bisschen vom
Bart ab. Kein Rasierhobel, nee, tatsächlich einfach was ganz, was fertig ist, so ein fertiges Ding
zum reinklipsen und ich muss sagen, das ist mega nice, das ist echt, als hätte ich nicht gedacht,
also der Schaum ist sehr angenehme Konsistenz. Ich fand Rasierschaum früher immer eklig,
das lag wahrscheinlich daran, weil ich früher mal meinem Opa zugeguckt habe,
wie er sich das halbe Gesicht mit eingeschmiert hat. Der Schaum, die Konsistenz ist mega nice
und angenehm, das Rasieren, ich hab mir selbstverständlich ein YouTube-Tutorial
vorher angeguckt, obviously, warum sollte man sich das nicht angucken, der Rasierer,
das funktioniert wunderbar und danach diese Creme, nenne ich es mal, was das ist,
ja, so zum Beruhigen, die fühlt sich auch mega nice an und wenn ich jetzt so mit den
Fingern so ein bisschen über meine Backe gehe, dann fühlt sich das auch alles so weich und
geschmeidig an. Also ich bin froh, dass ich endlich jetzt angefangen habe mit Nassrasieren,
also es hat mir bis jetzt sehr gut gefallen. Gut, so. Rasiertipps mit MaxWTF, warum WTF,
was hast du gegen Rasierer-Erfahrungsberichte? Also, wo sind wir stehen geblieben? Okay,
wir gucken mal in unser To-Do rein. Chat, soll ich noch mal kurz erklären, um was es in der
Anwendung, an der wir programmieren eigentlich geht? Für alle, die beim letzten Stream nicht
dabei waren oder vielleicht zufällig heute dabei gekommen sind und es nicht so mitbekommen
haben. Es ist recht übersichtlich, kann ich sagen, also ich hab nix verpasst, der SourceCode an sich
ist auch, finde ich, ganz gut lesbar und der SourceCode ist übrigens auf GitHub, wer sich
das angucken will, es gibt hier den VMChamp auf GitHub, Moment, so, es gibt den VMChamp auf
GitHub und hier steht eigentlich auch schon in der ReadMe, was es ist, ja, es ist ein Tool,
mit dem man, Linux only, wobei gemerkt, nicht zwangsläufig Linux only, sollte man es schaffen,
libvirt unter macOS oder Windows zum Laufen zu bekommen, vielleicht in WSL oder so, geht das
auch unter Windows, wobei ich das nicht teste und das binary, das vorkomplizierte binary gibt es auch
nur für Linux aktuell. Zumindest ist es ein Tool, um schnell lokale VMs zu Testzwecken anzulegen,
also vielleicht im Entfernen ein bisschen sowas wie Vacrant, nur dass es nicht Vacrant ist, dass es
nicht oldschool Ruby ist, dass es nicht ein Ordner pro VM ist, dass es nicht VirtualBox braucht,
sondern KVM unter Linux mit libvirt, VM anlegen, einloggen, ausprobieren, VM löschen, sieht dann
folgendermaßen aus, wenn man das Ganze verwendet, ach ja, warum, vielleicht noch kurz zur Erklärung,
weshalb, naja, manchmal braucht man lokal eine VM, um Sachen auszuprobieren, wo es eben ein
Docker-Container oder ein Linux-Container, welches Flavors auch immer, einfach nicht tut. Es gibt
Anwendungszwecke, die funktionieren im Container, es gibt Sachen, die funktionieren im Container
nicht richtig. Zum Beispiel, wenn man ein Kernel-Modul laden möchte, das ist im Container keine
allzu gute Idee. Das zweite ist, was viel öfters vorkommt, man möchte zum Beispiel mal das System
neu starten können mit Unit-Files, also man braucht ein System, was mit einem richtigen Initial läuft,
was in Docker-Containern auch nicht der Fall ist. Man möchte zum Beispiel admin und möchte
ein Unit-File erstellen und dazu braucht man eben eine Kiste, wo man das Unit-File ausprobieren kann
und das kann man im Docker-Container nicht so ohne weiteres. Es gibt Virtualisierungslösungen mit
System D dabei und was auch immer, da kann man das theoretisch machen. Also es gibt Sachen, die sind
so nur schwierig oder teilweise gar nicht in einem Container möglich und manchmal hat man diesen
Anwendungsfall halt und ich habe den Anwendungsfall öfters und ich habe mir schon lange Zeit ein Tool
gewünscht, wo ich innerhalb von ein paar Sekunden, also ohne jetzt hier hinzugehen zu sagen New
Virtual Machine, bla bla bla, ISO einlegen, weiter weiter weiter, Installer durchlaufen lassen,
wo ich einfach innerhalb von ein paar Sekunden lokale Test-VMS am Start habe, wo ich was ausprobieren
kann, um sie wieder wegzuschmeißen. Also keine keine VMS, die man wirklich langfristig verwendet,
so wie hier meine Ledungs-VMS, sondern VMS erstellen und wegschmeißen. Das Ganze sieht dann
folgendermaßen aus, VM-Champ, Run und dann kann man dann angeben zum Beispiel Bloop VM und das erste,
was passiert ist, klingt nach Multipass, vielleicht, nur allein schon, dass es irgendein
Canonical-Ding ist. Multipass Virtual Ubuntu-Instanzes, ja, nee. Ja, aber das ist das, was es nur als Snap
gibt. Ja, das hört schon auf. Und außerdem ist es nur Ubuntu. Schreibst du das in Rust?
Nee. So guck, jetzt kann man zum Beispiel sagen hier VM-Champ Run Bloop. Ich zeige euch
übrigens mal im Hintergrund, dass der auch wirklich eine echte neue VM anlegt. Hier da guck, da ist
sie und wird sie gestartet und da läuft sie auch, aber das braucht man ja nicht mehr. Und ihr seht,
da hatte ich VM angelegt, hat sich danach per SSH auf die VM verbunden und jetzt kann ich auf
meiner VM rumsauen, wie ich will. Also in dem Fall ist es übrigens eine VM in der VM,
weil mein Linux läuft ja schon in der VM, aber mein Rechner ist schnell genug dafür. Und jetzt
kann ich hier in der VM rumwurschteln und mich auch wieder auslocken. Da kann ich auflisten,
welche VMs ich gerade lokal zum Test zur Verfügung habe. Wenn ich sage, ach, ich will mich da doch
mal schnell drauf verbinden, kann ich so machen. Ich habe übrigens ein Shell Auto Completion auch
am Start. Wie ihr seht, also man kann hier die Sachen in seiner Shell Auto vervollständigen lassen,
VM-Champ, SSH, Test, oder hier. Oh, das heißt auch nicht Test VM, das heißt Bloop. Deswegen ging
das nicht. Und da kann ich mich wieder drauf verbinden. Und wenn ich fertig bin, mal angenommen,
ich hätte jetzt hier noch eine zweite VM erstellt, dann könnte ich die erste VM zum Beispiel wieder
löschen. Also ach, die brauche ich jetzt doch nicht mehr, kann ich löschen. So und am Ende,
wenn ich fertig bin, also mit meinem Testen und Basteln und Ausprobieren, wofür ich die VMs
gebraucht habe, will ich ja, dass das möglichst rückstandslos wieder weg ist. So, dann sage ich
am Ende einfach VM-Champ clean. Und dann fragt er dich hier, soll ich wirklich alle, in dem Fall
gibt es nur eine, alle VMs löschen und alle Images, die ich in der Zwischenzeit runtergeladen habe.
Dann sage ich yes. Ich warte jetzt mal kurz, bis er mit der hier, mit der VM fertig ist. So,
dann sage ich yes und es ist alles wieder rückstandslos weg. Also, schnelle lokale Test VMs ohne
irgendwie großartige Experienzien und ohne irgendwie komplizierte Konfiguration, weil ja,
man kann in LibVirt und kann vor allem sau viel konfigurieren, aber 99% braucht man nicht. Ich
brauche kein GPU-Pass-Through, kein USB-Pass-Through, kein Geräte-Pass-Through, kein sonst was. Ich will
da drin Memory angeben können, Disk-Space angeben können und vielleicht die Anzahl
der CPUs angeben können und das war's. Und ich will, dass es ein gescheites Default-Setting hat,
dass wenn ich nichts angebe, wenn ich einfach nur sage Run Bloop Lul V soll die VM heißen,
dass er dann sinnvoller Defaults nimmt. Sinnvoller Defaults sind in dem Fall 256 MB RAM,
4 GB Disk und ein aktuelles Ubuntu, nicht Ubuntu, Debian Cloud Image. Das ist also immer
eine Linux-VM. Kann man die Distro spezifizieren? Ja, kann man machen. Ja, die VM-Images,
die lädt er sich einmalig runter. Wenn ich jetzt eine zweite VM mache, dann siehste,
Using Existing Image. Der lädt sich das Image einmal runter und dann kopiert er sich das für
jede VM. Es sei denn, du hast ein Clean gemacht. Wenn du ein Clean machst, dann lösche ich mal
hier ab. Dann löscht er die VMs und die Images. Ne, das mit dem automatisch löschen ist glaube
ich keine. Wobei, die Idee ist nicht schlecht. Ich schreibe es mal auf. Ja, das ist eine gute Idee,
tatsächlich. Können wir ausprobieren. Wobei, ich glaube, das Disconnect kriege ich. Kriege ich das
Disconnect überhaupt mit? Mal gucken. Ja, vielleicht gar keine schlechte Idee. LXD. Ja,
da musste er erstmal LXD installieren. Ne, LXD kann das nicht. LXD stimmt doch überhaupt nicht.
LXD kann das nicht auch alles. Versuch mal LXD in Kernel Modul zu laden. Also es gibt Anwendungsfälle,
da ist eine VM einfach nach wie vor wichtig, erforderlich. Ja, in LXD kannst du SystemD
gescheit verwenden. Halbwegs gescheit, ja das stimmt. Das waren jetzt aber auch nur die ersten
zwei Sachen, die mir eingefallen sind. Gibt bestimmt noch mehr Anwendungsfälle,
wo ein Container Image bzw. Container einfach nicht funktioniert gescheit zum Testen.
Ist das also immer eine Linux-File? Kann man das auch distro-spezifisch machen? Ja,
du kannst es auch distro-spezifisch machen. Aktuell sind, glaube ich, Ubuntu und Debian drin.
Ich werde aber noch Fedora, Oracle Linux und was hatten wir gesagt, machen wir noch rein,
standardmäßig als Support. Arch, by the way, selbstverständlich, was sonst. Arch, Linux,
Fedora, Oracle Linux und irgendeinen Red Hat. Wie du uns noch reinhauen. Was du aber jetzt
schon machen kannst ist, wenn du ein komplett eigenes Image verwenden willst, kannst du sagen,
minus, minus Local Image und da kannst du irgendwie ein x-beliebiges Image angeben,
was du lokal liegen hast. Was kannst du machen? NixOS. Gibt es von NixOS Cloud Image Builds?
Wenn nicht, dann funktioniert das nicht. Ich brauche Cloud Image. Ich brauche QCOW 2 Image
und ich brauche Cloud Init Support, sonst klappt das nicht. Distros in der Jaml konfigurieren,
ich glaube, das braucht man nicht, weil es sind die wichtigsten Sachen drin und man kann lokal
das Image überschreiben. So, nice. Wie kann ich denn Daten auf einem USB Stick gescheit
verschlüsseln und erwinden? Ha, das ist das Problem. VeraCrypt kannst du nehmen. Unter Linux
wäre das relativ easy. Alles schon built in. Unter Windows kannst du VeraCrypt nehmen. Ja,
das ist eine sehr gute Idee. Nimm VeraCrypt. VeraCrypt. Das da. Oh, meine Auge. Nimm VeraCrypt.
Und ich bin locker. VeraCrypt.
Exposed. Was nimmst du für Linux für USB Verschlüsselung? Was ich unter Linux für
USB Verschlüsselung nimm? Datei-basiert oder vollverschlüsselt? Vollverschlüsselt Lux,
wie für alles andere auch. Datei-basiert E-Crypt FS oder Enk FS. Datei-basiert ist gar nicht so
blöd. Da braucht man nämlich keinen Container bzw. kein Neuflaschen und so was. Das kann man
auf einem USB Stick normal drauf machen. Aber VeraCrypt nie verstanden. Ist das portabel oder
braucht man überall VeraCrypt? Du brauchst überall VeraCrypt, wo du das Volume öffnen willst. Also,
es gibt ja bei VeraCrypt zwei verschiedene Varianten. Vollverschlüsselung der Disk oder
ein Container, ein Container-File anlegen, in dem dann deine Dateien gespeichert werden verschlüsselt.
Aber egal ob du die Disk mounten willst oder ob du das Container-File öffnen möchtest,
du brauchst VeraCrypt installiert. Nicht unter Linux, weil Linux hat selbstverständlich
eingebauten Support für VeraCrypt Volumes. Lux in dem Fall. Oder ich weiß nicht ob es Lux,
doch ich glaube Lux ist das. Die haben mittlerweile Support für VeraCrypt Images.
Oh nee, keine Ahnung, jetzt hört es auf. Okay, weiter im Text. So, wo sind wir das letzte Mal
stehen geblieben? Und zwar, ich glaube wir sind bei diesem Feature stehen geblieben. Ach ja,
dieses Tool, das habe ich an einem Tag im Homeoffice entwickelt. Aber gut, ich bin da
eh bald weg. Und eigentlich habe ich mir gedacht, ich mache da nicht mehr großartig was dran. Aber
ich habe da wirklich Spaß noch ein bisschen dran rumzubasteln und außerdem gibt es coole
Ideen im Stream, was man noch einbauen könnte, die auch sinnvoll klingen. Ja, kurz hier weg.
Excellent. Hallo? Was hat mein Cursor für Probleme? Okay, also wir sind stehen geblieben beim Status
anzeigen. Genau, hier sind wir stehen geblieben. Also sprich, aktuell ist es so, ich muss übrigens
eine VM anlegen, ansonsten klappt das nicht richtig. Nee, nicht .net run. VMChamp, run, keckl, legen wir mal eine VM an.
Warten auf Netzwerk. PortExPost, wenn möglich. Ich weiß nicht. Wobei, das ist easy. PortExPost,
dann musst du es einfach auf eine Bridge hängen, die direkt. Nee, das würde ich. Das hängt ja
auf einer ganz normalen Netzwerk Bridge mit einem eigenen Subnetz. Da müsstest du irgendwie
routen oder so. Nee, nee, nee, nee. Ich glaube, PortEx weiß nicht. Das ist ja nichts. Das ist ja
nichts, wo man von außen was... Das ist ja kein Docker 2.0. Kali wäre als Image, da hast du recht.
Wobei es halt die Sache ist, was willst du mit dem Kali Linux ohne UI machen? Nee, ich will ja
kein... Mein Ziel ist nicht, irgendwie einen Docker für VMs zu programmieren. Bring Kali Linux,
per SSH, klar. Warum nicht? Die meisten verwenden es zwar nur mit Oberfläche. Das ist eine gute
Idee. Könnte man tatsächlich rein machen. Können wir auch gleich noch ein Tails reinhauen. Warum
nicht? Nicht Tails. Wir bauen an meinem Tool weiter, an dem hier.
So, also, wir waren jetzt, glaube ich, gerade dabei, das hier einbauen. Statusanzeige, ob die VM
läuft oder gecrashed ist, weil zurzeit kann ich sowas machen. List, PS oder LS,
glaube ich macht alles das gleiche. Kann ich das einbauen? Dann kriege ich angezeigt, es gibt diese
VM und es gibt diese IP, die für einmal diese IP. Wir machen übrigens, wir machen mal, wir machen
mal zwei VMs, dass man sieht, dass es unterschiedliche IPs sind, ja. Ja, Pogu hat noch keine IP.
Was ist ein Interop? Ja, das ist das Interop, wie heißt das auf Deutsch? Zusammenarbeit quasi
zwischen C-Sharp und C. Weil wir brauchen C-Funktionen, also Funktionen, die in der LibVirt
Library, also C-Library zur Verfügung gestellt werden. Die wollen wir aus C-Sharp verwenden.
Dementsprechend muss man ein bisschen Wrapper drumherum bauen oder Definitionen anlegen,
dass C-Sharp weiß, wie es C-Funktionen aufrufen soll. Das mit dem Grün und dem Punkt hinten dran
finde ich ex- genau, genau, genau, genau. Guck hier, sowas machen wir hier zum Beispiel. DLL-Import,
wobei DLL-Import ist ja nicht mehr the way to go. Aktuell ist es jetzt ja Library-Import,
weil Source Cone Generator und sowas. Genau, ja, Marshall Pointer to String, blub. Dann kannst,
du kannst den unter macOS mal testen, ja. So, also jetzt haben wir hier zwei VMs und aktuell zeigt
das Status beziehungsweise das List-Command nur den Namen der VM und die IP von der VM an. Das
heißt, es wäre doch ganz cool, wenn man auch noch anzeigen lassen könnte zusätzlich den Status und
RAM-Verbrauch und sowas in der Richtung von der VM. RAM-Verbrauch, CPUs zugewiesen und sowas,
falls man sich nicht mehr dran erinnern kann. Und ich glaube, da sind wir gestern stehen geblieben,
das einzubauen. Storage, da bin ich mir nicht sicher, ob man das gescheit auslesen kann.
Aber Storage, wie gesagt, das sind VMs, um sich schnell wegzuschmeißen. Die werden
bei DHCP vergeben vom Default LipWirt Interface. Okay, dann fügen wir mal in unsere Tabelle hier
unten noch so ein paar Informationen ein. Also, State, okay, wir machen das, was Sarix vorgeschlagen
hat. Das finde ich ist eine super Idee, dass wir hier einen grünen Punkt dahinter machen,
wenn der State running ist. Das finde ich ist eine gute Sache. Also, das müssen wir vielleicht
noch mal rappen, dass hier unsafe rauskommt. Das ist auf jeden Fall nicht so schön. Also,
was haben wir denn? VmID-Info, gut. Das heißt, wir müssen das hier reinschreiben. Machen wir
es mal testweise so, dass der hier den aktuellen State reinschreibt von der VM. Der State sollte
bei beiden aktuell running sein, also eine 1. Das ist natürlich eine bescheuerte Aufgabe.
Es ist natürlich eine bescheuerte Ausgabe, dass da 1 steht, aber man sieht,
das funktioniert prinzipiell. Das heißt, wir brauchen jetzt ein enum, wo drinnen steht,
dass 1 gleich running ist. Und da können wir auf der Doku-Seite nachgucken von LipWirt,
wie das auszusehen hat. Und zwar muss der Enum so aussehen. Das ist natürlich alles hier in C,
das heißt, das müssen wir jetzt übersetzen in C-Sharp. Das ist bei einem Enum glücklicherweise
nicht so kompliziert. Der sieht quasi genauso aus wie in C, nur ein bisschen die Werte anders
angegeben. Das kann alles raus. Das darf jetzt Vim praktisch, da könnte ich das einfach wiederholen,
was ich jetzt in der Zeile davor gemacht habe. Und schon haben wir den Enum, der auch in C-Sharp
funktioniert. Der heißt noch ein bisschen falsch. Den benennen wir mal so um und den benennen wir
so um. Dann heißt das richtig, dass die Namen gescheit sind des Wir-Domain. Das sparen wir uns
einfach mal und wir nennen es am Ende so NoState, Suspended, NoState, Running, Block, Pause,
Shutdown, Shutoff, Crash, Suspended, Last, was auch immer. So und diesen Enum können wir jetzt an
der Stelle verwenden, um uns da was ordentliches anzeigen zu lassen. Das bedeutet, unser State
Table? Hä? Ne, nicht wirklich. Unser State ist Info.State und das ganze casten wir zu dem Enum.
Ne, wir Domains-State. Gibt es eigentlich was schöneres anstatt das so zu casten? Gibt es
irgendwie einen Enum From oder so? House? Nicht wirklich, oder? Den Rust schon. Ja, gut. Geht auch so.
Und jetzt können wir den State ausgeben und jetzt sollte da Running stehen. Da gebe ich dir
recht. Da gebe ich dir recht. Das wäre enorm praktisch. Zwar in Ausnahmefällen, aber es wäre
enorm praktisch. Es gibt ein ganz cooles Package auf GitHub, was das ein bisschen einfacher macht.
Es gibt das hier. Das ist quasi eine Fan-Implementierung davon. Da kannst du zum
Beispiel angeben. Hier ist ein gescheites Beispiel. Da kannst du zum Beispiel angeben,
deine Methode hat einen Return-Type von UserInvalidName, NameTaken. Also entweder das,
das oder das. Also deine kleine Methode kann quasi mehrere Sachen returnen. Also nicht,
nicht mehrere Sachen returnen, unterschiedliche Typen returnen. Wobei das in der Handhabung
natürlich nicht so schön ist, wie in der Sprache integriert. Aber gebe ich dir recht,
das wäre ganz praktisch. Zumal ja sogar, und jetzt komplett, sogar C hat sowas in der Richtung.
Das ist natürlich ein bisschen primitiver. Jetzt haben wir die Sachen in F-Sharp oder so,
aber sogar C hat Union-Types. Also du kannst in C angeben, dass beispielsweise ein Value
unterschiedliche Typen haben kann. Dann brauchst du halt irgendwo einen Flag, wo drinne steht,
welcher Typ es ist und ein ewig langes Switch, aber es funktioniert. Und nicht mit wilden
Void-Pointer-Casts oder sowas in der Sprache eingebaut. Das fehlt mir in C-Sharp auch ein
bisschen. So, wenn wir das jetzt richtig gemacht haben, dann sollte jetzt da State-Running stehen
oder es steht State-Running da. Nice. Das ist auch schon mal eine schön, viel schönere Ausgabe.
Wir probieren das mal aus. Was passiert dann, wenn ich das Ganze mal pausiere? Steht dann auch
Paust da. Paust. Paust. Guck dir das mal an hier. Pogu. Jetzt Running. Paust-Champ. Ja, wunderbar.
Okay, jetzt müssen wir natürlich noch das einbauen, was eben der Sarix vorgeschlagen hat.
Selbstverständlich müssen da, es muss Emoji-Fight werden, alles. Ohne Emojis in der Ausgabe ist es
heutzutage, allerdings ist es ja, ich hab Mist kopiert. Ohne Emojis in der Ausgabe ist das schon
ziemlich, ziemlich cringe. So, das heißt wir müssen jetzt erstmal kurz einbauen. Jetzt brauchen wir
eine gute Idee, Leute, wie wir den String-Value umwandeln. Weil das Simpelste wäre sowas. Ich
habe aber schon eine bessere Idee. Das simpelste Fall wäre natürlich State gleich Running,
dann keine Ahnung, dann hier grüner Knopf und Else-If und so. Wir können das neue Switch-Feature
verwenden, Fonzie Sharp. Also was heißt neu? Nee, nicht Switch Case, doch, aber so ein Switch
Expression Statement können wir verwenden. Das blöde ist nur, ich kriege das immer aus dem Kopf
nicht richtig hin. Ich glaube, wir müssen jetzt sowas machen wie hier, nennen wir es mal Icon zum
Beispiel. Ich glaube, jetzt muss man sagen, State, Switch, On, nee. Ach fuck, ich kann mir das
immer nicht merken, wie das funktioniert, man. State, Switch. Die Sonntags ist so kacke, man,
ich kann mir die Sonntags dafür immer nicht merken. Switch, was ist jetzt falsch hier dran? No best
type was, okay, okay, das ist doch richtig, was ich gemacht habe. Case, nee. Schreiben in Else-If,
ja, das ist tatsächlich. Nee, Moment, das ist falsch, das ist falsch, was ich hier mache.
Nein, ich kann mir diesen Sonntags für den Kram immer nicht merken, man.
Anmeldung bei Azure, sorry, we can't accept prepaid cards. Hast du eine Kreditkarte generiert
dafür? Also bei Google Cloud konnte ich mich mit meiner Revolut Kreditkarte anmelden. Ich
habe extra noch für solche Sachen mir einen Revolut Account gemacht. Das ging bei Google
Cloud, hat aber 48 Stunden gedauert, weil der Support erst eingreifen musste. Ich habe aber
auch keine Single Use Kreditkarte verwendet, sondern eine normale. Dann würde ich sagen,
da wird es nicht Azure, sondern Google Cloud. Was? Hallo, ich komme aus der IT. Als Frage ist es
normal, dass Mitarbeiter immer nur fordern, sie wollen, sie brauchen gerade auch, dass Mitarbeiter
vorgehen, welche Software gehoben, was? Geholt werden muss, weil das Anwender möglichst effektiv
arbeiten wollen. Am besten mit der Software, die sie gewohnt sind, ist ja nichts Verwerfliches dran.
Also ich verstehe, dass IT Support abfuck ist, deswegen würde ich auch nie freiwillig im IT
Support arbeiten wollen. Ich glaube wirklich gut funktioniert es unterm Strich aber nur, wenn
die Client Abteilung in der IT, die sich um Client Geräte kümmert und die Anwender zusammenarbeiten.
Also sprich nicht, dass die IT sich sinnlose Vorgaben ausdenkt, nur damit sich gefälligst alle
Anwender dran halten und die Anwender rum nerven mit IT kann nix. Ich weiß, dass da die Fronten
sehr verhärtet sind oftmals, was aber auch oft, oder was heißt oft, eigentlich immer,
Management Fail ist, wenn das der Fall ist, dass dann in beide Richtungen nicht richtig
Informationen weitergegeben werden und deswegen beide Seiten aufeinander keinen Bock haben.
Wie gesagt, ich hätte auch keinen Bock im User Support zu arbeiten, das ist das Schlimmste,
was ich mir vorstellen könnte. Es macht es aber wahrscheinlich nur noch schlimmer,
wenn man die Anwender anfängt zu gängeln, weil dann fühlen sie sich ja noch bestärkt in ihrem
Eindruck, dass die IT nervig ist. Natürlich muss man manchmal Anwender auch zurück pfeifen und
sagen, guck dir mal keine privaten E-Mail Anhänge mit komischen Zips bei dir auf der Arbeit an.
Ja, aber in dem Fall wirst du wahrscheinlich selber gar nix machen können, sondern dein Chef
muss mit dem, der der dich nervt, mit dem seinem Chef muss dein Chef reden, wenn ihr das so auf
der Ebene nicht mal hinkriegt, sonst klappt das nicht. So, okay, also wie gesagt, ich krieg diese
Sündags-Tafel immer nicht richtig gebacken. Ah, so war das. Ich, nee, Moment. Ach, ohne Case.
Also, äh, quasi. Beer Domains State Running. Kann man dann so machen? Nee, gell? Dann muss
man mal quasi hier irgendwas. Ah, so. Sonst sagt er mir, not all. Wollen wir einen Default-Arm?
Nee, nee, nee, nee. Was ist das? So, also es ist rot, wenn es irgendein blöder Status ist,
mit dem ich nicht rechne. Es ist Running, dann ist es grün. Es ist, warum hab ich eigentlich
kein Auto? Was ist denn das hier? Warum hab ich... What the? Please, Rider. Na gut. Nee,
No State sollte es eigentlich eher nicht geben. Dann haben wir... Post. Warum macht der das auf
eine Zeile? Ist er irgendwie lebensmüde oder was? Post ist so. Was anderes können wir eigentlich
nicht haben? Oder meint er, das muss irgendwie alles in eine Zeile? Reformat. Nee, meint er nicht.
So, so können wir das machen. Und jetzt Icon plus Icon. Gucken, wie das jetzt ausschaut. Ach so,
wir müssen vielleicht mal... Äh, da müssen wir ein bisschen mehr Spacing dazwischen machen.
Machen wir mal kurz eins in Post-Champ-Modus. Okay, das Icon sollte an Anfang, oder? Sonst
sieht das doof aus. Vielleicht sollten wir daraus auch ein Template String machen,
dass man das ein bisschen gescheiter lesen kann. State. Icon. Und wie sieht es jetzt aus? Das
sieht doch ganz passabel aus, oder? Jetzt müsste ich nur noch mal gucken, wie ich hier ein bisschen
Space dazwischen kriege. Das ist gar nicht so einfach, weil das ist ein Terminal und kein
Winner, wo ich XY-Koordinaten malen kann. Also, hm. Wie kriege ich ihn da noch? Hab ich überhaupt
die Möglichkeit, irgendwie noch ein bisschen Space dazwischen zu kriegen? Gibt es so was wie Table?
Padding oder sowas? Nee. Nee, ich meine zwischen oben und unten. Zwischen oben und
unten Space. Gibt es da irgendwie die Möglichkeit? Columns, Border? Border Style?
Rowls? Nee, add Rowl ist blöd. Dann habe ich ja immer eine Z- Nee, das ist- Add Rowl ist doof.
Also natürlich, man könnte sowas hier machen wie add Rowl new line. Oh nee, wie ist das? New,
new, new. Ist das nicht line? Das gab es, aber das ist doch blöd. Nee, nicht Columns,
Table, add Rowl. Das ist doof. Guck mal, da hast du sowas Leeres dazwischen, das sieht kacke aus.
Äh, das sieht doof aus. No Pass. Es gibt sogar add empty Rowl, ja, aber es wird auch kacke
aussehen. Ich hätte so ein bisschen, so ein bisschen Space hätte ich mir dazwischen gewünscht,
so ein bisschen, so ein mini UTF-8-Character-Space vielleicht. Aber das ergibt natürlich keinen
Sinn. Ähm, das wird nicht gescheit funktionieren, weil es ist wie gesagt, es ist ein Terminal und
keine, keine GUI-Anwendung. Da wird das wahrscheinlich schlicht und ergreifend nicht
gescheit gehen, da mal einfach ein bisschen Padding dazwischen zu machen oder sowas. Ich
glaube wir werden mit der Ausgabe leben müssen. Ja, nee. Mono Space ist die Breite, nicht die
Höhe. Aber die Zeilenhöhe ist immer das Gleiche. Wie hast du denn die Kästen an sich gemacht? So,
guck mal. New Table, add Column, add Column und hier bei jedem Schleifendurchlauf die Werte
eingefügt, am Ende ausgegeben. Das ist als Library, die das kann, ist Specter Console.
Eine sehr nice Library für Terminal-Programme für .NET. Ich guck uns einfach mal die Hilfe
auf der Seite an. Jetzt gibt es mal Panel. Table. Ja, Moment. Ach nee, das ist die Fußnote quasi,
oder? Moment, ich habe eine Idee. Ich habe eine Idee. Fußnote anzeigen. Excellent. Wir
machen einfach alles als Fußnote rein. Wie auch immer man überhaupt. Wie man das überhaupt
dort reinbekommt. Ja, ist eine gute Frage. Add, add, add, Fußnote gibt es ja anscheinend nicht.
Geil, toll, super. Und nu? Specter Console Table. Letzte Zeile gleich Fußnote,
anscheinend ja nicht. Also ein Beispiel wäre jetzt mal ganz cool, ja. Oder vielleicht hier?
Gibt es die? Moment, Sixhead Time, Leute. Ich habe eine Idee. Viel besser. Anstatt Emojis zu
verwenden, könnten wir einfach gefärbte UTF-8 Zeichen verwenden. Fivehead. Ja, das hier ist
Green. Probieren wir das mal aus. Green. Wobei ich mir gar nicht sicher bin, ob man hier Markup...
Da, geht, geht. Da brauchen wir nur... Chat, ihr habt jetzt eine Aufgabe. Muss bis morgen zum
Daily fertig sein. Ich brauche ein gutes UTF-8 Zeichen, was nicht so fett ist wie das und was
nicht so kleines wie das. Der Chat ist am Start hier. Nice. Jawoll, perfekt. Scrum Master ist zufrieden
mit euch. Das heißt, das nächste ist da nicht Green, sondern Orange und das hier unten ist Red.
Orange gibt es nicht. Yellow. Das ist nicht zentriert. Was ist das? Ich brauche ein anderes
Zeichen. Und das ist ein Terminal. Wir haben hier kein CSS. Wir haben hier kein CSS, wo man
das anders erleiden kann oder so. Okay, UTF-8 Search. Moment, das ist das Fette, das hatten wir
schon. Oh, das funktioniert bei mir gar nicht richtig. Nee, das funktioniert nicht. UTF-8
Character Search. Ja, perfekt. Circle. Okay, was haben wir da? Circle, Circle, Circle. Alter,
wie viele Zeichen es hier gibt. Anders ist es doch nicht. Medium Wide Circle. Das ist das,
was wir gerade haben schon. Nee, das funktioniert bei mir nicht. Ich glaube,
wir müssen es jetzt nicht übertreiben, Leute.
Das sieht auch so fett aus, glaube ich. Guck mal, die Zeichen sind viel zu fett.
Die Zeichen sind zu fett. Außerdem werden die auch nicht richtig gerendert. Leute, Kommando zurück.
Kommando zurück. Wir lassen es einfach so, wie es ist. Gut ist. Passt schon. Wir lassen es einfach
so. So, State Running, State Paused. Alles andere ist Error. Gut, dann machen wir noch eine Anzeige.
Was haben wir denn noch für Informationen zur Verfügung? Memory. Memory, CPU. Ja gut,
CPU, Time, Nummer der CPUs. Okay, wir zeigen noch Memory und CPU-Nummern an. Also Memory und V-CPUs.
Also Running in grün. Ja, ich glaube, in dem Fall wäre das vielleicht besser. Wir machen
gar keine Emojis, sondern schreiben einfach wirklich Running. So, in grün hin.
Ach so. Na ja, gut. Das funktioniert nicht mal richtig. Ich glaube, das ist besser. Man
macht sich immer um so simple Sachen viel zu viele Gedanken. Was findet ihr schöner, so oder mit?
Die Emojis haben auch schon was, oder? Aber ist das IDE ein Visual Studio Code Skin? Ne,
das ist das neue UI von Rider. Fabelgeschrift ist cool. Ja, dann machen wir es so, wie der Chat das
vorgeschlagen hat. Color. Red. Color. Green. Yellow. Red. Und dann machen wir Color. Und hier
machen wir wieder zu. So, das müsste jetzt auch funktionieren. Und bam, nice. Excellent kann man
dazu nur sagen. Excellent. So, wunderbar. So, bleibt das jetzt. Okay, was brauchen wir als nächstes?
Memory brauchen wir. Also Memory, da steht dann so was wie 1024 MB oder so was drin. Und CPUs steht
dann so was wie zwei drin. Nur mal gucken, ob das gescheit aussieht. Ja, das ist okay. Das kann man
glaube ich so lassen. Also, dann müssen wir jetzt Memory berechnen. Und zwar am besten in Megabyte,
würde ich sagen. Ja, MB ist gut. Also, das heißt wir brauchen MaxMemSize ist ByteSizeInfoMaxMemorySize und
dann haben wir noch Current. Ich weiß, die C-Sharp-Style-Guide-Puristen sagen jetzt, man soll
das hier alles ausschreiben, aber ich finde man muss es nicht übertreiben. Ich meine, das ist
doch klar was gemeint ist, oder? Übrigens nicht Size, sondern Size, wenn man es jetzt so richtig
schreibt. Also, wenn man jetzt nach dem, ich weiß nicht wie offiziell der ist, aber ich sage mal,
nach dem offiziellen, ich habe schon eine Library dafür drin. Wir könnten das auch mit der
Humanizer Library machen. Also, der offizielle Style Guide sagt dazu, man soll Variablen nicht
abkürzen. Also, müsste ich dann schreiben MaximumMemorySize. Chat, was findet ihr besser?
Das oder das? Mit dem Hintergrund, dass wir im Prinzip auch CurrentMemorySize bräuchten.
Ausgeschrieben oder abgekürzt? Was würde euch persönlich besser gefallen und was
würdet ihr lieber programmieren? Lieber Kürzer ist besser, ausgeschrieben sagen manche. Also,
offiziell ist die Sharp Style Guide, sagt glaube ich relativ klar, man soll es ausschreiben.
Ich finde es Kürzer auch besser in dem Fall. Also, MaximumMemorySize. Die sind ja auch nicht
sonderlich konsistent, die Jungs hier. Da heißt es Maximum und da heißt es Memory. Alles klar. So,
das bedeutet wir brauchen da jetzt einen Text, der sich, wir machen immer einen Zeilenumbruch,
weil sonst spiele ich spätestens beim nächsten Argument nicht mehr durch, wo was hinkommt.
Wir brauchen jetzt sowas wie CurrentMemorySize slash von MaxMemorySize. Schauen wir mal.
Hä? Ach, ist das vielleicht nicht in Bytes? Hast du, äh, ich glaube nicht, dass ich das
aktiv habe. Du hast recht, es macht relativ wenig Sinn, weil dann MaxSize gleich CurrentSize ist.
Habe ich mich noch nicht weiter mit beschäftigt, macht es Sinn, das zu aktivieren? Bei so kleinen
Test-VMs wahrscheinlich nicht, oder? Der C-Latten-Sound-Style-Guide einfach voll am
Leben vorbei, ja, aber wirklich. Da stehen teilweise eh merkwürdige Dinger drin. Zum
Beispiel habe ich, das habe ich letztens in einem Video gesehen, dass man, oh fuck, mir fällt das
Beispiel nicht mal ein. Ach ja, dass man empty. Genau, ich weiß es wieder. Also hier, war String
gleich Kekkel. So. Der Style Guide sagt wohl auch, das habe ich erst letztens in einem Video
gehört, wusste ich selbst nicht, dass man, es gibt ja die Möglichkeit zum Überprüfen,
ob das ein Lehrer-String ist. Könnte ich entweder so machen oder ich könnte sagen so. Und es ist
anscheinend wirklich so, dass der offizielle C-Sharp-Style-Guide das hier vorschlägt an
Stelle von dem hier. Und dann denke ich mir auch nur, hä? Piss dich, Aldo. Was? Ups, ich hab das,
denkst du, was? Warum? Also, warum sollte man das allen Ernstes diesem da vorziehen?
String, ja, die Variante gibt es ja auch noch, stimmt. Die Variante String empty gibt es ja auch
noch. Man könnte auch sagen String ist null empty, würde natürlich auch funktionieren.
Stimmt, man müsste eigentlich müsste man tatsächlich an der Stelle so machen. Ja,
das ist richtig. Also ganz im Ernst selbst, wenn das stimmt, Chat, dass das schneller ist
als das eine, als das andere. Warum, wenn das wirklich der Fall sein sollte, ob das wirklich so
ist, würde ich bezweifeln, weil ich glaube, dass der C-Sharp-Compiler das macht, was ich mir schon
vorstelle. Und zwar, warum kann der Compiler das nicht optimieren? Stimmt, man könnte seit
neuestem kann man ja auch noch String is-dings machen oder is-not und so. Also, das ist so ein
Ding. C-Sharp ist wirklich immer noch mit Abstand meine Lieblingssprache. Die haben aber die letzten
Jahre so viele Features eingebaut, die dazu geführt haben, dass man einfache Dinge auf
doppeldeutige Arten lösen kann. Also, das ist überhaupt nicht dafür gedacht, das so zu machen.
Das kommt aus diesem Pattern-Matching-Konstrukt. Man kann es an der Stelle auch verwenden und ich
meine, ey, was soll das? Das ist doch vollkommen in Ordnung. Aber weiter, weiter im Text. Warum
ist das hier, vielleicht ist das gar nicht in Bytes, sondern ist das in Kilobyte oder so was,
vielleicht? Könnte das sein? Ist das in Kilobyte? Gucken wir mal. Ah, schon besser.
Das ergibt überhaupt
keinen Sinn. Muss ich vielleicht formatieren explizit als Megabyte?
Hä? Die haben doch im Leben nicht so wenig RAM-Verbrauch. Die haben 244 MB RAM-Verbrauch.
Hä? Moment, in welcher Unit ist das überhaupt? Jetzt bin ich, jetzt blicke ich nehmen wir durch.
Ist doch gut. Was ist denn das? Das sind Kilobyte, oder? Leute, sind das Kilobyte?
Ja, das sind Megabyte und das sind Kilobyte. PTH pro Stunde, ja.
Also, ich bin ja geneigt dazu, einfach von Hand es umzurechnen, aber warum? Ach so,
ah, ich weiß was falsch ist. Die wollen das in, ach okay, die wollen das in Bytes. Kann
man das nicht auch in? Pass? From, ah, das will ich haben. From Kilobytes will ich haben.
Das ist gut. From Kilobytes. Excellent. Highfader-Time. From Kilobyte. Das ist doch
schon mal besser. Geil, 250 MB von 250 MB. Gut, das können wir uns glaube ich sparen, oder?
Die Von-Anzeige, die ist ziemlich, ziemlich unsinnig. Der anderen Seite, sie sieht cool aus. Hat keinen
wirklich Mehrwert, aber okay, vielleicht sollten wir das wegschmeißen und einfach nur Current
Memory-Size reinhauen. Prozentuale Anteile, der ist ja 100% quasi. Okay, dann lassen wir es so,
250 MB. Sollte sich 200, oder ist es 200 MB? Maybe Byte vielleicht? Nee, dann weiß ich auch nicht.
Es sollten 256 sein, wenn ich das jetzt hier nicht... Nee, es sind sogar nur 244.
Hä? Hab ich da irgendwo einen Bug drinnen? Weil meine... Egal. Egal. Pogu ist noch eingeschaltet.
3 minus M? Das sind so 212. Alter, einhalten. Ich weiß im XML, ich bin mir aber nicht sicher,
warum das im XML drin steht, weil eigentlich sollte im XML drinstehen. Memory-Size in Bytes.
Und das steht hier nicht drinne. Hier steht Memory-Size in Kilobytes drinne. Und in Bytes,
Size in Bytes, gebe 256 MB an. Ich ignoriere den Einheitenshit einfach, da habe ich jetzt
wirklich keinen Nerv drauf. Was in der XML? Jaja, aber hier in meiner XML, die ich ursprünglich
anlege ist, vom Bytes, dass er das machen soll. Und hier, irgendwo, da, da passt er das auch als
256 MB. Und pumpt das dann da rein, als Bytes. Ich ignoriere es. Einhalten, umrechnen, stellst.
Kein Bock. Ja, im Wirtmanager hast du recht, ja. Okay, also jetzt haben wir hier eine schöne
Ausgabe. Das ist doch schon mal ganz nice. Sieht auch schon mal ganz hübsch aus, alles. Horrors
Time. Kennst du Cursor.io? Nee. Ist ein Editor mit AI? Braucht kein Account und funktioniert
mit? Funktioniert ganz gut. Aber man muss irgendeine Windows-Software installieren.
Warum braucht man einen Editor mit AI? Warum kann man nicht einfach ein
Visual Studio Code Plugin für AI verwenden? Warum braucht es dafür um alles in der Welt einen
eigenen Editor? Also, kann doch ein Plugin machen. Was auch immer. Es ist ein AI-Projekt,
also muss mindestens 10.000 GitHub-Sterne nächste Woche haben. So, Current-Memory-Size. So,
jetzt können wir noch kurz gucken, wie viele CPUs es gibt. Das ist relativ einfach. Info.
Nirrwirt-CPU. Weil Number oder N zu billig ist. Eins. Okay, das ist schön, das ist schick,
das gefällt mir. So, lassen wir das. Gut. Hätten wir das schon mal abgehakt? Das haben wir abgehakt.
Discuses. Weiß nicht, wie man das rauskriegt. Falls überhaupt. Das hätten wir abgehakt. So,
mehr Images haben wir als nächstes auf unserer To-Do-Liste. Mehr Images. Arch, by the way,
Fedora, CentOS, Oracle. Okay, ja gut, das ist easy. Ich würde sagen, wir bauen aber vorher
ein Reboot-Command ein, Leute. Reboot ist wirklich eine wichtige Sache. Wir bauen Reboot vorher ein.
Weil Images hinzufügen ist so eine Fleißarbeit. Sei es vom Image-File für Discuses oder ist das
toll, statisch. Ich könnte QEMU-Image machen tatsächlich. Ich könnte QEMU-Image-Info auf
VM-Champ. VMs Pogu gucken. Ah, es lockt. Haha, deswegen geht das nicht. Wenn die Images in einer
Config stehen würden, würde es nicht bei repo-updates gleich ein Rebuild, aber just. Ja gut,
aber wie kommt die Config dann auf den Rechner des Anwenders? Die muss ja entweder von Hand anlegen,
was schon mal doof ist, wenn du es einfach nur benutzen willst. Ja, gibt es dann halt eine neue
Miner-Version, ist doch okay. So oft ändern sich jetzt die Images da auch nicht. Einmal im halben
Jahr, wenn ich Bock habe. Also wir können nochmal ganz kurz gucken, ob wir irgendwie
Disk Usage rausbekommen können. Das gucken wir nochmal kurz. Cloud wird pro Woche gebaut. Ja,
das ist doch nicht mein Problem. Zumal ich das ja abfange, indem ich immer auf Latest gehe an
der Stelle. Also das ändert sich ja wirklich nur, wenn es ein komplettes US-Update gibt. Der zieht
sich ja schon immer das Latest-Cloud-Image, das Daily-Cloud-Image. Latest und hier Latest-Buster
von Demian. Macht er ja schon. Ja, also gucken wir mal kurz, ob es die Möglichkeit gibt,
Disk Usage rauszubekommen. Ich fürchte ja nicht. Disk, Disk, FS-Info. Ja, was ist das denn? Oh ja,
Arm-Support. Das ist tatsächlich relativ easy, Arm-Support. Arm-Support können wir vielleicht
heute noch einbauen. Da muss ich einfach das Bild-Docker-Image anpassen. Auf was baut man
das am besten? Also ich baue die Anwendung aktuell in einem CentOS 7-Docker-File. Was
ist eine gute Basis zum Bilden für Arm und Raspberry Pi zum Beispiel? Arm braucht aber
andere Images, wie da unten eine andere Config in lib wird. Da hast du recht, das ist richtig,
das ist richtig. Ja, dann ist es tatsächlich ein bisschen komplizierter Arm-Support. Auto-Update,
kein Auto-Update. Update-Hinweis höchstens. Baust du die App eigentlich als native AOT? Ja,
korrekt. Das ist auch der einzige Grund, warum ich schon .9.8 verwende. Und jetzt halte ich
mal fest, das ist richtig gut mittlerweile, weil das Image am Ende nur 12 MB groß ist. Das nimmt
sich zu einer Go-Anwendung fast schon nichts mehr. Ich meine, Go hat immer noch ein bisschen die Nase
vorne, was das angeht, natürlich. Go ist nur ein bisschen kleiner und Go ist vor allem,
ohne irgendwie große Action zu machen. Self-Contained, Standalone, lauffähig seit
Linux Colonel 2, 3, 38 oder sowas. Aber nachdem ich die Anwendung baue im Docker-Container gegen
eine 12 Jahre alte G-Libc-Version oder sowas, ist das auch in Ordnung. Die ist also auch lauffähig
auf alle Linux-Systeme der letzten 10 Jahre. Okay, also weiter geht's. Ich wollte Disk Image
gucken, ob es da irgendwas gibt. FS hier, wir domain FS Info. Das bringt mir jetzt aber nichts.
Wir domain FS Info. Ich hätte jetzt eigentlich gedacht, man kriegt vielleicht raus,
wie viel vom Image belegt ist. Kriegt man das vielleicht über was anderes raus? Also,
Host, Event, Interface, Node. Was? Node, Devs. Was wollt ihr von mir? Storage.
What? Of Storage Pools and Volumes. Da kommen wir doch der Sache schon näher.
Volume Create. Volume Info. Ja, das sieht tatsächlich schon mal ganz gut aus. Volume
Info. Natürlich, natürlich nice. Storage Volume Create. Das sieht Storage Volume Info.
Capacity Allocated Bytes. Das wollen wir haben. So die Frage, wie komme ich an das Volume?
Okay, also es gibt wir Domain. Disk hatten wir eben schon mal. Irgendwas mit...
Hier, was ist das? Domain. Domain. Block Stats. Könnte das Sinner geben? Block Stats. Get Block Info.
CPUs, was zum... Okay, jetzt müssen wir mal kurz gucken, wie man das rauskriegen könnte.
Wie viel vom File System belegt ist. Also, nachdem ich das gesehen habe, bin ich mir relativ sicher,
dass es geht. Okay, lass uns mal nachgucken. Wir Domain Get Block Info. Extract Information
About a Domain's Block Device. Das klingt doch eigentlich schon mal ganz sinnvoll, oder?
Disk Name of the Block Device. Blah, blah, blah. Wir Block Info. Ja! Capacity Links ist doch
gut. Das ist genau das, was wir brauchen. Wir Domain Get Block Info. Das war immer noch zu...
CPU Stats. Wie komme ich auf CPU Stats jetzt? Block Stats. Okay, ich habe keine Ahnung,
was Block Stats sind versus Block Info. Was ist der Unterschied dazwischen? Okay,
kein Plastenschimmer. Block Stats. Flex. Okay, das wird mich nicht interessieren. Also,
wahrscheinlich brauchen wir das tatsächlich. Wir Domain Get Block Info. Also, da brüsten die
Domain. Man braucht einen Disk. Man braucht einen Pointer. Ja. Probieren wir das doch mal aus.
Probieren wir doch mal aus, ob das funktioniert. Also, ich bin gespannt, ob das funktioniert.
Vielleicht kriegen wir ja doch noch die Größe raus von so einer Disk da drinnen. Könnte doch
sein. Also, wir müssen wieder ein bisschen Interop Rapper Code drum herum basteln. Als erster Pointer
eine Domain. Okay. Als zweites ein String mit Disk. Flex. Was für Flex? Flex. Extra Flex,
not used. Okay. Not used finde ich immer gut. Weil da kann man einfach sagen. Blocks. Flex.
Flex. You signed. Ja, gut. Und sein End. So, und dann brauchen wir hier ein String.
An der Stelle gibt es ein String. Device heißt das bei denen, glaube ich, oder? Nee, Disk. Disk.
Und als nächstes brauchen wir noch ein Vier Domain Block Info Pointer. Natürlich. Was auch
sonst. Vier Domain Block Info. Okay. Legen wir das mal als Struck hier oben an. Vier Domain. Das
ist immer ein bisschen eklig zum Copy Pasten. Hier. Vier Block Info. Was zum? Und da haben
wir dann. Kommen wir das mal weg. Vier Block Info besteht aus, was sagt die Doku dazu? Capacity,
Allocation und Physical. Alles ein unsigned Long Long. Was war das noch mal? Physical. Allocation
und Capacity. Unsigned Long Long. Das ist ein Uint 128, gell? NC Sharpen. Unsigned Long Long.
C-Programmierer hassen diesen Trick. Okay. So. Und darauf wollen die was? Ein Pointer. Habe ich
das richtig in Erinnerung, ja? Ein Pointer auf so ein komisches Struck.
Wollen die haben. Also quasi darauf. Also ein Vier Block Info Pointer Info. Meine Güte. Also
C-Interop Zeug werde ich nicht vermissen. Alles gut. So. Das müsste jetzt eigentlich funktionieren.
Schauen wir mal. Bin ich gespannt. Chat, was meint ihr? Memory Dinks Core Dump Crash? Oder
funktioniert? Was denkt ihr? Block Info. Übrigens kann ich das nicht einfach ausgeben, sondern ich
muss sagen. War Block Info gleich New Block Info? Ich hoffe mal, dass man das so aufruft. So. Jetzt
die Domain. VMI-ID. Dann das Device. Da bin ich mir noch nicht sicher, was da genau rein muss. Dann
ein Pointer auf Block Info und keine Flags. Okay. Was passiert dann, wenn ich das aufrufe mit,
hier haben wir mal Return Code. Was passiert dann, wenn ich das aufrufe, ohne ein Device zu setzen?
Erst mal gucken. Was dann? Ah. Fatal Exception. Gut. Das funktioniert so schon mal nicht. War da
nicht ein Beispiel sogar drin, wie man das... Device. Wo kommt Device her? Super. Dankeschön.
Super. Sehr schön gemacht. Device. Das Wichtigste gibt es kein Beispiel für. Logisch. Path to Block
Device. Okay. Meine Devices heißen ja alle gleich. Die heißen ja alle... Die Disks heißen ja alle
gleich. Und zwar... VDA heißen die, glaube ich. V... Kann man die drinnen nicht suchen? Hier,
Disk. VDA heißen meine ganzen Devices. Immer. Also das müsste dann eigentlich gehen. VDA.
Breage. Breage Chat. Breage. Fuck. Ihr seid schuld. Nicht genug Breage. Oh. Wieder vergessen zu
kopieren. Null. Null was? Okay Chat, aber jetzt. Jetzt brauche ich eine Runde Breage,
dass es funktioniert. Ihr seid ziemlich Breage faul heute, habe ich gesehen. Einmal Breage. Wenn
ich mindestens ein Breage im Chat, dann führe ich das jetzt nicht weiter aus. So. Welches... Alles
klar. Gut. Nice. Wir haben es. Jetzt muss es funktionieren. Jetzt kann es gar nicht funktionieren.
Block Info. Ihr seid die besten, Chat. Nice. Kann ich dazu sagen. Block Info. Capacity.
Allocation. Und was haben wir sonst noch zu bieten? Physical? Was ist denn da was von überhaupt?
Was ist denn da was von? Physical. Host. Physical Size in Bites of Container Image. Host Storage
in Bites occupied by the Image. Hä? Warum sind die unterschiedlich? Logical Size. Also uns
interessiert wahrscheinlich hauptsächlich das obere. Alles klar. Run.
Way to Denkzahl. Okay. Bites to Megabyte.
Fünf. Ist es denn überhaupt in Bites? In Bites.
Das ist... Das erscheint mir ein wenig sass. 2 Gigabyte. Das Zeug kann nicht richtig rechnen.
Ich glaube. Ich glaube Google ist damit gerade überfordert oder? Normalerweise kann das doch
2 Gigabytes. Wir können das doch einfach hier reingehen. Convert Life. Jawoll. Convert Life.
Leute die Zahl stimmt nicht. Egal was es ist. Das ist auf jeden Fall zu viel. Das ist auf jeden
Fall zu viel. Den Windows Rechner mal gucken ob der das kann. Ne da kann er nicht mal reinkopy
pasten überhaupt. Da stimmt irgendwas nicht würde ich sagen. Da ist irgendwas mit meinem
Interop Code ein bisschen falsch. Es ist auch suspekt dass das hier Null ist bei Physiql.
Es funktioniert ja offensichtlich. Das ist viel zu viel. Also ich glaube das ist einfach verkehrt.
Also mein Interop Code ist Müll. Das stimmt so nicht. Wir Domain Block. Also wir Domain Block
Info. Es ist angeblich ein Unsigned Longlong. So und wenn ich das richtig erinnere habe ist das
ein 128. Also ne ne ne. Ja 8 byte Memo. Ach Moment es ist gar kein 128. Ach deswegen stimmt das nicht.
Es ist einfach nur ein Unsigned Int. Kein 128. Ne es ist ein Unsigned Int 60. Also ein Unsigned
Long quasi dann. Ok. Alter Einheiten und Datentypen zwischen C und C Sharp da wird es nicht. Ja das
sieht schon deutlich besser aus wie das was ich erwartet habe. Das passt jetzt schon eher. Es
sind 4 Gigabyte. Das passt nämlich auch. 4 Gigabyte und davon sind so viel Allocated und so
viel Physiql. Ok Physiql juckt mich jetzt nicht wirklich. Das war's. Easy. Haben wir doch einfach
rausgekriegt. Das finde ich cool. Da kann man sogar noch in das List Command den Disk Space rein
bauen. Wenn man das haben will. Ok das heißt wir machen noch Disk Space. Mal noch Disk Space mit rein.
Mal mal einen Disk dran. Disk. Easy. Das können wir vielleicht alles dann auch mal. Das wird
langsam ein bisschen lang. Wobei. Ganz ehrlich so lange ist es gar nichts. Das ist immer noch gut
lesbar alles. Interop wirken VDA. Glücklicherweise heißen die Devices alles VDA. Anders kann man das
nicht machen. Und jetzt müssen wir hier noch bei nach Memory. Nach Memory reinschreiben wie
viel Block. Block Info Current Memory Size. Wir können uns das eigentlich die Zuweisung hier nehmen.
Das machen wir hier oben. Fragen wir das ab. Das hier heißt nicht Block Info sondern das heißt jetzt
tatsächlich State Info. Zumindest um das zu unterscheiden. So ok. Das machen wir die Abfrage
machen wir auch hier oben. Dass das alles ein bisschen besser kopiert ist. So und jetzt brauchen
war Current Disk Size und war Max Disk Size. So folgendes. Das kriegen wir hier. Ups was haben wir jetzt
gemacht. Block Info Current Disk Size ist Allocation und Block Info Capacity ist das
Gesamte. Heute kein MMO Kreise. Heute nicht. Heute fehlen ein paar Leute. Wäre es sinnvoll
wenn sowas wie Disk Size nicht Standard bei List passiert sondern nur mit zusätzlichen Argumenten
dann wäre die Tabelle nicht so. Das ist richtig. Da hast du recht. Könnte man könnte man vielleicht
machen. Das ist aber gar nicht darauf ausgelegt dass du viele VMs hast. Du hast vielleicht 4-5 VMs
und dann ist gut. Weil das ist ja kein quasi Docker Ersatz für VMs um es jetzt mal übertrieben zu
sagen. Sondern um 2-3 Test VMs lokal zu starten was auszuprobieren und sie danach wieder zu löschen.
Das ist ja keine VM Verwaltungslösung für im größeren Stil. Wo kommt eigentlich Kreisel
Grind her? Das ist was was ich mit dem Friseur mir ausgedacht habe. Der Friseur mit mir sich
ausgedacht hat. Je nachdem. Kreisel Grind ist in einem MMO repetitive Aufgaben immer wieder machen
und wenn man das im Kreis macht dann ist es Kreisel Grind. Und nachdem heute 2 Leute fehlen
können wir kein MMO Kreisel Grind machen. Aber wir können das genauso schreiben wie wir das
vorhin schreiben wollen. Current Disk Size in Megabyte von Maximum Disk Size in Megabyte.
Dann weiß man Bescheid. Und jetzt Run BAM. Leute wir machen das mal in Gigabyte nicht in Megabyte.
Sind die VMs abgeschottet? Nein kann man nicht. Nein nein Sandbox. Die hängen alle. Naja die
sind voneinander abgeschottet. VMs sind standardmäßig voneinander abgeschottet. Das sind ja keine
Container. Die eine VM kann bei der anderen VM nichts machen. Du könntest dich theoretisch über
das Netzwerk Interface von einer VM zur anderen über SSH connecten. Das könntest du machen.
Also du könntest auf der einen VM irgendwie einen Service installieren und nicht von der
anderen hin connecten über das Netzwerk. Die hängen alle an der gleichen Netzwerk Bridge.
Und es bleibt auch so, weil ich kein Netzwerkmanagement hier einbauen will.
Es geht um lokale kleine lokale Test VMs. Aber jetzt zum Virus testen wäre es nichts.
Warum? Könntest du schon benutzen. Du hast halt das Default Interface was ins Internet kann.
Das ist vielleicht keine allzu gute Idee und irgendwo auch über Umwege in der Netzwerk.
Wenn du dein Default Interface so umstellst, dass es nirgendwo hinkommt, dann kannst du
da drin auch ein Virus testen. Warum nicht? Aber Virus testen willst du doch höchstwahrscheinlich
eh in der Windows VM und da brauchst du ein GUI für. Und Windows kannst du damit eh nicht
installieren und ein GUI, dann brauchst du eh ein VM. So. Also wir machen Gigabyte.
Nicht Megabyte. Wäre nicht Coarse besser als VCPUs? Ich krieg da nur VCPUs drüber raus.
Ja, so gefällt mir das. Das ist nice. Das hat doch was. Guckt euch das. Das ist doch schön.
Das ist doch schick. Das gefällt mir. Vielleicht soll ich mal Kekl wieder endpost champen,
dass es wieder läuft. Und jetzt ist es beides running. Aber mal gucken. Ich glaube die VM,
das SSH, ich glaube das SSH überlebt also die IP. Ernsthaft? Das Ding war 30 Minuten
suspended und die IP und alles ist immer noch gültig. 30 Minuten ist ja nichts für die ACP.
Startest du die VMs standardmäßig mit 4 Gigabyte? Ne, mit 4, nicht mit 400. Äh Moment. Moment,
Moment, Moment, Moment, Moment. Ich starte die mit 4 Gigabyte, nicht mit 14, nicht mit 4 Terabyte.
Irgendwas ist da falsch. Ah, ich weiß was falsch ist. From Kilo Bytes ist falsch.
Ok, das sieht besser aus. Ja, das sieht besser aus. Also 128 MB belegt von 4 Gigabyte. Das
sieht deutlich realistischer aus als 4 Terabyte pro VM. Ja, da habt ihr Recht. Das ist Blödsinn
gewesen. Und weil jemand meint, es ist unübersichtlich, so unübersichtlich ist die Tabelle doch gar nicht.
Ist doch eigentlich ganz nice. Wollen wir mal ausprobieren, ob die Anzeige auch wirklich gut
funktioniert? Wollen wir mal die Festplatte voll machen? Ich, ich baue mal kurz, ich baue mal
kurz eine neue Version. Bild. Ja, perfekt. Wir testen mal, wir testen jetzt gleich mal,
ob das funktioniert. Wir schreiben jetzt mal die Festplatte voll und... Was?
Could not retrieve. Was? Ok, mal docker restarten. Keine Ahnung, warum. Nochmal, please. Willst du
die Anzeigen beim Erstellen auch noch in Megabyte machen, statt Maybebyte? Hab' ich schon,
hab' ich schon. Hab' ich schon gemacht, hab' ich aber noch nicht veröffentlicht. Ist bei mir schon
so... Run Command. Guck, die sind schon in MB. Maybebyte ist bescheuer, das erkennt... Das
checkt doch keiner, was damit gemeint ist. Ja, hab' ich schon, hab' ich schon angepasst.
Ok. So, jetzt sollte der Docker-Container hoffentlich ordentlich bilden. Zeigt mal her.
Ja, macht er. Docker-Stells ist am bauen. Alles gut, nice. Daniel, gehe ich recht in
der Annahme, dass du es ausprobiert hast? Weil du sagst, das ist in Maybebyte oder einfach nur vom
Stream, vom Sehen? Oder hast du das auf GitHub ausprobiert? Eigentlich nice Five-Hat-Taktik,
im Stream das Repo zu verlinken, da kriegt man Sterne die ganze Zeit. Maybebyte größer,
Megabyte. Die Leute sind an Zahlen wie 256 einfach gewöhnt. Wobei es dann eigentlich
Maybebyte sein müsste. Weil Megabyte ist ja 1000 und Maybebyte sind 1024. Ach, kein Plan. Ach,
deswegen. Deswegen ist es auch verkehrt. Deswegen habe ich auch verkehrt gerechnet. Guck mal,
ich müsste... Ok, das ist tatsächlich ein Fehler, weil meine Angaben sind in Maybebyte,
und ich schreibe Megabyte dran. Deswegen klappt das auch nicht. Also, was heißt klappt nicht,
aber deswegen sind es auch 10 MB zu wenig ungefähr. Guck mal, an der Stelle. Hier, 256 MB. Ich müsste
eigentlich 256 MIB schreiben und GIP und so Zeug. Das ist stimmt. Ok.
Fix the units. Default values in MIB. Also, ok. Neuer VMChamp-Version ist gebaut. Jetzt
probieren wir das mal aus. VMChamp-List. Ok. Watch. Oh, bisschen größer. Watch minus C 0,1. Ne,
minus N. Wie? Watch kommt nicht klar mit... Moment, Watch kann doch garantiert an C, S,
color. Das geht doch bestimmt. Wunder, wenn das nicht funktioniert. Watch minus minus color.
Selbstverständlich geht das. Minus minus color. Excellent. Gleich viel besser. So. Und jetzt
schreien wir mal. Jetzt schreien wir mal. Ups. SSH soll es ja auch sein. Und jetzt schreien wir mal
die VM voll. Was hat er? Oh, der kommt damit nicht klar, wenn man zu oft hintereinander die IP
abfragt. Da spackt er ein bisschen rum, so wie es aussieht. Warum ist color nicht standard? Das ist
eine sehr gute, berechtigte Frage. Ok. Schauen wir mal, ob das voll läuft jetzt. Also machen wir
mal irgendwie. Yes. Oh, ne. Komm. Cut Def 0 nach PV. Ist PV überhaupt drauf? Natürlich nicht.
Sudo Up Install PV. Sudo Up Update. Aber es funktioniert, Leute. Guck mal. Easy. Man hat
jetzt schon gesehen, dass es gut funktioniert. Install PV. Guck mal, guck mal. Es ist fast synchron
hochgegangen, hier die Anzeige für den Memory. Der Memory ist immer 250 MB. Das hat immer das
reservierte. Ja, du hast recht, Phipps. Das ist aber zu pfeilfert jetzt für mich. Def 0 nach PV
nach Def 0. Ne, nicht nach Def 0, nach Image Punkt bin. So, gucken wir mal, wie schnell die
Disk verläuft. Oh, Alter. No-Space-Disk ist voll. Auch wenn das hier noch nicht so wirkt,
aber das kann auch mit Pfeilsystem und so was. Allokierung soll nicht stimmen. Current Memory,
Max Memory. Das haben wir ausprobiert. Das geht nicht, weil die VM immer das Maximum Memory
reserviert. Es sei denn. Es sei denn. Guck mal, der checkt auch nicht, wenn es gelöscht wird.
Seht ihr das? Na gut, das ist klar, warum das nicht funktioniert, weil. Ja, das funktioniert nicht,
weil das Image immer gleich groß bleibt. Das Image, ich glaube nicht, dass das im Container geht.
Das ist ja. Okay, das habe ich noch nie ausprobiert, ob man in einem Container einen Trim machen kann.
Nicht im Container, in der VM. Ich glaube nicht, dass das funktioniert, aber guck mal mal.
Ne, das Image geht nicht kleiner. Das müsste man mit QEMU, würde das funktionieren, könnte man die
Datei wieder kleiner machen. Da gibt es ein Kommando für. Aber das shrinkt das Pfeil nicht
mehr auf der Platte. Dafür, jetzt mal um zu zeigen, dafür unter Proxbox, also ob das mit QCOW 2 Image
das geht, habe ich auch so meine Zweifel. Dafür seht ihr jetzt, man kann wieder das ganze Ding
füllen. Er merkt da zwar nichts mehr von, aber ist wieder voll. Ja, ja, das funktioniert. Jetzt
wird auch nichts mehr getrimmt. Na gut, da können wir tatsächlich noch mal kurz gucken,
weil irgendjemand gemeint hat Memory. Vielleicht gibt es ja tatsächlich noch ein Memory. Na gut,
Memory Toad. Ne, das ist was anderes. Memory, Memory, Soft Limit. Genau, das kannst du machen.
Das kannst du, richtig. Da musst du aber die Tools dafür installiert haben, habe ich gar nicht.
Kann man den Status von Running auf Connected stellen bei bestehender SSH-Verwendung? Leute,
ihr habt High-IQ-Ideen. Ich bin mir nicht so sicher, ob man das umsetzen kann.
Ja, ich müsste einen Test machen, ob der SSH-Port offen ist. Das würde funktionieren. Aber gute
ein bisschen was zu tun. Running, Connected State. Das Tool müsste bei Cloud Images dabei sein.
Bei Cloud Images bringt das nichts. Ich muss das auf meinem Host ausführen gegen das Image.
FsDrim. Der gute Sido. FsDrim-VA. Hab ich doch schon. Evi-Platte kann man drin und so. Ne,
das wird nicht funktionieren, weil das ist nicht der Disk Space in der VM. Der ist ja wieder
freigegeben. Ist alles gut. Es ist der Disk Space von meinem Image auf dem Host. Das kann man
aus der VM selbst nicht mal freigeben, glaube ich. Kurz gucken, ob man vielleicht tatsächlich was
mit Memory noch hat. Memory Flex. Aber ich vermute auch nicht, dass das geht. Das könnte man höchstens
machen, wenn man einen QEMU-Agent da drin hätte. Ach, so viel zum Thema QEMU-Agent. Den könnten
wir eigentlich... Leute, das probieren wir heute noch mal aus. Wir könnten doch den QEMU-Agent
über das Cloud-Init-File nachinstallieren lassen, weil wir wissen doch, worauf wir laufen. Ne,
ich glaube, da ist standardmäßig... Nicht drauf. Ne. Absearch QEMU-Agent. Wie heißt denn das Ding?
QEMU-Guest-Agent. QEMU-Guest-Agent. Den brauchen wir. Wobei, das ist doof, den zu installieren.
Weil das unterscheidet sich zwischen... Ne, das will ich nicht. Das mache ich nicht. Das
unterscheidet sich zwischen CentOS und zwischen... Das unterscheidet sich zwischen allen. Das ist
das ist ziemlicher Sack. Ne, ne, ne, ne. Das ist... Na, vielleicht könnt ihr mal ins To Do schreiben.
Naja, dann müsste man das Cloud-Image anhand der Distribution erweitern. Das ist ja durchaus
denkbar, dass man das machen kann. Hi Max, darf ich doch mal fragen, warum du die Web-Klein-Klasse
verwendest? Die Doku sagt, aber man soll HTTP-Klein nehmen. Das kann ich dir zeigen. Also das kann ich
dir verraten, warum ich das verwende. Das ist ganz einfach. Ich verwende das und ich unterdrücke
übrigens auch diese Warnung. Weil normalerweise ist das so, wenn man diese Warnung hier drin hat,
dann sagt der Achtung Web-Klein ist deprecated. Das ist egal, ob das deprecated oder obsolet ist.
Die werden das Ding nie, auch allein schon aus Grund der Rückwärtskompatibilität, nie aus dem
Framework entfernen, Leute. Nie. Das wird für immer und ewig drin bleiben. Kann man die Films auch
mit Dynamic Memory erstellen, wenn du mir sagst, wie man das theoretisch machen kann? Also ich
weiß, man kann irgendwie Balloonsupport oder sowas einstellen, aber keine Ahnung, wie man das
gescheit konfiguriert und was man da eintragen muss. Nächster Release entfernen. Nee, das werden
die nie entfernen. Das werden die nie entfernen. Web-Klein remove.net. Für Dynamic Memory braucht
man den Agent. Ja, stimmt, hast du recht. Nö. Das werden die nie entfernen. Ah ja, der Grund,
warum ich's verwende, das hab ich ja noch gar nicht gezeigt. Der Grund, warum ich's verwende,
ist folgendes. Normalerweise verwende ich auch immer HTTP-Kleint, aber in dem Fall ist es viel,
viel einfacher, einen Download-Progress zu machen, damit als mit dem HTTP-Kleint. Mit dem HTTP-Kleint
musst du einen eigenen Callback irgendwie beim Instanziieren übergeben und dich reinhängen in
die Verbindung. Also einen Progress Bar zu machen mit dem HTTP-Kleint ist viel komplizierter als mit
dem Web-Kleint. Deswegen hab ich einfach den Web-Kleint benutzt dafür. Chat-GPT regelt für
Progress Bar. Okay, wenn Chat-GPT regelt, machen wir das doch mal. Chat-OpenAI. Okay. Chat,
ich weiß, ihr versprecht, mir wegzugucken, aber... Enter your password. Okay, ich bin eingeloggt.
Da sind wir wieder. Also, ähm... Ja...
Was fragen wir denen denn jetzt? Okay. Ähm... Wie? Ich frage einfach wie. Wie ich sage. Wie?
Wie mache ich mit dem C-Sharp-HTTP-Kleint eine Progress Bar? Jetzt bin ich mal gespannt. Um
eine Progress Bar... Können sie folgende Schritt... Erstellen sie den... Ja. Weil... Chat-GPT. So weit
komm ich auch noch. Fügen sie eine Event-Hentel. Chat-GPT jebaitet uns. Jebaitet. Jebaitet. Das
lügt einfach. Es lügt. Das gibt es nicht. Das gibt es nicht. Guck, ich beweise euch,
dass es das nicht gibt. New-HTTP-Kleint-Progress. Progress. Gibt es nicht. Jebaitet. Ist einfach
Müll, was da steht. Okay, das schreiben wir jetzt auch. Das schreiben wir jetzt auch.
HTTP-Kleint hat keine... Brokers... Hat kein... Brokers-Changed-Event. Es denkt. Sie haben
Recht. Aha. Okay. Was? Button-Click? Äh.
Das funktioniert. Okay. Ja. Das würde funktionieren. Das würde funktionieren. Tatsächlich. Das ist
richtig. Ich glaube. Ich glaube, das würde funktionieren. Moment. Was ist denn... Funktioniert
das wirklich so? Was ist denn Progress? Funktioniert dieser Aufruf so? Mal gucken.
Wo kommt der File-Stream her? Den File-Stream gibt es einfach nirgendwo.
Und vor allem, was soll bitte schön Progress sein? Das ist ein Cancellation-Talk. Das ergibt
auch keinen Sinn, was Chat-GPT hier zusammenfabriziert hat. Das funktioniert auch nicht. Von der Logik her
muss man sagen. Man könnte eventuell mit einem Stream-Reader oder so was bauen für eine Progress,
irgendwie Stream-Reader, Response-Stream und dann irgendwie in der Schleife. Das funktioniert
so nicht. Das müsste man hier oben... Und hier drin könnte man jetzt quasi...
Man müsste eigentlich Bites mit Buffers lesen. Das würde dann funktionieren und dann müsste man
das in den Progress-Bar rein. Von der Logik her ist es grundsätzlich gar nicht so verkehrt.
Jetzt bräuchte man natürlich Chat-GPT 4-Abo, um es auszuprobieren. Wir fragen mal Stack-Overflow.
HTTP-Client, Progress, C-Sharp. Können wir uns einen Gist angucken?
New HTTP-Client, Progress.
Achso, das sind die Extension-Methods. Alter, ja, ist klar. Ich kann Webclient verwenden für
eine Progress-Sache oder mir so ein Geschiss dahin bauen. Ja, alles klar. Weiß klar, was ich verwende.
Ey, die sind noch nicht mal ganz dicht. Er muss halt echt sagen, es ist ein bisschen Fail. Okay,
ganz im Ernst, ich würde wahrscheinlich E-Flurl verwenden, wenn ich mehr Requests mache,
wobei ich selbst da nicht sicher bin, wie man gescheit... Es hat, glaube ich, ein Progress-Event.
Ach, keine Ahnung. Also, deswegen benutze ich den Webclient für solche Sachen tatsächlich ganz
gerne. Manchmal ist, nur weil das ein alter Teil des Frameworks ist, das nicht unbedingt schlecht.
Ja, oder eine Fake-Progress-Bar. Ja, das könnte man natürlich auch machen. Eine Fake-Progress-Bar.
Aber man muss ja sagen, meine Progress-Bar kommt tatsächlich relativ gut hin. Guckt euch das mal
an. Auch mit der Zeit, die sie ausrechnet und 100 Prozent, ist schon nicht verkehrt. Nun gut. Wo
sind wir denn jetzt stehen geblieben, Chat? Habt ihr irgendeinen... Für meinen Boomer hierhin,
habt ihr irgendwie da was? Wir sind stehen geblieben bei... Ah, Dick's Discs. Ich wollte
noch kurz gucken, ob es Memory gibt. Aber gerade dabei sind History. Letzte Stunde weg. Ich wollte
noch gucken, ob es was mit Memory gibt. Wird Memory... Memory. Memory-Parameter, Memory-Flex.
Beardomain-Memory-Stats-Struct. Das klingt ja schon mal high IQ. Was? Int. Unsigned-Long-Value.
What? Okay, das ist tatsächlich das, was wir haben wollen.
Beardomain-Memory-Stats-Nummer. Okay, das können wir nicht verwenden. Das ist ein Makro im
Header-File definiert, oder? Nee. Nee, doch nicht. Was? What? Legen die mal durch. Last ist Nummer?
Ist... Was? Wie? Also damit könnten wir das irgendwie rauskriegen. Aber da habe ich ehrlich
gesagt gerade keinen Bock drauf. Also wir müssten für das Live-Memory müssen wir abfragen. Memory
available. Und Memory... Nee. Unused. Usable. Available. Ja, das könnte man abfragen. Okay,
ich gucke mir nur mal kurz den Funktionsaufruf an, ob ich da theoretisch Bock habe, das überhaupt
Und wo übergibt man das jetzt? Ach hier. Nee. Okay, wir haben den I-Namen, aber wir haben keine
Funktion, wo man ihn benutzt. Wie waren wir deine 4090 im Idle? Wo sehe ich denn das?
Overlay-NVIDIA, kann ich gerade nicht drauf zugreifen. Task-Manager? Ich kann ja das
mittlerweile. Nice. Performance wahrscheinlich, ja? 42 Grad. Also recht kühl würde ich sagen.
Mad Eagle. Warum? Ist das irgendein Meme, was ich nicht verstehe oder? Wofür ist das in Hex-Code
angegeben? Das ist, der linke Wert ist Dezimal und der rechte ist in Hex angegeben. Ist das quasi
das linke in Dezimal, was dem in Hex entsprechen würde? Das machen die wahrscheinlich nur,
dass man, falls man das irgendwie braucht, in Hex wäre das einfacher, dass man nicht nachgucken
muss oder so. Stat-Tag. Also es gibt keine Funktion, wo ich diesen Parameter hier irgendwie
übergeben muss. Also es ist schön, dass es einen I-Namen dafür gibt, aber es gibt keine Funktion,
die das als Parameter nimmt. Das heißt, da sind wir out of luck und ich vermute auch mal,
dass das nur geht, wenn man einen Guest-Agent installiert hat. Gehe ich mal einfach von aus.
Deswegen werden wir es jetzt einfach gut sein lassen. Und das, und das nicht machen. Es hat
ja auch keinen Sinn. So ist doch vollkommen in Ordnung.
Ja, ähm, das, hoch, nein, cancel. Vielleicht soll ich jetzt das doch noch kurz fixen,
weil die größten Angaben nicht stimmen. Gehen wir mal in den Default. Und eigentlich wollen wir
hier, ist es, ist es Kibi oder Kibi? Kibi, Kibi ist es. List. So, wenn wir jetzt noch vor einmal
stellen, dann sollte das mit dem Memory eigentlich stimmen. Run, probieren wir mal kurz aus. Run,
blub. Besse. Was? Ah nee, run. Ja, das sieht schon besser aus. 262 MB. Und weil es halt nicht MB
sind, das ist halt tail. Es ist Mieb, ist es Mieb. Also es ist eigentlich nicht MB, sondern Mieb und
Gib. Wenn ich es jetzt ausprobiere, List, dann sollte die Anzeige stimmen. Zumindest bei der letzten.
Ich hasse einheitengerechten Kram. Was ist das für eine Kacke immer? Was soll das Scheiß?
Hätte man nicht einfach bei 1024 bleiben können für immer? Da gibt es keine Probleme.
Es ist eigentlich falsch, aber es ist mir egal, ob es falsch ist, was da steht. Wen juckt es?
Mein B war klein. Oh, wirklich? Ja dann, dann lag es, dann habe ich es doch richtig gemacht.
Mein B war nicht klein. Wo soll mein B klein gewesen sein? Nee, da war nichts klein. Das I war klein.
Nee, nee. Kein Plan ist da. Jetzt bin ich zu doof. Das bleibt jetzt alles. Aber
das war trotzdem der gleiche Wert. Egal, weg. Hör mal auf, ich habe jetzt keinen Bock auf Einheiten.
Du hast vom Kilo Bites und ich habe ich, habe ich das richtig. Moment, das ist ja auch richtig,
das ist auch richtig. Das hier ist ja auch in Bites, aber das Memory, das ist auch in Kilo Bites.
Moment, ist es in Kilo Bites? Alter. Mann, ist das, ist das in Kilo Bites oder ist das in?
Okay. Aber die Bites müssten stimmen und die stimmen ja auch schon nicht.
Wobei, doch, doch, es stimmt doch, es stimmt doch, es stimmt doch. Ist alles gut. Nee,
es ist alles richtig. Es ist alles korrekt. Es ist alles richtig jetzt. Ja, ja. Es ist gut,
es ist gut, es ist alles richtig, alles richtig. So, so, lib wird. Das heißt im Endeffekt,
ihr habt doch tatsächlich in eurer Doku gesagt, dass dieser Wert in Bites ist und es sind nicht
Kilo Bites, es sind Kibi Bites. Lib wird, Anzeige ist raus. Falsche Infos. Es ist nicht in Kilo Bites,
es ist in Kibi Bites. Ich weiß doch nicht mal, wie der Scheiß heißt überhaupt richtig. So geht
es ja nicht. Einfach, einfach falsche Angaben in der Doku drinne hier. Könnte man das Internet
in Nanometer umkundigen? Nee, nur Fußballfelder. So, aber jetzt ist die Einheit wenigstens richtig.
Okay Leute, das reicht für heute. Genug, ich kann mich auch nicht mehr konzentrieren.
Immer die ersten beiden Buchstaben wie immer und dann. Hä? Ach so, das heißt,
okay, das ergibt natürlich Sinn. Das ist dann ein Kibi und ein MiBi. Gibt's auch
irgendeine gute Videoempfehlung auf YouTube für eine halbe Stunde? Diese fünf Tools? Nee,
jetzt nicht. Jetzt. Das teuerste Gehäuse.
Was für ein Bademail. Ach guck mal, ich kriege meine eigenen Videos empfohlen. Das ist sehr nice.
Erst mal den Viewtime boosten. YouTube hat dir gerade das hier empfohlen. Okay, zeig mal her.
Why 80% of New Zealand is empty? 23 Minuten über Neuseeland. Okay, YouTube, du hast drei
Refresh Zeit, mir was zu empfehlen, was ich jetzt gucken will. Das ist mit zu HRIQ jetzt.
Exzellent, ich gucke jetzt einfach ein eigenes Video von mir. Das Sound ist kaputt. Oder habe
ich mich gemutet. Ich habe mich tatsächlich gemutet. Ansible in 100 Sekunden. Ansible. Und immer
ganz cool aussprechen, Leute. Wichtig. Nicht, dass ihr irgendwie auf die Idee kommt, dass nicht
Ansible oder JavaScript auszuspringen. Okay, auf geht's, Firechip. Wer auch sonst. Und Red Hat hat
ja teilweise wieder monetarisiert, as fuck. Wobei insgesamt ist es immer noch, zumindest aus meiner
Sicht, das beste Tool, in klassischer Welt Server zu konfigurieren. Puppet ist ja relativ dead,
zumindest wenn es darum geht, so der Hype-Faktor. Puppet war ein bisschen früher als Ansible und
auch eine Zeit lang recht beliebt, aber trotzdem. Und auch im Enterprise-Umfeld immer noch bei manchen
im Einsatz. Puppet ist leider ein bisschen dead die letzten Jahre über. Die haben das auch irgendwie
nicht gut gemanagt. Von dem Hersteller hast du kaum was wirklich gehört. Man muss aber sagen,
Puppet hat ein paar coole Sachen, die Ansible nicht hat. Zum Beispiel ordentlichen Noob-Run,
wo man gucken kann, was passieren würde, wenn man das ausführt. Das geht bei Ansible zwar in der
Theorie auch, aber das müssen die jeweiligen Module unterstützen und es stimmt auch nicht so
richtig. Also zu gucken, was würde ein Run ausführen, ist in Puppet tatsächlich cooler. Was
Trimoji ist dead? Wie jetzt? Wer sagt das? GitHub, Trimoji, Trimoji ist beste. Trimoji,
warum ist das dead? Trimoji for everyone. Das ist nicht dead. Also sieht nicht dead aus. Wie
kommst du darauf, dass das dead ist? Okay, das ist natürlich doof, wenn die da nichts
aktualisieren. Aber Twitter selbst hat das, oder? Die haben einfach nur keinen Bock ihr Projekt zu
aktualisieren. Okay, gucken wir uns das Video an.
Man kann auch Playbooks von Hand ausführen.
Dafür ist es tatsächlich ganz sinnig. Man könnte zwar gut den Server mit Terraform anlegen,
aber den Server an sich zu konfigurieren, wenn das ein System ist, das länger da bleiben soll,
ist tatsächlich Terraform nicht das Richtige. Also wenn es über einen Cloud-Init-Skript,
was ausgeführt werden soll, rausgeht, ist Ansible nach wie vor das Tool der Wahl.
Okay, Ansible Vault habe ich noch nie benutzt. Braucht man aber auch nicht,
wenn alle Passwörter einfach 1, 2, 3, 4, 5, 6 sind. Ich benutze nur best practice Passwörter.
Das würde ich tatsächlich lieber mit Terraform machen an der Stelle. Was ich mit Ansible machen
würde, ist die angelegte VM konfigurieren, falls die das nötig hat.
Es ist okay, das was funktioniert bei euch. Hat keinen Sinn,
irgendwas anderes einzuführen, nur um des Einführungswillens.
Guck mal, YouTube sagt, meine Videos sind richtig nice. Das macht eigentlich mein aktuelles Video.
Wie performt denn mein aktuelles Video? Leute, ich musste leider ein eigenes Thumbnail machen,
weil das Video sehr schnell entstanden ist. Sonst hätte ich auch wieder so ein cooles
Kek-Thumbnail gehabt. Die Katze auf dem Thumbnail ist tatsächlich AI-generated.
Sie hat nicht wirklich was mit dem Video zu tun, das gebe ich zu. Aber ich fand das tatsächlich
mal ein halbwegs gut gelungenes AI-generated Bild. Ich habe einige gegeben. Katze, traurige Katze
mit großen Augen sitzt vor Laptop.
So, dann kam sowas raus. OBS und YouTube hat jetzt AV1. Solange das Twitch nicht hat,
interessiert es mich nicht. Hi Max, was geht? Oh, wenig Comments, wenig Views. Vielleicht hätte
ich doch ein gescheites Thumbnail reinmachen sollen. Das war auch ein doofes Upload-Zeitpunkt,
mal ganz davon abgesehen. So, Pille wird das Thema jetzt auch nicht interessieren.
Vielleicht bin ich es ja auch. Vielleicht bin ich es ja. Wir gucken jetzt nicht mein Video an.
Kubernetes plus OpenAI? K8S Jeep? Nein, oder? Was soll denn das geben, wenn es fertig ist?
Moment, GitHub Link? Also nur weil was geht, heißt es nicht zwangsläufig, dass es eine gute Idee ist,
das zu machen. Giving Kubernetes SIE. Übrigens, wenn ich weiß, für was SIE steht, das ist coole
Abkürzung für coole Leute. Das ist Site Reliability Engineering. Also wie zuverlässig deine
Infrastruktur läuft sozusagen. Oh guck mal, der verwendet auch Gorlisa.
Dir wurde das Video nicht angezeigt. Ja, das interessiert dich nicht.
Okay, K8S GPD. Ich habe keine Ahnung, was das Wort bedeutet und was macht es?
Was macht ich? Ich habe keine Ahnung, was das macht. Okay, das analysiert mein Kubernetes
Klasse und sagt mir, was daran schrottig konfiguriert ist, oder? Weißt du, was das Gorlisa heißt?
Error Message? Ja. Soll ich das jetzt so schnell lesen, oder? Okay, wir müssen gleich Pause drücken.
Please noch kürzer. Ach so, Moment, es geht immer auf Start, wenn man Pause drückt. Okay,
das ist hängen geblieben. Es analysiert dein Kubernetes Cluster und schickt erst mal alle
schönen Infos aus deinem Kubernetes Cluster an Microsoft. Sehr gute Idee, sehr, sehr gute
Idee. Was es nicht alles gibt. PyTorch. Ja, nee, kein PyTorch. Nur weil was geht, es war klar,
dass sich irgendjemand musste es machen. Das war so klar. Irgendjemand musste es machen. Ich meine,
es gibt riesen Chat-GPT-Hype und Kubernetes ist auch voll angesagt. Dass das jemand verbindet,
wundert mich nicht. I tried 200 AI Modules. These are the best. Okay, das ist ein Video,
das führen wir uns tatsächlich jetzt noch zu Gemüt. Okay, 200 besten AI Tools.
Chat-GPT fast nicht mehr. Ich habe einen riesigen Deep-Dive gemacht und ich möchte die
größten, die krassesten und die wichtigsten zeigen. Ich möchte mit ein paar anfangen, die einfach
wunderschön sind. Einige sind in den frühen Stages, aber sie geben euch einen Blick auf was zu kommen ist.
Ich werde diese schnell umfassen, dann gehe ich in die wirklich nützlichen. NVIDIA. Sie haben
ein paar tolle AI-Produkte. Eine, die wirklich lustig ist, ist Canvas. Ihr baut einfach
basic Formen und Linien und wählt von ihrem Palett Material und kreiert
photorealistische Landscapes. Das ist schon cool, oder? Chat, das ist... Das ist tatsächlich cool,
oder? Das sind laute. Das sieht auch cursed aus. Das sieht mega cursed aus. Wenn ihr euch das
angekundigt habt, das sieht mega cursed aus mit den Augen. Was?
Und nun?
Metaverse, ja genau. Das würde dazu passen, dass sie den Shit auch noch AI generieren lassen.
Das will jetzt schon keiner verwenden. Dann hast du jedenfalls Sinnloses mit seelenloser AI generierter
Welt. Jawoll, das brauchen wir.
Google's Imagine sieht absolut verrückt aus. Die beste Option, die ich je gesehen habe, ist Kyber.
Du kannst einfach einen Prompter typen, oder eine Image und einen Prompter aufladen. Dann machen wir
diese coolen Videos. Es gibt Raum für Verbesserungen, aber du kannst wirklich coole Sachen generieren. Du kannst
sogar eine Song aufladen und deinen Stil definieren, um ein Musikvideo zu kreieren. Linkin Park hat es
benutzt, um ein Musikvideo mit 22 Millionen Views zu kreieren. Ein anderes ist Leopix, das Fotos
in Animatoren verwendet. Es verwendet Depth und macht sie in 3D aussehen. Dann kannst du...
Hey, das ist für Background-Videos, glaube ich, was richtig Cooles. Also sowas hier. Wenn du
wirklich schon ein paar Bilder hast und du willst halt, dass sich ein bisschen was bewegt, weil die
Leute sonst hibbelig werden und abschalten. ... die Angle, die Geschwindigkeit und der Animationstil.
Das sieht toll aus und ist frei zu verwenden, aber Google sieht eigentlich ganz gut aus.
Das ist eigentlich ganz nice.
This is Kevin from the future. As I was editing this video, Runway ML announced their text to be in the software and it looks incredible.
I'll be talking more about them later in the video editing section, but this is from the trailer they
just released and it looks as good or better than Google's. Now we'll dive into the more practical.
Here's one that really demonstrates how much AI is already forcing society to change. It's called
Cactus and it can help with basically all of your screen work. The AI writer can deliver essays in
minutes. It can improve content you've already written, expand sentences, fix grammar. It can format for
AP style and create citations. There's a similarly powerful section dedicated to STEM fields, another
for coding. It does have some more wholesome uses like for studying, but for those that are using this
to write their essays, there are already AI detectors out there, but they're really easy
to work around. Now it doesn't matter if you think this is right or wrong, kids are already doing this.
School is going to have to adapt to the times, not the other way around.
Correct. Da habe ich ihm recht.
Okay, aber du weißt nie, ob du stimmt, was da draufsteht.
Du kannst diese dann in Anki retten und ihr Spacerepetitionssystem verwenden, um die
Vergissenskurve zu zerspringen und die Information zu retten.
Ich empfehle dir das sehr und es ist eine freie Extension. Okay, wir machen ein paar
schreckliche Videos. Rewind ist einfach aus einem Black-Mirror-Episode. Unsere Vision ist,
Menschen perfekte Erinnerungen zu geben. Das ist nur der erste Schritt. Danke, dass du Rewind versucht hast.
Sie nennen es den Search-Engine für dein Leben. Es erinnert dich an alles, was du gesehen,
gesagt oder gehört hast. Es sagt, sie benutzen eine Mind-Boggling-Kompression,
damit es nicht so viel Platz auf deinem Computer nimmt.
Es nutzt Facial Recognition, um jede Foto von dir auf der Internet zu finden. Du musst dir
die Ergebnisse bezahlen und es sucht keine Social-Media-Sites, aber du kannst herausfinden,
ob deine Fotos woanders verwendet werden. Deep Nostalgia ist wirklich nur seltsam für mich,
aber es könnte ein paar coole Nutzungsfälle haben. Es gibt Animation für Faces in Fotos und der
Ergebnis ist unabhängig. Es ist nicht so weit in der Zukunft, wo du ein Foto uploaden kannst
und es wird in einem Video mit vollen Dreidimensionen gedreht und realistisch aussehen.
Einige der Deep Fake-Technologien sind bereits sehr gut. DID lässt dich einen Avatar wählen,
um zu visualisieren und direkt zum Chat-GPT zu sprechen. Das hört mich jetzt voll motiviert.
Okay, das ist genug von diesen. Es gibt ein paar coole Video-Edit-Tools,
RUNWAYML hat die größte Nutzung von Tools mit einigen sehr unieke Features.
Mit Text-Color-Grade kannst du einfach alles schreiben, was du willst, um deine Szene zu sehen,
und es wird die Farbe für dich verändern. Und die super-Slow-Mo-Feature ist großartig. Du kannst
irgendein Video, egal welches Frame-Rate, in eine leichte Slow-Motion machen. Es wird AI benutzen,
um die Missing-Frames zu generieren. Oh, das ist toll. Das ist natürlich richtig toll.
Es gibt auch viele Image-Tools, wie Expanding-Images, mit Text-Prompten,
Colorizing, Black-and-White-Images, Convert-Low-Resolution-Fotos-to-High-Resolution.
Boah, das ist ja cool.
Wenn man ein Foto hat oder wenn man ein Bild im falschen Seitenformat hat und man braucht es
für ein Thumbnail, dann kann man es sich einfach erweitern lassen. Ja, das ist ja mega 5-Head.
Das ist ja cool.
Okay, welcher Style soll das bitte schön sein?
Außer, dass es sehr MorkaW-mäßig aussieht.
Das kosten nur die meisten, die haben Free-Tiers. Ich habe auch nicht aufgepasst.
Das ist schon krass, oder? Was du da machen kannst, das ist schon heftig.
Wenn du in die Vergangenheit gesehen hast, wie man das in der Vergangenheit gemacht hat,
ist das ein grosser Schritt weiter. Es hat auch die Möglichkeit, Fotos zu uploaden.
Ja, das kenne ich.
Ja, nur dass ich quasi, ich habe zwar ein Office-Trad 65, aber nur dass ich es so ungern benutze.
Das ist doch so, Chat. Für mich ist das in dem Fall so nützlich für jemand anderes.
Ja, und alles die Frage, ob dann auch das Originale wieder rauskommt. Eher nicht.
Ja, das auf jeden Fall. Also es wird jetzt deutlich mehr Apps Einzug erhalten. Gut,
in Thunderbird wahrscheinlich nie direkt, weil die Thunderbird-Entwicklung lame als fuck ist,
aber man kann ja auch ihren Plugin nehmen. Sehe ich genauso, vieles ist mega überhyped und was ich
halt ein bisschen doof finde, ist, dass es so oft das gleiche ist, wenn du Video-Content dazu siehst.
Aber es sind schon manche Sachen, die sind wirklich Hammer. Ich hätte sie doch für unmöglich gehalten
oder vor dem Jahr teilweise. Ah ja, exakt das wollte ich malen. Ja, so sieht es aus. Cool. Und
das macht ja den Küchendesigner von einem der letzten Videos überflüssig. Das ist auch so
ein typisches Kokona Grundstück, oder? Einfach mal keine Tür und kein Eingang in Garten.
Okay, also wir hatten es ja heute schon wieder im Stream, das Chat-GPT sich einfach shit ausdenkt.
Ob ich damit vor Gericht gehen würde zum aktuellen Zeitpunkt? Noch nicht, aber warte mal ein paar
Jahre vielleicht schon.
Boah, das ist ja cool. Da kann man den Hintergrundsound zünden, passend zu, wie so der
Spannungsbogen, wie der im Video verläuft. Das ist cool, das ist wirklich sehr hilfreich.
Das ist toll, das ist cool. Das ist reich, das ist reich.
Da habe ich schon ein paar Videos zugesehen, das ist erstaunlich akkurat, die Stimmwiedergabe.
Das ist auch krass, das Zeug. Ich bin ja schon eine ganze Weile da auf dem Discord. Ich meine, man
braucht, man kann glaube ich mittlerweile auch den Bot nicht selbst holen, aber ich bin ja schon eine ganze
Weile auf dem Discord, guck mir da manche Creations von an. Das ist schon heftig.
Das stimmt, das wird eh passieren.
Es wird Zeit, dass da vor MChamp ein neues Logo bekommt.
Das ist toll, das ist toll.
Das ging mir jetzt zu schnell.
Luca hat irgendwie ein bisschen was von Booba.
Ja, das interessiert mich mal so gar nicht, was die Customer needen.
Das ist Müll, das habe ich ausprobiert. Das ist komplett, wer das verwendet, keine Ahnung.
Also wirklich, das war gar nichts.
Das haben wir sogar im Stream ausprobiert.
Ausrufezeichen Videos gibt es nicht. Guck mal, da ist der Titel.
Was hast du als Text eingegeben, Max, dafür für das Bild?
Also das war ein wirklich gutes Video. Und da fand ich auch sehr viele Projekte drin, also Produkte drin, wirklich beeindruckend und spannend.
Leider sind die meisten AI-Videos, die ich in der Hand habe, wirklich sehr, sehr gut.
Also das war ein wirklich gutes Video und da fand ich auch sehr viele Projekte drin, also Produkte drin, wirklich beeindruckend und spannend.
Leider sind die meisten AI-Videos so 0-15 auf YouTube, deswegen nervt mich der ganze AI-Content mittlerweile auch so.
Faster than Rust. Moment, ich denke, das geht per Definition gar nicht. Nur Rust ist blazingly fast.
Faster than Rust, debated.
Natürlich kannst du Sachen faster optimieren, logisch. Aber auch die Rust-Leute tun halt immer so.
Gut, Leute, dann würde ich sagen, jetzt gehe ich pennen. Wir sehen uns die Tage, bis denn, macht's gut, see you.
