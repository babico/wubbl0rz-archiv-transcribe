1
00:00:45,100 --> 00:00:47,100
Hallo leute ich muss noch mal kurz aufs klo

2
00:02:16,380 --> 00:02:18,380
so jetzt

3
00:02:18,420 --> 00:02:24,940
Irgendwie habe ich in dem moment wo ich auf starten vom stream geklickt habe habe ich habe ich gemerkt es drückt ein bisschen

4
00:02:25,300 --> 00:02:28,540
das war schnell noch aufs klo so jetzt bin ich ja wieder da

5
00:02:30,220 --> 00:02:32,220
50 milliarden bits pog

6
00:02:32,460 --> 00:02:42,360
erzähle euch auch gleich was wir heute machen

7
00:02:47,670 --> 00:02:49,110
ausierungs champ

8
00:02:49,110 --> 00:02:54,290
erst mal was trinken

9
00:02:54,290 --> 00:02:56,290
small access point auch am start

10
00:02:56,970 --> 00:03:00,530
Wir machen schon mal vor der stream so richtig losgegangen ist

11
00:03:00,970 --> 00:03:05,570
Ich mache schon mal meine vm an heute mal 5h serveradministration ja unter anderem

12
00:03:08,270 --> 00:03:13,270
Aber erst mal mache ich updates von meiner vm was da alles aktuell ist und ich muss mich bei google einloggen

13
00:03:14,070 --> 00:03:19,300
So dass ihr das passwort nicht mitkriegt

14
00:03:24,770 --> 00:03:30,230
So updaten wir erst mal wie warum habe ich da so viel pac-man sachen in das

15
00:03:31,090 --> 00:03:34,780
So erst mal hier alles updaten

16
00:03:35,780 --> 00:03:39,980
Gibt es neuigkeiten aus der arbeit bis nene bin ich nicht

17
00:03:40,780 --> 00:03:43,860
Ich habe ich habe noch nicht offiziell zugesagt

18
00:03:44,580 --> 00:03:51,020
So wir machen erst mal schnell package updates auf der vm dann starte ich die vm neu und dann erzähle ich euch was wir heute

19
00:03:51,020 --> 00:03:51,780
machen

20
00:03:51,780 --> 00:03:58,710
Aber ich könnte mich eigentlich cloud mäßig schon einloggen

21
00:04:01,230 --> 00:04:05,070
Anmelden das nicht anderes konto verwenden

22
00:04:07,890 --> 00:04:09,490
Skript

23
00:04:09,490 --> 00:04:11,490
clipboard ausschalten

24
00:04:12,730 --> 00:04:18,930
So tschätzke ihr müsst ihr müsst kurz weg gucken oder oder versprecht ihr nicht auf dem monitor zu gucken

25
00:04:20,010 --> 00:04:25,010
Ihr dürft das passwort und den benutzernamen dürft ihr sehen aber das passwort dürft ihr nicht sehen

26
00:04:29,920 --> 00:04:32,840
Das ist ein fake account bzw. ein fake account ein

27
00:04:33,840 --> 00:04:37,520
eine account den ich extra für 200 300 dollar

28
00:04:39,520 --> 00:04:43,720
Don't save ja das ist extra ein account den ich gemacht habe um

29
00:04:44,720 --> 00:04:52,280
200 200 oder 300 dollar gut haben mal wieder zu bekommen für google cloud weil es für bastel ein immer ganz ganz nützlich ist

30
00:04:58,290 --> 00:05:08,860
Alles klar passt ich mache euch wieder an ich mache euch wieder an

31
00:05:09,860 --> 00:05:13,620
hoffe ich habe nichts geliegt jetzt

32
00:05:14,220 --> 00:05:21,940
Ja sage ich was gleich zu wenn ich

33
00:05:23,060 --> 00:05:27,740
Css der größte scheiß euer da gebe ich dir recht css ist wirklich abfuck

34
00:05:27,900 --> 00:05:29,340
Abfuck

35
00:05:29,340 --> 00:05:35,180
Wir haben aber ziemlich schlaue leute hier im stream wenn wenn es um css geht

36
00:05:35,940 --> 00:05:39,700
Die kannst du ja konsulten

37
00:05:39,980 --> 00:05:43,820
Und die lassen sich bestimmt auch konsulten gegen bezahlung

38
00:05:45,340 --> 00:05:51,100
Wenn es was größeres ist also ich glaube bei mortges kann man auch so mal helfen

39
00:05:52,380 --> 00:05:54,380
So das haben wir überall geupdated

40
00:05:56,880 --> 00:05:59,720
Und jetzt rebooten wir die vm dann erzähle ich was was wir machen

41
00:06:02,170 --> 00:06:04,170
Also folgendes

42
00:06:04,570 --> 00:06:06,570
Ich versuche ich das mal kurz zu erklären

43
00:06:07,370 --> 00:06:09,370
Was wechselst du vielleicht die abteilung

44
00:06:10,130 --> 00:06:12,130
Ne mache ich nicht

45
00:06:22,060 --> 00:06:23,740
Das ist eine gute idee

46
00:06:23,740 --> 00:06:30,180
Ja lokale links vor allem ist also ein mindestens bsl aber richtig echte vm ist natürlich noch besser

47
00:06:31,860 --> 00:06:35,300
Also was machen wir heute und zwar habe ich was gefunden bei google

48
00:06:35,620 --> 00:06:41,500
Was ich unbedingt mal ausprobieren weil ich mir denke dass das auch bei uns auf der arbeit enorm praktisch sein könnte

49
00:06:41,860 --> 00:06:47,100
Und ich dachte mir ich probiere das einfach mal hier aus dazu braucht man aber eine google cloud leute beste

50
00:06:47,940 --> 00:06:49,940
lachs mit nudeln

51
00:06:50,460 --> 00:06:52,460
Kek wait

52
00:06:53,300 --> 00:06:55,780
Konsole google cloud

53
00:07:02,060 --> 00:07:07,300
Wie viel geld habe ich noch leute 13 euro habe ich schon ausgegeben stell dir mal vor 13 euro von

54
00:07:07,860 --> 00:07:10,100
275 credits habe ich just

55
00:07:19,900 --> 00:07:22,060
Nein, wir aktivieren nicht volle count

56
00:07:24,990 --> 00:07:29,670
Ich versuche seit fünf irgendwie zu schaffen dass ein dip sich fix auf die höhe des verfügbaren horizontalen

57
00:07:30,910 --> 00:07:35,670
Okay, das erste das erste weiß ich wie es geht das ist das ist

58
00:07:38,430 --> 00:07:44,030
Juhu with oder sogar es gibt vh oder hv oder vh

59
00:07:44,350 --> 00:07:46,350
Nee

60
00:07:47,870 --> 00:07:53,110
View with oder irgendwie so gibt es auch sobald in css ich glaube es ist es ist vw

61
00:07:58,980 --> 00:08:02,860
Irgendwie so so also das das ist das einzige was ich kann

62
00:08:03,700 --> 00:08:06,940
Es scrollbar da hört es bei mir schon auf

63
00:08:07,820 --> 00:08:17,610
Da hört es bei mir auf css ist komplett

64
00:08:18,490 --> 00:08:22,170
Da bin ich zu low IQ vielleicht fehlen wir einfach die prime subs dafür

65
00:08:24,220 --> 00:08:26,740
Kannst du knicken css kriege ich auch immer nicht gebacken

66
00:08:27,820 --> 00:08:31,860
Nee nee das wird er sicherlich schon ausprobiert haben ganz so einfach ist es nicht

67
00:08:33,340 --> 00:08:39,030
In dem fall was sagt chat gpt wahrscheinlich irgendeinen schrott

68
00:08:56,480 --> 00:09:01,750
Ja genau aber ich wollte euch erzählen was wir machen und zwar

69
00:09:02,390 --> 00:09:07,750
Habe ich folgendes vor ich habe folgende sache gefolgt ich denke ich zeige euch das mal kurz ich zeige ich zeige euch mal kurz

70
00:09:08,750 --> 00:09:15,510
Wir sind jetzt hier bei google in der cloud also ich habe noch ungefähr 250 euro übrig das sollte für heute reichen

71
00:09:19,790 --> 00:09:21,950
Und ich glaube meine meine meine trial geht

72
00:09:24,920 --> 00:09:29,160
Bis 21 oktober kann ich die kohle ausgeben also das passt schon

73
00:09:29,920 --> 00:09:35,280
Also ich zeige euch mal was also wenn man hier auf sql geht da kann man eine datenbank in der cloud anlegen

74
00:09:35,800 --> 00:09:39,280
Jet kurze kurze umfrage wie sieht es mit euch aus

75
00:09:39,360 --> 00:09:41,280
So erfahrt

76
00:09:41,280 --> 00:09:46,720
erfahrung cloud platform ich meine ich kann da auch vielleicht noch ein paar sachen dazu sagen und kann ich jetzt vielleicht mal eine viertelstunde

77
00:09:47,080 --> 00:09:53,400
bisschen ein bisschen länger ausholen was wir eigentlich machen aber ich glaube es ist was mega nice ist was vielen auch was bringen könnte tatsächlich

78
00:09:55,200 --> 00:09:59,650
Ich war mal eine umfrage ich mache mal eine umfrage

79
00:10:01,170 --> 00:10:03,170
Erfahrung mit cloud anbietern

80
00:10:04,010 --> 00:10:10,610
Übrigens leute ihr wisst ja dass man es nicht mehr cloud anbieter oder cloud provider nennt wie nennen die coolen leute das

81
00:10:11,530 --> 00:10:14,690
Wer wer wer weiß es wer ist high iq

82
00:10:23,040 --> 00:10:24,760
serverless

83
00:10:24,760 --> 00:10:43,680
hyperscaler korrekt also ich war ich war mal eine umfrage

84
00:10:45,320 --> 00:10:50,960
Erfahrung mit cloud anbietern und falls jemand erfahrung hat mit mehr als einem cloud anbieter

85
00:10:51,280 --> 00:10:54,480
Dann nimmt er den cloud anbieter wo er sich am besten mit auskennt ok

86
00:10:56,520 --> 00:11:01,200
Interessiert mich einfach mal oder oder wenn er sagt gar keine ahnung dann nix

87
00:11:06,050 --> 00:11:10,370
Also das ist gcp das ist aws das ist asia

88
00:11:10,850 --> 00:11:16,490
Nee hetzer erzähle ich mal in dem fall nicht hetzer ist ja kein wirklicher cloud anbieter auch wenn sie hetzer cloud heißen kannst bei

89
00:11:16,490 --> 00:11:18,490
hetzer vms professionieren

90
00:11:18,770 --> 00:11:20,770
und load balancer das war's

91
00:11:21,210 --> 00:11:29,530
Die haben keine managed startenbank und sonstige geschichten wobei das das hoffe ich ja dass sie das noch machen das wäre mega nice

92
00:11:31,720 --> 00:11:38,880
Hetzer ist besser als die drei wie ich finde wenn es rein um vms professionieren geht wenn es wenn es kurz und knackig gehen

93
00:11:39,200 --> 00:11:41,200
Das ist hetzer top und günstig

94
00:11:50,290 --> 00:11:52,290
Das ist eigentlich auch der riesen vorteil bei hetzer

95
00:11:52,930 --> 00:11:59,130
Wenn man sich anguckt wie lange so ein kubernetes cluster bei google professioniert da sitzt erst mal 20 minuten müssen wir gleich auch noch machen

96
00:12:01,540 --> 00:12:03,540
ok

97
00:12:03,580 --> 00:12:06,780
Also also ich würde sagen die meisten leute haben erfahrung mit microsoft asia

98
00:12:07,380 --> 00:12:09,380
gefolgt von aws und dann google

99
00:12:09,980 --> 00:12:11,980
Was ich witzig finde das ist genau

100
00:12:13,060 --> 00:12:15,560
entgegengesetzt

101
00:12:15,560 --> 00:12:21,680
Naja nicht ganz ich glaube ich glaube von der verbreitung her ist aws das weit verbreitetste

102
00:12:22,480 --> 00:12:25,000
sogar das most loved laut stackoverflow

103
00:12:26,680 --> 00:12:33,580
Und ich glaube danach kommt asia und dann kommt google irgendwie so oder google und asia um den vergleich auf aber aws ist meistens meistens ganz ganz vorne

104
00:12:34,880 --> 00:12:36,880
Leute ich fühle mich irgendwie so ein bisschen

105
00:12:37,160 --> 00:12:43,360
Also irgendwie nicht so hundertprozentig fit ich muss mal kurz eine runde durch den durch durch das zimmer springen oder so dass ich dass ich

106
00:12:43,360 --> 00:12:50,920
Bisschen aufwache ich war jetzt ungefähr so eine halbe stunde habe ich gerade im bett gelegen weil die katze der meinung war sie will

107
00:12:50,920 --> 00:12:54,400
sich da jetzt hinlegen ob ich nicht mitkommen kann die klotz mich dann viertelstunde an

108
00:12:54,560 --> 00:12:58,600
Seid auf katz ich lege mich jetzt mal kurz aufs bett kannst du nebenlegen bis die katze gestreichelt

109
00:12:59,000 --> 00:13:01,000
Da bin ich so hundertprozentig fit

110
00:13:01,360 --> 00:13:03,360
Okay, nix hat gewonnen

111
00:13:03,400 --> 00:13:06,680
Ich muss mal kurz ich jump mal kurz eine runde durchs zimmer dass ich wach bin

112
00:13:27,040 --> 00:13:34,440
Nicht ganz fit war da hat man einfach mal kurz zwei drei minuten voll drauf rum geklopft und dann war alles dann war man passend

113
00:13:36,080 --> 00:13:38,080
Passende puls und herzfrequenz gehabt

114
00:13:58,220 --> 00:13:59,660
Okay

115
00:13:59,660 --> 00:14:05,220
Hoffentlich bin ich jetzt fit nee ich brauche nicht wieder einen boxsack wie in der alten wohnung das war mega praktisch

116
00:14:08,940 --> 00:14:10,940
facecam wäre jetzt witz kann ich mir vorstellen

117
00:14:16,660 --> 00:14:19,580
Hier kann ich aber nur einen boxsack nehmen den man hinstellen kann

118
00:14:19,580 --> 00:14:24,220
Weil hier ist die decke also in der alten wohnung hatte ich auch einen den man hinstellen kann aber

119
00:14:25,260 --> 00:14:29,750
Hier kann es auf jeden fall schon mal nix an die decke machen

120
00:14:30,550 --> 00:14:36,040
So, okay, bisschen durchs zimmer gehüpft

121
00:14:37,120 --> 00:14:42,920
Also ich habe die umfrage jetzt nicht beim kopf, aber ich glaube es hat nix hat gewonnen

122
00:14:44,080 --> 00:14:46,080
gefolgt von

123
00:14:46,600 --> 00:14:51,280
Microsoft und dann abs und dann google also was wir heute machen ist folgendes

124
00:14:52,120 --> 00:14:54,120
aufblasbar was ist

125
00:14:56,790 --> 00:15:00,420
Aufblasbar was ist

126
00:15:01,300 --> 00:15:06,780
Nee die dinger sind kacke das muss schon ein bisschen was drin ist das sind auf aufblasbare boxsäcke sind nix

127
00:15:07,460 --> 00:15:12,140
Das braucht das muss braucht schon ein bisschen widerstand und gewicht sonst kannst du da überhaupt nicht richtig richtig reinhauen

128
00:15:24,980 --> 00:15:31,700
Gut also gehen wir mal hier wieder rüber und zwar ich erzähle ich erzähle mal so ganz ganz grob was wo wir hier

129
00:15:31,700 --> 00:15:35,660
Eingeloggt sind das ist die klaugen die klätte klaugel leute

130
00:15:36,660 --> 00:15:38,660
Die cloud plattform von google

131
00:15:39,020 --> 00:15:46,140
Das was oftmals auch so als gcp läuft google cloud plattform und das steht wenn man sich einloggt sieht das so aus cloud

132
00:15:46,140 --> 00:15:53,080
Geh genau wenn man sich einloggt sieht das so aus das ist aktuell ein trial account kann sich übrigens jeder aufmachen der bock hat

133
00:15:53,620 --> 00:16:01,020
Wenn ihr euch dort anmeldet mit einem neuen account kriegt ihr 300 dollar also 275 euro gratisguthaben für

134
00:16:01,460 --> 00:16:03,460
drei monate

135
00:16:03,460 --> 00:16:11,140
Und das beste daran ist dass ihr auch nicht aufpassen müsst irgendeinen miss zu bauen weil solange hier nicht drauf klickt

136
00:16:11,580 --> 00:16:18,180
Auf activate voll account könnt ihr nie über diese 300 dollar kommen das heißt selbst wenn ihr jetzt

137
00:16:18,500 --> 00:16:22,540
den mega kubernetes cluster aufbaut mit sonst was für notes

138
00:16:23,980 --> 00:16:25,820
Dann klappt das nicht

139
00:16:25,820 --> 00:16:27,820
Ihr seid ein bisschen beschränkt

140
00:16:28,020 --> 00:16:39,340
Ihr seid ein bisschen eingeschränkt in der trial phase was ssd speicher angeht ihr könnt pro

141
00:16:40,140 --> 00:16:43,100
region glaube ich maximal 300 gigabyte

142
00:16:49,320 --> 00:16:52,820
was

143
00:16:52,980 --> 00:16:56,020
Ich habe vms noch noch übrig

144
00:17:07,840 --> 00:17:20,500
Ich habe überhaupt keine vms angelegt das will das von mir weil das ist ja auch das projekt hier

145
00:17:23,620 --> 00:17:25,620
Egal ich habe noch genug vor

146
00:17:25,980 --> 00:17:29,180
Ich habe kein kubernetes cluster laufen das ist es ist nichts da

147
00:17:30,860 --> 00:17:32,540
Ob es

148
00:17:32,540 --> 00:17:36,100
Es ist es ist nichts da

149
00:17:36,340 --> 00:17:41,940
Ich glaube das hat einfach nicht geupdated das quota dass das hat das zeug manchmal das packt manchmal ein bisschen rum

150
00:17:44,140 --> 00:17:45,380
Zumindest

151
00:17:45,380 --> 00:17:47,380
Wenn ihr euch wenn ihr euch so ein account macht

152
00:17:47,820 --> 00:17:55,660
Ihr müsst keine angst haben dass ihr irgendwie arm werdet weil sobald ihr bei 300 dollar angekommen seid dann geht nicht geht nicht mehr

153
00:17:55,660 --> 00:18:02,660
So das heißt wenn ihr euch bei google in der cloud einloggt das erste was ihr seht ist diese startseite hier oben könnt ihr projekte anlegen

154
00:18:02,660 --> 00:18:07,660
Ich mache mal ganz jetzt im schnell schnell durchlauf dass sie ungefähr nachher mit mitkommt was wir heute machen

155
00:18:08,660 --> 00:18:15,380
So oder ihr könnt euch projekte anlegen standardmäßig ist glaube ich mein test project oder irgendwie sowas angelegt zumindest

156
00:18:15,380 --> 00:18:20,660
Das wichtigste was ihr wissen müsst bei google cloud ist hier neben dieses menü wenn ihr das ausklappt da könnt ihr alles machen

157
00:18:20,660 --> 00:18:26,100
Wenn ihr das ausklappt da könnt ihr alles machen standardmäßig sind hier schon so die üblichen verdächtigen

158
00:18:27,220 --> 00:18:32,860
Eingeblendet aber google hat noch deutlich mehr ja da blickt man dann gar nicht mehr durch wenn man den ganzen mist hier einblendet

159
00:18:33,260 --> 00:18:40,820
Aber damit damit kommt man in der regel eigentlich schon wieder schon schon ganz gut aus also das wichtigste was man eigentlich braucht sind

160
00:18:40,820 --> 00:18:47,060
Dieses ist das hier compute engine compute engine ist für 4ms das ist quasi der part den hetzer auch machen kann

161
00:18:48,060 --> 00:18:55,540
So dieses eine tab hier im endeffekt hier kannst du 4ms anlegen ja kannst 4ms anlegen kannst vor allem templates anlegen kannst

162
00:18:56,660 --> 00:19:00,780
Discs snapshots images alle möglichen was für 4ms braucht

163
00:19:01,460 --> 00:19:05,980
Dann kann man also man kann angeblich auch bare metal server habe ich noch nie ausprobiert

164
00:19:06,660 --> 00:19:10,100
Weiß gar nicht ob man das mit seinem quota quota machen kann

165
00:19:13,800 --> 00:19:15,960
okay anscheinend kann man auch

166
00:19:16,480 --> 00:19:20,440
Echte echte hardware server habe ich noch nie ausprobiert keine ahnung wie das funktioniert

167
00:19:21,320 --> 00:19:28,600
Also wenn es das hier ist 4ms das hier ist manage kubernetes das hier ist storage also s3 storage

168
00:19:28,840 --> 00:19:32,200
Das hier ist no sql und das hier ist wer hätte das gedacht

169
00:19:32,840 --> 00:19:40,680
Manage datenbanken manage datenbanken darum geht es heute auch unter anderem gibt es mysql postgres und ja leider

170
00:19:41,320 --> 00:19:45,900
den gibt es auch

171
00:19:45,900 --> 00:19:48,660
Aber wir machen heute was mit postgres

172
00:19:49,820 --> 00:19:56,260
So das ist eigentlich erst so alles was man auf die was man auf die schnelle wissen muss hier macht man netzwerksachen drüber und cloud run

173
00:19:56,460 --> 00:20:03,220
Cloud run ist eine ganz coole funktion wenn man irgendwelche container hat die man einfach nur starten möchte und laufen lassen will ohne kubernetes ohne alles

174
00:20:03,540 --> 00:20:06,980
Komplett komplett managed ich muss mal ein bisschen wupp wupp wupp anmachen

175
00:20:08,020 --> 00:20:10,020
bisschen bisschen wupp wupp wupp ohne

176
00:20:13,820 --> 00:20:25,560
Eise bisschen entspannung wupp wupp wupp genau und ansonsten

177
00:20:27,200 --> 00:20:28,440
Gibt es noch

178
00:20:28,440 --> 00:20:33,480
1000 sachen die man sonst noch bei google in der cloud machen kann also es gibt

179
00:20:36,160 --> 00:20:38,160
Es ist manchmal ist das interface broken

180
00:20:38,880 --> 00:20:42,960
Es gibt die die üblichen verdächtigen ihr könnt zum beispiel nach maps suchen

181
00:20:43,600 --> 00:20:46,720
Dann könnt ihr sachen wie google maps und so dort einrichten aber

182
00:20:47,560 --> 00:20:49,560
na ja

183
00:20:49,800 --> 00:20:55,240
Aber es gibt es gibt tausend sachen von von service mesh bis edge computing

184
00:20:55,800 --> 00:20:56,960
cloud

185
00:20:56,960 --> 00:20:58,400
functions

186
00:20:58,400 --> 00:21:00,400
rpgateface

187
00:21:01,560 --> 00:21:04,320
Dinger wo ich keine ahnung habe was es ist ich weiß nicht mehr was

188
00:21:05,240 --> 00:21:08,040
Ist alloy nicht die aus horizon zero dawn

189
00:21:08,920 --> 00:21:10,480
alloy db

190
00:21:10,480 --> 00:21:14,200
Big table das ist die alte no sql datenbank glaub von denen

191
00:21:19,950 --> 00:21:21,150
redis

192
00:21:21,150 --> 00:21:23,150
memcache

193
00:21:23,830 --> 00:21:28,830
Also haben tausend sachen drin ist es jetzt nicht so als würde ich da bei allem durchblicken

194
00:21:29,590 --> 00:21:32,870
Da gibt es wirklich da gibt es alles da geht es gar nicht die welt ja

195
00:21:33,350 --> 00:21:40,390
Es gibt auch eine eigene container registry beziehungsweise artefakt registry die soll man ja eigentlich gar nicht verwenden für container images und sowas es

196
00:21:40,390 --> 00:21:46,110
Gibt es gibt alles irgendwie es gibt auch pubs ab wer irgendwie eine message queue braucht alles mögliche

197
00:21:47,110 --> 00:21:52,190
Ja das ding als spanner das ist auch irgendwas mit datenbanken ich bin mir nicht sicher was es genau ist

198
00:21:53,470 --> 00:21:56,070
Ja cloud spanner

199
00:21:58,750 --> 00:22:01,430
Fully managed relational database

200
00:22:02,390 --> 00:22:08,910
Okay, das ist quasi das ist quasi die die sql datenbank von google wenn man keinen bock hat auskreis zu verwenden

201
00:22:09,510 --> 00:22:12,150
Cloud spanner keine ahnung habe ich noch nie verwendet

202
00:22:12,830 --> 00:22:16,470
Zumindest folgendermaßen was was ich heute machen will ist folgendes

203
00:22:16,910 --> 00:22:23,110
Ich möchte eine datenbank instanz erstellen und dann auf die datenbank instanz zugreifen allerdings

204
00:22:23,830 --> 00:22:25,830
jetzt kommt

205
00:22:25,950 --> 00:22:27,230
Ohne

206
00:22:27,230 --> 00:22:35,430
Dass ich direkt einstelle auf welche datenbank ich zugreife und ohne dass ich ein password dafür brauche und trotzdem sicher

207
00:22:36,070 --> 00:22:41,110
Also ich muss euch das ich muss ich das gleich mal aufmalen wir stellen jetzt einfach mal eine datenbank dass ihr gesehen habt wie das

208
00:22:41,110 --> 00:22:45,910
Funktioniert also es gibt drei varianten grundsätzlich wie man in der google cloud sachen erstellen kann

209
00:22:46,830 --> 00:22:50,870
So eine datenbank setzt sich zusammen aus einer vm

210
00:22:51,470 --> 00:22:58,030
Werdet ihr auch gleich sehen das kann man bei google in den docks lesen was das ist so eine datenbank ist unter der haube ist

211
00:22:58,030 --> 00:22:59,550
das eine vm

212
00:22:59,550 --> 00:23:05,070
Allerdings eine komplette managed vm die dann auch sich um so sachen wie

213
00:23:05,550 --> 00:23:10,070
Backup für datenbanken kümmern kann und snapshots und recovery und alle möglichen dingern

214
00:23:10,710 --> 00:23:12,710
zumindest

215
00:23:12,710 --> 00:23:18,430
Wir erstellen jetzt mal eine datenbank es gibt drei es gibt grundsätzlich drei verschiedene arten wie man bei google in der cloud

216
00:23:19,230 --> 00:23:21,630
Ressourcen erstellt wie zum beispiel so eine datenbank

217
00:23:22,430 --> 00:23:24,430
Das erste ist und das offensichtlichste

218
00:23:24,910 --> 00:23:29,910
Ist hier im web interface einfach sich die datenbank zusammen klicken wie man die haben will das ist in der regel relativ

219
00:23:30,510 --> 00:23:36,570
Selbsterklärend man gibt dem dingen namen man gibt dem postgres user oder sagen wir dem admin user ein password hier zum beispiel kann man eins

220
00:23:36,830 --> 00:23:38,830
eins generaten

221
00:23:38,950 --> 00:23:40,950
Man kann aber auch selbst eins vergeben

222
00:23:42,150 --> 00:23:44,150
Allerdings leckt

223
00:23:45,150 --> 00:23:48,550
Das funktioniert man kann die datenbankversion auswählen und so ein bisschen

224
00:23:49,670 --> 00:23:52,270
slas und und cpus und so was in der richtung

225
00:23:55,300 --> 00:24:01,140
Und noch auswählen wie groß und wie klein die kisten sein sollen wir nehmen wir sehen jetzt mal hier eine development kiste

226
00:24:01,940 --> 00:24:07,740
Oder hier das ist sandbox kiste reicht theoretisch auch aus development kiste also wir brauchen ja nicht wirklich viel wir machen mit der datenbank nichts

227
00:24:08,140 --> 00:24:14,740
Genau und da kann man hier unten noch einstellen wo man das ganze hosten will wir wollen nach eu west oder europa

228
00:24:14,740 --> 00:24:16,740
europa west 3 weil das ist frankfurt

229
00:24:17,380 --> 00:24:21,260
Und da kann man auch ein paar andere sachen hier unten einstellen wie zum beispiel

230
00:24:22,060 --> 00:24:25,700
wie viel speicherplatz man dem ding geben möchte und

231
00:24:26,780 --> 00:24:31,060
Wie man darauf zugreifen will ob das ding eine public oder private ip bekommen soll

232
00:24:33,780 --> 00:24:35,780
Ist eigentlich

233
00:24:36,300 --> 00:24:40,060
Willst du dich lieber selber das db nee es geht mir explizit hier und postgres jetzt

234
00:24:40,580 --> 00:24:46,780
Das ding kriegt eine private ip wobei wir haben noch kein network angelegt da war das ich lasse das mal ich lasse das mal in den

235
00:24:46,780 --> 00:24:49,700
Cluster aufbauen so da gibt man den namen an hier mega

236
00:24:51,420 --> 00:24:52,900
Nice

237
00:24:52,900 --> 00:24:54,900
db brot

238
00:24:55,100 --> 00:24:56,900
oder so was

239
00:24:56,900 --> 00:24:58,900
Und dann kann man auch ein passwort

240
00:24:59,340 --> 00:25:01,340
generate chat generatieren

241
00:25:04,080 --> 00:25:06,080
und wir sagen

242
00:25:06,360 --> 00:25:12,000
Ja, wir legen die erst danach dem ich netzwerke und sowas angelegt haben so so funktioniert das ist die erste variation

243
00:25:12,080 --> 00:25:15,600
Wie man sachen bei google cloud anlegen kann das nächste ist

244
00:25:16,280 --> 00:25:21,320
Nein, ich habe doch gar nichts angelegt das nächste ist über das google cloud command line tool

245
00:25:22,440 --> 00:25:24,440
der iron champ

246
00:25:24,840 --> 00:25:28,000
Pippo ist am bügeln also bei google cloud

247
00:25:29,680 --> 00:25:34,680
Da kann man mit dem google cloud cli kann man sachen anlegen und das nächste ist

248
00:25:35,400 --> 00:25:38,540
Errorform

249
00:25:38,540 --> 00:25:44,860
Errorform ist ein tool da kann man einstellen das benutzen übrigens jetzt auch gleich da kann man einstellen was man anlegen will in der

250
00:25:44,860 --> 00:25:49,820
Cloud und dann er bleibt das dass ihr werdet gleich sehen wir benutzen ein repo was es schon gibt

251
00:25:50,740 --> 00:25:52,740
Nämlich bei mir auf github

252
00:25:53,780 --> 00:25:57,180
Habe ich vorhin sogar was gepusht ja das da

253
00:25:58,140 --> 00:26:00,140
Können wir gleich mal klonen

254
00:26:01,020 --> 00:26:03,900
Das wäre dann wenn wir dann gleich gleich mal ausführen

255
00:26:04,740 --> 00:26:06,500
Genau so

256
00:26:06,500 --> 00:26:12,660
Und was wir heute machen werden ist folgendes lange rede kurzer sinn also wir legen eine datenbank an in der google cloud

257
00:26:12,860 --> 00:26:17,580
In der postgres datenbank mysql oder so ist jetzt nicht so wild aber wir nehmen eine postgres datenbank

258
00:26:17,980 --> 00:26:24,220
Und wir bauen unseren kubernetes cluster auf wir können auch einfach vms aufbauen im prinzip macht es keinen großen unterschied

259
00:26:24,780 --> 00:26:29,140
Und dann gibt es jetzt die möglichkeit das habe ich nämlich letztens erst mal google gefunden gcp

260
00:26:29,860 --> 00:26:31,860
aus proxy

261
00:26:32,860 --> 00:26:39,100
Aber es gibt nämlich die möglichkeit dass man wenn man anwendungen in der cloud laufen lässt

262
00:26:39,820 --> 00:26:43,860
Und auf eine auch in der cloud gehostete datenbank zugreifen will

263
00:26:44,580 --> 00:26:52,700
dass man nichts mit connection strings hantieren muss und auch nicht mehr mit passwörtern hantieren muss für die für die

264
00:26:53,340 --> 00:26:58,100
Datenbank da gibt es bei google sowas das nennt sich cloud sql aus proxy

265
00:26:59,380 --> 00:27:01,380
der sieht dann

266
00:27:02,060 --> 00:27:05,860
Das sieht dann so aus im endeffekt trifft es trifft es eigentlich ganz gut

267
00:27:07,020 --> 00:27:14,140
Die anwendung von einem selbst also die anwendung die man ausführen will also normalerweise ist es so ja man hat hier seine kleinen vm

268
00:27:14,500 --> 00:27:16,500
Und man hat hier eine datenbank

269
00:27:16,540 --> 00:27:21,180
Und man braucht ein connection string zur datenbank also beispielsweise die ip von der datenbank

270
00:27:21,380 --> 00:27:26,580
Man braucht ein user in der datenbank und man braucht ein passwort für die datenbank und dann greift er hier direkt darauf zu

271
00:27:26,940 --> 00:27:28,940
Es gibt jetzt allerdings die möglichkeit

272
00:27:29,620 --> 00:27:33,220
Das ist jetzt nicht neu aber das habe ich noch nie ausprobiert das ist aber mega nice

273
00:27:33,620 --> 00:27:39,220
Dass man das über einen proxy macht und der proxy den kann man so einstellen dass er auf local host lauscht

274
00:27:39,220 --> 00:27:47,500
Also quasi dort wo auch die anwendung läuft auf local host auf port 5000 zum beispiel standardmäßig und dann kann die anwendung hier

275
00:27:48,180 --> 00:27:52,260
Braucht nicht mehr jedes ganze datenbank connection zeug können sondern

276
00:27:52,460 --> 00:27:58,740
Du kannst bei der datenbank du kannst bei deiner applikation einfach einstellen meine datenbank ist auf local host port 5000

277
00:27:59,860 --> 00:28:05,660
Und dann geht das an den proxy und der proxy geht an den endpunkt und dann zur datenbank instanz damit das ganze funktioniert

278
00:28:06,100 --> 00:28:11,980
Musst du natürlich ein proxy erst mal starten logischerweise sonst klappt das nicht weil ich muss mal kurz hier licht licht dann machen

279
00:28:17,190 --> 00:28:18,870
Decke jawohl

280
00:28:18,870 --> 00:28:24,670
Also muss natürlich vorher eine proxy starten wir werden das ganze aus dem kubernetes cluster raus machen aber muss wir müssen uns doch gar nicht

281
00:28:24,670 --> 00:28:26,670
So sehr gedanken um kubernetes machen

282
00:28:27,030 --> 00:28:32,950
Man muss den muss den proxy starten man muss den proxy einmalig sagen zu welcher datenbank er connecten soll

283
00:28:33,870 --> 00:28:39,470
Und jetzt kommt jetzt kommt der trick und das ist der grund warum ich das auch ausprobieren will bis zu dem zeitpunkt

284
00:28:39,670 --> 00:28:46,670
bräuchtest du immer noch ein user und ein password für die datenbank weil ich meine damit hat der proxy ja nicht so wirklich was zu tun

285
00:28:46,910 --> 00:28:48,070
aber

286
00:28:48,070 --> 00:28:55,630
Es gibt jetzt seit nicht es ist noch nicht so lang dass es die möglichkeit gibt man kann diesen proxy client so einstellen

287
00:28:55,790 --> 00:28:57,790
dass er das authentifizierung

288
00:28:57,990 --> 00:29:02,710
Zeug von der google cloud direkt benutzt also sprich wenn ich beispielsweise sage

289
00:29:02,950 --> 00:29:06,790
Meine vm also man kann wenn man wenn man vms erstellt hier bei google

290
00:29:07,350 --> 00:29:13,070
Oder auch kubernetes cluster erstellt da kann man sagen dass die mit einem service account laufen sollen

291
00:29:14,110 --> 00:29:16,830
Und diesem service account kann man verschiedene rechte geben

292
00:29:17,350 --> 00:29:22,910
Und man kann es jetzt so einstellen in den proxy dass der proxy quasi den service account nimmt

293
00:29:23,270 --> 00:29:28,270
Der vm oder des clusters auf dem er läuft auf dem der attached ist der service account

294
00:29:28,710 --> 00:29:37,710
Und wenn der service account auf die datenbankinstanz zugreifen kann dann brauche ich kein password mehr solange ich eben vom proxy auf dieser vm komme

295
00:29:38,910 --> 00:29:45,870
Das ist man könnte sagen oh das ist ja eigentlich ein sicherheitsproblem aber genau genommen ist es gar nicht so schlimm oder ist es eigentlich

296
00:29:45,870 --> 00:29:50,910
Gar kein sicherheitsproblem weil der proxy der läuft ja nur auf local host auf dieser kiste

297
00:29:51,510 --> 00:29:56,630
Das heißt damit dass jemand ausnutzen könnte müsst ihr halt auf die vm kommen oder in den container kommen

298
00:29:57,150 --> 00:30:01,510
Dafür hast du den riesen vorteil du musst nicht mehr mit datenbank secrets rum hantieren

299
00:30:02,070 --> 00:30:08,430
Und du musst dich auch nicht um connection strings und sonstige geschichten in der config in einem cluster in der anwendung sonst für kümmern

300
00:30:09,190 --> 00:30:11,190
soweit soweit die idee

301
00:30:12,030 --> 00:30:15,150
Und das ganze wollte ich mal ausprobieren damit wir das ausprobieren können

302
00:30:15,950 --> 00:30:17,950
brauchen wir ein kubernetes cluster

303
00:30:18,550 --> 00:30:22,110
Und da benutzen wir das gleiche was wir das letzte mal schon

304
00:30:24,110 --> 00:30:36,440
Mit gar nicht sicher ob ich das hier noch mal klonen kann ich muss mal kurz gucken habe ich hier vielleicht etwas modernere version davon am start

305
00:30:38,920 --> 00:30:40,920
Auch nicht wirklich oder

306
00:30:46,660 --> 00:30:48,660
Ist eigentlich mehr oder weniger das gleiche

307
00:30:49,020 --> 00:30:53,020
Dann erkläre ich euch das auch gleich mal kurz wenn wir das hier haben weil

308
00:30:54,020 --> 00:30:59,700
Boah ich habe schon gedacht ich habe mein passwort irgendwie rein copy pasted liegt monkaS

309
00:31:01,340 --> 00:31:20,810
Ich hoffe ihr seid nicht drin direkt ihr habt nicht auf dem monitor geguckt sehr gut chat

310
00:31:23,330 --> 00:31:25,330
Yes wir trusten dem

311
00:31:26,170 --> 00:31:33,050
Also wie ich gerade erzählt hat man kann in der google cloud es auf drei verschiedene wegen aufbauen hier über das webinterface über das google

312
00:31:33,050 --> 00:31:40,010
Cloud cli oder über terraform dass die die terraform geschichte zeige ich euch zeige ich euch gleich wir müssen uns als erstes mal kurz einloggen

313
00:31:41,090 --> 00:31:42,610
gcloud

314
00:31:42,610 --> 00:31:44,610
also mit dem command line

315
00:31:45,250 --> 00:31:49,710
Login geht das glaube ich

316
00:31:50,350 --> 00:31:52,350
Nicht in dem browser falscher browser

317
00:31:52,910 --> 00:31:59,380
alter browser

318
00:31:59,380 --> 00:32:01,500
Max pogu wollen wir verwenden

319
00:32:02,260 --> 00:32:03,380
allow

320
00:32:03,380 --> 00:32:09,960
You are now authenticated für max pogu sehr schön

321
00:32:10,600 --> 00:32:18,920
Your current project is keckel stream 1 nein das ist falsch ich will set project id

322
00:32:19,800 --> 00:32:20,920
auf

323
00:32:20,920 --> 00:32:23,920
mein aktuelles projekt setzen hier pro talon

324
00:32:25,240 --> 00:32:28,560
Da soll das hin das ist ein random generierter projektname

325
00:32:29,320 --> 00:32:33,960
So und jetzt haben wir uns authentifiziert gegen die google cloud jetzt können wir so sachen machen wie

326
00:32:34,720 --> 00:32:36,600
gcloud

327
00:32:36,600 --> 00:32:40,550
compute

328
00:32:40,790 --> 00:32:42,550
compute

329
00:32:42,550 --> 00:32:45,030
instance list und solche geschichten

330
00:32:47,550 --> 00:32:49,550
Instanzes list

331
00:32:50,190 --> 00:32:55,070
Genau da kann man sich die vms oder oder ich kann beispielsweise eine vm erstellen oder solche geschichten

332
00:32:55,070 --> 00:33:00,790
Aber wir werden das google cloud cli gar nicht wirklich verwenden man braucht aber das login dass das funktioniert wo wir gerade dabei sind

333
00:33:00,910 --> 00:33:02,910
Ich muss mal kurz gucken wie man

334
00:33:04,190 --> 00:33:07,190
Gcloud component man kann das ding nämlich auch updaten

335
00:33:08,270 --> 00:33:12,450
components

336
00:33:12,530 --> 00:33:14,170
Update

337
00:33:14,170 --> 00:33:16,170
Ich will nicht opt innen

338
00:33:17,130 --> 00:33:18,730
Yes

339
00:33:18,730 --> 00:33:21,650
Ja, wir updaten gerade mal den ganzen kram

340
00:33:28,520 --> 00:33:31,320
Ja, ja, ja meistens schon

341
00:33:32,920 --> 00:33:34,760
Das ist aber

342
00:33:34,760 --> 00:33:36,800
sag mal so die bezeichnung sind da

343
00:33:38,120 --> 00:33:43,200
Variabel ja also es kann auch sein dass es eine infrastruktur gene team gibt es kann auch sein dass ein cloud

344
00:33:43,720 --> 00:33:47,600
Kompetenzteam oder irgendwie sowas gibt die das machen es kann auch sein dass es schlicht und ergreifend

345
00:33:48,280 --> 00:33:54,360
Irgendwelche admins sind die das ganze mal geerbt haben das zu machen also das ist ein bisschen ein bisschen unterschiedlich ja aber sag mal so

346
00:33:55,080 --> 00:34:00,760
Meistens sind die teams und abteilungen dann so gebaut das schon so die ganze alles was was

347
00:34:03,220 --> 00:34:10,140
Mit cloud technologie zu tun hat so ein bisschen zusammenfasst weil es einfach meistens komplett anders läuft als wenn den eigenen server im rechten zentrum stehen

348
00:34:10,460 --> 00:34:12,920
Deswegen ist es auch sinnvoll wenn du die

349
00:34:13,660 --> 00:34:20,340
Das know-how für eine sache so ein bisschen zusammen hast gerade auch für alle anderen die da was benutzen wollen dass die eine zentrale stelle

350
00:34:20,340 --> 00:34:23,840
Haben wurde fragen kannst

351
00:34:23,840 --> 00:34:25,840
Bei der way wir haben eigentlich noch gar nichts gemacht

352
00:34:26,080 --> 00:34:32,480
Wir haben uns gerade über google cloud angemeldet und haben uns das hier aktualisiert so und jetzt zeige ich euch mal mal in terraform also

353
00:34:32,840 --> 00:34:38,280
Wenn man hier bei google cloud ist wie gesagt ich habe ja gesagt ihr könnt sachen anlegen über das webinterface über das google cloud

354
00:34:38,800 --> 00:34:42,720
Cli oder über terraform terraform ist ein

355
00:34:44,320 --> 00:34:48,040
Infrastructure as code tool das haben wir hier im stream schon öfters mal benutzt also

356
00:34:48,280 --> 00:34:53,800
Wenn ich es ganz genau wissen wollte wie wir das unter anderem erstellt haben hier könnt ihr euch den stream im archiv angucken wo wir das

357
00:34:53,800 --> 00:34:57,720
Benutzt haben zumindest terraform ist dafür da dass man reproduzierbar

358
00:34:59,280 --> 00:35:04,520
Cloudinfrastruktur aufbauen kann und ich zeige euch mal ein beispiel in dem fall ich glaube es ist relativ überschaubar

359
00:35:04,960 --> 00:35:07,880
So was wir jetzt anlegen wollen in der cloud

360
00:35:08,200 --> 00:35:12,240
Glücklicherweise das ganze gibt es übrigens bei mir auf github wenn ihr euch das angucken wollt und

361
00:35:12,720 --> 00:35:16,120
Ich habe es glücklicherweise auch mal ordentlich halbwegs ordentlich benannt

362
00:35:18,570 --> 00:35:20,730
8000 zeilen ansible script was was machst du gerade

363
00:35:21,610 --> 00:35:27,010
Was was soll am ende rauskommen also was wir in der google cloud brauchen ist folgendes wir brauchen

364
00:35:27,850 --> 00:35:29,650
ein netzwerk

365
00:35:29,650 --> 00:35:33,050
Wer hätte das gedacht ein nicht öffentliches netzwerk brauchen wir in der google cloud

366
00:35:33,330 --> 00:35:36,890
Damit wir unsere vms und unsere datenbanken und unseren cluster verbinden können

367
00:35:37,730 --> 00:35:44,130
Netzwerke legt man in der google cloud über terraform so an man sagt ihm hier man will ein netzwerk anlegen was

368
00:35:44,450 --> 00:35:46,570
Regional ist also es gibt bei google in der

369
00:35:47,450 --> 00:35:49,450
Sebasu-Chan dankeschön für den sub

370
00:35:51,980 --> 00:35:57,940
IQ ist wieder richtig ins steigt ins unermächtliche im chat ich sehe schon an ihr wisst ja jeder prime sub mehr

371
00:35:58,100 --> 00:36:01,940
IQ-Punkte für alle das wird das wird das wird halt auch ein bisschen durch die anzahl der user

372
00:36:02,420 --> 00:36:07,740
Geteilt also sprich je mehr leute zugucken im stream je mehr prime subs brauchen wir auch gerade um das notwendige

373
00:36:08,180 --> 00:36:10,180
IQ level zu maintainen

374
00:36:10,820 --> 00:36:12,820
nur mal so nebenbei

375
00:36:13,060 --> 00:36:15,060
angemerkt ja also

376
00:36:15,820 --> 00:36:17,980
Wir brauchen jetzt natürlich ein netzwerk in der google cloud

377
00:36:18,500 --> 00:36:25,220
Um das miteinander verbinden zu können was wir bauen an vms und klassen und sonst was das ganze ist regional genau das wollte ich erzählen

378
00:36:25,420 --> 00:36:30,860
Bei google ist es so und das ist bei aws vermutlich auch so bei asia ist es so da weiß ich aber

379
00:36:31,220 --> 00:36:37,420
Wie es bei aws ist weiß ich nicht habe selbst aws noch nicht so oft benutzt vielleicht jemand chat wenn ihr ahnung von aws habt

380
00:36:37,420 --> 00:36:42,540
Könnt ihr mir mal sagen wie das bei aws ist also es gibt bei google gibt es zonen und regionen

381
00:36:43,020 --> 00:36:47,230
so

382
00:36:47,230 --> 00:36:52,990
Eine region setzt sich bei google aus mehreren zonen zusammen es gibt zum beispiel die region

383
00:36:53,550 --> 00:36:55,750
europa west 3

384
00:36:56,670 --> 00:36:59,710
europa ist drei ist frankfurt germany europa

385
00:37:00,430 --> 00:37:06,310
Bei aws ähnlich ja bei asia auch ich gehe davon aus dass es mehr oder weniger bei allen cloud anbietern so sein wird bei

386
00:37:06,310 --> 00:37:08,310
Bei hetzer gibt es das ganze auch

387
00:37:09,350 --> 00:37:13,030
Sagen wir mal etwas light die variante davon

388
00:37:16,800 --> 00:37:18,800
John can play dankeschön für den sub

389
00:37:19,480 --> 00:37:21,480
exzellent subscription

390
00:37:21,920 --> 00:37:23,200
Dankeschön für den sub

391
00:37:23,200 --> 00:37:30,240
Bei hetzer gibt es das auch allerdings hetzer hat keine unter regionen sondern hetzer hat quasi nur einzelne regionen ohne dass man das jetzt genau

392
00:37:30,600 --> 00:37:32,600
einstellen könnte

393
00:37:33,240 --> 00:37:40,760
Bei google gibt es mehrere gibt es gibt es regionen und zonen also eine region setzt sich aus mehreren zonen zusammen die region ist

394
00:37:40,760 --> 00:37:47,360
In dem fall europa west 3 europa west 3 ist aktuell frankfurt ja bei mir um die ecke

395
00:37:48,800 --> 00:37:53,440
Ich bin mir nicht sicher ob das eine garantie gibt

396
00:37:54,280 --> 00:37:55,520
dass

397
00:37:55,520 --> 00:37:57,520
europa west 3

398
00:37:57,560 --> 00:37:59,560
für immer und ewig

399
00:38:00,000 --> 00:38:07,400
Frankfurt sein wird weil es hat sicherlich seinen grund dass das nicht europa frankfurt heißt sondern europa west 3

400
00:38:07,800 --> 00:38:12,380
Also es könnte durchaus sein dass google auf die idee kommt den standort in frankfurt dicht zu machen

401
00:38:12,880 --> 00:38:14,880
Und nach köln zu gehen zum beispiel

402
00:38:17,460 --> 00:38:21,940
Und dann wird es weiter europa west 3 heißen aber es wäre dann halt nicht frankfurt sondern köln

403
00:38:22,220 --> 00:38:28,420
Es ist relativ wahrscheinlich dass es auf absehbare zukunft frankfurt bleiben wird frankfurt bietet sich irgendwie als standort an gerade

404
00:38:28,620 --> 00:38:33,940
Gerade weil du dann auch den d6 und internet traffic knotenpunkt und alles hast es bietet sich irgendwie an aber

405
00:38:34,300 --> 00:38:42,060
Theoretisch könnte das könntest du ja sein ich meine vielleicht kommt bei google irgendwann auch mal europa west europa west 3d dabei und das ist

406
00:38:42,060 --> 00:38:47,940
In köln oder so zumindest europa west ist die ist die region europa west 3 ist die region

407
00:38:48,700 --> 00:38:56,300
Und das hier sind die unterzonen quasi die die zonen innerhalb dieser region ihr seht dass die zonen leicht

408
00:38:56,540 --> 00:38:58,540
Unterschiedliche features haben für

409
00:38:59,300 --> 00:39:05,420
Vms und hardware was die bereitstellen also sprich wenn ihr eine top aktuelle kiste haben wollt mit

410
00:39:06,500 --> 00:39:13,780
Ja, keine ahnung weisen sonst was nach gut nähe sieht es sieht überall relativ relativ gleich aus hier manche haben beispielsweise

411
00:39:14,500 --> 00:39:15,900
keine

412
00:39:15,900 --> 00:39:21,710
Die hat beispielsweise keine m2

413
00:39:23,590 --> 00:39:25,990
Das hat übrigens das hat übrigens nichts mit

414
00:39:26,430 --> 00:39:32,030
Die steht hier oben ja auch das hat nichts mit mit apple zu tun direkt das sind benahmung von von

415
00:39:32,230 --> 00:39:36,190
Maschinen also von von von von hardware könnte man quasi sagen von vms

416
00:39:37,950 --> 00:39:39,230
Also

417
00:39:39,230 --> 00:39:44,310
Manche sachen kann man nicht in jeder region aufbauen in der regel muss man sich da nicht so viel gedanken drüber mal guckt und nur

418
00:39:44,310 --> 00:39:47,710
Hier in europa west 3d gibt es gpus zum beispiel

419
00:39:52,300 --> 00:39:55,820
Also das sieht man aber in der regel muss man sich da nicht so viel gedanken drüber machen

420
00:39:55,900 --> 00:40:01,620
So eine sache wo man viel geld verschenken kann bei google wenn man nicht aufpasst ist bei

421
00:40:01,980 --> 00:40:08,760
Bei sehr vielen sachen ich würde mal sogar ich würde sagen bei den bei den meisten sachen kannst du beim erstellen in der cloud bei google

422
00:40:08,940 --> 00:40:15,300
Auswählen ob du es regional ich könnte mich ich könnte mir im chat schreiben wie das wie das bei abs ist also bei asia ist es

423
00:40:15,300 --> 00:40:19,780
Sehr ähnlich dazu kannst du auswählen ob du das ganze regional machen willst oder

424
00:40:20,300 --> 00:40:24,780
Nur pro zone so jetzt sagen wir mal da gehen wir davon aus du legst

425
00:40:25,140 --> 00:40:27,820
Nächste datenbank an in der cloud bei google

426
00:40:28,660 --> 00:40:31,060
Und du wählst jetzt einfach nur europa west 3 an

427
00:40:31,820 --> 00:40:33,820
Dann wird das unter der haube

428
00:40:33,940 --> 00:40:40,220
Quasi repliziert war ganz vereinfacht ausgedrückt auf alle regionen in dieser zone auf alle

429
00:40:41,020 --> 00:40:43,020
zonen in der region

430
00:40:43,500 --> 00:40:47,940
Das heißt du bezahlst auch dreimal hardware beziehungsweise dreimal ressourcen

431
00:40:48,540 --> 00:40:53,860
Wenn du wenn du die datenbank erstellst nur in europa west 3 minus a also in einer zone

432
00:40:54,460 --> 00:40:56,460
Dann ist das nicht der fall aber

433
00:40:56,620 --> 00:41:01,540
Sollte mal hier irgendwie strom ausfallen was kaputt gehen oder sonst was dann hast du ein problem

434
00:41:02,140 --> 00:41:04,140
Dass das dann halt weg ist

435
00:41:11,620 --> 00:41:17,540
Chat ihr könnt ja mal in discord gucken für alle css kenner das ist ja ich mache bald ich mache bald

436
00:41:19,100 --> 00:41:22,260
Max pump fiver machen wir auf da gibt es hier auftragsvermittlung

437
00:41:29,260 --> 00:41:34,260
Das kann man so gar nicht sagen es ist immer die frage als wie kritisch das ganze deklariert wird also

438
00:41:36,440 --> 00:41:43,680
Man, kann durchaus services für dienst finanzdienstleister in der cloud laufen lassen viele viele sind da allerdings ein bisschen

439
00:41:43,960 --> 00:41:45,800
so ein bisschen skeptisch

440
00:41:45,800 --> 00:41:50,080
Alles in der cloud laufen zu lassen aber es läuft doch schon erstaunlich erstaunlich viel in der cloud

441
00:41:50,480 --> 00:41:54,720
Genau also wenn du zum beispiel die datenbank anlegst und sagst du nimmst du machst sie

442
00:41:55,360 --> 00:42:01,800
Regional dann ist es ausfallsicherer also wenn der dann wenn mal irgendwie wie beispielsweise letztens in paris

443
00:42:02,680 --> 00:42:06,460
Weiß nicht ob ihr das mitbekommen habt in paris die hatten richtig richtig die arschkarte

444
00:42:10,070 --> 00:42:12,070
heise heise dabei

445
00:42:17,820 --> 00:42:20,470
wasser

446
00:42:20,470 --> 00:42:22,470
warum findet man das nicht

447
00:42:22,550 --> 00:42:29,070
Moment das müssen wir duckduck duckduck go suchen ich vermute fast dass das google da nichts findet

448
00:42:39,150 --> 00:42:41,150
Also

449
00:42:41,230 --> 00:42:43,750
Ich bin mir ziemlich sicher dass heise da nen

450
00:42:44,710 --> 00:42:46,510
newsartikel dazu hatte

451
00:42:46,510 --> 00:42:56,790
Nein, nein, nein, nein, ich meine nicht aufhören ich mein google ja genau aber der heise hatte ganz guten artikel dazu zumindest

452
00:42:57,230 --> 00:43:00,910
in paris in google bei google im rechenzentrum in paris

453
00:43:01,910 --> 00:43:03,910
die hatten erst hochwasser

454
00:43:04,590 --> 00:43:06,230
und

455
00:43:06,230 --> 00:43:08,230
Dann hat es irgendwie noch gebrannt

456
00:43:09,590 --> 00:43:11,590
Und dann ist auch das strom ausgefallen

457
00:43:15,190 --> 00:43:17,190
Also die

458
00:43:18,070 --> 00:43:22,600
Ja

459
00:43:23,280 --> 00:43:31,080
Cloud ausfall guck mal man das war doch

460
00:43:37,520 --> 00:43:40,000
Oder was bei golem wo ich das gelesen habe

461
00:43:42,130 --> 00:43:47,250
Keiner also suche ist pega die hatten hochwasser brand und stromausfall

462
00:43:47,810 --> 00:43:56,000
ja

463
00:43:56,000 --> 00:43:57,160
genau

464
00:43:57,160 --> 00:44:02,280
Google rechenzentrum nach wasser schaden und brand offline und dann ist noch der strom ausgefallen danach

465
00:44:02,920 --> 00:44:05,240
also man sieht ganz so

466
00:44:05,840 --> 00:44:07,840
Super safe sind die sachen auch nicht

467
00:44:08,600 --> 00:44:15,000
Und in dem fall ist es ich bin mir gar nicht sicher ob es in dem fall was gebracht hätte wenn man es über mehrere

468
00:44:15,440 --> 00:44:23,320
Zonen in der gleichen region gemacht hätte vielleicht weiß ich nicht aber man sieht es ist auf jeden fall auch trotz cloud nicht gleich

469
00:44:23,960 --> 00:44:25,960
Es ist aus es ist komplett

470
00:44:26,280 --> 00:44:28,280
Komplett sicher und es kann nie was passieren

471
00:44:28,280 --> 00:44:33,360
So das ist eigentlich das was ich im endeffekt im endeffekt sagen wollte und da muss man sich halt überlegen wie viel geld man dafür

472
00:44:33,400 --> 00:44:35,280
Ausgeben möchte

473
00:44:35,280 --> 00:44:41,360
Man kann es auch noch weiter hochdrehen man kann dann auch mehrere datenbanken aufbauen zum beispiel dass man dann sagt okay

474
00:44:41,720 --> 00:44:48,600
Wir machen europa west und us ist und solche geschichten zumindest dass das muss man wissen so lange rede kurzer sinn das ist das

475
00:44:49,080 --> 00:44:55,400
Wo sich das hier mit mit regional und zonen immer bezieht also ich zeige euch jetzt mal die die terraform geschichte die müssen wir

476
00:44:55,400 --> 00:45:01,040
Nämlich gleich anschmeißen weil das dauert das baut schon zehn minuten auf also was wir an ressourcen in der google cloud heute brauchen ist

477
00:45:01,040 --> 00:45:04,120
Wir brauchen ein netzwerk und zwar wir brauchen ein netzwerk mit

478
00:45:04,640 --> 00:45:10,400
Dieser dieser ip range also 10.0.0 slash 24 dann brauchen wir für unsere

479
00:45:11,000 --> 00:45:13,000
kubernetes pods

480
00:45:13,200 --> 00:45:15,820
noch eine ip range und für unsere

481
00:45:18,040 --> 00:45:23,320
Ich bin mir gar nicht sicher für die für die die eigentlich da ist brauche auch noch brauche auch noch

482
00:45:27,660 --> 00:45:33,460
Keine ahnung für was wir die eigentlich gebraucht haben auch noch eine ip range dann brauchen wir einen cloud router

483
00:45:34,220 --> 00:45:41,380
Dann müssen wir natte einschalten am cloud router dass wir ins internet raus können eigentlich relativ klar weil wir bauen hier ein privates netzwerk

484
00:45:41,380 --> 00:45:44,940
Auf so ein privates netzwerk in der cloud kommt natürlich nicht so einfach ins internet

485
00:45:45,060 --> 00:45:49,860
Das heißt was wir jetzt machen müssen wir brauchen router und wir müssen natte beim router einschalten damit wir nach

486
00:45:49,860 --> 00:45:52,400
Raus nach nach nach draußen kommen ins internet

487
00:45:53,260 --> 00:46:00,660
Und wir sagen eben dass alle subnetworks und all ip ranges nach raus quasi raus über natte geroutet werden sollen

488
00:46:01,380 --> 00:46:08,180
Dann brauchen wir ein paar firewall regeln wir brauchen einmal ssh zugriff auf alle cloud ressourcen die wir aufbauen von von allen möglichen

489
00:46:08,500 --> 00:46:16,540
Quellen und wir brauchen das ist eine firewall regel die ich so nicht unbedingt empfehlen würde wir geben einfach jeglichen tcp traffic frei

490
00:46:18,020 --> 00:46:21,340
Also das würde ich standardmäßig nicht unbedingt so machen

491
00:46:22,460 --> 00:46:24,580
Für uns ist es hier jetzt kein problem weil

492
00:46:25,100 --> 00:46:31,780
Wir sind in einem privaten netzwerk wo man von außen nicht drankommt normalerweise würde ich nicht unbedingt eine firewall regel machen wir geben den

493
00:46:31,780 --> 00:46:34,080
Kompletten tcp traffic frei das ist vielleicht nicht so

494
00:46:35,060 --> 00:46:39,780
Nicht so sinnvoll habe ich aber hier drinne stehen einfach um sicherzustellen dass alles

495
00:46:40,260 --> 00:46:43,700
Funktioniert wenn ich nicht an irgendwelche firewall regeln jetzt initial hier erstmal scheitere

496
00:46:44,500 --> 00:46:49,740
Vielleicht wenn man es ernsthaft betreiben will nicht ganz so sinnvoll okay also so dann brauchen wir eine vm

497
00:46:50,420 --> 00:46:57,340
Mit debian 11 in dem fall ja wir könnten auch debian 12 nehmen aber nehmen wir mal debian 11 ist eigentlich egal wir brauchen eine vm

498
00:46:59,880 --> 00:47:01,880
Und zwar brauchen wir eine vm

499
00:47:01,880 --> 00:47:06,560
Hier eine micro vm die hat zwei cpu kerne und irgendwie ein gigabyte ram die kostet nicht viel geld

500
00:47:07,080 --> 00:47:10,120
Und die vm brauchen wir dass dass man von daheim

501
00:47:10,880 --> 00:47:12,880
in das netzwerk reinkommt

502
00:47:13,200 --> 00:47:17,240
Was bei google liegt weil das ist ein privates netzwerk was in der google cloud liegt

503
00:47:17,520 --> 00:47:22,240
Und ich bei mir bin daheim auch in einem privaten netzwerk irgendwie muss ich ja über das internet dort rein

504
00:47:22,640 --> 00:47:27,760
Dass ich das dass ich das benutzen kann das heißt wir bauen wir bauen eine vm über die wir uns dann connecten können in

505
00:47:27,760 --> 00:47:34,320
Unser google cloud netzwerk dann brauchen wir noch ein kubernetes service account können wir nachher verwenden und dann bauen wir ein kubanetes cluster auf

506
00:47:34,320 --> 00:47:38,920
Das ist so ziemlich die einfachste variante in terraform einen kubaneten google kubanetes cluster zu definieren

507
00:47:39,360 --> 00:47:43,240
Man gibt dem ding einen namen man gibt dem ding einen ip und subnetwork

508
00:47:44,120 --> 00:47:45,920
Man

509
00:47:45,920 --> 00:47:52,720
stellt ein was wir von kubanetes versionen benutzen will und die ip range und das hier ist so ein ding das

510
00:47:53,000 --> 00:47:57,440
Checkt keiner wenn er das das erste mal macht man braucht noch eine vierte ip range und zwar

511
00:47:57,840 --> 00:48:01,160
Das ist die ip range über die google deinen cluster managet

512
00:48:05,860 --> 00:48:10,300
Google managet ja den cluster für ein bis zu einem gewissen maße google macht zum beispiel

513
00:48:10,940 --> 00:48:15,900
Versionsupgrades und sowas und dafür braucht google zugriff auf den kubanetes cluster und das passiert darüber

514
00:48:16,220 --> 00:48:21,900
Und das muss ein slash 28 netz sein und ich glaube es muss auch in irgendwie in der ähnlichen ip range wie hier sein

515
00:48:22,100 --> 00:48:25,940
Das ist das ist vorschrift von google sonst funktioniert der ganze krempel nicht

516
00:48:26,860 --> 00:48:32,060
So und dann brauchen wir noch eine node pool das ist dort wo letztendlich unsere container drinnen laufen

517
00:48:32,580 --> 00:48:39,980
Da wird eingestellt wir wollen ein kubanetes cluster bauen der drei unterschiedliche cluster nodes hat also das startet standardmäßig mit drei nodes

518
00:48:40,620 --> 00:48:43,740
Und wir nehmen als vm typ unten drunter

519
00:48:44,100 --> 00:48:50,540
E2 standard das hat vier cpu kerne pro node und ich glaube 16 oder 8 ich glaube 8 gigabyte ram

520
00:48:50,940 --> 00:48:57,940
16 oder 8 gigabyte ram und 4 also schon ist schon ganz ordentlichen cluster also wir haben ein kubanetes cluster quasi mit insgesamt

521
00:48:59,580 --> 00:49:02,060
12 12 cpu kern und

522
00:49:03,620 --> 00:49:10,860
Glaub keine ahnung 32 gramm oder sowas 48 48 gigabyte ram

523
00:49:12,060 --> 00:49:14,060
Was würde das kosten im monat?

524
00:49:14,820 --> 00:49:16,380
Das ist ein bisschen

525
00:49:16,380 --> 00:49:21,260
Also ich bin mir nicht ganz sicher ich weiß gar nicht ob google einen gescheiten rechner dafür hat er hat einen ganz guten rechner

526
00:49:21,420 --> 00:49:23,820
Ich würde mal schätzen so 200 euro

527
00:49:25,100 --> 00:49:31,860
Ungefähr das ist aber auch schon ganz schön ganz schön fett also du kommst auch mit deutlich kleineren vms aus als mit denen

528
00:49:31,860 --> 00:49:38,780
Du brauchst nicht pro node vier kerne und und 16 gramm du kannst auch e2 small oder sowas nehmen zum beispiel dann hast du

529
00:49:39,020 --> 00:49:44,820
Dann hast du mit einem kleinen cluster sage ich mal 70 euro im monat das ist aber immer noch relativ teuer also wenn es wenn es

530
00:49:46,620 --> 00:49:50,420
Wenn du es günstiger haben willst dann guckt dir zum beispiel mal digital ocean an

531
00:49:51,220 --> 00:49:55,980
Die sind hier kubanetes pricing die sind schon eine ganze ecke günstiger

532
00:49:57,700 --> 00:50:03,260
Da bekommst du zum beispiel hier schon ein basic node für 12 dollar im monat pro node

533
00:50:03,940 --> 00:50:10,380
Das ist da kannst du quasi für das was du hier was du hier bezahlst bei google kannst du hier kannst du dort quasi 20 node cluster

534
00:50:10,380 --> 00:50:13,120
betreiben

535
00:50:13,120 --> 00:50:18,720
Natürlich wird es dann auch teurer je nachdem was da wie viel ram und cpu und sonst was da drin steckt also billig billig ist das

536
00:50:18,720 --> 00:50:20,720
ganze nicht

537
00:50:20,880 --> 00:50:25,160
Genau und jetzt haben wir definiert was in der cloud angelegt werden soll

538
00:50:27,000 --> 00:50:33,760
Und jetzt kommt terraform ins spiel terraform kann jetzt dieses ding so wie ich es hier in meinem text file definiert habe

539
00:50:34,320 --> 00:50:40,240
So in der cloud erstellen das heißt auch ich kann es reproduzierbar immer wieder neu aufbauen

540
00:50:40,720 --> 00:50:43,040
beziehungsweise auch wieder rückstandslos löschen

541
00:50:43,360 --> 00:50:49,960
Ohne überlegt euch mal wenn ich diesen mist von hand klicken würde da wäre ich bestimmt eine stunde beschäftigt diesen ganzen mist hier von

542
00:50:49,960 --> 00:50:52,680
Hand zusammen zu klicken naja haben wir eine halbe stunde beschäftigt

543
00:50:53,640 --> 00:50:58,640
Ich bin mir jetzt allerdings nicht ganz sicher ob mein terraform script gescheit funktioniert was ich hier gebaut habe

544
00:50:58,920 --> 00:51:02,120
Testen testen wir einfach mal ob das ob das funktioniert oder ob es kaputt ist

545
00:51:02,120 --> 00:51:04,120
Schauen wir mal

546
00:51:06,680 --> 00:51:10,040
Ja richtiges projekt ist es okay wir brauchen ein bucket

547
00:51:11,600 --> 00:51:14,400
Following firewalls will be deleted okay yes

548
00:51:15,800 --> 00:51:17,800
Das ist nicht da okay

549
00:51:18,120 --> 00:51:20,920
Following networks will be deleted yes das ist auch nicht da

550
00:51:21,440 --> 00:51:24,360
Auf fällt was ist jetzt kaputt fuck alle

551
00:51:25,000 --> 00:51:40,570
Account account has been deleted ich habe doch irgendwo mist drinne stehen oder

552
00:51:48,370 --> 00:51:53,290
Ich habe doch irgendwo mist drin stehen ich habe noch irgendwo das falsche projekt drinne stehen oder so was

553
00:51:54,930 --> 00:51:56,970
Aber set project habe ich schon gemacht

554
00:51:57,970 --> 00:52:18,180
Achso ich kacknub ich bin im falschen verzeichnis

555
00:52:19,460 --> 00:52:37,280
Hat das jetzt ein bucket hat das jetzt ein bucket angelegt oder nicht

556
00:52:37,680 --> 00:52:51,960
Das ist jetzt mein komisches in it script was ich mir gebaut habe was hier querien start was zum

557
00:53:01,280 --> 00:53:03,480
Was ist mein was ist das?

558
00:53:05,680 --> 00:53:07,680
Er hat doch er hat doch

559
00:53:14,540 --> 00:53:18,820
Ich glaube ich bin noch mit ich glaube terraform denkt ich habe das falsche

560
00:53:21,140 --> 00:53:23,860
Ich glaube ich muss ich habe aus irgendwelchen gründen noch einen

561
00:53:24,900 --> 00:53:26,900
punkt terraform drinne

562
00:53:34,140 --> 00:53:36,460
Terraform hat noch meinen alten google account warum

563
00:53:42,310 --> 00:53:48,500
Ich habe ich habe kein altes

564
00:53:49,460 --> 00:53:51,460
Date file

565
00:53:52,260 --> 00:54:01,020
Ist ja nichts drin

566
00:54:01,420 --> 00:54:03,260
Achso

567
00:54:03,300 --> 00:54:05,300
Habe ich hier die richtigen end was

568
00:54:05,660 --> 00:54:09,340
Ne brutal und es ist doch mal ein richtiges projekt oder

569
00:54:10,700 --> 00:54:14,700
Alter das ist immer an so kleinen scheiß erst mal hängen das riecht mich auf

570
00:54:18,950 --> 00:54:20,950
das ist richtig

571
00:54:22,650 --> 00:54:25,730
Alter was ist mit meinem Wim los was ist hier für ein komisches zeichen drin

572
00:54:29,720 --> 00:54:33,720
Invalid account moment wo wo habe ich mich noch nicht eingeloggt

573
00:54:43,110 --> 00:54:48,920
Warte mal

574
00:54:49,400 --> 00:54:52,520
Ja nervt mich auf list

575
00:54:54,160 --> 00:54:57,880
Ich lösche ich lösche mal meinen alten account

576
00:54:58,400 --> 00:55:15,030
Ich glaube provoke ist es oder revoke hier moment vielleicht vielleicht ich mache ich mache das noch mal vielleicht

577
00:55:18,520 --> 00:55:21,800
Wer weiß vielleicht muss ich das noch mal setzen vielleicht hat das noch nicht gecheckt

578
00:55:25,100 --> 00:55:29,700
Park okay was ist das problem terraform man warum ist es warum ist mein

579
00:55:43,220 --> 00:55:45,620
Instances list ne das funktioniert alles

580
00:55:47,500 --> 00:55:49,020
Okay

581
00:55:49,020 --> 00:55:56,060
Big big brain time an welch warum denkt terraform dass ich noch nicht eingeloggt bin dass es doch mein alter account ist

582
00:56:11,910 --> 00:56:14,270
Gute idee aber ich glaube da steht nichts für drinne

583
00:56:15,030 --> 00:56:16,470
ne

584
00:56:16,470 --> 00:56:17,990
Ja

585
00:56:17,990 --> 00:56:21,430
Projekt da die projekte die ah ne es ist alles richtig

586
00:56:26,350 --> 00:56:28,350
welch an welcher stelle

587
00:56:36,500 --> 00:56:39,300
An welcher stelle mein terraform dass ich noch eingeloggt bin

588
00:56:43,090 --> 00:56:44,970
bei google fragen

589
00:56:44,970 --> 00:56:47,890
Das ist das liegt garantiert darin dass ich schon mal eingeloggt war

590
00:56:48,610 --> 00:56:50,610
100 pro

591
00:56:50,930 --> 00:56:54,770
Hier terraform returns invalid grant has been deleted

592
00:56:57,160 --> 00:57:01,040
Okay, it's an authentication issue for me whatsoever

593
00:57:05,900 --> 00:57:07,900
Meinen wegen

594
00:57:08,260 --> 00:57:16,340
Max pogu lockt sich ein allow okay und jetzt geht das

595
00:57:17,100 --> 00:57:22,220
Jetzt geht das okay google logik fragt mich nicht keine ahnung was das ding wieder für probleme hat

596
00:57:23,740 --> 00:57:28,900
So und jetzt kommen wir mal zu der eigentlichen geschichte was das coole an terraform ist ich habe jetzt hier meine komplette

597
00:57:29,180 --> 00:57:32,100
Infrastruktur definiert wie ich die haben will und jetzt sage ich einfach

598
00:57:33,180 --> 00:57:35,180
terraform apply

599
00:57:35,260 --> 00:57:38,900
Und jetzt guckt terraform nach was es machen müsste

600
00:57:39,900 --> 00:57:44,940
Um das was ich hier definiert habe in meinem terraform fall in der cloud auch so anzulegen so das ist ein summary

601
00:57:44,940 --> 00:57:52,500
Das steht drinne ich lege feuer ich lege eine firewall an und firewall regeln ich lege noch mehr firewall regeln an ich lege

602
00:57:52,500 --> 00:57:57,860
Eine vm an mit diesen sachen ich lege netzwerke interfaces an netzwerke an router an nat regeln an

603
00:57:58,500 --> 00:58:01,700
subnetze an netzwerke an das muss ich alles nicht von hand klicken jetzt

604
00:58:01,900 --> 00:58:06,340
Ich lege ein kubernetes cluster an alle möglichen geschichten jetzt sage ich einfach jawohl terraform mach

605
00:58:06,620 --> 00:58:11,220
Und jetzt können wir ungefähr zehn minuten däumchen drehen bis alles aufgebaut ist

606
00:58:12,220 --> 00:58:18,500
Das liegt nicht daran dass terraform so lahm ist das liegt daran dass google cloud beim erstellen von

607
00:58:19,420 --> 00:58:21,420
clustern übelst langsam ist

608
00:58:22,020 --> 00:58:28,580
Ich weiß nicht warum die so langsam sind aber die sind übelst langsam ihr werdet es gleich sehen das geht alles relativ schnell guck hier

609
00:58:28,820 --> 00:58:30,820
service account anlegen

610
00:58:31,540 --> 00:58:36,700
Netzwerke anlegen router anlegen firewall regeln anlegen überhaupt kein problem firewall regeln applyen

611
00:58:37,100 --> 00:58:42,740
Gar kein ding aber gleich gleich kommt der kubernetes cluster da werdet ihr sehen das hängt jetzt erst mal richtig

612
00:58:43,140 --> 00:58:45,140
richtig krass für zehn minuten rum

613
00:58:45,500 --> 00:58:51,020
Wenn man jetzt aber nachguckt wir können nämlich uns hier schon mal einloggen

614
00:58:51,900 --> 00:58:53,900
Wenn ich jetzt zum beispiel hier auf netzwerke

615
00:58:54,060 --> 00:58:58,660
Netzwerke gehen da werdet ihr sehen guck mal da es gibt jetzt schon ein neues netzwerk default das habe ich so genannt

616
00:58:58,860 --> 00:59:02,900
Ja aber auch feuerwollt regeln gehen wir hier oder gehen wir mal auf

617
00:59:06,380 --> 00:59:08,380
hier drauf

618
00:59:08,540 --> 00:59:15,060
Da wollt ihr da seht ihr auch subnetze subnetze haben wir internal das ist die das was wir vorhin definiert haben in unserem terraform file

619
00:59:15,220 --> 00:59:18,780
Und jetzt gehen wir bei firewall gucken guck hier sind auch meine firewall regeln drin

620
00:59:18,780 --> 00:59:23,300
allow all beste firewall regel überhaupt ja die die braucht man

621
00:59:24,700 --> 00:59:25,940
Cake wait

622
00:59:25,940 --> 00:59:30,500
Wie gesagt es ist eh alles intern in dem internen netzwerk da kommt man gar nicht so weit von außen hin

623
00:59:31,020 --> 00:59:38,260
So und jetzt läuft das erstellen des kubernetes clusters das seht ihr auch hier wenn man hier guckt falls es schon drinnen steht

624
00:59:39,380 --> 00:59:41,380
Ja guck hier

625
00:59:41,540 --> 00:59:45,300
Kubernetes cluster wird erstellt das dauert jetzt bestimmt sieben acht minuten

626
00:59:46,060 --> 00:59:51,380
Was wird hier gemacht wir bauen gerade infrastruktur in der google cloud auf und dann gucken wir wie man

627
00:59:52,060 --> 00:59:54,180
dieses feature verwenden kann von

628
00:59:55,780 --> 00:59:56,940
Cloud

629
00:59:56,940 --> 01:00:02,620
Und zwar das hier wie man von einer anwendung auf eine in der cloud gehosteten datenbank zugreifen kann ohne

630
01:00:02,940 --> 01:00:08,500
Dass man einen connection string braucht und ohne dass man ein passwort braucht und trotzdem ist das ganze sicher

631
01:00:11,310 --> 01:00:16,710
Das will ich mal ausprobieren weil ich denke mir das könnte bei uns auf der arbeit auch enorm viel bringen

632
01:00:16,910 --> 01:00:21,510
zur zeit haben wir so ein bisschen ich versuche mal das problem zu erklären zur zeit haben wir so ein bisschen das problem

633
01:00:21,910 --> 01:00:28,110
Das beispielsweise auf unseren kubernetes clusters kann aber auch genauso gut auf vm sein das ist eigentlich egal es macht keinen unterschied

634
01:00:28,110 --> 01:00:30,110
Guck hier ist es auch eine vm in dem beispiel

635
01:00:30,630 --> 01:00:32,630
Aber das problem

636
01:00:32,790 --> 01:00:39,510
Dass wenn man sich zu einer datenbank connecten will dass man immer eine riesen zeremonie betreiben muss ja man muss sich irgendwelche neuen user

637
01:00:39,510 --> 01:00:41,510
besorgen muss ich welche passwörter besorgen

638
01:00:41,910 --> 01:00:47,150
Man muss sich connection strings besorgen und da drehen die entwickler immer halb am rad wenn die dann halben tag warten bis sich irgendjemand

639
01:00:47,150 --> 01:00:53,710
Darum gekümmert hat ist aber auch kacke so und was ich mir jetzt überlegt habe was man was wir machen können ist

640
01:00:54,150 --> 01:00:57,350
Wir richten einmal pro cluster

641
01:00:59,430 --> 01:01:02,030
Einen service ein für diesen

642
01:01:02,830 --> 01:01:08,230
Proxy wobei ich darf euch gleich verrichten ist nicht wirklich einmal pro service ein wir machen das ein bisschen anders

643
01:01:08,790 --> 01:01:14,390
Gucke ich mir dann an wenn wir so weit so weit sind also sagen wir mal so wir richten pro anwendung einen service ein

644
01:01:15,670 --> 01:01:17,710
Über den man sich zur datenbank connecten kann

645
01:01:18,110 --> 01:01:24,430
Und das einzige was die leute machen müssen ist den passenden service account angeben zum connecten zur datenbank

646
01:01:25,790 --> 01:01:30,990
Und solange sie die rechte haben damit dann geht es dann können sie einfach in ihre anwendung eintragen

647
01:01:31,030 --> 01:01:36,790
Ich will mich connecten auf localhost port 5000 und es geht du brauchst keine

648
01:01:38,070 --> 01:01:45,910
Datenbank passwörter mehr du brauchst keine datenbank connection strings mehr und auch keine ips und sowas also das wäre wirklich für alle beteiligt eine

649
01:01:45,910 --> 01:01:52,070
Riesen erleichterung wenn das gut funktioniert so und warum ich jetzt überhaupt auf die idee komme ich habe folgendes gefunden von google

650
01:01:55,590 --> 01:01:56,830
GitHub

651
01:01:57,670 --> 01:02:00,590
Sql-proxy operator google hat vor so

652
01:02:03,070 --> 01:02:05,070
Monat eins zwei monaten

653
01:02:06,950 --> 01:02:11,710
Eins zwei monaten hat google dieses ding hier released das ist ein kubernetes operator

654
01:02:12,470 --> 01:02:16,150
To bla bla bla bla man muss es im endeffekt gar nicht wissen was es macht

655
01:02:17,110 --> 01:02:21,710
Anhand dieser beschreibung das ist ein service den installiere ich in meinem kubernetes cluster

656
01:02:22,550 --> 01:02:29,230
Und der guckt dann ich kann euch mal das example zeigen dann wird es eigentlich relativ schnell klar

657
01:02:30,510 --> 01:02:32,510
Docs example

658
01:02:33,510 --> 01:02:41,430
Postgres so also alles was wir beispielsweise als admins von diesem server machen müssten wäre dann sowas hier anlegen

659
01:02:42,910 --> 01:02:48,470
Übrigens der twitch chat ist gerade kaputt nicht wundern wenn ich gerade nichts mehr sehe weiß nicht was der für schmerzen hat der twitch

660
01:02:48,630 --> 01:02:53,230
Jetzt der twitch chat geht wieder so wir würden einmal pro cluster sowas anlegen

661
01:02:53,990 --> 01:03:01,510
Und wichtig ist dass man den workload selector richtig setzt was das jetzt macht ist folgendes der baut quasi für jede

662
01:03:01,750 --> 01:03:04,070
Anwendung jemand auf diesem cluster deployed

663
01:03:04,710 --> 01:03:06,710
sowas hier automatisch

664
01:03:06,870 --> 01:03:08,870
auf also sprich

665
01:03:10,030 --> 01:03:12,470
Irgendjemand deployt eine neue anwendung auf den cluster

666
01:03:13,230 --> 01:03:15,230
labelt diese anwendung richtig

667
01:03:15,750 --> 01:03:20,350
Und automatisch passiert beim starten der anwendung unter der haube durch diesen

668
01:03:20,910 --> 01:03:28,230
Cloud sql proxy operator folgendes jede anwendung kriegt noch zusätzlich einen container mit dem sql proxy gestartet

669
01:03:28,310 --> 01:03:30,390
über den er dann auf die datenbank connecten kann

670
01:03:31,070 --> 01:03:38,470
Ohne dass die sich selbst beim deployment der anwendung oder bei irgendwie drum kümmern müssen das einzige was die noch machen müssen ist

671
01:03:38,470 --> 01:03:40,470
Um sicher auf die datenbank connecten zu können

672
01:03:41,030 --> 01:03:49,760
Ja eigentlich nur den user wissen für die datenbank und den da also den name der datenbank brauchen die noch also zum beispiel hier

673
01:03:52,040 --> 01:03:56,160
Meine tolle anwendungs die also die die die datenbank

674
01:03:56,160 --> 01:04:00,560
Also nicht ich meine es nicht den host namen sondern den namen der datenbank im endeffekt braucht man noch

675
01:04:01,200 --> 01:04:09,040
Und den user alles andere handelt dieser proxy client wenn das denn so funktioniert und das ist natürlich mega nice

676
01:04:09,040 --> 01:04:11,040
Du kannst einfach ganz viel zeug deployen

677
01:04:11,440 --> 01:04:21,670
Du text das richtig und du hast zugriff auf die datenbank kannst du darüber auch dann berechtigung schon also sprich auf die ja kannst du

678
01:04:21,870 --> 01:04:23,110
kannst du

679
01:04:23,110 --> 01:04:28,750
Das also zumindest soweit ich das verstanden habe kannst du das und zwar funktioniert das folgendermaßen wir können ja schon mal eine

680
01:04:29,470 --> 01:04:32,310
Cloud sql datenbank anlegen wenn wir gerade dabei sind

681
01:04:33,470 --> 01:04:35,150
Wo ist meine google?

682
01:04:35,150 --> 01:04:37,870
Der kubernetes cluster wird noch erstellt das dauert jetzt auch ein bisschen

683
01:04:38,070 --> 01:04:43,230
Wir legen jetzt mal eine datenbank in der cloud an ich versuche ich das versuche ich das mal zu zeigen also create instance

684
01:04:46,540 --> 01:04:50,980
Schau dir mal go teleport an ist was ähnliches opensource nee das bringt mir in dem fall nix

685
01:04:51,820 --> 01:04:59,260
Ich will es ja von meinem google kubernetes cluster machen mit berechtigung die in der google cloud sind auf google services nee das

686
01:04:59,900 --> 01:05:06,300
Bringt mir jetzt an dem fall das würde vielleicht was bringen wenn ich mich von irgendwelchen anderen anbietern dahin connecten will oder so ich

687
01:05:06,300 --> 01:05:07,540
Kenne das ich kenne das

688
01:05:07,540 --> 01:05:11,740
So wir legen jetzt mal eine datenbank in der cloud an also das ding nennt sich instance id

689
01:05:16,390 --> 01:05:18,390
Instance id

690
01:05:21,710 --> 01:05:25,220
PrimeSubOr

691
01:05:28,500 --> 01:05:30,500
Ausfall

692
01:05:32,220 --> 01:05:36,420
PrimeSubBrot heißt das ding okay so passwort generieren

693
01:05:37,620 --> 01:05:43,780
Vollkommen egal das brauchen wir gar nicht also wenn das richtig funktioniert dann sollten wir dieses passwort nie brauchen zum connecten

694
01:05:45,060 --> 01:05:51,500
Wir wählen hier zwar also enterprise plus datenbank wir müssen es nicht übertreiben wir brauchen jetzt für unseren test

695
01:05:51,740 --> 01:05:57,260
Keine 99,99 prozent sla und wir werden das ganze auch ein bisschen

696
01:05:57,740 --> 01:06:04,300
Runterschreiben runterschrauben auf eine development datenbank vier cpu 60 100 gigabyte storage reicht immer noch

697
01:06:05,540 --> 01:06:11,900
Und wir gehen sogar noch ein stückchen weil wir sagen single zone single zone das ganze soll europa ist drei in der frankfurt

698
01:06:16,420 --> 01:06:17,580
und

699
01:06:17,580 --> 01:06:22,220
Hier gehen wir jetzt mal so weit und sagen machine configuration

700
01:06:22,980 --> 01:06:30,460
Eigentlich reichen wir zwei cpus und 8 gigabyte ram dicker aus ich mache ja mit der datenbank nix bei connection

701
01:06:31,060 --> 01:06:35,020
Machen wir public ip weg wir wollen keine public ip wir wollen nur eine private ip

702
01:06:36,300 --> 01:06:39,580
Netzwerk default ja da muss man hier noch ein bisschen zeug klicken

703
01:06:41,660 --> 01:06:46,940
Google gedöhnt das dauert jetzt kurz das muss man nur einmalig machen weil das projekt neu ist das noch nicht da

704
01:06:46,940 --> 01:06:51,340
Aber es scheint auf den ersten blick nichts vergleichbares zu haben

705
01:06:52,300 --> 01:06:57,940
Gute frage weiß ich nicht ich kenne mich ich glaube dir das mal weil ich also ich kenne mich mit aws nicht gut genug aus

706
01:06:57,940 --> 01:07:01,500
Das zu wissen das zu wissen ich bin mir nicht sicher ob er sowas hat

707
01:07:01,900 --> 01:07:06,760
Ich habe ich habe eine weile mit er schon nichts mehr gemacht, aber ich glaube

708
01:07:07,720 --> 01:07:10,640
Es hat so eine art database gateway

709
01:07:15,510 --> 01:07:22,310
Ja, es gilt database gateway also die haben auch irgendwie sowas ähnliches habe ich aber in erster noch nie benutzt

710
01:07:24,780 --> 01:07:27,100
Jetzt schauen wir uns mal an was questions gibt

711
01:07:29,510 --> 01:07:32,710
Das stimmt ja muss ich sagen finde ich mittlerweile auch

712
01:07:35,390 --> 01:07:39,110
Aber insgesamt mag ich die asia july trotzdem noch noch lieber

713
01:07:40,070 --> 01:07:42,070
habe ich gerade schon erklärt

714
01:07:47,890 --> 01:08:04,120
hat

715
01:08:04,120 --> 01:08:06,120
Mehr gab es eigentlich gar nicht

716
01:08:06,440 --> 01:08:11,320
Ja wie gesagt ich denke mal sehen was um 200 euro ich bin gar nicht sicher ob das nicht vielleicht sogar

717
01:08:11,880 --> 01:08:14,960
Irgendwo dran steht wenn ich in den cluster gleich reingehe

718
01:08:19,060 --> 01:08:26,380
Jeder in der erstellung es kann sein dass wenn man hier mal bei kubernetes engine klasse manchmal machen die vorschläge so spare so und so viel

719
01:08:26,380 --> 01:08:28,380
geld im monat

720
01:08:28,620 --> 01:08:34,580
Ihr kost optimale da kann man gleich mal reingucken vielleicht sieht man irgendwo was ist was es einen theoretisch kosten würde

721
01:08:37,660 --> 01:08:41,580
Gcp kost calculation asia hat einen guten

722
01:08:43,020 --> 01:08:45,020
Calculator

723
01:08:45,020 --> 01:08:48,100
Probiert probiert es doch mal aus was was würde mich das ganze kosten ja

724
01:08:48,860 --> 01:08:56,690
Also compute engine standard gke wollen wir haben total number of nodes ja macht es mal kurz aus

725
01:08:58,250 --> 01:09:08,060
What are these notes egal free container optimus provisioning model regular

726
01:09:08,860 --> 01:09:12,810
ja

727
01:09:12,890 --> 01:09:15,830
Can general purpose series e 2

728
01:09:16,810 --> 01:09:19,890
Standard 4 ok 4 ok wir haben

729
01:09:20,530 --> 01:09:23,490
Der ist der ist maßlos da ist unser cluster leute

730
01:09:25,250 --> 01:09:29,130
Wir haben wir haben pro node 4 cpus und 16 gramm

731
01:09:29,850 --> 01:09:31,690
Ja gut

732
01:09:31,690 --> 01:09:35,330
Ich glaube ich glaube 40 g haben wir genommen für die disk

733
01:09:39,990 --> 01:09:44,510
Frankfurt

734
01:09:44,510 --> 01:09:49,100
24 aus

735
01:09:50,260 --> 01:10:00,800
Ok gucken billig ist es nicht

736
01:10:02,360 --> 01:10:21,060
Ist das bei gcp auch so undurch ja das ist so eine wissenschaft für sich welche welche vms man auswählen sollte welche typen

737
01:10:21,460 --> 01:10:28,880
Und manchmal rät google auch explizit ab dafür was zu benutzen aber im endeffekt ist es das beste keine ahnung

738
01:10:29,240 --> 01:10:37,110
Doch netzwerke kostet auch ein bisschen was habe ich erwähnt ist auch schon teuer genug oder

739
01:10:37,710 --> 01:10:44,990
Also das ist ordentlich

740
01:10:46,810 --> 01:10:48,810
400 euro im monat

741
01:10:49,250 --> 01:10:57,100
Da hast du also ganz ehrlich für 400 euro im monat kann ich mir über digital ocean

742
01:10:59,140 --> 01:11:00,380
Ordentlichen

743
01:11:00,380 --> 01:11:01,940
cluster kaufen

744
01:11:01,940 --> 01:11:12,100
Der performance technisch stehen hier wahrscheinlich in die tasche steckt mit kleineren nodes aber ist es deutlich günstiger also was ich empfehlen kann zum

745
01:11:12,540 --> 01:11:14,100
ausprobieren ist

746
01:11:14,100 --> 01:11:18,380
Was einfach mal ein 2 node cluster oder kannst du kann ein node cluster machen

747
01:11:18,700 --> 01:11:23,980
Dann machen wir das kleinste was geht du willst e 2 und e 2 small

748
01:11:24,500 --> 01:11:29,020
Das ist so dass das minimalste was ich was ich irgendwie empfehlen würde ein gigabyte ram ist zu wenig

749
01:11:29,500 --> 01:11:33,340
Und hier kannst du auch nicht hier kannst du auch schon nicht alle workloads richtig richtig starten

750
01:11:34,700 --> 01:11:40,100
So und dann waren wir hier 40 40 gig disk noch mal obendrauf at the estimator

751
01:11:41,140 --> 01:11:43,220
Das kostet ich das kostet ich 20

752
01:11:45,060 --> 01:11:53,780
Wobei realistischer realistischer ist natürlich wenn du wenn du drei node cluster machst und

753
01:11:54,860 --> 01:11:56,860
Dann kostet sich das 60 euro im monat

754
01:11:59,300 --> 01:12:01,900
Also dass das dann sind wir schon da sind wir schon

755
01:12:02,900 --> 01:12:09,780
Etwas etwas normale aber damit kannst du jetzt wirklich keine großen sprünge machen mit so einem kleinen cluster weil das sind zwei cpu

756
01:12:09,780 --> 01:12:12,140
kerne und 2 gigabyte ram pro

757
01:12:12,700 --> 01:12:18,940
Node also da machst du echt keine das ist das ist im prinzip ungefähr die leistungsfähigkeit vom raspberry pi 4

758
01:12:21,970 --> 01:12:24,090
Kannst du kein also ne noch netter mal

759
01:12:24,610 --> 01:12:34,780
Da sind ja noch netter mal das sind ja die die kleinen das sind ja die ganz kleinen hier

760
01:12:34,940 --> 01:12:39,220
Das ist ja noch nicht mal die sind shared core die kannst du noch mal sagen was es also

761
01:12:40,100 --> 01:12:43,540
Da kannst du echt nicht viel drauf echt nicht so viel damit anfangen

762
01:12:44,380 --> 01:12:49,580
Bei kleinen sachen kleine webanwendung und so kannst du ohne probleme drauf laufen lassen aber 2 gig ram

763
01:12:49,860 --> 01:12:52,860
Zwei kerne es ist schon schon echt ein bisschen

764
01:12:53,460 --> 01:12:58,740
Naja wir können das ganze mal ein bisschen realistischer man sagen wir nehmen jetzt nicht die shared core wir nehmen den kleinsten

765
01:12:58,900 --> 01:13:02,900
Wir nehmen quasi den den den kleinsten normalen ja okay

766
01:13:04,780 --> 01:13:10,700
Und dann sind wir schon bei 200 euro im monat also billig ist hosted manage kubernetes bei google wirklich nicht

767
01:13:14,470 --> 01:13:16,430
Unser cluster ist da

768
01:13:16,430 --> 01:13:18,990
Nice so lege ich mal kurz unsere datenbank an

769
01:13:19,790 --> 01:13:25,470
Kennt sich jemand mit e-commerce aus gibt es tools wo gratis sind für performance analyse von meinem shop

770
01:13:26,350 --> 01:13:33,670
Ja du willst du willst quasi so analytics haben so wie lange gehen die leute drauf ja was ich ganz nice was ich benutzt habe mal

771
01:13:34,670 --> 01:13:38,270
Wie gesagt ich bin nicht hauptberuflicher frontend entwickler oder sonst was

772
01:13:39,270 --> 01:13:43,150
War das hier da gibt es aber noch mehrere tools in dieser richtung

773
01:13:44,470 --> 01:13:52,030
Das gute an dem ist dass die sagen sie sind der skv kompatibel weil sie standardmäßig nur hashes speichern und keine ips und sonst was

774
01:13:52,910 --> 01:13:56,150
Sieht sieht dann folgendermaßen aus glaube ich hoffe die haben eine demo

775
01:13:56,150 --> 01:14:03,150
Ja sowas kannst du dir dann angucken guck da hast du so minimale analytics soweit es halt möglich ist ohne ohne zu richtig gut zu tracken

776
01:14:03,710 --> 01:14:08,870
Was ist also siehst du kannst unique visitors kannst du dir kannst du dir angucken bounce rate wie die leute ab

777
01:14:09,430 --> 01:14:17,150
Abhauen von einem shop welche seiten also von welchen seiten die kommen auf welche seiten hauptsächlich zugegriffen wird welche browser die verwenden

778
01:14:17,150 --> 01:14:21,590
So das habe ich auch verwendet fand ich gut lässt sich auch easy auf einer mini mini mini vm

779
01:14:22,230 --> 01:14:29,190
Hosten oder sogar auf der gleichen vm wo du dann deinen shop drauflaufen lasst lässt oder zusätzlich als in einem container wenn sie im klartem koordinates läuft

780
01:14:29,910 --> 01:14:31,910
Umami ist kaputt auf am 64

781
01:14:34,720 --> 01:14:36,720
Wie bewertet man ein korp

782
01:14:40,870 --> 01:14:43,910
Das ist in der tat ein bisschen wissenschaft für sich was es für einen korp ist

783
01:14:45,390 --> 01:14:47,390
Es gibt irgendwo eine liste

784
01:14:48,310 --> 01:14:53,270
Was da genau dahinter steckt aber so hundertprozentig wissen tut man es glaube ich nicht

785
01:14:53,270 --> 01:14:57,470
Es kommt ein bisschen auf den maschinentype an also die sagen ja auch zum beispiel

786
01:14:58,430 --> 01:15:00,430
Ja wenn man hier guckt

787
01:15:00,950 --> 01:15:04,910
Ja zum beispiel hier n2 da guck hier die kannst du nachgucken

788
01:15:07,980 --> 01:15:10,940
Beispielsweise wenn du maschinen nimmst vom typ n2

789
01:15:11,580 --> 01:15:17,540
Dann ist das ice lake oder cascade lake zum größten teil wenn du

790
01:15:18,300 --> 01:15:21,100
E2 nimmst dann schreiben sie beispielsweise

791
01:15:21,100 --> 01:15:23,100
Das sind die älteren dann kannst du noch

792
01:15:23,740 --> 01:15:30,180
N1 machines nehmen das also ein bisschen was steht da aber oftmals so ganz genau wissen tut man das nicht

793
01:15:30,860 --> 01:15:32,860
So legen wir mal unsere datenbank an

794
01:15:34,940 --> 01:15:37,260
Bla bla bla bla ich wollte noch die

795
01:15:56,860 --> 01:16:01,340
Die disk verkleinern habe ich das gemacht 20g für eine test datenbank

796
01:16:01,980 --> 01:16:05,610
Das ist übrigens auch ein sehr guter begriff

797
01:16:06,130 --> 01:16:09,930
Du kannst automatisch den speicherplatz einer datenbank erhöhen lassen

798
01:16:10,930 --> 01:16:13,410
Wenn du an das speicher limit kommst

799
01:16:14,730 --> 01:16:20,330
Unter der haube weiß ich nicht wie die das machen ob sie in lvm resize oder irgendwie magic speicher haben wie sie das machen

800
01:16:20,330 --> 01:16:24,850
Wie auch immer das eben genau implementiert ist das ist ja nice allerdings muss man halt sagen google macht es natürlich

801
01:16:25,890 --> 01:16:27,450
mit

802
01:16:27,450 --> 01:16:29,450
mit dem disk verkleinern

803
01:16:29,610 --> 01:16:34,250
Implementiert ist das ist ja nice allerdings muss man halt sagen google macht es natürlich

804
01:16:35,450 --> 01:16:39,730
Ja aus geld verdienen gründen also wenn du nicht aufpasst

805
01:16:40,370 --> 01:16:42,890
Und deine datenbank gerade über nacht explodiert

806
01:16:43,610 --> 01:16:46,780
kostet bis sie geld

807
01:16:46,780 --> 01:16:51,860
Ach ja und zum testen würde ich auch noch eine sache machen ich würde data protection ausschalten

808
01:16:52,140 --> 01:16:58,500
Weil ansonsten musste nachher dreimal klicken wenn du die datenbank wieder löschen willst normalerweise würde ich data protection immer anlassen da kann man nämlich

809
01:16:58,500 --> 01:17:00,500
nicht ausversichern die datenbank löschen

810
01:17:02,260 --> 01:17:08,300
Und maintenance window nicht backup window maintenance window ist bei kubernetes ich hab mich vertan

811
01:17:10,860 --> 01:17:14,670
Create

812
01:17:14,670 --> 01:17:17,550
Don't save ich brauche das passwort nicht wenn alles gut läuft

813
01:17:22,220 --> 01:17:24,620
Leute ich esse nebenbei mal kurz ein brötchen ich habe übelst Hunger

814
01:17:35,960 --> 01:17:43,640
Gut und ihr seht das ganze lief jetzt ungefähr 12 13 minuten mein mein mein ganzes terraform

815
01:17:44,920 --> 01:17:50,320
Wie heißt denn das eigentlich bei ansible sind es playbooks wie nennen sich das bei terraform

816
01:17:51,440 --> 01:17:54,120
Es lief gerade mein ganzes terraform

817
01:17:55,560 --> 01:17:57,080
Deployment

818
01:17:57,080 --> 01:18:01,160
ressourcen plan

819
01:18:01,800 --> 01:18:04,040
Gute frage weiß gar nicht wie die das nennen

820
01:18:06,860 --> 01:18:15,250
Was genau wollte eigentlich machen also guck mal wir wollen folgendes machen wir wollen eine anwendung betreiben

821
01:18:16,570 --> 01:18:18,570
Die auf der datenbank zugreift

822
01:18:19,570 --> 01:18:25,610
Allerdings sollte nicht direkt auf die datenbank zugreifen mit connection string username und passworten alle möglichen sondern

823
01:18:26,050 --> 01:18:32,850
Über einen proxy so dass die anwendung selbst überhaupt nichts mehr großartig wissen muss außer den namen der datenbank

824
01:18:33,890 --> 01:18:37,730
Dafür haben wir jetzt mit terraform und kubernetes klasse aufgebaut

825
01:18:38,210 --> 01:18:45,050
Wir haben ich zeige euch mal was wir gerade alles aufgebaut haben also ihr werdet gleich feststellen es ist schon einiges was terraform im hintergrund

826
01:18:45,050 --> 01:18:46,810
gemacht hat also

827
01:18:46,850 --> 01:18:52,210
Als erstes haben wir mal ein bucket für unseren terraform state das ist jetzt aber nur so am rande

828
01:18:52,610 --> 01:18:55,410
Dann wurde aufgebaut ein kubernetes cluster

829
01:18:56,970 --> 01:19:04,650
Mit drei nodes insgesamt 12 cpus und 48 gigabyte ram low resource request oh oh das ist nicht gut

830
01:19:05,530 --> 01:19:07,810
Also das ist dass man geld sparen kann

831
01:19:10,860 --> 01:19:13,540
Guck jetzt sagen sie einmal könnte man kein geld sparen wenn man das

832
01:19:16,180 --> 01:19:18,180
Umallocated

833
01:19:18,820 --> 01:19:23,100
Kostoptimation lul wir wollen keine kosten optimiert haben kubernetes klasse angelegt

834
01:19:23,820 --> 01:19:25,820
Dann hat terraform eine

835
01:19:26,340 --> 01:19:32,780
Jump vm angelegt das sind übrigens die nodes von unserem cluster jene vm über die wir uns dann connecten können

836
01:19:34,460 --> 01:19:37,660
Dann wurde ein netzwerk angelegt

837
01:19:39,100 --> 01:19:46,660
Mit einem subnetz mit den ip ranges die wir haben und es wurden firewall regeln angelegt

838
01:19:51,270 --> 01:20:03,330
Es wurden firewall regeln angelegt wo ich hoffe dass alle funktionieren ja das das war es eigentlich soweit

839
01:20:08,480 --> 01:20:10,480
Note bitte mal erklären

840
01:20:10,760 --> 01:20:17,090
Ein kubernetes cluster besteht aus mehreren nodes

841
01:20:19,550 --> 01:20:25,710
Und jeder node in diesem kubernetes cluster ist in der google cloud halt unter der haube auch nur eine vm

842
01:20:26,390 --> 01:20:29,630
Ich meine irgendwo müssen ja im endeffekt deine sachen drauf laufen

843
01:20:30,310 --> 01:20:37,830
Sie laufen in einem container in dem kubernetes cluster aber irgendwo unten drunter besteht dieser kubernetes cluster aus drei nodes und in dem fall drei vms

844
01:20:39,150 --> 01:20:44,030
Und im prinzip sind es auch genau die drei vms die wir vorhin über terraform professioniert haben was man hier auch sieht

845
01:20:44,310 --> 01:20:48,630
E2 standard nach guck mal cpu plattform ein intel broadwell haben wir am start

846
01:20:51,880 --> 01:20:57,040
Hast du eine konkrete anwendung für die datenbank also jetzt hier zum testen ja also zum testen habe ich eine ja

847
01:21:01,520 --> 01:21:05,400
Aber es geht hauptsächlich darum den den proxy zu testen

848
01:21:07,760 --> 01:21:10,560
Warum sagt man node anstatt der vm das ist immer die frage

849
01:21:11,280 --> 01:21:15,840
Auf was man auf was man sich bezieht wenn man sich bei einem kubernetes cluster auf die

850
01:21:16,600 --> 01:21:23,400
Einzelteile bezieht aus die der cluster besteht dann sagt man node wenn man sich auf das teil bezieht auf dem der node läuft

851
01:21:23,960 --> 01:21:30,160
Beziehungsweise der der quasi teil des kubernetes clusters ist joint als neuer node dann ist es eine vm

852
01:21:30,160 --> 01:21:35,280
Also wenn du zum beispiel fragst aus wie viel nodes besteht ein kubernetes cluster dann kannst du sagen drei stück

853
01:21:35,960 --> 01:21:37,280
und

854
01:21:37,400 --> 01:21:39,720
Jeder dieser nodes ist eine vm

855
01:21:40,280 --> 01:21:46,710
Es muss ja nicht in der vm in der google cloud seine node könnte auch beispielsweise in raspberry pi bei dir daheim sein

856
01:21:46,990 --> 01:21:49,510
Den kubernetes cluster join lässt

857
01:22:00,500 --> 01:22:02,700
Guck mal kurz ob unsere datenbank da ist

858
01:22:03,340 --> 01:22:07,440
nee noch nicht

859
01:22:07,440 --> 01:22:13,740
Die datenbank ist glaube ich erst auf vier prime subs da

860
01:22:14,980 --> 01:22:17,760
Braucht erstaunlich lange die datenbank bis die da ist

861
01:22:20,180 --> 01:22:23,740
Na gut

862
01:22:23,740 --> 01:22:25,300
warten wir mal ab

863
01:22:25,300 --> 01:22:31,260
Ist aber nicht schlimm wenn die datenbank ein zwei minuten noch aufbaut dann kann ich mal kurz mein toastbrot beziehungsweise ein brötchen danach fertig

864
01:22:31,260 --> 01:22:39,220
fordern und die jump vm ist was ganz einfaches

865
01:22:39,740 --> 01:23:01,480
Ich zeige dir was die vm ist die vm

866
01:23:02,080 --> 01:23:06,760
Ist schlicht und ergreifend diese jump vm ist schlicht und ergreifend eine ganz normale debian vm

867
01:23:07,880 --> 01:23:14,280
Eine ganz stinknormale debian vm über die ich mich in das netzwerk auf der google cloud connecten kann

868
01:23:14,840 --> 01:23:16,840
guck da sind wir hier

869
01:23:20,940 --> 01:23:25,220
Endprog das ist eine vm mit zwei cpu kern und

870
01:23:26,740 --> 01:23:28,740
Einem gig ramm

871
01:23:28,940 --> 01:23:34,460
Und jetzt bin ich hier per ssh auf der vm und du siehst ich bin im netz wo auch der kubernetes cluster steht das heißt

872
01:23:34,460 --> 01:23:37,860
Ich kann jetzt hier sowas machen wie cube ctl bla bla bla auf dieser vm

873
01:23:38,620 --> 01:23:44,180
Ich jumpe in das netzwerk genau deswegen heißt das ding jump kann ich mir merken wofür die da ist

874
01:23:46,240 --> 01:23:48,840
Benutzt du den jump für die cube ctl befehle naja

875
01:23:49,720 --> 01:23:51,720
Kann man machen kann man machen

876
01:23:51,960 --> 01:23:58,480
Gibt mehrere möglichkeiten was man jetzt machen kann also da kann ich vielleicht auch mal erzählen kurz während ich die datenbank ist da aber ich erzähl

877
01:23:58,480 --> 01:23:59,960
es trotzdem mal kurz

878
01:23:59,960 --> 01:24:06,720
Ja, ja bei bei asia heißt das ding übrigens sogar ganz offiziell glaube ich jump bastion oder so ja genau

879
01:24:07,240 --> 01:24:18,240
War mal das mikrofon hoch dabei dass ich euch nicht ins ohr schmatze

880
01:24:18,760 --> 01:24:42,420
Chat was gab es bei euch heute zu futtern?

881
01:24:56,260 --> 01:24:57,900
Nudeln mit lachseier

882
01:24:57,900 --> 01:25:20,380
glaube ich dir sofort

883
01:25:20,380 --> 01:25:25,460
Noch auf der abend macht zu 47 das aber ganz schön spät also um zurückzukommen

884
01:25:27,140 --> 01:25:32,300
Hast du eigentlich mal überlegt als freiberuflicher dozent nein nein da habe ich da habe ich nicht wirklich so viel bock drauf

885
01:25:33,780 --> 01:25:36,520
Auf ja habe ich mir überlegt ist mir aber zu stressig

886
01:25:38,180 --> 01:25:41,260
Aber ich habe ich keinen bock drauf musik track kann ich dir zeigen

887
01:25:42,700 --> 01:25:44,700
Ja

888
01:25:45,100 --> 01:25:47,740
Epic chillstep collection 2019

889
01:25:48,740 --> 01:26:01,340
Man hört es ja auch wie epik das ist ja kann ich dir auch was dazu dazu sagen

890
01:26:02,460 --> 01:26:09,740
Also kommen wir mal zurück zur ursprünglichen frage tommy erinnert mich dran wenn ich es nicht nachher vergesse aber kommen wir erstmal zur ursprünglichen frage

891
01:26:10,340 --> 01:26:14,860
Benutzt du diese vm in der cloud um cube ctl befehle auszuführen also cube ctl ist das

892
01:26:15,460 --> 01:26:22,300
Administrations tool für kubernetes ja könnte man machen ich könnte jetzt hier sowas sagen wie cube ctl get pods minus a und sowas aber

893
01:26:23,060 --> 01:26:27,980
Es gibt jetzt mehrere möglichkeiten wie man das ganze machen kann man kann sich per ssh hier drauf connecten

894
01:26:28,540 --> 01:26:31,940
und den kubernetes cluster von hier administrieren man kann

895
01:26:33,780 --> 01:26:35,460
Zeige euch das mal

896
01:26:35,460 --> 01:26:42,980
Man kann auch das finde ich persönlich einen ganz guten ganz guten mittelweg man kann auch sowas hier machen

897
01:26:43,380 --> 01:26:47,960
ihr schaut mal

898
01:26:47,960 --> 01:26:56,570
Wisst ihr was das jetzt macht das ist eigentlich mega five hat ssh befehlen das lockt sich per ssh ein

899
01:26:57,130 --> 01:26:59,130
auf dieser kiste

900
01:26:59,290 --> 01:27:06,330
Und macht jetzt ein port auf lokal lokal habe ich jetzt im port laufen der sich netztät minus tulpen

901
01:27:06,690 --> 01:27:10,130
habe ich lokal habe ich jetzt im port 1337 laufen

902
01:27:11,610 --> 01:27:14,850
Und das ist ein socks proxy das heißt ich kann jetzt

903
01:27:15,850 --> 01:27:19,570
Muss ich mal kurz raussuchen wie das funktioniert

904
01:27:20,530 --> 01:27:25,100
Ja, ich kann jetzt ein socks proxy setzen

905
01:27:25,940 --> 01:27:27,940
hier so

906
01:27:28,740 --> 01:27:34,140
Cube ctl get pods minus a das wird noch nicht funktionieren weil ich erst mal mich anmelden muss bei google

907
01:27:34,380 --> 01:27:36,700
Damit ich auf mein kubernetes cluster zugreifen kann

908
01:27:37,860 --> 01:27:39,700
war jetzt mal schnell

909
01:27:39,700 --> 01:27:43,740
primary

910
01:27:43,740 --> 01:27:45,260
connect

911
01:27:45,260 --> 01:27:47,260
copy paste

912
01:27:47,940 --> 01:27:49,540
Richtig ja

913
01:27:49,540 --> 01:27:53,380
Okay, so und jetzt setze ich den setze ich den

914
01:27:54,580 --> 01:27:59,900
Socks proxy und für kube ctl aus und zack kann ich mein kubernetes cluster administrieren

915
01:28:00,900 --> 01:28:02,900
hat übrigens mit der connection hier oben nichts zu tun

916
01:28:04,340 --> 01:28:06,900
Also die zwei varianten die zwei varianten gibt es

917
01:28:07,740 --> 01:28:12,260
Das hat natürlich was mit der connection hier oben zu tun nicht ich kack nur weil hier oben ist die connection

918
01:28:13,900 --> 01:28:16,300
Die connection in das netzwerk gewesen

919
01:28:18,600 --> 01:28:22,120
Also guckt das funktioniert also was was jetzt passiert ist folgendes

920
01:28:22,520 --> 01:28:27,320
Das ist das ist wirklich ein sehr guter kompromiss auch zu einem vpn oder sowas weil es einfach mega easy ist

921
01:28:27,440 --> 01:28:29,440
Also was hier passiert ist eigentlich ganz einfach

922
01:28:30,200 --> 01:28:37,320
Mit mit dem google cloud tool baut man eine ssh verbindung auf über den tunnel muss man nicht wissen was es ist

923
01:28:37,480 --> 01:28:42,400
Das ist das ist von google was um tcp ip traffic zu tunneln

924
01:28:43,400 --> 01:28:49,480
Also so baut man einen tunnel auf seine vm auf die also baut ssh verbindung auf die vm auf die sich jump nennt

925
01:28:50,440 --> 01:28:52,440
Und das dahinten sind ssh

926
01:28:52,640 --> 01:28:59,160
Options und minus d 1337 bei ssh ist mache einen socks proxy auf auf lokal port 1337

927
01:28:59,440 --> 01:29:05,480
Und alles was über diesen port geht geht dann über den tunnel zur vm und dort dann als ausgang über die vm das heißt ich

928
01:29:05,480 --> 01:29:07,480
baue jetzt einen tunnel auf

929
01:29:07,840 --> 01:29:15,440
Und kann jetzt beim cube ztl sagen benutzt diesen socks proxy um dich über die vm zu tunneln in das netz bei google

930
01:29:15,960 --> 01:29:17,960
Kann man der ganze sache halbwegs folgen

931
01:29:18,880 --> 01:29:25,440
Also die verbindung geht jetzt im endeffekt hierhin also cube ztl geht über den socks proxy

932
01:29:26,040 --> 01:29:33,160
Über die ssh verbindung und dort dann raus in das in das netz lokal bei google und wenn das ganze funktioniert weil die vm selbst

933
01:29:33,160 --> 01:29:36,560
halt eben in dem in dem privaten netz in der google cloud steht

934
01:29:37,520 --> 01:29:41,120
Ich glaube versteht man versteht man halbwegs was passiert oder

935
01:29:43,670 --> 01:29:47,750
Also das ist das ist tatsächlich mega mega nice und das ist so ziemlich die

936
01:29:50,140 --> 01:29:56,580
Einfachste variante sich ein privates netz zu tunneln wenn man kein vpn bauen will ich habe noch eine andere weil ich zu faul bin vpn

937
01:29:56,580 --> 01:29:57,500
zu bauen

938
01:29:57,500 --> 01:30:01,980
Die ist aber etwas fragil aber die werden wir jetzt trotzdem gleich gleich benutzen

939
01:30:02,700 --> 01:30:08,340
Also das ist das ist super easy das kann jeder du brauchst ein befehl und du schreibst ach so übrigens

940
01:30:08,940 --> 01:30:16,060
Wenn ihr keinen bock habt immer immer den socks proxy davor zu schreiben könnt ihr einfach einfach auch sagen export https proxy

941
01:30:16,900 --> 01:30:21,740
Und dann kann man ganz normal die sachen dann auch so ausführen dann geht es immer über den socks proxy

942
01:30:22,540 --> 01:30:28,180
Aber ich ansetze und dass ihr auch seht dass es am socks proxy liegt ich ansetze das mal und für das jetzt aus und funktioniert

943
01:30:28,180 --> 01:30:30,180
es nicht

944
01:30:30,580 --> 01:30:35,340
Oder ich exportiere das ich trenne die ssh verbindung für das aus und dann geht das nicht

945
01:30:35,820 --> 01:30:50,830
So hier gibt es hier habe ich tatsächlich auch einen tipp zu

946
01:30:53,500 --> 01:31:00,020
Also ist das auf der basis eines bastion host ja genau sowas ist das korrekt

947
01:31:00,980 --> 01:31:07,900
So also hier kann ich auch was zu sagen also er fragt tipp wie man große datenmengen von einem server zum anderen transportiert

948
01:31:08,300 --> 01:31:10,980
Mache zweimal erst von remote auf lokal

949
01:31:11,660 --> 01:31:19,060
Und dann von lokal auf neues remote problem ist nur wenn lokal zu wenig platz ist also es gibt zwei varianten ich bilde mir ein

950
01:31:19,660 --> 01:31:21,660
dass scp

951
01:31:21,860 --> 01:31:23,860
mittlerweile

952
01:31:24,540 --> 01:31:25,980
Standardmäßig

953
01:31:25,980 --> 01:31:29,780
Ssh tunnel unterstützt also ssh tunnel

954
01:31:30,460 --> 01:31:35,620
mit port weiterleitung so dass du quasi von haupt von remote auf

955
01:31:36,540 --> 01:31:44,220
Remote post kopieren kann sich glaube scp kann mittlerweile sowas hier lob 1 1 1.1.1

956
01:31:45,820 --> 01:31:53,660
Keckel txt auf gut 2.2.2 ding ich glaube scp kann mittlerweile sowas

957
01:31:54,220 --> 01:31:56,220
Das geht aber nur solange

958
01:31:56,820 --> 01:31:58,820
solange

959
01:31:59,260 --> 01:32:00,900
Server 1

960
01:32:00,900 --> 01:32:03,420
Connecten kann netzwerktechnisch auf server 2

961
01:32:04,500 --> 01:32:06,500
Sonst funktioniert das nicht

962
01:32:06,580 --> 01:32:10,100
So was du machen kannst ist wenn das nicht funktioniert

963
01:32:10,900 --> 01:32:19,130
Du kannst selber tunneln also kannst das ja mal ausprobieren ob das ob das prinzip scp kann nicht differenzieren

964
01:32:19,370 --> 01:32:29,380
Ne ist das das problem du hast das problem dass local zu wenig platz ist dann kopierst du ja nicht über local dann kopierst du

965
01:32:29,380 --> 01:32:31,580
Direkt von remote auf remote da brauchst du lokal kein platz

966
01:32:36,340 --> 01:32:39,760
Was du machen kannst und was du dann auch mit ersen benutzen kannst ist

967
01:32:42,020 --> 01:32:46,300
Ssh fs ist eine sache die mir noch einfällt du kannst zum beispiel

968
01:32:49,500 --> 01:32:52,940
Ich bräuchte jetzt mal irgendeine kiste wo ich ssh zugang drauf habe

969
01:32:53,740 --> 01:33:02,060
Die nicht meine cloud kiste ist und cloud keine cloud kiste wo ich von extern drankommen

970
01:33:07,280 --> 01:33:09,280
Ich mache mein raspberry pi kurz an

971
01:33:10,120 --> 01:33:14,800
Ich zeige dir ich zeige dir da schnell ich hoffe ich hoffe im raspberry pie funktioniert da haben wir noch

972
01:33:15,160 --> 01:33:19,040
Haben wir noch home assistant drauf und so das sollte eigentlich funktionieren

973
01:33:19,480 --> 01:33:22,720
Ich zeige dir das mal schnell weil ich glaube das ist ein problem was viele haben

974
01:33:26,940 --> 01:33:28,940
switch an

975
01:33:29,740 --> 01:33:31,740
Ob das ein problem was viele haben deswegen

976
01:33:32,740 --> 01:33:34,740
Machen wir das jetzt mal kurz

977
01:33:37,110 --> 01:33:40,790
Vm champ regelt stimmt ich könnte vm aufbauen ja richtig

978
01:33:47,890 --> 01:33:49,250
chat

979
01:33:49,250 --> 01:33:51,250
hat das stream gerade gehängt

980
01:33:55,510 --> 01:33:56,990
stream lag

981
01:33:56,990 --> 01:34:08,240
Okay, also vm champ

982
01:34:09,000 --> 01:34:11,000
Wie ging das jetzt vm champ run

983
01:34:11,840 --> 01:34:13,840
blubb irgendwie so

984
01:34:15,500 --> 01:34:21,060
Aber der vm champ vm champ beste leute ich sag's euch massive nice der vm champ

985
01:34:27,620 --> 01:34:29,620
Wahrscheinlich ist er jetzt kaputt oder so

986
01:34:40,730 --> 01:34:49,650
Nice nice okay vm champ regelt einfach

987
01:34:51,010 --> 01:34:53,010
So ich habe mir lokal eine vm aufgebaut

988
01:34:53,690 --> 01:34:57,450
Kann ich euch das mal zeigen also

989
01:34:57,730 --> 01:35:04,250
Tim Tom ich glaube dass das dürfte für dich so eines der einfachsten sachen jetzt sein zu benutzen wie du es benutzen willst und zwar

990
01:35:06,050 --> 01:35:14,780
Ssh fs das hier ist jetzt mein server in der cloud denkt denkt einfach mal das ist ein server in der cloud okay

991
01:35:15,780 --> 01:35:21,540
Und ich habe jetzt hier einen ordner im kadir kecke und in der liegt ein

992
01:35:22,220 --> 01:35:24,460
touch keck w.zip

993
01:35:25,220 --> 01:35:29,340
So und ich möchte das jetzt von dem server auf einen anderen server transferieren

994
01:35:30,020 --> 01:35:33,340
Eine sache die man immer empfehlen kann bei sowas ist ssh fs

995
01:35:34,740 --> 01:35:36,740
Habe ich gar nicht installiert muss ich mal machen

996
01:35:37,980 --> 01:35:47,610
Ssh fs ssh fs ist extremly pock und zwar ssh fs

997
01:35:49,250 --> 01:35:51,250
User ad

998
01:35:51,610 --> 01:35:53,610
Verzeichnis angeben kecke

999
01:35:54,330 --> 01:36:01,050
Mounten nach ssh fs so und jetzt werdet ihr feststellen ich habe lokal einen ordner

1000
01:36:03,680 --> 01:36:05,560
mit dem inhalt

1001
01:36:05,560 --> 01:36:07,560
vom server

1002
01:36:07,920 --> 01:36:11,200
Das heißt es sieht jetzt für mein scp so aus

1003
01:36:12,040 --> 01:36:18,200
Als kopiere ich eine datei von lokal aber in wirklichkeit kopiere ich eine datei von diesem server

1004
01:36:18,720 --> 01:36:25,240
Und jetzt kannst du natürlich sagen scp keck w.zip root at cloud server

1005
01:36:26,720 --> 01:36:33,920
Oder ersung oder ersung das heißt du kannst es jetzt benutzen wie als wärst du als wäre die datei lokal bei dir

1006
01:36:34,920 --> 01:36:40,880
Also ssh fs ist immer eine sehr sehr praktische geschichte und braucht auch nichts auf dem server außer ssh

1007
01:36:42,320 --> 01:36:44,840
Also thom ich denke das ist was kannst du an der stelle benutzen

1008
01:36:44,920 --> 01:36:48,840
Du brauchst kein platz auf lokal an der stelle du hast nie was lokal liegen

1009
01:36:49,480 --> 01:36:53,000
Das ist nicht bei dir lokal das sieht nur so aus wie lokal das ist ein ssh f

1010
01:36:53,680 --> 01:37:04,580
Ssh fs auf dem server wie du auch hier siehst der ssh der ordner ist über ssh gemontet ja genau siehst du ja auch hier

1011
01:37:06,260 --> 01:37:10,660
Die nächste variante was du was du dann was du sonst noch machen könntest

1012
01:37:11,860 --> 01:37:13,380
wäre

1013
01:37:13,380 --> 01:37:15,860
Aber da wird es jetzt schon wird es jetzt schon ein bisschen abgedreht

1014
01:37:15,940 --> 01:37:18,940
Aber da wird es jetzt schon wird es jetzt schon ein bisschen abgedreht wie wäre es das hfs zu umständlich

1015
01:37:23,220 --> 01:37:25,220
Kannst du das auch kannst du das auch anders machen

1016
01:37:25,780 --> 01:37:32,320
Also ersüngst so ohne weiteres funktioniert ja nicht wenn er von dem einen system nicht an andere kommt

1017
01:37:32,960 --> 01:37:36,400
Es ist ja glaube ich das problem dass er vom einen system nicht richtig an das andere drankommt

1018
01:37:46,980 --> 01:37:58,950
Er kommt von seiner admin kiste dran an beide systeme aber er kommt nicht von einem ans andere system dran

1019
01:38:00,110 --> 01:38:02,110
So und um das zu fixen

1020
01:38:02,270 --> 01:38:08,590
Ja das kann ich jetzt nur theoretisch demonstrieren du kannst sagen ssh minus er

1021
01:38:10,430 --> 01:38:12,430
Das ist das andere ssh

1022
01:38:13,470 --> 01:38:15,470
Hab ich denn hier

1023
01:38:15,470 --> 01:38:17,470
Du kannst sagen ssh minus er

1024
01:38:18,190 --> 01:38:20,190
Keine ahnung port 2222

1025
01:38:20,750 --> 01:38:22,750
Willst du weiterleiten auf

1026
01:38:25,860 --> 01:38:27,460
Ssh

1027
01:38:27,460 --> 01:38:29,460
Ssh minus er

1028
01:38:30,340 --> 01:38:35,140
Keine ahnung port 2222 willst du weiterleiten auf

1029
01:38:36,260 --> 01:38:43,820
Keine ahnung mir fällt jetzt nichts ein

1030
01:38:44,460 --> 01:38:48,100
Localhost port 22 oder ich brauche mal irgendwas wo

1031
01:38:48,780 --> 01:38:52,180
Wo ssh läuft läuft bei mir localhost

1032
01:38:53,260 --> 01:38:57,740
ssh

1033
01:38:57,740 --> 01:38:59,180
Läuft

1034
01:38:59,180 --> 01:39:01,180
dort ein ssh

1035
01:39:01,220 --> 01:39:02,980
Keine ahnung ich

1036
01:39:03,140 --> 01:39:07,500
Ich bräuchte eine andere kiste wo man ich brauche einfach nur eine zweite vm auf

1037
01:39:07,900 --> 01:39:11,380
Ich brauche einfach nur eine zweite vm und der vm champ der vm champ regelt schon

1038
01:39:11,740 --> 01:39:15,540
So wir anmaunten das ganze jetzt erst mal hier anmaunt ssh fs

1039
01:39:16,060 --> 01:39:17,820
wieder weg

1040
01:39:17,820 --> 01:39:20,060
vm champ run plop 2

1041
01:39:21,380 --> 01:39:30,340
Machen wir einfach nur eine zweite vm geht ja zackig so und das ist jetzt für den fall der fälle du willst du willst

1042
01:39:31,180 --> 01:39:38,060
Eine verbindung herstellen von server a zu server b aber server a und server b können eigentlich nicht direkt miteinander kommunizieren

1043
01:39:38,060 --> 01:39:43,260
Dann gibt es auch einen trick den zeige ich dir jetzt wir haben jetzt server a und server b also das ist die kiste das ist die kiste

1044
01:39:44,460 --> 01:39:46,460
so und

1045
01:39:49,170 --> 01:39:54,890
Also das ist das ist dieses die ip hier nehmen wir die mal so also was jetzt machen kannst ist

1046
01:39:56,410 --> 01:39:57,570
Ssh

1047
01:39:57,570 --> 01:40:05,130
Minus r port 2222 ich erkläre jetzt ich erkläre gleich was es macht auf port 22 so netzt

1048
01:40:06,370 --> 01:40:14,530
Du wirst jetzt sehen du hast auf diesem system jetzt auf einmal port 2222 offen was dieser befehl jetzt macht ist folgendes

1049
01:40:15,050 --> 01:40:19,370
Der verbindet sich auf diesen server per ssh

1050
01:40:20,210 --> 01:40:23,050
macht dort port 2222 auf

1051
01:40:23,570 --> 01:40:29,290
Und alles was dort auf dem remote system das ist übrigens für remote das ganze geht auch mit l und local

1052
01:40:29,850 --> 01:40:32,690
alles was dort in diesen port rein

1053
01:40:33,410 --> 01:40:40,890
Geht netzwerktraffic mäßig wandert über den ssh tunnel und auf deinem host wo das wieder rauskommt also auf deiner kleinen kiste

1054
01:40:41,250 --> 01:40:47,490
Wird es dann von ssh weiter geroutet an diese ziel ip das bedeutet was du machen kannst hier ist ssh

1055
01:40:48,210 --> 01:40:55,210
Auf localhost port 2222 und dann kriegst du eine abfrage möchtest du dich per ssh connecten

1056
01:40:56,130 --> 01:41:02,690
Und wo du jetzt rauskommst ist auf dem ssh von blubb 2 auf dem ssh port von blubb 2

1057
01:41:03,210 --> 01:41:06,840
Bei dir funktioniert der vm-champion

1058
01:41:09,240 --> 01:41:15,240
Wir können ja passwd user machen current password was weiß ich denn keine ahnung

1059
01:41:15,240 --> 01:41:23,540
Keine pseudo passwd wir geben jetzt mal ein passwort 123456 guck mal

1060
01:41:25,140 --> 01:41:27,220
Shit es ist nur key authentifizierung

1061
01:41:29,460 --> 01:41:32,720
Es ist nur key authentifizierung erlaubt fields batman ok

1062
01:41:35,580 --> 01:41:39,820
Ssh ssh de konfig ich will einfach nur zeigen dass es prinzipiell funktioniert

1063
01:41:41,140 --> 01:41:43,500
Wie schaltet man wie schaltet man den kram denn aus

1064
01:41:47,920 --> 01:41:55,080
Fuck alle ssh konfig hier passwort authentifikation yes ok 10 zdl restart ssh de ich

1065
01:41:55,640 --> 01:41:57,640
hoffe das hat jetzt funktioniert

1066
01:41:58,160 --> 01:42:03,720
123456 zack und siehe da guck mal du connectest dich

1067
01:42:04,880 --> 01:42:06,600
per

1068
01:42:06,600 --> 01:42:08,480
localhost port

1069
01:42:08,480 --> 01:42:13,600
Auf eine andere kiste und kommst dann auf blubb 2 raus so und das funktioniert obwohl

1070
01:42:14,360 --> 01:42:22,800
Blubb und blubb 2 in komplett unterschiedlichen netzwerken stehen wichtig ist dass dein host von dem du diese ssh port weiterleitung gemacht hast

1071
01:42:22,960 --> 01:42:30,560
Auf beide zugreifen kann also das sind sachen die du wo du das problem mit lösen kannst das einfachste wäre in dem fall natürlich

1072
01:42:32,360 --> 01:42:34,360
Ssh fs ja

1073
01:42:34,440 --> 01:42:40,600
Das dürfte wahrscheinlich am einfachsten sein aber jetzt kannst du dir echt komplett überlegen wie das wie das machen willst weil jetzt jetzt jetzt

1074
01:42:40,600 --> 01:42:42,600
Weißt du eigentlich alles was man dazu wissen muss

1075
01:42:43,600 --> 01:42:49,320
Der vm champ ist mega nice das projekt zwar weitermachen so aber der ist freaker dankeschön für den sub

1076
01:42:50,640 --> 01:43:10,850
Wir waren ja eigentlich dabei cloud sachen zu professionieren ja wer macht denn auch sowas

1077
01:43:15,820 --> 01:43:17,820
ok also

1078
01:43:17,980 --> 01:43:23,380
Pfeilfeld kommen wir mal zurück

1079
01:43:23,380 --> 01:43:25,380
Kommen wir zurück zu unserer cloud geschichte

1080
01:43:25,740 --> 01:43:34,020
Wir haben kubernetes cluster und wir haben eine cloud datenbank postgres wir erlauben nur ssl connections das ist richtig so jetzt kommt

1081
01:43:34,660 --> 01:43:36,660
der trick

1082
01:43:36,860 --> 01:43:38,740
Ich habe mir nämlich

1083
01:43:38,740 --> 01:43:42,820
einen

1084
01:43:42,820 --> 01:43:48,060
blog post im vorfeld rausgesucht wo erklärt wird wie das ganze funktioniert und einen

1085
01:43:49,460 --> 01:43:57,590
Stack overflow post weiß ich aber nicht nicht mehr nach was ich gesucht habe

1086
01:44:04,260 --> 01:44:12,680
Wie sowas

1087
01:44:12,680 --> 01:44:14,080
fuck

1088
01:44:14,080 --> 01:44:30,000
das hätte ich mir vielleicht

1089
01:44:30,520 --> 01:45:20,550
Mal raus kopieren sollen das hätte ich mir vielleicht mal raus kopieren sollen ins der gaufer floh eintracht den ich da gefunden habe kurz was gucken

1090
01:45:30,880 --> 01:45:37,080
Vielleicht vielleicht finde ich das vielleicht finde ich das wieder also nur um das jetzt zusammenzufassen was wir jetzt probieren werden und zwar wir

1091
01:45:37,080 --> 01:45:38,720
haben eine datenbank in der cloud

1092
01:45:38,720 --> 01:45:40,880
die nur ssl verbindung erlaubt

1093
01:45:41,560 --> 01:45:47,280
Und wir haben einen kubernetes cluster so jetzt ist das ziel dass wir folgendes auf die reihe kriegen guck mal das da

1094
01:45:48,280 --> 01:45:51,960
Das da dass wir uns von einem cluster

1095
01:45:52,760 --> 01:45:58,840
Container im cluster verbinden können auf die datenbank ohne dass wir ein passwort brauchen

1096
01:45:59,840 --> 01:46:02,040
Und ohne dass wir einen connection string brauchen

1097
01:46:04,160 --> 01:46:09,000
Das ist das ist das das ist das ziel bei der ganzen geschichte und um auf die ursprüngliche frage einzugehen

1098
01:46:09,360 --> 01:46:14,280
Kann man das mit speziellen usern verbinden ja kann man man kann zum beispiel

1099
01:46:14,800 --> 01:46:22,000
Zeigt ihr das mal hier an der stelle ich habe ich habe man hat verschiedene user hier in bei google zum beispiel hat man auch

1100
01:46:22,000 --> 01:46:29,600
Einen den habe ich angelegt mit meinem kubernetes cluster zusammen und zwar habe ich einen user für meinen kubernetes cluster

1101
01:46:29,600 --> 01:46:33,440
Und standardmäßig alle sachen die in diesem kubernetes cluster laufen

1102
01:46:34,440 --> 01:46:39,760
Laufen unterhalb von diesem service account hier ich weiß nicht wer das wer das wer das gefragt hat

1103
01:46:39,920 --> 01:46:47,720
Wollte ob man das auch auf spezielle user ebene machen kann also kann man alle sachen die im kubernetes cluster laufen laufen zurzeit aktuell unter diesem service account hier

1104
01:46:48,400 --> 01:46:50,400
So das heißt was ich jetzt machen kann ist folgendes

1105
01:46:51,440 --> 01:46:54,760
Ich gebe diesem service account jetzt erst mal ein paar rechte

1106
01:46:58,760 --> 01:47:00,760
Warum steht das da 500 mal drinne

1107
01:47:02,440 --> 01:47:17,590
Gehen wir einfach mal von aus das reicht jetzt so

1108
01:47:17,590 --> 01:47:22,870
Das heißt das prinzipiell schon mal alle sachen die bei mir im kubernetes cluster laufen zugriff haben auf meine datenbank das ist noch nicht so tolle

1109
01:47:23,910 --> 01:47:28,790
Vielleicht ist das auch gar nicht so schlau man sollte das schon eher auf anwendungsebene machen aber das kann man prinzipiell erst mal einrichten

1110
01:47:29,510 --> 01:47:31,510
So und jetzt kommt der trick

1111
01:47:32,190 --> 01:47:34,910
Jetzt geht man bei der datenbank hin unter users

1112
01:47:35,950 --> 01:47:38,070
Und dann gibt es hier die

1113
01:47:38,070 --> 01:47:40,070
Datenbank und dann gibt es hier die

1114
01:47:40,550 --> 01:47:44,700
Datenbank und dann gibt es hier die

1115
01:47:44,700 --> 01:47:49,380
Und jetzt kommt der trick jetzt geht man bei der datenbank hin unter users

1116
01:47:49,860 --> 01:47:52,180
Fügt hier auch den kubernetes service accounts

1117
01:47:52,780 --> 01:47:59,700
Cloud ist sagt cloud am fügt ja auch den kubernetes account dazu und sagt add dann hofft man dass es funktioniert

1118
01:48:01,780 --> 01:48:06,220
Genau und jetzt werdet ihr sehen dass dieser service account

1119
01:48:09,580 --> 01:48:14,260
Cloud sql client rechte hat und cloud sql instance user rechte hat

1120
01:48:14,860 --> 01:48:16,860
Das heißt wenn sich jetzt jemand

1121
01:48:18,340 --> 01:48:25,580
Verbindet zu dieser datenbank der im kontext von diesem service account läuft dann kann der das ohne password machen

1122
01:48:26,180 --> 01:48:31,140
Wenn er so lange über den proxy geht so so weit so weit die theorie dahinter

1123
01:48:31,700 --> 01:48:36,780
Also sprich jetzt also zumindest habe ich das so in aus diesem aus diesem blog post hier heraus gelesen

1124
01:48:37,260 --> 01:48:42,900
Also sprich was wir jetzt schon haben ist dass man an dieser stelle wenn man sich verbinden möchte vom client über den proxy

1125
01:48:43,660 --> 01:48:45,660
Proxy über den

1126
01:48:46,420 --> 01:48:53,780
Sql proxy zur datenbank dass man schon mal kein password mehr braucht obwohl die datenbank mit password abgesichert ist also das schon mal

1127
01:48:53,780 --> 01:48:55,780
nett verkehrt

1128
01:48:55,940 --> 01:49:00,740
Und jetzt ist natürlich nur die frage wie installieren wir dann den ganzen klempel auf dem server

1129
01:49:02,380 --> 01:49:12,020
Und dafür ich mache erst mal wieder ein paar sachen zu und dafür schnappen wir uns jetzt das hier das ist ein

1130
01:49:13,020 --> 01:49:18,900
Kubernetes operator das ist im endeffekt ein hintergrund dienst den man zusätzlich im kubernetes installieren kann

1131
01:49:19,260 --> 01:49:27,860
Der überwacht verschiedene sachen die gestartet werden und wenn ich eine anwendung starte die die passenden tags hat dann injecte der automatisch

1132
01:49:28,580 --> 01:49:33,460
diesen sql proxy

1133
01:49:33,460 --> 01:49:35,460
Das sollte ich vielleicht auflassen

1134
01:49:48,390 --> 01:49:50,030
Der injectet

1135
01:49:50,030 --> 01:49:57,830
Automatisch diesen sql proxy in die anwendung quasi rein als zusätzlichen container und dann kann die anwendung auf die datenbank

1136
01:49:57,830 --> 01:49:59,830
zugreifen soweit soweit die

1137
01:50:01,070 --> 01:50:03,070
Soweit die theorie dahinter

1138
01:50:04,590 --> 01:50:08,390
Das werden wir jetzt mal installieren und gucken was passiert guckt ob das funktioniert

1139
01:50:09,150 --> 01:50:11,870
Das heißt ich klone mir jetzt mal dieses repo hier

1140
01:50:12,870 --> 01:50:15,230
Das machen wir vielleicht echt auf unserer cloud vm

1141
01:50:17,230 --> 01:50:19,230
Ein warum nicht

1142
01:50:20,230 --> 01:50:28,230
Wobei warum sollte man es auf unserer cloud vm machen wir können wir können wir können mein wackeliges tunnelskript verwenden und gucken ob das

1143
01:50:28,390 --> 01:50:29,510
funktioniert

1144
01:50:29,510 --> 01:50:32,390
Ich habe mir nämlich was ich habe mir nämlich mal was gebastelt und zwar

1145
01:50:32,710 --> 01:50:37,230
So einen vpn ohne einen vpn zu sein das würde ich aber nicht nicht empfehlen das zu benutzen

1146
01:50:37,550 --> 01:50:44,830
Wohingegen das was ich euch vorhin gezeigt habe zum connecten in die cloud mit dem sox proxy super stable und gut funktioniert ist das eher

1147
01:50:44,830 --> 01:50:51,110
So eine fragwürdige geschichte da würde ich schon echtes vpn bauen wenn ich da wenn ich da live was betreibe denn es dankeschön für den

1148
01:50:51,110 --> 01:50:54,310
sub zwölf monate pox subscription das ist extrem

1149
01:50:56,470 --> 01:51:11,950
Aber ich bin mal gespannt ob mein tunnel mein tunnel gedöns noch funktioniert was ich hier gebaut habe ok

1150
01:51:13,510 --> 01:51:20,980
Cube ztl get ports minus a easy funktioniert

1151
01:51:22,100 --> 01:51:25,370
nice

1152
01:51:25,370 --> 01:51:30,370
Mini vpn auf die stelle gebaut also das funktioniert übrigens auch

1153
01:51:30,370 --> 01:51:34,650
So ich zeige euch das mal kurz das ist wirklich ganz ganz eklige heck weil ich zu faul war

1154
01:51:34,650 --> 01:51:38,370
Den vpn in die cloud zu bauen was das hier macht ist folgendes

1155
01:51:41,250 --> 01:51:46,650
Genau also das baut muss ich alles erzählen dass es wartet aus irgendwelchen gründen erst mal fünf sekunden

1156
01:51:46,930 --> 01:51:52,610
Dann legt es ein neues netzwerk die weiß an gibt dem neue netzwerk die weißen ip fährt das hoch

1157
01:51:52,850 --> 01:51:59,530
Setzt routen auf meine zwei cloud netze das ist hardcoded das wird mit anderen netzen gar nicht funktionieren und ich habe glück dass ich diese netze

1158
01:51:59,530 --> 01:52:06,530
Zufälligerweise bei mir lokal nicht verwende dann starte ich ein tool was über einen sox proxy

1159
01:52:06,970 --> 01:52:14,410
Allen möglichen traffic tunneln kann und dann starte ich einen sox proxy über das was ich euch vorhin gezeigt habe also ganz furchtbar abartig

1160
01:52:14,850 --> 01:52:19,930
Aber es funktioniert also ich tunnele jetzt quasi meinen kompletten traffic über den ssh sox proxy

1161
01:52:20,570 --> 01:52:22,090
chat

1162
01:52:22,090 --> 01:52:24,930
Noted konnte man der ganzen sache noch folgen

1163
01:52:30,510 --> 01:52:50,660
5er time muss gerade noch mein letztes toastbrot fordern

1164
01:53:04,800 --> 01:53:06,800
Weil ja sind nicht ganz leer

1165
01:53:07,920 --> 01:53:10,520
Was habe ich mich getunnelt gut jetzt

1166
01:53:11,560 --> 01:53:13,560
Klonen ich mir mal diesen operator

1167
01:53:19,490 --> 01:53:24,370
Ihr checkt auch checke im git die letzte stable version aus

1168
01:53:25,490 --> 01:53:27,490
was

1169
01:53:27,810 --> 01:53:31,660
1.0.2 ist

1170
01:53:31,660 --> 01:53:38,540
Gehen den installer ordner und installiert das so was das install ist kripp macht ist relativ einfach gezeigt

1171
01:53:39,620 --> 01:53:41,620
das installiert search manager überhelm

1172
01:53:42,860 --> 01:53:46,460
Und dann er bleibt das eine jetzt haltet euch mal fest

1173
01:53:47,420 --> 01:53:49,420
dann er bleibt das eine

1174
01:53:50,860 --> 01:53:52,860
1657

1175
01:53:53,540 --> 01:53:55,540
1657 zeilen lange jammel konfig

1176
01:54:01,860 --> 01:54:07,260
Also das ist eine saumäßig lange jammel aber da muss ich mich ja nicht drum kümmern install

1177
01:54:10,660 --> 01:54:16,010
Gut das dauert jetzt kurz aber

1178
01:54:17,530 --> 01:54:20,130
Was ihr vielleicht schon seht ist wenn ich jetzt

1179
01:54:21,250 --> 01:54:25,730
Cube ztl mir aufliste werdet ihr sehen gleich erscheint dort

1180
01:54:26,650 --> 01:54:28,570
ein

1181
01:54:28,570 --> 01:54:30,570
hoffe ich mal

1182
01:54:31,090 --> 01:54:37,810
Gleich sollte dort zumindest ein neuer port erscheinen was ein neues deployment erscheinen

1183
01:54:39,250 --> 01:54:41,250
Okay für search manager ja

1184
01:54:41,490 --> 01:54:43,490
search manager ok

1185
01:54:43,810 --> 01:54:49,090
Und dann am ende allerdings für den sql proxy und das ist das um das ist jetzt hier heute eigentlich letztendlich auch geht

1186
01:54:50,850 --> 01:54:52,250
Okay

1187
01:54:52,250 --> 01:54:54,250
Ja, er kreiert irgendwelche dinger

1188
01:55:00,090 --> 01:55:02,090
Bei mir auf der arbeit würden die dich jetzt abführen

1189
01:55:02,250 --> 01:55:06,090
Nee, sie würden mich wahrscheinlich dafür bezahlen das zu machen warum sollten die mich abführen

1190
01:55:22,420 --> 01:55:30,380
Jetzt haben wir in unserem cluster den cloud sql proxy operator laufen den cloud sql proxy operator controller manager

1191
01:55:31,100 --> 01:55:34,380
Klingt ja fast ein bisschen wie eine java klasse oder

1192
01:55:35,700 --> 01:55:44,200
cloud sql proxy operator controller manager eine runde java klassen namen aber

1193
01:55:47,790 --> 01:55:51,390
Weiter ich wollte das emote mal benutzen habe ich schon ewig nicht mehr benutzt

1194
01:55:52,990 --> 01:55:56,390
Cli böses hexenwerk ja gut gibt es ja immer noch welche die der meinung sind

1195
01:55:57,150 --> 01:56:26,620
Kommandozeile terminal ist ganz krasser hacker mensch heiß weil ich jetzt kann man kurz gucken muss ist

1196
01:56:28,140 --> 01:56:33,280
Describe mal kurz was schauen

1197
01:56:36,300 --> 01:56:38,300
Deployment muss ich ja sagen

1198
01:56:41,350 --> 01:56:43,870
Genau ich will mal kurz gucken was die für image benutzen

1199
01:56:44,430 --> 01:56:46,430
Image

1200
01:56:46,550 --> 01:56:52,390
Okay, geht sie also die das image ist gehostet in auf github auf auf google

1201
01:56:52,990 --> 01:56:57,470
Hatte mal geht sie er geht sie er ist google google container registry

1202
01:56:57,910 --> 01:57:08,060
Mit 10 matrix habe ich das überhaupt installiert ja beste und weiß damit was 10 matrix noch nicer ist in verbindung mit lol cat

1203
01:57:09,820 --> 01:57:12,140
Dann ist richtig herrgerman modus angesagt

1204
01:57:12,980 --> 01:57:18,940
Als kappa breit herrgerman modus das ist für das jahr 2023 ist das trendiger

1205
01:57:41,700 --> 01:57:48,620
Toastbrot was machst du eigentlich mit deinem gehalt so als ledig ja das stimmt ich bin nicht verheiratet habe keine kinder und sonst was

1206
01:57:49,700 --> 01:57:53,500
Das stimmt ich gebe tatsächlich relativ wenig kohle aus

1207
01:57:55,060 --> 01:57:58,060
Ich hole mir zwar ab und zu also wenn ich mir was hole dann meist noch was gutes

1208
01:57:58,380 --> 01:58:03,300
Oder ab und zu halt auch mal schon was teurer ich habe mich nicht umsonst letztens in 5000 euro rechner gekauft aber halt alle fünf

1209
01:58:03,300 --> 01:58:05,700
Jahre kann man das mal machen was ich mache ich kaufe

1210
01:58:06,380 --> 01:58:09,020
Ich hau das eigentlich mehr oder weniger alles in stonks

1211
01:58:09,580 --> 01:58:20,540
Wobei stonks ist zu viel gesagt etf und da lasse ich es vergammeln bis ich irgendwann reich bin so der plan

1212
01:58:21,940 --> 01:58:57,780
Ob das jemals eintreten wird sei mal dahingestellt ja okay

1213
01:59:02,970 --> 01:59:05,250
Dafür sind die chancen dass es morgen weg ist auch nicht so hoch

1214
01:59:07,760 --> 01:59:09,760
Okay also weiter weiter im text

1215
01:59:10,840 --> 01:59:17,070
Wir haben wir haben diesen ganzen krempel jetzt installiert im cluster und jetzt testen wir mal

1216
01:59:18,670 --> 01:59:22,050
Was dieses

1217
01:59:23,570 --> 01:59:28,850
Beispiel von denen hier macht also von der idee her sollte jetzt folgendes passieren

1218
01:59:29,370 --> 01:59:31,370
Ich lade mir mal kurz die datei herunter

1219
01:59:31,930 --> 01:59:47,140
Da noch mal kurz die datei herunter und passt das an

1220
01:59:49,300 --> 01:59:56,340
Also was jetzt was jetzt passieren soll ist ich mache mal diesen ganzen diesen ganzen das ganze geschwätze hier weg das brauche alles nicht ja

1221
01:59:57,140 --> 02:00:02,980
Das alles secrets brauche ich auch nicht. Secrets sind overrated, outdated, shebaited. Das brauchen wir nicht

1222
02:00:04,980 --> 02:00:07,500
DB name und so brauchen wir auch alles nicht

1223
02:00:08,300 --> 02:00:11,140
DB user das setze ich gleich von hand zum testen

1224
02:00:12,820 --> 02:00:16,900
Connection sachen verbrauchen wir auch nicht wir sleepen einfach ein paar minuten

1225
02:00:17,620 --> 02:00:24,860
Beim starten des containers einen liveliness probe brauchen wir auch nicht. So das ist doch jetzt schon deutlich übersichtlicher

1226
02:00:26,180 --> 02:00:31,460
Okay, also was das also wenn das funktioniert was das ganze jetzt machen sollte ist folgendes

1227
02:00:31,980 --> 02:00:35,060
Das hier ist ein deployment wie man es kennt von kubernetes

1228
02:00:35,620 --> 02:00:44,180
Wer das so nicht gesehen hat im prinzip steht hier bloß drinne was kubernetes starten soll also man sagt ihm zum beispiel als

1229
02:00:51,830 --> 02:00:53,830
Leute wo ist denn das image

1230
02:00:54,710 --> 02:00:56,950
Wo ist denn das image bin ich ach da hier

1231
02:00:57,910 --> 02:01:03,310
Genau man sagt ihm was er für den image starten soll was er für ein image starten soll er soll das normale postgres image starten

1232
02:01:03,310 --> 02:01:05,310
also sprich da startet dann

1233
02:01:06,710 --> 02:01:08,710
Das ganz normale

1234
02:01:09,150 --> 02:01:11,230
Post auf official postgres image

1235
02:01:13,150 --> 02:01:20,630
Und dann was er darin ausführen sollen eigentlich soll er nichts ausführen außer starten und 3600 sekunden sleepen und das war's

1236
02:01:21,350 --> 02:01:23,350
das ist alles

1237
02:01:23,830 --> 02:01:27,070
Mehr gibt es nicht wir können hier oben vielleicht noch einschreiben

1238
02:01:28,070 --> 02:01:30,070
Replikas dass er nur ein ein

1239
02:01:30,110 --> 02:01:36,030
Container startet und ich bin mir immer nicht sicher wo ich das wo ich das ganze hinschreiben muss mit den replikas ich glaube hierhin

1240
02:01:37,390 --> 02:01:39,390
Ich glaube hier

1241
02:01:40,810 --> 02:01:47,170
Aber ich benutze normalerweise auto complete in visual studio code damit weiß ich aus dem komplett muss das sind ja genau doch ist richtig

1242
02:01:48,010 --> 02:01:50,010
replikas da muss es drunter

1243
02:01:50,970 --> 02:01:57,410
Na das heißt er startet diese diesen workload auch nur einmal und das war es und die eigentliche sache mit dem proxy

1244
02:01:57,410 --> 02:01:59,410
das ist das hier oben und zwar

1245
02:02:00,210 --> 02:02:02,810
ich habe jetzt ja hier im hintergrund diesen

1246
02:02:04,530 --> 02:02:09,050
Cloud sql proxy operator laufen so und der überwacht ob es

1247
02:02:09,490 --> 02:02:15,290
Konfigurationen gibt was er machen soll und das ist eine konfiguration für den das heißt sobald das hier angelegt wird

1248
02:02:16,090 --> 02:02:18,090
überwacht dieses teil hier

1249
02:02:19,090 --> 02:02:20,770
Automatisch

1250
02:02:20,770 --> 02:02:22,570
alle deployments

1251
02:02:22,570 --> 02:02:27,530
Mit diesem namen in dem fall halt nur dieses eine hier aber ich könnte hier auch reinschreiben

1252
02:02:28,530 --> 02:02:35,850
namespace oder label selector machen also quasi alles was getagt ist so und was da was dann passiert ist folgendes

1253
02:02:36,650 --> 02:02:42,410
Ich kann es ich kann es einfach zeigen wir gucken wir gucken uns jetzt einfach an ob das funktioniert also von der idee sollte folgendes

1254
02:02:42,410 --> 02:02:49,850
Passieren er startet diese demo app diese demo app im prinzip startet eine shell und sleep paar minuten das ist alles

1255
02:02:51,490 --> 02:02:53,490
Mehr macht das nicht allerdings

1256
02:02:54,210 --> 02:02:56,210
injectet dann dieser

1257
02:02:56,330 --> 02:02:58,330
sql proxy operator

1258
02:02:59,090 --> 02:03:02,610
zusätzlich in das deployment noch einen sql proxy

1259
02:03:02,930 --> 02:03:09,170
Über den ich mich zur datenbank verbinden kann nachdem das alles mit meinem kubernetes account funktioniert sollte das ohne

1260
02:03:09,210 --> 02:03:13,170
Passwort und alles funktionieren übrigens das hier brauche ich noch den connection string brauche ich noch

1261
02:03:14,090 --> 02:03:22,570
Einmal initial gesetzt und alle weiteren die diese datenbank verwenden wollen brauchen es nicht selbst konfigurieren in der regel wird das nämlich so laufen

1262
02:03:22,770 --> 02:03:29,970
Dieses ding ist das was einmalig von irgendwelchen infrastruktur administratoren im cluster hinterlegt wird und das hier ist das was

1263
02:03:30,370 --> 02:03:37,650
Letztendlich an anwendungen deployed wird das passiert nicht zwangsläufig von den gleichen leuten deswegen denke ich dass uns das auf der arbeit enorm helfen würde

1264
02:03:38,330 --> 02:03:45,010
Weil wir könnten einmalig sowas hier deployen in den cluster und alle die eine datenbank connection machen wollen würden einfach

1265
02:03:45,250 --> 02:03:51,530
Ganz normales deployment machen und könnten darauf zugreifen also soweit soweit die theorie wie kriege ich in diesen connection string

1266
02:03:52,050 --> 02:03:54,050
haben wir da irgendeinen guide

1267
02:03:55,290 --> 02:04:03,540
Proxy operator gibt es eigentlich ein sleeper docker compose ja genau so wie hier

1268
02:04:04,460 --> 02:04:07,620
Genauso wie hier einfach einfach einen container command reinschreiben

1269
02:04:10,320 --> 02:04:13,740
Docs

1270
02:04:13,740 --> 02:04:22,660
Nehme ich den quick start oder sowas hier irgendwie doch hier quick start hier

1271
02:04:23,540 --> 02:04:27,380
So kriegt man den name den connection string zur datenbank raus

1272
02:04:27,660 --> 02:04:33,220
Ich weiß nicht ob man die ob man das so genau versteht was der vorteil davon ist obwohl ich jetzt den connection spring brauche also

1273
02:04:33,220 --> 02:04:37,780
Der vorteil ist diesen connection string zur datenbank den brauche ich genau einmal

1274
02:04:38,300 --> 02:04:42,820
Pro datenbank und ich muss nicht pro up oder pro deployment

1275
02:04:43,420 --> 02:04:49,380
Mich jedes mal drum kümmern um welche datenbank welchen connection string welchen user welches passwort

1276
02:04:50,020 --> 02:04:52,020
macht das einmal

1277
02:04:52,380 --> 02:04:56,380
Und dann war es das und alle apps auf diesem kombiniertes cluster

1278
02:04:57,260 --> 02:05:03,540
Die eben hier unter diesen workload selektor fallen bekommen das injected und können das benutzen

1279
02:05:04,180 --> 02:05:07,980
Das das ist theoretisch ein riesen erleichterung für alle seiten

1280
02:05:08,940 --> 02:05:13,980
Wenn das wenn das denn gescheit funktioniert so also was muss ich jetzt ausführen dass da

1281
02:05:14,820 --> 02:05:22,660
Laut sql instances describe quick quick start instance nehmen eine datenbank heißt nicht quick start instance sondern prime sub broad

1282
02:05:26,290 --> 02:05:30,250
das brauche ich

1283
02:05:30,250 --> 02:05:32,250
beim sub broad

1284
02:05:32,370 --> 02:05:33,650
so

1285
02:05:33,650 --> 02:05:35,650
Dann habe ich im vorfeld schon mal nachgeguckt

1286
02:05:36,370 --> 02:05:38,370
weil ich eine

1287
02:05:38,810 --> 02:05:41,770
Nicht öffentliche datenbank bei google betreibe

1288
02:05:42,410 --> 02:05:44,850
Muss ich noch zusätzlich sachen angeben nämlich

1289
02:05:47,050 --> 02:05:49,050
Api documentation

1290
02:05:49,330 --> 02:05:52,210
Irgendwas mit private ip muss ich noch angeben

1291
02:05:53,130 --> 02:05:54,490
private

1292
02:05:54,490 --> 02:06:01,210
Ach private ip groß geschrieben private ip muss ich nur angeben true

1293
02:06:02,090 --> 02:06:03,730
so

1294
02:06:03,730 --> 02:06:11,040
Jetzt gucken wir mal wie weit wir kommen wenn wir das einrichten da bin ich jetzt mal gespannt so

1295
02:06:11,880 --> 02:06:16,600
Cube ctl apply minus f deploy postgres

1296
02:06:22,380 --> 02:06:26,210
okay ports

1297
02:06:26,250 --> 02:06:29,980
wird erstellt

1298
02:06:29,980 --> 02:06:31,980
container creating ja

1299
02:06:33,420 --> 02:06:35,660
Create mal den container running

1300
02:06:38,050 --> 02:06:40,050
okay nice

1301
02:06:40,370 --> 02:06:47,610
Dann exekten wir uns da mal rein in den container cube ctl das kann ich mir immer aus dem kopf habe ich da noch was in dem

1302
02:06:54,020 --> 02:06:56,300
Ich glaube ich glaube das reicht so

1303
02:06:56,980 --> 02:07:05,250
ja

1304
02:07:05,890 --> 02:07:07,890
Fuck cube ctl

1305
02:07:10,890 --> 02:07:17,330
Kann ich mir immer aus dem kopf nicht merken wie das funktioniert gerne shelter running container cube ctl exec

1306
02:07:20,530 --> 02:07:26,570
Nee da musst du noch hier das da das da cube ctl exec minus i minus t bla bla blub

1307
02:07:29,570 --> 02:07:31,570
Das das da

1308
02:07:32,330 --> 02:07:34,330
Ja minus i minus t

1309
02:07:40,340 --> 02:07:42,740
Jetzt haben wir eine shell im container gut

1310
02:07:44,220 --> 02:07:51,780
Und jetzt können wir das mal probieren guck mal meines environment rein man sieht aha aha fällt euch was auf

1311
02:07:53,140 --> 02:07:56,780
Der proxy hat schon injected in meinen workload

1312
02:07:57,700 --> 02:07:59,020
guck mal

1313
02:07:59,020 --> 02:08:06,140
Der hat injected db port auf 5000 und db host auf local host das ist genau das was er machen sollte

1314
02:08:06,300 --> 02:08:12,460
Und man wird jetzt auch sehen wenn wir uns jetzt mal die ports angucken es laufen auch nicht nur einer sondern zwei

1315
02:08:15,380 --> 02:08:18,420
Normalerweise laut dem deployment läuft ja nur ein

1316
02:08:19,420 --> 02:08:26,540
Container aber es läuft zwei und was läuft da es läuft einmal die normale anwendung und einmal der proxy der injected wurde

1317
02:08:29,340 --> 02:08:32,620
Können wir uns auch mal die logs angucken cube ctl logs

1318
02:08:36,040 --> 02:08:37,640
das da

1319
02:08:37,640 --> 02:08:40,680
Eine da muss man jetzt genau guck jetzt zeigt er dir das nämlich auch an

1320
02:08:41,400 --> 02:08:47,080
Der sagt okay von was soll ich denn die logs anzeigen es gibt einmal den container da drinne

1321
02:08:47,600 --> 02:08:51,240
Sql app da gibt es keine großartigen logs für oder es gibt ein

1322
02:08:52,160 --> 02:08:54,160
default proxy workload

1323
02:08:54,280 --> 02:09:02,390
Ja guck mal

1324
02:09:02,590 --> 02:09:05,590
Und und das ist er das ist der proxy der injected wurde

1325
02:09:06,750 --> 02:09:12,870
Das ist schon ziemlich praktisch was macht er denn wenn du die variable für den container schon gesetzt hättest ich habe die variable für den

1326
02:09:12,870 --> 02:09:14,870
Container gesetzt es kann keinen konflikt geben

1327
02:09:15,470 --> 02:09:19,270
Ich setze die variable für den container ich kann auch sein dass man das machen muss

1328
02:09:20,630 --> 02:09:22,630
Aber anscheinend anscheinend

1329
02:09:22,910 --> 02:09:30,390
Überschreibt er die dann also man kann hier quasi reinschreiben ich möchte diese variable setzen und ich vermute mal der match darauf ob set

1330
02:09:30,390 --> 02:09:36,590
Bei operator im value steht dann überschreibt er die beim injecten wie auch immer da das im hintergrund macht keine ahnung

1331
02:09:39,260 --> 02:09:42,380
Und jetzt ist natürlich nur die frage ob der ganze schritt auch funktioniert

1332
02:09:45,830 --> 02:09:50,830
Okay exact in den container rein jetzt brauchen wir mal ein beispiel

1333
02:09:55,140 --> 02:09:57,140
Hier docs

1334
02:09:58,220 --> 02:09:59,500
Docs

1335
02:09:59,500 --> 02:10:06,700
Examples postgres da stand doch da stand doch hier was drin hier psql host sleep bla bla bla

1336
02:10:07,780 --> 02:10:10,700
Okay, dann gucken wir uns die logs an hiervon

1337
02:10:12,020 --> 02:10:14,020
Ist minus w

1338
02:10:14,820 --> 02:10:18,740
Kann kubernetes standardmäßig logs zählen cube ztl oder ist es

1339
02:10:21,860 --> 02:10:25,740
Nicht will ich zählen ich will genau live logs zählen

1340
02:10:27,020 --> 02:10:29,020
das kubernetes

1341
02:10:29,740 --> 02:10:32,020
Minus f genau sowas wie minus f

1342
02:10:37,350 --> 02:10:39,350
Kann das auch minus f

1343
02:10:39,790 --> 02:10:44,590
Das kann das ist das wusste ich gar nicht dass das auch das kann das aber noch nicht lange

1344
02:10:44,950 --> 02:10:47,110
Also ich kann mich noch daran erinnern dass das früher

1345
02:10:47,750 --> 02:10:49,750
Nicht ging

1346
02:10:50,390 --> 02:10:54,150
Das ist ja nice okay da kann man sich live zugucken was passiert wenn ich darauf zugreife

1347
02:10:56,230 --> 02:10:58,230
Es funktioniert

1348
02:10:58,470 --> 02:11:03,950
Also ich meine ich bekomme eine anfrage und dass ich ein passwort eingeben muss ja das ist das ist noch nicht das ergebnis was ich

1349
02:11:03,950 --> 02:11:05,950
haben will aber der proxy

1350
02:11:06,110 --> 02:11:13,270
Funktioniert das schon mal mega nice guckt mal leute ich kann im endeffekt jetzt einfach hardcoded bei meiner anwendung das hier angeben

1351
02:11:13,790 --> 02:11:15,790
und das bei jeder anwendung dafür

1352
02:11:16,590 --> 02:11:18,590
Ich gebe jetzt einfach an

1353
02:11:18,950 --> 02:11:23,230
Datenbank connect also das könnte ihr nächst beliebige anwendung sein jetzt ist das postgres command line tool

1354
02:11:23,910 --> 02:11:27,350
Ich kann jetzt angeben host localhost port 5000 usernamen ja

1355
02:11:28,270 --> 02:11:30,030
da

1356
02:11:30,030 --> 02:11:37,970
Da beißt sich gerade noch ein bisschen ja und die b-namen ok die b-namen ist das einzige was ich angeben muss ja was ich haben

1357
02:11:37,970 --> 02:11:41,540
will

1358
02:11:41,700 --> 02:11:45,500
Okay jetzt fragt er mich natürlich nach dem passwort und das passwort kenne ich nicht das passwort

1359
02:11:46,220 --> 02:11:50,580
Ich überlege gerade ob ich das passwort einfach mal setze um zu gucken ob die verbindung

1360
02:11:51,100 --> 02:11:56,540
Prinzipiell funktionieren würde ich mein mein ziel ist es ja dass ich gar kein passwort mehr brauche

1361
02:11:57,180 --> 02:12:03,520
Wobei ich gebe einfach mal den kubernetes den service account an den ich hier den ich hier

1362
02:12:04,160 --> 02:12:13,990
Hier benutzt habe oder probieren wir das doch mal aus hier diesen service account probieren wir doch jetzt einfach mal ein username

1363
02:12:16,150 --> 02:12:18,150
Fuck

1364
02:12:18,150 --> 02:12:20,150
Moment da ist ein leerzeichen

1365
02:12:20,150 --> 02:12:23,850
Passwort shit

1366
02:12:25,010 --> 02:12:35,520
Wäre auch zu einfach gewesen wenn das jetzt funktioniert hätte ich habe ja was vergessen ich habe ja was ganz vergessen

1367
02:12:37,200 --> 02:12:45,320
Fällt mir gerade ein moment das stand wartet mal warte mal warte mal ich habe das gar nicht eingeschaltet mit dem automatisch authentifizieren

1368
02:12:46,640 --> 02:12:49,440
Moment moment moment hier api documentation

1369
02:12:51,400 --> 02:12:53,400
Private

1370
02:12:53,520 --> 02:12:54,900
Api

1371
02:12:54,900 --> 02:13:03,010
Man kann übrigens anstatt variablen namen auch in socket pass setzen auf der kiste und port fest

1372
02:13:03,570 --> 02:13:06,270
Encoden und alles hier das brauche ich

1373
02:13:08,610 --> 02:13:13,250
Theoretisch müsste dein postgres klein zu einer art sso machen ja das ist ja das geile

1374
02:13:13,490 --> 02:13:17,330
Das muss der postgres klein und die anwendung nicht machen das macht der proxy für mich

1375
02:13:18,450 --> 02:13:24,550
Das ist ja gerade das nice daran ich brauche eigentlich gar nichts außer den username mehr zu wissen bei für die anwendung dass sie

1376
02:13:24,670 --> 02:13:29,590
Funktioniert und sie ist trotzdem abgesichert über die benutzerverwaltung in der google cloud

1377
02:13:30,310 --> 02:13:33,270
Das ist ja gerade das richtig nice daran

1378
02:13:34,310 --> 02:13:37,110
Ich glaube ich habe das vergessen beim deployment hier

1379
02:13:38,590 --> 02:13:43,190
Cube ctl delete minus f löschen wir das ganze noch mal

1380
02:13:46,080 --> 02:13:47,280
Deployment

1381
02:13:47,280 --> 02:13:55,580
True true lul weh

1382
02:13:57,340 --> 02:13:59,340
Trotz minus a

1383
02:13:59,540 --> 02:14:01,540
warum läuft das noch

1384
02:14:07,060 --> 02:14:11,780
Weiß warum das noch warum das noch läuft weil ich weil ich die live in das probe rausgenommen hab

1385
02:14:12,260 --> 02:14:23,920
Jetzt jetzt checkt er nicht ob der container fertig terminiert ist oder nicht aber es müsste es müsste sich jetzt eigentlich gleich alles beendet haben

1386
02:14:37,530 --> 02:14:38,530
okay

1387
02:14:38,530 --> 02:14:47,730
Ich glaube jetzt passt das alles habe ich hier noch das in der historie drinstehen

1388
02:14:51,270 --> 02:14:57,780
Ja das muss ich mir mal kopieren weil das brauche ich gleich wieder lul okay apply

1389
02:15:07,470 --> 02:15:09,470
running

1390
02:15:09,590 --> 02:15:20,430
Um die logs was mit dieb l irgendwas was übersetzt ok

1391
02:15:22,470 --> 02:15:30,440
Exakt ja das heißt jetzt ja anders das ding habe ich ja auch nicht die logs geteilt wo ist das hin doch

1392
02:15:34,370 --> 02:15:38,850
By the way ich kann euch cube ctl autocomplete nur empfehlen sonst dreht man irgendwann durch

1393
02:15:39,570 --> 02:15:41,570
okay prege leute

1394
02:15:41,890 --> 02:15:45,210
Es funkt es geht alter ist das nice

1395
02:15:46,210 --> 02:15:54,090
Es funktioniert ich kann auf die datenbank zugreifen ohne dass ich passwörter brauche ohne dass ich connection strings brauche ohne dass ich irgendwas brauche

1396
02:15:54,610 --> 02:15:56,610
und das okay aktuell

1397
02:15:57,530 --> 02:16:04,490
Aktuell ist es natürlich immer ein bisschen blöd ich greife mit dem kubernetes service account zu auf das alles andere auch zugreift

1398
02:16:07,370 --> 02:16:14,570
Aber das würde ich natürlich wenn ich das produktiv betreibe nicht so machen da würde ich da kriegen die anwendung vielleicht einen eigenen

1399
02:16:15,570 --> 02:16:19,770
Datenbank account aber das ist guck mal hier unten in den proxy log sieht man es auch

1400
02:16:20,410 --> 02:16:26,930
Ja mega nice dass das ist richtig gut also ich glaube das könnte uns wirklich richtig was bringen auf der arbeit weil jetzt so mal jetzt

1401
02:16:26,930 --> 02:16:28,930
So mal zur erklärung warum warum das cool ist

1402
02:16:29,410 --> 02:16:30,890
also normalerweise

1403
02:16:30,890 --> 02:16:34,090
Stellt euch mal vor ich bin jetzt ein entwickler oder ein

1404
02:16:34,730 --> 02:16:39,050
Typ der eine anwendung in kubernetes deployed der zugriff auf den auf eine datenbank brauche

1405
02:16:40,050 --> 02:16:43,570
bräuchte bräuchte der müsste sich jedes mal darum kümmern

1406
02:16:44,570 --> 02:16:48,730
dass er den den richtigen host für die datenbank einträgt

1407
02:16:49,330 --> 02:16:54,210
den muss er irgendwo herbekommen public ip von der datenbank den datenbank port

1408
02:16:54,810 --> 02:16:57,890
den richtigen username und das passwort dafür

1409
02:17:03,060 --> 02:17:04,820
und das brauche alles nicht

1410
02:17:04,820 --> 02:17:11,540
das einzige was der jetzt braucht ist der muss seinen datenbank namen wissen ja gut und das würde ich von ihm erwarten dass er

1411
02:17:11,540 --> 02:17:13,540
weiß welche datenbank er benutzen möchte

1412
02:17:16,050 --> 02:17:18,450
wir können auch mal testen ob das mit der anderen datenbank

1413
02:17:19,450 --> 02:17:26,290
Datenbank funktioniert wir gehen einfach mal kurz rein sagen databases postgres ist halt einfach nur die default datenbank wir erstellen noch mal eine weitere

1414
02:17:26,290 --> 02:17:28,290
datenbank die heißt hier

1415
02:17:28,650 --> 02:17:30,650
ultra wichtig brot

1416
02:17:32,850 --> 02:17:36,650
Bester datenbank namen man darf sich übrigens jetzt hier nicht nicht verwirren lassen

1417
02:17:37,530 --> 02:17:40,850
weil man databases erstellt also was hier erstellt wurde

1418
02:17:41,850 --> 02:17:46,170
auch auch wenn es eine sql instance ist das ist quasi der

1419
02:17:46,450 --> 02:17:50,610
Das ist eine vm auf der eine datenbank läuft in dem fall postgres

1420
02:17:52,130 --> 02:17:55,930
Aber man muss natürlich in der post im postgres

1421
02:17:57,210 --> 02:18:01,170
Selbst noch datenbanken für die unterschiedlichen anwendungen anlegen

1422
02:18:02,410 --> 02:18:06,610
Also wir haben jetzt also wir haben jetzt nicht zwei datenbanken erstellt wir haben jetzt eine datenbank erstellt

1423
02:18:06,890 --> 02:18:12,290
Postgres postgres vm erstellt und darin jetzt eine datenbank erstellt die sich ultra wichtig brot nennt

1424
02:18:12,650 --> 02:18:19,810
Wo ich mir nicht ganz sicher bin ob dieser user standardmäßig zugriff hat auf diese datenbank

1425
02:18:21,490 --> 02:18:25,050
Und wenn nicht bin ich komplett unfähig

1426
02:18:25,690 --> 02:18:28,890
Datenbank queries zu machen um dem user rechte drauf zu geben

1427
02:18:31,670 --> 02:18:34,150
Aber probieren wir es mal wir wollen zugreifen auf

1428
02:18:35,510 --> 02:18:44,040
Ultraport wichtig geht mega pork das heißt der typ der jene anwendung deployed muss wirklich nur noch wissen

1429
02:18:44,840 --> 02:18:46,840
Wie seine datenbank heißt im endeffekt

1430
02:18:49,520 --> 02:18:56,400
Und und theoretischen user wobei ganz ehrlich den user den würde ich sogar vergeben nicht pro anwendung

1431
02:18:56,400 --> 02:18:59,160
Wenn ich es mir einfach machen würde sondern sagen wir mal pro

1432
02:19:01,000 --> 02:19:02,800
Ja

1433
02:19:02,800 --> 02:19:05,400
Security stufe vielleicht dass man sagen würde okay

1434
02:19:06,400 --> 02:19:14,560
Dieser user es gibt ein user für alle def daten datenbanken oder so was was glaube ich auch okay ist so und dadurch dass ich das jetzt

1435
02:19:15,560 --> 02:19:26,840
Über diesen user in der cloud mache dass das alles über meinen kubernetes service account geht

1436
02:19:30,080 --> 02:19:31,560
Hier

1437
02:19:31,560 --> 02:19:36,480
Kann ich auch die komplette user verwaltung in der google cloud benutzen also ich kann hier noch

1438
02:19:36,960 --> 02:19:42,560
Conditions hinzufügen dass ich ihm dann zum beispiel sagen sage hier keine ahnung du darfst

1439
02:19:43,040 --> 02:19:46,680
Ressourcen da und da das nicht benutzen und sowas in der richtung

1440
02:19:51,360 --> 02:19:58,040
Ressources service ist bla bla sonst was also ich kann ich kann jetzt wirklich ganz genau einschränken und zwar nicht

1441
02:19:58,160 --> 02:20:00,160
Irgendwie über irgendwelche komischen

1442
02:20:01,760 --> 02:20:04,680
Postgres secrets und sonst was das kann ich weil weil

1443
02:20:05,160 --> 02:20:09,280
Dieser service account benutzt wir kann ich ganz genau einschränken was die denn jetzt eigentlich machen dürfen

1444
02:20:09,640 --> 02:20:15,240
Das ist schon cool das hat wirklich was das ist das ist relativ sicher das kannst du besser absichern als theoretisch

1445
02:20:15,560 --> 02:20:22,360
Username password kombi noch mal weil es noch fein granularer machen kannst und die leute die anwendung darauf betreiben wollen

1446
02:20:22,680 --> 02:20:24,680
Die müssen gar nichts mehr können

1447
02:20:24,800 --> 02:20:30,440
Die müssen gar nichts wissen die müssen nur noch im prinzip ihre datenbank wissen wo sie hinwollen

1448
02:20:31,000 --> 02:20:37,060
Ja und wahrscheinlich könnten sie sogar eine neue datenbank erstellen mit dem user

1449
02:20:37,580 --> 02:20:48,470
Chat gewonnen ob das funktioniert da brauche ich aber mal jemand der sich mit postgres auskennt

1450
02:20:52,980 --> 02:20:57,360
Nämlich chat wie verbindet man sich

1451
02:20:58,520 --> 02:21:00,520
Wie verbindet man sich zu

1452
02:21:00,840 --> 02:21:08,800
Zu postgres ohne eine datenbank anzugeben wahrscheinlich gar nicht oder dann verbindet man sich nur zur default zur default datenbank

1453
02:21:09,440 --> 02:21:19,220
Und jetzt kann ich sagen create database keckel zum beispiel das darf ich nicht mit dem user okay

1454
02:21:20,380 --> 02:21:26,060
Warum darf ich das nicht mit dem user wahrscheinlich weil ich nur cloud sql client bin

1455
02:21:26,620 --> 02:21:29,180
und cloud sql instance user

1456
02:21:30,180 --> 02:21:34,500
Der operator darf nicht ausfallen ja gut der operator

1457
02:21:35,340 --> 02:21:37,380
der operator

1458
02:21:37,380 --> 02:21:42,580
Läuft auf dem kombiniertes cluster und hat drei notes dann heißt er läuft auch dreimal

1459
02:21:42,900 --> 02:21:49,060
Also da wünsche ich mir jetzt nicht so viel auch geht das auch mit zertifikat wie meinst du kleinen zertifikate oder was meinst du

1460
02:21:55,120 --> 02:22:03,880
oder wie oder was

1461
02:22:03,880 --> 02:22:16,770
also google cloud sql kann kleinen zertifikate

1462
02:22:17,770 --> 02:22:23,170
Aber wenn du das so wie ich hier machst mit dem proxy brauchst du ja gar keinen kleinen zertifikat mehr

1463
02:22:24,010 --> 02:22:27,640
also kleinen zertifikate gehen

1464
02:22:28,240 --> 02:22:32,320
Kann ich dir sogar zeigen wie das funktioniert das ist relativ simpel du gehst dir auf connections

1465
02:22:33,280 --> 02:22:38,480
Security und hier kannst du guck create kleinen zertifikat da sagst du ein blubb keck weh

1466
02:22:41,520 --> 02:22:48,600
Und dann hast du hier die ganzen sachen die du brauchst zum connecten ich hoffe ich habe jetzt alles schnell mitgetippt

1467
02:22:50,800 --> 02:22:52,800
Genau

1468
02:22:53,360 --> 02:23:00,880
So funktioniert das und kann ich das entlöschen another operation is in progress na gut

1469
02:23:02,080 --> 02:23:04,080
Kappa knaps dankeschön für den prime sub

1470
02:23:10,480 --> 02:23:12,440
Jetzt kann ich es löschen

1471
02:23:12,440 --> 02:23:19,800
Also so funktioniert das auch mit kleinen zertifikaten ja wenn du so machst wie ich mit dem proxy dann brauchst du ja gar keine kleinen zertifikate mehr

1472
02:23:20,480 --> 02:23:23,520
weil

1473
02:23:23,520 --> 02:23:30,920
Du connectest dich gegen local host dahinter ist prinzipiell alles verschlüsselt und es geht über das google

1474
02:23:30,920 --> 02:23:37,560
Im und die benutzerverwaltung in der cloud also da kannst du es ja sogar noch besser einstellen was wie wie wer wo wie was darf

1475
02:23:38,800 --> 02:23:44,920
Aber ja du kannst prinzipiell das auch mit kleinen zertifikaten machen zur zur authentifizierung habe ich sogar auf der arbeit schon gemacht das funktioniert auch wirklich

1476
02:23:45,560 --> 02:23:56,510
Ja der proxy ist ich weiß nicht wie lange schon im stream heute war es also der proxy macht mehr als nur proxy

1477
02:23:57,070 --> 02:24:02,990
Der proxy macht folgendes guck mal ich verbinde mich auf local host also ich bin hier auf meinem kubernetes container drauf

1478
02:24:03,310 --> 02:24:09,830
Der proxy verbindet also nein psql verbindet sich auf local host port 5000 mit einem google

1479
02:24:10,630 --> 02:24:16,110
Service account in wirklichkeit läuft hier drauf ein sql proxy

1480
02:24:17,030 --> 02:24:18,750
der wiederum

1481
02:24:18,750 --> 02:24:23,190
dann die authentifizierung mit diesem service account macht also sprich

1482
02:24:24,030 --> 02:24:29,910
Alles was dieser service account macht darfst du machen und was er nicht darf darfst du nicht machen also du musst gar nicht gar keine

1483
02:24:29,910 --> 02:24:31,910
großen gedanken mehr machen um

1484
02:24:32,190 --> 02:24:34,550
user in der datenbank oder irgendwelche

1485
02:24:35,590 --> 02:24:41,350
firewall regeln wer wohin darf werden nicht wohin darf es darf einfach gar keiner irgendwo hin außer er geht über den proxy

1486
02:24:41,430 --> 02:24:47,870
Vom proxy hinter den proxy ist eh alles verschlüsselt abgreifen kann das keiner weil das ding injected ist auf local host

1487
02:24:48,990 --> 02:24:50,790
und der proxy selbst

1488
02:24:50,790 --> 02:24:56,670
Macht dann die authentifizierung gegen das google zeug also das ist echt richtig geile kombination und

1489
02:24:57,150 --> 02:25:02,910
Erleichtert wenn es so willst allen allen die arbeit was ich jetzt noch nicht gecheckt habe ist wie ich das probieren wir jetzt mal aus

1490
02:25:02,910 --> 02:25:05,350
Wie ich diesem user hier rechte geben kann

1491
02:25:06,830 --> 02:25:08,830
Für

1492
02:25:08,950 --> 02:25:13,710
Dass ich datenbanken erstellen kann ich meine ich könnte dem sql admin geben

1493
02:25:13,870 --> 02:25:17,950
Das könnte vielleicht ein bisschen zu viel des guten sein aber schauen wir mal ob das funktioniert

1494
02:25:18,950 --> 02:25:20,950
Sql admin

1495
02:25:22,190 --> 02:25:24,070
Create

1496
02:25:24,070 --> 02:25:26,070
create database keckel

1497
02:25:27,350 --> 02:25:28,590
Okay

1498
02:25:28,590 --> 02:25:32,230
Das ist jetzt irgendwelche datenbank magic keine ahnung wie das funktioniert

1499
02:25:34,700 --> 02:25:43,620
Frag mich nicht ich habe keinen schimmer wie man das einrichten kann dass das funktioniert

1500
02:25:45,060 --> 02:25:53,330
Vielleicht vielleicht ist das auch eine sache die man hier irgendwie bei users einstellen muss oder so keiner kein plastenschimmer

1501
02:25:54,330 --> 02:26:01,290
Wie man also chat ihr habt ihr habt wie listet man user so nee postgres list user

1502
02:26:03,290 --> 02:26:05,490
Minus was minus die u

1503
02:26:06,650 --> 02:26:10,570
Ja

1504
02:26:10,570 --> 02:26:13,490
Ja gut der hat ja auch nix der hat ja auch keine berechtigung

1505
02:26:14,130 --> 02:26:20,050
Das heißt ich müsste ich müsste dem jetzt erst mal berechtigung geben da hört meine datenbank da hören meine

1506
02:26:20,850 --> 02:26:24,770
Datenbank skills auf kein kein plastenschimmer wie man das jetzt gescheit macht

1507
02:26:24,890 --> 02:26:29,330
Einer von euch chat seiner von euch richtig richtig higher q was datenbank angeht

1508
02:26:30,450 --> 02:26:40,320
Wie gebe ich dem user hier jetzt berechtigung daten create create data db

1509
02:26:41,160 --> 02:26:48,120
Ich meine ich kann googeln aber vielleicht ist ja der chat der chat muss auch mal glänzen heute

1510
02:26:48,680 --> 02:26:50,680
Kann ich meinen apple futtern in der zwischenzeit

1511
02:26:54,700 --> 02:26:56,500
kramt

1512
02:26:56,500 --> 02:27:15,110
Keine ahnung wie das funktioniert ich habe von ich habe von datenbanken keine ahnung

1513
02:27:15,270 --> 02:27:17,270
Funktioniert

1514
02:27:35,280 --> 02:27:37,740
Okay also was sagen die dazu

1515
02:27:43,100 --> 02:27:45,100
All privileges

1516
02:28:25,290 --> 02:28:27,290
Kann ich mir die rechten

1517
02:28:27,290 --> 02:28:33,600
Selbst kann ich mir die Rechte wahrscheinlich nicht geben, vermute ich jetzt einfach mal.

1518
02:28:33,600 --> 02:28:40,580
Ah, da kann man kein Ad benutzen, das ist natürlich auch ein Sack.

1519
02:28:40,580 --> 02:28:44,020
Vermission denied, ja logisch.

1520
02:28:44,020 --> 02:28:47,020
Da muss ich mich aber als Admin verbinden, wollte ich gerade sagen, das wäre ja bescheuert,

1521
02:28:47,020 --> 02:28:49,020
wenn das einfach so funktioniert, ne?

1522
02:28:49,020 --> 02:28:52,020
Okay, das heißt, ich verbinde mich jetzt als Postgres.

1523
02:28:54,020 --> 02:28:57,020
Postgres, aber da habe ich das Passwort nicht für.

1524
02:28:57,020 --> 02:29:05,600
Das heißt, ich gehe jetzt erstmal in meine Datenbank

1525
02:29:05,600 --> 02:29:13,700
und denke mir mal kurz auf die Schnelle ein Poggers highly secure Passwort aus,

1526
02:29:13,700 --> 02:29:15,700
was ich da jetzt reinpasten werde.

1527
02:29:15,700 --> 02:29:16,700
Change Passwort.

1528
02:29:16,700 --> 02:29:18,700
Was ihr nicht seht.

1529
02:29:18,700 --> 02:29:20,700
Okay.

1530
02:29:20,700 --> 02:29:22,700
User updated.

1531
02:29:22,700 --> 02:29:30,170
Okay, da sind wir am Start.

1532
02:29:30,170 --> 02:29:32,170
Ah, fuck, ich habe das Passwort geleakt, lul.

1533
02:29:32,170 --> 02:29:34,170
Macht aber nichts,

1534
02:29:34,170 --> 02:29:37,170
weil die Datenbank ist nicht öffentlich zugreifbar.

1535
02:29:37,170 --> 02:29:57,320
Alter User.

1536
02:29:57,320 --> 02:30:01,080
Okay.

1537
02:30:01,080 --> 02:30:03,080
Hat das jetzt funktioniert?

1538
02:30:03,080 --> 02:30:05,080
Muss ich jetzt irgendwie Save oder sowas machen?

1539
02:30:05,080 --> 02:30:08,080
Leute, ich habe echt keinen Plan von SQL-Syntax-Kram.

1540
02:30:08,080 --> 02:30:10,080
Okay.

1541
02:30:10,080 --> 02:30:13,080
Create database keckel.

1542
02:30:13,080 --> 02:30:16,450
Easy, funktioniert.

1543
02:30:16,450 --> 02:30:18,450
Drop.

1544
02:30:18,450 --> 02:30:20,450
Database keckel.

1545
02:30:20,450 --> 02:30:22,450
Jawohl.

1546
02:30:22,450 --> 02:30:23,450
Datenbank permissions.

1547
02:30:23,450 --> 02:30:25,450
Siehste, Premiere, da habe ich wieder was gelernt.

1548
02:30:25,450 --> 02:30:26,450
Easy.

1549
02:30:26,450 --> 02:30:30,450
So, und mit den Berechtigungen kannst du jetzt tatsächlich alles machen, was du willst.

1550
02:30:30,450 --> 02:30:35,450
Ich meine, ich würde es nicht unbedingt einem Kubernetes Service Account geben normalerweise,

1551
02:30:35,450 --> 02:30:37,450
die Berechtigung da drauf, ja.

1552
02:30:37,450 --> 02:30:49,960
Aber jetzt ist es halt nice.

1553
02:30:49,960 --> 02:30:51,960
Jetzt kann jeder auch sich eine eigene,

1554
02:30:51,960 --> 02:30:53,960
jede Anwendung sich auch eine eigene Datenbank erstellen,

1555
02:30:53,960 --> 02:30:55,960
wenn er das braucht.

1556
02:30:55,960 --> 02:30:57,960
Das ist cool.

1557
02:30:57,960 --> 02:30:59,960
So, eine Sache will ich noch ausprobieren.

1558
02:30:59,960 --> 02:31:01,960
Und zwar,

1559
02:31:01,960 --> 02:31:05,780
macht doch eher der DB-Admin.

1560
02:31:05,780 --> 02:31:10,780
Ja, mir geht es hauptsächlich auch um irgendwelche Entwickler-Bastelcluster.

1561
02:31:10,780 --> 02:31:12,780
Weil genau dafür ist es halt nice.

1562
02:31:12,780 --> 02:31:16,780
Da können die ihr eigenes Deployment machen, den Kubernetes.

1563
02:31:16,780 --> 02:31:20,780
Ich lege initial einmal die Config für den Operator an.

1564
02:31:20,780 --> 02:31:23,780
Und solange die ihr Deployment richtig taggen,

1565
02:31:23,780 --> 02:31:26,780
kriegen sie den Proxy injected in ihr Deployment

1566
02:31:26,780 --> 02:31:28,780
und können den Rest selbst machen.

1567
02:31:28,780 --> 02:31:38,150
Finde ich eigentlich sehr pog.

1568
02:31:38,150 --> 02:31:41,780
Es geht mir hier nur um Entwicklung.

1569
02:31:41,780 --> 02:31:46,780
Also sprich, die könnten jetzt natürlich auch jede Tabelle droppen von allen anderen Usern.

1570
02:31:46,780 --> 02:31:49,780
Das sollte natürlich nicht so sein.

1571
02:31:49,780 --> 02:31:59,790
Also eine Sache will ich noch ausprobieren.

1572
02:31:59,790 --> 02:32:06,700
Und zwar, ich lösche das Deployment mal wieder.

1573
02:32:06,700 --> 02:32:08,700
Und zwar, was wir jetzt mal machen ist,

1574
02:32:08,700 --> 02:32:10,700
ich öffne das mal in Visual Studio Code.

1575
02:32:10,700 --> 02:32:12,700
Ups.

1576
02:32:12,700 --> 02:32:13,700
Okay, was habe ich jetzt gemacht?

1577
02:32:13,700 --> 02:32:14,700
Ich öffne das mal.

1578
02:32:14,700 --> 02:32:15,700
Oh ne, ich muss mal kurz zumachen.

1579
02:32:15,700 --> 02:32:17,700
Noch mal aufmachen, neu aufmachen.

1580
02:32:17,700 --> 02:32:23,040
Ich öffne das mal in Visual Studio Code.

1581
02:32:23,040 --> 02:32:28,040
Und zwar haben wir doch jetzt hier diese Deployment Postgres Datei.

1582
02:32:29,040 --> 02:32:31,040
Nervt nicht rum.

1583
02:32:31,040 --> 02:32:33,040
Was wäre, das ist kein YAML.

1584
02:32:33,040 --> 02:32:37,920
Das ist, ähm, Kubernetes.

1585
02:32:37,920 --> 02:32:39,920
Äh, habe ich nicht.

1586
02:32:39,920 --> 02:32:44,900
Ist auch kein Helm-Template.

1587
02:32:44,900 --> 02:32:48,340
Missing Properties.

1588
02:32:48,340 --> 02:32:51,340
Ach, der will mich darauf hinweisen, dass ich irgendwie Mist gemacht habe.

1589
02:32:51,340 --> 02:32:58,340
Alter, jetzt sei mal nicht pepsiger als der Papst hier, Kubernetes-Plugin.

1590
02:32:58,340 --> 02:33:01,340
Also, es ist jetzt ja so,

1591
02:33:01,340 --> 02:33:05,340
dass es aktuell nur für dieses eine Deployment hier gilt.

1592
02:33:05,340 --> 02:33:06,340
So.

1593
02:33:06,340 --> 02:33:08,340
Und was ich jetzt mal ausprobieren will, ist folgendes.

1594
02:33:08,340 --> 02:33:11,340
Wir ändern das jetzt mal.

1595
02:33:11,340 --> 02:33:13,340
Wir nennen das hier nicht Deployment, sondern wir nennen das hier einfach mal,

1596
02:33:13,340 --> 02:33:17,970
keine Ahnung, wie heißt das da oben?

1597
02:33:17,970 --> 02:33:18,970
Ja.

1598
02:33:18,970 --> 02:33:19,970
Auth.

1599
02:33:19,970 --> 02:33:20,970
Work.

1600
02:33:20,970 --> 02:33:21,970
Load.

1601
02:33:21,970 --> 02:33:24,280
YAML.

1602
02:33:24,280 --> 02:33:26,280
So, Copy, Paste.

1603
02:33:26,280 --> 02:33:31,280
Und das hier nennen wir Postgres.

1604
02:33:31,280 --> 02:33:32,280
Oder hier App.

1605
02:33:32,280 --> 02:33:33,280
App.

1606
02:33:33,280 --> 02:33:34,280
App1.YAML.

1607
02:33:34,280 --> 02:33:35,280
Besser Name überhaupt.

1608
02:33:35,280 --> 02:33:36,280
So.

1609
02:33:36,280 --> 02:33:38,280
Hier schmeißen wir das raus.

1610
02:33:38,280 --> 02:33:41,280
Und hier schmeißen wir das raus.

1611
02:33:41,280 --> 02:33:43,280
Ah, da haben wir das schön einzeln.

1612
02:33:43,280 --> 02:33:46,280
Kommentare sind overrated, outdated, debated.

1613
02:33:46,280 --> 02:33:48,280
Niemand braucht Kommentare.

1614
02:33:48,280 --> 02:33:51,280
Ich finde es an der Stelle wirklich viel übersichtlicher.

1615
02:33:51,280 --> 02:33:52,280
So.

1616
02:33:52,280 --> 02:33:54,280
Und jetzt, und jetzt was ich ausprobieren will, ist folgendes.

1617
02:33:54,280 --> 02:33:58,280
Ich würde, dieses Ding würde ich einmalig als Admin einspielen.

1618
02:33:58,280 --> 02:34:00,280
Und es kann ja mehrere Deployments geben.

1619
02:34:00,280 --> 02:34:04,110
Mit unterschiedlichen Namen.

1620
02:34:04,110 --> 02:34:08,110
Das heißt, die Labels und Selectors funktionieren an der Stelle nicht.

1621
02:34:08,110 --> 02:34:12,110
Ich will jetzt mal gucken, ob ich hier einen Workload-Selector hinkriege,

1622
02:34:12,110 --> 02:34:18,110
der beliebig viele Deployments von dieser App automatisch injekten würde.

1623
02:34:18,110 --> 02:34:20,110
Versteht ihr, was ich meine?

1624
02:34:20,110 --> 02:34:22,110
Also mein aktuelles ist hardcoded.

1625
02:34:22,110 --> 02:34:26,110
Ein Workload für ein, für ein, für ein Deployment.

1626
02:34:26,110 --> 02:34:31,110
Was ich aber will ist, ein Workload, der auf beliebig viele Deployments geht,

1627
02:34:31,110 --> 02:34:33,110
solange sie die richtigen Labels haben.

1628
02:34:33,110 --> 02:34:36,110
Weil es gibt ja nicht nur ein Deployment.

1629
02:34:36,110 --> 02:34:37,110
Es gibt ja mehr.

1630
02:34:37,110 --> 02:34:41,110
Es gibt hier zum Beispiel, keine Ahnung, App 1 nennen wir das Ding jetzt mal hier.

1631
02:34:41,110 --> 02:34:43,110
Match Labels, App 1, App 1, App 1.

1632
02:34:43,110 --> 02:34:44,110
So.

1633
02:34:44,110 --> 02:34:48,110
Jetzt gibt es aber auch, jetzt gibt es aber auch noch App 2 zum Beispiel.

1634
02:34:48,110 --> 02:34:54,080
Brauchst du aber für jeden DB-Cluster einen Operator?

1635
02:34:54,080 --> 02:34:56,080
Ne.

1636
02:34:56,080 --> 02:34:59,080
Ich brauche für jeden Kubernetes-Cluster einen Operator.

1637
02:34:59,080 --> 02:35:02,080
Mit dem Datenbank-Cluster hat das nichts zu tun.

1638
02:35:02,080 --> 02:35:03,080
So.

1639
02:35:03,080 --> 02:35:05,080
Das ist, das ist App 2.

1640
02:35:05,080 --> 02:35:09,080
So und jetzt Match das, ich glaube jetzt sieht man das, jetzt sieht man das Problem.

1641
02:35:09,080 --> 02:35:13,080
Hier kann ich jetzt ja nur eintragen, App 1 oder App 2.

1642
02:35:13,080 --> 02:35:16,080
Aber ich will sowas haben im Endeffekt.

1643
02:35:16,080 --> 02:35:18,080
Doch.

1644
02:35:18,080 --> 02:35:22,460
Doch, es gibt eine, eine Entwicklungs-Datenbank.

1645
02:35:22,460 --> 02:35:23,460
Es gibt, Moment, Moment.

1646
02:35:23,460 --> 02:35:24,460
Ne, ne, ne, ne.

1647
02:35:24,460 --> 02:35:25,460
Nicht Datenbank.

1648
02:35:25,460 --> 02:35:26,460
Nicht Datenbank.

1649
02:35:26,460 --> 02:35:27,460
Ähm.

1650
02:35:27,460 --> 02:35:31,460
Also ich meine jetzt, ich meine die Postgres-Instanz.

1651
02:35:31,460 --> 02:35:33,460
Auf die dürfen beide zugreifen.

1652
02:35:33,460 --> 02:35:36,460
Datenbank darf sich jeder fälligst eine eigene anlegen.

1653
02:35:36,460 --> 02:35:55,670
Das ist richtig.

1654
02:35:55,670 --> 02:35:56,670
Ja.

1655
02:35:56,670 --> 02:35:57,670
Ja.

1656
02:35:57,670 --> 02:35:58,670
Wenn ich einmal.

1657
02:35:58,670 --> 02:35:59,670
Also.

1658
02:35:59,670 --> 02:36:00,670
Für jede.

1659
02:36:00,670 --> 02:36:03,670
Es ist egal, ob ich einmal Postgres und einmal MariaDB habe.

1660
02:36:03,670 --> 02:36:10,670
Für jede Datenbank-Instanz brauche ich einen neuen, äh, Auth-Workload.

1661
02:36:10,670 --> 02:36:11,670
Korrekt.

1662
02:36:11,670 --> 02:36:14,670
Du siehst ja, hier steht ja nicht mal der Datenbank-Typ drinne.

1663
02:36:14,670 --> 02:36:17,670
Also mal angenommen, du hättest jetzt, du hättest jetzt eine, äh.

1664
02:36:17,670 --> 02:36:18,670
Ups.

1665
02:36:18,670 --> 02:36:21,670
Du hättest jetzt, du hättest jetzt eine MariaDB.

1666
02:36:21,670 --> 02:36:25,670
Dann ist das hier vielleicht keine, dein Test, deine Test-Datenbank ist MariaDB.

1667
02:36:25,670 --> 02:36:26,670
Ja.

1668
02:36:26,670 --> 02:36:27,670
Aber das ist ja auch nicht schlimm.

1669
02:36:27,670 --> 02:36:32,670
Das würdest du halt einmalig anlegen, an wie viele Datenbanken hast du.

1670
02:36:32,670 --> 02:36:40,670
Wenn du natürlich eine Datenbank-Instanz pro Deployment, pro Cluster hast, dann bringt

1671
02:36:40,670 --> 02:36:46,280
dir das Ganze nix.

1672
02:36:46,280 --> 02:36:51,280
Aber wenn du beispielsweise eine Datenbank hast, auf die mehrere Anwendungen zugreifen,

1673
02:36:51,280 --> 02:36:56,280
also eine Postgres-Instanz, auf die mehrere Anwendungen zugreifen, um dort ihre Datenbanken

1674
02:36:56,280 --> 02:36:58,280
anzulegen, dann ist es sinnig.

1675
02:36:58,280 --> 02:37:00,280
Äh, heute stimmt übrigens nicht.

1676
02:37:00,280 --> 02:37:01,280
Kombiniert das YAML-File.

1677
02:37:01,280 --> 02:37:04,280
So, jetzt wollen wir das nämlich mal ausprobieren.

1678
02:37:04,280 --> 02:37:08,280
Wie baue ich einen Selector für Label?

1679
02:37:08,280 --> 02:37:13,900
Da bin ich komplett Noob.

1680
02:37:13,900 --> 02:37:21,330
Ja.

1681
02:37:21,330 --> 02:37:22,330
Ja, gut.

1682
02:37:22,330 --> 02:37:25,330
Okay, machen wir mal Labels.

1683
02:37:25,330 --> 02:37:27,330
Geben wir das schon mal an.

1684
02:37:27,330 --> 02:37:37,370
Direkt unter, direkt unter Metadata.

1685
02:37:37,370 --> 02:37:38,370
Deployment-Label.

1686
02:37:38,370 --> 02:37:44,680
Ich kann mir immer nicht merken, an was, an welche Stellen der Campbell kommt.

1687
02:37:44,680 --> 02:37:47,120
Hier.

1688
02:37:47,120 --> 02:37:52,120
Direkt, direkt unter Metadata.

1689
02:37:52,120 --> 02:38:00,120
So, Labels machen wir jetzt mal sowas wie, äh, keine Ahnung, SQL.

1690
02:38:00,120 --> 02:38:03,120
Äh, nee, SQL.

1691
02:38:03,120 --> 02:38:06,120
Wie funktioniert das mit Labels?

1692
02:38:06,120 --> 02:38:07,120
Ah, nee, App.

1693
02:38:07,120 --> 02:38:08,120
Ja, machen wir so.

1694
02:38:08,120 --> 02:38:10,120
Wobei das eigentlich egal ist, wie ich das nenne.

1695
02:38:10,120 --> 02:38:11,120
App, SQL oder so.

1696
02:38:11,120 --> 02:38:12,120
Ja.

1697
02:38:12,120 --> 02:38:14,120
So, Label, also das ist Key, das ist Value.

1698
02:38:14,120 --> 02:38:31,580
So, und jetzt brauche ich einen Selector auf alle Deployments, die, ja, sowas hier.

1699
02:38:31,580 --> 02:38:37,580
Alle Deployments, die das Label SQL enthalten.

1700
02:38:37,580 --> 02:38:42,150
Kannst du auch bestimmt ein Label DB-Type machen.

1701
02:38:42,150 --> 02:38:44,150
Ja, ja, ja, ja, ja, sowas in der Richtung.

1702
02:38:44,150 --> 02:38:45,150
Könnte man machen.

1703
02:38:45,150 --> 02:38:49,150
Ich mache es jetzt mal so, mit App, App-Type SQL.

1704
02:38:49,150 --> 02:38:51,150
Wie funktioniert das jetzt?

1705
02:38:51,150 --> 02:38:58,020
Node-Select, wie, einfach so?

1706
02:38:58,020 --> 02:39:03,020
Okay, das muss ich in die Hilfe, das muss ich mal in die Hilfe gucken.

1707
02:39:03,020 --> 02:39:06,020
Workload-Selector.

1708
02:39:06,020 --> 02:39:07,020
Okay.

1709
02:39:07,020 --> 02:39:11,020
Selector, Option, Select Resource using Labels.

1710
02:39:11,020 --> 02:39:14,020
See, Label-Selectors, Label-Selectors.

1711
02:39:14,020 --> 02:39:16,020
Label-Selector, ja, machen wir doch.

1712
02:39:16,020 --> 02:39:20,020
Also, von der Idee her, mache ich einfach Workload-Selector.

1713
02:39:20,020 --> 02:39:22,020
Nee.

1714
02:39:22,020 --> 02:39:27,160
Ach, Kind Deployment?

1715
02:39:27,160 --> 02:39:32,140
Wie muss denn das dann aussehen?

1716
02:39:32,140 --> 02:39:42,210
Nee, das habe ich, das checke ich jetzt gerade nicht.

1717
02:39:42,210 --> 02:39:59,000
Haben die da nicht, haben die irgendein ordentliches Beispiel für?

1718
02:39:59,000 --> 02:40:11,000
Workload-Spec, Describe, which, Describe, which, should be, must specify kind, ah, Name oder Selector.

1719
02:40:11,000 --> 02:40:15,000
Okay, Kind Deployment, das war doch ursprünglich ja auch so, ja.

1720
02:40:15,000 --> 02:40:19,000
Okay, Moment, Deployment.

1721
02:40:19,000 --> 02:40:22,000
Und dann muss ich unten drunter Selector machen.

1722
02:40:22,000 --> 02:40:26,000
Selector, Selector.

1723
02:40:26,000 --> 02:40:31,000
Und da drunter dann App gleich SQL.

1724
02:40:31,000 --> 02:40:33,000
So, okay.

1725
02:40:33,000 --> 02:40:35,000
Das müsste, das müsste funktionieren.

1726
02:40:35,000 --> 02:40:37,000
Ja.

1727
02:40:37,000 --> 02:40:39,000
Also, dann testen wir das doch mal.

1728
02:40:39,000 --> 02:40:45,000
Cube CTL, Apply, Minus F, Auth Workload.

1729
02:40:45,000 --> 02:40:47,000
Fuck.

1730
02:40:47,000 --> 02:40:55,080
Was?

1731
02:40:55,080 --> 02:40:58,080
Okay, nice, dann habe ich das falsch, falsch gemacht.

1732
02:40:58,080 --> 02:41:02,080
Irgendjemand eine Idee, wie man das richtig schreibt?

1733
02:41:02,080 --> 02:41:08,610
Must specify, was, App weg?

1734
02:41:08,610 --> 02:41:13,140
Nee.

1735
02:41:13,140 --> 02:41:15,140
Nee.

1736
02:41:15,140 --> 02:41:33,750
Das glaube ich nicht.

1737
02:41:33,750 --> 02:41:38,150
Nee, nee, das muss schon doppelt.

1738
02:41:38,150 --> 02:41:45,150
Ist vielleicht der Resource-Type anders?

1739
02:41:45,150 --> 02:41:46,150
Nee.

1740
02:41:46,150 --> 02:41:48,150
Selector.

1741
02:41:48,150 --> 02:41:52,150
Moment, mit welcher Version haben die das mit dem Selector eingeführt?

1742
02:41:52,150 --> 02:41:55,150
Nicht, dass das jetzt super krass Bleeding Edge ist.

1743
02:41:55,150 --> 02:41:58,150
Ich benutze V1.2.

1744
02:41:58,150 --> 02:42:02,040
Nee, das war da auch schon drinne.

1745
02:42:02,040 --> 02:42:14,700
Was ist, was ist hier dran falsch?

1746
02:42:14,700 --> 02:42:18,200
Field Selector.

1747
02:42:18,200 --> 02:42:24,160
Was passiert denn, wenn ich da sowas hinschreibe, was ja so nicht funktioniert?

1748
02:42:24,160 --> 02:42:27,160
Select Resources using Labels.

1749
02:42:27,160 --> 02:42:30,160
Siehste, ich habe das schon richtig gemacht.

1750
02:42:30,160 --> 02:42:38,330
Das muss so gehen.

1751
02:42:38,330 --> 02:42:40,330
Aber was hat er für Schmerzen?

1752
02:42:40,330 --> 02:42:46,270
Unknown Field.

1753
02:42:48,270 --> 02:42:50,270
API Version V1, das ist aber richtig.

1754
02:42:50,270 --> 02:42:55,670
Es gibt nur API Version V1.

1755
02:42:55,670 --> 02:42:57,670
Selector App SQL.

1756
02:42:57,670 --> 02:43:00,670
Meinst du, das muss man quoten?

1757
02:43:00,670 --> 02:43:02,670
Boah, man weiß ja nie.

1758
02:43:02,670 --> 02:43:08,920
Nee.

1759
02:43:08,920 --> 02:43:10,920
Okay.

1760
02:43:10,920 --> 02:43:18,690
Es gibt nur V1.

1761
02:43:18,690 --> 02:43:46,320
Okay.

1762
02:43:46,320 --> 02:43:52,320
Label Selector.

1763
02:43:52,320 --> 02:43:54,320
Das ist ja immer irgendein Beispiel.

1764
02:43:54,320 --> 02:44:01,560
Was ist der Unterschied zwischen Git-CMD und Git-Bash?

1765
02:44:01,560 --> 02:44:05,560
Ich würde sagen, das eine ist Git, was nur Bash mitbringt.

1766
02:44:05,560 --> 02:44:08,560
Und das andere ist nur Git, aber du musst es über Windows...

1767
02:44:08,560 --> 02:44:12,560
Nee, du musst es über Windows-CMD ausführen.

1768
02:44:12,560 --> 02:44:22,270
Ah, Moment.

1769
02:44:23,270 --> 02:44:25,270
Match Labels.

1770
02:44:25,270 --> 02:44:29,030
Was ist das?

1771
02:44:29,030 --> 02:44:31,030
Okay, wie?

1772
02:44:31,030 --> 02:44:43,330
Match Labels.

1773
02:44:43,330 --> 02:44:45,330
Gibt das jetzt Sinn?

1774
02:44:45,330 --> 02:44:48,330
Okay, Apply.

1775
02:44:48,330 --> 02:44:50,330
Ah.

1776
02:44:50,330 --> 02:44:52,330
Jetzt hat er es gefressen.

1777
02:44:52,330 --> 02:44:54,330
Gut.

1778
02:44:54,330 --> 02:44:57,330
Ich bin jetzt mal gespannt, ob das funktioniert.

1779
02:44:57,330 --> 02:44:59,330
So, kubectl.

1780
02:44:59,330 --> 02:45:01,330
Also, wir haben jetzt unseren Work.

1781
02:45:01,330 --> 02:45:03,330
Das wäre das, was ich als Admin mache.

1782
02:45:03,330 --> 02:45:05,330
Einmal Initial beim Server.

1783
02:45:05,330 --> 02:45:07,330
Beim Kubernetes-Cluster aufbauen.

1784
02:45:07,330 --> 02:45:09,330
Oder was heißt initial?

1785
02:45:09,330 --> 02:45:11,330
Pro Datenbank-Instanz.

1786
02:45:11,330 --> 02:45:15,330
Und jetzt kommt irgendeiner her und deployt eine neue Anwendung.

1787
02:45:15,330 --> 02:45:17,330
Nämlich App 1.

1788
02:45:17,330 --> 02:45:19,330
So, jetzt ist die Frage...

1789
02:45:19,330 --> 02:45:21,330
Jawohl!

1790
02:45:21,330 --> 02:45:23,330
Es wird injectet.

1791
02:45:23,330 --> 02:45:27,920
Funktioniert.

1792
02:45:27,920 --> 02:45:29,920
Exact.

1793
02:45:29,920 --> 02:45:31,920
App.

1794
02:45:31,920 --> 02:45:33,920
Ja.

1795
02:45:33,920 --> 02:45:35,920
psql.

1796
02:45:35,920 --> 02:45:40,320
Easy.

1797
02:45:40,320 --> 02:45:42,320
Nice.

1798
02:45:42,320 --> 02:45:44,320
Oh, das ist ja geil.

1799
02:45:44,320 --> 02:45:46,320
So, und jetzt haben wir...

1800
02:45:46,320 --> 02:45:48,320
Apply.

1801
02:45:48,320 --> 02:45:50,320
Jetzt deployt noch einer eine App.

1802
02:45:50,320 --> 02:45:52,320
Zack, kriegt es injectet.

1803
02:45:52,320 --> 02:45:59,890
App 2.

1804
02:45:59,890 --> 02:46:01,890
Funktioniert.

1805
02:46:01,890 --> 02:46:03,890
Okay, das ist extrem nice.

1806
02:46:03,890 --> 02:46:05,890
Das ist wirklich nice.

1807
02:46:05,890 --> 02:46:07,890
Jetzt können die Leute einfach hergehen.

1808
02:46:07,890 --> 02:46:09,890
Ihre Anwendung deployen.

1809
02:46:09,890 --> 02:46:11,890
Also, wir reden hier von einem Entwicklung- und Test-Cluster.

1810
02:46:11,890 --> 02:46:13,890
Ja.

1811
02:46:13,890 --> 02:46:15,890
Und können ihre Anwendung deployen.

1812
02:46:15,890 --> 02:46:17,890
Und können rumsauen, wie sie wollen.

1813
02:46:17,890 --> 02:46:19,890
Ohne mich nerven zu müssen.

1814
02:46:19,890 --> 02:46:21,890
Die können einfach deployen, was sie wollen.

1815
02:46:21,890 --> 02:46:23,890
Und haben sicheren Datenbank-Access.

1816
02:46:23,890 --> 02:46:25,890
Und aber auch nur, was der Account hergibt.

1817
02:46:25,890 --> 02:46:32,930
Ob man das für Nicht-GCP-Cluster auch verwenden kann?

1818
02:46:32,930 --> 02:46:38,310
Also, den SQL-Proxy im Prinzip wahrscheinlich schon.

1819
02:46:38,310 --> 02:46:40,310
Aber die ganzen anderen Sachen sind ja drum herum.

1820
02:46:40,310 --> 02:46:42,310
Aber du kannst auch sowas wie...

1821
02:46:42,310 --> 02:46:44,310
Wie das hier benutzen, ja?

1822
02:46:44,310 --> 02:46:46,310
Wenn du sowas ähnliches selbst bauen willst.

1823
02:46:46,310 --> 02:46:48,310
Als Proxy.

1824
02:46:48,310 --> 02:46:50,310
Kannst du mal das Repo linken?

1825
02:46:52,310 --> 02:46:56,450
Na, den...

1826
02:46:56,450 --> 02:46:58,450
Den hier wirst du nicht...

1827
02:46:58,450 --> 02:47:00,450
Also, den...

1828
02:47:00,450 --> 02:47:02,450
Den Proxy-Operator.

1829
02:47:02,450 --> 02:47:04,450
Den kannst du vergessen.

1830
02:47:04,450 --> 02:47:06,450
Der ist von Google explizit für Google.

1831
02:47:06,450 --> 02:47:08,450
Ja.

1832
02:47:08,450 --> 02:47:10,450
Den hast du explizit für Google gebaut.

1833
02:47:10,450 --> 02:47:12,450
Das wirst du nirgendwo anders gescheit benutzen können.

1834
02:47:12,450 --> 02:47:14,450
Gehe ich mal von aus.

1835
02:47:14,450 --> 02:47:16,450
Aber...

1836
02:47:16,450 --> 02:47:18,450
Die anderen Anbieter haben ähnliche Sachen.

1837
02:47:18,450 --> 02:47:20,450
Also, ich weiß, dass die...

1838
02:47:20,450 --> 02:47:22,450
Das Azure...

1839
02:47:22,450 --> 02:47:24,450
Azure hat irgendeinen Database-Gateway oder sowas.

1840
02:47:24,450 --> 02:47:26,450
Habe ich aber nicht verwendet.

1841
02:47:26,450 --> 02:47:28,450
Und AWS, weiß nicht, Chat?

1842
02:47:28,450 --> 02:47:30,450
Irgendjemand von euch meinte doch vorhin, dass AWS das auch hat.

1843
02:47:30,450 --> 02:47:43,300
Darkseid, was wir heute gemacht haben.

1844
02:47:43,300 --> 02:47:45,300
Zeig dir das mal.

1845
02:47:45,300 --> 02:47:47,300
Auf die Schnelle.

1846
02:47:47,300 --> 02:47:52,980
Also, guck mal.

1847
02:47:52,980 --> 02:47:54,980
Pass auf.

1848
02:47:54,980 --> 02:47:56,980
Obacht.

1849
02:47:56,980 --> 02:47:58,980
Pfeiffertime, Leute.

1850
02:47:58,980 --> 02:48:00,980
Wir erklären das jetzt mal dem Darkseid, was wir gemacht haben.

1851
02:48:00,980 --> 02:48:02,980
Siehst du?

1852
02:48:02,980 --> 02:48:04,980
Siehst du dieses Kubernetes-Deployment hier?

1853
02:48:04,980 --> 02:48:06,980
Das ist äußerst simpel.

1854
02:48:06,980 --> 02:48:08,980
Da passiert eigentlich so gut wie gar nichts.

1855
02:48:08,980 --> 02:48:10,980
Das startet ein Pod.

1856
02:48:10,980 --> 02:48:12,980
Das startet ein Pod.

1857
02:48:12,980 --> 02:48:14,980
Mit dem Default Postgres-Image.

1858
02:48:14,980 --> 02:48:16,980
Es könnte übrigens auch ein Debian-Image sein.

1859
02:48:16,980 --> 02:48:18,980
Ist vollkommen egal.

1860
02:48:18,980 --> 02:48:20,980
Das ist alles.

1861
02:48:20,980 --> 02:48:22,980
Mehr macht das nicht.

1862
02:48:22,980 --> 02:48:26,290
So.

1863
02:48:26,290 --> 02:48:30,050
Und jetzt halte dich fest.

1864
02:48:30,050 --> 02:48:32,050
Ich deploye jetzt diese App, die du hier siehst.

1865
02:48:32,050 --> 02:48:36,520
Wie viele Container würdest du erwarten, die starten?

1866
02:48:36,520 --> 02:48:38,520
Wie viele Container würdest du erwarten, die starten?

1867
02:48:38,520 --> 02:48:40,520
Wie viele Container würdest du erwarten, die starten?

1868
02:48:40,520 --> 02:48:42,520
In diesem Deployment.

1869
02:48:42,520 --> 02:48:44,520
Also, Replikas 1.

1870
02:48:44,520 --> 02:48:46,520
Aber wie viele Container hier in dem Pod starten?

1871
02:48:46,520 --> 02:48:48,520
Einer.

1872
02:48:48,520 --> 02:48:52,920
Korrekt.

1873
02:48:52,920 --> 02:48:54,920
Ich auch.

1874
02:48:54,920 --> 02:48:56,920
So.

1875
02:48:56,920 --> 02:48:58,920
Aber, wenn ich das deploye, wirst du gleich sehen.

1876
02:48:58,920 --> 02:49:00,920
Guck mal da.

1877
02:49:00,920 --> 02:49:02,920
Es sind ja 2.

1878
02:49:02,920 --> 02:49:06,550
Warum sind das denn 2?

1879
02:49:06,550 --> 02:49:11,840
Es sind 2,

1880
02:49:11,840 --> 02:49:13,840
weil

1881
02:49:13,840 --> 02:49:23,080
hier

1882
02:49:23,080 --> 02:49:25,080
Was macht denn Postgres hier für komische Dinge?

1883
02:49:25,080 --> 02:49:29,030
Ja, egal.

1884
02:49:29,030 --> 02:49:31,030
Es sind 2,

1885
02:49:31,030 --> 02:49:33,030
weil hier ein Postgres

1886
02:49:33,030 --> 02:49:35,030
beziehungsweise ein SQL-Proxy

1887
02:49:35,030 --> 02:49:37,030
injected wird.

1888
02:49:37,030 --> 02:49:39,030
Der auf

1889
02:49:39,030 --> 02:49:41,030
localhost

1890
02:49:41,030 --> 02:49:43,030
Port 5000 läuft.

1891
02:49:43,030 --> 02:49:45,030
Und das Coole ist jetzt,

1892
02:49:45,030 --> 02:49:47,030
ich kann mich jetzt verbinden

1893
02:49:47,030 --> 02:49:49,030
zu meiner Datenbank von diesem Container

1894
02:49:49,030 --> 02:49:51,030
über den injected Proxy

1895
02:49:51,030 --> 02:49:53,030
ohne,

1896
02:49:53,030 --> 02:49:55,030
dass ich den

1897
02:49:55,030 --> 02:49:57,030
Connection-String für die Datenbank brauche,

1898
02:49:57,030 --> 02:49:59,030
ohne, dass ich den Port wissen muss für die Datenbank

1899
02:49:59,030 --> 02:50:01,030
und ohne, dass ich

1900
02:50:01,030 --> 02:50:03,030
ein Passwort für die Datenbank brauche.

1901
02:50:03,030 --> 02:50:05,030
Und das Ganze passiert trotzdem komplett

1902
02:50:05,030 --> 02:50:07,030
geschlüsselt und anhand

1903
02:50:07,030 --> 02:50:09,030
des Google Cloud Benutzer

1904
02:50:09,030 --> 02:50:11,030
Managements. Also ich kann auch

1905
02:50:11,030 --> 02:50:13,030
nur das machen, was ich machen soll.

1906
02:50:13,030 --> 02:50:15,030
Das heißt, du kannst jetzt ganz viele Versionen von

1907
02:50:15,030 --> 02:50:17,030
dieser App deployen. Wir gehen jetzt davon aus,

1908
02:50:17,030 --> 02:50:19,030
das sind unterschiedliche Apps.

1909
02:50:19,030 --> 02:50:21,030
Und die Leute, die das

1910
02:50:21,030 --> 02:50:23,030
deployen, beziehungsweise Entwickler, die das

1911
02:50:23,030 --> 02:50:25,030
testen wollen, die müssen sich nicht

1912
02:50:25,030 --> 02:50:27,030
mehr um irgendwelche Connection-Strings und Datenbank

1913
02:50:27,030 --> 02:50:29,030
Kram kümmern. Das heißt, ich als

1914
02:50:29,030 --> 02:50:31,030
Admin richte das einmal initial ein

1915
02:50:31,030 --> 02:50:33,030
und alle weit, genau,

1916
02:50:33,030 --> 02:50:35,030
das ist wegen dem Proxy und alle weiteren

1917
02:50:35,030 --> 02:50:37,030
Deployments

1918
02:50:37,030 --> 02:50:39,030
kriegen diesen Proxy injected

1919
02:50:39,030 --> 02:50:41,030
und können dann mit einem Service-Account

1920
02:50:41,030 --> 02:50:43,030
auf die Datenbank zugreifen.

1921
02:50:43,030 --> 02:50:45,030
Der Service-Account ist vielleicht nicht so clever

1922
02:50:45,030 --> 02:50:47,030
gewählt, weil das alle Container

1923
02:50:47,030 --> 02:50:49,030
im Kubernetes-Cluster jetzt dürfen.

1924
02:50:49,030 --> 02:50:51,030
Genau, ich muss einmalig für diesen Cluster

1925
02:50:51,030 --> 02:50:53,030
diese Config einspielen

1926
02:50:53,030 --> 02:50:55,030
und er überwacht jetzt

1927
02:50:55,030 --> 02:50:57,030
alle Deployments, die getaggt sind

1928
02:50:57,030 --> 02:51:01,300
mit dem Label SQL.

1929
02:51:01,300 --> 02:51:03,300
Also, wir gehen jetzt...

1930
02:51:03,300 --> 02:51:05,300
Leute, geht davon aus,

1931
02:51:05,300 --> 02:51:07,300
das sind unterschiedliche Apps. Ja, geht davon aus,

1932
02:51:07,300 --> 02:51:09,300
das ist eine Node.js-App und das ist eine .NET-App.

1933
02:51:09,300 --> 02:51:11,300
Macht keinen Unterschied. Es funktioniert.

1934
02:51:11,300 --> 02:51:13,300
Das heißt, ich als Admin lege das nur einmal

1935
02:51:13,300 --> 02:51:15,300
an und alle können dann

1936
02:51:15,300 --> 02:51:17,300
darauf zugreifen, ohne dass sie sich groß Gedanken machen müssen.

1937
02:51:17,300 --> 02:51:20,930
Das ist extrem nice.

1938
02:51:20,930 --> 02:51:22,930
Extremly pog.

1939
02:51:22,930 --> 02:51:24,930
Guck, und das funktioniert

1940
02:51:24,930 --> 02:51:26,930
hiermit, weil der Proxy quasi

1941
02:51:26,930 --> 02:51:28,930
Authentifizierung macht mit dem Service-Account.

1942
02:51:28,930 --> 02:51:30,930
Allerdings geht das Ganze nur, wenn die

1943
02:51:30,930 --> 02:51:32,930
Anwendung selbst unter diesem Service-Account gestartet

1944
02:51:32,930 --> 02:51:34,930
wurde. Alles andere wäre ja

1945
02:51:34,930 --> 02:51:36,930
irgendwie fragwürdig.

1946
02:51:36,930 --> 02:51:40,560
Ja.

1947
02:51:40,560 --> 02:51:42,560
Und das finde ich richtig gut.

1948
02:51:42,560 --> 02:51:44,560
Das gefällt mir.

1949
02:51:44,560 --> 02:51:46,560
Das gefällt mir sehr, dass das so einfach...

1950
02:51:46,560 --> 02:51:48,560
Ich meine, wir haben fast drei Stunden am Start.

1951
02:51:48,560 --> 02:51:50,560
Aber wir haben ja auch links und rechts ein bisschen

1952
02:51:50,560 --> 02:51:52,560
geguckt. Aber das ist wirklich

1953
02:51:52,560 --> 02:51:54,560
extrem nice.

1954
02:51:54,560 --> 02:51:56,560
Das werde ich morgen auf der Arbeit gleich bauen.

1955
02:51:56,560 --> 02:51:58,560
Gerade für unsere Entwicklungs-Cluster ist das nice.

1956
02:51:58,560 --> 02:52:00,560
Da können die ganzen Entwickler

1957
02:52:00,560 --> 02:52:02,560
einfach hirnlos deployen.

1958
02:52:02,560 --> 02:52:04,560
Das klingt jetzt böse. Das meine ich gar nicht.

1959
02:52:04,560 --> 02:52:06,560
Die können einfach hirnlos deployen und brauchen

1960
02:52:06,560 --> 02:52:08,560
weder von mir Datenbank-User

1961
02:52:08,560 --> 02:52:10,560
noch Datenbank noch irgendwas.

1962
02:52:10,560 --> 02:52:12,560
Die können einfach deployen. Im Zweifelsfall können sie

1963
02:52:12,560 --> 02:52:14,560
sich zwar gegenseitig die Datenbanken

1964
02:52:14,560 --> 02:52:16,560
abschießen,

1965
02:52:16,560 --> 02:52:18,560
wenn sie sich wirklich connecten und sagen

1966
02:52:18,560 --> 02:52:20,560
Drop Database. Aber hey, ich meine,

1967
02:52:20,560 --> 02:52:22,560
das ist ein Entwicklungs-Cluster. Das soll ich mir nicht so anstellen.

1968
02:52:22,560 --> 02:52:29,970
Das finde ich wirklich

1969
02:52:29,970 --> 02:52:31,970
sehr, sehr pog.

1970
02:52:31,970 --> 02:52:33,970
Das gefällt mir.

1971
02:52:33,970 --> 02:52:35,970
Was ist bei Google möglich?

1972
02:52:35,970 --> 02:52:37,970
Bei Google weiß ich, dass es geht.

1973
02:52:37,970 --> 02:52:39,970
Ich denke mal, dass andere Cloud-Anbieter

1974
02:52:39,970 --> 02:52:41,970
auch ähnliche Sachen haben.

1975
02:52:41,970 --> 02:52:43,970
Also ich weiß, dass Azure

1976
02:52:43,970 --> 02:52:45,970
sowas wie Database Gateway hat.

1977
02:52:45,970 --> 02:53:00,200
Ja.

1978
02:53:00,200 --> 02:53:02,200
Aber das habe ich auch nie benutzt.

1979
02:53:02,200 --> 02:53:04,200
Das ist aber cool, oder?

1980
02:53:04,200 --> 02:53:06,200
Also, Chat, jetzt mal

1981
02:53:06,200 --> 02:53:08,200
eine Frage an euch. Nachdem ich jetzt ja erstmal

1982
02:53:08,200 --> 02:53:10,200
die letzten Viertelstunde extrem begeistert

1983
02:53:10,200 --> 02:53:12,200
war davon. Konnte man das

1984
02:53:12,200 --> 02:53:14,200
eigentlich, was wir bis jetzt gemacht haben,

1985
02:53:14,200 --> 02:53:16,200
alles soweit verstehen?

1986
02:53:16,200 --> 02:53:18,200
Und erkennt ihr,

1987
02:53:18,200 --> 02:53:20,200
oder versteht ihr, warum mich das so

1988
02:53:20,200 --> 02:53:22,200
freut, dass das funktioniert?

1989
02:53:22,200 --> 02:53:24,200
Also, dass das was wirklich cooles ist?

1990
02:53:24,200 --> 02:53:26,200
Oder sagt ihr, die Easy-Kram

1991
02:53:26,200 --> 02:53:28,200
habe ich in zwei Minuten selbst gescriptet?

1992
02:53:28,200 --> 02:53:30,200
Haha. Kann ja auch sein.

1993
02:53:30,200 --> 02:53:32,200
Ja.

1994
02:53:32,200 --> 02:53:34,200
Prompt.

1995
02:53:34,200 --> 02:53:36,200
Exzellent, Leute. Exzellent.

1996
02:53:36,200 --> 02:53:38,200
Chat ist einfach zu

1997
02:53:38,200 --> 02:53:40,200
schlau. Er versteht immer instant alles.

1998
02:53:40,200 --> 02:53:51,440
Also ich futter.

1999
02:53:51,440 --> 02:53:53,440
Ich futter seit irgendwie einer halben Stunde

2000
02:53:53,440 --> 02:53:55,440
noch an dem letzten

2001
02:53:55,440 --> 02:53:57,440
Stück Apple

2002
02:53:57,440 --> 02:53:59,440
und Pfirsich. Halber Apple,

2003
02:53:59,440 --> 02:54:06,280
halber Pfirsich.

2004
02:54:06,280 --> 02:54:08,280
Du hast jetzt impliziert, dass du das für Prod nicht nutzt.

2005
02:54:08,280 --> 02:54:10,280
Doch. Würde ich.

2006
02:54:10,280 --> 02:54:12,280
Würde ich. Aber ich würde es ein bisschen anders machen.

2007
02:54:12,280 --> 02:54:14,280
Also ich würde denen in Prod

2008
02:54:14,280 --> 02:54:16,280
zum Beispiel keine Rechte geben,

2009
02:54:16,280 --> 02:54:18,280
dass die andere

2010
02:54:18,280 --> 02:54:20,280
Datenbanken löschen dürfen.

2011
02:54:20,280 --> 02:54:22,280
Und ich würde

2012
02:54:22,280 --> 02:54:24,280
in Prod nicht den

2013
02:54:24,280 --> 02:54:26,280
globalen Kubernetes Service Account nehmen,

2014
02:54:26,280 --> 02:54:28,280
sondern beispielsweise einen Service Account

2015
02:54:28,280 --> 02:54:34,600
extra dafür anlegen.

2016
02:54:34,600 --> 02:54:36,600
Eventuell könnte man

2017
02:54:36,600 --> 02:54:38,600
sogar so weit gehen und sagen, wir legen

2018
02:54:38,600 --> 02:54:40,600
einen Service Account pro App an.

2019
02:54:40,600 --> 02:54:42,600
Allerdings wenn man so weit geht,

2020
02:54:42,600 --> 02:54:44,600
könnte man auch gleich Workload Identity

2021
02:54:44,600 --> 02:54:46,600
verwenden.

2022
02:54:46,600 --> 02:54:48,600
Dann kann man Kubernetes

2023
02:54:48,600 --> 02:54:50,600
Service Accounts mit Google Service Accounts

2024
02:54:50,600 --> 02:54:55,440
verknüpfen. Echt? Nice.

2025
02:54:55,440 --> 02:54:57,440
Hahaha.

2026
02:54:57,440 --> 02:54:59,440
Hahaha.

2027
02:54:59,440 --> 02:55:09,670
Und verschiedene

2028
02:55:09,670 --> 02:55:11,670
Namespaces.

2029
02:55:11,670 --> 02:55:13,670
Ja, gut, das stimmt. Die würde ich nicht alle

2030
02:55:13,670 --> 02:55:15,670
in den

2031
02:55:15,670 --> 02:55:17,670
Default Namespace klatschen.

2032
02:55:17,670 --> 02:55:19,670
Aber, auch das probieren wir

2033
02:55:19,670 --> 02:55:21,670
mal kurz aus.

2034
02:55:21,670 --> 02:55:23,670
Das sollte aber unabhängig von

2035
02:55:23,670 --> 02:55:25,670
Namespaces funktionieren.

2036
02:55:25,670 --> 02:55:27,670
Weil wir machen jetzt einfach mal hier den...

2037
02:55:27,670 --> 02:55:31,620
Och.

2038
02:55:31,620 --> 02:55:33,620
Wo muss der Namespace hin? Hier, oder?

2039
02:55:33,620 --> 02:55:37,120
Nee.

2040
02:55:37,120 --> 02:55:39,120
Doch, oder?

2041
02:55:39,120 --> 02:55:41,120
Namespace. Hey, kommt das direkt hier oben?

2042
02:55:41,120 --> 02:55:43,120
Warum habe ich hier kein ordentliches

2043
02:55:43,120 --> 02:55:49,570
Autocomplete? Was ist das?

2044
02:55:49,570 --> 02:55:51,570
Steht da kein Namespace?

2045
02:55:51,570 --> 02:55:53,570
Ähm.

2046
02:55:53,570 --> 02:55:55,570
Namespace Deployment.

2047
02:55:55,570 --> 02:55:57,570
Ich glaube, kommt das nicht in Metadata?

2048
02:55:57,570 --> 02:55:59,570
What?

2049
02:55:59,570 --> 02:56:01,570
Ich bilde mir auch ein, dass das hier

2050
02:56:01,570 --> 02:56:07,760
drunter kommt, ja? Hä?

2051
02:56:07,760 --> 02:56:09,760
Ich habe eben fünfmal Autocomplete

2052
02:56:09,760 --> 02:56:13,590
gedrückt, da kam nichts.

2053
02:56:13,590 --> 02:56:15,590
Naja. Okay, wir deployen

2054
02:56:15,590 --> 02:56:18,960
das jetzt in Namespace Kekl.

2055
02:56:18,960 --> 02:56:20,960
Wenn ich das jetzt deploye, wird der mir wahrscheinlich sagen,

2056
02:56:20,960 --> 02:56:22,960
dass der

2057
02:56:22,960 --> 02:56:24,960
Namespace nicht da ist.

2058
02:56:24,960 --> 02:56:26,960
Ja.

2059
02:56:26,960 --> 02:56:28,960
kubectl create ns

2060
02:56:28,960 --> 02:56:30,960
ging das nicht so hier?

2061
02:56:30,960 --> 02:56:35,170
Kekl.

2062
02:56:35,170 --> 02:56:37,170
Minus A.

2063
02:56:37,170 --> 02:56:39,170
Oh.

2064
02:56:39,170 --> 02:56:53,430
Warum erkennt der das nicht?

2065
02:56:53,430 --> 02:56:55,430
Der Operator?

2066
02:56:55,430 --> 02:56:57,430
Was ist da los?

2067
02:56:57,430 --> 02:56:59,430
Ich habe doch beim Operator

2068
02:56:59,430 --> 02:57:01,430
gar keinen Namespace eingestellt.

2069
02:57:01,430 --> 02:57:07,110
Muss man...

2070
02:57:07,110 --> 02:57:09,110
Also nicht, dass man das jetzt

2071
02:57:09,110 --> 02:57:11,110
deployt pro Namespace, aber da steht

2072
02:57:11,110 --> 02:57:19,090
überhaupt kein Namespace dabei.

2073
02:57:19,090 --> 02:57:21,090
Oder ist das wirklich nur pro Namespace?

2074
02:57:21,090 --> 02:57:23,090
Okay, das wäre shit.

2075
02:57:23,090 --> 02:57:25,090
Nee, das kann nicht pro Namespace sein.

2076
02:57:25,090 --> 02:57:27,090
Man kann hier sogar sagen, kein Namespace

2077
02:57:27,090 --> 02:57:29,090
und so.

2078
02:57:29,090 --> 02:57:31,090
Das würde eigentlich keinen Sinn machen.

2079
02:57:31,090 --> 02:57:40,610
Okay, schauen wir mal, wenn ich das jetzt

2080
02:57:40,610 --> 02:57:42,610
nochmal umstelle. Namespace.

2081
02:57:42,610 --> 02:57:44,610
Namespace.

2082
02:57:44,610 --> 02:57:56,150
Default.

2083
02:57:56,150 --> 02:57:58,150
Dann funktioniert es. Hä?

2084
02:57:58,150 --> 02:58:03,320
Das wäre aber

2085
02:58:03,320 --> 02:58:05,320
extrem hängen geblieben, wenn das

2086
02:58:05,320 --> 02:58:07,320
Namespaced wäre.

2087
02:58:07,320 --> 02:58:09,320
Warum sollte man das denn machen?

2088
02:58:09,320 --> 02:58:11,320
Man kann doch sogar,

2089
02:58:11,320 --> 02:58:13,320
hier steht doch sogar explizit drin,

2090
02:58:13,320 --> 02:58:15,320
dass man, mal hier API

2091
02:58:15,320 --> 02:58:23,040
Selector

2092
02:58:23,040 --> 02:58:25,040
Ach nee.

2093
02:58:25,040 --> 02:58:30,210
Man kann doch gar nicht

2094
02:58:30,210 --> 02:58:32,210
die Namespace...

2095
02:58:32,210 --> 02:58:34,210
Ah, da muss man das pro Namespace machen.

2096
02:58:34,210 --> 02:58:36,210
Okay, dann finde ich doch schon mal

2097
02:58:36,210 --> 02:58:38,210
wieder einen Teil weniger nice.

2098
02:58:38,210 --> 02:58:43,000
Ich meine, nicht wirklich so ein

2099
02:58:43,000 --> 02:58:45,000
richtiger, richtig

2100
02:58:45,000 --> 02:58:47,000
großes Problem, weil

2101
02:58:47,000 --> 02:58:49,000
meistens hält es sich doch gerade

2102
02:58:49,000 --> 02:58:51,000
stark in Grenzen, wie viele Namespaces

2103
02:58:51,000 --> 02:58:53,000
da... Aber

2104
02:58:53,000 --> 02:58:55,000
schon ein bisschen doof.

2105
02:58:55,000 --> 02:58:58,880
Ich hätte eigentlich gehofft, dass man das

2106
02:58:58,880 --> 02:59:00,880
lokal machen kann, also dass man das global

2107
02:59:00,880 --> 02:59:11,110
machen kann.

2108
02:59:11,110 --> 02:59:13,110
Kannst du sowas wie Target Namespace? Ja, ich kann

2109
02:59:13,110 --> 02:59:15,110
das wahrscheinlich einstellen.

2110
02:59:15,110 --> 02:59:17,110
Was ist das da? Workload...

2111
02:59:17,110 --> 02:59:19,110
Was ich wahrscheinlich machen kann, ist folgendes.

2112
02:59:21,110 --> 02:59:23,110
Wir machen das einfach mal so hier.

2113
02:59:23,110 --> 02:59:25,110
Dann ist es jetzt eben...

2114
02:59:25,110 --> 02:59:27,110
Machen wir hier nochmal das gleiche. Wahrscheinlich kann

2115
02:59:27,110 --> 02:59:34,390
ich jetzt hier unten auch sagen,

2116
02:59:34,390 --> 02:59:36,390
Namespace

2117
02:59:36,390 --> 02:59:38,390
Keckle, so.

2118
02:59:38,390 --> 02:59:40,390
Das müsste wahrscheinlich funktionieren

2119
02:59:40,390 --> 02:59:42,390
jetzt.

2120
02:59:42,390 --> 02:59:44,390
Ja, machen wir hier nochmal, dass es eindeutig ist.

2121
02:59:44,390 --> 02:59:46,390
Default, also das müsste jetzt

2122
02:59:46,390 --> 02:59:48,390
wahrscheinlich funktionieren.

2123
02:59:48,390 --> 02:59:50,390
Apply, minus F.

2124
02:59:50,390 --> 03:00:06,790
Ja.

2125
03:00:06,790 --> 03:00:08,790
Jetzt haben wir das zweimal drinnen.

2126
03:00:08,790 --> 03:00:10,790
Und jetzt haben wir Apply

2127
03:00:10,790 --> 03:00:12,790
von dieser zweiten Ressource.

2128
03:00:12,790 --> 03:00:14,790
Ports.

2129
03:00:14,790 --> 03:00:16,790
Okay.

2130
03:00:16,790 --> 03:00:18,790
Ups.

2131
03:00:18,790 --> 03:00:20,790
Delete.

2132
03:00:20,790 --> 03:00:22,790
Namespace.

2133
03:00:22,790 --> 03:00:29,880
Keckle.

2134
03:00:29,880 --> 03:00:31,880
Das funktioniert. Man muss den Kram

2135
03:00:31,880 --> 03:00:33,880
mehrfach, man muss den Kram pro

2136
03:00:33,880 --> 03:00:35,880
Namespace deployen.

2137
03:00:35,880 --> 03:00:37,880
Okay.

2138
03:00:39,880 --> 03:00:41,880
Ja, bisschen doof vielleicht, aber

2139
03:00:41,880 --> 03:00:46,920
nicht so schlimm.

2140
03:00:46,920 --> 03:01:15,800
Würde ich sagen.

2141
03:01:15,800 --> 03:01:17,800
Schade, dass es nichts Globales gibt.

2142
03:01:17,800 --> 03:01:23,800
Und ein Helmchart zum Installieren

2143
03:01:23,800 --> 03:01:25,800
wäre tatsächlich auch ganz nice, ja.

2144
03:01:25,800 --> 03:01:27,800
Das schlimmt wohl.

2145
03:01:27,800 --> 03:02:12,070
Chat, wie handhabt

2146
03:02:12,070 --> 03:02:14,070
ihr das mit

2147
03:02:14,070 --> 03:02:16,070
Namespaces? Macht ihr

2148
03:02:16,070 --> 03:02:18,070
pro...

2149
03:02:18,070 --> 03:02:20,070
Sagen wir mal angenommen, ihr installiert

2150
03:02:20,070 --> 03:02:22,070
mit Helm eine Anwendung.

2151
03:02:22,070 --> 03:02:24,070
Mr. Moogame, Dankeschön für den Sub.

2152
03:02:24,070 --> 03:02:26,070
Pog.

2153
03:02:26,070 --> 03:02:28,070
Angenommen, ihr installiert

2154
03:02:28,070 --> 03:02:30,070
mit Helm eine Anwendung.

2155
03:02:30,070 --> 03:02:32,070
Macht ihr dann pro

2156
03:02:32,070 --> 03:02:36,720
Deployment, oder

2157
03:02:36,720 --> 03:02:38,720
wie nennt man das?

2158
03:02:38,720 --> 03:02:40,720
Pro Release?

2159
03:02:40,720 --> 03:02:42,720
Pro Installation, sagen wir mal.

2160
03:02:42,720 --> 03:02:44,720
Einen eigenen Namespace?

2161
03:02:44,720 --> 03:02:46,720
Oder habt ihr sowas wie einen

2162
03:02:46,720 --> 03:02:48,720
Production Namespace,

2163
03:02:48,720 --> 03:02:50,720
wo dann die Anwendung reindeployed wird?

2164
03:02:50,720 --> 03:02:52,720
Und im Zweifelsfall,

2165
03:02:52,720 --> 03:02:54,720
wenn man die Anwendung mehrfach braucht,

2166
03:02:54,720 --> 03:02:56,720
macht man auch zwei Versionen davon in den gleichen Namespace.

2167
03:02:56,720 --> 03:02:58,720
Wobei das da halt wieder das Ding ist,

2168
03:02:58,720 --> 03:03:00,720
da musst du halt

2169
03:03:00,720 --> 03:03:02,720
aufpassen und die

2170
03:03:02,720 --> 03:03:04,720
Helmcharts

2171
03:03:04,720 --> 03:03:06,720
müssen gescheit programmiert sein,

2172
03:03:06,720 --> 03:03:08,720
dass es keine Konflikte bei Secrets

2173
03:03:08,720 --> 03:03:18,180
und sowas gibt.

2174
03:03:18,180 --> 03:03:20,180
Ja, meine Idee war halt,

2175
03:03:20,180 --> 03:03:22,180
meine Idee war halt,

2176
03:03:22,180 --> 03:03:24,180
dass die sich Namespaces

2177
03:03:24,180 --> 03:03:26,180
anlegen können, wie sie lustig sind.

2178
03:03:26,180 --> 03:03:29,810
Ja, irgendeiner

2179
03:03:29,810 --> 03:03:31,810
legt sich jetzt

2180
03:03:31,810 --> 03:03:33,810
ein Blub-Test

2181
03:03:33,810 --> 03:03:35,810
und kann da was reindeployen

2182
03:03:35,810 --> 03:03:37,810
und hat direkt Zugriff

2183
03:03:37,810 --> 03:03:39,810
auf die Datenbank dadurch, durch den Proxy.

2184
03:03:39,810 --> 03:03:46,710
Aber gut, ich mein, wenn's halt

2185
03:03:46,710 --> 03:03:50,470
nicht geht, dann geht's nicht.

2186
03:03:50,470 --> 03:03:52,470
Wobei, so einfach, also mit

2187
03:03:52,470 --> 03:03:54,470
geht nicht, gibt's nicht, ist es nicht.

2188
03:03:54,470 --> 03:03:56,470
Ich könnte auf ein

2189
03:03:56,470 --> 03:03:58,470
Kubernetes-Event reagieren.

2190
03:03:58,470 --> 03:04:00,470
Sobald Namespace angelegt wird,

2191
03:04:00,470 --> 03:04:02,470
triggere ich

2192
03:04:02,470 --> 03:04:04,470
einen Eintrag für diesen Namespace

2193
03:04:04,470 --> 03:04:06,470
für den Proxy-Injector.

2194
03:04:06,470 --> 03:04:14,130
Aber was

2195
03:04:14,130 --> 03:04:16,130
würdet ihr machen, wenn du die

2196
03:04:16,130 --> 03:04:18,130
gleiche Anwendung mehrfach deployen musst?

2197
03:04:18,130 --> 03:04:20,130
Ja, sagen wir jetzt mal,

2198
03:04:20,130 --> 03:04:26,640
ich mein jetzt nicht,

2199
03:04:26,640 --> 03:04:28,640
Replica ist hoch drin, ich mein, du musst jetzt

2200
03:04:28,640 --> 03:04:30,640
wirklich die gleiche Anwendung mehrfach

2201
03:04:30,640 --> 03:04:32,640
deployen. Zum Beispiel, du hast einen Cluster, wo du

2202
03:04:32,640 --> 03:04:34,640
testen willst, ja,

2203
03:04:34,640 --> 03:04:36,640
und dort

2204
03:04:36,640 --> 03:04:38,640
deployen halt, keine Ahnung,

2205
03:04:38,640 --> 03:04:40,640
zwei, drei Entwickler parallel

2206
03:04:40,640 --> 03:04:42,640
die gleiche Anwendung, um Sachen

2207
03:04:42,640 --> 03:04:44,640
auszuprobieren.

2208
03:04:44,640 --> 03:04:46,640
Da kommst du ja so nett

2209
03:04:46,640 --> 03:04:48,640
wirklich hin.

2210
03:04:48,640 --> 03:04:50,640
Oder sind eure Installer so gut

2211
03:04:50,640 --> 03:04:52,640
programmiert, dass sie keine Konflikte haben

2212
03:04:52,640 --> 03:04:54,640
bei Ressourcen wie Secrets und sowas.

2213
03:04:54,640 --> 03:04:59,430
Wie gesagt,

2214
03:04:59,430 --> 03:05:01,430
da kriegst du relativ schnell Konflikte,

2215
03:05:01,430 --> 03:05:03,430
wenn die Helmcharts nicht gescheit gemacht sind.

2216
03:05:03,430 --> 03:05:10,200
Create Namespace?

2217
03:05:10,200 --> 03:05:12,200
Ja gut, dann machst du rum wieder,

2218
03:05:12,200 --> 03:05:14,200
dann machst du eine eigene.

2219
03:05:14,200 --> 03:05:16,200
Dann machst du ja wieder einen eigenen Namespace.

2220
03:05:16,200 --> 03:05:18,200
Dann hast du da sowas wie Backend-Test 1,

2221
03:05:18,200 --> 03:05:24,390
Backend-Test 2 und sowas.

2222
03:05:24,390 --> 03:05:26,390
Bei uns ist pro Microservice

2223
03:05:26,390 --> 03:05:29,960
ein Namespace.

2224
03:05:29,960 --> 03:05:31,960
Ja, so ist das bei uns auch.

2225
03:05:31,960 --> 03:05:33,960
Das hier,

2226
03:05:33,960 --> 03:05:35,960
aber so,

2227
03:05:35,960 --> 03:05:37,960
nicht unbedingt,

2228
03:05:37,960 --> 03:05:39,960
aber in der Regel schon, ja.

2229
03:05:39,960 --> 03:05:41,960
Also so pro größere Anwendung,

2230
03:05:41,960 --> 03:05:43,960
also pro Anwendung ein Namespace.

2231
03:05:43,960 --> 03:05:45,960
Wir haben sogar eine Anwendung, die ist gesplittert

2232
03:05:45,960 --> 03:05:54,130
in zwei.

2233
03:05:54,130 --> 03:05:56,130
Ja, solange du halt selbst, solange du den Kram

2234
03:05:56,130 --> 03:06:00,530
selbst machst, geht das ja noch.

2235
03:06:00,530 --> 03:06:02,530
Hä? Die Pipeline programmiert aber keine

2236
03:06:02,530 --> 03:06:04,530
Helmcharts für dich.

2237
03:06:04,530 --> 03:06:06,530
Und wenn ein Hersteller dir eine Anwendung liefert

2238
03:06:06,530 --> 03:06:08,530
und das Helmchart halt nicht so ganz

2239
03:06:08,530 --> 03:06:10,530
optimal erstellt ist,

2240
03:06:10,530 --> 03:06:12,530
dass Secrets konflikten,

2241
03:06:12,530 --> 03:06:14,530
ja klar kannst du einen Bug-Report aufmachen, aber ist erst mal doof.

2242
03:06:14,530 --> 03:06:16,530
Also es ist zumindest

2243
03:06:16,530 --> 03:06:18,530
einfach, wenn du nicht aufpasst,

2244
03:06:18,530 --> 03:06:20,530
dass du konfliktende Sachen haben kannst in einem Helmchart.

2245
03:06:20,530 --> 03:06:22,530
Weil, wenn du im gleichen Namespace

2246
03:06:22,530 --> 03:06:24,530
mehrfach deployen willst,

2247
03:06:24,530 --> 03:06:26,530
dann muss das Helmchart

2248
03:06:26,530 --> 03:06:28,530
vor alle Ressourcen,

2249
03:06:28,530 --> 03:06:30,530
muss das noch

2250
03:06:30,530 --> 03:06:32,530
darauf achten, dass immer schön

2251
03:06:32,530 --> 03:06:34,530
Release-Name,

2252
03:06:34,530 --> 03:06:36,530
Release-Version und

2253
03:06:36,530 --> 03:06:38,530
alles mögliche noch davor gehängt

2254
03:06:38,530 --> 03:06:40,530
wird, sodass es sich

2255
03:06:40,530 --> 03:06:42,530
nicht konfliktet. Wenn du da an einer

2256
03:06:42,530 --> 03:06:44,530
Stelle nicht aufpasst, hast du irgendwelche Konflikte.

2257
03:06:44,530 --> 03:06:53,220
Ja, aber dann hast du

2258
03:06:53,220 --> 03:06:55,220
nicht das Problem, was ich jetzt beschrieben habe.

2259
03:06:55,220 --> 03:06:57,220
Und da bringt dir eine Pipeline

2260
03:06:57,220 --> 03:06:59,220
ja mal gar nichts.

2261
03:06:59,220 --> 03:07:01,220
Die können das ja, aber wenn das

2262
03:07:01,220 --> 03:07:03,220
Helmchart misstisch programmiert

2263
03:07:03,220 --> 03:07:05,220
ist, dann bringt dir...

2264
03:07:05,220 --> 03:07:07,220
Egal, worüber du das ausführst.

2265
03:07:07,220 --> 03:07:09,220
Das wirkt so, wie jetzt

2266
03:07:09,220 --> 03:07:11,220
hauptsache mal ein Wort gedroppt.

2267
03:07:11,220 --> 03:07:14,920
Ja, wie macht ihr das denn?

2268
03:07:14,920 --> 03:07:16,920
Habt ihr dann einen Namespace,

2269
03:07:16,920 --> 03:07:18,920
sowas wie Backend oder so?

2270
03:07:18,920 --> 03:07:22,480
Oder...

2271
03:07:22,480 --> 03:07:32,130
Frontend.

2272
03:07:32,130 --> 03:07:34,130
Ja, dann hast du automatisch

2273
03:07:34,130 --> 03:07:36,130
pro...

2274
03:07:36,130 --> 03:07:38,130
Installation einen eigenen Namespace.

2275
03:07:38,130 --> 03:07:40,130
Das ist ja das, was ich gerade wissen will, wie ihr das macht.

2276
03:07:40,130 --> 03:07:42,130
Ja, das ist klar.

2277
03:07:42,130 --> 03:07:48,770
Okay, also im Prinzip ist es...

2278
03:07:48,770 --> 03:07:50,770
Aber trotzdem, so schlimm ist es nicht,

2279
03:07:50,770 --> 03:07:52,770
dass das mit dem Proxy nicht funktioniert.

2280
03:07:52,770 --> 03:07:54,770
Übergreifend.

2281
03:07:54,770 --> 03:07:56,770
Namespace übergreifend.

2282
03:07:56,770 --> 03:08:01,560
Und wenn das in der Entwicklung

2283
03:08:01,560 --> 03:08:03,560
ein Problem ist,

2284
03:08:03,560 --> 03:08:05,560
dann kann ich immer noch auf Kubernetes Events

2285
03:08:05,560 --> 03:08:07,560
reagieren und das anlegen lassen.

2286
03:08:07,560 --> 03:08:09,560
Es gibt ja diesen, kennt ihr das Ding?

2287
03:08:09,560 --> 03:08:11,560
Kubernetes

2288
03:08:11,560 --> 03:08:13,560
Bash Operator

2289
03:08:13,560 --> 03:08:15,560
oder so heißt das Ding.

2290
03:08:15,560 --> 03:08:17,560
Shell Operator, genau.

2291
03:08:17,560 --> 03:08:19,560
Da kannst du

2292
03:08:19,560 --> 03:08:21,560
auf Kubernetes Events reagieren

2293
03:08:21,560 --> 03:08:23,560
und Shell Skripte ausführen.

2294
03:08:23,560 --> 03:08:25,560
Also du kannst...

2295
03:08:25,560 --> 03:08:27,560
Ich hab das dafür noch nie

2296
03:08:27,560 --> 03:08:29,560
benutzt, ja. Aber ich gehe

2297
03:08:29,560 --> 03:08:31,560
davon aus, man könnte damit

2298
03:08:31,560 --> 03:08:33,560
sagen, wenn ein Namespace

2299
03:08:33,560 --> 03:08:35,560
angelegt wird, dann

2300
03:08:35,560 --> 03:08:37,560
lege

2301
03:08:37,560 --> 03:08:39,560
automatisch den Proxy...

2302
03:08:39,560 --> 03:08:41,560
den Auth Eintrag

2303
03:08:41,560 --> 03:08:43,560
für diesen Namespace mit an. Das müsste funktionieren.

2304
03:08:43,560 --> 03:08:45,560
Wie lief es bisher? Es hat alles funktioniert,

2305
03:08:45,560 --> 03:08:47,560
Patrick, guck mal.

2306
03:08:47,560 --> 03:08:51,640
PSQL

2307
03:08:51,640 --> 03:08:53,640
hier, Connection auf

2308
03:08:53,640 --> 03:08:55,640
Localhost ohne Passwort.

2309
03:08:55,640 --> 03:08:57,640
Datenbankzugriff

2310
03:08:57,640 --> 03:08:59,640
funzt.

2311
03:08:59,640 --> 03:09:03,970
Alles funktioniert.

2312
03:09:03,970 --> 03:09:05,970
Dein CSS-Problem ist immer noch nicht gelöst.

2313
03:09:05,970 --> 03:09:07,970
Das ist ja wirklich...

2314
03:09:07,970 --> 03:09:09,970
Chat.

2315
03:09:09,970 --> 03:09:15,270
Haben wir irgendwelche high-end CSS-Leute?

2316
03:09:15,270 --> 03:09:17,270
Ich guck mal kurz Discord.

2317
03:09:17,270 --> 03:09:19,270
Ich mach mal kurz Discord auf.

2318
03:09:19,270 --> 03:09:21,270
Du hast das doch bestimmt irgendwo beschrieben.

2319
03:09:21,270 --> 03:09:23,270
Ich kopiere mal das Bild raus.

2320
03:09:23,270 --> 03:09:25,270
5-10 Minuten

2321
03:09:25,270 --> 03:09:27,270
Chatgear HighIQ.

2322
03:09:27,270 --> 03:09:34,230
Das wird jetzt gelöst.

2323
03:09:34,230 --> 03:09:36,230
Discord. Moment.

2324
03:09:36,230 --> 03:09:38,230
Discord.

2325
03:09:38,230 --> 03:09:47,110
Gucken wir jetzt mal rein.

2326
03:09:47,110 --> 03:09:49,110
Ähm...

2327
03:09:49,110 --> 03:09:51,110
Oh, SeriousMax, bist du noch da?

2328
03:09:51,110 --> 03:09:53,110
Ich hab grad erst deine Nachricht

2329
03:09:53,110 --> 03:09:55,110
hier auf Ploppen sehen im Discord. Ich hab gestern

2330
03:09:55,110 --> 03:09:57,110
da mal reingeguckt.

2331
03:09:57,110 --> 03:09:59,110
Es ging wahrscheinlich, ich hab's noch nicht angeklickt,

2332
03:09:59,110 --> 03:10:01,110
aber wahrscheinlich geht's um die DNS-Sache, oder?

2333
03:10:01,110 --> 03:10:03,110
Wie machen wir das

2334
03:10:03,110 --> 03:10:05,110
mit der DNS-Geschichte jetzt?

2335
03:10:05,110 --> 03:10:07,110
Soll ich irgendwelche Einträge

2336
03:10:07,110 --> 03:10:09,110
machen für dich, oder wie machen wir das am besten?

2337
03:10:09,110 --> 03:10:11,110
Hier.

2338
03:10:11,110 --> 03:10:14,870
Broggers.

2339
03:10:14,870 --> 03:10:16,870
Ihr CSS-Call-Problem.

2340
03:10:16,870 --> 03:10:18,870
In Blazer. Alter, jetzt geht's aber

2341
03:10:18,870 --> 03:10:47,330
ab hier.

2342
03:10:47,330 --> 03:10:49,330
Ich weiß nicht, wie ich das gescheit zeigen soll.

2343
03:10:49,330 --> 03:10:51,330
Ich bin nämlich nicht eingeloggt im Discord hier.

2344
03:10:51,330 --> 03:10:56,630
Okay. Chat.

2345
03:10:56,630 --> 03:10:58,630
Irgendwelche HighIQ-CSS-Leute am Start.

2346
03:10:58,630 --> 03:11:02,070
Wenn ja, dann guckt mal

2347
03:11:02,070 --> 03:11:04,070
im Discord in Broggers

2348
03:11:04,070 --> 03:11:06,070
mit Hilfe und schaut euch

2349
03:11:06,070 --> 03:11:08,070
mal das CSS-Call-Problem an.

2350
03:11:08,070 --> 03:11:10,070
Wär doch gelacht,

2351
03:11:10,070 --> 03:11:12,070
wenn bei so vielen Prime-Subs

2352
03:11:12,070 --> 03:11:14,070
kein HighIQ-CSS-Kenner...

2353
03:11:14,070 --> 03:11:16,070
Wo ist denn der Aus...

2354
03:11:16,070 --> 03:11:18,070
Ja, aber Sebarro, ich bin nicht eingeloggt.

2355
03:11:18,070 --> 03:11:22,920
Äh, Sebarro, Alter.

2356
03:11:22,920 --> 03:11:26,740
Max, ich bin nicht eingeloggt.

2357
03:11:26,740 --> 03:11:28,740
Genau, da kommt ihr direkt hin.

2358
03:11:28,740 --> 03:11:30,740
Wo ist denn der

2359
03:11:30,740 --> 03:11:32,740
Auskenn-Fuchs, wenn man ihn braucht?

2360
03:11:32,740 --> 03:11:34,740
Der war schon eine Weile nicht mehr da,

2361
03:11:34,740 --> 03:11:36,740
aber den Namen hab ich mir gemerkt im Zusammenhang mit

2362
03:11:36,740 --> 03:11:38,740
CSS. Der hat auch so einen

2363
03:11:38,740 --> 03:11:40,740
prägnanten Namen gehabt.

2364
03:11:40,740 --> 03:11:50,450
Was hat dich denn dazu gebracht,

2365
03:11:50,450 --> 03:11:52,450
eine Blazer-Anwendung zu machen, Patrick?

2366
03:11:52,450 --> 03:11:54,450
Das würde mich jetzt tatsächlich

2367
03:11:54,450 --> 03:12:00,390
noch mal brennend interessieren.

2368
03:12:00,390 --> 03:12:02,390
Und ist es eine Blazer-Server-Side

2369
03:12:02,390 --> 03:12:04,390
oder Blazer-Client-Side-Anwendung?

2370
03:12:04,390 --> 03:12:06,390
Blazer

2371
03:12:06,390 --> 03:12:08,390
an sich da schon...

2372
03:12:08,390 --> 03:12:10,390
Passt schon, ja.

2373
03:12:10,390 --> 03:12:12,390
Ich finde

2374
03:12:12,390 --> 03:12:14,390
die Client-Side-Sache

2375
03:12:14,390 --> 03:12:16,390
ein bisschen problematisch aktuell

2376
03:12:16,390 --> 03:12:18,390
noch, aber könnte durchaus was Gutes werden.

2377
03:12:18,390 --> 03:12:20,390
Okay, Leute, jetzt

2378
03:12:20,390 --> 03:12:22,390
zeige ich euch noch mal eine weitere

2379
03:12:22,390 --> 03:12:24,390
coole Sache von Terraform.

2380
03:12:24,390 --> 03:12:26,390
So zum Schluss.

2381
03:12:26,390 --> 03:12:28,390
Und zwar, passt mal auf,

2382
03:12:28,390 --> 03:12:33,880
wir haben doch jetzt hier unsere

2383
03:12:33,880 --> 03:12:35,880
Sachen angelegt im Kubernetes.

2384
03:12:35,880 --> 03:12:37,880
Wir haben den Kubernetes-Cluster

2385
03:12:37,880 --> 03:12:39,880
angelegt in der Google Cloud. Wir haben

2386
03:12:39,880 --> 03:12:41,880
Netzwerke und alles mögliche Zeug angelegt.

2387
03:12:41,880 --> 03:12:43,880
Und jetzt will ich das Ganze

2388
03:12:43,880 --> 03:12:45,880
wieder rückstandslos entfernen.

2389
03:12:45,880 --> 03:12:47,880
Also,

2390
03:12:47,880 --> 03:12:51,510
Terraform

2391
03:12:51,510 --> 03:12:58,210
Destroy. Und jetzt

2392
03:12:58,210 --> 03:13:00,210
wird Terraform rückstandslos wieder alles

2393
03:13:00,210 --> 03:13:02,210
löschen. Was ich selbst erstellt habe,

2394
03:13:02,210 --> 03:13:04,210
muss ich, by the way, auch selbst

2395
03:13:04,210 --> 03:13:06,210
löschen.

2396
03:13:06,210 --> 03:13:08,210
92 MB belegt.

2397
03:13:08,210 --> 03:13:10,210
Die Datenbank

2398
03:13:10,210 --> 03:13:12,210
lösche ich mal von Hand.

2399
03:13:12,210 --> 03:13:14,210
Und

2400
03:13:14,210 --> 03:13:16,210
ich hatte, glaube ich,

2401
03:13:16,210 --> 03:13:18,210
eine IP von

2402
03:13:18,210 --> 03:13:20,210
Hand reserviert.

2403
03:13:20,210 --> 03:13:22,210
Wow.

2404
03:13:22,210 --> 03:13:29,560
Nee, das ist

2405
03:13:29,560 --> 03:13:31,560
Kubernetes-Zeug.

2406
03:13:31,560 --> 03:13:39,410
Oder?

2407
03:13:39,410 --> 03:13:43,560
Okay.

2408
03:13:43,560 --> 03:13:45,560
So, und jetzt können wir

2409
03:13:45,560 --> 03:13:47,560
Terraform Sachen schmeißen, wieder alles weg.

2410
03:13:47,560 --> 03:13:49,560
Und Terraform schmeißt auch wieder alles weg.

2411
03:13:49,560 --> 03:13:51,560
Und ihr werdet es gleich sehen.

2412
03:13:51,560 --> 03:13:53,560
In, tja, 5-6 Minuten,

2413
03:13:53,560 --> 03:13:55,560
so lange wird es wahrscheinlich dauern, Terraform

2414
03:13:55,560 --> 03:13:57,560
ist nicht so schnell,

2415
03:13:57,560 --> 03:13:59,560
ist alles wieder rückstandslos

2416
03:13:59,560 --> 03:14:01,560
entfernt. Ach so, der Service-Account,

2417
03:14:01,560 --> 03:14:03,560
der ist noch da.

2418
03:14:03,560 --> 03:14:05,560
Das ist aber auch nicht schlimm, den lasse ich auch noch da.

2419
03:14:05,560 --> 03:14:07,560
Der kostet ja nix.

2420
03:14:07,560 --> 03:14:12,400
Jo.

2421
03:14:12,400 --> 03:14:18,530
Max Pogu.

2422
03:14:18,530 --> 03:14:20,530
Und wenn ich das nächste Mal im Stream,

2423
03:14:20,530 --> 03:14:22,530
mal angenommen, ich würde das nächste Mal an der Stelle weitermachen wollen,

2424
03:14:22,530 --> 03:14:24,530
würde ich einfach wieder sagen,

2425
03:14:24,530 --> 03:14:26,530
Terraform apply und es wäre wieder meine ganze

2426
03:14:26,530 --> 03:14:28,530
Infrastruktur da. Das ist schon, schon

2427
03:14:28,530 --> 03:14:33,640
sehr nice.

2428
03:14:33,640 --> 03:14:35,640
Bam Bam Buda hat subscribed vorhin, hab ich gar nicht gesehen.

2429
03:14:35,640 --> 03:14:37,640
Cringe, Max, ja.

2430
03:14:37,640 --> 03:14:39,640
Aber danke für den Sub.

2431
03:14:39,640 --> 03:14:41,640
Komplett an mir vorbeigegangen.

2432
03:14:41,640 --> 03:14:43,640
Bist du noch da?

2433
03:14:43,640 --> 03:14:45,640
War jetzt ein bisschen spät, aber ich hab's nicht übersehen.

2434
03:14:45,640 --> 03:14:47,640
Wahrscheinlich weg vor 2 Stunden,

2435
03:14:47,640 --> 03:14:49,640
aber irgendwann am Anfang des Streams.

2436
03:14:49,640 --> 03:14:53,400
Ach, du bist noch da? Nice.

2437
03:14:53,400 --> 03:14:55,400
Massive.

2438
03:14:55,400 --> 03:14:58,710
Nice.

2439
03:14:58,710 --> 03:15:02,080
Easy.

2440
03:15:02,080 --> 03:15:04,080
Easy.

2441
03:15:04,080 --> 03:15:06,080
Easy.

2442
03:15:06,080 --> 03:15:08,080
Easy.

2443
03:15:08,080 --> 03:15:10,080
So, das dauert jetzt ein bisschen,

2444
03:15:10,080 --> 03:15:12,080
weil Kubanetes Cluster erstellen und löschen

2445
03:15:12,080 --> 03:15:14,080
ist in Google Cloud immer

2446
03:15:14,080 --> 03:15:23,090
abfuck.

2447
03:15:23,090 --> 03:15:25,090
Yo, Jett, gibt's noch irgendwelche wichtigen Sachen?

2448
03:15:25,090 --> 03:15:27,090
Ich hab jetzt noch ungefähr 10 Minuten Zeit, bis das alles

2449
03:15:27,090 --> 03:15:29,090
gelöscht ist, so lange bleib ich noch on, dann hau ich ab.

2450
03:15:29,090 --> 03:15:31,090
Erzählt mal.

2451
03:15:31,090 --> 03:15:33,090
Hab ich irgendwas

2452
03:15:33,090 --> 03:15:35,090
Wichtiges verpasst? War irgendwelche

2453
03:15:35,090 --> 03:15:37,090
High IQ Dinger, die

2454
03:15:37,090 --> 03:15:39,090
an mir vorbeigegangen sind?

2455
03:15:39,090 --> 03:15:41,090
Was empfiehlt mir denn YouTube?

2456
03:15:41,090 --> 03:15:43,090
Hat YouTube vielleicht auf der Startseite irgendwas

2457
03:15:43,090 --> 03:15:45,090
Spannendes, wo ich sag, oh ja, das will ich

2458
03:15:45,090 --> 03:15:47,090
jetzt unbedingt noch gucken.

2459
03:15:47,090 --> 03:15:49,090
Wann ich Blazer mach? Ich glaube,

2460
03:15:49,090 --> 03:15:51,090
ich hab Blazer sogar

2461
03:15:51,090 --> 03:15:53,090
hier drinnen stehen, in meinem To-Do.

2462
03:15:53,090 --> 03:15:57,490
Weiß aber nicht, wann ich das mache.

2463
03:15:57,490 --> 03:15:59,490
Wieso haben Spiele keine Cheat Codes mehr?

2464
03:15:59,490 --> 03:16:01,490
Starting... Add is the biggest

2465
03:16:01,490 --> 03:16:13,570
line...

2466
03:16:13,570 --> 03:16:15,570
Yoshis Island ist so hart zu

2467
03:16:15,570 --> 03:16:17,570
emulieren, weil es diese SuperFX

2468
03:16:17,570 --> 03:16:35,920
Geschichte benutzt.

2469
03:16:35,920 --> 03:16:37,920
Why every programmer needs to

2470
03:16:37,920 --> 03:16:39,920
use this debug tool? Okay, gehen wir mal.

2471
03:16:39,920 --> 03:16:41,920
Es ist schon mal

2472
03:16:41,920 --> 03:16:43,920
reines Apple Zeug. Ach ne,

2473
03:16:43,920 --> 03:16:45,920
der Proxy, man.

2474
03:16:45,920 --> 03:16:47,920
Das ist im Prinzip sowas wie Postman,

2475
03:16:47,920 --> 03:16:49,920
was er hier am Start hat, oder? Ach ne,

2476
03:16:49,920 --> 03:16:51,920
der hat die

2477
03:16:51,920 --> 03:16:53,920
Development, irgendwelche Development Tools

2478
03:16:53,920 --> 03:16:57,880
für Google Zeug

2479
03:16:57,880 --> 03:16:59,880
auf. Ja, Clickbait-Gram.

2480
03:16:59,880 --> 03:17:05,040
Der Auskenn-Fuchs

2481
03:17:05,040 --> 03:17:07,040
schreibt im Discord. Moment.

2482
03:17:07,040 --> 03:17:09,040
Hat er jetzt gehört,

2483
03:17:09,040 --> 03:17:11,040
dass ich gesagt hab, der Auskenn-Fuchs kennt sich aus?

2484
03:17:11,040 --> 03:17:13,040
Weil im Stream?

2485
03:17:13,040 --> 03:17:15,040
Oder war das einfach nur Zufall?

2486
03:17:15,040 --> 03:17:18,930
Der kennt sich aus,

2487
03:17:18,930 --> 03:17:20,930
der Auskenn-Fuchs.

2488
03:17:20,930 --> 03:17:22,930
Der konnte mir sogar

2489
03:17:22,930 --> 03:17:24,930
erklären, wie man CSS-Grid richtig benutzt.

2490
03:17:24,930 --> 03:17:26,930
Und das ist wirklich schon mal auf ganz anderem

2491
03:17:26,930 --> 03:17:33,570
Level.

2492
03:17:33,570 --> 03:17:35,570
Auskenn-Fuchs, eh bester Name, ja.

2493
03:17:35,570 --> 03:17:37,570
Machst irgendwann mal wieder eine Homelab-Tour?

2494
03:17:37,570 --> 03:17:39,570
Ja, es fehlt eh noch eine komplette Tour.

2495
03:17:39,570 --> 03:17:55,880
Was haben wir denn hier?

2496
03:17:55,880 --> 03:17:57,880
ECMAScript 4, die verlorene Version.

2497
03:17:57,880 --> 03:17:59,880
ECMAScript 4?

2498
03:17:59,880 --> 03:18:01,880
Das muss ja vor 100 Jahren

2499
03:18:01,880 --> 03:18:06,020
gewesen sein.

2500
03:18:06,020 --> 03:18:08,020
Das ist irgendein Dashboard,

2501
03:18:08,020 --> 03:18:13,510
das braucht doch keiner.

2502
03:18:13,510 --> 03:18:15,510
Eine Battlefield-Trailer.

2503
03:18:15,510 --> 03:18:21,830
Wait a minute.

2504
03:18:21,830 --> 03:18:23,830
Road to Rome?

2505
03:18:23,830 --> 03:18:27,460
Da kann ich mich überhaupt nicht mehr dran erinnern.

2506
03:18:27,460 --> 03:18:29,460
Ach, das war ein Addon für Battlefield 2.

2507
03:18:29,460 --> 03:18:35,400
Ne, für Battlefield 1.

2508
03:18:35,400 --> 03:18:37,400
Zima-Board.

2509
03:18:37,400 --> 03:18:39,400
Ja, das kenn ich, aber da hab ich keinen Anwendungszweck für,

2510
03:18:39,400 --> 03:18:41,400
weil ich hab ja schon

2511
03:18:41,400 --> 03:18:43,400
eine ordentliche Kiste.

2512
03:18:43,400 --> 03:18:45,400
Als Homesurfer persönlich

2513
03:18:45,400 --> 03:18:47,400
bevorzuge ich mittlerweile Low-Power

2514
03:18:47,400 --> 03:18:49,400
x86-Hardware.

2515
03:18:49,400 --> 03:18:51,400
Das könnte sogar sein,

2516
03:18:51,400 --> 03:18:53,400
aber da hast du doch gar keinen Platz.

2517
03:18:53,400 --> 03:18:55,400
Kein scheiß Gehäuse und kriegst auch keine

2518
03:18:55,400 --> 03:18:57,400
PCI-Express-Sachen rein.

2519
03:18:57,400 --> 03:18:59,400
Also mit 10G ist

2520
03:18:59,400 --> 03:19:01,400
ja da nix.

2521
03:19:01,400 --> 03:19:03,400
Hab ich schon bei ein paar

2522
03:19:03,400 --> 03:19:05,400
Videos gesehen,

2523
03:19:05,400 --> 03:19:07,400
hat mich jetzt persönlich nicht so richtig überzeugt,

2524
03:19:07,400 --> 03:19:09,400
warum ich das haben will.

2525
03:19:09,400 --> 03:19:11,400
Außer, dass es schön klein ist, ja.

2526
03:19:11,400 --> 03:19:13,400
Aber ein bisschen größer schadet

2527
03:19:13,400 --> 03:19:15,400
ja auch nix.

2528
03:19:15,400 --> 03:19:17,400
Wir müssen reden. Hacken!

2529
03:19:17,400 --> 03:19:19,400
Jetzt geht's wieder los.

2530
03:19:19,400 --> 03:19:24,440
Keine digitalen Geräte.

2531
03:19:24,440 --> 03:19:28,260
Pass mal auf.

2532
03:19:28,260 --> 03:19:30,260
Mitten in Regensburg.

2533
03:19:30,260 --> 03:19:35,040
Überhaupt vernetzt in Deutschland.

2534
03:19:35,040 --> 03:19:37,040
Das ist aber schon

2535
03:19:37,040 --> 03:19:39,040
Hightech hier, was er am Start hat.

2536
03:19:39,040 --> 03:19:41,040
Also Hightech von vor

2537
03:19:41,040 --> 03:19:43,040
60 Jahren oder so.

2538
03:19:43,040 --> 03:19:45,040
Mit Schreibmaschine

2539
03:19:45,040 --> 03:19:47,040
und was ist denn das daneben?

2540
03:19:47,040 --> 03:19:49,040
Ein Funk-

2541
03:19:49,040 --> 03:19:51,040
Telegram-Ding oder

2542
03:19:51,040 --> 03:19:53,040
was bin ich hier sehend überhaupt?

2543
03:19:53,040 --> 03:19:57,060
Ich glaub letzter Stand war

2544
03:19:57,060 --> 03:19:59,060
2010.

2545
03:19:59,060 --> 03:20:01,060
Insgesamt

2546
03:20:01,060 --> 03:20:03,060
in Australien gibt's zwei,

2547
03:20:03,060 --> 03:20:05,060
in Japan gibt's welche.

2548
03:20:07,060 --> 03:20:09,060
Telegrammt der da rum oder?

2549
03:20:09,060 --> 03:20:11,060
Ganz nett.

2550
03:20:11,060 --> 03:20:13,060
Ach du Scheiße.

2551
03:20:13,060 --> 03:20:15,060
Was geht?

2552
03:20:15,060 --> 03:20:17,060
Echt? Ja.

2553
03:20:17,060 --> 03:20:19,060
Richtig oldschool, ja.

2554
03:20:19,060 --> 03:20:21,060
Warum nicht?

2555
03:20:21,060 --> 03:20:23,060
Warum nicht?

2556
03:20:23,060 --> 03:20:25,060
Im Prinzip ist das doch auch

2557
03:20:25,060 --> 03:20:27,060
eine Idee von ihm.

2558
03:20:27,060 --> 03:20:33,570
Der wird doch bestimmt auch mal ins Internet gehen.

2559
03:20:33,570 --> 03:20:35,570
Alte 90er-Jahre-Werbung.

2560
03:20:35,570 --> 03:20:37,570
Jawoll.

2561
03:20:37,570 --> 03:20:39,570
Das war so

2562
03:20:39,570 --> 03:20:43,010
cringy teilweise.

2563
03:20:43,010 --> 03:20:45,010
Ich dachte grad echt, das ist

2564
03:20:45,010 --> 03:20:47,010
Dings hier.

2565
03:20:47,010 --> 03:20:49,010
Als ich das gesehen hab,

2566
03:20:49,010 --> 03:20:51,010
hab ich gedacht, was macht denn,

2567
03:20:51,010 --> 03:20:53,010
also im Vorschau grade,

2568
03:20:53,010 --> 03:20:55,010
hab ich mir gedacht, was macht denn in den 90ern

2569
03:20:55,010 --> 03:20:57,010
der

2570
03:20:57,010 --> 03:20:59,010
ihr wisst wen ich meine, ne?

2571
03:20:59,010 --> 03:21:01,010
Aber

2572
03:21:01,010 --> 03:21:03,010
Hide the Pain.

2573
03:21:03,010 --> 03:21:05,010
Weiß gar nicht, wie der Typ richtig heißt.

2574
03:21:05,010 --> 03:21:07,010
Was macht der in den 90ern?

2575
03:21:07,010 --> 03:21:23,510
Was macht mein

2576
03:21:23,510 --> 03:21:25,510
Terraform? Ist es immer noch am Cluster

2577
03:21:25,510 --> 03:21:57,680
abbauen? Durchaus möglich,

2578
03:21:57,680 --> 03:21:59,680
ja. Hab ich schon gesehen,

2579
03:21:59,680 --> 03:22:01,680
ich hab den Titel gesehen,

2580
03:22:01,680 --> 03:22:03,680
ECMAScript 4,

2581
03:22:03,680 --> 03:22:05,680
hab ich gehört, das muss doch vor 100 Jahren gewesen sein.

2582
03:22:05,680 --> 03:22:07,680
Hamnett. Das hört sich nach

2583
03:22:07,680 --> 03:22:09,680
Amateurfunk oder sowas an.

2584
03:22:09,680 --> 03:22:17,730
Aus irgendwelchen Gründen

2585
03:22:17,730 --> 03:22:19,730
finde ich das damit. Klingt irgendwie so.

2586
03:22:19,730 --> 03:22:36,610
Was sagst du zum

2587
03:22:36,610 --> 03:22:38,610
Twitter-Rebranding? Boah, ich find's so

2588
03:22:38,610 --> 03:22:40,610
dämlich, Alter.

2589
03:22:40,610 --> 03:22:42,610
Ich hab die ganze Zeit mir immer noch gedacht,

2590
03:22:42,610 --> 03:22:44,610
okay, ich mein, er probiert jetzt

2591
03:22:44,610 --> 03:22:46,610
ein paar Sachen aus, die Sachen, die total

2592
03:22:46,610 --> 03:22:48,610
für'n Arsch sind, werden auch wieder rückgängig gemacht.

2593
03:22:48,610 --> 03:22:50,610
Aber ganz ehrlich,

2594
03:22:50,610 --> 03:22:52,610
so langsam aber sicher hab ich,

2595
03:22:52,610 --> 03:22:54,610
und ich bin übelst der Twitter-Fan eigentlich immer gewesen,

2596
03:22:54,610 --> 03:22:56,610
ich hab ja immer gesagt,

2597
03:22:56,610 --> 03:22:58,610
habt ihr öfters von mir in Streams gehört,

2598
03:22:58,610 --> 03:23:00,610
dass ich der Meinung bin, dass Twitter immer noch

2599
03:23:00,610 --> 03:23:02,610
das Beste ist, was es gibt,

2600
03:23:02,610 --> 03:23:06,610
im Social-Messaging-Bereich.

2601
03:23:06,610 --> 03:23:10,560
Aber so langsam,

2602
03:23:10,560 --> 03:23:12,560
ich weiß nicht.

2603
03:23:12,560 --> 03:23:14,560
Langsam vergeht mir auch der Bock auf Twitter.

2604
03:23:14,560 --> 03:23:18,640
Also, die letzten Änderungen

2605
03:23:18,640 --> 03:23:20,640
waren schon richtig hardcore dumm.

2606
03:23:20,640 --> 03:23:22,640
Vom Anmeldezwang, jetzt demnächst

2607
03:23:22,640 --> 03:23:24,640
sollen noch

2608
03:23:24,640 --> 03:23:26,640
Private Messages eingeschränkt

2609
03:23:26,640 --> 03:23:28,640
werden von Leuten, die nicht verifiziert sind.

2610
03:23:28,640 --> 03:23:30,640
Ich weiß nicht.

2611
03:23:30,640 --> 03:23:41,250
Also, dann wird immer

2612
03:23:41,250 --> 03:23:43,250
vorgeschoben, weil jetzt auf einmal

2613
03:23:43,250 --> 03:23:45,250
natürlich

2614
03:23:45,250 --> 03:23:47,250
das ein Riesenproblem ist und vorher nie ein Problem

2615
03:23:47,250 --> 03:23:56,710
war, ist klar.

2616
03:23:56,710 --> 03:23:58,710
Ich hab langsam immer weniger Bock auf Twitter.

2617
03:23:58,710 --> 03:24:00,710
Am Anfang dachte ich

2618
03:24:00,710 --> 03:24:02,710
ja auch noch, mal gucken,

2619
03:24:02,710 --> 03:24:04,710
vielleicht könnte das auch

2620
03:24:04,710 --> 03:24:06,710
nicht schlecht werden.

2621
03:24:06,710 --> 03:24:08,710
Aber langsam hab ich

2622
03:24:08,710 --> 03:24:10,710
immer weniger Bock drauf.

2623
03:24:10,710 --> 03:24:12,710
Ja.

2624
03:24:12,710 --> 03:24:14,710
x.com, Alter, wenn die Leute

2625
03:24:14,710 --> 03:24:16,710
mit x anfangen zu tippen und dann kommt

2626
03:24:16,710 --> 03:24:21,810
x.complete, es ist schon wieder Fail.

2627
03:24:21,810 --> 03:24:23,810
Ich mein,

2628
03:24:23,810 --> 03:24:25,810
es geht ja noch.

2629
03:24:25,810 --> 03:24:27,810
Ach, hier

2630
03:24:27,810 --> 03:24:29,810
ist es jetzt sogar schon wieder,

2631
03:24:29,810 --> 03:24:31,810
hier ist es jetzt schon x.

2632
03:24:31,810 --> 03:24:33,810
Heute Morgen bei mir war es noch Twitter, wenn man angemeldet war.

2633
03:24:33,810 --> 03:24:35,810
Jetzt ist es schon

2634
03:24:35,810 --> 03:24:39,700
durch x ersetzt, ja.

2635
03:24:39,700 --> 03:24:41,700
Was ist die Alternative?

2636
03:24:41,700 --> 03:24:43,700
Noch keine so richtig,

2637
03:24:43,700 --> 03:24:45,700
aber mal abwarten.

2638
03:24:45,700 --> 03:24:47,700
Es geht immer los

2639
03:24:47,700 --> 03:24:49,700
mit

2640
03:24:49,700 --> 03:24:51,700
einem gewissen

2641
03:24:51,700 --> 03:24:53,700
Unmut und kein Bock der Leute mehr

2642
03:24:53,700 --> 03:24:55,700
auf die Plattform. Das ist die

2643
03:24:55,700 --> 03:24:57,700
Grundvoraussetzung dafür, dass

2644
03:24:57,700 --> 03:24:59,700
es Alternativen überhaupt erfolgreich geben

2645
03:24:59,700 --> 03:25:01,700
kann. Das glaube ich ja immer noch nicht.

2646
03:25:01,700 --> 03:25:05,200
Immer sobald es

2647
03:25:05,200 --> 03:25:07,200
den Leuten zu sehr auf den Sack geht,

2648
03:25:07,200 --> 03:25:09,200
bietet

2649
03:25:09,200 --> 03:25:11,200
das Möglichkeiten, ja.

2650
03:25:11,200 --> 03:25:13,200
Aber mal gucken, mal gucken.

2651
03:25:13,200 --> 03:25:17,920
Mein Threads gibt es noch nicht

2652
03:25:17,920 --> 03:25:19,920
in

2653
03:25:19,920 --> 03:25:21,920
Europa, glaube ich, und ganz ehrlich,

2654
03:25:21,920 --> 03:25:23,920
ob ich jetzt so viel mehr auf den Zuck

2655
03:25:23,920 --> 03:25:25,920
habe, als auf Elon.

2656
03:25:25,920 --> 03:25:27,920
Ich kann mich gar nicht entscheiden,

2657
03:25:27,920 --> 03:25:29,920
auf wen ich weniger Bock

2658
03:25:29,920 --> 03:25:31,920
habe gerade. Auf Twitter,

2659
03:25:31,920 --> 03:25:33,920
so wie es jetzt immer mehr wird, oder

2660
03:25:33,920 --> 03:25:35,920
auf den Zuck und seine

2661
03:25:35,920 --> 03:25:37,920
neue Plattform. Nee, auf den habe ich

2662
03:25:37,920 --> 03:25:39,920
glaube ich. Dann bleibe ich lieber

2663
03:25:39,920 --> 03:25:47,910
dabei. Euch ist

2664
03:25:47,910 --> 03:25:49,910
der Zuck lieber, ja. Naja,

2665
03:25:49,910 --> 03:25:57,190
ich weiß nicht.

2666
03:25:57,190 --> 03:26:00,500
Das wäre ein guter

2667
03:26:00,500 --> 03:26:05,990
Name dafür. Da bin

2668
03:26:05,990 --> 03:26:07,990
ich auch skeptisch. Sie sind ja

2669
03:26:07,990 --> 03:26:09,990
kompatibel mit Mastodon, oder

2670
03:26:09,990 --> 03:26:11,990
sag mal, wie heißt das, Fediverse, oder

2671
03:26:11,990 --> 03:26:13,990
sowas. Aber ehrlich, da wäre

2672
03:26:13,990 --> 03:26:19,920
ich skeptisch, ob das nicht

2673
03:26:19,920 --> 03:26:21,920
die alte Microsoft-Taktik ist.

2674
03:26:21,920 --> 03:26:23,920
Ja, wir bandeln erst

2675
03:26:23,920 --> 03:26:25,920
so ein bisschen mit offenen Plattformen an

2676
03:26:25,920 --> 03:26:27,920
und

2677
03:26:27,920 --> 03:26:29,920
saugen darüber quasi

2678
03:26:29,920 --> 03:26:31,920
Leute ab zu unserer Plattform

2679
03:26:31,920 --> 03:26:33,920
und sagen, oh, wir sind ja so offen.

2680
03:26:33,920 --> 03:26:35,920
Und sobald es eine kritische Masse

2681
03:26:35,920 --> 03:26:37,920
erreicht hat, wird es möglichst inkompatibel

2682
03:26:37,920 --> 03:26:39,920
gemacht.

2683
03:26:39,920 --> 03:26:41,920
Fängt dann an mit Features, die nur auf der einen Seite

2684
03:26:41,920 --> 03:26:43,920
existieren und so. Ich weiß nicht,

2685
03:26:43,920 --> 03:26:45,920
ob das so eine tolle

2686
03:26:45,920 --> 03:26:49,880
Sache ist.

2687
03:26:49,880 --> 03:26:51,880
Das war die Microsoft-Taktik, ja.

2688
03:26:51,880 --> 03:26:55,320
Embrace, extend, extinguish.

2689
03:26:55,320 --> 03:27:18,660
Das sagst du jetzt.

2690
03:27:18,660 --> 03:27:20,660
Warte mal ab, bis du deine Firma

2691
03:27:20,660 --> 03:27:22,660
für zwei Milliarden verkauft hast. Dann

2692
03:27:22,660 --> 03:27:29,680
willst du das auch nicht mehr.

2693
03:27:29,680 --> 03:27:31,680
Dann wird es Zeit, dann muss der

2694
03:27:31,680 --> 03:27:33,680
Twitch-Chat als Consulting-Chat

2695
03:27:33,680 --> 03:27:38,530
angestellt werden.

2696
03:27:38,530 --> 03:27:47,220
Für noch mehr High IQ.

2697
03:27:47,220 --> 03:28:06,850
Ja, da ist schon was dran.

2698
03:28:06,850 --> 03:28:11,570
Das kann ja schon passieren, ja.

2699
03:28:11,570 --> 03:28:13,570
Okay, Leute. Reicht für heute.

2700
03:28:13,570 --> 03:28:15,570
Terraform und so hat zugeschlagen,

2701
03:28:15,570 --> 03:28:17,570
alles wieder abgebaut.

2702
03:28:17,570 --> 03:28:19,570
Ich glaube, wir haben wie viel? Zwei Euro ausgegeben

2703
03:28:19,570 --> 03:28:21,570
heute. Am Anfang hatten wir

2704
03:28:21,570 --> 03:28:23,570
13 oder 14 Euro und jetzt

2705
03:28:23,570 --> 03:28:25,570
15. Also wir haben

2706
03:28:25,570 --> 03:28:27,570
zwei Euro ausgegeben heute im Stream.

2707
03:28:27,570 --> 03:28:29,570
Also extremely, highly

2708
03:28:29,570 --> 03:28:46,520
expensive Stream.

2709
03:28:46,520 --> 03:28:48,520
Und

2710
03:28:48,520 --> 03:28:55,830
jetzt

2711
03:28:55,830 --> 03:28:57,830
gehe ich off.

2712
03:28:57,830 --> 03:28:59,830
See you. Bis dann.

2713
03:28:59,830 --> 03:29:01,830
Macht's gut.
