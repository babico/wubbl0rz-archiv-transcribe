Der Reaktionian hat...
Ich kann es ja immer richtig aussprechen.
Der Reaktionian hat
subscribed.
Ja, ich bin gerade aufgestanden vor
20 Minuten oder so.
Ich mache noch keine Runde Rennen, aber ich mache es
nachher. Es ist gerade nicht so geiles Wetter.
Deswegen ein bisschen früher
gestreamt heute.
Ich habe auch...
Ich meine, bei uns regnet es nicht, aber es
könnte durchaus demnächst
so sein.
Ich habe keinen Bock. Ich gucke mal, wie es heute Mittag aussieht.
Und wenn ich heute Mittag eine Runde...
Mittag ist glaube ich ganz
okay. Wenn ich hier mal gucke, Hanau-Wetter.
Ja.
Kann man vielleicht sogar Fahrrad fahren.
Das sieht eigentlich ganz brauchbar aus.
Sieht so aus, als zieht das meiste an Regenwolken
vorbei.
Wenn noch ein bisschen
mehr Sonne wäre, wäre
echt nice, aber das glaube ich nicht.
Machen wir mal einen Monitoring-Stream.
Wir haben doch schon ein paar... Prometheus haben wir schon
gebaut. Oh, CheckMK muss ich auf der Arbeit
benutzen. Da habe ich echt keinen Bock. Das ist mit das
undurchsichtigste...
Na, kann man so...
Ja.
Also CheckMK hat
das mit Abstand
wirste UI
von allen Monitoring-Tools, die ich
kenne. Bei Zappix ist es so,
Zappix hat auch ein wirres UI,
weil es sehr komplex ist, aber
es hat ein, sagen wir mal,
es hat ein gewisses System noch
dahinter. CheckMK wirkt so,
als hat man einfach
irgendwas entwickelt und es irgendwo auf die Webseite
geknallt und in der Hoffnung, man findet es
irgendwann wieder. Also das UI von
CheckMK ist wirklich grausam schlecht.
Yoho,
Dankeschön. Pog-Subscription.
PETG
machen wir nicht, weil Windows-only.
Das ist irgendein Nagios-Fog.
Ganz ehrlich, ich...
Ich bin nicht wirklich
happy mit den ganzen Monitoring-Tools.
Es gibt keins, wo ich sage,
ja, finde ich umfassend
nice. Prometheus ist
cool, wenn man Metriken will und
vor allem, wenn man viel selbst bauen will.
Klassisches Monitoring
mit Prometheus geht alles, ist
aber eher, wir bauen unser
Monitoring-System selbst. Zappix ist
ganz cool, aber Zappix wirkt an manchen
Stellen doch schon ein bisschen altbacken.
Ja, und ja, von
CheckMK und jetzt habe ich mir... Es gibt ja noch
mehr, es gibt ja noch Observium und Libre
NMS und was es nicht alles gibt.
Es gibt auch noch den Klassiker Nagios,
wobei es den ja nicht mehr
irgendwie in der alten klassischen Version gibt,
sondern, ja, da blicke ich nicht mehr
durch, ich habe schon ewig... Wobei ich sagen muss, dass
als ich meine Ausbildung gemacht habe,
habe ich ja angefangen mit
Nagios. Und ich finde Nagios
immer noch cool.
Ich würde nicht unbedingt... Also, sagen wir mal so,
ich würde sogar
mal ein neues Nagios installieren,
aber es gibt ja anscheinend kein neues
mehr. Es gibt
es gibt dieses komische Nagios X
oder was?
Jetzt gibt und wie es
mit der normalen klassischen
Open Source Version, keine Ahnung, da blickst du
bei Nagios nicht mehr durch. Das
UI ist so grausam. Ich muss das auf der Arbeit
jeden Tag verwenden, da findest du nix.
Und das ist das... Wisst ihr,
ich habe keine Probleme mit irgendwelchen
komplexen Sachen. Ich finde es eigentlich cool, wenn
was, also wenn Software komplex ist, aber die
ein gewisses System hat, wenn man dann mit der
Zeit merkt, okay, man blickt da immer besser durch
und alles gut. Aber CheckMK ist so
ausgekotztes UI.
Ich will mich damit überhaupt nicht beschäftigen,
großartig. Habt ihr, habt ihr,
warum habt ihr Nagios auf der
Arbeit? Habt ihr das einfach die letzten
15 Jahre schon, 20 Jahre schon?
Oder habt ihr das neu installiert
und dann mit einem dieser,
was ist das?
Quick Look at my Homelab.
Das haben wir doch,
das haben wir uns doch letzte Woche angeguckt.
Das haben wir uns, das hatten wir auch schon
in den Vorstellungen, das haben wir uns letzte Woche angeguckt.
Da hab ich mich auch gefragt, wie viel Gerät der hat.
Der hat ja zwei Schränke und eins ist voll mit Netzwerk.
Da hab ich mich auch gefragt, wie viel Laser,
vor allem. Da hab ich mich auch gefragt, wie viele Dinge
hat der Typ eigentlich bei sich im Haus?
Ja.
Der hat auch, glaube ich, ein neues Video
gemacht, so was er,
was er alles in seinem Homelab macht,
aber da sieht man nicht viel, da steht er nur da und
erzählt.
Tipps for powering your Homelab.
Ja.
Kekona-Probleme müsste man haben, oder?
Kekona-Probleme müsste man haben.
Wobei, ich weiß gar nicht,
ist das U.S., U.S.A.?
So, ich mach mal kurz
Package-Updates.
Arch Linux, by the way.
I'm using Arch.
Benutzt du eigentlich deinen Bartosera noch?
Nee.
Der steht da.
Ich hab, ich hab sogar
die SSD ausgetauscht letztens.
Ich, ich, ich
hätte Bock, das Ding mal abzugraden auf die,
auf das neueste Bartosera und zu gucken, ob da
jetzt Xbox und
Sachen mittlerweile default sind, die
bei meiner Version noch nicht default waren.
Ich hab
die SSD getauscht und hab
Linux Mint für meinen Vater draufgehauen.
Ich, ich wollte ihm, ich wollte
ihm die Kiste geben, weil
mein Vater hat ja so, hat ja einen alten Desktop-Rechner
von mir gekriegt, mit Windows 11
drauf, die, die alte Xeon-Kiste,
weil er seine, seine
alte Kiste irgendwie zerstört hat.
Das Problem ist jetzt, das Ding ist so
vollgemüllt mit irgendeinem Scheiß,
der hat da, ey, was der da drauf wieder
installiert hat, Mann. Der hat
irgendwie fünf Browser,
irgendwie, Avast
Free Antivirus Browser
oder sowas, ähm,
TuneUp tut, boah, ich denk,
Alter, was ist denn los, ey?
Der verwendet die Computer auch schon seit,
weiß ich,
25 Jahren oder so,
oder 30 Jahren, der hat relativ
früh mit dem Kram, hat 30 Jahren, der hat
relativ früh mit dem Kram sogar schon damals im Büro
angefangen. Alter, wie
kann man immer so planlos sein?
Ja, ich hab da aber gar keinen Bock
mehr, irgendwie Support für
zu machen,
zumal er sich letztens verkackt hat,
denn letztens hat er
irgendwie seinen Monitor zerstört, ich weiß auch
nicht, wie er das geschafft hat, zumindest ging der Monitor nicht
mehr, wilder Egel, danke für den Sub.
Hab ich ihm gesagt, hey, ich bring dir, ich bring
dir einen neuen vorbei, also alten
gebrauchten von mir, und
hab ich das angeschlossen
und dann, dann hab ich festgestellt,
dass
das ist,
also das ist ein ganz normal
Full HD
60
Hertz Monitor noch gewesen,
den hatte ich auf dem Dachboden stehen,
ich mach mal Package Updates,
und
dann hab ich den angeschlossen, und dann hab ich festgestellt,
du kannst die Auflösung nicht mehr einstellen,
der geht, weil er die Grafikkarte
nicht mehr erkennt, da ist eine olle,
eine olle Radeon,
irgendwas, was vor 5 Jahren
mal aktuell gewesen ist drin, aber es reicht halt dicke,
für 1080p,
also er kennt die Grafikkarte nicht mehr, der hat seine
Windows-Installation so zerstört,
dass du auch keinen neuen Grafikkartentreiber
installieren kannst, jedes Mal, wenn du
von AMD was installieren willst,
ploppt irgend so'n komisches Tune-Up
Driver Utilities
Ding auf, und sagt, man soll
über die Webseite
den Treiber runterladen, also ganz
merkwürdiges Zeug, ey, das ist total
versaut, die Kiste vor ihm.
Hab ich ihm gesagt, ey,
du kannst das jetzt verwenden mit, äh,
1280 und
und weniger Farben,
du müsstest hier mal, also wir müssten
hier mal deine Windows-Geschichte neu installieren,
dass das wieder ordentlich funktioniert,
aber das mach ich heute nicht,
weil Datensicherung, ich hab
nix dabei, für irgendwie USB-Sync, und außerdem
dauert das bestimmt 1-2 Stunden, bis das funktioniert, da hab ich
heute keinen Bock drauf, das war noch vor Ostern,
ich hab ihm vorgeschlagen, ey, weißt du was, wir können
das nächstes Wochenende machen,
aber dann hat er mich angerufen,
irgendwie abends, da war er
auch mit einverstanden, ne,
was soll er auch sonst anders da machen, ich mein,
ich bin ja nicht irgendwie verpflichtet, on the fly
alle Computerprobleme der Welt zu beheben,
vor allem, wenn man's selbst
verkackt hat,
Pog-Subscription will der Igel, falls ich euch vorgelesen hab,
excellent, sehr.
So, und
dann hat er sich abends bei mir angerufen,
hat sich beschwert,
warum ich ihn hier mit nem kaputten Computer hab
sitzen lassen, und
irgendwie, er vermutet,
dass ich eh ihm ein Computer
gebracht hab, der kaputt ist,
so, um ihn zu ärgern oder so,
und er kauft sich jetzt,
der ist alt und verwirrt, ja,
da kannst du nicht so viel drauf geben, wenn er so
den Dinger erzählt, mein Opa hat auch immer so
merkwürdig Dinge erzählt, als er
alt war, und zumindest meinte
er dann, er kauft sich jetzt, er kauft
sich jetzt nen eigenen, er kauft sich jetzt nen neuen Computer,
hab ich gesagt, okay, gut, nice, muss ich nächstes Mal machen,
see you, und
jetzt hab ich ein paar Wochen nix von ihm gehört, und gestern hat er
angerufen, und da wusste
er nächstes Mal von, dass er sich nen eigenen kaufen will,
hat er wieder verdrängt,
und,
ja,
und, ja,
zumindest, hat er gemeint, ja, also,
die Bildrate
wird ja immer noch nicht stimmen,
und dann meinte er so zu mir,
ja, und wie verbleiben
wir denn jetzt, hab ich gesagt, hä,
wie, wie sollen wir denn verbleiben,
ja, wann machst du das denn richtig,
hab ich gesagt, wie, willst du dir
keinen eigenen Rechner mehr kaufen,
diese Art und Weise zu fragen,
allein schon, kann einen ja triggern, ja,
wie verbleiben wir denn,
willst du dir keinen, willst du dir keinen neuen Rechner
mehr kaufen, nee, wie, warum soll ich mir
nen neuen Rechner kaufen wollen, weil er das letzte Mal gesagt hat,
das wisst ihr, ich hab dem sogar ne E-Mail
geschrieben, wo das drinne steht, zumindest,
lange Rede, kurzer Sinn, wegen der
Bartos-Serra-Kiste, da bin ich ja drauf gekommen,
ich hab dem damals, vor ein paar
Wochen, also kurz vor Ostern, hab ich
dem Linux Mint auf der Bartos, ich hab die SSD
getauscht, hab dem Linux Mint
auf der Bartos-Serra-Kiste installiert, weil ich
mir gedacht hab, ey,
selbst, wenn wir Windows jetzt
neu installieren, bei ihm
auf der alten Kiste,
das sieht in zwei,
drei Monaten wieder so aus,
und ich glaube, ich stell dem
da jetzt einfach ne Linux Mint-Kiste hin,
und dann soll er gucken, wie
er damit klarkommt,
weil der macht ja eh nix,
außer nen Browser offen zu haben,
das Ding ist nur, ich will,
dass der sagt, dass der
das ausprobiert, und dass der das machen will,
weil sonst erzählt der mir nachher wieder,
ich hätt ihm irgendwas kaputtenes
hingestellt. Ich will mich möglichst
wenig mit dem ganzen Mist beschäftigen müssen.
Ja, das gibt's aber für,
ne, Linux Mint kann er nix installieren,
da weiß er doch gar nicht, wie das geht.
Der wird im Leben nicht auf die Idee
kommen,
mal ganz abgesehen, dass es das gar nicht gibt,
Upt-Installs zu machen, oder aber
jetzt irgendwelche
Software, das
kriegt der nicht auf die Reihe.
Theoretisch, könnte ich dem einfach
Brutrechte entziehen,
dann mach ich das.
Dankeschön nochmal hier für fünf gifted subs,
gestern auch schon hier
zugeschlagen.
Extremely excellent.
Fünf subs.
Was heißt denn
fünf auf Lateinisch?
Keine Ahnung. Fünffach
nice.
Wir hatten Glück gehabt hier.
Die Erbsenraube, hab ich auch schon öfters
gesehen.
Alex, Sela, Edry
und Tuchti.
Hattet ihr schon mal das Problem, dass
ähm,
ne.
Also,
ich denke mal, da drauf wird's rauslaufen.
Ich werd jetzt aber erstmal nix machen.
Hab ich jetzt eigentlich schon rebootet?
Ne, ja. Aber ich hab
alle Package-Updates gemacht. Ich werd
jetzt erstmal nix machen. Ich werd jetzt warten,
bis er sich wieder rührt und irgendwas
fliegen soll im Rechner machen, weil
selbst, selbst wenn
ich den Windows 11 neu installiere auf der Kiste,
dann fehlt ihm wieder irgendwas
oder, ähm,
nach zwei Monaten, es sieht halt wieder
genauso kaputt aus.
Ist halt richtig, richtig für'n Arsch.
Äh, was hat die
Chatbrains-Toolbox für Probleme? Okay.
Oh, wir müssen updaten.
C-Line brauchen wir doch eigentlich
gar nicht. Das machen wir so selten, das können wir wieder
uninstallen. Ryder gibt's keine Updates,
PyCharm-Golan gibt Updates. Okay, let's
go.
Du kannst eben bei Windows auch die Admin-Rechte
abnehmen. Ja, das ist richtig.
Ich glaube aber nicht, dass das
grundsätzlich was behebt.
Es behebt
sicherlich, dass er TuneUp und
Geschiss installiert,
aber es gibt ja mittlerweile auch genug Müll,
den er sich installieren kann, ohne Admin-Rechte.
Die sind halt nur in seinem Account,
aber das Ding ist halt auch wieder nicht richtig benutzbar.
Ja, Windows-Admin-Rechte entziehen
wär auch sehr sinnig, ja. Am besten
wär, wenn er sich mit Linux Mint irgendwie
anfreundet. Ja, das stimmt wohl.
Das ist eigentlich
gar keine schlechte Idee,
wenn er mit... Er kriegt einfach keine
Admin-Rechte, ja. Wie macht
man das eigentlich? Einfach einen neuen Account erstellen,
ne? Einfach einen neuen Account
erstellen, den Admin-Account
mit dem Passwort behalte ich.
Ne, ich leg da einen lokalen Account an
und, äh, vielleicht hau ich
dem, glaub ich, auch wieder Teamviewer
oder sowas drauf, dass ich zur Node Remote
gucken kann. So,
zack. So, das Ganze
mal rebooten hier. Package-Updates
durch. Ja, ich glaub, dass
das ist keine schlechte Idee.
Wobei ich glaube,
weniger Support leisten zu
müssen, wenn er unter Linux
Mint unterwegs wär. Ich mein, ganz ehrlich,
der benutzt eigentlich nur
einen Webbrowser. Der benutzt nix
anderes. Der hat den ganzen anderen
Schrott da drauf, aber den braucht der net.
Tune-Up und Geschiss, ja.
Weiß gar nicht, ob's hier auf der Welt irgendjemand
gibt, der Tune-Up und diese
hässlichen Windows-Dinger braucht.
Jaja, so ist es da auch.
Und,
ja, ich glaub, ich glaube,
und, und, das Ding funktioniert halt
einmal und geht dann. Das ist
eigentlich ganz nice, ja.
Naja. Ach ja, und was
mir wieder aufgefallen ist,
ich hab Linux Mint draufgehauen auf
diese Kiste. Ich hab, also, äh, die,
mal hier. Ja, auf
diese Kiste. Und zwar ist das
hier
so, äh,
äh, Moment. Guck mal,
ich hab mich selbst typated mit meinem Werbelink.
Ich hab mich selbst typated.
So eine Kiste
hier hab ich.
Und ich hab darauf
Linux Mint raufgehauen.
Und jetzt ratet
mal, meint ihr, es
funktioniert,
dass man Videos im
Browser GPU decodet?
Nein, natürlich
funktioniert's nicht. Wo wir
da bei einem meiner Lieblingsthemen sind,
was unter Linux falsch läuft,
in der Richtung. Natürlich,
funktioniert kein GPU decoding
von Videos im Browser.
Warum? Ich hab keine Ahnung.
Irgendwas,
irgendwas nicht in der richtigen
Kombination ist.
Mesa-Treiber, GPU-Treiber,
äh, Windows-Gedöns,
Browser-Version, whatever.
Keine Ahnung.
Aber das Ding ist schnell genug, um
Videos abzuspielen auf der CPU, also das ist nicht so
wild. Ja.
So ein Teil hier.
Ne, hat er auch nicht.
Ja, das ist echt
so ein leidiges Thema.
So.
Rebootet. Nice.
Wichtigste Sache, wichtigster
Check, ASCII-Quarium geht noch, dann
ist alles gut. Oh man.
Ich warte jetzt erst mal, bis er sich
wieder meldet. Vielleicht, äh,
hofft er sich ja doch einen eigenen neuen Rechner.
Gut ist.
Ja, dann lasst uns mal kurz gucken,
was auf, äh, ne Trend, Trend.
Ach ja, wisst ihr, was wir übrigens auch mal wieder
machen müssen unbedingt?
Wir müssen Set-Servers
mal machen, weil
die haben mittlerweile ganz viele
neue Sachen hinzugefügt. Guckt mal,
die haben mittlerweile 45 Szenarios.
Mein Problem ist, ich weiß gar nicht, was wir
davon schon gemacht haben und was nicht.
Wir haben höchstens 20
oder 30 davon gemacht, also
wir haben bestimmt nochmal 10 oder 15 jetzt,
die wir noch nicht gemacht haben.
Manche, für manche neue Szenarios
braucht man übrigens sogar einen Pro-Account,
was ich sehr nice finde, ehrlich gesagt.
Dass es
mittlerweile die Möglichkeit
gibt, hier Abos
abzuschließen. Normalerweise finde ich sowas ja kacke,
ja, das ist ja, ah, warum gibst du mal Abos?
In dem Fall finde ich es aber gut, weil das ein
richtig nicer Service ist
und sich das ja irgendwie
finanzieren muss.
Die ganze AWS-Sachen
kosten ja alle Geld.
Das hat der, das hat der halt früher
selbst bezahlt, aber mittlerweile ist das Service
relativ bekannt und ich denke mal, das kostet jetzt auch
nicht wenig.
Und dementsprechend, irgendwie, irgendwie muss der Kram sich ja
finanzieren, ja, also finde ich es ganz gut.
Zumal sich, zumal sich auch in, äh,
ja, und ganz ehrlich, 5 Dollar,
um das mal einmal durchzumachen, ist schon, ist
auch in Ordnung, ja.
Direct Access to VMs, VMs with Internet
Access, das ist schon mal problematisch,
könnte ich mir vorstellen, weil du dann cheaten
kannst. Vielleicht sind es aber auch nur
spezielle Szenarios, weil viele
von den Szenarios kannst du easy cheaten, wenn du
Internetzugang hast.
Nachinstallieren, die das Leben einfacher machen und sowas.
Ich hab meinem Chef vorgeschlagen,
ob er sich nicht das hier kaufen möchte.
Für Vorstellungsgespräche.
Also wer den Service nicht kennt,
man hat hier kaputte,
kaputte Server auf AWS,
die man innerhalb von einer gewissen Zeit
fixen muss. Das ist quasi
sowas wie
Capture the Flag nur für
Linux-Admins. Und die
easy Szenarios sind auch
wirklich easy. Ja, hier bei dem
ersten musst du, äh,
lsoff machen auf einer Datei und dann kill
auf einen Prozess und sowas. Also ich
finde das hier ist was, das kann man ohne Probleme mal
einem Linux-Admin als
für ein Vorstellungsgespräch
in die Hand drücken, ein paar davon.
Und sagen, mach mal. Einfach um zu gucken,
wie gut er damit klarkommt. Weil die Dinge sind
so easy, die kann wirklich
jeder, der ein bisschen Linux-Erfahrung
hat und gerade jemand, der sich bewirbt für so eine
Stelle und selbst wenn er nervös ist
beim Vorstellungsgespräch. Also
ein lsoff auf einer Datei und ein kill auf einen Prozess,
das kann ich, das kann ich quasi
machen, wenn ich von einem
Haifisch verfolgt werde im Schwimmbad.
So, kann ich das nebenbei machen.
Also das kann, das kriegt jeder Linux-Admin
hin, der, selbst wenn er super
nervös ist. Ja, bei den anderen
Szenarien würde ich sagen, okay,
das ist was, wo man halt gucken muss,
ob das den jeweiligen Leuten liegt,
weil beispielsweise, wenn, wenn du mich
hier an sowas setzen würdest, irgendwas
mit SQLite, äh, ne
nicht mit SQL, mit MySQL,
da hab ich eh nicht so großartig Ahnung, könnte also sein,
dass ich sogar Medium-Szenarien verkacke.
Aber die easy Szenarien sind wirklich
easy. Haben wir hier im Stream auch schon
gemacht. Also wir haben damals,
wir haben damals alles,
ne, lsoff zusammengeschrieben,
wir haben damals
alle Szenarien durchgemacht,
komplett, auch inklusive den schweren,
aber damals gab's noch nicht so viele.
Also das haben wir, das kann ich mich
dran erinnern, das haben wir auch gemacht.
Ich glaube, das hier hatten wir
auch gemacht. Das
hier bin ich mir nicht sicher, ich glaube
auch. Also uns fehlen, uns
fehlen auch, ich, ich glaub die Docker, Docker
Kubernetes App hatten wir auch, ich glaube wir
müssen die alle nochmal machen und
ich, ich, ich, also
Gamepad, danke für den Satz. Ich glaube
ich mach mir nen Account
für fünf Dollar im Monat und wir
machen die nochmal im Stream alle zusammen durch.
Ja, wir, ich hab dies letzte Mal gemacht,
oh, da, da gab's hier noch gar keine Registrierung
und dann hab ich, ah, da haben wir nochmal zwei, drei gemacht
mit Registrierung.
Ja, ich glaube ich kauf mir
einfach irgendeinen,
fünf, fünf
Dollar pro Monat und dann machen wir die, machen wir
die nochmal alle im Stream
zusammen. Schadet ja nix, ich mein, wann haben wir
das das letzte Mal gemacht? Selbst wenn wir die doppelt machen, ist
drei Jahre her oder zwei Jahre her oder so.
War glaub ich sogar noch vor Corona.
So, also dann lass uns mal gucken, was auf Shithub
so trendet diese Woche.
DOS, ja das hab ich
mitgekriegt, dass Microsoft den, den DOS
Source Code veröffentlicht hat.
Was auch immer.
Ja, Zeit geworden, dass mal DOS 4 veröffentlicht
wurde. Assemble erstellt's.
Sind das nicht Sachen, die schon
in C sind? Ne.
Scheiße.
Ach du Scheiße.
FD ist das doch bestimmt in C, oder?
Ja. Oh.
Begin End. Was ist das für ein
weird C-Dialekt?
Was soll das sein?
Begin End?
Ist das
Basic, C-Basic oder was?
What the, was ist,
was hat das mit diesem Begin und End auf sich?
Ach, keine Ahnung. Egal.
Also, DOS trendet.
AI, AI.
Ne. AI.
Ja, das sind so Dinger,
ich kenn das ja bei uns.
Wie gesagt, Frankfurt Finanzbranche,
Versicherungen,
die haben auch teilweise so uralte
Software am Start.
Die ist aber so
in den ganzen Abläufen und Sachen
integriert, das wirst du
nie los. Deswegen,
wundert mich nicht.
Und an so einem
Asset Management System oder
Warehouse, da hängt ja auch, da hängt ja irgendwo
alles dran, ja.
Wahrscheinlich wird das auch nicht mehr supported.
Die Kasse
läuft auf Windows XP. Ja, wundert mich nicht.
Ich mein, wie war das letztens
bei der Waren Stellenanzeige für
Windows 3.11 Admins?
Gibt halt so Legacy Dinger.
Und man muss aber auch sagen,
es ist ja auch gar nicht schlimm.
Solange das nicht Systeme sind, die irgendwie
im Netzwerk hängen und
Internet-Access haben, beziehungsweise umgedreht
noch schlimmer Access von draußen haben,
ist das vollkommen
okay. Gestern hab ich
irgendeinen Beitrag gehört im Radio,
beim Mittagessen hab ich Radio angeschaltet
und da haben sie sich drüber ausgelassen,
über irgendwelche, ich find das,
kennt ihr das? Ich find das immer so cringe,
wenn die sich im Radio und Fernsehen
auslassen über irgendwelche
D-Cyber-Attacken.
Ich sag dazu, keine Ahnung,
Hackerangriff oder irgendwas.
Ich sag halt meistens das, was es
gewesen ist, aber die sagen immer
Cyberangriffe. Ich find dieses Wort
Cyberangriff immer so...
Zumindest da weißt du schon gleich immer, was kommt.
Da haben sie sich drüber unterhalten,
wie Deutschland aufgestellt wäre
gegen russische Cyberangriffe.
Und dann haben sie irgendein
Interview da bei irgendeinem,
keine Ahnung, bei irgendeinem
Ministerium arbeitet, die dafür zuständig sind
und die haben natürlich gesagt, Deutschland ist
sehr gut aufgestellt dagegen.
Und...
Dann haben sie sich weiter drüber ausgelassen.
Angriffe auf kritische Infrastruktur
sind ja an der Tagesordnung
und werden permanent abgewehrt.
Und an der Stelle musste ich mir mal sagen,
okay, Moment, wisst ihr, was ich den jetzt mal gerne fragen würde?
Also kritische Infrastruktur,
ja, das ist für mich sowas wie
Flughäfen, Atomkraftwerke,
Trinkwasserversorgung
und, ja, Verkehrsleits,
so kritische Infrastruktur. An der Stelle
hätte ich den Typ gerne gefragt und gesagt, stopp,
stopp, was er denn
genau meint. Und ob er mir sagen würde,
er möchte, dass kritische Infrastruktur etwa
öffentlich aus dem Internet erreichbar wäre.
Das hätte mich echt mal interessiert.
Aber natürlich hat die, die den Radio
interviewt, absolut keine Ahnung von der
Thematik gehabt. Also das hätte ich den
gerne mal gefragt, was meint der denn
eigentlich mit, gibt Laufen, Angriffe,
wird abgewehrt. Heißt das, wir haben
kritische Infrastruktur im Internet hängen,
oder wie?
Oder wie ist das gemeint?
Ich meine, mich würde es nicht
wundern, ja. Da machen die immer
ein riesen Ding draus.
Ganz ehrlich, wenn ich Windows
95
Systeme heutzutage irgendwie
öffentlich erreichbar habe,
habe ich halt echt
es so grundlegend verkackt, dass man es
gar nicht kaum mehr verkacken kann.
Ich glaube, der weit, die weit
überwiegende Anzahl aller
Cyberangriffe dürfte
weltweit irgendwelche
Verschlüsselungstrojaner-Geschichten sein.
So nach dem Motto,
E-Mail kommt beim
Chef raus, bei der Sekretärin vom Chef,
bei der Personalabteilung,
mit irgendeinem halbwegs gut
gemachten Text und einem
Screensaver im Anhang. Und natürlich, was machen die
Leute? Ah, guck mal da, da hat uns einer
seine Bewerbung geschickt.
Im Screensaver-Format, haha, doppelt
anklicken, ah, Warnung ignorieren,
continue, execute, oh nein,
unser File-Share ist verschlüsselt.
Das dürften wahrscheinlich die
weit meisten aller
Angriffe sein. So, was
trenne denn sonst noch?
AI, noch mehr
Blazingly Fast, Powerful Editor,
was ist denn das jetzt schon wieder?
Das ist doch nicht dieses Ding, das ist nochmal
ein anderer Editor in Rust.
Jetzt haben wir ja schon fünf konkurrierende
Editors in Rust. Wie hieß dieses andere
Ding, was es nur für Mac gibt?
Ich hab's schon wieder vergessen, das war mal, was jetzt
ein paar Wochen lang voll gehypt war.
Mac-only written in Rust Editor,
den sie jetzt
bisschen gehypt...
Ja, ja, genau, ich glaube,
das ist es.
Was ist das? Steht gerade keine Beschreibung.
Description?
No description.
Achso, okay. Jetzt weiß ich auch, warum das keine
Description hat, dass Nintendo das nicht findet.
Äh...
AI...
AI...
China-Chinesen-Messenger...
China-Chinesen-Messenger...
A Based Rollup.
Jetzt weiß man
sofort Bescheid, was
das für ein Projekt ist, oder?
A Based Rollup. Ist Rollup
nicht sowas wie Webpack?
Nur nicht Webpack?
A Based Rollup.
Hä?
Okay, ich hab keine Ahnung, was das sein soll.
Hydra is a Game Launcher with its own
embedded BitTorrent-Client. Ja, wofür
der hier wohl benutzt wird, in nem
Game Launcher? Sicherlich nur, um
eigens angefertigte Sicherheitskopien
neu runterzuladen, oder?
Was meint ihr? Was könnte es sein?
Ich kenne das gar nicht.
Weil das an sich... Es ist ja nicht verboten,
sowas zu programmieren.
Nur für Linux-ISOs, genau.
Moment,
NeoFetch ist mittlerweile auch bloated,
oder was? Also, nur mal so,
NeoFetch ist ein Programm, was
nichts anderes macht, wie Infos über eure
Linux-Installation anzuzeigen.
Ich weiß nicht, warum das
Blazingly Fast written in Go, written in Rust...
Ey, ich wette mit euch, Moment, es gibt
doch garantiert schon sowas wie
NeoFetch written in Rust.
Natürlich.
Erfresht...
Ist aber seit zwei Jahren
maintained.
Und jetzt, die coolen Leute benutzen jetzt
FastFetch, oder was?
Wird NeoFetch nicht mehr
aktualisiert, oder?
Oh, tatsächlich!
Seit April!
Seit 26. April ist
NeoFetch outdated,
overrated, jebaited.
Ich hab da vollstes
Verständnis für, wenn einer keinen Bock mehr hat
auf Open-Source-Projekte oder unmotiviert ist.
Also, wie heißt das andere? LightFetch?
Ne, wie war das? FastFetch?
FastFetch, okay.
Gucken.
FastFetch. Alles klar.
Yes.
Wir machen es mal so. Okay, zack.
FastFetch
versus NeoFetch.
Ehrlich gesagt,
ich sehe überhaupt keinen Unterschied.
Außer, dass
FastFetch sogar noch ein bisschen mehr Infos hat.
Lokale IP.
Haben wir noch? Okay, ja, nice.
Disk Space.
Swap Memory.
Oh nein, fuck,
Leute! IP-Leak.
Ich hoffe, ihr seid nicht schon drin.
Okay, das heißt,
wir uninstallen NeoFetch jetzt.
Weil NeoFetch
outdated, overrated ist.
Aber nachdem ich mir das nicht merken kann,
würde ich
sagen, machen wir mal ein Alias.
Ein Alias
NeoFetch
auf FastFetch.
So,
jetzt kann ich
nach wie vor NeoFetch machen
und es ist in Wirklichkeit FastFetch.
Wird exzellent.
Hm. So, wo sind wir
stehen geblieben? Ja, das haben wir uns angeschaut.
Was, was und noch AI-Zeug?
Juckt nicht.
So.
Ja, was trennet denn im
SAP ABAP Umfeld?
Die haben nicht mal genug Repos,
Alter.
Ah, das offizielle
das offizielle
SAP-Examples trennet.
Okay.
Nice.
ABAP.
Was, Developers können auch trennen?
Wusstet ihr, seit wann
können Developers trennen?
Bestimmt schon eine Weile und mir ist es nie
aufgefallen. Mal gucken, ob irgendwann
der Wubblos auch trennen kann.
Da müsste der Wubblos einmal mit seinen
Projekten weiterarbeiten. Aber,
ABAP.
ABAP trennet nix.
Moment, jetzt doch.
ABAP.
Da haben wir, da haben wir ja alle Bock drauf, ne?
Es ist ein bisschen, es hat ein bisschen was von Kobol.
Haben wir, haben wir, haben wir
ABAP-Enjoyers?
SAP-Leute hier im Chat?
Und falls ja,
eine ernst gemeinte Frage, haben wir wirklich
Leute, also macht ihr das nur, weil es
einfach fett Kohle bringt oder gefällt euch
ABAP und das SAP Umfeld?
Ich habe bisher nämlich noch keinen gesehen,
der sagt, oh ja, das ist richtig geil.
Alle, die ich kenne, die das machen, die machen das
eigentlich nur, weil sie es schon eine Weile machen und man
da richtig mit Kohle verdienen kann.
Ja, mich würde das auch abfucken.
Aber immerhin, immerhin
muss man sagen,
dadurch, dass wir das gemacht haben,
oh ne, fuck, doch nicht.
Ich dachte, ich habe Kobol
bei mir reingeschrieben, was
Programmiersprachen angeht.
Für meine Skill-Liste aus der Bewerbung.
Das ist nicht eins zu eins das, was ich in meine
Bewerbung geschrieben habe. Ich habe noch ein paar Sachen
editiert, aber im Großen
und Ganzen das.
We got an update for you.
Windows is continuous improving
and updates are a normal part
of keeping it running smoothly.
We'll restart and install this update
in 15 Minuten.
Ne, ne, ne, ne, ne.
Another time. Gehen wir nicht auf den Sack, Windows.
Also nicht auf
dem Rechner, sondern auf dem Vorschau-PC.
Schrott.
Nichts improved. Aber Microsoft sagt das doch.
Da muss das doch so sein.
Das ist wie unter Windows 95,
wo immer stand,
ist das beste
Windows, das
es je gab,
oder sowas stand da doch immer.
Ist das beste
Windows-Installer. Da gab es doch immer
unter Windows...
Wenn du Windows 95 installierst, das stand doch immer da irgendwie.
Windows 95 ist das beste Windows
aller Zeiten und ist das beste Windows, das
es je gab. Ich weiß, ich kenne die Formulierung,
gerade nicht mehr.
Und selbst da habe ich das bei
Microsoft schon nicht geglaubt.
So, brauchen wir das hier noch?
Das sagt glaube ich
so gut wie jeder Hersteller, jedes Jahr
über sein Zeug, selbst wenn sich so gut wie nichts verbessert hat.
Also eine Sache,
die wirklich weit davon
entfernt ist,
das beste zu sein, was es je gab.
Ne, sagt mir gar nichts.
Muss man gleich mal gucken.
Also wisst ihr was ganz
schlimm ist?
Ich muss damit glücklicherweise nicht allzu viel machen.
Ich habe
eines meiner Fire HD 10 Tablets,
die im Flur hängen,
als Home Automation Dashboard.
Eines davon habe ich ausgetauscht
durch ein
durch ein
Samsung
A8
oder so Tablet.
Das hat mehr oder weniger bis auf ein paar
Millimeter exakt die gleichen Abmaße
wie das Fire HD 10.
Und
ist ein bisschen, ein bisschen nicht ganz so
alt, outdated und lahm.
Aber, das
UI da drauf, ohne Scheiß
Leute.
Ich habe noch nie sowas unbenutzbares gesehen.
Ich,
wie heißt denn das Ding nochmal?
Das hat so einen doofen Namen. One UI!
Ja, hier sieht das alles ganz toll aus.
Ich habe noch nie sowas
unusable mäßiges gesehen auf dem Tablet.
Ich habe
legit bis jetzt nicht gefunden,
wie man den ganz normalen
App-Launcher startet.
Also, ich weiß, wie ich
Apps starte, ja.
Ich gehe auf dieses komische Übersichtssymbol und dann
oben auf das Suchen
fällt und dann stehen da manche drinnen. Aber,
so einen ganz normalen App-Launcher,
mit einem Button unten, wie man das von Android kennt,
am besten in der Mitte.
Du kannst vergessen, also One UI
ist wirklich das mit
Abstand ekligste
UI, was ich je auf einem Smartphone
beziehungsweise auf einem Tablet gesehen habe.
Flasht doch ein normales Android drauf.
Ich glaube, dafür gibt es keine
Custom ROMs. Man könnte
einen eigenen Launcher drauf machen, aber ganz ehrlich,
ich will daran eigentlich gar nichts customizen,
weil ich mache damit nichts, außer
einen Browser im Fullscreen permanent laufen haben.
Bin seit Mittwoch in einer neuen Firma
und dort im Linux-Engineerteam. Du hattest dir die Ausschreibung
im Stream angeschaut. Nice! War das eine
Stellenausschreibung, die ich geflamed habe, oder war das
eine Stellenausschreibung, die ich ganz gut fand?
Ist das eine, die du gepostet
hast, oder eine, die ich zufällig im Stream
angeguckt habe und du hast dich, du hast
dich dann da drauf beworben. War das etwas, was du
vorgeschlagen hattest, zum angucken?
Magst du dann streamen?
Ja, das ist gut. Hyper OS.
Du hast sie vorgeschlagen.
Okay, ja, aber nice, wenn es geklappt hat.
Und wie ist so?
Also ich kann aus eigener Erfahrung sagen, ich bin jetzt ja über
ein Jahr im neuen Job,
also ich war ja schon, das ist jetzt quasi
ein Jahr und ein Monat,
dass man am Anfang sehr
begeistert immer ist und
man nach und nach aber genug Punkte
findet, die einem auch auf den Sack gehen. Also in meinem
neuen Job gibt es jetzt genug Punkte, die mich auch nerven.
Also diese Phase mit man findet alles toll
ist vorbei.
Gerade die Bürokrate, die riesen
Bürokratie-Dinger bei uns gehen mir extrem auf den
Sack, aber
insgesamt geht es mir deutlich weniger
wie der alte Laden.
Ja, nice. Siehste, und bei mir ist es
umgedreht. Ich werde gezwungen, Windows
auf meinem Laptop zu verwenden.
Was nicht so wild ist, weil ich noch
genug Linux-Kisten habe, die ich benutzen kann
für die täglichen Sachen, aber
dass es auf meinem Laptop Windows sein muss, finde ich
ziemlich kacke.
Naja, jetzt habe ich vergessen. Irgendwas wollte ich gerade noch erzählen
bzw. zeigen.
Keine Ahnung mehr.
.NET Framework-Projekt.
Oh ja, da gibt es halt immer noch genug.
Ich glaube, wie gesagt, ich bin ja kein
hauptberuflicher Entwickler und auch kein .NET-Entwickler, aber
ich glaube, viele der .NET
Legacy, der .NET Framework
Legacy-Projekte,
die wären sogar mit halbwegs
vertretbarem Aufwand umstellbar
auf das neue .NET.
Aber ich glaube, da scheitert es
oftmals am Willen.
Habt ihr analysiert, warum
habt ihr sehr viel Windows-only-Shit verwendet?
Beziehungsweise
Sachen, die es nicht mehr gibt,
wie
beispielsweise dieses Windows-Message-Queue-Gedöns,
was
.NET Framework konnte und
.NET nicht.
Es ist schon bescheuert, dass
man überhaupt nicht durchblickt, wenn man über
.NET-Sachen spricht, was man eigentlich meint.
Niemand, der die Microsoft
Versionierung ist, ist so dumm.
Wer soll denn checken,
was der Unterschied zwischen .NET Framework
und .NET ist?
So dämlich.
Naja.
Okay, das stimmt.
Je nachdem, worauf das läuft.
Okay, habe ich meine Kiste schon rebooted?
Ich glaube schon.
Alles klar, dann lasst uns mal auf YouTube gucken.
Okay, wenn das noch altes ASP.NET ist
und nicht ASP.NET Core,
dann ist es tatsächlich schwierig,
es gibt es ja nicht mehr in der Form.
Das muss man dann
umschreiben auf
die Art und Weise,
wie man es jetzt mit ASP.NET Core macht.
Also gerade, wenn ihr Entity Framework
verwendet habt, das alte Entity Framework
mit ASP.NET, das Umbauen
auf ASP.NET Core und
Entity Framework Core ist schon ein bisschen größerer Akt.
Kann ich mir gut
vorstellen, zumindest.
Ich bin so müde, gell?
Ich weiß auch nicht, warum.
Ich habe richtig
gut und lang gepennt.
Vielleicht deswegen.
Ja, das kann ich mir auch vorstellen.
Auf so alten Kram hat man eh keinen Bock.
WCF, das habe ich selbst nie verwendet.
Das kenne ich nur aus
Geschichten
und dass das ganz eklig ist.
Das ist Windows Communication
Foundation oder sowas, gell?
Ja, das
kenne ich nur aus irgendwelchen Storys.
Habe ich nie selbst verwendet.
So, was haben wir denn hier auf
YouTube, was wir uns mal kurz anschauen können?
Am besten irgendwas, wo ich
wach werde bei.
Uni the Cat in Super Mario Galaxy.
Okay, am besten...
Die hat aber sehr kurze Beine.
Okay.
Ja, kannst
Content konsumieren.
Irgendwas, wo ich wach werde bei.
How a leap
they took down Microsoft.
The Ultimate
Ambience System.
Okay, dabei werde ich bestimmt wach.
Dabei werde ich bestimmt
wach, weil da muss ich mich bestimmt wieder
jeden zweiten Satz aufregen darüber,
warum C++ so scheiße ist.
31
Nubi C++
Habits.
Ich weiß nicht, ob ich das jetzt
geistig durchhalte.
Zumindest bin ich danach wahrscheinlich wach.
Was haben wir denn sonst noch?
Meine katastrophale Ausbildung zum
Fachinformatiker.
Schädlinge bekämpfen und Bauern beraten.
Peiership Video.
Da finde ich mich...
Okay, komm, scheiß drauf.
Wir skippen. Sachen, die ich blöd finde, die skippen wir.
Ich, komm. Ja, es ist Zeit,
Leute. C++ Rage.
Auf geht's.
Vielleicht ist es auch gar nicht so schlimm.
Vielleicht ist es ja auch wirklich ein Video, der...
Ja, wo ich sage, okay, aber ihr wisst,
es ist C++, das heißt, es wird mich
aufregen. Okay, let's go.
To my list of Nubi C++ Habits.
C++ is an incredibly complex language
with a lot of history.
So, whether you're an actual Nube...
C++ ist nicht einfach incredibly complex.
C++ wird auch absichtlich
incredible beschissen gemacht.
Weiß immer noch nicht, warum die Gremium-Leute...
Na, egal.
Okay.
...that really needs to look out for these things, or whether you just want to
improve your code a little bit, let's get started.
Alles klar.
Ja, das ist blöd.
People generally use it to save typings.
Was zum Teufel ist denn das da unten eigentlich schon wieder?
S
Klammer auf, hello...
Was ist denn das
da schon wieder für komisches Zeug?
Warum gibt es...
Warum gibt es fünf verschiedene Arten
oder C++? Egal, oh Mann.
Okay, aber das verstehe ich.
So you can say things like string instead of std colon colon string.
If it's limited to just a single
Okay, ja, gebe ich ihm recht.
Es ist Blödsinn.
Next.
Number two,
using standard endline, especially in a loop,
you probably meant to just print out
a newline.
Ja.
Jetzt mal ernsthaft, standard newline
klingt ganz stark danach, als möchte
man eine newline printen.
Aber selbstverständlich scheint das in C++
nicht so zu sein, sonst hätte er den Tipp nicht gemacht.
But endline does more than that.
Ach ja, ach ja,
endline macht mehr als endline. Logisch.
Logisch, na klar.
Obviously.
Endline macht mehr als endline.
Also flushes the buffer, which takes extra time.
Wer denkt sich das aus, Mann?
Ich weiß gar nicht,
was ich dazu sagen soll.
Wer denkt...
Wer denkt sich diesen Schrott aus?
But endline does more than that.
It also flushes the buffer, which takes extra time.
Instead just use a newline character.
What the fuck?
Also, ich als C++-Noob,
ich hätte jetzt gedacht,
ich könnte mir ja mal sagen,
ob das bei euch auch so war.
Ich hätte gedacht,
standard endline
ist einfach ein Shortcut dafür,
dass man unter Windows
backslash r, backslash n macht
und unter Linux nur backslash n.
Sodass man eben seinen
Source-Code quasi OS-neutral
schreiben kann
und er funktioniert unter
beiden Betriebssystemen ordentlich.
Das hätte ich gedacht,
dafür ist standard endline da.
Dass das, wenn du es unter Linux
kompilierst, er einen backslash n draus macht
und wenn du es unter Windows
kompilierst, er backslash r, backslash n draus macht.
Das hätte ich gedacht.
Dass es noch irgendwelches
secret hidden behavior drin hat,
das hätte ich nicht gedacht.
It also flushes the buffer,
which takes extra time.
Instead just use a newline character.
Number three, using a for loop by index
when a range-based for loop
expresses the intent better.
I don't really care at all about the index.
Instead use a range-based for loop.
Jaja, das sehe ich genauso.
Das finde ich auch viel angenehmer.
Ich meine,
ich persönlich
hätte es ja durchaus nice
gefunden, man hätte das Ding einfach
for each genannt, so wie sie es in C Sharp
beispielsweise gemacht haben.
Aber so ist es auch okay.
In JavaScript ist es ja
auch so, also in JavaScript
machst du ja auch normale Vorschreiben
und in Go ist es auch so, also
warum nicht?
There's no index, so one less chance
for an accidental typo or off by one error.
Ja, aber das sehe ich auch so.
Number four, using a loop when a standard algorithm
already exists to do what you're trying to do.
There's some simple thing that you want to do,
like find the index of the first positive
number in a vector. It's so
simple though, you decide to just write it yourself.
Instead,
consider if there's an algorithm that
already does what you're trying to do.
In this case we can use standard findif
to findif.
Und jetzt gebe ich ihm voll und ganz recht,
es macht eigentlich keinen Sinn, Sachen, die schon im Framework drin sind,
das Rad neu zu finden, gerade für so
simple Sachen wie
finde das erste Vorkommen
ist, was darauf matcht und so.
Aber jetzt, Leute, Leute, imagine,
imagine, das wäre ein gescheiter
Syntax. Überlegt euch mal,
man könnte einfach so was
schreiben wie
data.
findif
und dann so eine Lambda hinten
reinschieben und gut ist.
Ratschibass.
Ich schiebe Lambdas immer gerne hinten rein,
bei solchen Funktionen.
Stellt euch mal vor, man könnte das ordentlich schreiben.
Und stellt euch mal vor,
man könnte, selbst wenn
man das nicht ordentlich schreiben kann, einfach
sagen, standard findif
data ist positive
und nicht cbegin, cend.
Da müsste es so was wie
ich mein, es gibt ja
Iterators in C++,
aber das ist auch wieder so ein undurchsichtiges
Ding, wo es fünf verschiedene Varianten
gibt, wo ich mich frage,
warum, ich mein,
warum kann das Ding nicht
Iterator bereitstellen und die
Funktion möchte dann eben
eine x-beliebige Collection
die Iterator implementiert haben
und nicht diesen Scheiß mit cbegin und cend.
Ja, und weiterer
großer Vorteil von,
dass das auf, dass das
Vector so was anbieten würde, wäre
ja auch,
man könnte es sich merken, weil dieses ganze
Standard-Doppelpunkt-Doppelpunkt,
da gibt es ja mittlerweile tausend Sachen drin.
Ja, Link wird es halt
in C++ nicht geben, weil C++
keine Extension Methods hat.
Ich bin der Meinung, ohne Scheiß, Extension Methods
wären
die Rettung für C++.
Du könntest quasi nahezu alle Features
rausschmeißen der letzten zehn Jahre
und dafür Extension Methods einbauen.
Weil mit Extension Methods
würdest du zum Beispiel auch das erschlagen,
dass jede Library seine eigene
Stringklasse mitbringt, weil sie ihren
und irgendwas eigenes machen wollen und solche
Dinger. Du könntest dann einfach die
Standard-Stringklasse extenden mit den
Sachen, die du brauchst.
Das wäre so praktisch.
Ja, und du könntest auch sowas wie Link beispielsweise,
wenn du das haben willst, bauen in C++.
Extension Methods, ohne Scheiß, würde,
das wäre eines der größten
C++-Fixed-Features überhaupt.
Aber das kriegen sie ja nicht gebacken,
seit Jahren schon.
Find where the first positive element is.
Number five, using a C-Style Array
is a standard array.
C-Style Arrays often decay into pointers
and require you to pass the length of the array
along with the array itself.
This is just another opportunity to make a typo.
Instead, use a standard array.
Gäbe ich ihm recht,
das ist okay, ja.
Any use of reinterpret cast.
Ich habe bis heute nicht gecheckt,
was diese Dinger in C++ machen.
Du hast irgendwie
reinterpret cast, const cast,
es gibt irgendwie drei, vier verschiedene Sachen.
Ich bin der größte Krankenhub, was das angeht.
Ich mache den Standard C-Cast.
Bei mir sieht das dann einfach so aus hier.
Ich caste nach Keckel, Pointer,
hier, blub, so.
So sieht das bei mir aus dann.
Auch wenn das
nicht modern, tolles C++ ist.
Ich habe bis heute nicht gecheckt,
was diese ganzen Dinger hier machen.
Pretty much the only thing you're allowed to do
with an object that you got from reinterpret cast
is to reinterpret cast it
back to the original type.
Almost everything else is undefined behavior.
And yes,
dann fragt man sich, wenn es bei C++
so viel undefined behavior ist,
warum ist, sobald was undefined behavior ist,
nicht einfach Compiler-Error?
Das frage ich mich an vielen Stellen von C++.
Ich meine, die Compiler-Fehlermeldungen
sind absolut haare raufend,
ja, du verstehst sie nicht.
Aber sobald was undefined behavior ist,
wäre es doch eigentlich sinnvoll,
es kompiliert gar nicht erst.
The same goes for C-Style Casting.
So, sorry, famous Quake 3 algorithm
for computing the inverse square root.
Number 7, casting away const.
Ja, okay.
Number 7, casting away const.
Ich meine, guckt euch,
guckt euch mal an,
diese hässliche Syntax.
Const cast,
standard unordered map, standard string,
int, und,
okay, chat, was macht das
und an der Stelle?
Ist das eine Referenz oder,
nee, für was ist das
und überhaupt an der Stelle da?
Keine Ahnung.
Ist das eine Referenz oder,
okay, chat, was ist das und überhaupt an der Stelle da?
Okay, chat, was ist das und überhaupt an der Stelle da?
Keine Ahnung.
Also, die Funktion nimmt eine Map mit,
die die Numerzeiles,
die sie in dem Moment erzielt hat,
Map stringt,
sie nimmt 2 Wörter
und anschließend zurückbringt,
welche immer eine höhere Anzahl ist.
Die erste Art,
Warum kann man const überhaupt wegcasten, wenn const const, so was wird es in Rust nicht
geben, Leute.
Und es wäre auch blazingly fast.
Okay, ich skip das mal kurz, was mir zuhört.
Okay.
Okay.
Was?
Was?
Nee, oder?
Was?
Ist das irgendwie ernst?
Was?
Nee, oder?
Was?
Square Brackets, inserts the L
No, God!
No, God, please, no!
No! No!
No!
Bist du Max von YouTube?
Nein, nein, nein, ich bin Wobblos von Twitch.
Das ergibt ja überhaupt
keinen Sinn.
Jetzt mal eine blöde Frage, ja?
Stellt euch mal vor,
ich hab
eine Map
vom Typ, ach, keine Ahnung,
keck w, int.
So.
Und ich mach jetzt
ein Lookup.
Manche Typen sind, also,
insertet er dann, was insertet
er überhaupt als Default-Wert für irgendwas?
Das ergibt ja überhaupt
keinen Sinn. Warum ist
ein Lookup ein Insert?
What the fuck?
Ich bin echt immer wieder am Zweifeln
an dem ganzen
Prozess
und Erstellung von
C++. Wie kann man so
einen Schrott designen?
Keine Ahnung.
Element into the map if it doesn't already exist.
That's right.
Simply trying to look up this word in the map.
Ja, aber ich will, ich mein, vielleicht möchte ich mal gucken,
ob was drin ist. Okay, wenn man auf was,
okay, ich geb zu, an sich,
an sich ist es natürlich blöd,
was mit nem
Index abzufragen,
um zu checken,
ob es drin ist, weil
das Ding, also, in der anderen Sprache wird's
Exceptions werfen, in C++,
weiß ich nicht, Crashs wahrscheinlich,
und dass es nicht crasht, macht so komische Dinger.
Ja, normalerweise brauchst du irgendeine
Includes-Methode oder sowas,
um sowas nachzugucken.
Oder du machst das wie in Go,
was auch super hässlich ist.
Go, check, key, exist.
Da muss ich nämlich immer nachgucken,
wie das funktioniert.
Ja, oder du machst sowas wie in Go,
ja, was auch nicht schön ist.
Aber wenigstens
insertet es nix ohne Zuweisung.
Ganz ehrlich, irgendwas inserten
sollte das nur, wenn es entweder
wordcounts.insert.add
heißt, oder aber
index gleich irgendwas.
Und nicht einfach nur Index.
Absolut hängen geblieben,
komplett hängen geblieben.
Was?
Was?
Was?
Okay, das wusste ich nicht,
aber das macht Sinn.
Ja, das sind irgendwelche
Static Strings, die stehen im Binary drin,
die sind, die
expiren nicht. Okay, ergibt noch irgendwie Sinn.
Das kenne ich, ja.
Das ist tatsächlich relativ neu.
Ich glaube, das gibt es erst seit C++20 oder sowas,
dass man die benennen kann.
Das geht ein bisschen wie
Tuple Deconstruction in C Sharp.
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
Genau, das ist tatsächlich eines der Featuress, die sie eingebaut haben, wo ich sage, ey, die sind echt gut, die kann man so lassen, ja.
Man, die Syntax ist noch ein bisschen scheiße hier vorne, aber das finde ich durchaus in Ordnung.
Es sieht seltsam aus, ja gut.
Es ist C++, das ist seltsam.
Und diese ganzen Uns überall.
Aber das geht in Ordnung.
Structured Bindings can also be used with your own types, if the members are public.
The names get assigned to the variables according to the order of their declarations.
Number 12, using multiple out parameters when you want to return multiple things from a function.
Instead, create a basic struct and give those things names.
Then you can return the multiple values that you wanted to by returning the struct.
Man kann auch einfach einen Tuppel returnen, glaube, da braucht man das gar nicht.
The caller can even make it look like it was multiple values returned by using structured bindings.
Ja.
Doing work at runtime that could have been done at compile time.
Okay, ja.
Verstehe ich.
Das ist auch so ein Magic-Ding in C++, aber das ist cool.
Das ist tatsächlich eines der cooleren, also eines der, also das, was du Compile-Time-Checking und Compile-Time-mäßig machen kannst in C++,
unter anderem halt auch mit Templates, ist, glaube ich, mehr als in jeder anderen Sprache so geht.
Das ist eines der größten Vorteile und gleichzeitig auch eines der größten Abartigkeiten, die es gibt.
... know that it's totally fine to compute this ahead of time.
Number 14, forgetting to mark destructors virtual.
If a derived class gets deleted through a pointer to this base class, then the derived class destructor will not be called.
Only the base class's destructor will be called.
Ich glaube, ich habe es kapiert, aber nicht sicher.
Here I have a class that derives from the base that doesn't have a virtual destructor.
This function expects a pointer to the base class.
It uses some base functionality and then deletes the pointer when it's done.
This will happen automatically since I'm using a unique pointer,
but the same would be true if you just took in a normal pointer and then manually called delete.
If you pass a pointer to an instance of this derived type, then the wrong destructor gets called at the end.
Ich blick nicht durch, aber ich glaube, ich weiß, was er mir sagen will.
Was war nochmal ein virtual destructor?
Virtual Methoden sind die, die du in Klassen, die von dir ableiten, überschreiben kannst.
Wisst ihr, was ich nicht verstehe bei der ganzen Geschichte?
Warum ist es überhaupt welle, C++ das so zu schreiben wie im ersten Fall?
Warum gibt es nicht einfach einen Compile-Fehler, wenn du was überschreibst, was nicht überschreibbar ist?
Oder warum gibt es nicht wenigstens ein Warning,
dass du was überschreibst, was nicht als überschreibbar markiert ist
und dementsprechend sich vielleicht anders verhält, wie du denkst?
Ich dachte übrigens auch, dass das...
Siehst du, das ist so eine Sache, die ich nicht verstehe. Warum ist das nicht Pflicht, ja?
Wenn du was überschreiben willst, dann musst du halt auch Overwrite hinschreiben,
dass das implizit funktioniert, ist doch total bescheuert.
Nummer 15.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Reading left to right, this looks fine.
The actual order that members are initialized in
is the order that they are declared in.
Wisst ihr, was ein sinnvolles Default-Verhalten wäre?
Das, was er sagt, nur dass es einen Compile-Fehler gibt,
wenn man es in der falschen Reihenfolge reinschreibt.
Easy. Oder zumindest ein Warning.
Warum erlaubt man das?
Man kann doch sagen, okay,
die Sachen müssen in der Reihenfolge initialisiert werden,
wie sie definiert werden.
Und die einzige Möglichkeit, das zu machen, ist,
sie in der Reihenfolge zu initialisieren,
wie sie initialisiert werden.
Also wenn ich es falschrum schreibe,
wenn ich Start zuerst schreibe und End danach schreibe,
also hier nicht, End zuerst,
dann gibt es einfach einen Fehler.
Warum kompiliert das überhaupt?
Oder, weil Start auch ein Parameter für die Funktion ist,
können wir nur die Endvariable in Bezug auf den Start-Parameter definieren.
Whatever.
16.
Nicht erkennt man, dass es eine Unterschiede gibt
zwischen Default- und Value-Initialisierung.
X und X2 sind Default-Initialisierungen.
Ich bin gerade am überlegen,
was das überhaupt machen soll.
Also,
Int X verstehe ich.
Man deklariert eine Variable X vom Typ Int.
Die ist unins...
Uninitialisiert.
Das verstehe ich noch.
Bis hierhin würde ich es auch noch verstehen.
Man deklariert einen Pointer zu einem Int.
Der ist halt aktuell uninitialisiert
oder man könnte auch schreiben gleich 0 oder sowas.
Verstehe ich auch noch.
Aber was macht New Int an der Stelle?
New heißt ja im Endeffekt,
das konstruktiert ein Objekt,
im Endeffekt.
Ich wusste gar nicht, dass man New Int überhaupt schreiben kann.
Aber okay.
Man kriegt wahrscheinlich hier einen Int-Pointer zurück.
Also man kriegt hier quasi einen Pointer auf einen...
Okay, ich glaube, ich verstehe jetzt,
was das macht.
Man bekommt New Int,
man bekommt einen Pointer zurück
auf einen Arbeitsspeicherbereich,
in den ich ein Int in Zukunft mal reinschreiben kann,
der eigentlich...
aber aktuell noch nicht initialisiert ist,
würde ich mal...
also noch nicht auf einen Default-Wert gesetzt ist.
Im Prinzip wird Speicher allokiert für mich
und ich bekomme einen Pointer dahin,
aber der Speicher wurde vorher nicht genullt im Endeffekt.
Also ist jetzt quasi das hier ein Pointer,
ein gültiger Pointer auf dem Speicherbereich,
aber das, was in dem Speicherbereich drinsteht,
auf dem der Pointer zeigt,
ist einfach das, was die ganze Zeit drin steht,
also potenziell Random-Kram von irgendwas.
Okay, das leuchtet so weit ein, ja?
Chat.
Warum schreibt man hier nicht einfach Y gleich 0?
Warum schreibt man hier Y Klammer auf Klammer zu?
Warum nicht Y gleich 0?
Wäre Y gleich 0 nicht irgendwie die für normal denkende Menschen,
logischere Variante davon?
Also so wie ich das interpretiere,
ist Y Klammer auf Klammer zu das Gleiche wie Y gleich 0.
Ja, Default-Wert.
Default-Wert von einem Int ist höchstwahrscheinlich,
rate ich mal 0.
Bei C++ weiß man das ja nicht.
Ist der Default-Wert von einem Int in C++ 0?
Es könnte auch Max-Int oder Min-Int sein.
Es könnte auch Minus 1 oder so sein.
Man weiß das ja nie so genau bei den Leuten, die sich das...
Also...
Int Y gleich 0 wäre halt sehr nice gewesen an der Stelle.
Und warum das beides möglich ist und ob das ein Unterschied ist,
ey, keine Ahnung, was mit den Leuten falsch ist, die diese Sprache designen.
Hat jemand von euch einen Plan, was der Unterschied ist
zwischen Int Klammer auf Klammer zu und...
Geschweifte Klammer auf Klammer zu und Klammer auf Klammer zu?
Also ich würde sagen, Int Klammer auf Klammer zu invoked den Default-Konstruktor
von Int.
Ich weiß nicht, was ein Default-Konstruktor von Int sein soll,
aber sagen wir mal sowas wie 0 reinschreiben vielleicht.
Und das hier macht das gleiche?
Keine Ahnung.
Okay, wir fragen das jetzt mal.
Difference.
New Int.
Das kann Google aber wahrscheinlich nicht.
Da müssten wir jetzt Chat-GPT fragen,
oder bin ich nicht eingeloggt?
Aha, hier, guck mal.
Nee.
Nee, nee.
Difference, hier, guck mal.
Difference between, ups, ah, geh fort.
Difference between New Int Klammer auf Klammer zu und Geschweifte Klammer auf Klammer zu.
Alles klar, war das die Difference?
Was?
Sind Ints...
Ja, ich weiß auch nicht, was sind die Default-Konstruktor von Ints...
Okay.
Expression List, Expression Initial...
Warum will ich mehrere Werte an den Int übergeben?
Ah, ich weiß warum.
Ich glaube, das ergibt doch Sinn.
Ich könnte doch sowas machen wollen.
Guckt mal.
New Int.
Und jetzt will ich das als, äh, irgendwie als Bytes da reinschreiben oder so, vielleicht.
Ist das vielleicht der Grund, warum das geht?
Ich kann die Bytes einzeln reinschreiben in den Int.
Ich kann entweder direkt eine Zahl reinschreiben oder ich kann die Bytes einzeln vielleicht reinschreiben.
Dann würde das tatsächlich sogar Sinn ergeben.
Dann, okay, wenn das der Fall ist, dann...
Macht's vielleicht doch Sinn.
...contain the value 0.
Z, on the other hand, is neither default nor value initialized.
This is a function declaration.
Even if it's a tiny bit less efficient, initializing your values...
Okay, wir machen das jetzt, Chat, gehe ich...
Was, Chat, was, Dr. Go?
Ernsthaft, das kenne ich gar nicht.
Dr. Go, Chat?
Nee, wo, wo ist das?
AI-Chat, das da?
Okay, ja, das 3, 5, 6...
What's the difference?
What's the difference?
Between new int and new int in C++.
Okay, ja.
Das ist gut zu wissen, das Chat-GPT über Dr. Go auf uns.
Okay, nach längerer Überlegung ergibt das hier tatsächlich Sinn.
Ist das wie in Go?
Also, ich glaube, in Go ist es nicht ganz so abartig,
was so ein Unterschied ist.
In Go kannst du auch schreiben, war irgendwas.
Also, du kannst in Go schreiben, war blub.
Du kannst schreiben, blub, das.
Es gibt drei Varianten, irgendwie die Sachen in Go anzulegen.
Aber nicht, da kommt C++ nicht mit aus.
In C++ brauchst du mindestens sieben verschiedene Varianten.
Okay, next.
Fault.
17. Overuse of magic numbers.
Ja gut, da gäbe ich ihm recht.
Introducing a basic constant in your code can make it many times more readable.
Da gäbe ich ihm recht.
Da gäbe ich ihm recht.
Da gäbe ich ihm recht.
Da gäbe ich ihm recht.
Da gäbe ich ihm recht, ja.
The compiler is going to optimize it away anyway.
Just give it a good name.
18. Attempting to add or remove elements from a container while looping over it.
Well, doing that is sometimes just...
Das ist eh meistens eine blöde Idee.
Da hast du in anderen Programmiersprachen auch Probleme,
wenn du, während du eine Liste iteratest, die Liste modifizierst.
Es gibt je nach Sprache unterschiedliche Tricks,
wie man das handhaben kann.
Ja, irgendwie den Iterator sich vorher speichern und so.
Aber, also dass das Probleme gibt, das kann ich mir denken, ja.
Necessary, but what I mean is, noobs often do it incorrectly.
We're trying to put a copy of the vector at the end of the vector.
Adding or removing an element to the vector may invalidate the iterators to the...
Nee, ich glaube, das ist was unterschiedliches.
Das ist, ja, in Go ist das Struct, Struct Initializer.
Der setzt quasi alle, also Playlist ist ein Struct.
Und hier setzt er, soweit ich weiß, alle Werte in dem Struct auf den Default-Wert.
In C++ wäre das hier ein List Initializer.
Das heißt, du könntest hier mehrere Elemente hinten reinschreiben.
Wobei, wenn du vielleicht...
Nee, das könnte tatsächlich das Gleiche, aufs Gleiche rauskommen.
Wenn du es nicht angibst, es ist zwar vielleicht was Unterschiedliches,
wenn du Werte reinschreibst, wenn du keine Werte reinschreibst,
dürfte es sich aber ähnlich verhalten, ja.
Ja, ja.
Ich glaube, das kommt aufs Gleiche raus, ja.
Das ist ohne Scheiß, das muss man ja mittlerweile glücklicherweise in C++ auch nicht mehr machen.
Das ist, glaube ich, legit.
Das ist, glaube ich, die hässlichste Vorschleife, die es gibt in allen Sprachen.
Das war früher der Standard, in C++ die Dinger so zu schreiben.
Ja, gut, das ist klar.
Da sind wir uns einig.
Ja.
Also ich hätte jetzt gedacht, dass das vollkommen okay ist
und genau der richtige Weg, sowas in C++ zu machen.
C++ hat ja vor einer Weile diese Sachen hier mit Move eingeführt.
Heißt im Endeffekt, man kann ein bisschen wie in Rust
quasi Ownership von Variablen abgeben.
Also normalerweise ist das hier ja ein Problem.
Du legst das hier an, quasi im Stack von dieser Funktion
und wenn du das returnst,
würdest du ja normalerweise was returnen, was aufgeräumt wird nach dem returnen.
Das ist natürlich in C und C++, gerade in C++ oftmals nicht so eindeutig,
wann was weiterlebt und wann was aufgeräumt wird.
Das finde ich auch immer sehr undurchsichtig.
Das ist was, was Rust wirklich nice macht.
Oder ob es gar kopiert wird, ja.
Es könnte ja auch sein, dass das erlaubt ist,
aber dass das eben nicht, dass es einmal kopiert wird.
Da blicke ich immer nicht genau durch, wann.
Also da macht C++ auch zu viel Magic dabei.
Also ich hätte jetzt aber erwartet,
wenn ich, obwohl ich den hier lokal in der Funktion angelegt habe,
ich den Vektor als return type,
wenn ich den Vektor returnen will,
dann ist Standard Move genau der richtige Weg,
um zu sagen, ey, scheiß drauf, dass das hier drinnen angelegt wurde.
Quasi Rust-mäßig Transfer Ownership von hier zum Aufrufer.
Ich hätte jetzt vermutet, genau das muss man machen.
Aber anscheinend nicht.
A vector can be a large object and you don't want to make a copy of it.
Ja.
So you go ahead and try to move it out.
Ja.
Genauso hätte ich mir das gedacht.
If you had just tried to return V directly,
there would have been no copy and no move.
Und hier hätte ich gedacht, gibt es vielleicht Probleme.
Hier hätte ich gedacht, es gibt es Probleme,
weil eventuell der Vektor ja aufgeräumt wird danach.
In this situation, that's because of return value optimization.
But what if the compiler can't do return value optimization?
In all cases,
the move is unnecessary.
The compiler always knows that it can move a local variable.
But in some cases, this actively prevents return value optimization.
So that's why this is one of the few words where I can say,
you should just never do this.
Whatever.
Oh nein, Templates.
Jetzt wird es eklig.
Which bring?
What?
Woh, woh, woh, woh.
Na gut, das geht ja noch.
Was?
Okay, es geht nicht.
Ich checke schon wieder nicht, was es macht.
Also die erste Zeile kapiere ich ja noch.
Constexpr standard remove reference.txt.
Und, und?
Ist das der Return-Wert hiervon?
Oder, oder?
Alter, what?
Ah, meine Güte, ey.
No except?
Ich weiß nicht, was es macht.
Brings us to number 20.
Thinking that move actually moves something.
Ja, wie kann man,
wie kann man in C++ denn auch erwarten,
dass move was macht, was da steht?
Here is an implementation of standard move.
The full templated definition might be a bit much to take in all at once.
So let's take a look just at the,
in this case, move takes in an int lvalue reference,
static casts it to an rvalue reference.
Obviously, natürlich.
And returns it.
The exact same thing happens in the rvalue overload.
It just static casts to an rvalue and returns it.
A more accurate name for move.
Ich hab nix verstanden davon.
Move is probably something like cast to rvalue.
Alles klar, mach das nicht.
Falsch.
I'm thinking that evaluation order is guaranteed to be
left to right.
Ja, ja, hätte ich jetzt eigentlich auch gedacht.
Here's a famous example.
We have a string that says,
but I've heard it works even if you don't believe in it.
We replace the first four characters with the empty string.
Then we find even and replace it with only.
Then we find don't and delete it.
With this reasoning, we should end up with,
I've heard it works only if you believe in it.
But prior to C++ 17,
the compiler is actually allowed to compute any sub expression in any order.
But why?
So theoretically, it could find the location of even first
and then replace the first four characters, making that location off by four.
Wenn ich es richtig verstanden habe, in den neueren C++ Standards ist das nicht so.
When the second replace happens, it would replace these four characters with only.
And you can see how this goes on.
You don't get the result you expected.
Well, the good news is that as of C++ 17, this example is guaranteed.
If you have a dot
It doesn't make any sense.
B, then A is guaranteed to be evaluated before B is.
However, even in C++ 20, the order that function arguments are evaluated is still not guaranteed left to right.
This wouldn't matter much if A, B and C were pure functions.
But if A, B and C have side effects,
Okay, das ist natürlich,
das ist vielleicht gar nicht so schlimm, das so zu schreiben.
Then the order that they're called in might actually make a difference.
22, using totally unnecessary heap allocations when a stack allocation would have been fine.
Here we create two customer records on the heap.
Das macht ja gar keinen Sinn.
Warum sollte ich das? Und wenn ich es hier lösche, ist eigentlich unsinnig.
Then we do some work and then we end up deleting those variables at the end of the function.
Das ist unsinnig.
The question we should ask ourselves is, did this really need to be a heap allocation?
Nö.
There's a good chance it would have been fine if we just stack allocated them.
So let's just say for the sake of argument that these objects are too big and you really do want them on the heap.
That brings us to number 23, not using unique pointer and shared pointer to do your heap allocations.
What happens if an exception gets thrown in the middle here?
Then these deletes never occur and the memory is leaked.
Das gleiche Problem hast du ja in Go auch.
Um zwei Ecken, nicht exakt das gleiche Problem.
In Go machst du sowas wie defer dann davor, so nach dem Motto, egal was passiert,
wird am Ende der Funktion immer das ausführen.
Und in C-Sharp wird es eine Exception Handling mit finally Block drumherum machen.
Oder eines der neueren Sachen verwenden sowas wie using var blub gleich new Keckel.
Und wenn Keckel quasi einen Destructor hat bzw.
eigentlich kein Destructor, muss man sagen, disposable ist, dann wird das automatisch
aufgerufen, auch wenn es Exceptions gibt.
When you want to make sure that a resource is cleaned up, you need to put that clean up code in a destructor.
So why don't we make a class that holds a pointer and then in its destructor it deletes that pointer?
Well, that's exactly what unique pointer.
Du musst alle Errors handeln, das ist richtig.
Aber du kannst natürlich immer noch sagen, du kannst es natürlich auch immer ignorieren.
Aber du musstest ihn handeln, indem du explizit sagst, ich ignoriere ihn.
Das ist schon wahr.
You can give it a heap allocated pointer and when it goes out of scope,
it deletes it.
A shared pointer, on the other hand, uses a reference counting scheme similar to what
Du musst du nicht zwangsläufig in allen Sprachen.
Also Sprachen, die keine Error Return Werte haben.
Und da kannst du dich dafür entscheiden, Exception Handling drumherum zu machen oder nicht.
Also in Rust bist du wirklich gezwungen.
In Rust musst du alles explizit handeln oder unwrappen und Panic riskieren.
Aber das dann auch definiert.
Okay, ja, das kenne ich.
Das macht Sinn in a language like Python.
Man kann bei einem shared pointer, glaube ich, sogar eine anonyme Funktion hintendran
schreiben, die ausgeführt werden soll, wenn das gecleant wird.
Also das ist tatsächlich ein ganz sinnvolles Feature.
As the last shared pointer goes out of scope, that shared pointer is in charge of the deletion.
This scheme is much more expensive because
reference incrementing and decrementing have to be done atomically.
That brings us to number 24.
Constructing a unique or shared pointer
directly instead of using make unique or make shared.
Make unique and make shared will pass your arguments directly to the constructor of your object.
Okay, whatever.
25. Any use of new or delete.
There's no reason to rewrite functionality that already exists.
Here I'm trying to manage the memory.
Doch.
Weil man da nicht überall shared pointer und
unique pointer rumschieben muss.
You have some resource and then delete it when it's done.
That's already what a unique pointer does.
Don't try to couple the purpose of your
class to the idea of ownership of an object.
That's a completely separate issue.
Unique pointer and shared pointer together
cover pretty much every valid use of new or delete.
Number 26.
Any kind of attempt to do manual resource management.
This is pretty much the same story as with new
or delete.
Aber manchmal geht es nicht anders.
Ja, manchmal, manchmal geht das nicht anders.
Manchmal gibt es schlicht und ergreifend nichts.
Ich hatte letztens genau so was.
Ich bin gerade am überlegen, was das war.
Das war irgendwas.
Irgendwas einlesen, aber nichts.
Aber nicht Dateien einlesen.
Ich krieg's nicht mehr zusammen.
Ich wollte.
Ich krieg's nicht mehr zusammen.
Aber das ging mit C++ nicht.
Du musstest die.
Du musstest die Standards, die die alten C-Funktionen dafür verwenden.
Ich glaube, ich wollte irgendwas stand out.
Irgendwas mit stand out.
Ich wollte nicht von einer Datei lesen.
Ich wollte von irgendeinem Memory Stream lesen.
Und da musste ich die die old school C-Dinger verwenden.
Da gab's in C++ nichts.
Any kind of resource then look to see if there's a
are released upon destruction.
Number 27.
Thinking that raw pointers are somehow bad.
Raw pointers sind das Beste.
Here's a basic max function.
This function is just reading.
Raw pointers sind beste.
Number 28.
Returning a shared pointer when you aren't sure the object is going to be shared.
Ah, ist mir auch egal.
Pointer.
Number 29.
Thinking that shared pointer ist mir auch wurscht.
And 30.
Confusing a const pointer with a pointer to const.
Wenn ich das schon wieder sehe.
Ah, wenn ich das schon wieder sehe.
Wann?
Okay, bevor er das jetzt erklärt.
Lass mal überlegen, was?
Was könnte da der Fall sein?
Okay.
Const int pointer.
Okay.
Das hier ist ein int pointer.
Der nach dem Zuweisen nicht mehr geändert werden kann.
Rate ich jetzt einfach mal.
Also was hier dran konstant ist, ist der Pointer.
Nicht das int.
Der Pointer ist konstant.
Also sprich, ich kann jederzeit den Wert, der quasi in dem Speicher steht, auf den
der Pointer zeigt, ändern, aber ich kann nicht den Pointer auf einen anderen Speicher.
Also ich kann nicht einen neuen Speicherbereich, auf den er zeigt, zuweisen.
Ich kann darf nicht den Pointer ändern, aber ich kann den Wert ändern im Speicher, auf
den der Pointer zeigt. So, so, das sehe ich das.
Also der Pointer ist konstant, nicht der Wert, auf den der Pointer zeigt.
Int const pointer.
Ich habe keine Ahnung, warum das überhaupt valid Syntax ist.
Und int Sternchen.
Hä?
Ich check's nicht. Keine Ahnung.
The concept of a const pointer versus pointer to const is pretty simple.
Obviously easy.
But a lot of newbies struggle to remember how to tell the difference between them syntactically.
Ja.
Es ist so obvious, das kann man, kann man eigentlich gar keinen Fehler machen.
The rule is that const applies to whatever is immediately to its left.
Unless it's the leftmost thing in which it applies to the thing to its right.
Okay. Warum?
Also was ja Sinn gemacht hätte, ist sowas hier.
Const pointer int
versus
const int pointer.
So, das hätte ich ja noch verstanden.
So nach dem Motto, das hier ist ein konstanter Pointer auf, also ein Pointer.
Und das hier wäre quasi ein
const int
auf die f. Aber okay, keine Ahnung.
So here the const applies to the int not to the pointer.
Ich glaube, selbst meins macht auch nicht mehr Sinn.
Here the const applies to the int not to the pointer.
And here const applies to the pointer, not to the int.
Number 31, ignoring compiler warnings.
Ignoring them or turning them off very frequently leads to undefined behavior.
Ja, gut, das ist klar.
Meine Güte, Alter.
Meine Güte, das hat mich super verwirrt jetzt.
Gucken, ob es neue Package Updates gibt.
Es ist schon eine halbe Stunde her, wo ich Package Updates, nein, nicht.
Dann noch lieber Go oder Rust.
Ja, ich würde es tatsächlich auch bevorzugen.
Also ich bin kein super großer Go-Fan, aber wenn ich die Auswahl hätte, würde ich das machen.
Ich bin jetzt auch nicht irgendwie bei der Rust Task Force, die überall Rust anpreisen müssen.
Aber ich würde es auch bei solchen Sachen bevorzugen.
Manchmal kommst du halt nicht drum herum.
Wir haben letztens in ESP32 wieder dran rumgebastelt, die neue Variante mit Zigbee.
Und die offiziellen Sachen kannst du halt am besten
nachvollziehen.
Mit dem C++ und mit dem offiziellen Framework von denen.
Wann kommt KI-Stream? Wann du KI-Tools ausprobierst?
Wir haben immer mal wieder KI-Tools ausprobiert.
Ich wüsste jetzt nicht,
was ich da für ein extra Stream machen sollte.
Meine Lieblingssprache bleiben nach wie vor C-Sharp und Ruby.
Allerdings Ruby kann ich in letzter Zeit sehr wenig, weil es total outdated und
outdated, overrated, jebated.
Also outdated ist es nicht, aber niemand verwendet es mehr.
Ich mag Ruby aber als Sprache.
Ich habe auf der Arbeit auch schon einige Sachen in Go gebastelt mittlerweile.
Gerade für im Kubernetes Umfeld beispielsweise
letztens einen Prometheus Exporter, den wir als Sidecar injecten können
für unsere Blockchain.
Wir haben ein paar Blockchain Ports laufen
und die selbst bieten nicht alle Metriken an, die wir haben wollen.
Da habe ich einen Prometheus Sidecar gebastelt, der die API abfragt und daraus
die Metriken in Prometheus Format bereitstellt.
Für sowas ist Go nice.
Da kommt im Endeffekt dann ein 3,5 MB Binary oder sowas raus.
Das packst du in Minimal Image rein und da ist es am Ende 15 MB.
Und let's go.
Ein Schocker am Start.
Dankeschön für den Sub.
So, was haben wir denn?
Irgendjemand hat sich doch gerade KI gewünscht.
Gucken wir mal KI 13 Lead Elite Time.
Das ist bestimmt Absicht.
Oh, nee, nee, nee, nee, nee, nee.
Das ist mir zu viel overengineert für heute Morgen wieder.
Wieso? Ich habe da noch mehr Tabs.
Guck mal hier. Da noch Tabs.
Und hier habe ich gerade neu gestartet.
Hier habe ich auch noch ein paar.
Multisite Homelab.
Ist das überhaupt noch ein Homelab?
Wenn man sowas hat?
Wo hat er denn das hier?
Wir gucken uns das Intro an.
Das Rumgemale hier, das müssen wir uns da nicht
mehr angucken. Wir gucken uns mal das Intro an, weil das hier ist der Meister
des Overengineerings für sein Homelab.
As you saw in my last video, I decided to
co-locate some of my servers in a data center not too far away.
Das hat er auch bestimmt gesponsert bekommen, oder?
Ansonsten ist halt so.
Bisher war es schon Overkill.
Aber was folgt nach Overkill?
Hyperkill oder so?
In that video you saw most of my hardware choices, which was giving
my Homelab servers a new life, in a new rack, on a new network, in a new location.
Warte mal, was ist das?
Überfordert durch Tabs.
Wusstest du die Musik?
Ich bin verwirrt.
Ja.
Achtung, OKS.
Ah, ich habe zu viel Zeug auf.
Ich blicke in meinen Tabs nicht mehr durch.
Hier.
Ja, kann schon mal vorkommen, aber es kommt
mir relativ selten vor, müsst ihr auch zugeben.
New Location comes a whole host of
challenges like networking, security, VPN, virtualization.
Und am Ende, wir wissen ja alle, was er laufen hat.
Irgendwie ein Dashboard und Uptime-Kuma, so.
Da hat er im Prinzip nichts darauf laufen, was wirklich jetzt nutzbar Mehrwert bringt.
Er hat ganz viel Management für das Management für sein Hardware-Kram.
DNS, Multiple Clusters, Backups and a lot more.
Das Ding ist so, also ich sage euch mal, wie es ist.
Das Setup von ihm, ohne Co-Location, zweiten Standort und so, das Setup ist so
komplex, dass er definitiv, ich meine, er ist auch nur ein Mann, der das betreibt, ja,
dass er definitiv mehr Downtime bisher hatte.
Nicht durch die Hochverfügbarkeit.
Als durch eigentliche Hardware-Ausfälle, also durch Fehler, durch die
Hochverfügbarkeit hat er mehr Downtime gehabt als ohne Hochverfügbarkeit.
Wette ich mit euch.
So, let's dive into my architecture and get started.
The first piece was getting my network set up.
At first I thought this was going to be the really complicated part.
But it turned out a little bit easier than I thought it would be.
Moving my public workloads to the Co-Location.
Ich will mir nur den Anfang angucken, worum er umzieht.
Der Rest interessiert mich eigentlich nicht so sehr.
Wo fängt er denn an?
A lot of things across my network.
So a quick review on what my network used to look like.
I just drew up this diagram like three months ago.
I had lots of VLANs here.
As you can see, I had my default network, a camera VLAN, an IoT VLAN,
main VLAN, guest VLAN, servers untrusted VLAN and then server.
Und ich dachte, bei mir ist schon übertrieben mit.
Ich habe also streng genommen habe ich drei
VLANs.
Eins für China-Chinesen-IoT-Geräte, dann das normale WLAN-VLAN
und halt das Default-VLAN.
Ich weiß nicht, ob man das mit rechnen kann.
Aber der ist natürlich dann schon wieder absolut next next level unterwegs.
First trusted VLAN.
And between all of these networks, I had a lot of complicated firewall rules
for lack of push, most of those rules and some of that complexity.
To the UDN2 networks.
Well, currently I have a site-to-site VPN set up.
Now, I thought this was going to be really hard.
Turned out to be a lot easier because I ended up
MPLS-Anbindung jetzt.
using Unify-Site-to-Site.
Magic.
Part of the reason why I chose to Unify devices, because it literally is as simple
as checking. Ich mag Unify nicht.
Und ihr wollt dann immer genau wissen, warum, und ich kann es euch gar nicht so
hundertprozentig genau sagen, ich habe einfach keinen.
Ich fühle es nicht, wie man so schön sagt heutzutage, Unify.
Unify ist auf der einen Seite easy, auf der anderen Seite dann schon wieder für
den Easy-Grad zu kompliziert.
Und wenn Sachen kompliziert sind, aber nicht ordnungsgemäß kompliziert,
sodass jemand, der sich damit auskennt, versteht, was damit gemeint ist, sondern
dass alles irgendwie dann wieder anders anders heißt, an anderen Stellen ist.
Also ich bevorzuge entweder dumm
oder kompliziert, aber wenn kompliziert, dann so, dass es eben
gemacht ist für Leute, die sich mit dem Thema auskennen.
Also zum Beispiel,
Fritzbox ist für mich ein super Beispiel für Easy für Leute, die sich nicht damit auskennen.
Du kannst in der Fritzbox viele Sachen gar nicht machen, die man
vielleicht mit einem ordentlichen Netzwerkgerät machen können sollte.
Zum Beispiel glaube ich, kannst du bis heute.
Da könnt ihr mich korrigieren, wenn ich falsch liege.
Wir haben ja letztens in einem Video
gelernt, dass das angeblich passiv-aggressiv ist, wenn man das so sagt.
Ihr erinnert euch noch.
Aber ihr könnt mich
wirklich gerne korrigieren, wenn ich falsch liege.
Ich glaube, man kann bei einer Fritzbox
heute immer noch keine ausgehenden Firewall-Regeln machen.
Und wie gut die die Sachen, die Firewall-Regeln zwischen Netzen sind.
Man kann ja auch gar nicht wirklich gescheit verschiedene Netze anlegen.
Das geht nicht.
Und das ist aber okay, weil die Fritzbox ist ein Gerät, das ist rundum finde ich
gelungen, designt für Leute, die ein bisschen advancedere Sachen daheim machen
können.
Ja, auch mal ein Thermostat steuern, ein Gäste-WLAN haben, was auch immer.
Aber sich damit nicht wirklich tiefgreifend beschäftigen wollen.
So, das ist ein gutes Gerät.
Früher hat man immer gesagt, die rote Pest aus Berlin, also AVM.
Aber mittlerweile muss ich sagen, ich mag Fritzboxen für das, was sie sind.
So, das Gegenstück dazu wäre beispielsweise ein Cisco Switch über CLI.
Damit könnte kein Noob irgendwas anfangen.
Aber, und das muss man denen echt zugutehalten, das Cisco CLI,
ja, ich habe mal vor Urzeiten ein CCNA gemacht, also minimalste Ahnung, hatte ich
zumindest zum damaligen Zeitpunkt davon, ist in sich schlüssig.
Das ergibt Sinn,
wenn du dich damit beschäftigt hast.
Sicherlich hast du da schon ein paar
angeflanschte Sachen, so ein paar Sonderdinger, die vielleicht nicht ganz dem
entsprechen, aber zu 95 Prozent
ergibt die CLI-Bedienung von einem Cisco Switch ergibt das Sinn.
Auch wenn man sich erst mal daran gewöhnt hat.
Für einen Noob nicht.
Der hat sich nie damit auseinandergesetzt, will sich damit nicht auseinandersetzen.
Wenn man sich erst mal
daran gewöhnt, dass ein Port starten nicht Start ist, sondern nicht Shutdown
und sowas in der Richtung, dann ergibt das Sinn bei Cisco.
Ja, auch dass man in die Untermenüs, dass
man, um einen Port einzurichten, erst mal in die Port-Config gehen muss und dann dort
die Sachen, ergibt Sinn.
Ja,
ein Negativbeispiel wäre C++.
Es ist kompliziert und ergibt keinen Sinn.
Genau. Also das eine ist ein Gerät, das richtet sich an Profis,
machte aber auch keine Verwässerung drumherum und sorgt deswegen dafür, dass
es konsistent bedienbar ist, wenn man sich damit auskennt.
Im Prinzip wie eine Fritzbox, die auch gut
bedienbar ist für jemand, der sich nicht auskennt oder für jemand, der sich nicht
im Detail, aber Unify ist in so einem komischen Spot dazwischen.
Und das ist, glaube ich,
das, warum es mir nie gefallen hat.
Die versuchen ein bisschen, sich an die Noobs zu richten.
Und dadurch verwässern sie die eigentliche Komplexität, die aber dann doch
da ist in den Settings.
Und ich habe mich da nie richtig drinnen zurechtgefunden.
MikroTik macht es auch nur so semi besser, muss man sagen.
Also, wenn man sich mal hier Router...
OS Demo anguckt.
Das ist ja das, die Dinger, die ich gerne empfehle für den Heimbereich, für alle,
die ein bisschen, die ein bisschen mehr machen wollen.
MikroTik Geräte.
MikroTik macht es nur so semi viel besser.
Es ist schon eine gewisse Logik in diesem Web Interface drinne.
Ja, hier findest du die Sachen, die findest du Firewall Settings.
Da ist schon eine gewisse Logik drinne.
Vieles ist aber auch komplett unlogisch.
Wie zum Beispiel, wie man jetzt genau VLANs anlegt.
VLANs auf RouterOS gibt es drei, vier verschiedene
Varianten. Es gibt die Variante über Bridges.
Es gibt die Variante über Interfaces.
Es gibt noch... Whatever.
Da blickst du nicht durch.
Du brauchst ein Guide dafür, wie du VLANs anlegst.
Eigentlich sollte VLAN anlegen was super simples sein, ist es aber nicht.
Das ist auch was, wo sie ein bisschen verkacken.
Mit den normalen Settings ist aber echt okay.
Und die haben aber halt auch eine CLI-Bedienung.
Die ist ganz brauchbar.
Wenn auch nicht so hundertprozentig konsistent wie beispielsweise bei Cisco.
Aber mir ist es immer noch lieber als Unifi, weil die hier wenigstens nicht so tun
beim MikroTik, als wäre es ja eine super easy, unkomplexe Sache.
Netzwerkkonfiguration mit advanced Themen.
Und die nennen die Sachen halt auch so, was es ist.
Und das ist halt ein bisschen das Problem, was ich bei Unifi hatte.
Ja, Unifi ist VLAN-Config super easy, das stimmt.
Das ist eine Sache, die ist tatsächlich easy.
Die ist übrigens so easy, wie es eigentlich sein sollte.
Du trägst das Ding, du überlegst dir, was es sein soll.
Ob das quasi ein, wie nennt das Cisco, ein Trunk-Port oder ein Access-Port ist.
Richtig? Habe ich das auch richtig im Kopf?
Und dann trägst du halt ein,
was getaggt werden soll, beziehungsweise was drüber gehen darf.
Und gut, das stimmt, das ist in Unifi einfach.
Aber viele Sachen drumherum sind undurchsichtig gewesen für mich bei Unifi.
Und aus dem Grund, weil sie eben auf der
einen Seite noob accessible irgendwie sein wollen, aber auf der anderen Seite
aber auch advancedere Konfigurationen bieten, aber dann die Sachen oftmals nicht
so nennen und wo Unifi bei mir komplett unten durch ist.
Zumindest was WLAN angeht, also nicht
VLAN, WLAN angeht, ist, dass sie für sehr sinnvolle Features,
die andere Hersteller schon lange haben, ewig gebraucht haben und
zu meiner Zeit, wo ich Unifi hatte, sie nicht hinbekommen haben.
Mein Lieblingsbeispiel ist da DPSK für. Damit kannst du...
Also jeder Hersteller nennt das ein bisschen anders.
Unifi hat das mittlerweile auch.
Das ist aber so für mich das Feature
schlechthin gewesen, was mich immer richtig geärgert hat, dass Unifi das nicht konnte.
Es kann Rugus, kann es OpenWRT, kann es Mikrotik, kann es auch ein bisschen Umwege.
Cisco kann es.
Es konnte im Prinzip jeder etwas bessere Hersteller von WLAN-Equipment außer Unifi.
Und Unifi hat sich, keine Ahnung, sieben, acht Jahre dagegen gewehrt, dieses Feature
einzubauen, obwohl das eines der sinnvollsten Features ist für
WLAN-Geräte, die ein bisschen advancer sind als wir schalten ein WLAN in der Fritzbox ein.
Nein, AVM kann das ziemlich sicher nicht.
Ich sage mal so, für alles, was ein bisschen
advancer ist als eine Fritzbox, die können das.
Und zur Erklärung, was das ist.
Wenn ihr ein WLAN aufmacht, also im Prinzip heißt der WLAN auf, heißt
der, euer Access Point broadcastet eine SSID.
Ja, ich bin WLAN Max daheim oder WLAN Twitch.
Also der Name von eurem WLAN wird da ge-
broadcastet und in der Standard-Config ist das so.
Jedes WLAN hat ein WLAN Passwort.
Das müsst ihr bei den Geräten einstellen.
Da wählt ihr das WLAN aus, gibt das Passwort ein und das Gerät bekommt Zugriff auf das WLAN.
So weit, so gut.
Wenn ihr jetzt allerdings wollt, dass
Geräte im das gleiche WLAN kommen, aber unterschiedliche WLAN Passwörter haben,
dann wird es kompliziert.
Das Einzige, was es da traditionell gibt, ist WPA Enterprise.
Aber WPA Enterprise wird von so gut wie
keinem normalen WLAN Gerät unterstützt.
Also eure IoT Glühbirne, euren Receiver am Fernseher, whatever.
Die unterstützen alle kein WPA Enterprise.
Das heißt, wenn ihr jetzt die Geräte in das WLAN packen wollt, aber den Geräten
unterschiedliche Passwörter geben wollt, dann geht das einfach standardmäßig nicht.
Es sei denn,
der Access Point bzw.
das System, was ihr verwendet für WLAN daheim, unterstützt sowas wie DPSK.
Das heißt bei manchen Herstellern ein bisschen unterschiedlich.
Bei manchen heißt es DPSK, bei manchen heißt es MPSK.
Ich weiß gar nicht, wie es bei Unify heißt.
Mittlerweile können die das ja auch.
Aber wie gesagt, die konnten das sieben, acht Jahre lang nicht.
Guck mal, hier gibt es Leute, die haben es
versucht, selbst einzubauen in die Access Points vor
vier plus Jahren und haben es nur semi gut hingekriegt.
Und das ist kacke, dass das nicht funktioniert hat.
Und wofür ist das praktisch?
Jetzt fragen sich ja sicherlich einige so nach dem Motto, warum braucht man mehrere?
Warum will man mehrere Passwörter fürs
gleiche WLAN haben?
Also ich glaube, das beste Beispiel dafür ist, wenn man
viele IoT-WLAN-Geräte hat.
Ihr habt zum Beispiel eine Glühbirne, ihr
habt im Keller irgendwie was, was den Strom misst.
Ihr habt relativ viele IoT-Geräte.
Und jetzt stellt euch mal vor, die Glühbirne an der Decke, die ihr im WLAN
hängen habt und darüber RGB-Steuerung macht,
die geht kaputt.
So, jetzt nehmt ihr die Glühbirne und schmeißt die in den Müll.
Die Glühbirne ist kaputt.
Das heißt aber nicht, dass der Microcontroller in der Glühbirne
beziehungsweise der Speicher in der Glühbirne nicht mehr euer WLAN-Passwort
enthält. Also jemand, der es drauf anlegt, könnte jetzt an euren Mülleimer gehen,
die Glühbirne rausholen, den Microcontroller rauslöten und das WLAN-Passwort auslesen.
Das ist jetzt vielleicht ein bisschen
konstruiert, aber ich glaube, ihr wisst, worauf ich raus will.
Und sobald du mehrere WLAN-Passwörter
vergeben kannst für unterschiedliche Geräte, hast du das Problem nicht mehr.
Sobald du die Glühbirne wegschmeißt,
löscht du einfach dieses Gerät aus deiner WLAN-Config.
Und selbst wenn jemand dann das WLAN-Passwort aus eurer Glühbirne im
Mülleimer auslöst, kann er sich damit nicht mehr einloggen bei euch im WLAN.
Das ist, finde ich, eines der sinnigsten
Features, die sie sich in den letzten Jahren für WLAN-Geräte ausgedacht haben.
Und UniFi hat ewig gebraucht.
Also bis zum Schluss, wo ich mein UniFi-Zeug rausgeschmissen habe, hatten die das nicht.
Mittlerweile können sie es wohl seit einem Jahr oder seit einem halben Jahr oder so
was. Und das hat mich übelst abgefuckt bei UniFi, dass sie das nicht haben.
Was eines der Gründe mit war, warum ich UniFi rausgeschmissen habe.
So, ich skippe mal ein bisschen drüber. Wo zieht er denn jetzt eigentlich in seine
Co-Location endlich um?
Also wenn ich mir die Logos davon so angucke,
fällt mir genau jetzt, fallen mir jetzt genau drei Sachen auf, die man benutzen
könnte, die nicht einfach nur für Infrastrukturzwecke da sind.
Und zwar GitLab,
Hugo für irgendwelche Webseiten.
Und das ist auch ein Static Site Generator, glaube ich.
So, fertig.
Das hier kenne ich nicht.
Der Rest ist Management fürs Management.
Piehole. Ja, das ist okay.
Vielleicht noch das ja.
Der Böse muss doch erst mal wissen, wo dann WLAN ist.
Der hat ja nur die SSID und das ist richtig.
Aber in der Regel dürfte das WLAN auch
dort sein, wo die Glühbirne in der Mülltonne liegt.
Es sei denn, er geht auf die Müllkippe.
Ja, das stimmt schon.
Wie gesagt, ich habe ja gesagt, das ist
vielleicht ein bisschen konstruiert, das Beispiel, aber man sieht, worauf es rausläuft.
Und ich möchte ehrlich gesagt nicht,
dass mein WLAN Passwort quasi im Klartext in der Mülleimer liegt.
Das ist einer von den Neuen.
Ist es ein CRS oder ein CSS Switch?
CRSS oder CSS?
CRS. Ja, dann hast du vollwertiges Router OS drauf
und wahrscheinlich auch gar keine so schlechte CPU.
Dann kannst du da drauf auch...
Also dann ist das quasi eher ein Router als ein Switch.
Ich habe es ja schon ein paar Mal gesagt und mich dabei unbeliebt gemacht.
Es gibt keine Layer 3 Switches.
Kannst du ja machen.
Moin.
So, gucken wir das Video weiter.
Ich dachte, man sieht ja ein bisschen was vom Umzug, aber sieht man gar nicht, oder?
Dann gucken wir uns das jetzt auch nicht weiter an.
Ich dachte, man sieht ein bisschen was von...
Ja, dann ist ja langweilig.
Wow, wow, ich nicht.
Ja, das habe ich auch gefragt.
Warum man so viele Reverse-Proxys hat.
Zeig mal her.
Okay.
Und übrigens wisst ihr, was ich auch an MikroTik mag?
Die haben eine halbwegs konsistente Benahmung von ihren Produkten.
CRS bedeutet Cloud Router Switch.
Im Prinzip das Wichtige davon ist das R.
Das bedeutet, das ist ein Router.
Es ist ein Router mit vielen Ports, okay?
Der allerdings von der Hardware eher darauf ausgelegt ist, dass der Router nicht so gut ist.
Weil er beispielsweise
hohe Bandbreite switchen kann zwischen den Ports in Hardware.
Aber es ist ein Router, also das R ist das Wichtige.
Das heißt, du hast auch Router OS drauf.
So, 8G bedeutet normalerweise, früher bedeutet das 8 Gigabit Ports.
Warum die Cloud in die... Verstehe ich auch nicht.
Gibt keinen Sinn. Du hast 8 Gigabit Ports.
Allerdings mittlerweile lese ich hier raus, es sind 2,5 Gigabit Ports.
Und es hat 2 SFP Plus Ports, also 10 Gig.
Und dann gucken wir mal, ob ich recht habe.
Das ist nämlich auch eine Sache, die finde ich bei MikroTik ganz sinnig, dass die Teile
sinnvoll benannt sind.
Ich habe hier auch noch einen stehen und zwar einen
CRS
600... Ne, ich habe hier einen CSS 610 stehen.
Das ist noch 8 Gig
und 2 SFP Plus Ports.
Und man sieht,
wir haben 8 2.5 Gigabit Ports und 2 SFP Plus 10 Gigabit Ports.
Und vermutlich ist das Ding preis- leistungsmäßig auch ganz gut.
Ja, kannst du dich nicht dafür beschweren.
Das geht sicherlich noch günstiger, wenn es die Teile dann auch mal ordentlich
lieferbar gibt. Das ist aber okay.
Unter 200 Euro ein 8 Port 2,5 und 2 Port 10 Gig.
Was ist denn das USB?
Ich meine, man kann da drüber...
Das Ding hat einen Samba-Server.
Ich weiß, man kann auf den USB-Stick Dateien übertragen, aber dafür ist es ja
nicht wirklich gedacht. Was macht man damit?
Firmware-Update.
Weil man das hochladen kann normalerweise.
Ja, die MikroTik-Dinger sind preis- leistungsmäßig immer super.
Kannst du dich nicht beschweren.
Town MikroTik Access Points.
Ja,
ich mag die...
Ich mag die nicht so.
Ich mag MikroTik Switches, aber die Access Points...
Ich hatte lange keinen in den Händen mehr, muss ich sagen.
Vielleicht sind die mittlerweile besser.
Ich bin da kein großer Fan von.
Aber sie sind günstig auf jeden Fall.
Wir können ja mal kurz gucken.
Finde ich hier überhaupt die Access Points, Leute?
Die reinen Access Points?
IoT Products? Nee, oder?
Also hier LTE?
Wo sind denn hier überhaupt die Access Points?
Ihr Wireless Systems.
Your Wireless for Home and Office.
Das sind die ganz alten Dinger.
Ja, das sind auch die ganz alten Dinger, die willst du eigentlich nicht mehr haben.
Hier habe ich welche von.
Schmoll Access Point, ihr erinnert euch vielleicht noch.
Habe ich hier welche von liegen?
Ja, der hier ist übrigens mega nice.
Wenn man beispielsweise nicht WLAN-fähige Geräte
WLAN-fähig machen möchte.
Also zum Beispiel ihr wollt
bei euch am Hoftor irgendwas betreiben, was man per PoE versorgen kann.
Aber ihr habt keine Möglichkeit, dort Netzwerk hinzulegen.
Also ich mache es mal.
Konkretes Beispiel von meinem Hoftor machen wir jetzt einfach mal.
Mein Hoftor hat eine Tür Gegensprechanlage dort installiert und hat ein paar Kabel
durch die Wand liegen, nur für die Tür Gegensprechanlage.
Davon sind zwei Adern
unbenutzt.
Und ich wollte da eine Kamera hinbauen.
Die geht allerdings nur über PoE zu versorgen.
Und selbst
möchte ich halt per WLAN auf die Kamera
zugreifen, weil ich kriege da kein Netzwerkkabel durch.
Also was habe ich gemacht?
Ich habe die zwei Adernpaare, die zwei, die zwei Adern, die durch die Wand noch ging,
habe ich
auf der anderen Seite einen
12 Volt Netzteil dran, dran gehängt.
Hab das.
An den Access Point angeschlossen.
Ich hoffe, das ist der nicht, dass ich euch jetzt Mist erzähle.
Ja, ab das an den Access Point angeschlossen.
Es könnten übrigens auch 48 Volt gewesen sein.
Ich weiß es nicht mal genau.
Das, was die das, was die ich glaube, 12, 24, 24, 24, glaube ich, das normale PoE oder
48, ob die Kamera lief mit 24, whatever das Netzteil angehängt.
So, und jetzt konnte man folgendes machen.
Konnte ein Access Point power hier drüber.
Also hier kommen zwei Adern aus der Wand.
Der auf der anderen Seite vom Keller hängt das Netzteil dran.
Gehen hier dran.
Die Kamera selbst wird per PoE versorgt.
Ihr Netzwerkkabel an die Kamera.
Die Kamera wird per PoE versorgt und die der Access Point bringt sie dann quasi ins
Netz. Das ist ein echt nices Gerät für solche Nischen Anwendungen oder zum Beispiel
an irgendwelchen bisschen entfernteren Stellen Kameras anbringen willst,
die selbst kein WLAN haben, was ja durchaus sinnvoll sein kann, wenn es besonders
klein sein muss, beispielsweise an der an der Wand, an der Tür Gegensprechanlage.
Da wollte ich jetzt nicht so eine fette
WLAN Kamera, was ganz kleines, dezentes an der Tür Gegensprechanlage.
Die Rest, die Kabel verschwinden auch dahinter.
Da ist so eine Front, ein bisschen Platz dahinter.
Dafür sind diese Geräte echt praktisch.
Ansonsten würde ich die für nichts
verwenden, aber für solche Nischen Anwendung ist der ist der richtig richtig gut.
Hängt bei mir übrigens da immer noch rum
hinter der Tür Gegensprechanlage und macht da sein Ding.
So, und das ist auch alt.
Das Ding, das taugt nix.
Auch alles alt und taugt nix.
Das sind das ist noch Arzt.
Das ist vielleicht ein bisschen neuer.
Haben die haben die keine AX?
Okay, hier AX.
Die neuen kenne ich nicht.
Da weiß ich nicht, wie gut die Mikrotik Dinger sind.
Da weiß ich nicht, wie wie gut, wie gut die neuen Dinger sind.
Ist der Blazing Fast Wire.
Blazing ist da written in Rust.
Was unterstützt denn der?
Ja, vielleicht mal Zeit, just for fun so ein Ding wieder auszuprobieren.
Aber eigentlich unsinnig, weil ich habe ja meine zwei Access Points und mit denen
bin ich sehr zufrieden jetzt, aber meine sind noch AC, nicht AX Geräte.
Reicht aber auch dicke.
Was ist der?
Most Popular Proclaiming Languages.
Okay, das muss man jetzt mal kurz anschauen.
Ich mag diese Statistik Dinger.
Okay, ich predikte mal den Ausgang des Ganzen.
JavaScript. Ihr könnt ja mal mitraten.
Ich sage JavaScript auf der.
Die Frage ist, was most popular ist.
Meist, sagen wir mal so, meist benutzt, meist Interesse Projekte auf GitHub.
Am meisten verkaufte Programmierbücher.
Weiß man nicht genau.
Also von der von der Verbreitung und dem
aktuellen Impact, so wie das benutzt wird, würde ich sagen JavaScript erstes.
JavaScript auf dem ersten Platz eindeutig JavaScript ist überall.
Darf nicht vergessen Space X fliegt mit JavaScript ins Weltall.
Und Elektron MonkaS.
JavaScript gefolgt von Python, gefolgt von
Java.
Also ich, ich predikte.
Ich predikte JavaScript, Python, Java, Go.
Da bin ich mir nicht so sicher.
PHP.
Der Scheiße ist immer noch verbreitet as fuck.
Vielleicht .NET.
Ganz ehrlich, C ist da bestimmt auch noch irgendwie da.
Zwischen Quelle.
Ja, Rust ist eventuell auch dabei.
Ich könnte ich, aber Rust kommt relativ weit unten.
Ja.
Irgendwo, irgendwo wird hier C auch noch rumspuken.
Ja, vielleicht, vielleicht.
Ich hoffe, C++ ist irgendwo hier dann so.
Gucken wir mal.
Also das ist so meine Prediction für die Top 1, 2, 3.
Top 8. Gucken wir mal.
Ich mein, 1965, da ist klar, dass dann sowas wie Fortran, Kobol, Ada kommt dann später.
Das ist so Zeug da vorne mit dabei.
Das ist logisch, ja.
C Pascal.
Das ist noch pre-C.
Algol.
Ich mein, das ist, das ist ja schon wie Antike hier.
C dauert noch kurz, aber dauert nicht mehr, nicht, nicht mehr allzu lange.
Ich glaube, C kommt 1900. Boah, frag mich nicht.
1975 oder irgendwie war da, war die, gab's die erste C-Version.
Das dauert noch kurz.
Ja, ich wusste übrigens auch gar nicht, dass Pascal vor C war.
Die Basics werden hier gemacht gerade.
Dass Lisp so beliebt ist?
Bestimmt. Gab's damals schon IMAX?
Nee, 73 noch nicht.
IMAX Release.
Wann gab's das allererste IMAX?
85, okay.
So, jetzt, jetzt könnte langsam C.
So 75 oder so ist, glaube ich.
Irgendwie so in dem Dreh 75, glaube ich, ging's, ging's los mit C.
Ja, ey, Tschätke, hä?
Nicht schlecht, oder?
So, C wird jetzt erst mal den ganzen anderen Schrott überholen.
Pascal geht auch noch gut ab.
Pascal war eine ganze Zeit lang super beliebt.
Ganz viele Leute, die früher mal Mathelehrer waren und dann in der Schule
äh,
umgesattelt haben auf, ja, wir brauchen ja auch langsam mal einen Informatikkurs,
waren ja alte Mathelehrer und das Einzige, was die konnten, war Pascal programmieren.
Das war, das war bei Mathematikern super beliebt damals.
Pascal.
Ich bin mir nicht ganz sicher.
Ich bring's manchmal ein bisschen durcheinander.
War es nicht sogar so, dass der C-Sharp-Erfinder bei Pascal, nee,
da war bei Delphi mit dabei, oder?
Genau, bei einem dieser Sachen war er mit, mit am Start.
Ich weiß es nicht. Mal kurz hier.
Anders hier.
Wie schreibt man den Typ?
Jelsberg oder irgendwie so, ja.
Der hat, war das Pascal oder war das?
Ja, Turbo Pascal, genau.
Ja, das ist der C-Sharp-Erfinder.
Der war da auch mit am Start, ja.
Der ist ja auch schon ein alter Sack mittlerweile.
Ich auch, aber glücklicherweise nicht ganz so alt.
So, C wird jetzt erst mal diesen ganzen Schrott da oben überholen von Fortran und Gedöns, ja.
Ja, da.
Oh, nee, fucking, Leute.
So, in dem Dreh ist die Welt ein Stückchen schlechter geworden.
Wenn man, wenn mal, wenn mal Zeitreisen
erfunden werden und man der Welt einen Gefallen tun will,
dann sollte man zurückreisen zu 1980 und mit, ich weiß nicht wie der heißt,
Bjarne oder so, mal jemand reden, wie man die Sprache ordentlich aufbauen könnte.
Und dann haben wir vielleicht jetzt ein gutes C++.
Aber C geht steil.
Aber mir war nie klar, dass das so beliebt war.
Als ich angefangen habe, mich dafür zu interessieren.
Das dauert noch eine ganze Weile.
Ja, ich bin, ich bin hier ein Jahr alt gerade.
Ja, ein bisschen über ein Jahr
bin ich gerade alt.
Da war Ada null Bedeutung hatte das, wo ich angefangen habe.
Guck dir mal.
Wisst ihr, was mir auffällt, was sehr merkwürdig ist?
Wir sind, wir sind über 100 Prozent.
Gut, ich meine, das kann ja durchaus durchaus sein.
Es kann ja, man kann ja parallel mehrere Sprachen verwenden.
Vielleicht sind das auch keine Prozent, sondern
was auch immer.
Das ist irgendein Score.
Wie war das so?
Haben wir nicht schon in der Schule erklärt bekommen, dass
so Graphen ohne Einheiten nicht gewertet werden und so, dass das,
dass das nichts taugt, wenn da keine Einheiten dran stehen?
Beste.
Ah, muss das sein?
Muss ich C++?
Der Ernst haben auf dem zweiten Platz jetzt sehen?
Ja,
ist das, dass das Schmerz, der dann ja doch lieber Ada.
So langsam aber sicher könnte Java auch mal an den Start kommen.
Oder das dauert nicht mehr lang.
Oh, Pearl, Pearl war mal eine Zeit lang super beliebt.
Ich habe es nie so ganz verstanden.
Oh, jawohl.
Wir sind, wir sind verloren.
javascript ist am start java ist auch am start java ist die coolen leute nennen
java und javascript das wundert mich nicht javascript geht durch die decke ab
dann wo an wo es mit internet und browsern anfängt das ist jetzt so in dem
dreh also 1998 war schon online da war ich einer der ersten bei uns im
ort und dementsprechend php javascript und halt im enterprise business sektor
java php wird noch viel weiter abgehen jetzt java javascript guckt da jetzt so
eine eule um die ecke also es wird uns javascript wird uns auf jeden fall hier
in den top drei sprachen bis zum schluss erhalten bleiben
java geht wieder ein stückchen runter vermutlich oh guck mal hier ist die
sharp ploppt auch langsam auf 2002 das dürfte .net 1 gewesen sein 1 1 oder so
in dem dreh zwischenzeitlich müsste so 2000 ich
predikte mal
2006 7 rum und 2005 678 wird ruby auch mal kurz auf blitzen und dann wieder
verschwinden mit ruby ruby und rails war ja damals das ding schlechthin so 2007
rum 2006 rum wird gucken ob das stimmt dass da mal kurz ruby ruby hier so rein
läuft und wieder verschwindet ruby da sind wir ja das war die ruby und
rails
2010 2010 2010 2010 2010 2010 rad
10 kommt, glaube ich, das erste iPhone.
Irgendwie so, gell?
Vielleicht schon ein bisschen früher.
Aber irgendwie so in dem Dreh.
Ah, 2007, ja. Gut.
Das hat ein bisschen gebraucht mit App Store
und allem. Jetzt ist auf jeden Fall
Mac und iOS-Verbreitung nimmt zu.
Deswegen ist da jetzt auch
Objective-C mit dabei.
Visual Basic verschwindet glücklicherweise
wieder in der Versenkung, da wo es hingehört.
Ist Air und Matlab
nicht das gleiche?
Swift? Okay.
Ruby ist wieder weg vom Fenster, klar.
Ja.
JavaScript, das ist klar.
Das ist klar.
Ab hier ist das Internet Mainstream.
Und die Leute
haben auch festgestellt, dass man damit Geld machen kann.
Und man Apps in JavaScript
programmieren kann und allem.
Ich meine, seriously, das Internet war vorher schon Mainstream.
Aber jetzt so richtig, wo dann auch
die Oma online ist und so.
Aber seriously,
meine Prediction sieht gar nicht mal so falsch
aus jetzt, oder? Wir haben noch
zwei, drei Jahre Zeit. Das sieht schon
nicht verkehrt aus.
Kotlin, okay, ja.
Go!
Oh, Go muss ich aber
beeilen, wenn das so weit wird. Rust!
Na klar.
Ach, TypeScript habe ich vergessen. Da habe ich ja gar nicht
dran gedacht. Okay.
Jetzt gucken wir mal, wie akkurat meine
Sache war.
Okay. Das ist Schwachsinn.
JavaScript muss vor Python sein. Egal.
JavaScript, Python, Java.
Also mit den Top 3 war ich schon immer ziemlich
gut dabei.
Go ist weiter unten. Aber ich gehe auch
vom aktuellen Zeitpunkt aus. Das ist Ende
2022. Go ist auf jeden Fall mit dabei.
PHP ist auch mit dabei.
C ist auch mit dabei.
C Sharp ist auch mit dabei. Und sogar
Rust ist dabei.
C++ ist leider höher, als ich gedacht habe.
War ich doch gar nicht so verkehrt.
Ja.
Nice.
Was haben wir denn hier noch zu bieten?
How a leap day took down Microsoft.
Das sind wieder irgendwelche Ural-Sachen, wo
da drüber berichtet haben.
It has been over 10 years.
Ja.
Aber das ist 11 Minuten.
Das können wir uns mal angucken. Die Videos sind immer ganz gut.
On leap day, February 29th,
By the way, leap day?
Ah ja, okay. Das ist quasi
Februar.
Also das, was bei uns
Schalt... Nee, wie heißt das bei uns?
Schalt-Tag? Nee.
Wie nennt man das eigentlich? Schalt-Jahr.
Schalt-Jahr. Und wie heißt
der Tag bei uns?
Hat das irgendeinen speziellen Namen?
On leap day, February 29th,
2012, Windows Azure
now just called out.
Ich weiß, dass es 29...
Aber wir haben ja da extra Namen für.
Übrigens, wusstet ihr, dass Schweden mal
einen 30. Februar hatte?
Die Story hab ich schon öfters erzählt,
aber das hab ich mal in irgendeinem Konferenztalk
gehört, und zwar
Schweden
hatte mal einen 30. Februar,
weil Schweden
vergessen hat, ihren Kalender umzustellen.
Und
die Schweden,
wollten den Kalender umstellen,
und
die wollten das nicht machen, wie alle anderen
Staaten drumherum, quasi
am Stichtag wird umgestellt, sondern
die haben das über einen Zeitraum
von, boah, keine Ahnung,
10 Jahren oder so
wollten die das umstellen, von einem auf den
anderen Kalender, sodass quasi der
neue Kalender vom alten quasi...
dass der alte Kalender vom neuen quasi
eingeholt wird, und es dann
so smooth übergeht
in den neuen Kalender.
Das Problem war nur, dass sie's vergessen haben, umzustellen, weil sie Krieg geführt haben, in dem Jahr und dann mussten sie einen 30. Februar einführen, um das Ganze wieder, dass es wieder funktioniert hat, und dann haben sie umgestellt auf den neuen Kalender.
Das heißt, irgendwann, keine Ahnung, fragt mich nicht, wann das war, 1650 oder so, hatte Schweden mal einen 30. Februar.
Aber Azir, auch bekannt als Azir, Azor, Azor, Azuray und Asus,
hatte einen großen Ausfall, als seine VMs,
GA's, failed to generate
Transfer Certificates.
Was?
Das war zu viel für mich.
Causing HA's to report the servers as
faulty to the FCs, which would
trigger automatic service healing, which
would inadvertently...
Wenn du Smart Home richtig machen willst,
dafür musst du nicht wirklich eine Programmiersprache lernen.
Blockly geht auch, klar.
Also, ich persönlich mag
Home Assistant am liebsten.
Blockly klingt mir ein bisschen danach, als
benutzt du IO Broker, kann das sein?
Oder was benutzt du dafür?
...exacerbate the issue, and eventually take down the entire cluster, so the sentence makes no sense...
IO Broker.
Ich wusste wieder.
...right now, and should be reminiscent of day one at a new software job.
But I believe after this video you will be able to re-watch this section and think, huh, it all makes sense now, perhaps I learned something on YouTube today, even if it was just a bunch of domain-specific terms I'll never see again for the rest of my life.
So let's start with Azure, which is just
Microsoft's cloud computing platform.
Yeah.
Though you may be more familiar with its
competitors like, eh, Alibaba Cloud,
Oracle Cloud, IBM Cloud,
maybe even Google Cloud, the fundamental
offering of these companies is the ability
to rent virtual machines.
These virtual machines are servers
simulated by software, so a bunch
of virtual machines can run on the same
hardware, just like how multiple virtual
reality headsets can run in the
same reality. Warum haben wir eigentlich Subtitel?
Egal, lassen wir mal an.
...anyways, these virtual
Ich muss ja sagen, mir persönlich gefällt das Azure Web Interface.
Die haben ja dieses zwei gesplittete Web, also wenn du das hier anklickst, klappt das nochmal aus und hier sind die eigentlichen Daten dann erst.
Aber mir gefällt das Azure Web Interface.
Ich mag das mehr als Google Cloud, aber noch mehr Azure Web Interface Enjoyers.
Ja, wir wissen, dass die Cloud auch nur Computer sind, die woanders stehen.
Deswegen wissen wir auch, dass das nächste Jahr wird das Jahr von Serverlessness.
Oder wie war das?
Serverlessness.
Also sprich, man betreibt die Dinger wieder selbst.
Ja, hier in Hanau um die Ecke hat Google jetzt auch ein Rechenzentrum.
Also, bin ich mir gar nicht sicher, ob sie wollen oder schon haben, aber sie werden auf jeden Fall eins haben.
Gibt es hier in Hanau, gibt es Maps Hanau Wolfgang Kaserne?
Irgendwo hier hinten.
Oh, das ist auch so ein Ding.
Wisst ihr, wie sehr mich das nervt, dass man nicht mal auf Google...
Google Maps jetzt kommt, beim Anklicken hier.
Das regt mich so auf.
Ich weiß, da sind irgendwelche EU-Regularien oder sowas, dass man das nicht mehr darf.
Aber es ist nervig.
Ja, irgend so ein altes Kasernen-Areal hat sich, genau, hat sich Google jetzt gekauft.
Und will ein Rechenzentrum hier um die Ecke bauen.
... als VMs, aber diese Begriffe sind völlig unverändert.
Die US nennt sie Instanzen, Microsoft will anders sein und benutzt VMs statt.
Ich frage mich, was Google sie nennt.
Äh, Instanzen.
Ja, steht aber auch da, Instanzen.
Ein Stück Software, das den Hypervisor nennt, läuft auf jedem Server, um Kunden-VMs zu starten.
Das war wahrscheinlich Hyper-V oder irgendeine interne Implementierung davon,
die einen Type-1-Hypervisor ist, der direkt auf Hardware läuft.
Vergleiche das mit Type-2-Hypervisor...
Ich bin mir gar nicht sicher, was Google verwendet.
Wahrscheinlich irgendeine KVM-Geschichte für Linux.
Vielleicht auch ESX?
Ist da nicht gestern ein Lagerhaus abgebrannt?
Keine Ahnung.
Ja, wann geht's denn jetzt eigentlich los mit Ausfall bei Microsoft?
Wie will der mir sagen, dass meine VM kein Enterprise-Setup ist hier?
Das ist Arch-Linux. Mehr Enterprise-High-IQ geht nicht, by the way.
...you see a host OS.
Furthermore, when you read the docs, you see that there is a so-called root or parent partition,
which runs Windows and creates guest VMs.
So what's going on here?
Well, when you run Hyper-V, it transparently converts the original OS into a special VM in the parent partition.
This host OS...
Also, mich wundert nicht, dass Hyper-V abgekackt ist.
Hyper-V ist ja eh so'n Ding.
Irgendjemand bei euch in der misslichen Lage, sich um Hyper-V kümmern zu müssen?
...behaves identically as before.
It can talk directly to hardware as if the Hypervisor didn't exist and run Fortnite.
But you can now easily manage your guest machines from the host OS.
Although the interface makes it look like you're creating VMs on top of the host OS,
it is actually making Hypercalls to Hyper-V, which spins up VMs in the child partition,
which then talk directly to Hyper-V.
So there are a bunch of servers running these Hypervisors,
and clusters of about 1,000 servers are managed by a Fabric Controller or FC,
which provisions and monitors VMs in its assigned cluster.
Dividing a data center into clusters is very...
Wann geht's denn los?
Hier, the incident.
Wir gucken uns...
Wir skippen mal kurz.
A host agent receives a request to start a new VM,
and sends a Hypercall to do so.
It patiently waits for the initialization to complete,
but little did it know that the VM was doomed to an unseemly fate.
The guest agent starts up and tries to generate the transfer certificate.
It nonchalantly passes in the expiration date it's been instructed to use.
Ich glaube mittlerweile doch, dass es AI ist.
Der Kerl hörte sich früher genauso an.
Hat er seine Stimme AI-isiert?
Wobei, vor einem Jahr gab's das.
Vor einem Jahr, die gibt's seit einem Jahr.
Wir haben schon früher Videos von dem geguckt.
...but that would be the last thing that it ever...
Das ist AI-Stimme, oder?
So langsam aber sicher glaub ich auch, dass das AI-Stimme ist.
...does.
The GA airs out and terminates,
leaving the VM initialization in limbo.
The HA is still waiting.
Seconds pass, then minutes, then dozens of minutes.
Something wasn't right.
The HA checks its clock.
Es hat 25 Minuten gedauert.
Das war die längste Liste, auf die das H.A. beurteilt wurde, um einen unabhängigen H.A. zu warten.
Lass uns versuchen, ihn auf und zurück zu schalten, dachte das H.A.
Was meistens ja eine gute Sache ist.
Es reinitialisiert das H.A., das die Start-up-Sequenz ein zweites Mal versucht.
Das selbe passiert.
Das H.A. berichtet niemals einen Erfolg an das H.A.
Eine letzte Zeit, dachte das H.A., als es das H.A. wieder zurückgeleitet hat.
Es wurde beurteilt, drei Mal zu versuchen,
weil zwei nicht genug sind und vier zu viele sind.
Aber das selbe Ergebnis geschieht unvergesslich.
Jetzt beurteilt das H.A., dass es ein Hardware-Problem sein muss,
und dass etwas...
gesessen hätte, der vielleicht ein bisschen Ahnung davon gehabt hätte.
Man kennt jetzt das eigentliche Problem nicht.
Vielleicht wäre das gar nicht zu dem Unfall dann gekommen.
Okay.
Okay, das Ding.
Das Ding switcht zu Investigate, versucht die VMs zu migrieren und dabei kacken die wieder ab beim nach dem Migrieren gestartet werden.
Also okay, das ist so quasi Chain Reaction.
Es geht immer mehr kaputt.
Was man daran auch wieder schön sieht ist, DateTime ist einfach nur der pure Abfuck.
Egal in welcher Programmiersprache, in welchem Kontext, DateTime Handling ist einfach der größte Shit ever.
Der Cluster hat bessere Tage gesehen.
Es gibt so viele Server in HI, dass der FC sich abgibt.
Er markiert den gesamten Cluster als HI und verlängert alle weiteren automatischen Aktionen.
Richtig, also all das bedeutet, dass es aktuell unmöglich war, eine VM zu starten und deine VM würde gestoppt werden, wenn es eine automatische Serviceheilung verursacht hätte.
Aber es wird tatsächlich etwas schlimmer.
Der GA startet auch wieder, wenn es Updates erhält.
Und es gab eine aufwändige Anmeldung, um den GA und den HI zu updaten.
Also alle Clusters, die erholt wurden,
werden auch wieder abgestoppt werden.
Um 6.38 Uhr haben die Devs herausgefunden und hatten einen guten Lächeln an der Trivial-Leap-Day-Logik
und dem Fakt, dass sie für die nächsten 24 Stunden nicht schlafen werden.
Um 6.55 Uhr haben die Ingenieure die Kundenverarbeitung der VMs abgedeckt,
was sie verhindert, dass sie die Applikationen fruchtlos updaten, updaten oder skalieren,
denn all das würde die Automatische Serviceheilung triggeren und das Problem schlimmer machen.
Um 10 Uhr hatten sie einen Plan.
Um 11.20 Uhr hatten sie den GA-Fix bereit.
Also das muss man denen echt mal lassen, das ist doch schon relativ schnell.
Um 11.20 Uhr hatten sie einen Plan. Um 11.20 Uhr hatten sie den GA-Fix bereit.
Die sind schon mit sowas relativ zackig, aber da hängt ja auch richtig Geld dran bei denen, ja.
Also wenn das VM-Management in Azure Probleme hat,
mein 2012 vielleicht auch nicht so viel wie heute, aber da hängt richtig Asche dran.
Und im Zweifelsfall nicht nur das, was ihnen entgeht durch man kann den Service nicht benutzen,
sondern wenn sie ihre SLA's reißen, im Zweifelsfall auch noch irgendwelche Entschädigungen und sonst was.
Das geht wirklich richtig schnell in richtig hohe Summen, wenn das nicht tut.
GA-Fix ready.
Da wird alles zusammengetrommelt, was zusammengetrommelt werden kann.
Nur diejenigen, die dabei waren, wissen, weshalb das Fix in der richtigen Art und Weise
die Daten auf ein Jahr gedauert hat und fünf Stunden gedauert hat.
Um 1.50 Uhr am nächsten Tag haben sie das Testen beendet.
Um 2.11 Uhr haben sie den neuen GA-Fix ausgedruckt, um einen Produktionsplan zu machen,
um eine Generation zu ermöglichen, um ihr erzeugen zu können, dass ihr ihr Team
zu einem neuen Kluster einstellen könnt.
Hier sind die ersten 30 Stunden.
Nächste 20 Stunden.
Also, ohne Mist, das ist wirklich, da ist wirklich relativ zackig hier, wenn man sich das anguckt, ja.
Was sind das, 16 Stunden oder so?
Nee, äh, äh, 20 Stunden, oder?
N serie GEM, die Majorität nahm, ne, Moment, nee, nochmal, ach stunden sind
das nur oder acht Stunden.
Guck mal.
DAS IST, DA.
20.
ALTERNAT, GENERAL, 3.
bis 4 das sind es sind acht stunden oder 24 bis vier uhr sind dann sind acht stunden zwölf
stunden so ja ich habe ich habe das hier jetzt ich habe ab identified gerechnet
back identified bis gefixt sind acht das ist nicht schlecht ja der majority of the
clusters had been fixed why not all of them well going back to 2 am after they
finished testing the fix there were seven clusters in which the unrelated GA
and HE deployment was in progress so some servers had the new software while
others did not in the other clusters they simply took the existing version
and added the fixed GA but here there were two versions they could add the
fixed GA to either but in the end they decided to choose the old one since it
was time tested and likely safer but when they were creating this
package with the fixed GA and old HE they somehow miss clicked and included a
networking plug-in from the new version which if deployed would be a disaster
since it was incompatible with the old HE they had a second lifeline though as
according to standard practice they must first test the rollback package on a
single server to see if it even works they did that and saw that VM started
successfully and appeared healthy so they were eager to go ahead with the
deployment so at 2 47 am they started blasting which
every server in all seven clusters at the same time this incompatibility soon
became evident as it would turn off network access for the VMs on the server
rendering them essentially unusable to make matters worse some major Azure
services such as their access control service happened to be hosted in these
seven clusters so at 3 40 am they prepared a new deployment which had the
compatible version of the network plug-in and tested it more thoroughly
before blasting out the fix once more at 5 40 am
was ist hier was ich daran immer cool finde man sieht daran dass die auch alle
nur mit wasser kochen ja das wirkt von außen halt so black box mesium denkst du
okay das wird halt einfach das geht halt einfach das ist innen drin genau der
gleiche mist wie überall anders auch vielleicht ein bisschen besser getestet
ja vielleicht auch ein bisschen besser durchdacht zentralisiert und auch
wirklich gute leute dran aber im prinzip unterm strich ist es der gleiche mist wie überall anders ist
aber im prinzip unterm strich ist es der gleiche mist wie überall anders auch
Wasser auch. Und es kochen alle nur mit Wasser.
Der Zeitverhandlung ist einfach abfuck.
Aber 8 Stunden sowas hinzukriegen?
Echt nicht ohne.
Du musst es ja erstmal finden.
Der eigentliche Fix, wenn du es gefunden hast, ist easy.
Meistens.
Je nachdem, was es war.
Hallo, moin.
Was ist denn da los?
Ich hab vor 3 Stunden
mein Artstealungsgeupdate
und es gibt keine neuen Packages.
Das ist aber nicht, was ich hier von
Pleading Edge Rolling Release erwarte.
Ich brauch neue Packages.
Ja, stimmt, du hast recht.
Ja, ja, das ist vorher passiert.
Ab Bug Identify.
Wobei man halt nicht weiß, ob Bug Identified
bedeutet mit, wir wissen, wo es ist
und was man fixen muss, sondern halt nur, wir wissen,
es ist irgendwas auf unserer Seite
und ungefähr, wo es sein muss
und das eigentliche Suchen.
Also ich hab das so interpretiert, dass die wussten,
okay, bei uns ist irgendwas verbuggt mit
Date-Time-Handling und dann mussten sie erstmal suchen,
wo denn jetzt genau und was
und was machen wir dagegen.
Also ich find das in 8 Stunden echt nicht schlecht.
Das ist ja nicht jetzt irgendwie
da in den Rack, was irgendwo rumsteht,
wo man mit dem USB-Stick hinrennst oder so.
Also in so einer großen Umgebung sind 8 Stunden nicht schlecht.
Ja, bei uns früher,
sowohl damals noch beim Provider,
als auch bei der Bank, wo ich gearbeitet hab,
da wär natürlich 8 Stunden Ausfall echt fatal gewesen,
aber das waren halt auch
deutlich weniger komplexere Systeme als Azure.
Wobei 8 Stunden Ausfall haben wir auch hingekriegt.
Aber die meisten Sachen waren immer, immer sehr schnell gefixt.
Das war dann mal eine Stunde weg,
zwei Stunden weg, eine halbe Stunde weg.
Wenn mal was war,
da waren wir meistens deutlich weniger.
Aber das war dann auch oftmals nur Probleme,
eben nicht auf Infrastrukturebene,
sondern Anwendungslogik.
Chatke,
ich geh jetzt was essen.
Ich hab Hunger.
Hunger AF.
Ich hab euch ja versprochen, wir streamen mehr.
Und
ich hab's mir zu Herzen genommen.
Wir haben ja gestern gestreamt, heute gestreamt,
vielleicht streamen wir heute Mittag nochmal.
Und nächste Woche ist Feiertag,
da bin ich auch am Start.
Eventuell bin ich Montag,
noch mal am Start.
Gibt jetzt wieder ein bisschen mehr Streams,
zumal es auch einiges gibt,
was erledigt werden muss.
Aber jetzt erst mal
PepoFatTime.
Ach ja, es ist Sonntag.
Ratet mal, was es heute gibt.
Lachsnudel.
Nein, falsch.
Wrong.
Keine Nudel mit Lachs.
Spaghetti-Bolle.
Korrekt.
Es gibt ja eigentlich nur zwei Varianten sonntags, ne?
Spargel.
Ey, ich hab letztens was gegessen,
das war richtig nice,
weil du sagst Spargel.
Das war, tja, hm,
grüner Spargel,
dabei mit Kartoffel,
Tomaten
und
Parmesan-Käs.
Sowas hier in der Richtung war das, ja.
Und das hat sehr, sehr nice geschmeckt.
Wenn es auch auf den ersten Blick
mega-öko-gesund aussieht,
hat das wirklich nice geschmeckt in Kombination.
Nee, so sah das nicht aus.
Das sah besser aus.
Ja, eher so in der Richtung.
Das hat wirklich, hat wirklich gut geschmeckt.
Hätte ich gar nicht gedacht.
Wie gesagt, so, so, das sah so, so, so öko-gesund aus.
Aber nee, war echt nice.
Bis echt ist das so.
Aber das ist ja nicht schlimm, weil ich bin ja auch Boomer.
Ich werde dieses Jahr 40.
Könnt ihr euch das vorstellen?
Da ist man Boomer.
Aber sowas von.
Boomer ist ja ein weitreichender Begriff.
Und nachdem in der heutigen Zeit eh jeder alles sein kann,
gibt es bestimmt auch schon 20-jährige Boomer.
Boomer ist ja mehr eine Denkweise als ein Alter.
Aber wenn es das angeht, bin ich wahrscheinlich der jüngste Boomer.
In meiner Generation ist das halt,
das zieht sich durch meine Generation zieht sich eben so,
zieht sich dieses Geboomer.
Ja.
Du hast welche, die sind mit Technik, Computer und Sachen aufgewachsen.
Die sind keine Boomer und werden es wahrscheinlich auch nicht.
Und du hast welche, die sind noch so old school.
Und das sind jetzt in meinem Alter schon die Ultra-Boomer.
Das sind die, die auf Facebook gehen und an Ostern anzügliche Witze mit Teufel-Emoji posten.
Und sich super lustig finden.
Eierwitze an Ostern in Facebook-Gruppen posten mit Teufel-Emoji.
Das sind die Ultra-Boomer.
Da gibt es doch auch irgendwie so ein Subreddit.
Ich bin, ich bin 40 und lustig oder irgendwie sowas.
Wie geht das?
Ich bin über 40 und lustig.
Irgendwie so in der Richtung.
Ich weiß nicht.
Ja doch, ich glaube, so heißt das.
Ja.
Egal.
Ich gehe jetzt was essen.
Vielleicht bin ich nachher nochmal da.
Kann aber auch sein, dass ich nicht da bin, weil MMO-Kreisel-Crime ist strong.
Es hat doch vorhin irgendjemand einen Heiser-Artikel geschrieben.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Dann gehe ich, äh, nicht pennen,
essen. Fressen.
Gehe ich jetzt. Bis dann.
See you.
